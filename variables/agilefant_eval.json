{"lexical_info": {"<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\annotations\\\\PrefetchId.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "SCS_AnnotationDeclaration": ["PrefetchId"], "SCS_MemberReference": ["RUNTIME", "FIELD"], "CN": [], "CO": [], "CODE": "package fi.hut.soberit.agilefant.annotations;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.FIELD)\npublic @interface PrefetchId { }\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\AgilefantWidgetBusiness.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["AgilefantWidgetBusiness"], "MN": ["create", "move", "generateWidgetGrid"], "PN": ["type", "objectId", "collectionId", "widget", "position", "listNumber", "collection", "minNumberOfLists"], "CO": ["/*\n     * CRUD\n     */", "/**\n     * Creates and returns a new AgilefantWidget. \n     */", "/**\n     * Move the widget to a specified position in its collection. \n     */", "/**\n     * Arranges the given widgets to lists according to their listNumber property.\n     * @param minNumberOfLists  TODO\n     */"], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport java.util.List;\n\nimport fi.hut.soberit.agilefant.model.AgilefantWidget;\nimport fi.hut.soberit.agilefant.model.WidgetCollection;\n\npublic interface AgilefantWidgetBusiness extends GenericBusiness<AgilefantWidget> {\n\n    /*\n     * CRUD\n     */\n    /**\n     * Creates and returns a new AgilefantWidget. \n     */\n    public AgilefantWidget create(String type, Integer objectId, Integer collectionId);\n    \n    \n    /**\n     * Move the widget to a specified position in its collection. \n     */\n    public void move(AgilefantWidget widget, int position, int listNumber);\n    \n    /**\n     * Arranges the given widgets to lists according to their listNumber property.\n     * @param minNumberOfLists  TODO\n     */\n    public List<List<AgilefantWidget>> generateWidgetGrid(WidgetCollection collection, int minNumberOfLists);\n    \n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\AssignmentBusiness.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["AssignmentBusiness"], "MN": ["store", "addMultiple", "addMultiple"], "PN": ["assignmentId", "personalLoad", "availability", "backlog", "userIds", "personalLoad", "availability", "backlog", "userIds"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport java.util.Set;\n\nimport fi.hut.soberit.agilefant.model.Assignment;\nimport fi.hut.soberit.agilefant.model.Backlog;\nimport fi.hut.soberit.agilefant.model.SignedExactEstimate;\n\npublic interface AssignmentBusiness extends GenericBusiness<Assignment> {\n    public Assignment store(int assignmentId, SignedExactEstimate personalLoad,\n            int availability);\n\n    public Set<Assignment> addMultiple(Backlog backlog,\n            Set<Integer> userIds, SignedExactEstimate personalLoad, int availability);\n    public Set<Assignment> addMultiple(Backlog backlog, Set<Integer> userIds);\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\AuthorizationBusiness.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["AuthorizationBusiness"], "MN": ["isBacklogAccessible", "isUserAccessible"], "PN": ["backlogId", "user", "otherUserId", "user"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport fi.hut.soberit.agilefant.model.User;\n\npublic interface AuthorizationBusiness {\n\n\tpublic boolean isBacklogAccessible(int backlogId, User user);\n\t\n\tpublic boolean isUserAccessible(int otherUserId, User user);\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\BacklogBusiness.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["BacklogBusiness"], "MN": ["getNumberOfChildren", "getChildBacklogs", "calculateStoryPointSum", "calculateDoneStoryPointSum", "addAssignees", "getParentProduct", "getRootParentId", "getStoryPointSumByIteration", "getStoryValueSumByIteration", "getCompletedStoryValueSumByIteration", "daysLeftInSchedulableBacklog", "calculateBacklogTimeframePercentageLeft", "retrieveUnexpectedStories", "retrieveAllStandAloneIterations"], "PN": ["backlog", "backlog", "backlogId", "backlogId", "backlogId", "userIds", "backlog", "backlog", "backlog", "backlog", "backlog", "backlog", "backlog", "backlog"], "CO": ["/**\n * This description contains generic information on <code>Business</code>\n * classes rather than on <code>BacklogBusiness</code> in particular.\n * \n * The <code>Business</code> objects ideally contain all transactional logic\n * of the application. Any method calls made inside <code>Business</code>\n * objects are intercepted and made transactional. The transactions propagate\n * such that the same transaction is still used if a <code>Business</code>\n * object calls the methods of another <code>Business</code> object.\n * \n * Note that unlike DAOs, the Business objects need NOT have a 1:1 relationship\n * with underlying model. One should add <code>Business</code> classes for\n * different <em>aspects</em> of the program, not for different classes.\n * Hence, <code>BacklogBusiness</code> can naturally handle actions targeted\n * at both <code>Story</code> and <code>Backlog</code>. How and when\n * new <code>Business</code> objects are created is usually be the\n * responsibility of the project architect.\n * \n * Also note that Business objects automatically commit transactions and that\n * when a transaction is committed, Hibernate will automatically cause all\n * peristent objects that have changed to be updated in the database.\n * \n * @author Teemu Ilmonen\n * \n */", "/**\n     * Get the number of backlog's child backlogs.\n     */", "/**\n     * Gets the backlog's child backlogs or all products if backlog is <code>null</code>.\n     */", "/**\n     * Recurse the backlog's parent product.\n     */", "/**\n     * Retrieve stories that have been added to the iteration after the\n     * iteration has started, but have not been removed from the iteration\n     * before the iteration ended. Notice: will return stories which have been\n     * removed from the iteration after iteration has ended.\n     */"], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.Set;\n\nimport org.joda.time.Days;\n\nimport fi.hut.soberit.agilefant.model.Backlog;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.Product;\nimport fi.hut.soberit.agilefant.model.Schedulable;\nimport fi.hut.soberit.agilefant.model.Story;\n\n/**\n * This description contains generic information on <code>Business</code>\n * classes rather than on <code>BacklogBusiness</code> in particular.\n * \n * The <code>Business</code> objects ideally contain all transactional logic\n * of the application. Any method calls made inside <code>Business</code>\n * objects are intercepted and made transactional. The transactions propagate\n * such that the same transaction is still used if a <code>Business</code>\n * object calls the methods of another <code>Business</code> object.\n * \n * Note that unlike DAOs, the Business objects need NOT have a 1:1 relationship\n * with underlying model. One should add <code>Business</code> classes for\n * different <em>aspects</em> of the program, not for different classes.\n * Hence, <code>BacklogBusiness</code> can naturally handle actions targeted\n * at both <code>Story</code> and <code>Backlog</code>. How and when\n * new <code>Business</code> objects are created is usually be the\n * responsibility of the project architect.\n * \n * Also note that Business objects automatically commit transactions and that\n * when a transaction is committed, Hibernate will automatically cause all\n * peristent objects that have changed to be updated in the database.\n * \n * @author Teemu Ilmonen\n * \n */\npublic interface BacklogBusiness extends GenericBusiness<Backlog> {\n\n    /**\n     * Get the number of backlog's child backlogs.\n     */\n    public int getNumberOfChildren(Backlog backlog);\n    \n    /**\n     * Gets the backlog's child backlogs or all products if backlog is <code>null</code>.\n     */\n    public Collection<Backlog> getChildBacklogs(Backlog backlog);\n\n    public int calculateStoryPointSum(int backlogId);\n    \n    public int calculateDoneStoryPointSum(int backlogId);\n    \n    public void addAssignees(int backlogId, Set<Integer> userIds);\n\n    /**\n     * Recurse the backlog's parent product.\n     */\n    public Product getParentProduct(Backlog backlog);\n    \n    public int getRootParentId(Backlog backlog);\n    \n    public int getStoryPointSumByIteration(Iteration backlog);\n    \n    public int getStoryValueSumByIteration(Iteration backlog);\n    public int getCompletedStoryValueSumByIteration(Iteration backlog);\n    \n    public Days daysLeftInSchedulableBacklog(Schedulable backlog);\n    public float calculateBacklogTimeframePercentageLeft(Schedulable backlog);\n    \n    /**\n     * Retrieve stories that have been added to the iteration after the\n     * iteration has started, but have not been removed from the iteration\n     * before the iteration ended. Notice: will return stories which have been\n     * removed from the iteration after iteration has ended.\n     */\n    public List<Story> retrieveUnexpectedStories(Schedulable backlog);\n    \n    public Collection<Backlog> retrieveAllStandAloneIterations();\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\BacklogHistoryEntryBusiness.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["BacklogHistoryEntryBusiness"], "AN": ["UPDATE_INTERVAL"], "SCS_VariableDeclarator": ["UPDATE_INTERVAL"], "MN": ["updateHistory"], "PN": ["backlogId"], "CO": ["// 2", "// hours", "/**\n     * Update project history associated with the given backlog, if the given\n     * backlog is a Product nothing will be done. If an existing entry has been\n     * created to the history within UPDATE_INTERVAL that entry will be updated,\n     * else a new entry will be created. The intension of updating entries is to\n     * have a smoother history if multiple entries are updated within a short\n     * period.\n     */"], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport org.joda.time.Duration;\n\nimport fi.hut.soberit.agilefant.model.BacklogHistoryEntry;\n\npublic interface BacklogHistoryEntryBusiness extends\n        GenericBusiness<BacklogHistoryEntry> {\n\n    public static final Duration UPDATE_INTERVAL = new Duration(1000 * 3600L * 2L); // 2\n                                                                             // hours\n\n    /**\n     * Update project history associated with the given backlog, if the given\n     * backlog is a Product nothing will be done. If an existing entry has been\n     * created to the history within UPDATE_INTERVAL that entry will be updated,\n     * else a new entry will be created. The intension of updating entries is to\n     * have a smoother history if multiple entries are updated within a short\n     * period.\n     */\n    void updateHistory(int backlogId);\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\DailyWorkBusiness.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["DailyWorkBusiness"], "MN": ["getQueuedTasksForUser", "rankUnderTaskOnWhatsNext", "rankToBottomOnWhatsNext", "removeFromWhatsNext", "addToWhatsNext", "removeTaskFromWorkQueues", "getQueuedStoriesForUser", "rankUnderStoryOnWhatsNext", "rankToBottomOnWhatsNext", "removeFromWhatsNext", "addToWhatsNext", "removeStoryFromWorkQueues", "getAssignedWorkFor", "setTransferObjectBusiness", "setTaskDAO", "setWhatsNextEntryDAO", "setWhatsNextStoryEntryDAO", "setTaskBusiness", "setRankingBusiness", "setStoryDAO"], "PN": ["user", "user", "task", "upperTask", "user", "task", "user", "task", "user", "task", "task", "user", "user", "story", "upperStory", "user", "story", "user", "story", "user", "story", "story", "user", "transferObjectBusiness", "dao", "whatsNextEntryDAO", "whatsNextStoryEntryDAO", "taskBusiness", "rankingBusiness", "storyDAO"], "CO": ["/**\n     * Retrieves the rank ordered list of next tasks for user\n     */", "/**\n     * @param user the user whose daily work we are ranking\n     * @param task\n     * @param upperTask\n     * @return\n     * @throws IllegalArgumentException\n     */", "/**\n     * @param user the user whose daily work we are ranking\n     * @param task the task ...\n     */", "/**\n     * Removes the task from user's what's next list\n     * @param user\n     * @param task\n     */", "/**\n     * Adds the task to the user's what's next list\n     * @param user\n     * @param task\n     */", "/**\n     * Removes all queue entries that are related to this task from the queues\n     * @param task\n     */", "/**\n     * Retrieves the rank ordered list of next stories for user\n     */", "/**\n     * @param user the user whose daily work we are ranking\n     * @param story\n     * @param upperStory\n     * @return\n     * @throws IllegalArgumentException\n     */", "/**\n     * @param user the user whose daily work we are ranking\n     * @param story the story ...\n     */", "/**\n     * Removes the story from user's what's next list\n     * @param user\n     * @param story\n     */", "/**\n     * Adds the story to the user's what's next list\n     * @param user\n     * @param story\n     */", "/**\n     * Removes all queue entries that are related to this story from the queues\n     * @param story\n     */", "/**\n     * Retrieves all assigned and current work for the given user, in proper format\n     * @param user\n     * @return\n     */"], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport java.util.Collection;\n\nimport fi.hut.soberit.agilefant.db.StoryDAO;\nimport fi.hut.soberit.agilefant.db.TaskDAO;\nimport fi.hut.soberit.agilefant.db.WhatsNextEntryDAO;\nimport fi.hut.soberit.agilefant.db.WhatsNextStoryEntryDAO;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.Task;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.model.WhatsNextEntry;\nimport fi.hut.soberit.agilefant.model.WhatsNextStoryEntry;\nimport fi.hut.soberit.agilefant.transfer.AssignedWorkTO;\nimport fi.hut.soberit.agilefant.transfer.DailyWorkTaskTO;\nimport fi.hut.soberit.agilefant.transfer.StoryTO;\n\npublic interface DailyWorkBusiness {\n    /**\n     * Retrieves the rank ordered list of next tasks for user\n     */\n    public Collection<DailyWorkTaskTO> getQueuedTasksForUser(User user);\n    \n    /**\n     * @param user the user whose daily work we are ranking\n     * @param task\n     * @param upperTask\n     * @return\n     * @throws IllegalArgumentException\n     */\n    public DailyWorkTaskTO rankUnderTaskOnWhatsNext(User user, Task task, Task upperTask) throws IllegalArgumentException;\n    \n    /**\n     * @param user the user whose daily work we are ranking\n     * @param task the task ...\n     */\n    public DailyWorkTaskTO rankToBottomOnWhatsNext(User user, Task task) throws IllegalArgumentException;\n\n    /**\n     * Removes the task from user's what's next list\n     * @param user\n     * @param task\n     */\n    public void removeFromWhatsNext(User user, Task task) throws IllegalArgumentException;\n\n    /**\n     * Adds the task to the user's what's next list\n     * @param user\n     * @param task\n     */\n    public WhatsNextEntry addToWhatsNext(User user, Task task) throws IllegalArgumentException;\n    \n    /**\n     * Removes all queue entries that are related to this task from the queues\n     * @param task\n     */\n    public void removeTaskFromWorkQueues(Task task);\n    \n    /**\n     * Retrieves the rank ordered list of next stories for user\n     */\n    public Collection<StoryTO> getQueuedStoriesForUser(User user);\n    \n    /**\n     * @param user the user whose daily work we are ranking\n     * @param story\n     * @param upperStory\n     * @return\n     * @throws IllegalArgumentException\n     */\n    public StoryTO rankUnderStoryOnWhatsNext(User user, Story story, Story upperStory) throws IllegalArgumentException;\n    \n    /**\n     * @param user the user whose daily work we are ranking\n     * @param story the story ...\n     */\n    public StoryTO rankToBottomOnWhatsNext(User user, Story story) throws IllegalArgumentException;\n\n    /**\n     * Removes the story from user's what's next list\n     * @param user\n     * @param story\n     */\n    public void removeFromWhatsNext(User user, Story story) throws IllegalArgumentException;\n\n    /**\n     * Adds the story to the user's what's next list\n     * @param user\n     * @param story\n     */\n    public WhatsNextStoryEntry addToWhatsNext(User user, Story story) throws IllegalArgumentException;\n    \n    /**\n     * Removes all queue entries that are related to this story from the queues\n     * @param story\n     */\n    public void removeStoryFromWorkQueues(Story story);\n\n    /**\n     * Retrieves all assigned and current work for the given user, in proper format\n     * @param user\n     * @return\n     */\n    public AssignedWorkTO getAssignedWorkFor(User user);\n\n    \n    public void setTransferObjectBusiness(TransferObjectBusiness transferObjectBusiness);\n    public void setTaskDAO(TaskDAO dao);\n    public void setWhatsNextEntryDAO(WhatsNextEntryDAO whatsNextEntryDAO);\n    public void setWhatsNextStoryEntryDAO(WhatsNextStoryEntryDAO whatsNextStoryEntryDAO);\n    public void setTaskBusiness(TaskBusiness taskBusiness);\n    public void setRankingBusiness(RankingBusiness rankingBusiness);\n    public void setStoryDAO(StoryDAO storyDAO);\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\ExportImportBusiness.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["ExportImportBusiness", "OrganizationDumpTO", "AgilefantWidgetAndRef"], "MN": ["exportOrganization", "importOrganization", "getAgilefantWidget"], "PN": ["organizationTO"], "AN": ["users", "holidays", "products", "projects", "iterations", "stories", "tasks", "assignments", "backlogHourEntries", "storyHourEntries", "taskHourEntries", "backlogHistoryEntries", "iterationHistoryEntries", "labels", "storyAccesses", "storyRanks", "teams", "whatsNextEntries", "whatsNextStoryEntries", "widgetCollections", "widgets", "settings", "agilefantWidget", "story", "user", "project", "iteration"], "SCS_VariableDeclarator": ["users", "holidays", "products", "projects", "iterations", "stories", "tasks", "assignments", "backlogHourEntries", "storyHourEntries", "taskHourEntries", "backlogHistoryEntries", "iterationHistoryEntries", "labels", "storyAccesses", "storyRanks", "teams", "whatsNextEntries", "whatsNextStoryEntries", "widgetCollections", "widgets", "settings", "agilefantWidget", "story", "user", "project", "iteration", "objectId"], "SCS_ConstructorDeclaration": ["AgilefantWidgetAndRef", "AgilefantWidgetAndRef", "AgilefantWidgetAndRef", "AgilefantWidgetAndRef", "AgilefantWidgetAndRef"], "SCS_MemberReference": ["agilefantWidget", "agilefantWidget", "story", "story", "agilefantWidget", "agilefantWidget", "user", "user", "agilefantWidget", "agilefantWidget", "project", "project", "agilefantWidget", "agilefantWidget", "iteration", "iteration", "story", "objectId", "story", "user", "objectId", "user", "project", "objectId", "project", "iteration", "objectId", "iteration", "agilefantWidget", "objectId", "e", "agilefantWidget"], "SCS_VariableDeclaration": ["int"], "SCS_ClassReference": [null, null, null, null, null], "SCS_MethodInvocation": ["getId", "getId", "getId", "getId", "setObjectId"], "CO": ["/**\n * Interface for export/import services\n * \n * @author jkorri\n */", "/**\n\t * Exports organization's data\n\t * \n\t * @return\n\t */", "/**\n\t * Imports data to an organization. Should only be done to a fresh organization, but will run and add incremental changes as well\n\t * \n\t * @param organizationTO\n\t */", "/**\n\t * Transfer object for stuff that is exported from an organization\n\t * \n\t * @author jkorri\n\t */", "/**\n\t * Transfer object that attaches a reference to a specific story, user, project, iteration etc. in a widget.\n\t * This is needed because widget's objectId field is a reference to different types of model objects depending\n\t * on widget type\n\t * \n\t * @author jkorri\n\t */"], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport java.util.Collection;\nimport java.util.LinkedHashSet;\n\nimport com.fasterxml.jackson.annotation.JsonPropertyOrder;\n\nimport fi.hut.soberit.agilefant.model.AgilefantWidget;\nimport fi.hut.soberit.agilefant.model.Assignment;\nimport fi.hut.soberit.agilefant.model.BacklogHistoryEntry;\nimport fi.hut.soberit.agilefant.model.BacklogHourEntry;\nimport fi.hut.soberit.agilefant.model.Holiday;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.IterationHistoryEntry;\nimport fi.hut.soberit.agilefant.model.Label;\nimport fi.hut.soberit.agilefant.model.Product;\nimport fi.hut.soberit.agilefant.model.Project;\nimport fi.hut.soberit.agilefant.model.Setting;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.StoryAccess;\nimport fi.hut.soberit.agilefant.model.StoryHourEntry;\nimport fi.hut.soberit.agilefant.model.StoryRank;\nimport fi.hut.soberit.agilefant.model.Task;\nimport fi.hut.soberit.agilefant.model.TaskHourEntry;\nimport fi.hut.soberit.agilefant.model.Team;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.model.WhatsNextEntry;\nimport fi.hut.soberit.agilefant.model.WhatsNextStoryEntry;\nimport fi.hut.soberit.agilefant.model.WidgetCollection;\n\n/**\n * Interface for export/import services\n * \n * @author jkorri\n */\npublic interface ExportImportBusiness {\n\n\t/**\n\t * Exports organization's data\n\t * \n\t * @return\n\t */\n\tpublic OrganizationDumpTO exportOrganization();\n\n\t/**\n\t * Imports data to an organization. Should only be done to a fresh organization, but will run and add incremental changes as well\n\t * \n\t * @param organizationTO\n\t */\n\tpublic void importOrganization(OrganizationDumpTO organizationTO);\n\n\t/**\n\t * Transfer object for stuff that is exported from an organization\n\t * \n\t * @author jkorri\n\t */\n\t@JsonPropertyOrder({ \"version\", \"users\", \"holidays\", \"products\", \"projects\", \"iterations\", \"stories\", \"tasks\", \"assignments\", \"backlogHourEntries\",\n\t\t\"storyHourEntries\", \"taskHourEntries\", \"backlogHistoryEntries\", \"iterationHistoryEntries\", \"labels\", \"storyAccesses\", \"storyRanks\",\n\t\t\"teams\", \"whatsNextEntries\", \"whatsNextStoryEntries\", \"widgetCollections\", \"widgets\", \"settings\"})\n\tpublic static class OrganizationDumpTO {\n\n\t\tpublic Collection<User> users = new LinkedHashSet<User>();\n\t\tpublic Collection<Holiday> holidays = new LinkedHashSet<Holiday>();\n\t\tpublic Collection<Product> products = new LinkedHashSet<Product>();\n\t\tpublic Collection<Project> projects = new LinkedHashSet<Project>();\n\t\tpublic Collection<Iteration> iterations = new LinkedHashSet<Iteration>();\n\t\tpublic Collection<Story> stories = new LinkedHashSet<Story>();\n\t\tpublic Collection<Task> tasks = new LinkedHashSet<Task>();\n\t\tpublic Collection<Assignment> assignments = new LinkedHashSet<Assignment>();\n\t\tpublic Collection<BacklogHourEntry> backlogHourEntries = new LinkedHashSet<BacklogHourEntry>();\n\t\tpublic Collection<StoryHourEntry> storyHourEntries = new LinkedHashSet<StoryHourEntry>();\n\t\tpublic Collection<TaskHourEntry> taskHourEntries = new LinkedHashSet<TaskHourEntry>();\t\t\n\t\tpublic Collection<BacklogHistoryEntry> backlogHistoryEntries = new LinkedHashSet<BacklogHistoryEntry>();\n\t\tpublic Collection<IterationHistoryEntry> iterationHistoryEntries = new LinkedHashSet<IterationHistoryEntry>();\n\t\tpublic Collection<Label> labels = new LinkedHashSet<Label>();\n\t\tpublic Collection<StoryAccess> storyAccesses = new LinkedHashSet<StoryAccess>();\n\t\tpublic Collection<StoryRank> storyRanks = new LinkedHashSet<StoryRank>();\n\t\tpublic Collection<Team> teams = new LinkedHashSet<Team>();\n\t\tpublic Collection<WhatsNextEntry> whatsNextEntries = new LinkedHashSet<WhatsNextEntry>();\n\t\tpublic Collection<WhatsNextStoryEntry> whatsNextStoryEntries = new LinkedHashSet<WhatsNextStoryEntry>();\n\t\tpublic Collection<WidgetCollection> widgetCollections = new LinkedHashSet<WidgetCollection>();\t\t\n\t\tpublic Collection<AgilefantWidgetAndRef> widgets = new LinkedHashSet<AgilefantWidgetAndRef>();\t\t\n\t\tpublic Collection<Setting> settings = new LinkedHashSet<Setting>();\n\t}\n\t\n\t/**\n\t * Transfer object that attaches a reference to a specific story, user, project, iteration etc. in a widget.\n\t * This is needed because widget's objectId field is a reference to different types of model objects depending\n\t * on widget type\n\t * \n\t * @author jkorri\n\t */\n \tpublic static class AgilefantWidgetAndRef {\n\t\t\n\t\tprivate AgilefantWidget agilefantWidget;\n\t\tprivate Story story;\n\t\tprivate User user;\n\t\tprivate Project project;\n\t\tprivate Iteration iteration;\n\n\t\tpublic AgilefantWidgetAndRef() {\n\t\t\t\n\t\t}\n\t\t\n\t\tpublic AgilefantWidgetAndRef(AgilefantWidget agilefantWidget, Story story) {\n\t\t\tthis.agilefantWidget = agilefantWidget;\n\t\t\tthis.story = story;\n\t\t}\n\n\t\tpublic AgilefantWidgetAndRef(AgilefantWidget agilefantWidget, User user) {\n\t\t\tthis.agilefantWidget = agilefantWidget;\n\t\t\tthis.user = user;\n\t\t}\n\n\t\tpublic AgilefantWidgetAndRef(AgilefantWidget agilefantWidget, Project project) {\n\t\t\tthis.agilefantWidget = agilefantWidget;\n\t\t\tthis.project = project;\n\t\t}\n\t\t\n\t\tpublic AgilefantWidgetAndRef(AgilefantWidget agilefantWidget, Iteration iteration) {\n\t\t\tthis.agilefantWidget = agilefantWidget;\n\t\t\tthis.iteration = iteration;\n\t\t}\n\t\t\n\t\tpublic AgilefantWidget getAgilefantWidget() {\n\t\t\ttry {\n\t\t\t\tint objectId;\n\t\t\t\tif(this.story!=null) {\n\t\t\t\t\tobjectId = this.story.getId();\n\t\t\t\t} else if(this.user!=null) {\n\t\t\t\t\tobjectId = this.user.getId();\n\t\t\t\t} else if(this.project!=null) {\n\t\t\t\t\tobjectId = this.project.getId();\n\t\t\t\t} else if(this.iteration!=null){\n\t\t\t\t\tobjectId = this.iteration.getId();\n\t\t\t\t} else {\n\t\t\t\t\tthrow new RuntimeException(\"Missing object id!\");\n\t\t\t\t}\n\t\t\t\tthis.agilefantWidget.setObjectId(objectId);\n\t\t\t} catch(Exception e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t\treturn this.agilefantWidget;\n\t\t}\n\t}\t\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\ExportIterationBusiness.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["ExportIterationBusiness"], "MN": ["exportIteration"], "PN": ["iterationId"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport org.apache.poi.ss.usermodel.Workbook;\n\npublic interface ExportIterationBusiness {\n    public Workbook exportIteration(int iterationId);\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\GenericBusiness.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["GenericBusiness"], "MN": ["retrieveAll", "retrieve", "retrieveMultiple", "retrieveDetached", "store", "delete", "delete", "create", "countAll", "exists", "retrieveIfExists"], "PN": ["id", "ids", "id", "object", "id", "object", "object", "id", "id"], "CO": ["/**\n     * Returns the object with the given id.\n     * <p>\n     * Throws <code>ObjectNotFoundException</code> if not found.\n     */", "/**\n     * Retrieve multiple objects by id collection.\n     */", "/**\n     * Returns the object with the given id.\n     * <p>\n     * Will return <code>null</code> if not found.\n     */"], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport java.util.Collection;\n\npublic interface GenericBusiness<T> {\n\n    Collection<T> retrieveAll();\n\n    /**\n     * Returns the object with the given id.\n     * <p>\n     * Throws <code>ObjectNotFoundException</code> if not found.\n     */\n    T retrieve(int id);\n    \n    /**\n     * Retrieve multiple objects by id collection.\n     */\n    Collection<T> retrieveMultiple(Collection<Integer> ids);\n    \n    public T retrieveDetached(int id);\n\n    void store(T object);\n    \n    void delete(int id);\n    \n    void delete(T object);\n\n    int create(T object);\n\n    int countAll();\n\n    boolean exists(int id);\n\n    /**\n     * Returns the object with the given id.\n     * <p>\n     * Will return <code>null</code> if not found.\n     */\n    T retrieveIfExists(int id);\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\HolidayBusiness.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["HolidayBusiness"], "MN": ["retrieveFutureHolidaysByUser"], "PN": ["user"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport java.util.List;\n\nimport fi.hut.soberit.agilefant.model.Holiday;\nimport fi.hut.soberit.agilefant.model.User;\n\npublic interface HolidayBusiness extends GenericBusiness<Holiday> {\n    public List<Holiday> retrieveFutureHolidaysByUser(User user);\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\HourEntryBusiness.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["HourEntryBusiness"], "AN": ["ENTRY_LIMIT"], "SCS_VariableDeclarator": ["ENTRY_LIMIT"], "MN": ["logStoryEffort", "logTaskEffort", "logBacklogEffort", "calculateSumOfIterationsHourEntries", "retrieveByParent", "calculateSumByUserAndTimeInterval", "calculateSum", "getEntriesByUserAndTimeInterval", "getEntriesByUserAndDay", "getDailySpentEffortByWeek", "getDailySpentEffortByInterval", "getDailySpentEffortByInterval", "getDailySpentEffortForHourEntries", "getDailySpentEffortByIteration", "getHourEntriesForIteration", "calculateWeekSum", "retrieveBacklogHourEntries", "retrieveStoryHourEntries", "retrieveTaskHourEntries", "deleteAll", "moveToStory", "moveToBacklog", "retrieveLatestHourEntryDelta"], "PN": ["storyId", "effortEntry", "userIds", "taskId", "effortEntry", "userIds", "backlogId", "effortEntry", "userIds", "iteration", "item", "userId", "startDate", "endDate", "hourEntries", "userId", "startDate", "endDate", "day", "userId", "hourTimeZoneDifference", "minuteTimeZoneDifference", "serverTimeZone", "week", "userId", "hourTimeZoneDifference", "minuteTimeZoneDifference", "serverTimeZone", "start", "end", "userId", "start", "end", "userId", "hourTimeZoneDifference", "minuteTimeZoneDifference", "serverTimeZone", "entries", "start", "end", "iteration", "iteration", "week", "userId", "hourTimeZoneDifference", "minuteTimeZoneDifference", "serverTimeZone", "backlogId", "limited", "storyId", "limited", "taskId", "limited", "hourEntries", "hourEntries", "story", "hourEntries", "backlog", "userId"], "CO": ["/**\n * Business interface for handling functionality related to Hour Entries\n * \n * @author kjniiran\n * @author Pasi Pekkanen\n * \n */", "/**\n     * Create one effort entry for each given user under the given story.\n     */", "/**\n     * Create one effort entry for each given user under the given task.\n     */", "/**\n     * Create one effort entry for each given user under the given backlog.\n     */", "/**\n     * Gets all task, story and backlog hour entries for an iteration and\n     * calculates their sum.\n     */"], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.Set;\n\nimport org.joda.time.DateTime;\nimport org.joda.time.DateTimeZone;\nimport org.joda.time.LocalDate;\n\nimport fi.hut.soberit.agilefant.model.Backlog;\nimport fi.hut.soberit.agilefant.model.BacklogHourEntry;\nimport fi.hut.soberit.agilefant.model.HourEntry;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.transfer.DailySpentEffort;\n\n/**\n * Business interface for handling functionality related to Hour Entries\n * \n * @author kjniiran\n * @author Pasi Pekkanen\n * \n */\npublic interface HourEntryBusiness extends GenericBusiness<HourEntry> {\n\n    public static int ENTRY_LIMIT = 5;\n    /**\n     * Create one effort entry for each given user under the given story.\n     */\n    public void logStoryEffort(int storyId, HourEntry effortEntry,\n            Set<Integer> userIds);\n\n    /**\n     * Create one effort entry for each given user under the given task.\n     */\n    public void logTaskEffort(int taskId, HourEntry effortEntry,\n            Set<Integer> userIds);\n\n    /**\n     * Create one effort entry for each given user under the given backlog.\n     */\n    public void logBacklogEffort(int backlogId, HourEntry effortEntry,\n            Set<Integer> userIds);\n\n    /**\n     * Gets all task, story and backlog hour entries for an iteration and\n     * calculates their sum.\n     */\n    long calculateSumOfIterationsHourEntries(Iteration iteration);\n\n    List<BacklogHourEntry> retrieveByParent(Backlog item);\n\n    long calculateSumByUserAndTimeInterval(int userId, DateTime startDate,\n            DateTime endDate);\n\n    long calculateSum(Collection<? extends HourEntry> hourEntries);\n\n    public List<HourEntry> getEntriesByUserAndTimeInterval(int userId,\n            DateTime startDate, DateTime endDate);\n\n    public List<HourEntry> getEntriesByUserAndDay(LocalDate day, int userId, int hourTimeZoneDifference, int minuteTimeZoneDifference, DateTimeZone serverTimeZone);\n\n    public List<DailySpentEffort> getDailySpentEffortByWeek(LocalDate week,\n            int userId, int hourTimeZoneDifference, int minuteTimeZoneDifference, DateTimeZone serverTimeZone);\n\n    public List<DailySpentEffort> getDailySpentEffortByInterval(DateTime start,\n            DateTime end, int userId);\n    \n    public List<DailySpentEffort> getDailySpentEffortByInterval(DateTime start,\n            DateTime end, int userId, int hourTimeZoneDifference, int minuteTimeZoneDifference, DateTimeZone serverTimeZone);\n\n    List<DailySpentEffort> getDailySpentEffortForHourEntries(List<? extends HourEntry> entries,\n            DateTime start, DateTime end);\n    \n    List<DailySpentEffort> getDailySpentEffortByIteration(Iteration iteration);\n    \n    List<HourEntry> getHourEntriesForIteration(Iteration iteration);\n    \n\n    public long calculateWeekSum(LocalDate week, int userId, int hourTimeZoneDifference, int minuteTimeZoneDifference, DateTimeZone serverTimeZone);\n\n    List<HourEntry> retrieveBacklogHourEntries(int backlogId,\n            boolean limited);\n\n    List<HourEntry> retrieveStoryHourEntries(int storyId,\n            boolean limited);\n\n    List<HourEntry> retrieveTaskHourEntries(int taskId,\n            boolean limited);\n\n    void deleteAll(Collection<? extends HourEntry> hourEntries);\n\n    void moveToStory(Collection<? extends HourEntry> hourEntries, Story story);\n\n    void moveToBacklog(Collection<? extends HourEntry> hourEntries,\n            Backlog backlog);\n    \n    long retrieveLatestHourEntryDelta(int userId);\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\IterationBurndownBusiness.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["IterationBurndownBusiness"], "MN": ["getIterationBurndown", "getSmallIterationBurndown", "getCustomIterationBurndown"], "PN": ["iteration", "timeZoneOffset", "iteration", "timeZoneOffset", "iteration", "width", "height", "timeZoneOffset"], "CO": ["/**\n     * Constructs a burndown from the given iteration's history.\n     * <p>\n     * Transforms the <code>JFreeChart</code> object to an image byte array.\n     * @return the byte array containing the burndown chart as image\n     */"], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport fi.hut.soberit.agilefant.model.Iteration;\n\npublic interface IterationBurndownBusiness {\n\n    /**\n     * Constructs a burndown from the given iteration's history.\n     * <p>\n     * Transforms the <code>JFreeChart</code> object to an image byte array.\n     * @return the byte array containing the burndown chart as image\n     */\n    public byte[] getIterationBurndown(Iteration iteration, Integer timeZoneOffset);\n\n    public byte[] getSmallIterationBurndown (Iteration iteration, Integer timeZoneOffset);\n    \n    public byte[] getCustomIterationBurndown(Iteration iteration, Integer width, Integer height, Integer timeZoneOffset);\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\IterationBusiness.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["IterationBusiness"], "MN": ["getIterationContents", "getIterationMetrics", "calculateDailyVelocity", "storeStandAlone", "store", "retrieveCurrentAndFutureIterations", "retrieveAllStandAloneIterations", "calculateAssignedLoadPerAssignee", "calculateVariance", "delete", "delete", "deleteAndUpdateHistory", "retrieveChangesInIterationStories", "retrieveIterationOnlyLeafStories", "retrieveChangesInIterationTasks", "renderSortedTaskAndStoryRevisions", "retreiveIterationByReadonlyToken", "getIterationCountFromReadonlyToken"], "PN": ["iterationId", "iteration", "startDate", "end", "yesterdayEntry", "iterationId", "iterationData", "assigneeIds", "teams", "iterationId", "parentBacklogId", "iterationData", "assigneeIds", "teams", "iter", "iter", "id", "iteration", "id", "iteration", "iterationId", "iteration", "iteration", "readonlyToken", "readonlyToken"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.Set;\n\nimport org.joda.time.LocalDate;\n\nimport fi.hut.soberit.agilefant.model.ExactEstimate;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.IterationHistoryEntry;\nimport fi.hut.soberit.agilefant.model.Task;\nimport fi.hut.soberit.agilefant.transfer.AgilefantHistoryEntry;\nimport fi.hut.soberit.agilefant.transfer.AssignmentTO;\nimport fi.hut.soberit.agilefant.transfer.IterationMetrics;\nimport fi.hut.soberit.agilefant.transfer.IterationTO;\n\npublic interface IterationBusiness extends GenericBusiness<Iteration> {\n\n    public IterationTO getIterationContents(int iterationId);\n\n    public IterationMetrics getIterationMetrics(Iteration iteration);\n\n    ExactEstimate calculateDailyVelocity(LocalDate startDate, LocalDate end, IterationHistoryEntry yesterdayEntry);\n\n    public IterationTO storeStandAlone(int iterationId, Iteration iterationData, Set<Integer> assigneeIds, Set<Integer> teams);\n    \n    public IterationTO store(int iterationId, int parentBacklogId,\n            Iteration iterationData, Set<Integer> assigneeIds, Set<Integer> teams);\n\n    public Collection<Iteration> retrieveCurrentAndFutureIterations();\n    \n    public Collection<Iteration> retrieveAllStandAloneIterations();\n\n    public Set<AssignmentTO> calculateAssignedLoadPerAssignee(Iteration iter);\n\n    public Integer calculateVariance(Iteration iter);\n\n    void delete(int id);\n\n    void delete(Iteration iteration);\n\n    void deleteAndUpdateHistory(int id);\n\n    public List<AgilefantHistoryEntry> retrieveChangesInIterationStories(\n            Iteration iteration);\n    \n    public IterationTO retrieveIterationOnlyLeafStories(int iterationId);\n\n    public List<AgilefantHistoryEntry> retrieveChangesInIterationTasks(\n            Iteration iteration);\n    \n    public List<AgilefantHistoryEntry> renderSortedTaskAndStoryRevisions(\n            Iteration iteration);\n    \n    public Iteration retreiveIterationByReadonlyToken(String readonlyToken);\n    \n    public int getIterationCountFromReadonlyToken(String readonlyToken);\n}", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\IterationHistoryEntryBusiness.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["IterationHistoryEntryBusiness"], "MN": ["updateIterationHistory", "getLatestOriginalEstimateSum", "getHistoryEntriesForIteration", "retrieveLatest", "calculateExpectedEffortDoneDate"], "PN": ["iterationId", "iteration", "iteration", "iteration", "startDate", "effortLeft", "velocity"], "CO": ["/**\n     * Gets history days grouped by dates.\n     * <p>\n     * Will get data from <code>startDates</code> 00.00.00 to\n     * <code>endDates</code> 23.59.59.\n     */"], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport java.util.List;\n\nimport org.joda.time.LocalDate;\n\nimport fi.hut.soberit.agilefant.model.ExactEstimate;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.IterationHistoryEntry;\n\npublic interface IterationHistoryEntryBusiness extends\n        GenericBusiness<IterationHistoryEntry> {\n\n    void updateIterationHistory(int iterationId);\n\n    public ExactEstimate getLatestOriginalEstimateSum(Iteration iteration);\n    \n    /**\n     * Gets history days grouped by dates.\n     * <p>\n     * Will get data from <code>startDates</code> 00.00.00 to\n     * <code>endDates</code> 23.59.59.\n     */\n    public List<IterationHistoryEntry> getHistoryEntriesForIteration(\n            Iteration iteration);\n    \n    \n    public IterationHistoryEntry retrieveLatest(Iteration iteration);\n    \n    LocalDate calculateExpectedEffortDoneDate(LocalDate startDate, ExactEstimate effortLeft, ExactEstimate velocity);\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\LabelBusiness.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["LabelBusiness"], "MN": ["createStoryLabelsSet", "createStoryLabels", "lookupLabelsLike"], "PN": ["labels", "storyId", "labelNames", "storyId", "labelName"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport java.util.List;\nimport java.util.Set;\n\nimport fi.hut.soberit.agilefant.model.Label;\n\npublic interface LabelBusiness extends GenericBusiness<Label> {\n   \n    public void createStoryLabelsSet(Set<Label> labels, Integer storyId);\n    \n    public void createStoryLabels(List<String> labelNames, Integer storyId);\n\n    List<Label> lookupLabelsLike(String labelName);\n\n}", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\LoginBusiness.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["LoginBusiness"], "MN": ["retrieveLoginsByUser", "retrieveLoginCountByUser"], "PN": ["user", "user"], "CO": ["/**\n * Business class for login tracking related operations\n * \n */", "/**\n\t * Retrieve logins for a user\n\t * \n\t * @param user User for which logins are to be retrieved\n\t * @return List of logins for user\n\t */", "/**\n     * Retrieve number of logins for a user\n     * \n     * @param user User for which login count is to be retrieved\n     * @return login count for User\n     */"], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport java.util.List;\n\nimport fi.hut.soberit.agilefant.model.Login;\nimport fi.hut.soberit.agilefant.model.User;\n\n/**\n * Business class for login tracking related operations\n * \n */\npublic interface LoginBusiness extends GenericBusiness<Login> {\n\t\n\t/**\n\t * Retrieve logins for a user\n\t * \n\t * @param user User for which logins are to be retrieved\n\t * @return List of logins for user\n\t */\n    public List<Login> retrieveLoginsByUser(User user);\n\n    /**\n     * Retrieve number of logins for a user\n     * \n     * @param user User for which login count is to be retrieved\n     * @return login count for User\n     */\n    public int retrieveLoginCountByUser(User user);\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\MenuBusiness.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["MenuBusiness"], "MN": ["constructBacklogMenuData", "constructMyAssignmentsData"], "PN": ["user"], "CO": ["/**\n * Business interface for handling functionality related to the lefthand menu.\n * \n * @author rjokelai\n * \n */"], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport java.util.List;\n\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.transfer.MenuDataNode;\n\n\n/**\n * Business interface for handling functionality related to the lefthand menu.\n * \n * @author rjokelai\n * \n */\npublic interface MenuBusiness {\n\n    public List<MenuDataNode> constructBacklogMenuData();\n\n    List<MenuDataNode> constructMyAssignmentsData(User user);\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\NotificationBusiness.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["NotificationBusiness"], "MN": ["isNotificationEvent", "handleNotificationEvent"], "PN": ["notificationEvent", "notificationEvent"], "CO": ["/**\n     * Checks whether given event is notifications' aware, i.e. whether we should react to that event\n     * and take appropriate action (most probably send an email).\n     * @return true, if event is notifications' aware (sensitive), false otherwise\n     */", "/**\n     * Handles given notification event taking appropriate action, mostly sending an email or something similar.\n     */"], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport fi.hut.soberit.agilefant.model.notification.NotificationEvent;\n\npublic interface NotificationBusiness {\n\n    /**\n     * Checks whether given event is notifications' aware, i.e. whether we should react to that event\n     * and take appropriate action (most probably send an email).\n     * @return true, if event is notifications' aware (sensitive), false otherwise\n     */\n    boolean isNotificationEvent(NotificationEvent notificationEvent);\n\n    /**\n     * Handles given notification event taking appropriate action, mostly sending an email or something similar.\n     */\n    void handleNotificationEvent(NotificationEvent notificationEvent);\n\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\PasswordBusiness.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["PasswordBusiness"], "MN": ["generateAndMailPassword"], "PN": ["user_id"], "CO": ["/**\n * Business interface for handling functionality related to password.\n * \n * @author Teemu Ilmonen\n * \n */", "/**\n     * Generates a password and mails it to the e-mail address of an\n     * <code>User</code>.\n     * \n     * @param user_id\n     *                Id of the user who needs a new password sent.\n     */"], "CODE": "package fi.hut.soberit.agilefant.business;\n\n/**\n * Business interface for handling functionality related to password.\n * \n * @author Teemu Ilmonen\n * \n */\npublic interface PasswordBusiness {\n    /**\n     * Generates a password and mails it to the e-mail address of an\n     * <code>User</code>.\n     * \n     * @param user_id\n     *                Id of the user who needs a new password sent.\n     */\n    public void generateAndMailPassword(int user_id);\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\PersonalLoadBusiness.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["PersonalLoadBusiness"], "MN": ["retrieveUserLoad", "getDailyLoadLimitsByUser"], "PN": ["user", "weeksAhead", "user"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.transfer.ComputedLoadData;\nimport fi.hut.soberit.agilefant.transfer.UserLoadLimits;\n\npublic interface PersonalLoadBusiness {\n    public ComputedLoadData retrieveUserLoad(User user, int weeksAhead);\n\n    public UserLoadLimits getDailyLoadLimitsByUser(User user);\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\PortfolioBusiness.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["PortfolioBusiness"], "MN": ["getPortfolioData"], "PN": [], "CO": [], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport fi.hut.soberit.agilefant.transfer.PortfolioTO;\n\npublic interface PortfolioBusiness {\n    \n    PortfolioTO getPortfolioData();\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\ProductBusiness.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["ProductBusiness"], "MN": ["retrieveAllOrderByName", "store", "delete", "delete", "retrieveProjects", "retrieveLeafStoriesOnly", "calculateProductSchedule", "storeAllTimeSheets"], "PN": ["productId", "productData", "teamIds", "id", "product", "product", "product", "product", "products"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.Set;\n\nimport org.joda.time.DateTime;\n\nimport fi.hut.soberit.agilefant.model.Product;\nimport fi.hut.soberit.agilefant.transfer.ProductTO;\nimport fi.hut.soberit.agilefant.transfer.ProjectTO;\nimport fi.hut.soberit.agilefant.util.Pair;\n\npublic interface ProductBusiness extends GenericBusiness<Product> {\n\n    public Collection<Product> retrieveAllOrderByName();\n    \n    public Product store(int productId, Product productData, Set<Integer> teamIds);\n    \n    void delete(int id);\n    \n    void delete(Product product);\n\n    List<ProjectTO> retrieveProjects(Product product);\n    \n    public ProductTO retrieveLeafStoriesOnly(Product product);\n    \n    public Pair<DateTime, DateTime> calculateProductSchedule(Product product);\n    \n    public void storeAllTimeSheets(Collection<Product> products) ;\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\ProjectBurnupBusiness.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["ProjectBurnupBusiness"], "MN": ["getBurnup", "getSmallBurnup"], "PN": ["project", "project"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport fi.hut.soberit.agilefant.model.Project;\n\npublic interface ProjectBurnupBusiness {\n\n    byte[] getBurnup(Project project);\n    \n    byte[] getSmallBurnup(Project project);\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\ProjectBusiness.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["ProjectBusiness"], "MN": ["getAssignedUsers", "store", "getProjectMetrics", "getProjectTotalSpentEffort", "getProjectData", "rankUnderProject", "rankUnderProject", "unrankProject", "moveToRanked", "rankOverProject", "delete", "delete", "retrieveLeafStories", "retrieveProjectIterations"], "PN": ["project", "projectId", "productId", "project", "assigneeIds", "project", "project", "projectId", "project", "upperProject", "projectId", "rankUnderId", "projectId", "projectId", "projectId", "rankOverId", "id", "project", "projectId", "filters", "projectId"], "CO": ["/**\n     * Get users assigned to the project.\n     */", "/**\n     * Calculate the sum of spent effort from all hour entries from the project itself, \n     * iterations, iteration tasks, iteration stories and iteration story tasks.\n     */"], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.Set;\n\nimport fi.hut.soberit.agilefant.exception.ObjectNotFoundException;\nimport fi.hut.soberit.agilefant.model.Project;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.transfer.IterationTO;\nimport fi.hut.soberit.agilefant.transfer.ProjectMetrics;\nimport fi.hut.soberit.agilefant.transfer.ProjectTO;\nimport fi.hut.soberit.agilefant.transfer.StoryTO;\nimport fi.hut.soberit.agilefant.util.StoryFilters;\n\npublic interface ProjectBusiness extends GenericBusiness<Project> {\n\n\n    /**\n     * Get users assigned to the project.\n     */\n    public Collection<User> getAssignedUsers(Project project);\n    \n    public ProjectTO store(int projectId, Integer productId, Project project, Set<Integer> assigneeIds) throws ObjectNotFoundException,\n            IllegalArgumentException;\n\n    public ProjectMetrics getProjectMetrics(Project project);\n    \n    /**\n     * Calculate the sum of spent effort from all hour entries from the project itself, \n     * iterations, iteration tasks, iteration stories and iteration story tasks.\n     */\n    public long getProjectTotalSpentEffort(Project project);\n    \n    public ProjectTO getProjectData(int projectId);\n    \n    Project rankUnderProject(Project project, Project upperProject)\n            throws IllegalArgumentException;\n\n    Project rankUnderProject(int projectId, int rankUnderId);\n    \n    public void unrankProject(int projectId);\n    \n    public void moveToRanked(int projectId);\n\n    Project rankOverProject(int projectId, int rankOverId);\n    \n    void delete(int id);\n    \n    void delete(Project project);\n    \n    public List<StoryTO> retrieveLeafStories(int projectId, StoryFilters filters);\n    \n    public List<IterationTO> retrieveProjectIterations(int projectId);\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\RankingBusiness.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["RankingBusiness"], "MN": ["rankToBottom", "rankUnder"], "PN": ["rankable", "lastInRank", "rankable", "justAbove", "delegate"], "CO": ["/**\n     * Ranks the given rankable to the bottom of the list \n     * @param rankable\n     * @param lastInRank\n     */", "/**\n     * Ranks the given rankable just under another rankable\n     * @param rankable\n     * @param justAbove\n     * @param delegate\n     */"], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport fi.hut.soberit.agilefant.model.Rankable;\n\npublic interface RankingBusiness {\n\n    /**\n     * Ranks the given rankable to the bottom of the list \n     * @param rankable\n     * @param lastInRank\n     */\n    public void rankToBottom(Rankable rankable, Rankable lastInRank);\n\n    /**\n     * Ranks the given rankable just under another rankable\n     * @param rankable\n     * @param justAbove\n     * @param delegate\n     */\n    public void rankUnder(Rankable rankable, Rankable justAbove, RankUnderDelegate delegate);\n    \n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\RankUnderDelegate.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["RankUnderDelegate"], "MN": ["getWithRankBetween"], "PN": ["first", "second"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport java.util.Collection;\n\nimport fi.hut.soberit.agilefant.model.Rankable;\n\npublic interface RankUnderDelegate {\n    Collection<? extends Rankable> getWithRankBetween(Integer first, Integer second);\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\SearchBusiness.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["SearchBusiness"], "AN": ["MAX_RESULTS_PER_TYPE"], "SCS_VariableDeclarator": ["MAX_RESULTS_PER_TYPE"], "MN": ["searchByReference", "searchStoriesAndBacklog", "searchStories", "searchIterations", "searchProjects", "searchUsers", "searchTasks"], "PN": ["searchTerm", "searchTerm", "searchTerm", "searchTerm", "searchTerm", "searchTerm", "searchTerm"], "CO": ["// Limit search results. Without this limitation, listing all results in user interface is slow if there are hundreds of results,", "// e.g. in dashboard page when listing all stories."], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport java.util.List;\n\nimport fi.hut.soberit.agilefant.model.NamedObject;\nimport fi.hut.soberit.agilefant.transfer.SearchResultRow;\n\npublic interface SearchBusiness {\n\t// Limit search results. Without this limitation, listing all results in user interface is slow if there are hundreds of results,\n\t// e.g. in dashboard page when listing all stories.\n    public static final int MAX_RESULTS_PER_TYPE = 500;\n    \n    public NamedObject searchByReference(String searchTerm);\n    \n    public List<SearchResultRow> searchStoriesAndBacklog(String searchTerm);\n    public List<SearchResultRow> searchStories(String searchTerm);\n    public List<SearchResultRow> searchIterations(String searchTerm);\n    public List<SearchResultRow> searchProjects(String searchTerm);\n    public List<SearchResultRow> searchUsers(String searchTerm);\n    public List<SearchResultRow> searchTasks(String searchTerm);\n    \n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\SettingBusiness.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["SettingBusiness", "BranchMetricsType"], "AN": ["DEFAULT_RANGE_LOW", "DEFAULT_OPTIMAL_LOW", "DEFAULT_OPTIMAL_HIGH", "DEFAULT_CRITICAL_LOW", "DEFAULT_RANGE_HIGH", "DEFAULT_PORTFOLIO_TIME_SPAN", "DEFAULT_STORY_TREE_FIELD_ORDER", "DEFAULT_BRANCH_METRICS"], "SCS_VariableDeclarator": ["DEFAULT_RANGE_LOW", "DEFAULT_OPTIMAL_LOW", "DEFAULT_OPTIMAL_HIGH", "DEFAULT_CRITICAL_LOW", "DEFAULT_RANGE_HIGH", "DEFAULT_PORTFOLIO_TIME_SPAN", "DEFAULT_STORY_TREE_FIELD_ORDER", "DEFAULT_BRANCH_METRICS"], "SCS_ClassReference": ["Period"], "SCS_MethodInvocation": ["months"], "SCS_MemberReference": ["estimate"], "MN": ["isHourReportingEnabled", "setHourReporting", "isDevPortfolio", "setDevPortfolio", "isDailyWork", "setDailyWork", "setRangeLow", "getRangeLow", "setRangeHigh", "getRangeHigh", "setOptimalLow", "getOptimalLow", "setOptimalHigh", "getOptimalHigh", "setCriticalLow", "getCriticalLow", "getPortfolioTimeSpan", "setPortfolioTimeSpan", "getStoryTreeFieldOrder", "setStoryTreeFieldOrder", "getBranchMetricsType", "setBranchMetricsType", "isLabelsInStoryList", "setLabelsInStoryList", "isWeekendsInBurndown", "setWeekendsInBurndown", "setValue"], "PN": ["mode", "mode", "mode", "value", "value", "value", "value", "value", "timeSpan", "newOrder", "type", "mode", "mode", "settingName", "value"], "CO": ["/**\n * Business interface for handling functionality related to settings.\n * \n * @author kjniiran\n *\n */", "/**\n     * Is hour reporting enabled\n     */", "/**\n     * Set hour reporting mode\n     */", "/**\n     * Is dev portfolio enabled\n     */", "/**\n     * Set dev portfolio mode\n     */", "/**\n     * Is daily work enabled\n     */", "/**\n     * Set daily work mode\n     */", "/**\n     * Set value range low limit for load meter\n     * @param value\n     */", "/**\n     * Get value range low limit for load meter\n     * @return the percentage value\n     */", "/**\n     * Set value range high limit for load meter\n     * @param value\n     */", "/**\n     * Get value range high limit for load meter\n     * @return the percentage value\n     */", "/**\n     * Set optimal low value for load meter\n     * @param value the percentage value\n     */", "/**\n     * Get optimal low value for load meter\n     * @return the percentage value\n     */", "/**\n     * Set optimal high value for load meter\n     * @param value the percentage value\n     */", "/**\n     * Get optimal high value for load meter\n     * @return the percentage value\n     */", "/**\n     * Set critical low value for load meter\n     * @param value the percentage value\n     */", "/**\n     * Get critical low value for load meter\n     * @return the percentage value\n     */", "/**\n     * Get portfolio time span for portfolio view\n     * @return the period object\n     */", "/**\n     * Set portfolio time span for portfolio view\n     * @param the period object\n     */", "/**\n     * Get the order of story tree fields.\n     * @return the order of the story tree fields as string\n     */", "/**\n     * Set the order of story tree fields.\n     */", "/**\n     * Get the current selection for branch metrics type.\n     */", "/**\n     * Set the branch metrics type. \n     */", "/**\n     * Get labels display in story lists. \n     */", "/**\n     * Toggle labels display in story lists. \n     */", "/**\n     *  Get the \"Weekends in burndown\" setting.\n     *  Returns true by default.\n     */", "/**\n     * Toggle the displaying of weekends in burndown.\n     */", "/**\n     * Set any value (used in import).\n     */"], "CODE": "package fi.hut.soberit.agilefant.business;\n\n\nimport org.joda.time.Period;\n\nimport fi.hut.soberit.agilefant.model.Setting;\n\n/**\n * Business interface for handling functionality related to settings.\n * \n * @author kjniiran\n *\n */\npublic interface SettingBusiness extends GenericBusiness<Setting> {\n    \n    public static final int DEFAULT_RANGE_LOW = 0;\n    public static final int DEFAULT_OPTIMAL_LOW = 70;\n    public static final int DEFAULT_OPTIMAL_HIGH = 85;\n    public static final int DEFAULT_CRITICAL_LOW = 100;\n    public static final int DEFAULT_RANGE_HIGH = 120;\n    public static final Period DEFAULT_PORTFOLIO_TIME_SPAN = Period.months(6);\n    public static final String DEFAULT_STORY_TREE_FIELD_ORDER = \"state,storyPoints,labels,name,backlog,breadcrumb\";\n    public static final BranchMetricsType DEFAULT_BRANCH_METRICS = BranchMetricsType.estimate;\n    \n    public enum BranchMetricsType { off, leaf, estimate, both };\n    \n    /**\n     * Is hour reporting enabled\n     */\n    boolean isHourReportingEnabled();\n    \n    /**\n     * Set hour reporting mode\n     */\n    void setHourReporting(boolean mode);\n    \n    /**\n     * Is dev portfolio enabled\n     */\n    boolean isDevPortfolio();\n    \n    /**\n     * Set dev portfolio mode\n     */\n    void setDevPortfolio(boolean mode);\n    \n    /**\n     * Is daily work enabled\n     */\n    boolean isDailyWork();\n    \n    /**\n     * Set daily work mode\n     */\n    void setDailyWork(boolean mode);\n    \n    /**\n     * Set value range low limit for load meter\n     * @param value\n     */\n    void setRangeLow(Integer value);\n    \n    /**\n     * Get value range low limit for load meter\n     * @return the percentage value\n     */\n    int getRangeLow();\n    \n    /**\n     * Set value range high limit for load meter\n     * @param value\n     */\n    void setRangeHigh(Integer value);\n    \n    /**\n     * Get value range high limit for load meter\n     * @return the percentage value\n     */\n    int getRangeHigh();\n    \n    /**\n     * Set optimal low value for load meter\n     * @param value the percentage value\n     */\n    void setOptimalLow(Integer value);\n    \n    /**\n     * Get optimal low value for load meter\n     * @return the percentage value\n     */\n    int getOptimalLow();\n    \n    /**\n     * Set optimal high value for load meter\n     * @param value the percentage value\n     */\n    void setOptimalHigh(Integer value);\n    \n    /**\n     * Get optimal high value for load meter\n     * @return the percentage value\n     */\n    int getOptimalHigh();\n    \n    /**\n     * Set critical low value for load meter\n     * @param value the percentage value\n     */\n    void setCriticalLow(Integer value);\n    \n    /**\n     * Get critical low value for load meter\n     * @return the percentage value\n     */\n    int getCriticalLow();\n    \n    /**\n     * Get portfolio time span for portfolio view\n     * @return the period object\n     */\n    Period getPortfolioTimeSpan();\n    \n    /**\n     * Set portfolio time span for portfolio view\n     * @param the period object\n     */\n    void setPortfolioTimeSpan(Period timeSpan);\n    \n    /**\n     * Get the order of story tree fields.\n     * @return the order of the story tree fields as string\n     */\n    String getStoryTreeFieldOrder();\n    \n    /**\n     * Set the order of story tree fields.\n     */\n    void setStoryTreeFieldOrder(String newOrder);\n    \n    /**\n     * Get the current selection for branch metrics type.\n     */\n    BranchMetricsType getBranchMetricsType();\n    \n    /**\n     * Set the branch metrics type. \n     */\n    void setBranchMetricsType(BranchMetricsType type);\n    \n    \n    /**\n     * Get labels display in story lists. \n     */\n    boolean isLabelsInStoryList();\n    \n    /**\n     * Toggle labels display in story lists. \n     */\n    void setLabelsInStoryList(boolean mode);\n    \n    /**\n     *  Get the \"Weekends in burndown\" setting.\n     *  Returns true by default.\n     */\n    boolean isWeekendsInBurndown();\n    \n    /**\n     * Toggle the displaying of weekends in burndown.\n     */\n    void setWeekendsInBurndown(boolean mode);\n    \n    /**\n     * Set any value (used in import).\n     */\n    void setValue(String settingName, String value);\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\StoryAccessBusiness.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["StoryAccessBusiness"], "MN": ["addAccessEntry", "addAccessEntry", "calculateOccurences", "calculateOccurences", "calculateEditOccurences", "calculateEditOccurences"], "PN": ["story", "storyId", "start", "end", "userId", "numberOfItems", "start", "end", "user", "numberOfItems", "start", "end", "userId", "numberOfItems", "start", "end", "user", "numberOfItems"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport java.util.List;\n\nimport org.joda.time.DateTime;\n\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.StoryAccess;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.transfer.StoryAccessCloudTO;\n\npublic interface StoryAccessBusiness extends GenericBusiness<StoryAccess> {\n    public void addAccessEntry(Story story);\n\n    public void addAccessEntry(int storyId);\n\n    public List<StoryAccessCloudTO> calculateOccurences(DateTime start,\n            DateTime end, int userId, int numberOfItems);\n\n    public List<StoryAccessCloudTO> calculateOccurences(DateTime start,\n            DateTime end, User user, int numberOfItems);\n\n    public List<StoryAccessCloudTO> calculateEditOccurences(DateTime start,\n            DateTime end, int userId, int numberOfItems);\n\n    public List<StoryAccessCloudTO> calculateEditOccurences(DateTime start,\n            DateTime end, User user, int numberOfItems);\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\StoryBatchBusiness.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["StoryBatchBusiness"], "MN": ["modifyMultiple"], "PN": ["storyIds", "state", "labelNames"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport java.util.List;\nimport java.util.Set;\n\nimport fi.hut.soberit.agilefant.model.StoryState;\n\npublic interface StoryBatchBusiness {\n    public void modifyMultiple(Set<Integer> storyIds, StoryState state, List<String> labelNames);\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\StoryBusiness.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["StoryBusiness"], "MN": ["store", "create", "create", "calculateMetrics", "moveStoryAway", "rankStoryUnder", "rankStoryOver", "updateStoryRanks", "rankStoryToTop", "rankStoryToBottom", "retrieveStoryWithMetrics", "retrieveStoriesInBacklog", "retrieveStoriesInIteration", "delete", "deleteAndUpdateHistory", "forceDelete", "createStoryUnder", "createStorySibling", "moveSingleStoryToBacklog", "moveStoryAndChildren", "copyStorySibling", "extractUnfinishedStorySibling", "updateParentStates", "addResponsible"], "PN": ["storyId", "dataItem", "backlogId", "responsibleIds", "tasksToDone", "dataItem", "backlogId", "iterationId", "responsibleIds", "labelNames", "story", "story", "story", "backlog", "story", "upperStory", "backlog", "story", "lowerStory", "backlog", "story", "story", "context", "story", "context", "storyId", "backlog", "iteration", "story", "taskHandlingChoice", "storyHourEntryHandlingChoice", "taskHourEntryHandlingChoice", "childHandlingChoice", "id", "taskHandlingChoice", "storyHourEntryHandlingChoice", "taskHourEntryHandlingChoice", "childHandlingChoice", "story", "referenceStoryId", "backlogId", "data", "responsibleIds", "labelNames", "referenceStoryId", "backlogId", "data", "responsibleIds", "labelNames", "story", "backlog", "story", "backlog", "storyID", "story", "storyID", "story", "story", "story", "user"], "CO": ["/**\n     * Copies the dataItem's data to the persisted <code>Story</code> object.\n     * @param tasksToDone TODO\n     * \n     * @return the newly persisted story\n     */", "/**\n     * Create and persist a new story.\n     */", "/**\n     * Moves a story to another backlog.\n     */", "/**\n     * Rank story under the give upperStory.\n     */", "/**\n     * Rank story over the given lowerStory.\n     */", "/**\n     * Ranks the story to the top of the given backlog.\n     */", "/**\n     * Ranks the story to the bottom of the given backlog.\n     */", "/**\n     * If the story is in progress (state is anything but not_started or deferred) then set parent stories as started.\n     */", "/**\n     * Adds the given user to the set of responsibles for story\n     */"], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport java.util.List;\nimport java.util.Set;\n\nimport fi.hut.soberit.agilefant.exception.ObjectNotFoundException;\nimport fi.hut.soberit.agilefant.model.Backlog;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.Task;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.transfer.StoryTO;\nimport fi.hut.soberit.agilefant.util.ChildHandlingChoice;\nimport fi.hut.soberit.agilefant.util.HourEntryHandlingChoice;\nimport fi.hut.soberit.agilefant.util.StoryMetrics;\nimport fi.hut.soberit.agilefant.util.TaskHandlingChoice;\n\npublic interface StoryBusiness extends GenericBusiness<Story> {\n\n    /**\n     * Copies the dataItem's data to the persisted <code>Story</code> object.\n     * @param tasksToDone TODO\n     * \n     * @return the newly persisted story\n     */\n    Story store(Integer storyId, Story dataItem, Integer backlogId,\n            Set<Integer> responsibleIds, boolean tasksToDone) throws ObjectNotFoundException,\n            IllegalArgumentException;\n\n    /**\n     * Create and persist a new story.\n     */\n    Story create(Story dataItem, Integer backlogId, Integer iterationId, Set<Integer> responsibleIds, List<String> labelNames)\n            throws IllegalArgumentException, ObjectNotFoundException;\n\n    int create(Story story);\n\n    StoryMetrics calculateMetrics(Story story);\n\n    /**\n     * Moves a story to another backlog.\n     */\n    public void moveStoryAway(Story story, Backlog backlog);\n\n    /**\n     * Rank story under the give upperStory.\n     */\n    public Story rankStoryUnder(final Story story, final Story upperStory,\n            Backlog backlog);\n\n    /**\n     * Rank story over the given lowerStory.\n     */\n    public Story rankStoryOver(final Story story, final Story lowerStory,\n            Backlog backlog);\n\n    public Story updateStoryRanks(Story story);\n    \n    /**\n     * Ranks the story to the top of the given backlog.\n     */\n    public Story rankStoryToTop(Story story, Backlog context);\n    \n    /**\n     * Ranks the story to the bottom of the given backlog.\n     */\n    public Story rankStoryToBottom(Story story, Backlog context);\n\n    public StoryTO retrieveStoryWithMetrics(int storyId);\n\n    public List<Story> retrieveStoriesInBacklog(Backlog backlog);\n\n    public List<Story> retrieveStoriesInIteration(Iteration iteration);\n    \n    void delete(Story story, TaskHandlingChoice taskHandlingChoice,\n            HourEntryHandlingChoice storyHourEntryHandlingChoice,\n            HourEntryHandlingChoice taskHourEntryHandlingChoice,\n            ChildHandlingChoice childHandlingChoice);\n\n    void deleteAndUpdateHistory(int id, TaskHandlingChoice taskHandlingChoice,\n            HourEntryHandlingChoice storyHourEntryHandlingChoice,\n            HourEntryHandlingChoice taskHourEntryHandlingChoice,\n            ChildHandlingChoice childHandlingChoice);\n\n    void forceDelete(Story story);\n    \n    public Story createStoryUnder(int referenceStoryId, int backlogId, Story data,\n            Set<Integer> responsibleIds, List<String> labelNames);\n\n    public Story createStorySibling(int referenceStoryId, int backlogId, Story data,\n            Set<Integer> responsibleIds, List<String> labelNames);\n    \n    public void moveSingleStoryToBacklog(Story story, Backlog backlog);\n    \n    public void moveStoryAndChildren(Story story, Backlog backlog);\n\n    public Story copyStorySibling(Integer storyID, Story story);\n    \n    public Story extractUnfinishedStorySibling(Integer storyID, Story story);\n\n    /**\n     * If the story is in progress (state is anything but not_started or deferred) then set parent stories as started.\n     */\n    public void updateParentStates(Story story);\n    \n    /**\n     * Adds the given user to the set of responsibles for story\n     */\n    public void addResponsible(Story story, User user);\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\StoryFilterBusiness.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["StoryFilterBusiness"], "MN": ["filterStories", "filterStoryList"], "PN": ["stories", "storyFilters", "stories", "filters"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport java.util.List;\n\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.util.StoryFilters;\n\npublic interface StoryFilterBusiness {\n\n    List<Story> filterStories(List<Story> stories, StoryFilters storyFilters);\n    public List<Story> filterStoryList(List<Story> stories, StoryFilters filters);\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\StoryHierarchyBusiness.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["StoryHierarchyBusiness"], "MN": ["retrieveProjectRootStories", "retrieveProjectLeafStories", "retrieveProductRootStories", "moveUnder", "moveAfter", "moveBefore", "moveToBottom", "moveToTop", "updateChildrenTreeRanks", "recurseHierarchy", "calculateStoryTreeMetrics"], "PN": ["projectId", "storyFilters", "project", "productId", "storyFilters", "story", "refernece", "story", "reference", "story", "reference", "story", "story", "story", "story", "story"], "CO": ["/**\n     * Fetch root stories that are attached to the given project or any of the\n     * iterations under the project. Root story stands for story that either has\n     * no parent story or the parent story is in the product backlog.\n     * \n     * @param project id\n     * @param storyFilters story filters (or null if no filtering is to be done)\n     * @return list of root stories\n     */", "/***\n     * Fetch leaf stories that are attached to the given project or any of the\n     * iterations under the project. Leaf story means a story which has no child\n     * stories.\n     * \n     * @param project\n     * @return list of leaf stories\n     */", "/**\n     * Retrieve all stories that are in the given product and \n     * which have no parent story.\n     * \n     * @param product id\n     * @param storyFilters story filters (or null if no filtering is to be done)\n     * @return\n     */", "/**\n     * Fixes the indexes of the treeRank-field.\n     * Call this e.g. when deleting a story\n     * @param story the story, whose children are to be reordered\n     */", "/**\n     * Recurses hierarchy to topmost level.\n     * <p>\n     * Will not include any children except the straight hierarchy\n     * from the given story to it's topmost ancestor.\n     * @param story\n     * @return\n     */"], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport java.util.List;\n\nimport fi.hut.soberit.agilefant.model.Project;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.transfer.StoryTO;\nimport fi.hut.soberit.agilefant.transfer.StoryTreeBranchMetrics;\nimport fi.hut.soberit.agilefant.util.StoryFilters;\n\n\npublic interface StoryHierarchyBusiness {\n\n    \n    /**\n     * Fetch root stories that are attached to the given project or any of the\n     * iterations under the project. Root story stands for story that either has\n     * no parent story or the parent story is in the product backlog.\n     * \n     * @param project id\n     * @param storyFilters story filters (or null if no filtering is to be done)\n     * @return list of root stories\n     */\n    public List<Story> retrieveProjectRootStories(int projectId, StoryFilters storyFilters);\n\n    /***\n     * Fetch leaf stories that are attached to the given project or any of the\n     * iterations under the project. Leaf story means a story which has no child\n     * stories.\n     * \n     * @param project\n     * @return list of leaf stories\n     */\n    public List<Story> retrieveProjectLeafStories(Project project);\n    \n    /**\n     * Retrieve all stories that are in the given product and \n     * which have no parent story.\n     * \n     * @param product id\n     * @param storyFilters story filters (or null if no filtering is to be done)\n     * @return\n     */\n    public List<Story> retrieveProductRootStories(int productId, StoryFilters storyFilters);\n    \n    public void moveUnder(Story story, Story refernece);\n    \n    public void moveAfter(Story story, Story reference);\n    \n    public void moveBefore(Story story, Story reference);\n    \n    public void moveToBottom(Story story);\n    \n    public void moveToTop(Story story);\n    \n    /**\n     * Fixes the indexes of the treeRank-field.\n     * Call this e.g. when deleting a story\n     * @param story the story, whose children are to be reordered\n     */\n    public void updateChildrenTreeRanks(Story story);\n    \n    /**\n     * Recurses hierarchy to topmost level.\n     * <p>\n     * Will not include any children except the straight hierarchy\n     * from the given story to it's topmost ancestor.\n     * @param story\n     * @return\n     */\n    public StoryTO recurseHierarchy(Story story);\n\n    public StoryTreeBranchMetrics calculateStoryTreeMetrics(Story story);\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\StoryRankBusiness.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["StoryRankBusiness"], "MN": ["retrieveByRankingContext", "createRank", "getRankByBacklog", "rankBelow", "rankAbove", "rankToBottom", "removeRank", "removeStoryRanks", "removeBacklogRanks", "rankToHead", "retrieveByRankingContext"], "PN": ["backlog", "story", "context", "story", "backlog", "story", "context", "upper", "story", "context", "lower", "story", "context", "story", "context", "story", "backlog", "story", "backlog", "backlogId"], "CO": ["/**\n     * Retrieve stories in the ranking order by backlog. Note that this method\n     * may not return all the stories contained in the backlog, only the stories\n     * that have rank will be returned.\n     */", "/**\n     * Get the story's rank in the given backlog.\n     */", "/**\n     * Rank the given story below the given upper story with in the backlog\n     * context.\n     */", "/**\n     * Rank the given story above the lower story within the backlog context.\n     */", "/**\n     * Rank the given story to the bottom of the given context.\n     */", "/**\n     * Remove rank from the given story in the given context.\n     */", "/**\n     * Rank to the top.\n     */", "/**\n     * @see retrieveByRankingContext(Backlog backlog);\n     */"], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport java.util.List;\n\nimport fi.hut.soberit.agilefant.model.Backlog;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.StoryRank;\nimport fi.hut.soberit.agilefant.transfer.StoryTO;\n\npublic interface StoryRankBusiness {\n\n    /**\n     * Retrieve stories in the ranking order by backlog. Note that this method\n     * may not return all the stories contained in the backlog, only the stories\n     * that have rank will be returned.\n     */\n    List<Story> retrieveByRankingContext(Backlog backlog);\n\n    StoryRank createRank(Story story, Backlog context);    \n    \n    /**\n     * Get the story's rank in the given backlog.\n     */\n    StoryRank getRankByBacklog(Story story, Backlog backlog);\n    \n    /**\n     * Rank the given story below the given upper story with in the backlog\n     * context.\n     */\n    void rankBelow(Story story, Backlog context, Story upper);\n\n    /**\n     * Rank the given story above the lower story within the backlog context.\n     */\n    void rankAbove(Story story, Backlog context, Story lower);\n\n    /**\n     * Rank the given story to the bottom of the given context.\n     */\n    void rankToBottom(Story story, Backlog context);\n\n    /**\n     * Remove rank from the given story in the given context.\n     */\n    void removeRank(Story story, Backlog context);\n    \n    void removeStoryRanks(Story story);\n    \n    void removeBacklogRanks(Backlog backlog);\n    /**\n     * Rank to the top.\n     */\n    void rankToHead(Story story, Backlog backlog);\n    \n    /**\n     * @see retrieveByRankingContext(Backlog backlog);\n     */\n    public List<StoryTO> retrieveByRankingContext(int backlogId);\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\StoryTreeIntegrityBusiness.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["StoryTreeIntegrityBusiness"], "MN": ["checkChangeBacklog", "canStoryBeMovedToBacklog", "checkChangeParentStory", "generateChangedStoryTree", "hasParentStoryConflict", "checkChangeParentStoryAndThrow"], "PN": ["story", "newBacklog", "story", "newBacklog", "story", "newParent", "movedStory", "messages", "story", "newBacklog", "story", "newParent"], "CO": ["/**\n * Used for checking if moving a story is permitted by following rules:\n * \n * 1. Disallow children for iteration stories\n * 2. Disallow situations, where parent story is deeper in backog hierarchy than\n *    its children\n * 3. Disallow situations, where child stories reside under a different branch\n * \n * @author Reko Jokelainen, Pasi Pekkanen\n *\n */"], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport java.util.List;\n\nimport fi.hut.soberit.agilefant.exception.StoryTreeIntegrityViolationException;\nimport fi.hut.soberit.agilefant.model.Backlog;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.transfer.MoveStoryNode;\nimport fi.hut.soberit.agilefant.util.StoryTreeIntegrityMessage;\n\n/**\n * Used for checking if moving a story is permitted by following rules:\n * \n * 1. Disallow children for iteration stories\n * 2. Disallow situations, where parent story is deeper in backog hierarchy than\n *    its children\n * 3. Disallow situations, where child stories reside under a different branch\n * \n * @author Reko Jokelainen, Pasi Pekkanen\n *\n */\npublic interface StoryTreeIntegrityBusiness {\n    \n    public List<StoryTreeIntegrityMessage> checkChangeBacklog(Story story, Backlog newBacklog);\n    \n    public boolean canStoryBeMovedToBacklog(Story story, Backlog newBacklog);\n    \n    public List<StoryTreeIntegrityMessage> checkChangeParentStory(Story story, Story newParent); \n    \n    public MoveStoryNode generateChangedStoryTree(Story movedStory, List<StoryTreeIntegrityMessage> messages);\n    \n    public boolean hasParentStoryConflict(Story story, Backlog newBacklog);\n    public void checkChangeParentStoryAndThrow(Story story, Story newParent) throws StoryTreeIntegrityViolationException;\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\TaskBusiness.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["TaskBusiness"], "MN": ["storeTask", "resetOriginalEstimate", "move", "setTaskToDone", "assignParentForTask", "rankAndMove", "rankUnderTask", "rankToBottom", "addResponsible", "delete", "delete", "deleteAndUpdateHistory"], "PN": ["task", "iterationId", "storyId", "storyToStarted", "taskId", "task", "iterationId", "storyId", "task", "task", "iterationId", "storyId", "task", "upperTask", "parentStoryId", "parentIterationId", "task", "upperTask", "task", "parentStoryId", "parentIterationId", "task", "user", "id", "hourEntryHandlingChoice", "task", "hourEntryHandlingChoice", "id", "hourEntryHandlingChoice"], "CO": ["/**\n     * Populates and stores a task.\n     * @param storyId\n     *            the parent story's id, or zero if none.\n     * @param storyToStarted TODO\n     * \n     * @return the newly stored task\n     */", "// ,", "/**\n     * Moves the tasks and updates both new and old iteration histories.\n     */", "/**\n     * Sets the task to done and removes all corresponding work queue entries.\n     * @param task\n     */", "/**\n     * Sets the tasks parent.\n     * <p>\n     * Parent can be either a story or an iteration. Only one of the parameters:\n     * <code>storyId</code> or <code>iterationId</code> should be given.\n     * \n     * @throws IllegalArgumentException\n     *             if both ids or none were given\n     * @throws ObjectNotFoundException\n     *             if iteration or story was not found\n     */", "/* RANKING */", "/**\n     * Moves the task under the given parent and ranks it one rank below the\n     * upper task.\n     * <p>\n     * Note: upperTask should be left null if topmost rank is wanted.\n     * \n     * @param parentStoryId\n     *            TODO\n     * @param parentIterationId\n     *            TODO\n     * \n     * @throws IllegalArgumentException\n     *             if upperTask's parent is not same as given parent.\n     */", "/**\n     * Rank the task to be under the given task\n     * <p>\n     * The parameter upperTask should be null if the task should be ranked\n     * topmost.\n     * \n     * @param task\n     *            the task to rank\n     * @param upperTask\n     *            the task under which the other task should be ranked. null if\n     *            topmost.\n     * @return TODO\n     * \n     * @throws IllegalArgumentException\n     *             if the upper task is not under same story or iteration\n     * @throws IllegalArgumentException\n     *             if the given task was null\n     */", "/**\n     * Ranks the task to bottom most item under given parent.\n     * <p>\n     * Only one parent id should be given, other left null.\n     * \n     * @throws IllegalArgumentException\n     *             if both parents were given\n     */", "/**\n     * Adds the given user to the set of responsibles for task\n     */", "/**\n     * Deletes a task and optionally handles hour entries.\n     * \n     * @throws UnsupportedOperationException\n     *             if hourEntryHandlingChoice is null and the task contains hour\n     *             entries\n     * @param id\n     *            task id\n     * @param hourEntryHandlingChoice\n     *            handling choice or null\n     */", "/**\n     * Deletes a task and optionally handles hour entries.\n     * \n     * @throws UnsupportedOperationException\n     *             if hourEntryHandlingChoice is null and the task contains hour\n     *             entries\n     * @param task\n     *            task object\n     * @param hourEntryHandlingChoice\n     *            handling choice or null\n     */", "/**\n     * \n     * Deletes a task and updates the iteration history if the task is in an\n     * iteration or in a story that is in an iteration.\n     * \n     * @throws UnsupportedOperationException\n     *             if hourEntryHandlingChoice is null and the task contains hour\n     *             entries\n     * @param id\n     *            task id\n     * @param hourEntryHandlingChoice\n     *            handling choice or null\n     */"], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport fi.hut.soberit.agilefant.exception.ObjectNotFoundException;\nimport fi.hut.soberit.agilefant.model.Task;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.util.HourEntryHandlingChoice;\n\npublic interface TaskBusiness extends GenericBusiness<Task> {\n\n    /**\n     * Populates and stores a task.\n     * @param storyId\n     *            the parent story's id, or zero if none.\n     * @param storyToStarted TODO\n     * \n     * @return the newly stored task\n     */\n    public Task storeTask(Task task, Integer iterationId, Integer storyId, boolean storyToStarted); // ,\n\n    public Task resetOriginalEstimate(int taskId);\n\n    /**\n     * Moves the tasks and updates both new and old iteration histories.\n     */\n    public Task move(Task task, Integer iterationId, Integer storyId);\n\n    /**\n     * Sets the task to done and removes all corresponding work queue entries.\n     * @param task\n     */\n    public void setTaskToDone(Task task);\n    \n    /**\n     * Sets the tasks parent.\n     * <p>\n     * Parent can be either a story or an iteration. Only one of the parameters:\n     * <code>storyId</code> or <code>iterationId</code> should be given.\n     * \n     * @throws IllegalArgumentException\n     *             if both ids or none were given\n     * @throws ObjectNotFoundException\n     *             if iteration or story was not found\n     */\n    public void assignParentForTask(Task task, Integer iterationId,\n            Integer storyId) throws IllegalArgumentException,\n            ObjectNotFoundException;\n\n    /* RANKING */\n    /**\n     * Moves the task under the given parent and ranks it one rank below the\n     * upper task.\n     * <p>\n     * Note: upperTask should be left null if topmost rank is wanted.\n     * \n     * @param parentStoryId\n     *            TODO\n     * @param parentIterationId\n     *            TODO\n     * \n     * @throws IllegalArgumentException\n     *             if upperTask's parent is not same as given parent.\n     */\n    public Task rankAndMove(Task task, Task upperTask, Integer parentStoryId,\n            Integer parentIterationId) throws IllegalArgumentException;\n\n    /**\n     * Rank the task to be under the given task\n     * <p>\n     * The parameter upperTask should be null if the task should be ranked\n     * topmost.\n     * \n     * @param task\n     *            the task to rank\n     * @param upperTask\n     *            the task under which the other task should be ranked. null if\n     *            topmost.\n     * @return TODO\n     * \n     * @throws IllegalArgumentException\n     *             if the upper task is not under same story or iteration\n     * @throws IllegalArgumentException\n     *             if the given task was null\n     */\n    public Task rankUnderTask(Task task, Task upperTask)\n            throws IllegalArgumentException;\n\n    /**\n     * Ranks the task to bottom most item under given parent.\n     * <p>\n     * Only one parent id should be given, other left null.\n     * \n     * @throws IllegalArgumentException\n     *             if both parents were given\n     */\n    public Task rankToBottom(Task task, Integer parentStoryId,\n            Integer parentIterationId) throws IllegalArgumentException;\n\n    /**\n     * Adds the given user to the set of responsibles for task\n     */\n    public void addResponsible(Task task, User user);\n\n    /**\n     * Deletes a task and optionally handles hour entries.\n     * \n     * @throws UnsupportedOperationException\n     *             if hourEntryHandlingChoice is null and the task contains hour\n     *             entries\n     * @param id\n     *            task id\n     * @param hourEntryHandlingChoice\n     *            handling choice or null\n     */\n    void delete(int id, HourEntryHandlingChoice hourEntryHandlingChoice);\n\n    /**\n     * Deletes a task and optionally handles hour entries.\n     * \n     * @throws UnsupportedOperationException\n     *             if hourEntryHandlingChoice is null and the task contains hour\n     *             entries\n     * @param task\n     *            task object\n     * @param hourEntryHandlingChoice\n     *            handling choice or null\n     */\n    void delete(Task task, HourEntryHandlingChoice hourEntryHandlingChoice);\n\n    /**\n     * \n     * Deletes a task and updates the iteration history if the task is in an\n     * iteration or in a story that is in an iteration.\n     * \n     * @throws UnsupportedOperationException\n     *             if hourEntryHandlingChoice is null and the task contains hour\n     *             entries\n     * @param id\n     *            task id\n     * @param hourEntryHandlingChoice\n     *            handling choice or null\n     */\n    void deleteAndUpdateHistory(int id,\n            HourEntryHandlingChoice hourEntryHandlingChoice);\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\TaskSplitBusiness.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["TaskSplitBusiness"], "MN": ["splitTask"], "PN": ["original", "newTasks"], "CO": ["/**\n     * Split a task and create new tasks accordingly.\n     * \n     * @param original original task to split\n     * @param newTasks the new tasks to create\n     * @return the split task\n     */"], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport java.util.Collection;\n\nimport fi.hut.soberit.agilefant.model.Task;\n\npublic interface TaskSplitBusiness {\n    /**\n     * Split a task and create new tasks accordingly.\n     * \n     * @param original original task to split\n     * @param newTasks the new tasks to create\n     * @return the split task\n     */\n    public Task splitTask(Task original, Collection<Task> newTasks);\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\TeamBusiness.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["TeamBusiness", "Call"], "MN": ["storeTeam", "getUsersInSameTeams", "withUsers", "getByTeamName", "call"], "PN": ["team", "userIds", "productIds", "iterationIds", "userId", "call", "teamName"], "CO": ["/**\n * Interface for team business.\n * \n * @author hhaataja\n * \n */", "/**\n     * Store or create a team.\n     */", "/**\n\t * Interface to specify a method call\n\t * \n\t * @param <T> return type for the call\n\t */"], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport java.util.Collection;\nimport java.util.Set;\n\nimport fi.hut.soberit.agilefant.model.Team;\nimport fi.hut.soberit.agilefant.model.User;\n\n/**\n * Interface for team business.\n * \n * @author hhaataja\n * \n */\npublic interface TeamBusiness extends GenericBusiness<Team> {\n\n    /**\n     * Store or create a team.\n     */\n    Team storeTeam(Team team, Set<Integer> userIds, Set<Integer> productIds, Set<Integer> iterationIds);\n    \n    Set<User> getUsersInSameTeams(int userId);\n\n    public Collection<Team> withUsers(Call<Collection<Team>> call);\n\n    Team getByTeamName(String teamName);\n    \n\t/**\n\t * Interface to specify a method call\n\t * \n\t * @param <T> return type for the call\n\t */\n\tinterface Call<T> {\n\t\tpublic T call();\n\t}    \n    \n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\TimesheetBusiness.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["TimesheetBusiness"], "MN": ["getRootNodes", "generateTimesheet", "findRootNodes", "getRootNodeSum"], "PN": ["backlogIds", "startDate", "endDate", "timeZone", "userIds", "backlogIds", "startDate", "endDate", "userIds", "sheetData", "nodes"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport java.util.List;\nimport java.util.Set;\n\nimport org.joda.time.DateTime;\nimport org.joda.time.DateTimeZone;\n\nimport fi.hut.soberit.agilefant.transfer.BacklogTimesheetNode;\nimport fi.hut.soberit.agilefant.util.TimesheetData;\n\npublic interface TimesheetBusiness {\n    public List<BacklogTimesheetNode> getRootNodes(Set<Integer> backlogIds, DateTime startDate, DateTime endDate, DateTimeZone timeZone, Set<Integer> userIds);\n    public TimesheetData generateTimesheet(Set<Integer> backlogIds, DateTime startDate, DateTime endDate, Set<Integer> userIds);\n    public List<BacklogTimesheetNode> findRootNodes(TimesheetData sheetData);\n    public long getRootNodeSum(List<BacklogTimesheetNode> nodes);\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\TimesheetExportBusiness.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["TimesheetExportBusiness"], "AN": ["COLUMN_NAMES", "MAX_COLUMN_SIZE", "PRODUCT_COLUMN_NUM", "PROJECT_COLUMN_NUM", "ITERATION_COLUMN_NUM", "STORYID_COLUMN_NUM", "STORY_COLUMN_NUM", "TASKID_COLUMN_NUM", "TASK_COLUMN_NUM", "DESCRIPTION_COLUMN_NUM", "USER_COLUMN_NUM", "DATE_COLUMN_NUM", "EFFORT_COLUMN_NUM", "DATE_FORMAT", "EFFORT_FORMAT", "HEADER_FONT_WEIGHT"], "SCS_VariableDeclarator": ["COLUMN_NAMES", "MAX_COLUMN_SIZE", "PRODUCT_COLUMN_NUM", "PROJECT_COLUMN_NUM", "ITERATION_COLUMN_NUM", "STORYID_COLUMN_NUM", "STORY_COLUMN_NUM", "TASKID_COLUMN_NUM", "TASK_COLUMN_NUM", "DESCRIPTION_COLUMN_NUM", "USER_COLUMN_NUM", "DATE_COLUMN_NUM", "EFFORT_COLUMN_NUM", "DATE_FORMAT", "EFFORT_FORMAT", "HEADER_FONT_WEIGHT"], "SCS_MemberReference": ["BOLDWEIGHT_BOLD"], "MN": ["generateTimesheet"], "PN": ["textProvider", "backlogIds", "startDate", "endDate", "timeZone", "userIds"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport java.util.Set;\n\nimport org.apache.poi.ss.usermodel.Font;\nimport org.apache.poi.ss.usermodel.Workbook;\nimport org.joda.time.DateTime;\nimport org.joda.time.DateTimeZone;\n\nimport com.opensymphony.xwork2.TextProvider;\n\n\npublic interface TimesheetExportBusiness {\n    public static final String[] COLUMN_NAMES = { \"timesheet.product\",\n            \"timesheet.project\", \"timesheet.iteration\", \"timesheet.storyid\", \"timesheet.story\",\n            \"timesheet.taskid\", \"timesheet.task\", \"timesheet.description\", \"timesheet.user\",\n            \"timesheet.date\", \"timesheet.effort\" };\n    public static final int[] MAX_COLUMN_SIZE = { 0, 0, 0, 256 * 15, 256 * 55, 256 * 15, 256 * 55,\n            256 * 55, 0, 256 * 15, 0 };\n    public static final int PRODUCT_COLUMN_NUM = 0;\n    public static final int PROJECT_COLUMN_NUM = 1;\n    public static final int ITERATION_COLUMN_NUM = 2;\n    public static final int STORYID_COLUMN_NUM = 3;\n    public static final int STORY_COLUMN_NUM = 4;\n    public static final int TASKID_COLUMN_NUM = 5;\n    public static final int TASK_COLUMN_NUM = 6;\n    public static final int DESCRIPTION_COLUMN_NUM = 7;\n    public static final int USER_COLUMN_NUM = 8;\n    public static final int DATE_COLUMN_NUM = 9;\n    public static final int EFFORT_COLUMN_NUM = 10;\n    public static final String DATE_FORMAT = \"dd.mm.yyyy hh:mm\";\n    public static final String EFFORT_FORMAT = \"#,##0.00\";\n    public static final short HEADER_FONT_WEIGHT = Font.BOLDWEIGHT_BOLD;\n    \n\n    public Workbook generateTimesheet(TextProvider textProvider,\n            Set<Integer> backlogIds, DateTime startDate, DateTime endDate, DateTimeZone timeZone,\n            Set<Integer> userIds);\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\TransferObjectBusiness.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["TransferObjectBusiness"], "MN": ["constructTaskTO", "constructStoryTO", "constructIterationTO", "constructProjectTO", "constructUserAutocompleteData", "constructTeamAutocompleteData", "constructBacklogAutocompleteData", "constructBacklogAndIterationAutocompleteData", "constructProductAutocompleteData", "constructProjectAutocompleteData", "constructCurrentIterationAutocompleteData", "getBacklogScheduleStatus", "constructQueuedDailyWorkTaskTO", "constructQueuedStoryTO", "constructAssignedWorkTO"], "PN": ["task", "story", "iteration", "project", "listUserIds", "backlogId", "backlogId", "backlog", "task", "story", "tasks", "stories"], "CO": ["/**\n     * Constructs a new transfer object based on given task.\n     */", "/**\n     * Constructs a new transfer object based on given story.\n     */", "/**\n     * Constructs a new transfer object based on given task.\n     */", "/**\n     * \n     */", "/**\n     * Get all users in AutoCompleteData containers.\n     */", "/**\n     * Get all teams in AutoCompleteData containers.\n     * @param listUserIds Add user ids as idList.\n     */", "/**\n     * Get all backlogs in AutoCompleteData containers.\n     * \n     * Use <code>backlogId</code> to filter out other products' child backlogs.\n     *   \n     * @param backlogId Filter backlogs by parent product of the backlog with id <code>backlogId</code>\n     */", "/**\n     * Get all backlogs and iterations in AutoCompleteData containers.\n     * \n     * Use <code>backlogId</code> to filter out other products' child backlogs.\n     *   \n     * @param backlogId Filter backlogs by parent product of the backlog with id <code>backlogId</code>\n     */", "/**\n     * Get all products in <code>AutoCompleteData</code> containers.\n     */", "/**\n     * Get all projects in <code>AutoCompleteData</code> containers.\n     */", "/**\n     * Get all backlogs in AutoCompleteData containers.\n     */", "/**    \n     * Checks whether the backlog is ongoing, past or future.\n     */", "/**\n     * Constructs a new daily work task transfer object for queue entry\n     */", "/**\n     * Constructs a new daily work story transfer object for queue entry\n     */", "/**\n     * Constructs a new assigned work transfer object for the given tasks\n     * @param stories \n     */"], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport java.util.Collection;\nimport java.util.List;\n\nimport fi.hut.soberit.agilefant.model.Backlog;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.Project;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.Task;\nimport fi.hut.soberit.agilefant.model.WhatsNextEntry;\nimport fi.hut.soberit.agilefant.model.WhatsNextStoryEntry;\nimport fi.hut.soberit.agilefant.transfer.AssignedWorkTO;\nimport fi.hut.soberit.agilefant.transfer.AutocompleteDataNode;\nimport fi.hut.soberit.agilefant.transfer.DailyWorkTaskTO;\nimport fi.hut.soberit.agilefant.transfer.IterationTO;\nimport fi.hut.soberit.agilefant.transfer.ProjectTO;\nimport fi.hut.soberit.agilefant.transfer.ScheduleStatus;\nimport fi.hut.soberit.agilefant.transfer.StoryTO;\nimport fi.hut.soberit.agilefant.transfer.TaskTO;\n\npublic interface TransferObjectBusiness {\n\n    /**\n     * Constructs a new transfer object based on given task.\n     */\n    public TaskTO constructTaskTO(Task task);\n    \n    /**\n     * Constructs a new transfer object based on given story.\n     */\n    public StoryTO constructStoryTO(Story story);\n    \n    /**\n     * Constructs a new transfer object based on given task.\n     */\n    public IterationTO constructIterationTO(Iteration iteration);\n    \n    /**\n     * \n     */\n    public ProjectTO constructProjectTO(Project project);\n    \n    /**\n     * Get all users in AutoCompleteData containers.\n     */\n    public List<AutocompleteDataNode> constructUserAutocompleteData();\n    \n    /**\n     * Get all teams in AutoCompleteData containers.\n     * @param listUserIds Add user ids as idList.\n     */\n    public List<AutocompleteDataNode> constructTeamAutocompleteData(boolean listUserIds);\n    \n    /**\n     * Get all backlogs in AutoCompleteData containers.\n     * \n     * Use <code>backlogId</code> to filter out other products' child backlogs.\n     *   \n     * @param backlogId Filter backlogs by parent product of the backlog with id <code>backlogId</code>\n     */\n    public List<AutocompleteDataNode> constructBacklogAutocompleteData(Integer backlogId);\n    \n    /**\n     * Get all backlogs and iterations in AutoCompleteData containers.\n     * \n     * Use <code>backlogId</code> to filter out other products' child backlogs.\n     *   \n     * @param backlogId Filter backlogs by parent product of the backlog with id <code>backlogId</code>\n     */\n    public List<AutocompleteDataNode> constructBacklogAndIterationAutocompleteData(Integer backlogId);\n    \n    /**\n     * Get all products in <code>AutoCompleteData</code> containers.\n     */\n    public List<AutocompleteDataNode> constructProductAutocompleteData();\n    \n    /**\n     * Get all projects in <code>AutoCompleteData</code> containers.\n     */\n    public List<AutocompleteDataNode> constructProjectAutocompleteData();\n    \n    /**\n     * Get all backlogs in AutoCompleteData containers.\n     */\n    public List<AutocompleteDataNode> constructCurrentIterationAutocompleteData();\n\n    /**    \n     * Checks whether the backlog is ongoing, past or future.\n     */\n    public ScheduleStatus getBacklogScheduleStatus(Backlog backlog);\n    \n    /**\n     * Constructs a new daily work task transfer object for queue entry\n     */\n    public DailyWorkTaskTO constructQueuedDailyWorkTaskTO(WhatsNextEntry task);\n    \n    /**\n     * Constructs a new daily work story transfer object for queue entry\n     */\n    public StoryTO constructQueuedStoryTO(WhatsNextStoryEntry story);\n\n    /**\n     * Constructs a new assigned work transfer object for the given tasks\n     * @param stories \n     */\n    public AssignedWorkTO constructAssignedWorkTO(Collection<Task> tasks, Collection<Story> stories);\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\UserBusiness.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["UserBusiness"], "AN": ["NON_EXISTENT_USER_ID"], "SCS_VariableDeclarator": ["NON_EXISTENT_USER_ID"], "MN": ["storeUser", "retrieveByLoginName", "isLoginNameUnique", "getEnabledUsers", "getDisabledUsers", "disableUser", "enableUser", "setAdmin", "calculateWorktimePerPeriod", "calculateWorkHoursPerPeriod", "retrieveByCredentials"], "PN": ["data", "teamIds", "password", "passwordConfirm", "loginName", "loginName", "id", "id", "id", "admin", "user", "interval", "user", "interval", "loginName", "password"], "CO": ["/**\n * Interface for user business.\n * \n * @author rjokelai\n * \n */", "/**\n     * Store a user and return the persisted object.\n     * <p>\n     * Changes the password if (password1 != null) and (password1 == password2)\n     * @param teamIds TODO\n     * @param passwordConfirm TODO\n     * @return the newly persisted user\n     */", "/**\n     * Get all enabled users.\n     * \n     * @return list of enabled users\n     */", "/**\n     * Get all disabled users.\n     * \n     * @return list of disabled users\n     */", "/**\n     * Duration object representing total (days) that the given user can work\n     * within the given timeframe.\n     */"], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport java.util.List;\nimport java.util.Set;\n\nimport org.joda.time.Duration;\nimport org.joda.time.Interval;\n\nimport fi.hut.soberit.agilefant.model.ExactEstimate;\nimport fi.hut.soberit.agilefant.model.User;\n\n/**\n * Interface for user business.\n * \n * @author rjokelai\n * \n */\npublic interface UserBusiness extends GenericBusiness<User> {\n    \n    public static final int NON_EXISTENT_USER_ID = -1;\n\n    /**\n     * Store a user and return the persisted object.\n     * <p>\n     * Changes the password if (password1 != null) and (password1 == password2)\n     * @param teamIds TODO\n     * @param passwordConfirm TODO\n     * @return the newly persisted user\n     */\n    User storeUser(User data, Set<Integer> teamIds, String password, String passwordConfirm);\n\n    User retrieveByLoginName(String loginName);\n\n    public boolean isLoginNameUnique(String loginName);\n    \n    /**\n     * Get all enabled users.\n     * \n     * @return list of enabled users\n     */\n    List<User> getEnabledUsers();\n\n    /**\n     * Get all disabled users.\n     * \n     * @return list of disabled users\n     */\n    List<User> getDisabledUsers();\n\n    void disableUser(int id);\n\n    void enableUser(int id);\n    \n    void setAdmin(int id, boolean admin);\n\n    /**\n     * Duration object representing total (days) that the given user can work\n     * within the given timeframe.\n     */\n    public Duration calculateWorktimePerPeriod(User user, Interval interval);\n    public ExactEstimate calculateWorkHoursPerPeriod(User user, Interval interval);\n    \n    public User retrieveByCredentials(String loginName, String password);\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\WidgetCollectionBusiness.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["WidgetCollectionBusiness"], "MN": ["createPortfolio", "getCollections", "insertWidgetToHead", "insertWidgetToPosition"], "PN": ["collection", "widget", "collection", "widget", "position", "listNumber"], "CO": ["/**\n     * Create a new portfolio.\n     */", "/**\n     * Retrieve all <code>WidgetCollection</code>s as alphabetical list.\n     */", "/**\n     * Insert the widget to a given position and shift the others.\n     */", "/**\n     * Inserts the widget to a given position\n     */"], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport java.util.List;\n\nimport fi.hut.soberit.agilefant.model.AgilefantWidget;\nimport fi.hut.soberit.agilefant.model.WidgetCollection;\n\npublic interface WidgetCollectionBusiness extends\n        GenericBusiness<WidgetCollection> {\n\n    /**\n     * Create a new portfolio.\n     */\n    public WidgetCollection createPortfolio();\n    \n    /**\n     * Retrieve all <code>WidgetCollection</code>s as alphabetical list.\n     */\n    public List<WidgetCollection> getCollections();\n    \n    /**\n     * Insert the widget to a given position and shift the others.\n     */\n    public void insertWidgetToHead(WidgetCollection collection, AgilefantWidget widget);\n\n    /**\n     * Inserts the widget to a given position\n     */\n    public void insertWidgetToPosition(WidgetCollection collection, AgilefantWidget widget, int position, int listNumber);\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\impl\\\\AgilefantWidgetBusinessImpl.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["AgilefantWidgetBusinessImpl"], "AN": ["widgetCollectionBusiness", "agilefantWidgetDAO"], "SCS_VariableDeclarator": ["widgetCollectionBusiness", "agilefantWidgetDAO", "storable", "collection", "newId", "widgets", "columns", "numberOfLists", "widget", "i", "widget", "column"], "MN": ["setAgilefantWidgetDAO", "create", "move", "generateWidgetGrid"], "PN": ["agilefantWidgetDAO", "type", "objectId", "collectionId", "widget", "position", "listNumber", "collection", "minNumberOfLists"], "SCS_MemberReference": ["genericDAO", "agilefantWidgetDAO", "agilefantWidgetDAO", "agilefantWidgetDAO", "type", "objectId", "collectionId", "collectionId", "type", "objectId", "collection", "collection", "storable", "storable", "newId", "widget", "position", "listNumber", "minNumberOfLists", "widgets", "numberOfLists", "numberOfLists", "i", "numberOfLists", "i", "widgets", "widget", "columns", "column", "columns"], "SCS_ConstructorDeclaration": ["AgilefantWidgetBusinessImpl"], "SCS_ClassReference": ["AgilefantWidget", "widgetCollectionBusiness", "storable", "storable", "storable", "widgetCollectionBusiness", "agilefantWidgetDAO", "agilefantWidgetDAO", "widgetCollectionBusiness", "widget", "collection", "widget", "widget", "columns", "columns", null, "widget", "Collections"], "SCS_VariableDeclaration": ["AgilefantWidget", "WidgetCollection", "Integer", "Collection", "List", "int", "AgilefantWidget", "int", "AgilefantWidget", "List"], "SCS_MethodInvocation": ["retrieve", "setType", "setObjectId", "setWidgetCollection", "insertWidgetToHead", "create", "get", "insertWidgetToPosition", "getWidgetCollection", "getWidgets", "getListNumber", "getListNumber", "add", "get", "add", "getListNumber", "sort"], "CO": ["/** {@inheritDoc} */", "/** {@inheritDoc} */", "/** {@inheritDoc} */"], "CODE": "package fi.hut.soberit.agilefant.business.impl;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.List;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.support.PropertyComparator;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport fi.hut.soberit.agilefant.business.AgilefantWidgetBusiness;\nimport fi.hut.soberit.agilefant.business.WidgetCollectionBusiness;\nimport fi.hut.soberit.agilefant.db.AgilefantWidgetDAO;\nimport fi.hut.soberit.agilefant.model.AgilefantWidget;\nimport fi.hut.soberit.agilefant.model.WidgetCollection;\n\n@Service(\"agilefantWidgetBusiness\")\n@Transactional\npublic class AgilefantWidgetBusinessImpl extends\n        GenericBusinessImpl<AgilefantWidget> implements AgilefantWidgetBusiness {\n\n    @Autowired\n    private WidgetCollectionBusiness widgetCollectionBusiness;\n    \n    private AgilefantWidgetDAO agilefantWidgetDAO;\n    \n    @Autowired\n    public void setAgilefantWidgetDAO(AgilefantWidgetDAO agilefantWidgetDAO) {\n        this.genericDAO = agilefantWidgetDAO;\n        this.agilefantWidgetDAO = agilefantWidgetDAO;\n    }\n\n    public AgilefantWidgetBusinessImpl() {\n        super(AgilefantWidget.class);\n    }\n    \n    /** {@inheritDoc} */\n    @Transactional\n    public AgilefantWidget create(String type, Integer objectId, Integer collectionId) {\n        AgilefantWidget storable = new AgilefantWidget();\n        \n        if (type == null || objectId == null || collectionId == null) {\n            throw new IllegalArgumentException(\"Arguments must be supplied\");\n        }\n        \n        WidgetCollection collection = widgetCollectionBusiness.retrieve(collectionId);\n        \n        storable.setType(type);\n        storable.setObjectId(objectId);\n        storable.setWidgetCollection(collection);\n        \n        widgetCollectionBusiness.insertWidgetToHead(collection, storable);\n        \n        Integer newId = (Integer)agilefantWidgetDAO.create(storable);\n        \n        return  agilefantWidgetDAO.get(newId);\n    }\n    \n    \n    /** {@inheritDoc} */\n    @Transactional\n    public void move(AgilefantWidget widget, int position, int listNumber) {\n        widgetCollectionBusiness.insertWidgetToPosition(widget\n                .getWidgetCollection(), widget, position, listNumber);\n    }\n\n    /** {@inheritDoc} */\n    @SuppressWarnings(\"unchecked\")\n    @Transactional(readOnly = true)\n    public List<List<AgilefantWidget>> generateWidgetGrid(\n            WidgetCollection collection, int minNumberOfLists) {\n        Collection<AgilefantWidget> widgets = collection.getWidgets();\n        List<List<AgilefantWidget>> columns = new ArrayList<List<AgilefantWidget>>();\n        int numberOfLists = minNumberOfLists - 1;\n\n        for (AgilefantWidget widget : widgets) {\n            if (numberOfLists < widget.getListNumber()) {\n                numberOfLists = widget.getListNumber();\n            }\n        }\n\n        for (int i = 0; i <= numberOfLists; i++) {\n            columns.add(new ArrayList<AgilefantWidget>());\n        }\n\n        for (AgilefantWidget widget : widgets) {\n            columns.get(widget.getListNumber()).add(widget);\n        }\n        for (List<AgilefantWidget> column : columns) {\n            Collections.sort(column, new PropertyComparator(\"position\", true,\n                    true));\n        }\n        return columns;\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\impl\\\\AssignmentBusinessImpl.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["AssignmentBusinessImpl"], "AN": ["assignmentDAO", "userBusiness"], "SCS_VariableDeclarator": ["assignmentDAO", "userBusiness", "persisted", "userIds", "assignments", "assignment", "assignments", "assignedUserIds", "userId", "user", "assignment", "assignmentId"], "SCS_ConstructorDeclaration": ["AssignmentBusinessImpl"], "SCS_ClassReference": ["Assignment", null, "persisted", "persisted", null, null, "userIds", "assignment", null, null, null, null, "assignedUserIds", "userBusiness", "assignment", "assignment", null, "assignments", null], "MN": ["store", "getAssignemntsFromBacklog", "getAssignedUserIds", "addMultiple", "addMultiple", "setAssignmentDAO", "setUserBusiness"], "PN": ["assignmentId", "personalLoad", "availability", "backlog", "backlog", "backlog", "userIds", "backlog", "userIds", "personalLoad", "availability", "assignmentDAO", "userBusiness"], "SCS_VariableDeclaration": ["Assignment", "Set", "Collection", "Assignment", "Set", "Set", "int", "User", "Assignment", "int"], "SCS_MethodInvocation": ["retrieve", "setPersonalLoad", "setAvailability", "store", "getAssignemntsFromBacklog", "add", "getUser", "getId", "addMultiple", "getAssignemntsFromBacklog", "getAssignedUserIds", "contains", "retrieve", "setAvailability", "setPersonalLoad", "create", "add", "get"], "SCS_MemberReference": ["assignmentId", "personalLoad", "availability", "assignmentDAO", "persisted", "persisted", "backlog", "backlog", "backlog", "backlog", "backlog", "assignments", "userIds", "backlog", "userIds", "ZERO", "backlog", "backlog", "userIds", "userId", "userId", "user", "backlog", "availability", "personalLoad", "assignmentDAO", "assignment", "assignmentDAO", "assignmentId", "assignments", "assignmentDAO", "assignmentDAO", "genericDAO", "assignmentDAO", "userBusiness", "userBusiness"], "CO": ["//only one assignment per user per backlog"], "CODE": "package fi.hut.soberit.agilefant.business.impl;\n\nimport java.util.Collection;\nimport java.util.HashSet;\nimport java.util.Set;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport fi.hut.soberit.agilefant.business.AssignmentBusiness;\nimport fi.hut.soberit.agilefant.business.UserBusiness;\nimport fi.hut.soberit.agilefant.db.AssignmentDAO;\nimport fi.hut.soberit.agilefant.model.Assignment;\nimport fi.hut.soberit.agilefant.model.Backlog;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.Project;\nimport fi.hut.soberit.agilefant.model.SignedExactEstimate;\nimport fi.hut.soberit.agilefant.model.User;\n\n@Service(\"assignmentBusiness\")\n@Transactional\npublic class AssignmentBusinessImpl extends GenericBusinessImpl<Assignment>\n        implements AssignmentBusiness {\n\n    private AssignmentDAO assignmentDAO;\n    private UserBusiness userBusiness;\n    \n    public AssignmentBusinessImpl() {\n        super(Assignment.class);\n    }\n    \n    public Assignment store(int assignmentId, SignedExactEstimate personalLoad,\n            int availability) {\n        Assignment persisted = this.retrieve(assignmentId);\n        persisted.setPersonalLoad(personalLoad);\n        persisted.setAvailability(availability);\n        this.assignmentDAO.store(persisted);\n        return persisted;\n    }\n\n    private Set<Assignment> getAssignemntsFromBacklog(Backlog backlog) {\n        if(backlog instanceof Iteration) {\n            return ((Iteration)backlog).getAssignments();\n        } else if(backlog instanceof Project) {\n            return ((Project)backlog).getAssignments();\n        }\n        return new HashSet<Assignment>();\n    }\n    public Set<Integer> getAssignedUserIds(Backlog backlog) {\n        Set<Integer> userIds = new HashSet<Integer>();\n        Collection<Assignment> assignments = this.getAssignemntsFromBacklog(backlog);\n        for(Assignment assignment : assignments) {\n            userIds.add(assignment.getUser().getId());\n        }\n        return userIds;\n    }\n    \n    public Set<Assignment> addMultiple(Backlog backlog, Set<Integer> userIds) {\n        return this.addMultiple(backlog, userIds, SignedExactEstimate.ZERO, 100);\n    }\n  \n    public Set<Assignment> addMultiple(Backlog backlog,\n            Set<Integer> userIds, SignedExactEstimate personalLoad, int availability) {\n        Set<Assignment> assignments = this.getAssignemntsFromBacklog(backlog);\n        Set<Integer> assignedUserIds = this.getAssignedUserIds(backlog);\n        for (int userId : userIds) {\n            //only one assignment per user per backlog\n            if(!assignedUserIds.contains(userId)) {\n                User user = userBusiness.retrieve(userId);\n                Assignment assignment = new Assignment(user, backlog);\n                assignment.setAvailability(availability);\n                assignment.setPersonalLoad(personalLoad);\n                int assignmentId = (Integer) this.assignmentDAO.create(assignment);\n                assignments.add(this.assignmentDAO.get(assignmentId));\n            }\n        }\n        return assignments;\n    }\n\n    @Autowired\n    public void setAssignmentDAO(AssignmentDAO assignmentDAO) {\n        this.assignmentDAO = assignmentDAO;\n        this.genericDAO = assignmentDAO;\n    }\n\n    @Autowired\n    public void setUserBusiness(UserBusiness userBusiness) {\n        this.userBusiness = userBusiness;\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\impl\\\\AuthorizationBusinessImpl.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["AuthorizationBusinessImpl"], "AN": ["backlogBusiness", "iterationBusiness", "userBusiness"], "SCS_VariableDeclarator": ["backlogBusiness", "iterationBusiness", "userBusiness", "teams", "product", "iteration", "iter", "team", "iterations", "iter", "team", "prods", "team", "otherUser"], "MN": ["isBacklogAccessible", "isUserAccessible"], "PN": ["backlogId", "user", "otherUserId", "user"], "SCS_MemberReference": ["user", "userBusiness", "backlogId", "product", "backlogId", "iteration", "product", "user", "userBusiness", "otherUserId"], "SCS_ClassReference": [null, "user", "user", "user", "backlogBusiness", "backlogBusiness", "iterationBusiness", "iteration", "teams", "iter", "iter", "team", "iterations", "teams", "iter", "iter", "team", "prods", null, "user", "user", "user", "team", "otherUser"], "SCS_MethodInvocation": ["retrieve", "getId", "isAdmin", "getTeams", "getParentProduct", "retrieve", "retrieve", "isStandAlone", "iterator", "hasNext", "next", "getIterations", "contains", "iterator", "hasNext", "next", "getProducts", "contains", "retrieve", "getId", "isAdmin", "getTeams", "getUsers", "getId"], "SCS_VariableDeclaration": ["Collection", "Product", "Iteration", "Iterator", "Team", "Set", "Iterator", "Team", "Set", "Team", "User"], "CO": ["//standalone iteration"], "CODE": "package fi.hut.soberit.agilefant.business.impl;\n\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.Set;\n\nimport org.hibernate.Hibernate;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport fi.hut.soberit.agilefant.business.AuthorizationBusiness;\nimport fi.hut.soberit.agilefant.business.BacklogBusiness;\nimport fi.hut.soberit.agilefant.business.IterationBusiness;\nimport fi.hut.soberit.agilefant.business.UserBusiness;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.Product;\nimport fi.hut.soberit.agilefant.model.Team;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.security.SecurityUtil;\n\n@Service(\"authorizationBusiness\")\npublic class AuthorizationBusinessImpl implements AuthorizationBusiness {\n\n\t@Autowired\n\tBacklogBusiness backlogBusiness;\n\t\n\t@Autowired\n\tIterationBusiness iterationBusiness;\n\t\n\t@Autowired\n\tUserBusiness userBusiness;\n\t\n\t@Override\n\t@Transactional(readOnly=true)\n\tpublic boolean isBacklogAccessible(int backlogId, User user) {\n\t\tuser = this.userBusiness.retrieve(user.getId());\n\t\t\n\t\tif (user.isAdmin()) {\n\t\t    return true;\n\t\t}\n        \n        Collection<Team> teams = user.getTeams();\n        \n        Product product = (backlogBusiness.getParentProduct(backlogBusiness.retrieve(backlogId)));\n        if(product == null){\n            //standalone iteration\n            Iteration iteration = iterationBusiness.retrieve(backlogId);\n            if(iteration.isStandAlone()){\n                for (Iterator<Team> iter = teams.iterator(); iter.hasNext();){\n                    Team team = (Team) iter.next();\n                    \n                    Set<Iteration> iterations = team.getIterations();\n                    if (iterations.contains(iteration)) {\n                        return true; \n                    }\n                }\n                return false;\n            }            \n        }        \n\n        for (Iterator<Team> iter = teams.iterator(); iter.hasNext();){\n            Team team = (Team) iter.next();\n            Set<Product> prods = team.getProducts();\n            if (prods.contains(product)) {\n                return true; \n            }\n        }\n        return false;\n\t}\n\t\n    @Override\n    public boolean isUserAccessible(int otherUserId, User user) {\n        user = this.userBusiness.retrieve(user.getId());\n        \n        if (user.isAdmin()) {\n            return true;\n        }\n        \n        for(Team team : user.getTeams()) {\n            for (User otherUser : team.getUsers()) {\n                if (otherUser.getId() == otherUserId) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\impl\\\\BacklogBusinessImpl.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["BacklogBusinessImpl"], "AN": ["backlogDAO", "productDAO", "assignmentBusiness", "storyDAO", "storyBusiness", "backlogHistoryDAO"], "SCS_VariableDeclarator": ["backlogDAO", "productDAO", "assignmentBusiness", "storyDAO", "storyBusiness", "backlogHistoryDAO", "childBacklogs", "currentTime", "backlogInterval", "tobacklogEnd", "intersection", "backlogInterval", "daysLeft", "backlog", "parent", "parent", "added", "deleted", "removedDuringIteration", "entry", "unexpectedStories", "entry", "unexpected", "story", "current"], "SCS_ConstructorDeclaration": ["BacklogBusinessImpl"], "SCS_ClassReference": ["Backlog", "backlogDAO", "backlogDAO", "childBacklogs", "productDAO", "childBacklogs", "backlog", "backlog", null, "backlog", null, "backlog", null, "Days", "currentTime", "backlog", null, "tobacklogEnd", "backlogInterval", "Days", "Days", "backlog", null, "backlog", null, null, "daysLeft", null, "backlogInterval", "backlogDAO", "backlogDAO", null, null, "backlog", "parent", "parent", "parent", "parent", "parent", "parent", "storyDAO", "iteration", "storyDAO", "iteration", "storyDAO", "iteration", null, null, "entry", null, "backlog", "entry", null, "backlog", "removedDuringIteration", "entry", "entry", null, "backlog", "entry", null, "backlog", "removedDuringIteration", "entry", "unexpectedStories", "entry", null, "story", "unexpected", "unexpected"], "MN": ["setBacklogDAO", "getNumberOfChildren", "retrieveAllStandAloneIterations", "getChildBacklogs", "daysLeftInSchedulableBacklog", "calculateBacklogTimeframePercentageLeft", "calculateStoryPointSum", "calculateDoneStoryPointSum", "addAssignees", "getParentProduct", "getRootParentId", "getStoryPointSumByIteration", "getStoryValueSumByIteration", "getCompletedStoryValueSumByIteration", "retrieveUnexpectedStories"], "PN": ["backlogDAO", "backlog", "backlog", "backlog", "backlog", "backlogId", "backlogId", "backlogId", "userIds", "backlog", "backlog", "iteration", "iteration", "iteration", "backlog"], "SCS_MemberReference": ["genericDAO", "backlogDAO", "backlogDAO", "backlogDAO", "backlog", "backlog", "childBacklogs", "backlogInterval", "intersection", "backlog", "backlogId", "backlogId", "backlogId", "assignmentBusiness", "backlog", "userIds", "ZERO", "backlog", "backlog", "backlog", "backlog", "backlog", "parent", "parent", "parent", "parent", "parent", "backlog", "parent", "parent", "parent", "backlogHistoryDAO", "backlog", "backlogHistoryDAO", "backlog", "deleted", "added", "unexpectedStories", "storyBusiness", "current", "current", "story", "unexpected"], "SCS_MethodInvocation": ["getNumberOfChildren", "retrieveStandaloneIterations", "addAll", "getAll", "addAll", "getChildren", "getStartDate", "toDateMidnight", "getEndDate", "toDateMidnight", "getEndDate", "isBeforeNow", "days", "toDateMidnight", "getEndDate", "toDateMidnight", "overlap", "toDurationMillis", "days", "daysIn", "getStartDate", "toDateMidnight", "getEndDate", "toDateMidnight", "daysLeftInSchedulableBacklog", "toStandardDuration", "getMillis", "toDurationMillis", "calculateStoryPointSum", "calculateDoneStoryPointSum", "retrieve", "addMultiple", "getParent", "isStandAlone", "getParent", "isStandAlone", "getId", "getParent", "getId", "getStoryPointSumByIteration", "getId", "getStoryValueSumByIteration", "getId", "getCompletedStoryValueSumByIteration", "getId", "retrieveAddedStories", "retrieveDeletedStories", "getRevisionDate", "isAfter", "getStartDate", "getRevisionDate", "isBefore", "getEndDate", "add", "getObjectId", "getRevisionDate", "isAfter", "getStartDate", "getRevisionDate", "isBefore", "getEndDate", "contains", "getObjectId", "add", "getObject", "retrieveIfExists", "getId", "add", "add"], "SCS_VariableDeclaration": ["Collection", "DateTime", "Interval", "Interval", "Interval", "Interval", "Days", "Backlog", "Backlog", "Backlog", "List", "List", "List", "AgilefantHistoryEntry", "List", "AgilefantHistoryEntry", "List", "Story", "Story"], "CO": ["/**\n * \n * @author Teemu Ilmonen\n * \n */", "/** {@inheritDoc} */", "/** {@inheritDoc} */", "/**\n     * {@inheritDoc}\n     */", "// update stories to their current revisions if possible (the story has", "// not been deleted)"], "CODE": "package fi.hut.soberit.agilefant.business.impl;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.Set;\n\nimport org.joda.time.DateTime;\nimport org.joda.time.Days;\nimport org.joda.time.Interval;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport fi.hut.soberit.agilefant.business.AssignmentBusiness;\nimport fi.hut.soberit.agilefant.business.BacklogBusiness;\nimport fi.hut.soberit.agilefant.business.StoryBusiness;\nimport fi.hut.soberit.agilefant.db.BacklogDAO;\nimport fi.hut.soberit.agilefant.db.ProductDAO;\nimport fi.hut.soberit.agilefant.db.StoryDAO;\nimport fi.hut.soberit.agilefant.db.history.BacklogHistoryDAO;\nimport fi.hut.soberit.agilefant.model.Backlog;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.Product;\nimport fi.hut.soberit.agilefant.model.Schedulable;\nimport fi.hut.soberit.agilefant.model.SignedExactEstimate;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.transfer.AgilefantHistoryEntry;\n\n/**\n * \n * @author Teemu Ilmonen\n * \n */\n@Service(\"backlogBusiness\")\n@Transactional\npublic class BacklogBusinessImpl extends GenericBusinessImpl<Backlog> implements\n        BacklogBusiness {\n\n    private BacklogDAO backlogDAO;\n    @Autowired\n    private ProductDAO productDAO;\n    @Autowired\n    private AssignmentBusiness assignmentBusiness;\n    @Autowired\n    private StoryDAO storyDAO;\n    @Autowired\n    private StoryBusiness storyBusiness;\n    @Autowired\n    private BacklogHistoryDAO backlogHistoryDAO;\n\n    public BacklogBusinessImpl() {\n        super(Backlog.class);\n    }\n    \n    @Autowired\n    public void setBacklogDAO(BacklogDAO backlogDAO) {\n        this.genericDAO = backlogDAO;\n        this.backlogDAO = backlogDAO;\n    }\n\n    /** {@inheritDoc} */\n    @Transactional(readOnly = true)\n    public int getNumberOfChildren(Backlog backlog) {\n        return backlogDAO.getNumberOfChildren(backlog);\n    }\n\n    @Transactional(readOnly = true)\n    public Collection<Backlog> retrieveAllStandAloneIterations()\n    {   \n        return backlogDAO.retrieveStandaloneIterations();\n    }\n    \n    @Transactional(readOnly = true)\n    public Collection<Backlog> getChildBacklogs(Backlog backlog) {\n        Collection<Backlog> childBacklogs = new ArrayList<Backlog>();\n        if (backlog == null) {\n            childBacklogs.addAll(productDAO.getAll());\n        } else {\n            childBacklogs.addAll(backlog.getChildren());\n        }\n\n        return childBacklogs;\n    }\n\n    public Days daysLeftInSchedulableBacklog(Schedulable backlog) {\n        DateTime currentTime = new DateTime();\n        Interval backlogInterval = new Interval(backlog.getStartDate()\n                .toDateMidnight(), backlog.getEndDate().toDateMidnight());\n        if (backlog.getEndDate().isBeforeNow()) {\n            return Days.days(0);\n        }\n        Interval tobacklogEnd = new Interval(currentTime.toDateMidnight(),\n                backlog.getEndDate().toDateMidnight());\n        Interval intersection = tobacklogEnd.overlap(backlogInterval);\n        if (backlogInterval.toDurationMillis() == 0) {\n            return Days.days(0);\n        } \n        return Days.daysIn(intersection);\n    }\n    \n    public float calculateBacklogTimeframePercentageLeft(Schedulable backlog) {\n        Interval backlogInterval = new Interval(backlog.getStartDate()\n                .toDateMidnight(), backlog.getEndDate().toDateMidnight());\n        Days daysLeft = this.daysLeftInSchedulableBacklog(backlog);\n        return (float) daysLeft.toStandardDuration().getMillis()\n                / (float) backlogInterval.toDurationMillis();\n    }\n\n    @Transactional(readOnly = true)\n    public int calculateStoryPointSum(int backlogId) {\n        return backlogDAO.calculateStoryPointSum(backlogId);\n    }\n\n    public int calculateDoneStoryPointSum(int backlogId) {\n        return backlogDAO.calculateDoneStoryPointSum(backlogId);\n    }\n    \n    public void addAssignees(int backlogId, Set<Integer> userIds) {\n        Backlog backlog = this.retrieve(backlogId);\n        this.assignmentBusiness.addMultiple(backlog, userIds,\n                SignedExactEstimate.ZERO, 100);\n    }\n\n    /** {@inheritDoc} */\n    @Transactional(readOnly = true)\n    public Product getParentProduct(Backlog backlog) {\n        if (backlog instanceof Product) {\n            return (Product)backlog;\n        }\n        Backlog parent = backlog;\n        if (backlog == null || backlog.getParent() == null && !(backlog instanceof Product)) {\n            return null;\n        } else {\n            while (!(parent instanceof Product)) {\n                if (parent == null) {\n                    return null;\n                }\n                if (parent instanceof Iteration && parent.isStandAlone()) {\n                    return null;\n                }\n\n                parent = parent.getParent();\n            }\n            return (Product)parent;\n        }\n    }\n    \n    \n    @Transactional(readOnly = true)\n    public int getRootParentId(Backlog backlog) {\n        Backlog parent = backlog;\n        while (!(parent instanceof Product)) {\n\n            if (parent instanceof Iteration && parent.isStandAlone()) {\n                return parent.getId();\n            }\n            \n            parent = parent.getParent();\n        }\n        return parent.getId();\n    }\n    \n    \n    \n    @Transactional(readOnly = true)\n    public int getStoryPointSumByIteration(Iteration iteration) {\n        return storyDAO.getStoryPointSumByIteration(iteration.getId());\n    }\n    \n    @Transactional(readOnly = true)\n    public int getStoryValueSumByIteration(Iteration iteration) {\n        return storyDAO.getStoryValueSumByIteration(iteration.getId());\n    }\n    \n    @Transactional(readOnly = true)\n    public int getCompletedStoryValueSumByIteration(Iteration iteration) {\n        return storyDAO.getCompletedStoryValueSumByIteration(iteration.getId());\n    }\n    \n    /**\n     * {@inheritDoc}\n     */\n    public List<Story> retrieveUnexpectedStories(Schedulable backlog) {\n        List<AgilefantHistoryEntry> added = this.backlogHistoryDAO\n                .retrieveAddedStories((Backlog)backlog);\n        List<AgilefantHistoryEntry> deleted = this.backlogHistoryDAO\n                .retrieveDeletedStories((Backlog)backlog);\n\n        List<Integer> removedDuringIteration = new ArrayList<Integer>();\n        for (AgilefantHistoryEntry entry : deleted) {\n            if (entry.getRevisionDate().isAfter(backlog.getStartDate())\n                    && entry.getRevisionDate().isBefore(backlog.getEndDate())) {\n                removedDuringIteration.add(entry.getObjectId());\n            }\n        }\n\n        List<Story> unexpectedStories = new ArrayList<Story>();\n        for (AgilefantHistoryEntry entry : added) {\n            if (entry.getRevisionDate().isAfter(backlog.getStartDate())\n                    && entry.getRevisionDate().isBefore(backlog.getEndDate())\n                    && !removedDuringIteration.contains(entry.getObjectId())) {\n                unexpectedStories.add((Story) entry.getObject());\n            }\n        }\n        \n        // update stories to their current revisions if possible (the story has\n        // not been deleted)\n        List<Story> unexpected = new ArrayList<Story>();\n        for (Story story : unexpectedStories) {\n            Story current = this.storyBusiness.retrieveIfExists(story.getId());\n            if (current != null) {\n                unexpected.add(current);\n            } else {\n                unexpected.add(story);\n            }\n        }\n\n        return unexpected;\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\impl\\\\BacklogHistoryEntryBusinessImpl.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["BacklogHistoryEntryBusinessImpl"], "AN": ["backlogHistoryEntryDAO", "storyHierarchyDAO", "backlogDAO"], "SCS_VariableDeclarator": ["backlogHistoryEntryDAO", "storyHierarchyDAO", "backlogDAO", "backlog", "project", "currentTime", "entry"], "SCS_ConstructorDeclaration": ["BacklogHistoryEntryBusinessImpl"], "SCS_ClassReference": ["BacklogHistoryEntry", "backlogDAO", "backlog", "backlog", "backlogHistoryEntryDAO", "project", "entry", null, "currentTime", "entry", "entry", "storyHierarchyDAO", "entry", "storyHierarchyDAO", "entry", "storyHierarchyDAO", "entry", "storyHierarchyDAO", "entry", "backlogHistoryEntryDAO"], "MN": ["setBacklogHistoryEntryDAO", "updateHistory", "setStoryHierarchyDAO", "setBacklogDAO"], "PN": ["backlogHistoryEntryDAO", "backlogId", "storyHierarchyDAO", "backlogDAO"], "SCS_MemberReference": ["backlogHistoryEntryDAO", "backlogHistoryEntryDAO", "genericDAO", "backlogHistoryEntryDAO", "backlogId", "backlog", "project", "backlog", "project", "backlog", "currentTime", "entry", "UPDATE_INTERVAL", "entry", "project", "project", "project", "project", "project", "entry", "storyHierarchyDAO", "storyHierarchyDAO", "backlogDAO", "backlogDAO"], "SCS_VariableDeclaration": ["Backlog", "Project", "DateTime", "BacklogHistoryEntry"], "SCS_MethodInvocation": ["get", "isStandAlone", "getParent", "retrieveLatest", "getId", "getTimestamp", "isBefore", "minus", "setTimestamp", "setDoneSum", "totalLeafDoneStoryPoints", "setEstimateSum", "totalLeafStoryPoints", "setRootSum", "totalRootStoryPoints", "setBranchMax", "totalBranchStoryPoints", "setBacklog", "store"], "CO": ["// if an existing entry is within the set interval update that entry,", "// else create a new one"], "CODE": "package fi.hut.soberit.agilefant.business.impl;\n\nimport org.joda.time.DateTime;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport fi.hut.soberit.agilefant.business.BacklogHistoryEntryBusiness;\nimport fi.hut.soberit.agilefant.db.BacklogDAO;\nimport fi.hut.soberit.agilefant.db.BacklogHistoryEntryDAO;\nimport fi.hut.soberit.agilefant.db.StoryHierarchyDAO;\nimport fi.hut.soberit.agilefant.model.Backlog;\nimport fi.hut.soberit.agilefant.model.BacklogHistoryEntry;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.Product;\nimport fi.hut.soberit.agilefant.model.Project;\n\n@Service(\"backlogHistoryEntryBusiness\")\npublic class BacklogHistoryEntryBusinessImpl extends\n        GenericBusinessImpl<BacklogHistoryEntry> implements\n        BacklogHistoryEntryBusiness {\n\n    private BacklogHistoryEntryDAO backlogHistoryEntryDAO;\n    private StoryHierarchyDAO storyHierarchyDAO;\n\n    @Autowired\n    private BacklogDAO backlogDAO;\n\n    public BacklogHistoryEntryBusinessImpl() {\n        super(BacklogHistoryEntry.class);\n    }\n\n    @Autowired\n    public void setBacklogHistoryEntryDAO(\n            BacklogHistoryEntryDAO backlogHistoryEntryDAO) {\n        this.backlogHistoryEntryDAO = backlogHistoryEntryDAO;\n        this.genericDAO = backlogHistoryEntryDAO;\n    }\n\n    @Transactional\n    public void updateHistory(int backlogId) {\n        Backlog backlog = backlogDAO.get(backlogId);\n        Project project = null;\n        if (backlog instanceof Iteration) {\n            if (backlog.isStandAlone())\n                return;\n            project = (Project) backlog.getParent();\n        } else if (backlog instanceof Product) {\n            return;\n        } else {\n            project = (Project) backlog;\n        }\n        DateTime currentTime = new DateTime();\n        BacklogHistoryEntry entry = backlogHistoryEntryDAO.retrieveLatest(\n                currentTime, project.getId());\n        // if an existing entry is within the set interval update that entry,\n        // else create a new one\n        if (entry == null || entry.getTimestamp().isBefore(\n                currentTime.minus(BacklogHistoryEntryBusiness.UPDATE_INTERVAL))) {\n            entry = new BacklogHistoryEntry();\n        }\n        entry.setTimestamp(new DateTime());\n        entry.setDoneSum(storyHierarchyDAO.totalLeafDoneStoryPoints(project));\n        entry.setEstimateSum(storyHierarchyDAO.totalLeafStoryPoints(project));\n        entry.setRootSum(storyHierarchyDAO.totalRootStoryPoints(project));\n        entry.setBranchMax(storyHierarchyDAO.totalBranchStoryPoints(project));\n        entry.setBacklog(project);\n        backlogHistoryEntryDAO.store(entry);\n    }\n\n    @Autowired\n    public void setStoryHierarchyDAO(StoryHierarchyDAO storyHierarchyDAO) {\n        this.storyHierarchyDAO = storyHierarchyDAO;\n    }\n\n    public void setBacklogDAO(BacklogDAO backlogDAO) {\n        this.backlogDAO = backlogDAO;\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\impl\\\\DailyWorkBusinessImpl.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["DailyWorkBusinessImpl"], "AN": ["taskDAO", "storyDAO", "storyRankDAO", "whatsNextEntryDAO", "whatsNextStoryEntryDAO", "rankingBusiness", "taskBusiness", "storyBusiness", "transferObjectBusiness"], "SCS_VariableDeclarator": ["taskDAO", "storyDAO", "storyRankDAO", "whatsNextEntryDAO", "whatsNextStoryEntryDAO", "rankingBusiness", "taskBusiness", "storyBusiness", "transferObjectBusiness", "entries", "returned", "entry", "item", "transferObj", "delegate", "transferObj", "entry", "upperEntry", "entry", "entry", "entries", "returned", "entry", "item", "transferObj", "delegate", "transferObj", "entry", "upperEntry", "entry", "entry", "now", "dayStart", "dayEnd", "interval", "tasks", "stories", "returnable", "finalStories", "iterationRanks", "projectRanks", "rankMap", "rank", "rank", "id", "s", "i", "s"], "MN": ["setTaskDAO", "setStoryDAO", "setWhatsNextEntryDAO", "setWhatsNextStoryEntryDAO", "setRankingBusiness", "setTaskBusiness", "setStoryBusiness", "setTransferObjectBusiness", "setStoryRankDAO", "getQueuedTasksForUser", "doRankToBottomOnWhatsNext", "rankToBottomOnWhatsNext", "rankToBottomOnWhatsNext", "rankUnderTaskOnWhatsNext", "getWithRankBetween", "rankUnderTaskOnWhatsNext", "removeFromWhatsNext", "addToWhatsNext", "removeTaskFromWorkQueues", "getQueuedStoriesForUser", "doRankToBottomOnWhatsNext", "rankToBottomOnWhatsNext", "rankToBottomOnWhatsNext", "rankUnderStoryOnWhatsNext", "getWithRankBetween", "rankUnderStoryOnWhatsNext", "removeFromWhatsNext", "addToWhatsNext", "removeStoryFromWorkQueues", "getAssignedWorkFor", "setStoryRanks", "compare", "compare"], "PN": ["taskDAO", "storyDAO", "dao", "dao", "rankingBusiness", "taskBusiness", "storyBusiness", "transferObjectBusiness", "storyRankDAO", "user", "entry", "entry", "user", "task", "entry", "upperEntry", "lower", "upper", "user", "task", "upperTask", "user", "task", "user", "task", "task", "user", "entry", "entry", "user", "story", "entry", "upperEntry", "lower", "upper", "user", "story", "upperStory", "user", "story", "user", "story", "story", "user", "stories", "iterationRanks", "projectRanks", "o1", "o2", "o1", "o2"], "SCS_MemberReference": ["taskDAO", "taskDAO", "storyDAO", "storyDAO", "whatsNextEntryDAO", "dao", "whatsNextStoryEntryDAO", "dao", "rankingBusiness", "rankingBusiness", "taskBusiness", "taskBusiness", "storyBusiness", "storyBusiness", "transferObjectBusiness", "transferObjectBusiness", "storyRankDAO", "storyRankDAO", "user", "entries", "entry", "item", "returned", "entry", "entry", "entry", "entry", "transferObj", "user", "task", "entry", "lower", "upper", "entry", "upperEntry", "delegate", "entry", "transferObj", "user", "task", "entry", "entry", "user", "task", "upperTask", "upperEntry", "user", "upperTask", "entry", "upperEntry", "user", "task", "entry", "entry", "task", "user", "entry", "task", "user", "entry", "entry", "task", "user", "entries", "entry", "item", "returned", "entry", "entry", "entry", "entry", "transferObj", "user", "story", "entry", "lower", "upper", "entry", "upperEntry", "delegate", "entry", "transferObj", "user", "story", "entry", "entry", "user", "story", "upperStory", "upperEntry", "user", "upperStory", "entry", "upperEntry", "user", "story", "entry", "entry", "story", "user", "entry", "story", "user", "entry", "entry", "story", "dayStart", "dayEnd", "user", "interval", "user", "interval", "tasks", "stories", "finalStories", "finalStories", "iterationRanks", "projectRanks", "returnable", "iterationRanks", "projectRanks", "id", "id", "stories", "stories", "stories", "stories", "stories", "i"], "SCS_VariableDeclaration": ["Collection", "Collection", "WhatsNextEntry", "DailyWorkTaskTO", "DailyWorkTaskTO", "RankUnderDelegate", "DailyWorkTaskTO", "WhatsNextEntry", "WhatsNextEntry", "WhatsNextEntry", "WhatsNextEntry", "Collection", "Collection", "WhatsNextStoryEntry", "StoryTO", "StoryTO", "RankUnderDelegate", "StoryTO", "WhatsNextStoryEntry", "WhatsNextStoryEntry", "WhatsNextStoryEntry", "WhatsNextStoryEntry", "DateTime", "DateTime", "DateTime", "Interval", "Collection", "Collection", "AssignedWorkTO", "Collection", "Collection", "Collection", "Map", "StoryRank", "StoryRank", "int", "StoryTO", "int", "StoryTO"], "SCS_ClassReference": ["whatsNextEntryDAO", "transferObjectBusiness", "returned", "rankingBusiness", "whatsNextEntryDAO", "entry", "", "transferObjectBusiness", "", "whatsNextEntryDAO", "whatsNextEntryDAO", "entry", "rankingBusiness", "transferObjectBusiness", "whatsNextEntryDAO", "", "whatsNextEntryDAO", "", "whatsNextEntryDAO", "whatsNextEntryDAO", "entry", "entry", "whatsNextEntryDAO", "taskBusiness", "", "whatsNextEntryDAO", "whatsNextStoryEntryDAO", "transferObjectBusiness", "returned", "rankingBusiness", "whatsNextStoryEntryDAO", "entry", "", "transferObjectBusiness", "", "whatsNextStoryEntryDAO", "whatsNextStoryEntryDAO", "entry", "rankingBusiness", "transferObjectBusiness", "whatsNextStoryEntryDAO", "", "whatsNextStoryEntryDAO", "", "whatsNextStoryEntryDAO", "whatsNextStoryEntryDAO", "entry", "entry", "whatsNextStoryEntryDAO", "storyBusiness", "", "whatsNextStoryEntryDAO", "now", "dayStart", "taskDAO", "storyDAO", "transferObjectBusiness", "finalStories", "returnable", "storyRankDAO", "storyRankDAO", "", "returnable", "rankMap", "rank", null, "rank", "rank", null, "rankMap", "rankMap", "rank", "s", "rankMap", "s", "Collections", "Collections", "o1", "o2", "o1", "o2", "o1", null, null, "o2", null, "Collections", "o1", "o2", "o1", "o2", "o1", null, null, "o2", null, "s"], "SCS_MethodInvocation": ["getWhatsNextEntriesFor", "constructQueuedDailyWorkTaskTO", "add", "rankToBottom", "getLastTaskInRank", "getUser", "doRankToBottomOnWhatsNext", "constructQueuedDailyWorkTaskTO", "rankToBottomOnWhatsNext", "getWhatsNextEntryFor", "getTasksWithRankBetween", "getUser", "rankUnder", "constructQueuedDailyWorkTaskTO", "getWhatsNextEntryFor", "addToWhatsNext", "getWhatsNextEntryFor", "rankUnderTaskOnWhatsNext", "getWhatsNextEntryFor", "remove", "setTask", "setUser", "store", "addResponsible", "doRankToBottomOnWhatsNext", "removeAllByTask", "getWhatsNextStoryEntriesFor", "constructQueuedStoryTO", "add", "rankToBottom", "getLastStoryInRank", "getUser", "doRankToBottomOnWhatsNext", "constructQueuedStoryTO", "rankToBottomOnWhatsNext", "getWhatsNextStoryEntryFor", "getStoriesWithRankBetween", "getUser", "rankUnder", "constructQueuedStoryTO", "getWhatsNextStoryEntryFor", "addToWhatsNext", "getWhatsNextStoryEntryFor", "rankUnderStoryOnWhatsNext", "getWhatsNextStoryEntryFor", "remove", "setStory", "setUser", "store", "addResponsible", "doRankToBottomOnWhatsNext", "removeAllByStory", "withMillisOfDay", "plusDays", "getAllTasks", "getAllIterationStoriesByResponsibleAndInterval", "constructAssignedWorkTO", "addAll", "getStories", "getIterationRanksForStories", "getProjectRanksForStories", "setStoryRanks", "getStories", "put", "getStory", "getId", "getRank", "getStory", "getId", "containsKey", "put", "getRank", "setRank", "get", "getId", "sort", "sort", "getIteration", "getIteration", "getIteration", "getIteration", "getIteration", "getName", "compareToIgnoreCase", "getIteration", "getName", "sort", "getBacklog", "getBacklog", "getBacklog", "getBacklog", "getBacklog", "getName", "compareToIgnoreCase", "getBacklog", "getName", "setRank"], "CO": ["// Set project ranks only for stories which do not have iteration ranks", "// Set the ranks for the stories"], "CODE": "package fi.hut.soberit.agilefant.business.impl;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.joda.time.DateTime;\nimport org.joda.time.Interval;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.support.PropertyComparator;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport fi.hut.soberit.agilefant.business.DailyWorkBusiness;\nimport fi.hut.soberit.agilefant.business.RankUnderDelegate;\nimport fi.hut.soberit.agilefant.business.RankingBusiness;\nimport fi.hut.soberit.agilefant.business.StoryBusiness;\nimport fi.hut.soberit.agilefant.business.TaskBusiness;\nimport fi.hut.soberit.agilefant.business.TransferObjectBusiness;\nimport fi.hut.soberit.agilefant.db.StoryDAO;\nimport fi.hut.soberit.agilefant.db.StoryRankDAO;\nimport fi.hut.soberit.agilefant.db.TaskDAO;\nimport fi.hut.soberit.agilefant.db.WhatsNextEntryDAO;\nimport fi.hut.soberit.agilefant.db.WhatsNextStoryEntryDAO;\nimport fi.hut.soberit.agilefant.model.Rankable;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.StoryRank;\nimport fi.hut.soberit.agilefant.model.Task;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.model.WhatsNextEntry;\nimport fi.hut.soberit.agilefant.model.WhatsNextStoryEntry;\nimport fi.hut.soberit.agilefant.transfer.AssignedWorkTO;\nimport fi.hut.soberit.agilefant.transfer.DailyWorkTaskTO;\nimport fi.hut.soberit.agilefant.transfer.StoryTO;\n\n@Service(\"dailyWorkBusiness\")\n@Transactional\npublic class DailyWorkBusinessImpl implements DailyWorkBusiness {\n    private TaskDAO taskDAO;\n    private StoryDAO storyDAO;\n    private StoryRankDAO storyRankDAO;\n    private WhatsNextEntryDAO whatsNextEntryDAO;\n    private WhatsNextStoryEntryDAO whatsNextStoryEntryDAO;\n    private RankingBusiness rankingBusiness;\n    private TaskBusiness taskBusiness;\n    private StoryBusiness storyBusiness;\n    private TransferObjectBusiness transferObjectBusiness;\n    \n    @Autowired\n    public void setTaskDAO(TaskDAO taskDAO) {\n        this.taskDAO = taskDAO;\n    }\n\n    @Autowired\n    public void setStoryDAO(StoryDAO storyDAO) {\n        this.storyDAO = storyDAO;\n    }\n\n    @Autowired\n    public void setWhatsNextEntryDAO(WhatsNextEntryDAO dao) {\n        this.whatsNextEntryDAO = dao;\n    } \n\n    @Autowired\n    public void setWhatsNextStoryEntryDAO(WhatsNextStoryEntryDAO dao) {\n        this.whatsNextStoryEntryDAO = dao;\n    }\n    \n    @Autowired\n    public void setRankingBusiness(RankingBusiness rankingBusiness) {\n        this.rankingBusiness = rankingBusiness;\n    }\n\n    @Autowired\n    public void setTaskBusiness(TaskBusiness taskBusiness) {\n        this.taskBusiness = taskBusiness;\n    }\n    \n    @Autowired\n    public void setStoryBusiness(StoryBusiness storyBusiness) {\n        this.storyBusiness = storyBusiness;\n    }\n    \n    @Autowired\n    public void setTransferObjectBusiness(TransferObjectBusiness transferObjectBusiness) {\n        this.transferObjectBusiness = transferObjectBusiness;\n    }\n\n    @Autowired\n    public void setStoryRankDAO(StoryRankDAO storyRankDAO) {\n        this.storyRankDAO = storyRankDAO;\n    }\n\n    public Collection<DailyWorkTaskTO> getQueuedTasksForUser(User user) {\n        Collection<WhatsNextEntry> entries = whatsNextEntryDAO.getWhatsNextEntriesFor(user);\n        Collection<DailyWorkTaskTO> returned = new ArrayList<DailyWorkTaskTO>();\n        \n        for (WhatsNextEntry entry: entries) {\n            DailyWorkTaskTO item = transferObjectBusiness.constructQueuedDailyWorkTaskTO(entry);\n            returned.add(item);\n        }\n        \n        return returned;\n    }\n\n    @Transactional\n    private void doRankToBottomOnWhatsNext(WhatsNextEntry entry) throws IllegalArgumentException {\n        rankingBusiness.rankToBottom(entry, whatsNextEntryDAO.getLastTaskInRank(entry.getUser()));\n    }\n\n    @Transactional\n    public DailyWorkTaskTO rankToBottomOnWhatsNext(final WhatsNextEntry entry) throws IllegalArgumentException {\n        if (entry == null) {\n            throw new IllegalArgumentException();\n        }\n        \n        doRankToBottomOnWhatsNext(entry);\n        DailyWorkTaskTO transferObj = transferObjectBusiness.constructQueuedDailyWorkTaskTO(entry);\n        return transferObj;\n    }\n    \n    @Transactional\n    public DailyWorkTaskTO rankToBottomOnWhatsNext(User user, Task task)\n            throws IllegalArgumentException {\n        return rankToBottomOnWhatsNext(whatsNextEntryDAO.getWhatsNextEntryFor(user, task));\n    }\n\n    @Transactional\n    public DailyWorkTaskTO rankUnderTaskOnWhatsNext(final WhatsNextEntry entry, WhatsNextEntry upperEntry) {\n        if (entry == null) {\n            throw new IllegalArgumentException();\n        }\n\n        RankUnderDelegate delegate = new RankUnderDelegate() {\n            public Collection<? extends Rankable> getWithRankBetween(Integer lower,\n                    Integer upper) {\n                return whatsNextEntryDAO.getTasksWithRankBetween(lower, upper, entry.getUser());\n            }\n        };\n        \n        rankingBusiness.rankUnder(entry, upperEntry, delegate);\n        DailyWorkTaskTO transferObj = transferObjectBusiness.constructQueuedDailyWorkTaskTO(entry);\n        return transferObj;\n    }\n    \n    @Transactional\n    public DailyWorkTaskTO rankUnderTaskOnWhatsNext(User user, Task task,\n            Task upperTask) throws IllegalArgumentException {\n        WhatsNextEntry entry = whatsNextEntryDAO.getWhatsNextEntryFor(user, task);\n        \n        if (entry == null) {\n            entry = addToWhatsNext(user, task);\n        }\n        \n        WhatsNextEntry upperEntry = null;\n        if (upperTask != null) {\n            upperEntry = whatsNextEntryDAO.getWhatsNextEntryFor(user, upperTask);\n        }\n        \n        return rankUnderTaskOnWhatsNext(entry, upperEntry);\n    }\n\n    @Transactional\n    public void removeFromWhatsNext(User user, Task task)\n            throws IllegalArgumentException {\n        WhatsNextEntry entry = whatsNextEntryDAO.getWhatsNextEntryFor(user, task);\n        if (entry != null) {\n            whatsNextEntryDAO.remove(entry);\n        }\n    }\n    \n    @Transactional\n    public WhatsNextEntry addToWhatsNext(User user, Task task) {\n        WhatsNextEntry entry = new WhatsNextEntry();\n        entry.setTask(task);\n        entry.setUser(user);\n        whatsNextEntryDAO.store(entry);\n        taskBusiness.addResponsible(task, user);\n        doRankToBottomOnWhatsNext(entry);\n        return entry;\n    }\n\n    public void removeTaskFromWorkQueues(Task task) {\n        whatsNextEntryDAO.removeAllByTask(task);\n    }\n    \n    public Collection<StoryTO> getQueuedStoriesForUser(User user) {\n        Collection<WhatsNextStoryEntry> entries = whatsNextStoryEntryDAO.getWhatsNextStoryEntriesFor(user);\n        Collection<StoryTO> returned = new ArrayList<StoryTO>();\n        \n        for (WhatsNextStoryEntry entry: entries) {\n            StoryTO item = transferObjectBusiness.constructQueuedStoryTO(entry);\n            returned.add(item);\n        }\n        \n        return returned;\n    }\n\n    @Transactional\n    private void doRankToBottomOnWhatsNext(WhatsNextStoryEntry entry) throws IllegalArgumentException {\n        rankingBusiness.rankToBottom(entry, whatsNextStoryEntryDAO.getLastStoryInRank(entry.getUser()));\n    }\n\n    @Transactional\n    public StoryTO rankToBottomOnWhatsNext(final WhatsNextStoryEntry entry) throws IllegalArgumentException {\n        if (entry == null) {\n            throw new IllegalArgumentException();\n        }\n        \n        doRankToBottomOnWhatsNext(entry);\n        StoryTO transferObj = transferObjectBusiness.constructQueuedStoryTO(entry);\n        return transferObj;\n    }\n    \n    @Transactional\n    public StoryTO rankToBottomOnWhatsNext(User user, Story story)\n            throws IllegalArgumentException {\n        return rankToBottomOnWhatsNext(whatsNextStoryEntryDAO.getWhatsNextStoryEntryFor(user, story));\n    }\n\n    @Transactional\n    public StoryTO rankUnderStoryOnWhatsNext(final WhatsNextStoryEntry entry, WhatsNextStoryEntry upperEntry) {\n        if (entry == null) {\n            throw new IllegalArgumentException();\n        }\n\n        RankUnderDelegate delegate = new RankUnderDelegate() {\n            public Collection<? extends Rankable> getWithRankBetween(Integer lower,\n                    Integer upper) {\n                return whatsNextStoryEntryDAO.getStoriesWithRankBetween(lower, upper, entry.getUser());\n            }\n        };\n        \n        rankingBusiness.rankUnder(entry, upperEntry, delegate);\n        StoryTO transferObj = transferObjectBusiness.constructQueuedStoryTO(entry);\n        return transferObj;\n    }\n    \n    @Transactional\n    public StoryTO rankUnderStoryOnWhatsNext(User user, Story story,\n            Story upperStory) throws IllegalArgumentException {\n        WhatsNextStoryEntry entry = whatsNextStoryEntryDAO.getWhatsNextStoryEntryFor(user, story);\n        \n        if (entry == null) {\n            entry = addToWhatsNext(user, story);\n        }\n        \n        WhatsNextStoryEntry upperEntry = null;\n        if (upperStory != null) {\n            upperEntry = whatsNextStoryEntryDAO.getWhatsNextStoryEntryFor(user, upperStory);\n        }\n        \n        return rankUnderStoryOnWhatsNext(entry, upperEntry);\n    }\n\n    @Transactional\n    public void removeFromWhatsNext(User user, Story story)\n            throws IllegalArgumentException {\n        WhatsNextStoryEntry entry = whatsNextStoryEntryDAO.getWhatsNextStoryEntryFor(user, story);\n        if (entry != null) {\n            whatsNextStoryEntryDAO.remove(entry);\n        }\n    }\n    \n    @Transactional\n    public WhatsNextStoryEntry addToWhatsNext(User user, Story story) {\n        WhatsNextStoryEntry entry = new WhatsNextStoryEntry();\n        entry.setStory(story);\n        entry.setUser(user);\n        whatsNextStoryEntryDAO.store(entry);\n        storyBusiness.addResponsible(story, user);\n        doRankToBottomOnWhatsNext(entry);\n        return entry;\n    }\n\n    public void removeStoryFromWorkQueues(Story story) {\n        whatsNextStoryEntryDAO.removeAllByStory(story);\n    }\n\n    public AssignedWorkTO getAssignedWorkFor(User user) {\n        DateTime now = new DateTime();\n        DateTime dayStart = now.withMillisOfDay(0);\n        DateTime dayEnd   = dayStart.plusDays(1);\n        Interval interval = new Interval(dayStart, dayEnd);\n        \n        Collection<Task> tasks = taskDAO.getAllTasks(user, interval);\n        Collection<Story> stories = storyDAO.getAllIterationStoriesByResponsibleAndInterval(user, interval);\n        \n        AssignedWorkTO returnable = transferObjectBusiness.constructAssignedWorkTO(tasks, stories);\n\n        Collection<Story> finalStories = new ArrayList<Story>();\n        finalStories.addAll(returnable.getStories());\n        Collection<StoryRank> iterationRanks = storyRankDAO.getIterationRanksForStories(finalStories);\n        Collection<StoryRank> projectRanks = storyRankDAO.getProjectRanksForStories(finalStories);\n\n        setStoryRanks(returnable.getStories(), iterationRanks, projectRanks);\n        \n        return returnable; \n    }\n    \n    @SuppressWarnings(\"unchecked\")\n    private static void setStoryRanks(List<StoryTO> stories, Collection<StoryRank> iterationRanks, Collection<StoryRank> projectRanks) {\n        Map<Integer, Integer> rankMap = new HashMap<Integer, Integer>();\n        for (StoryRank rank : iterationRanks) {\n            rankMap.put(rank.getStory().getId(), rank.getRank());\n        }\n        // Set project ranks only for stories which do not have iteration ranks\n        for (StoryRank rank : projectRanks) {\n            int id = rank.getStory().getId();\n            if (!rankMap.containsKey(id)) {\n                rankMap.put(id, rank.getRank());\n            }\n        }\n        // Set the ranks for the stories\n        for (StoryTO s : stories) {\n            s.setRank(rankMap.get(s.getId()));\n        }\n        \n        Collections.sort(stories, new PropertyComparator(\"rank\", true, true));\n        Collections.sort(stories, new Comparator<StoryTO>() {\n            @Override\n            public int compare(StoryTO o1, StoryTO o2) {\n                if (o1.getIteration() == null && o2.getIteration() == null) {\n                    return 0;\n                } else if (o1.getIteration() == null) {\n                    return -1;\n                } else if (o2.getIteration() == null) {\n                    return 1;\n                } else {\n                    return o1.getIteration().getName().compareToIgnoreCase(o2.getIteration().getName());\n                }\n            }\n        });\n        Collections.sort(stories, new Comparator<StoryTO>() {\n            @Override\n            public int compare(StoryTO o1, StoryTO o2) {\n                if (o1.getBacklog() == null && o2.getBacklog() == null) {\n                    return 0;\n                } else if (o1.getBacklog() == null) {\n                    return -1;\n                } else if (o2.getBacklog() == null) {\n                    return 1;\n                } else {\n                    return o1.getBacklog().getName().compareToIgnoreCase(o2.getBacklog().getName());\n                }\n            }\n        });\n        \n        int i = 0;\n        for (StoryTO s : stories) {\n            s.setRank(i++);\n        }\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\impl\\\\ExportImportBusinessImpl.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["ExportImportBusinessImpl"], "AN": ["LOG", "assignmentDAO", "backlogHistoryEntryDAO", "backlogHourEntryDAO", "holidayDAO", "hourEntryDAO", "iterationDAO", "iterationHistoryEntryDAO", "labelDAO", "productDAO", "projectDAO", "settingDAO", "storyDAO", "storyAccessDAO", "storyHourEntryDAO", "storyRankDAO", "taskDAO", "taskHourEntryDAO", "teamDAO", "userDAO", "whatsNextEntryDAO", "whatsNextStoryEntryDAO", "widgetCollectionDAO", "agilefantWidgetDAO", "iterationBusiness", "userBusiness", "settingBusiness", "teamBusiness", "sessionFactory", "tokenGenerator"], "SCS_VariableDeclarator": ["LOG", "assignmentDAO", "backlogHistoryEntryDAO", "backlogHourEntryDAO", "holidayDAO", "hourEntryDAO", "iterationDAO", "iterationHistoryEntryDAO", "labelDAO", "productDAO", "projectDAO", "settingDAO", "storyDAO", "storyAccessDAO", "storyHourEntryDAO", "storyRankDAO", "taskDAO", "taskHourEntryDAO", "teamDAO", "userDAO", "whatsNextEntryDAO", "whatsNextStoryEntryDAO", "widgetCollectionDAO", "agilefantWidgetDAO", "iterationBusiness", "userBusiness", "settingBusiness", "teamBusiness", "sessionFactory", "tokenGenerator", "parent", "story", "iteration", "project", "user", "organizationTO", "story", "widget", "widgetAndRef", "r", "user", "team", "iteration", "objects", "setting", "session", "index", "object"], "SCS_ClassReference": ["LoggerFactory", "ExportImportBusinessImpl", "story", "stories", null, "stories", "widget", null, null, "widget", "widget", null, null, "widget", "widget", null, null, "widget", "widget", null, null, "widget", "widget", "organizationTO.assignments", null, "organizationTO.backlogHistoryEntries", null, "organizationTO.backlogHourEntries", null, "organizationTO.holidays", null, "organizationTO.iterations", null, "organizationTO.iterationHistoryEntries", null, "organizationTO.labels", null, "organizationTO.products", null, "organizationTO.projects", null, "organizationTO.settings", null, null, null, "organizationTO.storyAccesses", null, "organizationTO.storyHourEntries", null, "organizationTO.storyRanks", null, "organizationTO.tasks", null, "organizationTO.taskHourEntries", null, "organizationTO.teams", null, "organizationTO.users", null, "organizationTO.whatsNextEntries", null, "organizationTO.whatsNextStoryEntries", null, "organizationTO.widgetCollections", null, null, null, "organizationTO.widgets", null, null, "user", "user", "user", "", null, "team", "team", "team", "", "iteration", "iteration", "tokenGenerator", "iteration", "RuntimeException", null, "objects", "objects", "objects", "objects", "objects", "objects", "objects", "objects", "objects", "objects", "objects", "objects", "objects", "objects", "objects", "objects", "objects", "objects", "objects", "objects", "objects", "settingDAO", "objects", "settingBusiness", "setting", "setting", null, "session", "session", "session", "LOG"], "SCS_MethodInvocation": ["getLogger", "getParent", "contains", "addInOrder", "add", "getType", "startsWith", "get", "getObjectId", "getType", "startsWith", "get", "getObjectId", "getType", "startsWith", "get", "getObjectId", "getType", "startsWith", "get", "getObjectId", "getType", "addAll", "getAll", "addAll", "getAll", "addAll", "getAll", "addAll", "getAll", "addAll", "getAll", "addAll", "getAll", "addAll", "getAll", "addAll", "getAll", "addAll", "getAll", "addAll", "getAll", "getAll", "addInOrder", "addAll", "getAll", "addAll", "getAll", "addAll", "getAll", "addAll", "getAll", "addAll", "getAll", "addAll", "getAll", "addAll", "getAll", "addAll", "getAll", "addAll", "getAll", "addAll", "getAll", "getAll", "addWidgetTypeInfo", "add", "toString", "retrieveByLoginName", "getLoginName", "setLoginName", "getLoginName", "generateDuplicateIdentifier", "getByTeamName", "getName", "setName", "getName", "generateDuplicateIdentifier", "getReadonlyToken", "setReadonlyToken", "generateReadonlyToken", "getReadonlyToken", "renameDuplicateData", "addAll", "addAll", "addAll", "addAll", "addAll", "addAll", "addAll", "addAll", "addAll", "addAll", "addAll", "addAll", "addAll", "addAll", "addAll", "addAll", "addAll", "addAll", "addAll", "addAll", "addAll", "count", "addAll", "setValue", "getName", "getValue", "getCurrentSession", "save", "flush", "clear", "error"], "MN": ["addInOrder", "addWidgetTypeInfo", "exportOrganization", "generateDuplicateIdentifier", "renameDuplicateData", "importOrganization"], "PN": ["story", "stories", "widget", "organizationTO", "organizationTO"], "SCS_VariableDeclaration": ["Story", "Story", "Iteration", "Project", "User", "OrganizationDumpTO", "Story", "AgilefantWidget", "AgilefantWidgetAndRef", "SecureRandom", "User", "Team", "Iteration", "Collection", "Setting", "Session", "int", "Object"], "SCS_MemberReference": ["parent", "parent", "story", "parent", "parent", "stories", "story", "storyDAO", "story", "widget", "story", "iterationDAO", "iteration", "widget", "iteration", "projectDAO", "project", "widget", "project", "userDAO", "user", "widget", "user", "assignmentDAO", "backlogHistoryEntryDAO", "backlogHourEntryDAO", "holidayDAO", "iterationDAO", "iterationHistoryEntryDAO", "labelDAO", "productDAO", "projectDAO", "settingDAO", "storyDAO", "story", "stories", "storyAccessDAO", "storyHourEntryDAO", "storyRankDAO", "taskDAO", "taskHourEntryDAO", "teamDAO", "userDAO", "whatsNextEntryDAO", "whatsNextStoryEntryDAO", "widgetCollectionDAO", "agilefantWidgetDAO", "widget", "widgetAndRef", "widgetAndRef", "organizationTO", "r", "users", "userBusiness", "teams", "teamBusiness", "iterations", "organizationTO", "users", "holidays", "products", "projects", "iterations", "stories", "tasks", "assignments", "backlogHourEntries", "storyHourEntries", "taskHourEntries", "backlogHistoryEntries", "iterationHistoryEntries", "labels", "storyAccesses", "storyRanks", "teams", "whatsNextEntries", "whatsNextStoryEntries", "widgetCollections", "widgets", "settings", "settings", "sessionFactory", "objects", "object", "object", "object", "object", "index", "e"], "CO": ["/**\n * Implementation class for export / import service\n * \n * @author jkorri\n */", "// Deref the widget object here, will set proper object id as the referenced object is persisted by now"], "CODE": "package fi.hut.soberit.agilefant.business.impl;\n\nimport java.math.BigInteger;\nimport java.security.SecureRandom;\nimport java.util.ArrayList;\nimport java.util.Collection;\n\nimport org.hibernate.Session;\nimport org.hibernate.SessionFactory;\nimport org.hibernate.Transaction;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport fi.hut.soberit.agilefant.business.ExportImportBusiness;\nimport fi.hut.soberit.agilefant.business.IterationBusiness;\nimport fi.hut.soberit.agilefant.business.UserBusiness;\nimport fi.hut.soberit.agilefant.business.SettingBusiness;\nimport fi.hut.soberit.agilefant.business.TeamBusiness;\nimport fi.hut.soberit.agilefant.db.AgilefantWidgetDAO;\nimport fi.hut.soberit.agilefant.db.AssignmentDAO;\nimport fi.hut.soberit.agilefant.db.BacklogHistoryEntryDAO;\nimport fi.hut.soberit.agilefant.db.BacklogHourEntryDAO;\nimport fi.hut.soberit.agilefant.db.HolidayDAO;\nimport fi.hut.soberit.agilefant.db.HourEntryDAO;\nimport fi.hut.soberit.agilefant.db.IterationDAO;\nimport fi.hut.soberit.agilefant.db.IterationHistoryEntryDAO;\nimport fi.hut.soberit.agilefant.db.LabelDAO;\nimport fi.hut.soberit.agilefant.db.ProductDAO;\nimport fi.hut.soberit.agilefant.db.ProjectDAO;\nimport fi.hut.soberit.agilefant.db.SettingDAO;\nimport fi.hut.soberit.agilefant.db.StoryAccessDAO;\nimport fi.hut.soberit.agilefant.db.StoryDAO;\nimport fi.hut.soberit.agilefant.db.StoryHourEntryDAO;\nimport fi.hut.soberit.agilefant.db.StoryRankDAO;\nimport fi.hut.soberit.agilefant.db.TaskDAO;\nimport fi.hut.soberit.agilefant.db.TaskHourEntryDAO;\nimport fi.hut.soberit.agilefant.db.TeamDAO;\nimport fi.hut.soberit.agilefant.db.UserDAO;\nimport fi.hut.soberit.agilefant.db.WhatsNextEntryDAO;\nimport fi.hut.soberit.agilefant.db.WhatsNextStoryEntryDAO;\nimport fi.hut.soberit.agilefant.db.WidgetCollectionDAO;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.AgilefantWidget;\nimport fi.hut.soberit.agilefant.model.Project;\nimport fi.hut.soberit.agilefant.model.Setting;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.Team;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.util.TokenGenerator;\n\n/**\n * Implementation class for export / import service\n * \n * @author jkorri\n */\n@Service(\"exportBusiness\")\npublic class ExportImportBusinessImpl implements ExportImportBusiness {\n\n\tprivate static final Logger LOG = LoggerFactory.getLogger(ExportImportBusinessImpl.class);\t\n\t\n\t@Autowired AssignmentDAO assignmentDAO;\n\t@Autowired BacklogHistoryEntryDAO backlogHistoryEntryDAO;\n\t@Autowired BacklogHourEntryDAO backlogHourEntryDAO;\n\t@Autowired HolidayDAO holidayDAO;\n\t@Autowired HourEntryDAO hourEntryDAO;\n\t@Autowired IterationDAO iterationDAO;\n\t@Autowired IterationHistoryEntryDAO iterationHistoryEntryDAO;\n\t@Autowired LabelDAO labelDAO;\n\t@Autowired ProductDAO productDAO;\n\t@Autowired ProjectDAO projectDAO;\n\t@Autowired SettingDAO settingDAO;\n\t@Autowired StoryDAO storyDAO;\n\t@Autowired StoryAccessDAO storyAccessDAO;\n\t@Autowired StoryHourEntryDAO storyHourEntryDAO;\n\t@Autowired StoryRankDAO storyRankDAO;\n\t@Autowired TaskDAO taskDAO;\n\t@Autowired TaskHourEntryDAO taskHourEntryDAO;\n\t@Autowired TeamDAO teamDAO;\n\t@Autowired UserDAO userDAO;\n\t@Autowired WhatsNextEntryDAO whatsNextEntryDAO;\n\t@Autowired WhatsNextStoryEntryDAO whatsNextStoryEntryDAO;\n\t@Autowired WidgetCollectionDAO widgetCollectionDAO;\n\t@Autowired AgilefantWidgetDAO agilefantWidgetDAO;\n\t\n\t@Autowired\n\tprivate IterationBusiness iterationBusiness;\n\t\n\t@Autowired\n\tprivate UserBusiness userBusiness;\n\t\n\t@Autowired\n\tprivate SettingBusiness settingBusiness;\n\t\n\t@Autowired\n\tprivate TeamBusiness teamBusiness;\n\t\n\t@Autowired\n\tSessionFactory sessionFactory;\n\t\n    @Autowired\n    private TokenGenerator tokenGenerator;\n\t\n\tprivate void addInOrder(Story story, Collection<Story> stories) {\n\t\tStory parent = story.getParent();\n\t\tif(parent!=null && !stories.contains(parent) && story!=parent) {\n\t\t\tthis.addInOrder(parent, stories);\n\t\t}\n\t\tstories.add(story);\n\t}\n\t\n\tpublic AgilefantWidgetAndRef addWidgetTypeInfo(AgilefantWidget widget) {\n\t\tif(widget.getType().startsWith(\"story\")) {\n\t\t\tStory story = this.storyDAO.get(widget.getObjectId());\n\t\t\treturn story==null ? null : new AgilefantWidgetAndRef(widget, story);\n\t\t}\n\t\tif(widget.getType().startsWith(\"iteration\")) {\n\t\t\tIteration iteration = this.iterationDAO.get(widget.getObjectId());\n\t\t\treturn iteration==null ? null : new AgilefantWidgetAndRef(widget, iteration);\t\t\t\n\t\t}\n\t\tif(widget.getType().startsWith(\"project\")) {\n\t\t\tProject project = this.projectDAO.get(widget.getObjectId());\n\t\t\treturn project==null ? null : new AgilefantWidgetAndRef(widget, project);\t\t\t\n\t\t}\n\t\tif(widget.getType().startsWith(\"user\")) {\n\t\t\tUser user = this.userDAO.get(widget.getObjectId());\n\t\t\treturn user==null ? null : new AgilefantWidgetAndRef(widget, user);\t\t\t\n\t\t}\n\t\tthrow new RuntimeException(\"Unknown widget type \" + widget.getType());\n\t}\n\t\t\n\t@Override\n\t@Transactional(readOnly=true)\n\tpublic OrganizationDumpTO exportOrganization() {\n\n\t\tOrganizationDumpTO organizationTO = new OrganizationDumpTO();\n\t\t\n\t\torganizationTO.assignments.addAll(this.assignmentDAO.getAll());\n\t\torganizationTO.backlogHistoryEntries.addAll(this.backlogHistoryEntryDAO.getAll());\n\t\torganizationTO.backlogHourEntries.addAll(this.backlogHourEntryDAO.getAll());\n\t\torganizationTO.holidays.addAll(this.holidayDAO.getAll());\n\t\torganizationTO.iterations.addAll(this.iterationDAO.getAll());\n\t\torganizationTO.iterationHistoryEntries.addAll(this.iterationHistoryEntryDAO.getAll());\n\t\torganizationTO.labels.addAll(this.labelDAO.getAll());\n\t\torganizationTO.products.addAll(this.productDAO.getAll());\n\t\torganizationTO.projects.addAll(this.projectDAO.getAll());\n\t\torganizationTO.settings.addAll(this.settingDAO.getAll());\n\t\t\n\t\tfor(Story story : this.storyDAO.getAll()) {\n\t\t\tthis.addInOrder(story, organizationTO.stories);\n\t\t}\n\t\t\n\t\torganizationTO.storyAccesses.addAll(this.storyAccessDAO.getAll());\n\t\torganizationTO.storyHourEntries.addAll(this.storyHourEntryDAO.getAll());\n\t\torganizationTO.storyRanks.addAll(this.storyRankDAO.getAll());\n\t\torganizationTO.tasks.addAll(this.taskDAO.getAll());\n\t\torganizationTO.taskHourEntries.addAll(this.taskHourEntryDAO.getAll());\n\t\torganizationTO.teams.addAll(this.teamDAO.getAll());\n\t\torganizationTO.users.addAll(this.userDAO.getAll());\n\t\torganizationTO.whatsNextEntries.addAll(this.whatsNextEntryDAO.getAll());\n\t\torganizationTO.whatsNextStoryEntries.addAll(this.whatsNextStoryEntryDAO.getAll());\n\t\torganizationTO.widgetCollections.addAll(this.widgetCollectionDAO.getAll());\n\n\t\tfor(AgilefantWidget widget : this.agilefantWidgetDAO.getAll()) {\n\t\t\tAgilefantWidgetAndRef widgetAndRef = this.addWidgetTypeInfo(widget);\n\t\t\tif(widgetAndRef!=null) {\n\t\t\t\torganizationTO.widgets.add(widgetAndRef);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn organizationTO;\n\t}\n\t\n\tprivate String generateDuplicateIdentifier() {\n\t\tSecureRandom r = new SecureRandom();\n\t\treturn \"_DUPLICATE\" + new BigInteger(50, r).toString();\n\t}\n\t\n\tvoid renameDuplicateData(OrganizationDumpTO organizationTO) {\n\t\tfor(User user : organizationTO.users) {\n\t\t\twhile (this.userBusiness.retrieveByLoginName(user.getLoginName())!=null) {\n\t\t\t\tuser.setLoginName(user.getLoginName() + generateDuplicateIdentifier());\t\t\t\t\n\t\t\t}\n\t\t}\n\t\tfor(Team team : organizationTO.teams) {\n\t\t\twhile (this.teamBusiness.getByTeamName(team.getName())!=null) {\n\t\t\t\tteam.setName(team.getName() + generateDuplicateIdentifier());\n\t\t\t}\n\t\t}\n\t\tfor(Iteration iteration : organizationTO.iterations) {\n\t\t\tif (iteration.getReadonlyToken() != null) {\n\t\t\t\titeration.setReadonlyToken(tokenGenerator.generateReadonlyToken(iteration.getReadonlyToken()));\n\t\t\t}\n\t\t}\n\t}\n\t\n\t@Override\n\t@Transactional(rollbackFor=RuntimeException.class)\n\tpublic void importOrganization(OrganizationDumpTO organizationTO) {\n\t\tthis.renameDuplicateData(organizationTO);\n\t\t\n\t\tCollection<Object> objects = new ArrayList<Object>();\n\t\tobjects.addAll(organizationTO.users);\n\t\tobjects.addAll(organizationTO.holidays);\n\t\tobjects.addAll(organizationTO.products);\n\t\tobjects.addAll(organizationTO.projects);\n\t\tobjects.addAll(organizationTO.iterations);\n\t\tobjects.addAll(organizationTO.stories);\n\t\tobjects.addAll(organizationTO.tasks);\n\t\tobjects.addAll(organizationTO.assignments);\n\t\tobjects.addAll(organizationTO.backlogHourEntries);\n\t\tobjects.addAll(organizationTO.storyHourEntries);\n\t\tobjects.addAll(organizationTO.taskHourEntries);\n\t\tobjects.addAll(organizationTO.backlogHistoryEntries);\n\t\tobjects.addAll(organizationTO.iterationHistoryEntries);\n\t\tobjects.addAll(organizationTO.labels);\n\t\tobjects.addAll(organizationTO.storyAccesses);\n\t\tobjects.addAll(organizationTO.storyRanks);\n\t\tobjects.addAll(organizationTO.teams);\n\t\tobjects.addAll(organizationTO.whatsNextEntries);\n\t\tobjects.addAll(organizationTO.whatsNextStoryEntries);\n\t\tobjects.addAll(organizationTO.widgetCollections);\n\t\tobjects.addAll(organizationTO.widgets);\n\t\tif (settingDAO.count() == 0) {\n\t\t\tobjects.addAll(organizationTO.settings);\n\t\t} else {\n\t\t\tfor (Setting setting: organizationTO.settings) {\n\t\t\t\tsettingBusiness.setValue(setting.getName(), setting.getValue());\n\t\t\t}\n\t\t}\n\n\t\tSession session = this.sessionFactory.getCurrentSession();\n\t\ttry {\n\t\t\tint index = 0;\n\t\t\tfor(Object object : objects) {\n\t\t\t\tif(object instanceof AgilefantWidgetAndRef) {\n\t\t\t\t\t// Deref the widget object here, will set proper object id as the referenced object is persisted by now\n\t\t\t\t\tobject = ((AgilefantWidgetAndRef)object).getAgilefantWidget();\n\t\t\t\t}\n\t\t\t\tsession.save(object);\t\t\t\t\t\n\t\t\t\tif(index++ % 50 == 0) {\n\t\t\t\t\tsession.flush();\n\t\t\t\t\tsession.clear();\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t} catch(Exception e) {\n\t\t\tLOG.error(\"Error importing data\");\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t}\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\impl\\\\ExportIterationBusinessImpl.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["ExportIterationBusinessImpl", "SheetStyles"], "AN": ["iterationBusiness", "settingBusiness", "iterationBurndownBusiness", "STORY_POINT_COL", "EL_COL", "OE_COL", "ES_COL", "boxedBold", "boxed", "whiteRow", "greyRow"], "SCS_VariableDeclarator": ["iterationBusiness", "settingBusiness", "iterationBurndownBusiness", "STORY_POINT_COL", "EL_COL", "OE_COL", "ES_COL", "boxedBold", "boxed", "whiteRow", "greyRow", "wb", "iteration", "styles", "styles", "boxedStyle", "boxedHeader", "boldFont", "storyRowStyle", "storyRowStoryGrey", "storiesSheet", "headerRow", "stories", "curentRow", "story", "row", "i", "tasksSheet", "tasks", "stories", "taskComparator", "story", "storyTasks", "tasksWoStory", "headerRow", "currentRow", "task", "row", "i", "info", "storyHeaders", "rowStyles", "currentRowNum", "story", "currentStyle", "currentRow", "storymetrics", "firstTableRow", "lasTableRow", "storySums", "totalSums", "tasksWoStorySums", "totalsRowNum", "storySumRows", "cell", "tmp", "metrics", "tmp", "burndownPicId", "dwr", "cAnch", "pict", "metadata", "iterationNameRow", "iterationTimeframeRow", "iterationAssigneesRow", "iterationDescriptionRow", "row", "cell", "strb", "user", "str", "strb", "label", "str"], "MN": ["exportIteration", "createStyles", "createStories", "createTasks", "createSummary", "renderTasksWOStory", "renderInfoTotals", "renderStorySums", "addIterationBurndown", "renderIterationInfo", "formatCell", "formatCell", "formatCell", "formatCell", "formatCell", "formatCell", "formatCellUsers", "formatCellLabels"], "PN": ["iterationId", "wb", "wb", "styles", "iter", "wb", "styles", "iter", "wb", "styles", "iter", "styles", "tasksWoStorySums", "totalsRowNum", "storySumRows", "styles", "iter", "totalSums", "styles", "firstTableRow", "lasTableRow", "sums", "wb", "iter", "info", "currentRowNum", "styles", "iter", "info", "cell", "style", "value", "cell", "style", "value", "cell", "style", "value", "cell", "style", "value", "cell", "style", "value", "cell", "style", "value", "cell", "style", "users", "cell", "style", "labels"], "SCS_VariableDeclaration": ["Workbook", "IterationTO", "SheetStyles", "SheetStyles", "CellStyle", "CellStyle", "Font", "CellStyle", "CellStyle", "Sheet", "Row", "List", "int", "StoryTO", "Row", "int", "Sheet", "List", "List", "Comparator", "StoryTO", "List", "List", "Row", "int", "Task", "Row", "int", "Sheet", "Row", "CellStyle", "int", "StoryTO", "CellStyle", "Row", "StoryMetrics", "int", "int", "Row", "Row", "Row", "int", "int", "int", "Cell", "IterationMetrics", "Cell", "int", "Drawing", "ClientAnchor", "Picture", "Cell", "Row", "Row", "Row", "Row", "int", "int", "StringBuilder", "User", "String", "StringBuilder", "Label", "String"], "SCS_ClassReference": ["iterationBusiness", "", "", "", "", "wb", "boxedStyle", "boxedStyle", "IndexedColors.BLACK", "boxedStyle", "boxedStyle", "boxedStyle", "boxedStyle", "boxedStyle", "boxedStyle", "boxedStyle", "boxedStyle", "boxedStyle", "boxedStyle", "boxedStyle", "boxedStyle", "wb", "boxedHeader", "wb", "boldFont", "boxedHeader", "wb", "storyRowStyle", "storyRowStyle", "storyRowStyle", "wb", "storyRowStoryGrey", "storyRowStoryGrey", "IndexedColors.GREY_25_PERCENT", "storyRowStoryGrey", "wb", "storiesSheet", "", "headerRow", "", "headerRow", "", "headerRow", "", "headerRow", "", "headerRow", "", "headerRow", "", "headerRow", "iter", "Collections", "storiesSheet", "", "row", "story", "", "row", "story", "", "row", "story", "", "row", "story", "", "row", "story", "", "row", "story", "", "row", "story", "storiesSheet", "wb", "iter", "Collections", "story", "Collections", "tasks", "iter", "Collections", "tasks", "tasksSheet", "", "headerRow", "", "headerRow", "", "headerRow", "", "headerRow", "", "headerRow", "", "headerRow", "", "headerRow", "", "headerRow", "", "headerRow", "tasksSheet", "", "row", "task", "", "row", "task", "task", "", "row", "task", null, "", "row", "task", null, "", "row", "task", "", "row", "task", "", "row", "task", "", "row", "task", "", "row", "task", "tasksSheet", "wb", "", "info", "", "storyHeaders", "", "storyHeaders", "", "storyHeaders", "", "storyHeaders", "", "storyHeaders", "", "storyHeaders", "settingBusiness", "", "storyHeaders", "iter", "info", "", "currentRow", "story", "", "currentRow", "story", "", "currentRow", "story", "", "currentRow", "story", "story", "", "currentRow", "storymetrics", "", "currentRow", "storymetrics", "settingBusiness", "", "currentRow", "storymetrics", "info", "", "info", "", "info", "", "info", "info", "", "", "tasksWoStorySums", "", "tasksWoStorySums", "", "tasksWoStorySums", "", "tasksWoStorySums", "tasksWoStorySums", "tmp", "tmp", "tmp", "tasksWoStorySums", "tmp", "tmp", "tmp", "settingBusiness", "tasksWoStorySums", "tmp", "tmp", "tmp", "", "totalSums", "", "totalSums", "", "totalSums", "", "totalSums", "iterationBusiness", "", "totalSums", "metrics", "", "totalSums", "metrics", "settingBusiness", "", "totalSums", "metrics", "", "sums", "sums", "tmp", "tmp", "tmp", "", "sums", "", "sums", "sums", "tmp", "tmp", "tmp", "sums", "tmp", "tmp", "tmp", "settingBusiness", "sums", "tmp", "tmp", "tmp", "wb", "iterationBurndownBusiness", "info", "wb", null, "cAnch", "cAnch", "cAnch", "dwr", "pict", "info", null, "metadata", null, "SecurityUtil", null, "info", "info", "info", "info", "", "iterationNameRow", "", "iterationNameRow", "iter", "", "iterationTimeframeRow", "", "iterationTimeframeRow", "iter", null, "iter", null, "", "iterationAssigneesRow", "", "iterationAssigneesRow", "iter", "", "iterationDescriptionRow", "", "iterationDescriptionRow", "iter", "info", null, null, "info", null, null, "info", "info", "info", "info", "cell", "cell", "cell", "value", "cell", "cell", "cell", "value", "", "value", "cell", "cell", "cell", "cell", "cell", "cell", "cell", "cell", "value", "SpreadsheetVersion.EXCEL97", "value", "SpreadsheetVersion.EXCEL97", "cell", "cell", "cell", "users", "strb", "user", "strb", "strb", null, "strb", "cell", "cell", "cell", "labels", "strb", "label", "strb", "strb", null, "strb", "cell"], "SCS_MethodInvocation": ["getIterationContents", "createStyles", "createSummary", "createStories", "createTasks", "createCellStyle", "setBorderBottom", "setBottomBorderColor", "getIndex", "setTopBorderColor", "getBottomBorderColor", "setBorderTop", "getBorderBottom", "setLeftBorderColor", "getBottomBorderColor", "setBorderLeft", "getBorderBottom", "setRightBorderColor", "getBottomBorderColor", "setBorderRight", "getBorderBottom", "createCellStyle", "cloneStyleFrom", "createFont", "setBoldweight", "setFont", "createCellStyle", "cloneStyleFrom", "setBorderBottom", "setBorderTop", "createCellStyle", "cloneStyleFrom", "setFillForegroundColor", "getIndex", "setFillPattern", "createSheet", "createRow", "formatCell", "createCell", "formatCell", "createCell", "formatCell", "createCell", "formatCell", "createCell", "formatCell", "createCell", "formatCell", "createCell", "formatCell", "createCell", "getRankedStories", "sort", "createRow", "formatCell", "createCell", "getId", "formatCell", "createCell", "getName", "formatCell", "createCell", "getStoryPoints", "formatCell", "createCell", "getState", "formatCellUsers", "createCell", "getResponsibles", "formatCellLabels", "createCell", "getLabels", "formatCell", "createCell", "getDescription", "autoSizeColumn", "createSheet", "getRankedStories", "sort", "getTasks", "sort", "addAll", "getTasks", "sort", "addAll", "createRow", "formatCell", "createCell", "formatCell", "createCell", "formatCell", "createCell", "formatCell", "createCell", "formatCell", "createCell", "formatCell", "createCell", "formatCell", "createCell", "formatCell", "createCell", "formatCell", "createCell", "createRow", "formatCell", "createCell", "getId", "formatCell", "createCell", "getName", "getStory", "formatCell", "createCell", "getStory", "getName", "formatCell", "createCell", "getStory", "getId", "formatCell", "createCell", "getState", "formatCellUsers", "createCell", "getResponsibles", "formatCell", "createCell", "getEffortLeft", "formatCell", "createCell", "getOriginalEstimate", "formatCell", "createCell", "getDescription", "autoSizeColumn", "createSheet", "renderIterationInfo", "createRow", "formatCell", "createCell", "formatCell", "createCell", "formatCell", "createCell", "formatCell", "createCell", "formatCell", "createCell", "formatCell", "createCell", "isHourReportingEnabled", "formatCell", "createCell", "getRankedStories", "createRow", "formatCell", "createCell", "getName", "formatCell", "createCell", "getStoryPoints", "formatCell", "createCell", "getState", "formatCellUsers", "createCell", "getResponsibles", "getMetrics", "formatCell", "createCell", "getEffortLeft", "formatCell", "createCell", "getOriginalEstimate", "isHourReportingEnabled", "formatCell", "createCell", "getEffortSpent", "createRow", "renderStorySums", "createRow", "renderInfoTotals", "createRow", "renderTasksWOStory", "setColumnWidth", "autoSizeColumn", "addIterationBurndown", "formatCell", "createCell", "formatCell", "createCell", "formatCell", "createCell", "formatCell", "createCell", "createCell", "setCellType", "setCellFormula", "setCellStyle", "createCell", "setCellType", "setCellFormula", "setCellStyle", "isHourReportingEnabled", "createCell", "setCellType", "setCellFormula", "setCellStyle", "formatCell", "createCell", "formatCell", "createCell", "formatCell", "createCell", "formatCell", "createCell", "getIterationMetrics", "formatCell", "createCell", "getEffortLeft", "formatCell", "createCell", "getOriginalEstimate", "isHourReportingEnabled", "formatCell", "createCell", "getSpentEffort", "formatCell", "createCell", "createCell", "setCellType", "setCellFormula", "setCellStyle", "formatCell", "createCell", "formatCell", "createCell", "createCell", "setCellType", "setCellFormula", "setCellStyle", "createCell", "setCellType", "setCellFormula", "setCellStyle", "isHourReportingEnabled", "createCell", "setCellType", "setCellFormula", "setCellStyle", "addPicture", "getIterationBurndown", "createDrawingPatriarch", "getCreationHelper", "createClientAnchor", "setRow1", "setCol1", "setCol2", "createPicture", "resize", "createRow", "createCell", "setCellValue", "toString", "getLoggedUser", "getFullName", "createRow", "createRow", "createRow", "createRow", "formatCell", "createCell", "formatCell", "createCell", "getName", "formatCell", "createCell", "formatCell", "createCell", "getStartDate", "toString", "getEndDate", "toString", "formatCell", "createCell", "formatCellUsers", "createCell", "getAssignees", "formatCell", "createCell", "formatCell", "createCell", "getDescription", "createRow", "createCell", "setCellStyle", "getRow", "createCell", "setCellStyle", "addMergedRegion", "addMergedRegion", "addMergedRegion", "addMergedRegion", "setCellType", "setCellStyle", "setCellValue", "getName", "setCellType", "setCellStyle", "setCellValue", "getName", "formatCell", "getMinorUnits", "setCellType", "setCellStyle", "setCellValue", "setCellType", "setCellStyle", "setCellValue", "setCellType", "setCellStyle", "length", "getMaxTextLength", "substring", "getMaxTextLength", "setCellValue", "setCellType", "setCellStyle", "isEmpty", "append", "getFullName", "append", "substring", "toString", "length", "setCellValue", "setCellType", "setCellStyle", "isEmpty", "append", "getDisplayName", "append", "substring", "toString", "length", "setCellValue"], "SCS_MemberReference": ["iterationId", "wb", "wb", "styles", "iteration", "wb", "styles", "iteration", "wb", "styles", "iteration", "wb", "BORDER_THIN", "boxedStyle", "BOLDWEIGHT_BOLD", "boldFont", "boxedStyle", "BORDER_NONE", "BORDER_NONE", "storyRowStyle", "SOLID_FOREGROUND", "boxed", "boxedStyle", "boxedBold", "boxedHeader", "whiteRow", "storyRowStyle", "greyRow", "storyRowStoryGrey", "styles", "boxedBold", "boxedBold", "boxedBold", "boxedBold", "boxedBold", "boxedBold", "boxedBold", "stories", "stories", "curentRow", "whiteRow", "whiteRow", "whiteRow", "whiteRow", "whiteRow", "whiteRow", "whiteRow", "i", "i", "i", "storiesSheet", "stories", "stories", "storyTasks", "taskComparator", "storyTasks", "tasksWoStory", "taskComparator", "tasksWoStory", "boxedBold", "boxedBold", "boxedBold", "boxedBold", "boxedBold", "boxedBold", "boxedBold", "boxedBold", "boxedBold", "tasks", "currentRow", "whiteRow", "whiteRow", "whiteRow", "whiteRow", "whiteRow", "whiteRow", "whiteRow", "whiteRow", "whiteRow", "i", "i", "i", "tasksSheet", "styles", "iter", "info", "boxedBold", "boxedBold", "boxedBold", "boxedBold", "boxedBold", "boxedBold", "boxedBold", "whiteRow", "greyRow", "rowStyles", "currentRowNum", "currentRowNum", "currentStyle", "currentStyle", "currentStyle", "currentStyle", "storymetrics", "storymetrics", "currentStyle", "currentStyle", "currentStyle", "currentRowNum", "currentRowNum", "styles", "firstTableRow", "lasTableRow", "storySums", "lasTableRow", "styles", "iter", "totalSums", "lasTableRow", "lasTableRow", "lasTableRow", "styles", "tasksWoStorySums", "totalsRowNum", "storySumRows", "cell", "cell", "cell", "wb", "iter", "info", "currentRowNum", "info", "boxedBold", "boxedBold", "boxedBold", "boxedBold", "tmp", "CELL_TYPE_FORMULA", "EL_COL", "totalsRowNum", "EL_COL", "storySumRows", "boxedBold", "tmp", "CELL_TYPE_FORMULA", "OE_COL", "totalsRowNum", "OE_COL", "storySumRows", "boxedBold", "tmp", "CELL_TYPE_FORMULA", "ES_COL", "totalsRowNum", "ES_COL", "storySumRows", "boxedBold", "boxedBold", "boxedBold", "boxedBold", "boxedBold", "iter", "boxedBold", "boxedBold", "boxedBold", "boxedBold", "tmp", "CELL_TYPE_FORMULA", "STORY_POINT_COL", "firstTableRow", "STORY_POINT_COL", "lasTableRow", "boxedBold", "boxedBold", "boxedBold", "tmp", "CELL_TYPE_FORMULA", "EL_COL", "firstTableRow", "EL_COL", "lasTableRow", "boxedBold", "tmp", "CELL_TYPE_FORMULA", "OE_COL", "firstTableRow", "OE_COL", "lasTableRow", "boxedBold", "tmp", "CELL_TYPE_FORMULA", "ES_COL", "firstTableRow", "ES_COL", "lasTableRow", "boxedBold", "iter", "PICTURE_TYPE_PNG", "currentRowNum", "cAnch", "burndownPicId", "boxedBold", "boxed", "boxedBold", "boxed", "boxedBold", "boxed", "boxedBold", "boxed", "boxed", "row", "row", "cell", "cell", "cell", "boxed", "row", "CELL_TYPE_STRING", "style", "CELL_TYPE_STRING", "style", "value", "cell", "style", "CELL_TYPE_NUMERIC", "style", "value", "value", "CELL_TYPE_NUMERIC", "style", "value", "value", "value", "CELL_TYPE_STRING", "style", "value", "value", "value", "CELL_TYPE_STRING", "style", "users", "users", "str", "CELL_TYPE_STRING", "style", "labels", "labels", "str"], "CO": ["// build task list in rank order", "// format the merged cells", "// merge cells"], "CODE": "package fi.hut.soberit.agilefant.business.impl;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\nimport java.util.Set;\n\nimport org.apache.poi.hssf.usermodel.HSSFWorkbook;\nimport org.apache.poi.ss.SpreadsheetVersion;\nimport org.apache.poi.ss.usermodel.Cell;\nimport org.apache.poi.ss.usermodel.CellStyle;\nimport org.apache.poi.ss.usermodel.ClientAnchor;\nimport org.apache.poi.ss.usermodel.Drawing;\nimport org.apache.poi.ss.usermodel.Font;\nimport org.apache.poi.ss.usermodel.IndexedColors;\nimport org.apache.poi.ss.usermodel.Picture;\nimport org.apache.poi.ss.usermodel.Row;\nimport org.apache.poi.ss.usermodel.Sheet;\nimport org.apache.poi.ss.usermodel.Workbook;\nimport org.apache.poi.ss.util.CellRangeAddress;\nimport org.joda.time.DateTime;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.support.PropertyComparator;\nimport org.springframework.stereotype.Service;\n\nimport fi.hut.soberit.agilefant.business.ExportIterationBusiness;\nimport fi.hut.soberit.agilefant.business.IterationBurndownBusiness;\nimport fi.hut.soberit.agilefant.business.IterationBusiness;\nimport fi.hut.soberit.agilefant.business.SettingBusiness;\nimport fi.hut.soberit.agilefant.model.ExactEstimate;\nimport fi.hut.soberit.agilefant.model.Label;\nimport fi.hut.soberit.agilefant.model.StoryState;\nimport fi.hut.soberit.agilefant.model.Task;\nimport fi.hut.soberit.agilefant.model.TaskState;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.security.SecurityUtil;\nimport fi.hut.soberit.agilefant.transfer.IterationMetrics;\nimport fi.hut.soberit.agilefant.transfer.IterationTO;\nimport fi.hut.soberit.agilefant.transfer.StoryTO;\nimport fi.hut.soberit.agilefant.util.StoryMetrics;\n\n@Service(\"exportIterationBusiness\")\npublic class ExportIterationBusinessImpl implements ExportIterationBusiness {\n\n    @Autowired\n    private IterationBusiness iterationBusiness;\n    @Autowired\n    private SettingBusiness settingBusiness;\n    @Autowired\n    private IterationBurndownBusiness iterationBurndownBusiness;\n\n    private static final String STORY_POINT_COL = \"B\";\n    private static final String EL_COL = \"E\";\n    private static final String OE_COL = \"F\";\n    private static final String ES_COL = \"G\";\n\n    private class SheetStyles {\n        public CellStyle boxedBold;\n        public CellStyle boxed;\n        public CellStyle whiteRow;\n        public CellStyle greyRow;\n    }\n\n    public Workbook exportIteration(int iterationId) {\n        Workbook wb = new HSSFWorkbook();\n        IterationTO iteration = iterationBusiness\n                .getIterationContents(iterationId);\n        SheetStyles styles = createStyles(wb);\n        createSummary(wb, styles, iteration);\n        createStories(wb, styles, iteration);\n        createTasks(wb, styles, iteration);\n        return wb;\n    }\n\n    private SheetStyles createStyles(Workbook wb) {\n        SheetStyles styles = new SheetStyles();\n\n        CellStyle boxedStyle = wb.createCellStyle();\n\n        boxedStyle.setBorderBottom(CellStyle.BORDER_THIN);\n        boxedStyle.setBottomBorderColor(IndexedColors.BLACK.getIndex());\n\n        boxedStyle.setTopBorderColor(boxedStyle.getBottomBorderColor());\n        boxedStyle.setBorderTop(boxedStyle.getBorderBottom());\n\n        boxedStyle.setLeftBorderColor(boxedStyle.getBottomBorderColor());\n        boxedStyle.setBorderLeft(boxedStyle.getBorderBottom());\n\n        boxedStyle.setRightBorderColor(boxedStyle.getBottomBorderColor());\n        boxedStyle.setBorderRight(boxedStyle.getBorderBottom());\n\n        CellStyle boxedHeader = wb.createCellStyle();\n        boxedHeader.cloneStyleFrom(boxedStyle);\n        Font boldFont = wb.createFont();\n        boldFont.setBoldweight(Font.BOLDWEIGHT_BOLD);\n        boxedHeader.setFont(boldFont);\n\n        CellStyle storyRowStyle = wb.createCellStyle();\n        storyRowStyle.cloneStyleFrom(boxedStyle);\n        storyRowStyle.setBorderBottom(CellStyle.BORDER_NONE);\n        storyRowStyle.setBorderTop(CellStyle.BORDER_NONE);\n\n        CellStyle storyRowStoryGrey = wb.createCellStyle();\n        storyRowStoryGrey.cloneStyleFrom(storyRowStyle);\n        storyRowStoryGrey.setFillForegroundColor(IndexedColors.GREY_25_PERCENT\n                .getIndex());\n        storyRowStoryGrey.setFillPattern(CellStyle.SOLID_FOREGROUND);\n\n        styles.boxed = boxedStyle;\n        styles.boxedBold = boxedHeader;\n        styles.whiteRow = storyRowStyle;\n        styles.greyRow = storyRowStoryGrey;\n        return styles;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    private Sheet createStories(Workbook wb, SheetStyles styles,\n            IterationTO iter) {\n        Sheet storiesSheet = wb.createSheet(\"Stories\");\n        Row headerRow = storiesSheet.createRow(0);\n\n        formatCell(headerRow.createCell(0), styles.boxedBold, \"ID\");\n        formatCell(headerRow.createCell(1), styles.boxedBold, \"Name\");\n        formatCell(headerRow.createCell(2), styles.boxedBold, \"Points\");\n        formatCell(headerRow.createCell(3), styles.boxedBold, \"State\");\n        formatCell(headerRow.createCell(4), styles.boxedBold, \"Assignees\");\n        formatCell(headerRow.createCell(5), styles.boxedBold, \"Labels\");\n        formatCell(headerRow.createCell(6), styles.boxedBold, \"Description\");\n        List<StoryTO> stories = iter.getRankedStories();\n        Collections.sort(stories, new PropertyComparator(\"rank\", true, true));\n\n        int curentRow = 1;\n        for (StoryTO story : stories) {\n            Row row = storiesSheet.createRow(curentRow++);\n            formatCell(row.createCell(0), styles.whiteRow, story.getId());\n            formatCell(row.createCell(1), styles.whiteRow, story.getName());\n            formatCell(row.createCell(2), styles.whiteRow,\n                    story.getStoryPoints());\n            formatCell(row.createCell(3), styles.whiteRow, story.getState());\n            formatCellUsers(row.createCell(4), styles.whiteRow,\n                    story.getResponsibles());\n            formatCellLabels(row.createCell(5), styles.whiteRow,\n                    story.getLabels());\n            formatCell(row.createCell(6), styles.whiteRow,\n                    story.getDescription());\n        }\n\n        for (int i = 0; i < 7; i++) {\n            storiesSheet.autoSizeColumn(i);\n        }\n\n        return storiesSheet;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    private Sheet createTasks(Workbook wb, SheetStyles styles, IterationTO iter) {\n        Sheet tasksSheet = wb.createSheet(\"Tasks\");\n        List<Task> tasks = new ArrayList<Task>();\n\n        // build task list in rank order\n        List<StoryTO> stories = iter.getRankedStories();\n        Collections.sort(stories, new PropertyComparator(\"rank\", true, true));\n        Comparator<Task> taskComparator = new PropertyComparator(\"rank\", true,\n                true);\n        for (StoryTO story : stories) {\n            List<Task> storyTasks = new ArrayList<Task>(story.getTasks());\n            Collections.sort(storyTasks, taskComparator);\n            tasks.addAll(storyTasks);\n        }\n        List<Task> tasksWoStory = new ArrayList<Task>(iter.getTasks());\n        Collections.sort(tasksWoStory, taskComparator);\n        tasks.addAll(tasksWoStory);\n\n        Row headerRow = tasksSheet.createRow(0);\n\n        formatCell(headerRow.createCell(0), styles.boxedBold, \"ID\");\n        formatCell(headerRow.createCell(1), styles.boxedBold, \"Name\");\n        formatCell(headerRow.createCell(2), styles.boxedBold, \"Story\");\n        formatCell(headerRow.createCell(3), styles.boxedBold, \"Story ID\");\n        formatCell(headerRow.createCell(4), styles.boxedBold, \"State\");\n        formatCell(headerRow.createCell(5), styles.boxedBold, \"Assignees\");\n        formatCell(headerRow.createCell(6), styles.boxedBold, \"Effort Left\");\n        formatCell(headerRow.createCell(7), styles.boxedBold,\n                \"Original Estimate\");\n        formatCell(headerRow.createCell(8), styles.boxedBold, \"Description\");\n\n        int currentRow = 1;\n        for (Task task : tasks) {\n            Row row = tasksSheet.createRow(currentRow++);\n            formatCell(row.createCell(0), styles.whiteRow, task.getId());\n            formatCell(row.createCell(1), styles.whiteRow, task.getName());\n            if (task.getStory() != null) {\n                formatCell(row.createCell(2), styles.whiteRow, task.getStory()\n                        .getName());\n                formatCell(row.createCell(3), styles.whiteRow, task.getStory()\n                        .getId());\n            }\n            formatCell(row.createCell(4), styles.whiteRow, task.getState());\n            formatCellUsers(row.createCell(5), styles.whiteRow,\n                    task.getResponsibles());\n            formatCell(row.createCell(6), styles.whiteRow, task.getEffortLeft());\n            formatCell(row.createCell(7), styles.whiteRow,\n                    task.getOriginalEstimate());\n            formatCell(row.createCell(8), styles.whiteRow,\n                    task.getDescription());\n        }\n\n        for (int i = 0; i < 9; i++) {\n            tasksSheet.autoSizeColumn(i);\n        }\n\n        return tasksSheet;\n    }\n\n    private Sheet createSummary(Workbook wb, SheetStyles styles,\n            IterationTO iter) {\n        Sheet info = wb.createSheet(\"Summary\");\n\n        renderIterationInfo(styles, iter, info);\n        Row storyHeaders = info.createRow(9);\n\n        formatCell(storyHeaders.createCell(0), styles.boxedBold, \"Story name\");\n        formatCell(storyHeaders.createCell(1), styles.boxedBold, \"Points\");\n        formatCell(storyHeaders.createCell(2), styles.boxedBold, \"State\");\n        formatCell(storyHeaders.createCell(3), styles.boxedBold, \"Assignees\");\n        formatCell(storyHeaders.createCell(4), styles.boxedBold,\n                \"Effort left (h)\");\n        formatCell(storyHeaders.createCell(5), styles.boxedBold,\n                \"Original estimate (h)\");\n        if (settingBusiness.isHourReportingEnabled()) {\n            formatCell(storyHeaders.createCell(6), styles.boxedBold,\n                    \"Effort Spent (h)\");\n        }\n\n        CellStyle[] rowStyles = { styles.whiteRow, styles.greyRow };\n\n        int currentRowNum = 10;\n        for (StoryTO story : iter.getRankedStories()) {\n            CellStyle currentStyle = rowStyles[currentRowNum % 2];\n            Row currentRow = info.createRow(currentRowNum++);\n            formatCell(currentRow.createCell(0), currentStyle, story.getName());\n            formatCell(currentRow.createCell(1), currentStyle,\n                    story.getStoryPoints());\n            formatCell(currentRow.createCell(2), currentStyle, story.getState());\n            formatCellUsers(currentRow.createCell(3), currentStyle,\n                    story.getResponsibles());\n            StoryMetrics storymetrics = story.getMetrics();\n            if (storymetrics == null) {\n                storymetrics = new StoryMetrics();\n            }\n            formatCell(currentRow.createCell(4), currentStyle,\n                    storymetrics.getEffortLeft());\n            formatCell(currentRow.createCell(5), currentStyle,\n                    storymetrics.getOriginalEstimate());\n            if (settingBusiness.isHourReportingEnabled()) {\n                formatCell(currentRow.createCell(6), currentStyle,\n                        storymetrics.getEffortSpent());\n            }\n        }\n\n        int firstTableRow = 11;\n        int lasTableRow = currentRowNum;\n        Row storySums = info.createRow(currentRowNum);\n        renderStorySums(styles, firstTableRow, lasTableRow, storySums);\n\n        Row totalSums = info.createRow(lasTableRow + 2);\n        renderInfoTotals(styles, iter, totalSums);\n\n        Row tasksWoStorySums = info.createRow(lasTableRow + 1);\n\n        int totalsRowNum = lasTableRow + 3;\n        int storySumRows = lasTableRow + 1;\n        renderTasksWOStory(styles, tasksWoStorySums, totalsRowNum, storySumRows);\n\n        info.setColumnWidth(0, 256 * 50);\n        for (int cell = 1; cell < 10; cell++) {\n            info.autoSizeColumn(cell);\n        }\n\n        addIterationBurndown(wb, iter, info, currentRowNum);\n\n        return info;\n    }\n\n    private void renderTasksWOStory(SheetStyles styles, Row tasksWoStorySums,\n            int totalsRowNum, int storySumRows) {\n        Cell tmp;\n        formatCell(tasksWoStorySums.createCell(0), styles.boxedBold,\n                \"Tasks without story\");\n        formatCell(tasksWoStorySums.createCell(1), styles.boxedBold, \"\");\n        formatCell(tasksWoStorySums.createCell(2), styles.boxedBold, \"\");\n        formatCell(tasksWoStorySums.createCell(3), styles.boxedBold, \"\");\n        tmp = tasksWoStorySums.createCell(4);\n        tmp.setCellType(Cell.CELL_TYPE_FORMULA);\n        tmp.setCellFormula(EL_COL + totalsRowNum + \"- \" + EL_COL + storySumRows\n                + \"\");\n        tmp.setCellStyle(styles.boxedBold);\n        tmp = tasksWoStorySums.createCell(5);\n        tmp.setCellType(Cell.CELL_TYPE_FORMULA);\n        tmp.setCellFormula(OE_COL + totalsRowNum + \"- \" + OE_COL + storySumRows\n                + \"\");\n        tmp.setCellStyle(styles.boxedBold);\n        if (settingBusiness.isHourReportingEnabled()) {\n            tmp = tasksWoStorySums.createCell(6);\n            tmp.setCellType(Cell.CELL_TYPE_FORMULA);\n            tmp.setCellFormula(ES_COL + totalsRowNum + \"- \" + ES_COL\n                    + storySumRows + \"\");\n            tmp.setCellStyle(styles.boxedBold);\n        }\n    }\n\n    private void renderInfoTotals(SheetStyles styles, IterationTO iter,\n            Row totalSums) {\n        formatCell(totalSums.createCell(0), styles.boxedBold, \"Total\");\n        formatCell(totalSums.createCell(1), styles.boxedBold, \"\");\n        formatCell(totalSums.createCell(2), styles.boxedBold, \"\");\n        formatCell(totalSums.createCell(3), styles.boxedBold, \"\");\n\n        IterationMetrics metrics = iterationBusiness.getIterationMetrics(iter);\n        formatCell(totalSums.createCell(4), styles.boxedBold,\n                metrics.getEffortLeft());\n        formatCell(totalSums.createCell(5), styles.boxedBold,\n                metrics.getOriginalEstimate());\n        if (settingBusiness.isHourReportingEnabled()) {\n            formatCell(totalSums.createCell(6), styles.boxedBold,\n                    metrics.getSpentEffort());\n        }\n    }\n\n    private void renderStorySums(SheetStyles styles, int firstTableRow,\n            int lasTableRow, Row sums) {\n        Cell tmp;\n        formatCell(sums.createCell(0), styles.boxedBold, \"Story Totals\");\n\n        tmp = sums.createCell(1);\n        tmp.setCellType(Cell.CELL_TYPE_FORMULA);\n        tmp.setCellFormula(\"SUM(\" + STORY_POINT_COL + firstTableRow + \":\"\n                + STORY_POINT_COL + lasTableRow + \")\");\n        tmp.setCellStyle(styles.boxedBold);\n\n        formatCell(sums.createCell(2), styles.boxedBold, \"\");\n        formatCell(sums.createCell(3), styles.boxedBold, \"\");\n\n        tmp = sums.createCell(4);\n        tmp.setCellType(Cell.CELL_TYPE_FORMULA);\n        tmp.setCellFormula(\"SUM(\" + EL_COL + firstTableRow + \":\" + EL_COL\n                + lasTableRow + \")\");\n        tmp.setCellStyle(styles.boxedBold);\n\n        tmp = sums.createCell(5);\n        tmp.setCellType(Cell.CELL_TYPE_FORMULA);\n        tmp.setCellFormula(\"SUM(\" + OE_COL + firstTableRow + \":\" + OE_COL\n                + lasTableRow + \")\");\n        tmp.setCellStyle(styles.boxedBold);\n\n        if (settingBusiness.isHourReportingEnabled()) {\n            tmp = sums.createCell(6);\n            tmp.setCellType(Cell.CELL_TYPE_FORMULA);\n            tmp.setCellFormula(\"SUM(\" + ES_COL + firstTableRow + \":\" + ES_COL\n                    + lasTableRow + \")\");\n            tmp.setCellStyle(styles.boxedBold);\n        }\n    }\n\n    private void addIterationBurndown(Workbook wb, IterationTO iter,\n            Sheet info, int currentRowNum) {\n        int burndownPicId = wb.addPicture(\n                iterationBurndownBusiness.getIterationBurndown(iter, 0),\n                Workbook.PICTURE_TYPE_PNG);\n\n        Drawing dwr = info.createDrawingPatriarch();\n        ClientAnchor cAnch = wb.getCreationHelper().createClientAnchor();\n        cAnch.setRow1(currentRowNum + 4);\n        cAnch.setCol1(0);\n        cAnch.setCol2(6);\n        Picture pict = dwr.createPicture(cAnch, burndownPicId);\n        pict.resize();\n    }\n\n    private void renderIterationInfo(SheetStyles styles, IterationTO iter,\n            Sheet info) {\n        Cell metadata = info.createRow(0).createCell(0);\n        metadata.setCellValue(\"Exported at \"\n                + new DateTime().toString(\"yyyy.MM.dd HH:mm\") + \" by \"\n                + SecurityUtil.getLoggedUser().getFullName());\n        Row iterationNameRow = info.createRow(2);\n        Row iterationTimeframeRow = info.createRow(3);\n        Row iterationAssigneesRow = info.createRow(4);\n        Row iterationDescriptionRow = info.createRow(5);\n\n        formatCell(iterationNameRow.createCell(0), styles.boxedBold, \"Name\");\n        formatCell(iterationNameRow.createCell(1), styles.boxed, iter.getName());\n\n        formatCell(iterationTimeframeRow.createCell(0), styles.boxedBold,\n                \"Timeframe\");\n        formatCell(iterationTimeframeRow.createCell(1), styles.boxed, iter\n                .getStartDate().toString(\"yyyy.MM.dd HH:mm\")\n                + \" - \"\n                + iter.getEndDate().toString(\"yyyy.MM.dd HH:mm\"));\n\n        formatCell(iterationAssigneesRow.createCell(0), styles.boxedBold,\n                \"Assignees\");\n        formatCellUsers(iterationAssigneesRow.createCell(1), styles.boxed,\n                iter.getAssignees());\n\n        formatCell(iterationDescriptionRow.createCell(0), styles.boxedBold,\n                \"Description\");\n        formatCell(iterationDescriptionRow.createCell(1), styles.boxed,\n                iter.getDescription());\n\n        // format the merged cells\n        info.createRow(6).createCell(1).setCellStyle(styles.boxed);\n        for (int row = 2; row < 7; row++) {\n            for (int cell = 2; cell < 7; cell++) {\n                info.getRow(row).createCell(cell).setCellStyle(styles.boxed);\n            }\n        }\n\n        // merge cells\n        info.addMergedRegion(new CellRangeAddress(2, 2, 1, 6));\n        info.addMergedRegion(new CellRangeAddress(3, 3, 1, 6));\n        info.addMergedRegion(new CellRangeAddress(4, 4, 1, 6));\n        info.addMergedRegion(new CellRangeAddress(5, 6, 1, 6));\n    }\n\n    private static void formatCell(Cell cell, CellStyle style, StoryState value) {\n        cell.setCellType(Cell.CELL_TYPE_STRING);\n        cell.setCellStyle(style);\n        cell.setCellValue(value.getName());\n    }\n\n    private static void formatCell(Cell cell, CellStyle style, TaskState value) {\n        cell.setCellType(Cell.CELL_TYPE_STRING);\n        cell.setCellStyle(style);\n        cell.setCellValue(value.getName());\n    }\n\n    private static void formatCell(Cell cell, CellStyle style,\n            ExactEstimate value) {\n        if (value != null) {\n            formatCell(cell, style, value.getMinorUnits());\n        }\n    }\n\n    private static void formatCell(Cell cell, CellStyle style, Integer value) {\n        cell.setCellType(Cell.CELL_TYPE_NUMERIC);\n        cell.setCellStyle(style);\n        if (value != null) {\n            cell.setCellValue(value);\n        }\n    }\n\n    private static void formatCell(Cell cell, CellStyle style, Long value) {\n        cell.setCellType(Cell.CELL_TYPE_NUMERIC);\n        cell.setCellStyle(style);\n        if (value == null) {\n            value = 0l;\n        }\n        cell.setCellValue(value / 60.0);\n    }\n\n    private static void formatCell(Cell cell, CellStyle style, String value) {\n        cell.setCellType(Cell.CELL_TYPE_STRING);\n        cell.setCellStyle(style);\n        if (value != null && value.length() > SpreadsheetVersion.EXCEL97.getMaxTextLength()) {\n            value = value.substring(0, SpreadsheetVersion.EXCEL97.getMaxTextLength());\n        }\n        cell.setCellValue(value);\n    }\n\n    private static void formatCellUsers(Cell cell, CellStyle style,\n            Set<User> users) {\n        cell.setCellType(Cell.CELL_TYPE_STRING);\n        cell.setCellStyle(style);\n        if (users == null || users.isEmpty()) {\n\n        } else {\n            StringBuilder strb = new StringBuilder();\n            for (User user : users) {\n                strb.append(user.getFullName());\n                strb.append(\", \");\n            }\n            String str = strb.substring(0, strb.length() - 2).toString();\n            cell.setCellValue(str);\n        }\n    }\n\n    private static void formatCellLabels(Cell cell, CellStyle style,\n            Set<Label> labels) {\n        cell.setCellType(Cell.CELL_TYPE_STRING);\n        cell.setCellStyle(style);\n        if (labels != null && !labels.isEmpty()) {\n            StringBuilder strb = new StringBuilder();\n            for (Label label : labels) {\n                strb.append(label.getDisplayName());\n                strb.append(\", \");\n            }\n            String str = strb.substring(0, strb.length() - 2).toString();\n            cell.setCellValue(str);\n        }\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\impl\\\\GenericBusinessImpl.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["GenericBusinessImpl"], "AN": ["genericDAO", "modelType"], "SCS_VariableDeclarator": ["genericDAO", "modelType", "object", "object"], "SCS_ConstructorDeclaration": ["GenericBusinessImpl"], "SCS_MemberReference": ["modelType", "modelType", "object", "object", "id", "id", "id", "object", "id", "modelType", "object", "ids", "id", "id", "object", "id", "modelType", "object", "object"], "MN": ["countAll", "create", "delete", "delete", "exists", "retrieve", "retrieveAll", "retrieveMultiple", "retrieveIfExists", "retrieveDetached", "store"], "PN": ["object", "object", "id", "id", "id", "ids", "id", "id", "object"], "SCS_ClassReference": ["genericDAO", "genericDAO", "genericDAO", "genericDAO", "genericDAO", "genericDAO", "genericDAO", "genericDAO", "genericDAO", "genericDAO", "genericDAO"], "SCS_MethodInvocation": ["count", "create", "remove", "remove", "exists", "get", "getAll", "getMultiple", "get", "getAndDetach", "store"], "SCS_VariableDeclaration": ["T", "T"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.business.impl;\n\nimport java.util.Collection;\n\nimport org.springframework.transaction.annotation.Transactional;\n\nimport fi.hut.soberit.agilefant.business.GenericBusiness;\nimport fi.hut.soberit.agilefant.db.GenericDAO;\nimport fi.hut.soberit.agilefant.exception.ObjectNotFoundException;\n\npublic abstract class GenericBusinessImpl<T> implements GenericBusiness<T> {\n\n    protected GenericDAO<T> genericDAO;\n\n    protected Class<T> modelType;\n    \n    public GenericBusinessImpl(Class<T> modelType) {\n        this.modelType = modelType;\n    }\n    \n    @Transactional(readOnly = true)\n    public int countAll() {\n        return genericDAO.count();\n    }\n\n    @Transactional\n    public int create(T object) {\n        return ((Integer) genericDAO.create(object)).intValue();\n    }\n\n    @Transactional\n    public void delete(T object) {\n        genericDAO.remove(object);\n    }\n\n    @Transactional\n    public void delete(int id) {\n        genericDAO.remove(id);\n    }\n\n    @Transactional(readOnly = true)\n    public boolean exists(int id) {\n        return genericDAO.exists(id);\n    }\n\n    @Transactional(readOnly = true)\n    public T retrieve(int id) {\n        T object = genericDAO.get(id);\n        if (object == null) {\n           throw new ObjectNotFoundException(\"Object with id \" + id +\" was not found\", this.modelType);\n        }\n        return object;\n    }\n\n    @Transactional(readOnly = true)\n    public Collection<T> retrieveAll() {\n        return genericDAO.getAll();\n    }\n    \n    @Transactional(readOnly = true)\n    public Collection<T> retrieveMultiple(Collection<Integer> ids) {\n        return genericDAO.getMultiple(ids);\n    }\n\n    @Transactional(readOnly = true)\n    public T retrieveIfExists(int id) {\n        return genericDAO.get(id);\n    }\n    \n    @Transactional(readOnly = true)\n    public T retrieveDetached(int id) {\n        T object = genericDAO.getAndDetach(id);\n        if (object == null) {\n            throw new ObjectNotFoundException(\"Object with id \" + id +\" was not found\", this.modelType);\n        }\n        return object;\n    }\n\n    @Transactional\n    public void store(T object) {\n        genericDAO.store(object);\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\impl\\\\HolidayBusinessImpl.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["HolidayBusinessImpl"], "AN": ["holidayDAO"], "SCS_VariableDeclarator": ["holidayDAO"], "MN": ["setHolidayDAO", "retrieveFutureHolidaysByUser"], "PN": ["holidayDAO", "user"], "SCS_MemberReference": ["holidayDAO", "holidayDAO", "genericDAO", "holidayDAO", "holidayDAO", "user"], "SCS_ConstructorDeclaration": ["HolidayBusinessImpl"], "SCS_ClassReference": ["Holiday", null], "SCS_MethodInvocation": ["retrieveFutureHolidaysByUser"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.business.impl;\n\n\nimport java.util.List;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport fi.hut.soberit.agilefant.business.HolidayBusiness;\nimport fi.hut.soberit.agilefant.db.HolidayDAO;\nimport fi.hut.soberit.agilefant.model.Holiday;\nimport fi.hut.soberit.agilefant.model.User;\n\n@Service(\"holidayBusiness\")\n@Transactional\npublic class HolidayBusinessImpl extends GenericBusinessImpl<Holiday> implements\n        HolidayBusiness {\n    \n    private HolidayDAO holidayDAO;\n    \n    @Autowired\n    public void setHolidayDAO(HolidayDAO holidayDAO) {\n        this.holidayDAO = holidayDAO;\n        this.genericDAO = holidayDAO;\n    }\n\n    public HolidayBusinessImpl() {\n        super(Holiday.class);\n    }\n\n    @Transactional(readOnly = true)\n    public List<Holiday> retrieveFutureHolidaysByUser(User user) {\n        return this.holidayDAO.retrieveFutureHolidaysByUser(user);\n    }\n\n  \n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\impl\\\\HourEntryBusinessImpl.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["HourEntryBusinessImpl"], "AN": ["hourEntryDAO", "storyBusiness", "taskBusiness", "userBusiness", "backlogBusiness", "backlogHourEntryDAO"], "SCS_VariableDeclarator": ["hourEntryDAO", "storyBusiness", "taskBusiness", "userBusiness", "backlogBusiness", "backlogHourEntryDAO", "backlog", "targetUsers", "targetUser", "backlogEntry", "story", "targetUsers", "targetUser", "storyEntry", "task", "targetUsers", "targetUser", "taskEntry", "limit", "limit", "limit", "effortSpent", "hourEntry", "entries", "zone", "start", "end", "tmp", "start", "end", "zone", "tmp", "start", "end", "entries", "zone", "startWithZone", "endWithZone", "dbData", "dailyEffort", "entries", "entry", "entryTime", "md", "iteratorDate", "effortEntry", "dbData", "dailyEffort", "entry", "date", "iteratorDate", "effortEntry", "currentDate", "hourEntry", "hourEntry", "newHourEntry", "hourEntry", "newHourEntry"], "SCS_ConstructorDeclaration": ["HourEntryBusinessImpl"], "SCS_ClassReference": ["HourEntry", null, null, "backlogEntry", "backlogEntry", "", null, null, null, "storyEntry", "storyEntry", "", null, null, null, "taskEntry", "taskEntry", "", null, "source", "target", "source", "target", "source", "target", "source", "hourEntryDAO", "hourEntryDAO", "hourEntryDAO", "backlogHourEntryDAO", "hourEntryDAO", "hourEntryDAO", "hourEntry", "hourEntryDAO", "iteration", null, "iteration", "iteration", "hourEntryDAO", "iteration", "hourEntryDAO", "iteration", null, "dateTime", "zone", "dateTime", "serverTimeZone", "DateTimeZone", "day", null, "", "start", null, null, "week", "tmp", "tmp", "tmp", "tmp", "tmp", "tmp", "tmp", "tmp", "DateTimeZone", "", "", null, "week", "tmp", "tmp", "tmp", "tmp", "tmp", "tmp", "tmp", "tmp", null, "start", "Collections", null, "", "DateTimeZone", "", "", "start", "Collections", null, "entry", null, "zone", "entryTime", "serverTimeZone", "entryTime", "dbData", "dbData", "dbData", "dbData", "entry", "start", "iteratorDate", "dbData", "effortEntry", "dbData", "effortEntry", "iteratorDate", "dailyEffort", "iteratorDate", "entry", null, null, "dbData", "dbData", "dbData", "dbData", "entry", "start", "iteratorDate", "iteratorDate", "dbData", "effortEntry", "dbData", "effortEntry", "iteratorDate", "dailyEffort", "iteratorDate", "hourEntryDAO", "PropertyUtils", "newHourEntry", "hourEntryDAO", "newHourEntry", "hourEntryDAO", "PropertyUtils", "newHourEntry", "hourEntryDAO", "newHourEntry", "hourEntryDAO", "hourEntryDAO"], "MN": ["setHourEntryDAO", "logBacklogEffort", "logStoryEffort", "logTaskEffort", "validateAndCopyFields", "retrieveBacklogHourEntries", "retrieveStoryHourEntries", "retrieveTaskHourEntries", "retrieveByParent", "calculateSumByUserAndTimeInterval", "calculateSumByUserAndTimeInterval", "calculateSum", "getDailySpentEffortByIteration", "getHourEntriesForIteration", "calculateSumOfIterationsHourEntries", "getEntriesByUserAndTimeInterval", "setTimeZone", "getEntriesByUserAndDay", "calculateWeekSum", "getDailySpentEffortByWeek", "getDailySpentEffortByInterval", "getDailySpentEffortByInterval", "getDailySpentEffortForHourEntries", "setBacklogHourEntryDAO", "setStoryBusiness", "setUserBusiness", "setTaskBusiness", "setBacklogBusiness", "deleteAll", "moveToBacklog", "moveToStory", "retrieveLatestHourEntryDelta"], "PN": ["hourEntryDAO", "backlogId", "effortEntry", "userIds", "storyId", "effortEntry", "userIds", "taskId", "effortEntry", "userIds", "target", "source", "backlogId", "limited", "storyId", "limited", "taskId", "limited", "parent", "user", "startDate", "endDate", "userId", "startDate", "endDate", "hourEntries", "iteration", "iteration", "iteration", "userId", "startDate", "endDate", "dateTime", "zone", "serverTimeZone", "day", "userId", "userHourTimeZone", "userMinuteTimeZone", "serverTimeZone", "week", "userId", "userHourTimeZone", "userMinuteTimeZone", "serverTimeZone", "week", "userId", "userHourTimeZone", "userMinuteTimeZone", "serverTimeZone", "start", "end", "userId", "start", "end", "userId", "userHourTimeZone", "userMinuteTimeZone", "serverTimeZone", "entries", "start", "end", "backlogHourEntryDAO", "storyBusiness", "userBusiness", "taskBusiness", "backlogBusiness", "hourEntries", "hourEntries", "backlog", "hourEntries", "story", "userId"], "SCS_MemberReference": ["genericDAO", "hourEntryDAO", "hourEntryDAO", "hourEntryDAO", "backlogBusiness", "backlogId", "userBusiness", "userIds", "targetUsers", "backlog", "targetUser", "backlogEntry", "effortEntry", "hourEntryDAO", "backlogEntry", "storyBusiness", "storyId", "userBusiness", "userIds", "targetUsers", "story", "targetUser", "storyEntry", "effortEntry", "hourEntryDAO", "storyEntry", "taskBusiness", "taskId", "userBusiness", "userIds", "targetUsers", "task", "targetUser", "taskEntry", "effortEntry", "hourEntryDAO", "taskEntry", "limited", "ENTRY_LIMIT", "backlogId", "limit", "limited", "ENTRY_LIMIT", "storyId", "limit", "limited", "ENTRY_LIMIT", "taskId", "limit", "parent", "user", "startDate", "endDate", "userId", "startDate", "endDate", "SUPPORTS", "hourEntries", "effortSpent", "effortSpent", "entries", "hourEntryDAO", "startDate", "endDate", "userId", "zone", "dateTime", "serverTimeZone", "dateTime", "dateTime", "userHourTimeZone", "userMinuteTimeZone", "start", "start", "zone", "serverTimeZone", "hourEntryDAO", "start", "end", "userId", "MONDAY", "userHourTimeZone", "userMinuteTimeZone", "start", "start", "zone", "serverTimeZone", "end", "end", "zone", "serverTimeZone", "hourEntryDAO", "userId", "start", "end", "MONDAY", "start", "end", "userId", "userHourTimeZone", "userMinuteTimeZone", "serverTimeZone", "end", "hourEntryDAO", "start", "end", "userId", "entries", "start", "end", "userHourTimeZone", "userMinuteTimeZone", "start", "zone", "serverTimeZone", "end", "zone", "serverTimeZone", "end", "hourEntryDAO", "startWithZone", "endWithZone", "userId", "entries", "serverTimeZone", "entryTime", "md", "md", "md", "md", "end", "iteratorDate", "iteratorDate", "effortEntry", "dailyEffort", "entries", "date", "date", "date", "date", "end", "currentDate", "currentDate", "effortEntry", "dailyEffort", "backlogHourEntryDAO", "backlogHourEntryDAO", "storyBusiness", "storyBusiness", "userBusiness", "userBusiness", "taskBusiness", "taskBusiness", "backlogBusiness", "backlogBusiness", "hourEntries", "hourEntry", "hourEntries", "newHourEntry", "hourEntry", "e", "hourEntry", "backlog", "newHourEntry", "hourEntries", "newHourEntry", "hourEntry", "e", "hourEntry", "story", "newHourEntry", "userId"], "SCS_VariableDeclaration": ["Backlog", "Collection", "User", "BacklogHourEntry", "Story", "Collection", "User", "StoryHourEntry", "Task", "Collection", "User", "TaskHourEntry", "int", "int", "int", "long", "HourEntry", "List", "DateTimeZone", "DateTime", "DateTime", "MutableDateTime", "DateTime", "DateTime", "DateTimeZone", "MutableDateTime", "DateTime", "DateTime", "List", "DateTimeZone", "DateTime", "DateTime", "Map", "List", "List", "HourEntry", "DateTime", "DateMidnight", "MutableDateTime", "DailySpentEffort", "Map", "List", "HourEntry", "Date", "MutableDateTime", "DailySpentEffort", "Date", "HourEntry", "HourEntry", "BacklogHourEntry", "HourEntry", "StoryHourEntry"], "SCS_MethodInvocation": ["retrieve", "retrieveMultiple", "setBacklog", "setUser", "validateAndCopyFields", "create", "retrieve", "retrieveMultiple", "setStory", "setUser", "validateAndCopyFields", "create", "retrieve", "retrieveMultiple", "setTask", "setUser", "validateAndCopyFields", "create", "getDate", "setDescription", "getDescription", "setDate", "getDate", "setMinutesSpent", "getMinutesSpent", "getBacklogHourEntries", "getStoryHourEntries", "getTaskHourEntries", "retrieveByBacklog", "calculateSumByUserAndTimeInterval", "calculateSumByUserAndTimeInterval", "getMinutesSpent", "getAllIterationHourEntries", "getId", "getDailySpentEffortForHourEntries", "getStartDate", "getEndDate", "getAllIterationHourEntries", "getId", "calculateIterationHourEntriesSum", "getId", "getHourEntriesByFilter", "minusMillis", "getOffset", "plusMillis", "getOffset", "forOffsetHoursMinutes", "toDateMidnight", "toDateTime", "setTimeZone", "plusDays", "minusSeconds", "getHourEntriesByFilter", "toDateMidnight", "setDayOfWeek", "setSecondOfDay", "toDateTime", "addDays", "setHourOfDay", "setMinuteOfHour", "setSecondOfMinute", "toDateTime", "forOffsetHoursMinutes", "setTimeZone", "setTimeZone", "calculateSumByUserAndTimeInterval", "toDateMidnight", "setDayOfWeek", "setSecondOfDay", "toDateTime", "addDays", "setHourOfDay", "setMinuteOfHour", "setSecondOfMinute", "toDateTime", "getDailySpentEffortByInterval", "compareTo", "emptyList", "getHourEntriesByFilter", "getDailySpentEffortForHourEntries", "forOffsetHoursMinutes", "setTimeZone", "setTimeZone", "compareTo", "emptyList", "getHourEntriesByFilter", "getDate", "plusMillis", "getOffset", "minusMillis", "getOffset", "toDateMidnight", "containsKey", "put", "put", "get", "getMinutesSpent", "toDateMidnight", "compareTo", "containsKey", "setSpentEffort", "get", "setDay", "toDateTime", "add", "addDays", "getDate", "toDateMidnight", "toDate", "containsKey", "put", "put", "get", "getMinutesSpent", "toDateMidnight", "compareTo", "toDate", "containsKey", "setSpentEffort", "get", "setDay", "toDateTime", "add", "addDays", "remove", "copyProperties", "setId", "remove", "setBacklog", "store", "copyProperties", "setId", "remove", "setStory", "store", "retrieveLatestHourEntryDelta"], "CO": ["/**\n     * Calculates the daily spent effort hour entries with no timezone calculations.\n     */", "/**\n     * Calculates the daily spent effort hour entries with a timezone.\n     */", "//sum efforts per day", "//construct list that has a single entry per day", "//sum efforts per day", "//construct list that has a single entry per day"], "CODE": "package fi.hut.soberit.agilefant.business.impl;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\nimport org.apache.commons.beanutils.PropertyUtils;\nimport org.joda.time.DateTime;\nimport org.joda.time.DateTimeConstants;\nimport org.joda.time.LocalDate;\nimport org.joda.time.MutableDateTime;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Propagation;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport fi.hut.soberit.agilefant.business.BacklogBusiness;\nimport fi.hut.soberit.agilefant.business.HourEntryBusiness;\nimport fi.hut.soberit.agilefant.business.StoryBusiness;\nimport fi.hut.soberit.agilefant.business.TaskBusiness;\nimport fi.hut.soberit.agilefant.business.UserBusiness;\nimport fi.hut.soberit.agilefant.db.BacklogHourEntryDAO;\nimport fi.hut.soberit.agilefant.db.HourEntryDAO;\nimport fi.hut.soberit.agilefant.model.Backlog;\nimport fi.hut.soberit.agilefant.model.BacklogHourEntry;\nimport fi.hut.soberit.agilefant.model.HourEntry;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.StoryHourEntry;\nimport fi.hut.soberit.agilefant.model.Task;\nimport fi.hut.soberit.agilefant.model.TaskHourEntry;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.transfer.DailySpentEffort;\nimport org.joda.time.DateMidnight;\nimport org.joda.time.DateTimeZone;\n\n\n@Service(\"hourEntryBusiness\")\n@Transactional\npublic class HourEntryBusinessImpl extends GenericBusinessImpl<HourEntry>\n        implements HourEntryBusiness {\n\n    private HourEntryDAO hourEntryDAO;\n\n    @Autowired\n    private StoryBusiness storyBusiness;\n    @Autowired\n    private TaskBusiness taskBusiness;\n    @Autowired\n    private UserBusiness userBusiness;\n    @Autowired\n    private BacklogBusiness backlogBusiness;\n  \n    @Autowired\n    private BacklogHourEntryDAO backlogHourEntryDAO;\n\n    public HourEntryBusinessImpl() {\n        super(HourEntry.class);\n    }\n\n    @Autowired\n    public void setHourEntryDAO(HourEntryDAO hourEntryDAO) {\n        this.genericDAO = hourEntryDAO;\n        this.hourEntryDAO = hourEntryDAO;\n    }\n\n    @Transactional\n    public void logBacklogEffort(int backlogId, HourEntry effortEntry,\n            Set<Integer> userIds) {\n        Backlog backlog = this.backlogBusiness.retrieve(backlogId);\n        \n        Collection<User> targetUsers = this.userBusiness.retrieveMultiple(userIds);\n        \n        for(User targetUser : targetUsers) {\n            BacklogHourEntry backlogEntry = new BacklogHourEntry();\n            backlogEntry.setBacklog(backlog);\n            backlogEntry.setUser(targetUser);\n            validateAndCopyFields(backlogEntry, effortEntry);\n            this.hourEntryDAO.create(backlogEntry);\n        }\n    }\n\n    @Transactional\n    public void logStoryEffort(int storyId, HourEntry effortEntry,\n            Set<Integer> userIds) {\n        \n        Story story = this.storyBusiness.retrieve(storyId);\n        Collection<User> targetUsers = this.userBusiness.retrieveMultiple(userIds);\n        \n        for(User targetUser : targetUsers) {\n            StoryHourEntry storyEntry = new StoryHourEntry();\n            storyEntry.setStory(story);\n            storyEntry.setUser(targetUser);\n            validateAndCopyFields(storyEntry, effortEntry);\n            this.hourEntryDAO.create(storyEntry);\n        }\n    }\n\n    @Transactional\n    public void logTaskEffort(int taskId, HourEntry effortEntry,\n            Set<Integer> userIds) {\n        Task task = this.taskBusiness.retrieve(taskId);\n        Collection<User> targetUsers = this.userBusiness.retrieveMultiple(userIds);\n        \n        for (User targetUser : targetUsers) {\n            TaskHourEntry taskEntry = new TaskHourEntry();\n            taskEntry.setTask(task);\n            taskEntry.setUser(targetUser);\n            validateAndCopyFields(taskEntry, effortEntry);\n            this.hourEntryDAO.create(taskEntry);\n        }\n    }\n    \n    private void validateAndCopyFields(HourEntry target, HourEntry source) {\n        if(source.getDate() == null) {\n            throw new IllegalArgumentException(\"Invalid date\");\n        }\n        target.setDescription(source.getDescription());\n        target.setDate(source.getDate());\n        target.setMinutesSpent(source.getMinutesSpent());\n    }\n\n    @Transactional(readOnly = true)\n    public List<HourEntry> retrieveBacklogHourEntries(int backlogId, boolean limited) {\n        int limit = (limited) ? HourEntryBusiness.ENTRY_LIMIT : 0;\n        return hourEntryDAO.getBacklogHourEntries(backlogId, limit);\n    }\n    \n    @Transactional(readOnly = true)\n    public List<HourEntry> retrieveStoryHourEntries(int storyId, boolean limited) {\n        int limit = (limited) ? HourEntryBusiness.ENTRY_LIMIT : 0;\n        return hourEntryDAO.getStoryHourEntries(storyId, limit);\n    }\n\n    @Transactional(readOnly = true)\n    public List<HourEntry> retrieveTaskHourEntries(int taskId, boolean limited) {\n        int limit = (limited) ? HourEntryBusiness.ENTRY_LIMIT : 0;\n        return hourEntryDAO.getTaskHourEntries(taskId, limit);\n    }\n\n    public List<BacklogHourEntry> retrieveByParent(Backlog parent) {\n        return backlogHourEntryDAO.retrieveByBacklog(parent);\n    }\n \n    @Transactional(readOnly = true)\n    public long calculateSumByUserAndTimeInterval(User user,\n            DateTime startDate, DateTime endDate) {\n        return hourEntryDAO.calculateSumByUserAndTimeInterval(user, startDate, endDate);\n    }\n    \n    @Transactional(readOnly = true)\n    public long calculateSumByUserAndTimeInterval(int userId,\n            DateTime startDate, DateTime endDate) {\n        return hourEntryDAO.calculateSumByUserAndTimeInterval(userId, startDate, endDate);\n    }\n\n    @Transactional(propagation = Propagation.SUPPORTS)\n    public long calculateSum(Collection<? extends HourEntry> hourEntries) {\n        long effortSpent = 0;\n        for (HourEntry hourEntry : hourEntries) {\n            effortSpent += hourEntry.getMinutesSpent();\n        }\n        return effortSpent;\n    }\n    \n    @Transactional(readOnly = true)\n    public List<DailySpentEffort> getDailySpentEffortByIteration(Iteration iteration) {\n        List<HourEntry> entries = hourEntryDAO.getAllIterationHourEntries(iteration.getId());\n        \n        return this.getDailySpentEffortForHourEntries(entries, iteration.getStartDate(), iteration.getEndDate());\n    }\n    \n    @Transactional(readOnly = true)\n    public List<HourEntry> getHourEntriesForIteration(Iteration iteration) {\n        return hourEntryDAO.getAllIterationHourEntries(iteration.getId());        \n    }\n    \n    @Transactional(readOnly = true)\n    public long calculateSumOfIterationsHourEntries(Iteration iteration) {\n        return hourEntryDAO.calculateIterationHourEntriesSum(iteration.getId());\n    }\n    \n    public List<HourEntry> getEntriesByUserAndTimeInterval(int userId, DateTime startDate,\n            DateTime endDate) {\n        return this.hourEntryDAO.getHourEntriesByFilter(startDate, endDate, userId);\n    }\n    \n    private DateTime setTimeZone(DateTime dateTime, DateTimeZone zone, DateTimeZone serverTimeZone) {\n        if (zone != null) {\n            dateTime = dateTime.minusMillis(zone.getOffset(0));\n        }\n        if (serverTimeZone != null) {\n            dateTime = dateTime.plusMillis(serverTimeZone.getOffset(0));\n        }\n        return dateTime;\n    }\n    \n    public List<HourEntry> getEntriesByUserAndDay(LocalDate day, int userId, int userHourTimeZone, int userMinuteTimeZone, DateTimeZone serverTimeZone) {\n        DateTimeZone zone = DateTimeZone.forOffsetHoursMinutes(userHourTimeZone, userMinuteTimeZone);\n        DateTime start = day.toDateMidnight().toDateTime();\n        start = setTimeZone(start, zone, serverTimeZone);\n        DateTime end = start.plusDays(1).minusSeconds(1);\n        return this.hourEntryDAO.getHourEntriesByFilter(start, end, userId);\n    }\n\n    @Transactional(readOnly = true)\n    public long calculateWeekSum(LocalDate week, int userId, int userHourTimeZone, int userMinuteTimeZone, DateTimeZone serverTimeZone) {  \n        MutableDateTime tmp = new MutableDateTime(week.toDateMidnight());\n        tmp.setDayOfWeek(DateTimeConstants.MONDAY);\n        tmp.setSecondOfDay(1);\n        DateTime start = tmp.toDateTime(); \n        tmp.addDays(6);\n        tmp.setHourOfDay(23);\n        tmp.setMinuteOfHour(59);\n        tmp.setSecondOfMinute(59);\n        DateTime end = tmp.toDateTime();\n        DateTimeZone zone = DateTimeZone.forOffsetHoursMinutes(userHourTimeZone, userMinuteTimeZone);\n        start = setTimeZone(start, zone, serverTimeZone);\n        end = setTimeZone(end, zone, serverTimeZone);\n        return this.hourEntryDAO.calculateSumByUserAndTimeInterval(userId, start, end);\n    }\n    \n    @Transactional(readOnly = true)\n    public List<DailySpentEffort> getDailySpentEffortByWeek(LocalDate week, int userId, int userHourTimeZone, int userMinuteTimeZone, DateTimeZone serverTimeZone) {\n        MutableDateTime tmp = new MutableDateTime(week.toDateMidnight());\n        tmp.setDayOfWeek(DateTimeConstants.MONDAY);\n        tmp.setSecondOfDay(1);\n        DateTime start = tmp.toDateTime();\n        tmp.addDays(6);\n        tmp.setHourOfDay(23);\n        tmp.setMinuteOfHour(59);\n        tmp.setSecondOfMinute(59);\n        DateTime end = tmp.toDateTime();\n        return this.getDailySpentEffortByInterval(start, end, userId, userHourTimeZone, userMinuteTimeZone, serverTimeZone);\n    }\n    \n    /**\n     * Calculates the daily spent effort hour entries with no timezone calculations.\n     */\n    @Transactional(readOnly = true)\n    public List<DailySpentEffort> getDailySpentEffortByInterval(DateTime start,\n            DateTime end, int userId) {\n        if(start.compareTo(end) >= 0) {\n            return Collections.emptyList();\n        }\n        List<HourEntry> entries = this.hourEntryDAO.getHourEntriesByFilter(start, end, userId);\n        \n        return getDailySpentEffortForHourEntries(entries, start, end);\n    }\n    \n    /**\n     * Calculates the daily spent effort hour entries with a timezone.\n     */\n    @Transactional(readOnly = true)\n    public List<DailySpentEffort> getDailySpentEffortByInterval(DateTime start,\n            DateTime end, int userId, int userHourTimeZone, int userMinuteTimeZone, DateTimeZone serverTimeZone) {\n        DateTimeZone zone = DateTimeZone.forOffsetHoursMinutes(userHourTimeZone, userMinuteTimeZone);\n        DateTime startWithZone = setTimeZone(start, zone, serverTimeZone);\n        DateTime endWithZone = setTimeZone(end, zone, serverTimeZone);\n        Map<DateMidnight, Long> dbData = new HashMap<DateMidnight, Long>();\n        List<DailySpentEffort> dailyEffort = new ArrayList<DailySpentEffort>();\n\n        if(start.compareTo(end) >= 0) {\n            return Collections.emptyList();\n        }\n        List<HourEntry> entries = this.hourEntryDAO.getHourEntriesByFilter(startWithZone, endWithZone, userId);\n        \n        //sum efforts per day\n        for(HourEntry entry : entries) {\n            DateTime entryTime = entry.getDate().plusMillis(zone.getOffset(0));\n            if (serverTimeZone != null) {\n                entryTime = entryTime.minusMillis(serverTimeZone.getOffset(0));\n            }\n            DateMidnight md = entryTime.toDateMidnight();\n            if(!dbData.containsKey(md)) {\n                dbData.put(md, 0L);\n            }\n            dbData.put(md, dbData.get(md) + entry.getMinutesSpent());\n        }\n        MutableDateTime iteratorDate = new MutableDateTime(start.toDateMidnight());\n        //construct list that has a single entry per day\n        while(iteratorDate.compareTo(end) <= 0) {\n            DailySpentEffort effortEntry = new DailySpentEffort();\n            \n            if(dbData.containsKey(iteratorDate)) {\n                effortEntry.setSpentEffort(dbData.get(iteratorDate));\n            }\n            effortEntry.setDay(iteratorDate.toDateTime());\n            dailyEffort.add(effortEntry);\n            iteratorDate.addDays(1);\n        }\n        return dailyEffort;\n    }\n    \n    public List<DailySpentEffort> getDailySpentEffortForHourEntries(List<? extends HourEntry> entries,\n            DateTime start, DateTime end) {\n        Map<Date, Long> dbData = new HashMap<Date, Long>();\n        List<DailySpentEffort> dailyEffort = new ArrayList<DailySpentEffort>();\n\n        //sum efforts per day\n        for(HourEntry entry : entries) {\n            Date date = entry.getDate().toDateMidnight().toDate();\n            \n            if(!dbData.containsKey(date)) {\n                dbData.put(date, 0L);\n            }\n            \n            dbData.put(date, dbData.get(date) + entry.getMinutesSpent());\n        }\n        \n        MutableDateTime iteratorDate = new MutableDateTime(start.toDateMidnight());\n        \n        //construct list that has a single entry per day\n        while(iteratorDate.compareTo(end) <= 0) {\n            DailySpentEffort effortEntry = new DailySpentEffort();\n            Date currentDate = iteratorDate.toDate();\n            \n            if(dbData.containsKey(currentDate)) {\n                effortEntry.setSpentEffort(dbData.get(currentDate));\n            }\n            \n            effortEntry.setDay(iteratorDate.toDateTime());\n            dailyEffort.add(effortEntry);\n            iteratorDate.addDays(1);\n        }        \n        return dailyEffort;\n    }\n\n    public void setBacklogHourEntryDAO(BacklogHourEntryDAO backlogHourEntryDAO) {\n        this.backlogHourEntryDAO = backlogHourEntryDAO;\n    }\n\n    public void setStoryBusiness(StoryBusiness storyBusiness) {\n        this.storyBusiness = storyBusiness;\n    }\n\n    public void setUserBusiness(UserBusiness userBusiness) {\n        this.userBusiness = userBusiness;\n    }\n    \n    public void setTaskBusiness(TaskBusiness taskBusiness) {\n        this.taskBusiness = taskBusiness;\n    }\n    public void setBacklogBusiness(BacklogBusiness backlogBusiness) {\n        this.backlogBusiness = backlogBusiness;\n    }\n\n    public void deleteAll(Collection<? extends HourEntry> hourEntries) {\n        for (HourEntry hourEntry : hourEntries) {\n            hourEntryDAO.remove(hourEntry);\n        }\n    }\n    \n    public void moveToBacklog(Collection<? extends HourEntry> hourEntries, Backlog backlog) {\n        for (HourEntry hourEntry : hourEntries) {\n            BacklogHourEntry newHourEntry = new BacklogHourEntry();\n            try {\n                PropertyUtils.copyProperties(newHourEntry, hourEntry);\n                newHourEntry.setId(0);\n            } catch (Exception e) {\n                throw new RuntimeException(e);\n            }\n            hourEntryDAO.remove(hourEntry);\n            newHourEntry.setBacklog(backlog);\n            hourEntryDAO.store(newHourEntry);\n        }\n    }\n\n    public void moveToStory(Collection<? extends HourEntry> hourEntries, Story story) {\n        for (HourEntry hourEntry : hourEntries) {\n            StoryHourEntry newHourEntry = new StoryHourEntry();\n            try {\n                PropertyUtils.copyProperties(newHourEntry, hourEntry);\n                newHourEntry.setId(0);\n            } catch (Exception e) {\n                throw new RuntimeException(e);\n            }\n            hourEntryDAO.remove(hourEntry);\n            newHourEntry.setStory(story);\n            hourEntryDAO.store(newHourEntry);\n        }\n    }\n    \n    @Override\n    @Transactional(readOnly = true)\n    public long retrieveLatestHourEntryDelta(int userId) {\n        return hourEntryDAO.retrieveLatestHourEntryDelta(userId);\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\impl\\\\IterationBurndownBusinessImpl.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["IterationBurndownBusinessImpl"], "AN": ["iterationHistoryEntryBusiness", "hourEntryBusiness", "iterationBusiness", "settingBusiness", "DEFAULT_WIDTH", "DEFAULT_HEIGHT", "SMALL_WIDTH", "SMALL_HEIGHT", "CHART_BACKGROUND_COLOR", "PLOT_BACKGROUND_COLOR", "GRIDLINE_COLOR", "DATE_AXIS_LABEL", "EFFORT_AXIS_LABEL", "EFFORT_LEFT_SERIES_NO", "EFFORT_SPENT_SERIES_NO", "CURRENT_DAY_EFFORT_LEFT_SERIES_NO", "CURRENT_DAY_EFFORT_SPENT_SERIES_NO", "SCOPING_SERIES_NO", "REFERENCE_SERIES_NO", "EXPECTED_SERIES_NO", "EFFORT_LEFT_SERIES_COLOR", "EFFORT_SPENT_SERIES_COLOR", "CURRENT_DAY_EFFORT_LEFT_SERIES_COLOR", "CURRENT_DAY_EFFORT_SPENT_SERIES_COLOR", "SCOPING_SERIES_COLOR", "REFERENCE_SERIES_COLOR", "EXPECTED_SERIES_COLOR", "EFFORT_LEFT_SERIES_SHAPE", "EFFORT_LEFT_SERIES_SHAPE_VISIBLE", "EFFORT_SPENT_SERIES_SHAPE", "EFFORT_SPENT_SERIES_SHAPE_VISIBLE", "CURRENT_DAY_EFFORT_LEFT_SERIES_SHAPE", "CURRENT_DAY_EFFORT_LEFT_SERIES_SHAPE_VISIBLE", "CURRENT_DAY_EFFORT_LEFT_SERIES_SHAPE_FILLED", "CURRENT_DAY_EFFORT_SPENT_SERIES_SHAPE", "CURRENT_DAY_EFFORT_SPENT_SERIES_SHAPE_VISIBLE", "CURRENT_DAY_EFFORT_SPENT_SERIES_SHAPE_FILLED", "SMALL_BURNDOWN_STROKE", "CURRENT_DAY_SERIES_STROKE", "SCOPING_SERIES_STROKE", "EXPECTED_SERIES_STROKE", "EFFORT_LEFT_SERIES_NAME", "EFFORT_SPENT_SERIES_NAME", "REFERENCE_SERIES_NAME", "SCOPING_SERIES_NAME", "CURRENT_DAY_EFFORT_LEFT_SERIES_NAME", "CURRENT_DAY_EFFORT_SPENT_SERIES_NAME", "EXPECTED_SERIES_NAME", "tickUnits", "timeDifferenceMinutes"], "SCS_VariableDeclarator": ["iterationHistoryEntryBusiness", "hourEntryBusiness", "iterationBusiness", "settingBusiness", "DEFAULT_WIDTH", "DEFAULT_HEIGHT", "SMALL_WIDTH", "SMALL_HEIGHT", "CHART_BACKGROUND_COLOR", "PLOT_BACKGROUND_COLOR", "GRIDLINE_COLOR", "DATE_AXIS_LABEL", "EFFORT_AXIS_LABEL", "EFFORT_LEFT_SERIES_NO", "EFFORT_SPENT_SERIES_NO", "CURRENT_DAY_EFFORT_LEFT_SERIES_NO", "CURRENT_DAY_EFFORT_SPENT_SERIES_NO", "SCOPING_SERIES_NO", "REFERENCE_SERIES_NO", "EXPECTED_SERIES_NO", "EFFORT_LEFT_SERIES_COLOR", "EFFORT_SPENT_SERIES_COLOR", "CURRENT_DAY_EFFORT_LEFT_SERIES_COLOR", "CURRENT_DAY_EFFORT_SPENT_SERIES_COLOR", "SCOPING_SERIES_COLOR", "REFERENCE_SERIES_COLOR", "EXPECTED_SERIES_COLOR", "EFFORT_LEFT_SERIES_SHAPE", "EFFORT_LEFT_SERIES_SHAPE_VISIBLE", "EFFORT_SPENT_SERIES_SHAPE", "EFFORT_SPENT_SERIES_SHAPE_VISIBLE", "CURRENT_DAY_EFFORT_LEFT_SERIES_SHAPE", "CURRENT_DAY_EFFORT_LEFT_SERIES_SHAPE_VISIBLE", "CURRENT_DAY_EFFORT_LEFT_SERIES_SHAPE_FILLED", "CURRENT_DAY_EFFORT_SPENT_SERIES_SHAPE", "CURRENT_DAY_EFFORT_SPENT_SERIES_SHAPE_VISIBLE", "CURRENT_DAY_EFFORT_SPENT_SERIES_SHAPE_FILLED", "SMALL_BURNDOWN_STROKE", "CURRENT_DAY_SERIES_STROKE", "SCOPING_SERIES_STROKE", "EXPECTED_SERIES_STROKE", "EFFORT_LEFT_SERIES_NAME", "EFFORT_SPENT_SERIES_NAME", "REFERENCE_SERIES_NAME", "SCOPING_SERIES_NAME", "CURRENT_DAY_EFFORT_LEFT_SERIES_NAME", "CURRENT_DAY_EFFORT_SPENT_SERIES_NAME", "EXPECTED_SERIES_NAME", "tickUnits", "timeDifferenceMinutes", "units", "out", "cal", "localTimeZone", "rawOffset", "burndown", "burndown", "chart", "plot", "renderer", "ins", "dataset", "rend", "plot", "axis", "valueAxis", "dataset", "spentMax", "leftMax", "current", "chartDataset", "iterationEntries", "hourEntries", "yesterday", "today", "yesterdayEntry", "todayEntry", "iterationStartDate", "iterationEndDate", "predictedVelocity", "currentDate", "foundEntry", "entry", "returnable", "minorUnits", "ts", "date", "originalEstimate", "amountOfWorkDays", "decrement", "currentval", "today", "startValue", "velocity", "startDate", "endDate", "startValue", "endValue", "effortSpentSeries", "tomorrow", "spentEffortList", "cumulativeSum", "spentEffort", "dateItem", "dateTime", "effortSpentSeries", "spentEffortList", "today", "cumulativeSum", "spentEffort", "dateItem", "second", "value", "item", "burndownSeries", "iter", "todayEntry", "yesterdayEntry", "scopedEntries", "item", "timestamp", "period", "longValue", "scopedValue", "nullItem", "scopedItem", "firstItemPeriod", "secondItemPeriod", "nullItemPeriod", "firstValue", "secondValueAsLong", "secondValue", "firstItem", "secondItem", "nullItem", "scopingSeries", "iter", "todayEntry", "yesterdayEntry", "scopeItems", "timeSeries"], "SCS_MemberReference": ["white", "white", "EFFORT_LEFT_SERIES_COLOR", "EFFORT_SPENT_SERIES_COLOR", "EFFORT_LEFT_SERIES_COLOR", "CAP_BUTT", "JOIN_BEVEL", "CAP_BUTT", "JOIN_BEVEL", "CAP_BUTT", "JOIN_BEVEL", "DAY", "DAY", "DAY", "DAY", "DAY", "DAY", "MONTH", "MONTH", "MONTH", "YEAR", "YEAR", "YEAR", "YEAR", "YEAR", "units", "iterationHistoryEntryBusiness", "iterationHistoryEntryBusiness", "hourEntryBusiness", "hourEntryBusiness", "iterationBusiness", "iterationBusiness", "chart", "DEFAULT_WIDTH", "DEFAULT_HEIGHT", "out", "chart", "width", "height", "iteration", "timeZoneOffset", "iteration", "timeZoneOffset", "SMALL_WIDTH", "SMALL_HEIGHT", "iteration", "timeZoneOffset", "width", "height", "iteration", "timeZoneOffset", "timeZoneOffset", "timeDifferenceMinutes", "rawOffset", "timeDifferenceMinutes", "rawOffset", "DATE_AXIS_LABEL", "EFFORT_AXIS_LABEL", "iteration", "burndown", "timeDifferenceMinutes", "timeDifferenceMinutes", "burndown", "burndown", "iteration", "timeZoneOffset", "burndown", "burndownChart", "CHART_BACKGROUND_COLOR", "PLOT_BACKGROUND_COLOR", "EFFORT_LEFT_SERIES_NO", "EFFORT_LEFT_SERIES_COLOR", "EFFORT_SPENT_SERIES_NO", "EFFORT_SPENT_SERIES_COLOR", "CURRENT_DAY_EFFORT_LEFT_SERIES_NO", "EFFORT_LEFT_SERIES_COLOR", "CURRENT_DAY_EFFORT_SPENT_SERIES_NO", "EFFORT_SPENT_SERIES_COLOR", "SCOPING_SERIES_NO", "EFFORT_LEFT_SERIES_COLOR", "REFERENCE_SERIES_NO", "REFERENCE_SERIES_COLOR", "EFFORT_LEFT_SERIES_NO", "SMALL_BURNDOWN_STROKE", "EFFORT_SPENT_SERIES_NO", "SMALL_BURNDOWN_STROKE", "CURRENT_DAY_EFFORT_LEFT_SERIES_NO", "SMALL_BURNDOWN_STROKE", "CURRENT_DAY_EFFORT_SPENT_SERIES_NO", "SMALL_BURNDOWN_STROKE", "SCOPING_SERIES_NO", "SMALL_BURNDOWN_STROKE", "REFERENCE_SERIES_NO", "SMALL_BURNDOWN_STROKE", "EFFORT_LEFT_SERIES_NO", "EFFORT_SPENT_SERIES_NO", "CURRENT_DAY_EFFORT_LEFT_SERIES_NO", "CURRENT_DAY_EFFORT_SPENT_SERIES_NO", "SCOPING_SERIES_NO", "REFERENCE_SERIES_NO", "ins", "EXPECTED_SERIES_NO", "EXPECTED_SERIES_NO", "chart", "CHART_BACKGROUND_COLOR", "PLOT_BACKGROUND_COLOR", "chart", "EFFORT_LEFT_SERIES_NO", "EFFORT_LEFT_SERIES_COLOR", "EFFORT_LEFT_SERIES_NO", "EFFORT_LEFT_SERIES_SHAPE", "EFFORT_LEFT_SERIES_NO", "EFFORT_LEFT_SERIES_SHAPE_VISIBLE", "EFFORT_SPENT_SERIES_NO", "EFFORT_SPENT_SERIES_COLOR", "EFFORT_SPENT_SERIES_NO", "EFFORT_SPENT_SERIES_SHAPE", "EFFORT_SPENT_SERIES_NO", "EFFORT_SPENT_SERIES_SHAPE_VISIBLE", "REFERENCE_SERIES_NO", "REFERENCE_SERIES_COLOR", "CURRENT_DAY_EFFORT_LEFT_SERIES_NO", "CURRENT_DAY_EFFORT_LEFT_SERIES_COLOR", "CURRENT_DAY_EFFORT_LEFT_SERIES_NO", "CURRENT_DAY_SERIES_STROKE", "CURRENT_DAY_EFFORT_LEFT_SERIES_NO", "CURRENT_DAY_EFFORT_LEFT_SERIES_SHAPE", "CURRENT_DAY_EFFORT_LEFT_SERIES_NO", "CURRENT_DAY_EFFORT_LEFT_SERIES_SHAPE_VISIBLE", "CURRENT_DAY_EFFORT_LEFT_SERIES_NO", "CURRENT_DAY_EFFORT_LEFT_SERIES_SHAPE_FILLED", "CURRENT_DAY_EFFORT_SPENT_SERIES_NO", "CURRENT_DAY_EFFORT_SPENT_SERIES_COLOR", "CURRENT_DAY_EFFORT_SPENT_SERIES_NO", "CURRENT_DAY_SERIES_STROKE", "CURRENT_DAY_EFFORT_SPENT_SERIES_NO", "CURRENT_DAY_EFFORT_SPENT_SERIES_SHAPE", "CURRENT_DAY_EFFORT_SPENT_SERIES_NO", "CURRENT_DAY_EFFORT_SPENT_SERIES_SHAPE_VISIBLE", "CURRENT_DAY_EFFORT_SPENT_SERIES_NO", "CURRENT_DAY_EFFORT_SPENT_SERIES_SHAPE_FILLED", "SCOPING_SERIES_NO", "SCOPING_SERIES_COLOR", "SCOPING_SERIES_NO", "SCOPING_SERIES_STROKE", "EXPECTED_SERIES_NO", "EXPECTED_SERIES_COLOR", "EXPECTED_SERIES_NO", "EXPECTED_SERIES_STROKE", "EFFORT_SPENT_SERIES_NO", "CURRENT_DAY_EFFORT_SPENT_SERIES_NO", "tickUnits", "CURRENT_DAY_EFFORT_SPENT_SERIES_NO", "spentMax", "CURRENT_DAY_EFFORT_SPENT_SERIES_NO", "spentMax", "spentMax", "CURRENT_DAY_EFFORT_LEFT_SERIES_NO", "leftMax", "CURRENT_DAY_EFFORT_LEFT_SERIES_NO", "leftMax", "leftMax", "current", "current", "current", "current", "current", "current", "current", "spentMax", "leftMax", "GRIDLINE_COLOR", "GRIDLINE_COLOR", "iteration", "iteration", "iterationEntries", "yesterday", "iterationEntries", "today", "iterationEntries", "hourEntries", "iterationStartDate", "iterationEndDate", "yesterdayEntry", "todayEntry", "hourEntries", "iterationStartDate", "iterationEntries", "iterationStartDate", "iterationEndDate", "yesterdayEntry", "todayEntry", "predictedVelocity", "predictedVelocity", "chartDataset", "iterationEndDate", "currentDate", "entries", "date", "entry", "date", "foundEntry", "entry", "returnable", "iteration", "minorUnits", "minorUnits", "REFERENCE_SERIES_NAME", "startDate", "endDate", "originalEstimateSum", "REFERENCE_SERIES_NAME", "timeDifferenceMinutes", "originalEstimateSum", "timeDifferenceMinutes", "seriesKey", "startDate", "timeDifferenceMinutes", "endDate", "timeDifferenceMinutes", "oeSum", "originalEstimate", "date", "startDate", "SATURDAY", "SUNDAY", "amountOfWorkDays", "originalEstimate", "amountOfWorkDays", "oeSum", "date", "startDate", "endDate", "SATURDAY", "SUNDAY", "currentval", "decrement", "currentval", "ts", "yesterdayEntry", "todayEntry", "iterationStart", "iterationEnd", "yesterdayEntry", "today", "iterationEnd", "today", "startDate", "startValue", "velocity", "endDate", "endDate", "endDate", "EXPECTED_SERIES_NAME", "timeDifferenceMinutes", "startValue", "timeDifferenceMinutes", "ZERO", "yesterdayEntry", "todayEntry", "CURRENT_DAY_EFFORT_LEFT_SERIES_NAME", "timeDifferenceMinutes", "startValue", "timeDifferenceMinutes", "endValue", "CURRENT_DAY_EFFORT_SPENT_SERIES_NAME", "hourEntries", "startDate", "tomorrow", "spentEffortList", "spentEffort", "cumulativeSum", "cumulativeSum", "dateItem", "effortSpentSeries", "EFFORT_SPENT_SERIES_NAME", "endDate", "spentEffortList", "hourEntries", "spentEffortList", "hourEntries", "spentEffortList", "spentEffort", "cumulativeSum", "cumulativeSum", "dateItem", "effortSpentSeries", "timeDifferenceMinutes", "value", "second", "value", "item", "EFFORT_LEFT_SERIES_NAME", "endDate", "iter", "iterationHistoryEntries", "iter", "iterationHistoryEntries", "todayEntry", "yesterdayEntry", "todayEntry", "todayEntry", "burndownSeries", "timeDifferenceMinutes", "item", "timeDifferenceMinutes", "longValue", "period", "scopedValue", "nullItem", "scopedItem", "timeDifferenceMinutes", "timeDifferenceMinutes", "timeDifferenceMinutes", "secondValueAsLong", "firstItemPeriod", "firstValue", "secondItemPeriod", "secondValue", "nullItemPeriod", "firstItem", "secondItem", "nullItem", "SCOPING_SERIES_NAME", "iter", "iterationHistoryEntries", "iter", "iterationHistoryEntries", "todayEntry", "yesterdayEntry", "todayEntry", "scopingSeries", "seriesKey", "startInstant", "startValue", "timeSeries", "endInstant", "endValue", "timeSeries", "timeSeries", "value", "settingBusiness", "settingBusiness"], "SCS_ClassReference": ["", "units", "units", "units", "units", "units", "units", "units", "units", "units", "units", "units", "units", "units", "units", "", "ChartUtilities", "out", "e", "", "", "", "", "", "", "", "Calendar", "cal", "localTimeZone", "timeZoneOffset", "ChartFactory", "iteration", "", "", "iteration", null, null, "iteration", "", "", "", "chart", "plot", "chart", "plot", "renderer", "renderer", "renderer", "renderer", "renderer", "renderer", "renderer", "renderer", "renderer", "renderer", "renderer", "renderer", "renderer", "renderer", "renderer", "renderer", "renderer", "renderer", "plot", "plot", "plot", null, "plot", null, "plot", null, "plot", null, "chart", "plot", "plot", "dataset", "dataset", "chart", "chart", "chart", "chart", null, "", "chart", null, "rend", "rend", "rend", "rend", "rend", "rend", "rend", "rend", "rend", "rend", "rend", "rend", "rend", "rend", "rend", "rend", "rend", "rend", "rend", "rend", "rend", "settingBusiness", "rend", "rend", "chart", "plot", "axis", "end", null, null, "axis", "start", null, "axis", "axis", "plot", "plot", "plot", "dataset", null, "settingBusiness", "dataset", null, null, "valueAxis", "System.out", "e", "dataset", null, "dataset", null, null, "valueAxis", "System.out", "e", "valueAxis", null, "Double", "valueAxis", "Math", "Math", "plot", "plot", "iterationHistoryEntryBusiness", "hourEntryBusiness", "settingBusiness", "hourEntries", null, "", "", "iteration", "iteration", "chartDataset", "", "iteration", "", "iteration", "chartDataset", "", "chartDataset", "", "chartDataset", "", "chartDataset", "", "iterationStartDate", "iterationEndDate", "chartDataset", "", "todayEntry", "", "iterationStartDate", "iterationEndDate", "chartDataset", "currentDate", "iterationEndDate", "entry", null, "entry", null, "returnable", "date", null, "returnable", "foundEntry", "returnable", "foundEntry", "iterationHistoryEntryBusiness", "yesterdayEntry", "todayEntry", "settingBusiness", null, null, "startDate", "endDate", null, "startDate", null, null, "endDate", null, null, "ExactEstimateUtils", "ts", "startDate", "date", "endDate", "date", "date", null, "date", null, "ExactEstimateUtils", "date", "date", "date", null, "date", null, "ts", "date", null, null, "ts", "endDate", null, "", "iterationBusiness", "iterationEnd", "iterationHistoryEntryBusiness", "endDate", "startDate", null, "today", null, null, null, "endDate", null, null, null, null, "todayEntry", null, "todayEntry", null, null, null, null, "todayEntry", null, null, null, null, null, null, null, "hourEntryBusiness", "", "dateItem", null, "dateItem", "dateItem", null, "dateTime", "tomorrow", "dateTime", "tomorrow", null, "effortSpentSeries", "today", "hourEntryBusiness", "startDate", "today", null, "hourEntryBusiness", "startDate", "endDate", "", "dateItem", null, "dateItem", "effortSpentSeries", "entry", null, null, null, null, "entry", "ExactEstimateUtils", "entry", "startDate", "iter", "iter", "", "", "iter", "", "", "burndownSeries", "scopedEntries", "burndownSeries", "scopedEntries", "burndownSeries", "", "entry", null, null, null, null, null, "ExactEstimateUtils", "entry", "todayEntry", null, null, null, null, null, "timestamp", "yesterdayEntry", "todayEntry", "timestamp", null, "ExactEstimateUtils", "Pair", "todayEntry", null, null, null, null, "todayEntry", null, null, null, null, null, null, "todayEntry", null, null, null, null, null, null, "yesterdayEntry", "yesterdayEntry", "todayEntry", "ExactEstimateUtils", "ExactEstimateUtils", "Arrays", "entry", "startDate", "iter", "endDate", "iter", "", "", "iter", "", "", "scopingSeries", "scopeItems", "scopingSeries", "scopeItems", "scopingSeries", "scopeItems", "", "", "timeSeries", "instant", null, null, "ExactEstimateUtils"], "SCS_MethodInvocation": ["getTickUnits", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "getChartImageByteArray", "writeChartAsPNG", "toByteArray", "printStackTrace", "getChartImageByteArray", "constructChart", "getChartImageByteArray", "constructSmallChart", "getChartImageByteArray", "constructChart", "constructChart", "getInstance", "getTimeZone", "getRawOffset", "intValue", "createTimeSeriesChart", "getName", "getDataset", "formatChartAxes", "getStartDate", "minusMinutes", "minusMinutes", "getEndDate", "formatChartStyle", "constructChart", "transformToSmallChart", "getXYPlot", "getRenderer", "setBackgroundPaint", "setBackgroundPaint", "setSeriesPaint", "setSeriesPaint", "setSeriesPaint", "setSeriesPaint", "setSeriesPaint", "setSeriesPaint", "setSeriesStroke", "setSeriesStroke", "setSeriesStroke", "setSeriesStroke", "setSeriesStroke", "setSeriesStroke", "setSeriesShapesVisible", "setSeriesShapesVisible", "setSeriesShapesVisible", "setSeriesShapesVisible", "setSeriesShapesVisible", "setSeriesShapesVisible", "setDomainGridlinesVisible", "setRangeGridlinesVisible", "getDomainAxis", "setVisible", "getRangeAxis", "setVisible", "getDomainAxis", "setLabel", "getRangeAxis", "setLabel", "setPadding", "getDataset", "getDataset", "getSeriesCount", "removeSeries", "removeLegend", "setTitle", "setBackgroundPaint", "getPlot", "setBackgroundPaint", "setSeriesStyles", "getXYPlot", "getRenderer", "setSeriesPaint", "setSeriesShape", "setSeriesShapesVisible", "setSeriesPaint", "setSeriesShape", "setSeriesShapesVisible", "setSeriesPaint", "setSeriesPaint", "setSeriesStroke", "setSeriesShape", "setSeriesShapesVisible", "setSeriesShapesFilled", "setSeriesPaint", "setSeriesStroke", "setSeriesShape", "setSeriesShapesVisible", "setSeriesShapesFilled", "setSeriesPaint", "setSeriesStroke", "setSeriesPaint", "setSeriesStroke", "isHourReportingEnabled", "setSeriesVisible", "setSeriesVisible", "getXYPlot", "getDomainAxis", "setMaximumDate", "plusDays", "toDateMidnight", "toDate", "setMinimumDate", "toDateMidnight", "toDate", "setDateFormatOverride", "setStandardTickUnits", "getRangeAxis", "getDataset", "getDataset", "getSeries", "isEmpty", "isHourReportingEnabled", "getSeries", "getValue", "doubleValue", "getUpperMargin", "println", "getMessage", "getSeries", "isEmpty", "getSeries", "getValue", "doubleValue", "getUpperMargin", "println", "getMessage", "getRange", "getUpperBound", "isNaN", "setRange", "max", "max", "setDomainGridlinePaint", "setRangeGridlinePaint", "getHistoryEntriesForIteration", "getHourEntriesForIteration", "isHourReportingEnabled", "clear", "minusDays", "getHistoryEntryForDate", "getHistoryEntryForDate", "getStartDate", "getEndDate", "addSeries", "getBurndownTimeSeries", "getStartDate", "determineEndDate", "getEndDate", "addSeries", "getEffortSpentTimeSeries", "addSeries", "getCurrentDayEffortLeftSeries", "addSeries", "getCurrentDaySpentEffortSeries", "addSeries", "getScopingTimeSeries", "toLocalDate", "toLocalDate", "addSeries", "getReferenceVelocityTimeSeries", "getOriginalEstimateSum", "getPredictedVelocityTimeSeries", "toLocalDate", "toLocalDate", "addSeries", "compareTo", "plusDays", "getTimestamp", "equals", "getTimestamp", "compareTo", "setTimestamp", "toDateMidnight", "toLocalDate", "setEffortLeftSum", "getEffortLeftSum", "setOriginalEstimateSum", "getOriginalEstimateSum", "getHistoryEntriesForIteration", "getEffortLeftSum", "getDeltaOriginalEstimate", "isWeekendsInBurndown", "getReferenceVelocityWithWeekends", "getSeriesByStartAndEndPoints", "minusMinutes", "minusMinutes", "plusDays", "minusMinutes", "toDateMidnight", "toDateTime", "minusMinutes", "toDateMidnight", "toDateTime", "extractMajorUnits", "add", "toDate", "isBefore", "plusDays", "addDays", "dayOfWeek", "get", "dayOfWeek", "get", "extractMajorUnits", "isBefore", "addDays", "dayOfWeek", "get", "dayOfWeek", "get", "add", "toDateTime", "plusDays", "toDate", "add", "plusDays", "toDate", "getTodaysStartValueWithScoping", "calculateDailyVelocity", "isBefore", "calculateExpectedEffortDoneDate", "plusDays", "isEqual", "getSeriesByStartAndEndPoints", "toDateTimeAtCurrentTime", "minusMinutes", "toLocalDate", "toDateTimeAtStartOfDay", "toDateTimeAtCurrentTime", "minusMinutes", "toLocalDate", "toDateTimeAtStartOfDay", "getTodaysStartValueWithScoping", "getEffortLeftSum", "getSeriesByStartAndEndPoints", "getTimestamp", "toDateTimeAtCurrentTime", "minusMinutes", "toDateMidnight", "toDateTime", "getTimestamp", "toDateTimeAtCurrentTime", "minusMinutes", "toDateMidnight", "toDateTime", "plusDays", "plusDays", "toDateTime", "getDailySpentEffortForHourEntries", "getEffortSpentDataItemForDay", "getValue", "doubleValue", "setValue", "getPeriod", "getStart", "equals", "toDateMidnight", "equals", "minusDays", "toDateMidnight", "add", "isBefore", "getDailySpentEffortForHourEntries", "minusDays", "minusDays", "toDateTime", "getDailySpentEffortForHourEntries", "minusDays", "plusDays", "getEffortSpentDataItemForDay", "getValue", "doubleValue", "setValue", "add", "getDay", "minusMinutes", "toDateMidnight", "plusDays", "toDate", "getSpentEffort", "extractMajorUnits", "getSpentEffort", "minusDays", "compareTo", "plusDays", "getHistoryEntryForDate", "getHistoryEntryForDate", "minusDays", "isScopingDone", "getBurndownScopedDataItemForDay", "add", "getFirst", "add", "getSecond", "add", "getBurndownDataItemForDay", "getTimestamp", "toDateTimeAtCurrentTime", "minusMinutes", "toDateMidnight", "plusDays", "toDate", "extractMajorUnits", "getEffortLeftSum", "getTimestamp", "toDateTimeAtCurrentTime", "minusMinutes", "toDateMidnight", "toDateTime", "plusSeconds", "toDate", "getEffortLeftSum", "getDeltaOriginalEstimate", "minusSeconds", "toDate", "extractMajorUnits", "create", "getTimestamp", "toDateTimeAtCurrentTime", "minusMinutes", "toDateMidnight", "toDate", "getTimestamp", "toDateTimeAtCurrentTime", "minusMinutes", "toDateMidnight", "toDateTime", "plusSeconds", "toDate", "getTimestamp", "toDateTimeAtCurrentTime", "minusMinutes", "toDateMidnight", "toDateTime", "plusSeconds", "toDate", "getEffortLeftSum", "getEffortLeftSum", "getDeltaOriginalEstimate", "extractMajorUnits", "extractMajorUnits", "asList", "getDeltaOriginalEstimate", "minusDays", "compareTo", "plusDays", "plusDays", "getHistoryEntryForDate", "getHistoryEntryForDate", "minusDays", "isScopingDone", "getScopeSeriesDataItems", "add", "get", "add", "get", "add", "get", "addTimeSeriesItem", "addTimeSeriesItem", "addOrUpdate", "toDateMidnight", "toDateTime", "toDate", "extractMajorUnits"], "MN": ["getTickUnits", "setIterationHistoryEntryBusiness", "setHourEntryBusiness", "setIterationBusiness", "getChartImageByteArray", "getChartImageByteArray", "getIterationBurndown", "getSmallIterationBurndown", "getCustomIterationBurndown", "constructChart", "constructChart", "constructSmallChart", "transformToSmallChart", "formatChartStyle", "setSeriesStyles", "formatChartAxes", "getDataset", "determineEndDate", "getHistoryEntryForDate", "getIterationHistoryEntries", "getTodaysStartValueWithScoping", "getReferenceVelocityTimeSeries", "getReferenceVelocityWithWeekends", "getPredictedVelocityTimeSeries", "getCurrentDayEffortLeftSeries", "getCurrentDaySpentEffortSeries", "getEffortSpentTimeSeries", "getEffortSpentDataItemForDay", "getBurndownTimeSeries", "getBurndownDataItemForDay", "getBurndownScopedDataItemForDay", "getScopeSeriesDataItems", "isScopingDone", "getScopingTimeSeries", "getSeriesByStartAndEndPoints", "addTimeSeriesItem", "setSettingBusiness"], "PN": ["iterationHistoryEntryBusiness", "hourEntryBusiness", "iterationBusiness", "chart", "chart", "width", "height", "iteration", "timeZoneOffset", "iteration", "timeZoneOffset", "iteration", "width", "height", "timeZoneOffset", "iteration", "drawLegend", "timeZoneOffset", "iteration", "timeZoneOffset", "iteration", "timeZoneOffset", "burndownChart", "chart", "chart", "chart", "start", "end", "iteration", "iterationEndDate", "entries", "date", "iteration", "yesterdayEntry", "todayEntry", "startDate", "endDate", "originalEstimateSum", "seriesKey", "startDate", "endDate", "oeSum", "iterationStart", "iterationEnd", "yesterdayEntry", "todayEntry", "yesterdayEntry", "todayEntry", "hourEntries", "startDate", "hourEntries", "startDate", "endDate", "entry", "iterationHistoryEntries", "startDate", "endDate", "entry", "yesterdayEntry", "todayEntry", "yesterdayEntry", "todayEntry", "entry", "iterationHistoryEntries", "startDate", "endDate", "seriesKey", "startInstant", "startValue", "endInstant", "endValue", "instant", "value", "timeSeries", "settingBusiness"], "SCS_VariableDeclaration": ["TickUnits", "ByteArrayOutputStream", "Calendar", "TimeZone", "int", "JFreeChart", "JFreeChart", "JFreeChart", "XYPlot", "XYLineAndShapeRenderer", "RectangleInsets", "TimeSeriesCollection", "XYLineAndShapeRenderer", "XYPlot", "DateAxis", "ValueAxis", "TimeSeriesCollection", "double", "double", "TimeSeriesCollection", "List", "List", "LocalDate", "LocalDate", "IterationHistoryEntry", "IterationHistoryEntry", "DateTime", "DateTime", "TimeSeries", "LocalDate", "IterationHistoryEntry", "IterationHistoryEntry", "IterationHistoryEntry", "long", "TimeSeries", "MutableDateTime", "double", "int", "double", "double", "LocalDate", "ExactEstimate", "ExactEstimate", "LocalDate", "LocalDate", "ExactEstimate", "ExactEstimate", "TimeSeries", "DateTime", "List", "double", "DailySpentEffort", "TimeSeriesDataItem", "DateMidnight", "TimeSeries", "List", "DateMidnight", "double", "DailySpentEffort", "TimeSeriesDataItem", "Second", "double", "TimeSeriesDataItem", "TimeSeries", "LocalDate", "IterationHistoryEntry", "IterationHistoryEntry", "Pair", "TimeSeriesDataItem", "DateTime", "Second", "long", "ExactEstimate", "TimeSeriesDataItem", "TimeSeriesDataItem", "Second", "Second", "Second", "ExactEstimate", "long", "ExactEstimate", "TimeSeriesDataItem", "TimeSeriesDataItem", "TimeSeriesDataItem", "TimeSeries", "LocalDate", "IterationHistoryEntry", "IterationHistoryEntry", "List", "TimeSeries"], "CO": ["/**\n * A business class for calculating the burndown for iterations.\n * <p>\n * All methods are marked initially as read-only transactions. Override with\n * <code>@Transactional</code>.\n * \n * <b>Note</b>: the date handling in burndown chart calculations Effort left sum\n * for a day is drawn at next midnight. I.e. The effort left sum of 4.6. is\n * drawn in the burndown at 5.6. 00.00.\n * \n * Scoping done, i.e. changes to original estimate, are drawn at the beginning\n * of each day. I.e. The scoping done on 4.6. is drawn in the burndown at 4.6.\n * 00.00.\n * \n * @author rjokelai, jsorvett\n * \n */", "/* Chart sizes */", "/* Chart backgrounds */", "/* Axis titles */", "/* Series numbers */", "/* Series colors */", "/* Series shape */", "/* Series stroke */", "/* Series names */", "/**\n     * Generates a byte array (a png image file) from a JFreeChart object\n     * \n     * @param chart\n     *            A chart object from which the image is created\n     * @return Byte array representing a png image file\n     */", "/**\n     * Generates a byte array (a png image file) from a JFreeChart object\n     * \n     * @param chart\n     *            A chart object from which the image is created\n     * @param width\n     *            Width of the created image\n     * @param height\n     *            Height of the created image\n     * @return Byte array representing a png image file\n     */", "/** {@inheritDoc} */", "//get server timezone", "//server timezone offset in minutes", "//get offset difference in minutes", "/**\n     * Trims and transforms a big burndown chart to a small one.\n     */", "// HORROR!", "// Will break horribly if some series is missing because the indexes", "// cannot be trusted!!", "// The indexes are defined as constants but the indexes come", "// directly", "// from the order in which the series are added", "// If one series is missing, EXPECTED_SERIES_NO = 6 but the index", "// for expected series is 5", "// (and it's even possible that it doesn't exist!)", "/**\n     * Sets the chart's and plot's background colors.\n     */", "// if the hourReporting was disabled, the effort spent line will be invisible.", "/**\n     * Sets the correct start and end dates and date format.\n     */", "// There seems to be a bug in JFreeChart value axis scaling.", "// The current day spent effort line is drawn outside the graph if it is the highest line on the graph", "// Workaround: Manual scaling", "// setRange(0, 0) will cause endless loop, so set 1 hr", "/**\n     * Assembles all the needed <code>TimeSeries</code>.\n     */", "// Clear all hour entries if hour reporting is disabled so we don't mess up with the y-axis scaling", "// It is more simple to hide the spent effort line than remove the series from the graph as it would affect the series indexes", "// (see more comments on that in transformToSmallChart below HORROR comment)", "/**\n     * Constructs the <code>TimeSeries</code> for the reference velocity.\n     * <p>\n     * Start point is at (startDate, originalEstimateSum). End point is at\n     * (endDate + 1, 0.0)\n     * @param timeDifferenceHours \n     */", "// Get the amount of work days", "/**\n     * Get the <code>TimeSeries</code> for drawing the current day line.\n     * @param timeDifferenceHours \n     */", "/**\n     * Get the <code>TimeSeries</code> for drawing the current day line.\n     * @param timeDifferenceHours \n     */", "// Add only values for tomorrow and today", "/**\n     * Creates a TimeSeries of effort spent for a given list of HourEntries\n     * \n     * @param hourEntries\n     * @param startDate\n     * @param endDate\n     * @return\n     */", "/**\n     * Gets the history entry for each day and transforms it to a\n     * <code>JFreeChart</code> entry.\n     * @param timeDifferenceHours \n     */", "// Second item is places 2 seconds after the first", "// Resulting in a almost vertical line in the graph", "// Null value is added to break the line"], "CODE": "package fi.hut.soberit.agilefant.business.impl;\n\nimport java.awt.BasicStroke;\nimport java.awt.Color;\nimport java.awt.Rectangle;\nimport java.awt.Shape;\nimport java.awt.Stroke;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Calendar;\nimport java.util.List;\nimport java.util.TimeZone;\n\nimport org.jfree.chart.ChartFactory;\nimport org.jfree.chart.ChartUtilities;\nimport org.jfree.chart.JFreeChart;\nimport org.jfree.chart.axis.DateAxis;\nimport org.jfree.chart.axis.DateTickUnit;\nimport org.jfree.chart.axis.DateTickUnitType;\nimport org.jfree.chart.axis.TickUnits;\nimport org.jfree.chart.axis.ValueAxis;\nimport org.jfree.chart.plot.XYPlot;\nimport org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;\nimport org.jfree.data.time.Second;\nimport org.jfree.data.time.TimeSeries;\nimport org.jfree.data.time.TimeSeriesCollection;\nimport org.jfree.data.time.TimeSeriesDataItem;\nimport org.jfree.ui.RectangleInsets;\nimport org.joda.time.DateMidnight;\nimport org.joda.time.DateTime;\nimport org.joda.time.DateTimeConstants;\nimport org.joda.time.LocalDate;\nimport org.joda.time.MutableDateTime;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport fi.hut.soberit.agilefant.business.HourEntryBusiness;\nimport fi.hut.soberit.agilefant.business.IterationBurndownBusiness;\nimport fi.hut.soberit.agilefant.business.IterationBusiness;\nimport fi.hut.soberit.agilefant.business.IterationHistoryEntryBusiness;\nimport fi.hut.soberit.agilefant.business.SettingBusiness;\nimport fi.hut.soberit.agilefant.model.ExactEstimate;\nimport fi.hut.soberit.agilefant.model.HourEntry;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.IterationHistoryEntry;\nimport fi.hut.soberit.agilefant.transfer.DailySpentEffort;\nimport fi.hut.soberit.agilefant.util.ExactEstimateUtils;\nimport fi.hut.soberit.agilefant.util.Pair;\n\n/**\n * A business class for calculating the burndown for iterations.\n * <p>\n * All methods are marked initially as read-only transactions. Override with\n * <code>@Transactional</code>.\n * \n * <b>Note</b>: the date handling in burndown chart calculations Effort left sum\n * for a day is drawn at next midnight. I.e. The effort left sum of 4.6. is\n * drawn in the burndown at 5.6. 00.00.\n * \n * Scoping done, i.e. changes to original estimate, are drawn at the beginning\n * of each day. I.e. The scoping done on 4.6. is drawn in the burndown at 4.6.\n * 00.00.\n * \n * @author rjokelai, jsorvett\n * \n */\n@Service(\"iterationBurndownBusiness\")\n@Transactional(readOnly = true)\npublic class IterationBurndownBusinessImpl implements IterationBurndownBusiness {\n\n    private IterationHistoryEntryBusiness iterationHistoryEntryBusiness;\n    \n    @Autowired\n    private HourEntryBusiness hourEntryBusiness;\n\n    @Autowired\n    private IterationBusiness iterationBusiness;\n    \n    @Autowired\n    private SettingBusiness settingBusiness;\n\n    /* Chart sizes */\n    protected static final int DEFAULT_WIDTH = 780;\n    protected static final int DEFAULT_HEIGHT = 600;\n    protected static final int SMALL_WIDTH = 110;\n    protected static final int SMALL_HEIGHT = 85;\n\n    /* Chart backgrounds */\n    protected static final Color CHART_BACKGROUND_COLOR = Color.white;\n    protected static final Color PLOT_BACKGROUND_COLOR = Color.white;\n    protected static final Color GRIDLINE_COLOR = new Color(0xcc, 0xcc, 0xcc);\n\n    /* Axis titles */\n    protected static final String DATE_AXIS_LABEL = \"Date\";\n    protected static final String EFFORT_AXIS_LABEL = \"Hours\";\n\n    /* Series numbers */\n    protected static final int EFFORT_LEFT_SERIES_NO = 0;\n    protected static final int EFFORT_SPENT_SERIES_NO = 1;\n    protected static final int CURRENT_DAY_EFFORT_LEFT_SERIES_NO = 2;\n    protected static final int CURRENT_DAY_EFFORT_SPENT_SERIES_NO = 3;\n    protected static final int SCOPING_SERIES_NO = 4;\n    protected static final int REFERENCE_SERIES_NO = 5;\n    protected static final int EXPECTED_SERIES_NO = 6;\n\n    /* Series colors */\n    protected static final Color EFFORT_LEFT_SERIES_COLOR = new Color(220, 100, 87);\n    protected static final Color EFFORT_SPENT_SERIES_COLOR = new Color(33, 33, 33);\n    protected static final Color CURRENT_DAY_EFFORT_LEFT_SERIES_COLOR = EFFORT_LEFT_SERIES_COLOR;\n    protected static final Color CURRENT_DAY_EFFORT_SPENT_SERIES_COLOR = EFFORT_SPENT_SERIES_COLOR;\n    protected static final Color SCOPING_SERIES_COLOR = EFFORT_LEFT_SERIES_COLOR;\n    protected static final Color REFERENCE_SERIES_COLOR = new Color(90, 145,\n            210);\n    protected static final Color EXPECTED_SERIES_COLOR = new Color(80, 80, 80);\n\n    /* Series shape */\n    protected static final Shape EFFORT_LEFT_SERIES_SHAPE = new Rectangle(-2, -2,\n            4, 4);\n    protected static final boolean EFFORT_LEFT_SERIES_SHAPE_VISIBLE = true;\n    protected static final Shape EFFORT_SPENT_SERIES_SHAPE = new Rectangle(-2, -2,\n            4, 4);\n    protected static final boolean EFFORT_SPENT_SERIES_SHAPE_VISIBLE = true; \n    protected static final Shape CURRENT_DAY_EFFORT_LEFT_SERIES_SHAPE = new Rectangle(-2,\n            -2, 4, 4);\n    protected static final boolean CURRENT_DAY_EFFORT_LEFT_SERIES_SHAPE_VISIBLE = true; \n    protected static final boolean CURRENT_DAY_EFFORT_LEFT_SERIES_SHAPE_FILLED = false;\n    \n    protected static final Shape CURRENT_DAY_EFFORT_SPENT_SERIES_SHAPE = new Rectangle(-2,\n            -2, 4, 4);\n    protected static final boolean CURRENT_DAY_EFFORT_SPENT_SERIES_SHAPE_VISIBLE = true;  \n    protected static final boolean CURRENT_DAY_EFFORT_SPENT_SERIES_SHAPE_FILLED = false;\n\n\n    /* Series stroke */\n    protected static final Stroke SMALL_BURNDOWN_STROKE = new BasicStroke(1.0f);\n    protected static final Stroke CURRENT_DAY_SERIES_STROKE = new BasicStroke(\n            1.0f, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 0.0f,\n            new float[] { 7.0f, 3.0f }, 0.0f);\n    protected static final Stroke SCOPING_SERIES_STROKE = new BasicStroke(1.0f,\n            BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 0.0f, new float[] {\n                    2.0f, 4.0f }, 0.0f);\n    protected static final Stroke EXPECTED_SERIES_STROKE = new BasicStroke(\n            1.0f, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 0.0f,\n            new float[] { 2.0f, 4.0f }, 0.0f);\n\n    /* Series names */\n    protected static final String EFFORT_LEFT_SERIES_NAME = \"Effort left\";\n    protected static final String EFFORT_SPENT_SERIES_NAME = \"Effort spent\";\n    protected static final String REFERENCE_SERIES_NAME = \"Reference velocity\";\n    protected static final String SCOPING_SERIES_NAME = \"Scoping\";\n    protected static final String CURRENT_DAY_EFFORT_LEFT_SERIES_NAME = \"Current day\";\n    protected static final String CURRENT_DAY_EFFORT_SPENT_SERIES_NAME = \"Current day\";\n    protected static final String EXPECTED_SERIES_NAME = \"Predicted velocity\";\n\n    \n    protected static final TickUnits tickUnits = getTickUnits();\n\n    private int timeDifferenceMinutes = 0;\n    \n    private static TickUnits getTickUnits() {\n        TickUnits units = new TickUnits();\n        units.add(new DateTickUnit(DateTickUnitType.DAY, 1));\n        units.add(new DateTickUnit(DateTickUnitType.DAY, 2));\n        units.add(new DateTickUnit(DateTickUnitType.DAY, 5));\n        units.add(new DateTickUnit(DateTickUnitType.DAY, 7));\n        units.add(new DateTickUnit(DateTickUnitType.DAY, 14));\n        units.add(new DateTickUnit(DateTickUnitType.DAY, 21));\n        units.add(new DateTickUnit(DateTickUnitType.MONTH, 1));\n        units.add(new DateTickUnit(DateTickUnitType.MONTH, 2));\n        units.add(new DateTickUnit(DateTickUnitType.MONTH, 5));\n        units.add(new DateTickUnit(DateTickUnitType.YEAR, 1));\n        units.add(new DateTickUnit(DateTickUnitType.YEAR, 2));\n        units.add(new DateTickUnit(DateTickUnitType.YEAR, 5));\n        units.add(new DateTickUnit(DateTickUnitType.YEAR, 10));\n        units.add(new DateTickUnit(DateTickUnitType.YEAR, 100));\n        return units;\n    }\n    \n    \n    @Autowired\n    public void setIterationHistoryEntryBusiness(\n            IterationHistoryEntryBusiness iterationHistoryEntryBusiness) {\n        this.iterationHistoryEntryBusiness = iterationHistoryEntryBusiness;\n    }\n    \n    public void setHourEntryBusiness(HourEntryBusiness hourEntryBusiness) {\n        this.hourEntryBusiness = hourEntryBusiness;\n    }\n\n    public void setIterationBusiness(IterationBusiness iterationBusiness) {\n        this.iterationBusiness = iterationBusiness;\n    }\n\n    /**\n     * Generates a byte array (a png image file) from a JFreeChart object\n     * \n     * @param chart\n     *            A chart object from which the image is created\n     * @return Byte array representing a png image file\n     */\n    protected byte[] getChartImageByteArray(JFreeChart chart) {\n        return getChartImageByteArray(chart, DEFAULT_WIDTH, DEFAULT_HEIGHT);\n    }\n\n    /**\n     * Generates a byte array (a png image file) from a JFreeChart object\n     * \n     * @param chart\n     *            A chart object from which the image is created\n     * @param width\n     *            Width of the created image\n     * @param height\n     *            Height of the created image\n     * @return Byte array representing a png image file\n     */\n    protected byte[] getChartImageByteArray(JFreeChart chart, int width,\n            int height) {\n        try {\n            ByteArrayOutputStream out = new ByteArrayOutputStream();\n            ChartUtilities.writeChartAsPNG(out, chart, width, height);\n            return out.toByteArray();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n\n    /** {@inheritDoc} */\n    public byte[] getIterationBurndown(Iteration iteration, Integer timeZoneOffset) {\n        return getChartImageByteArray(constructChart(iteration, timeZoneOffset));\n    }\n\n    public byte[] getSmallIterationBurndown(Iteration iteration, Integer timeZoneOffset) {\n        return getChartImageByteArray(constructSmallChart(iteration, timeZoneOffset),\n                SMALL_WIDTH, SMALL_HEIGHT);\n    }\n\n    public byte[] getCustomIterationBurndown(Iteration iteration,\n            Integer width, Integer height, Integer timeZoneOffset) {\n        return getChartImageByteArray(constructChart(iteration, timeZoneOffset), width, height);\n    }\n\n    protected JFreeChart constructChart(Iteration iteration, boolean drawLegend, Integer timeZoneOffset) {\n        return constructChart(iteration, timeZoneOffset);\n    }\n\n    protected JFreeChart constructChart(Iteration iteration, Integer timeZoneOffset) {\n        //get server timezone\n        Calendar cal = Calendar.getInstance();\n        TimeZone localTimeZone = cal.getTimeZone();\n        \n        //server timezone offset in minutes\n        int rawOffset = localTimeZone.getRawOffset() / 60000;\n        \n        //get offset difference in minutes\n        if(timeZoneOffset != null)\n            timeDifferenceMinutes = rawOffset - timeZoneOffset.intValue();\n        else\n            timeDifferenceMinutes = rawOffset;\n        \n        JFreeChart burndown = ChartFactory.createTimeSeriesChart(\"'\"\n                + iteration.getName() + \"' burndown\", DATE_AXIS_LABEL,\n                EFFORT_AXIS_LABEL, getDataset(iteration), true, true, false);\n\n        formatChartAxes(burndown, new DateTime(iteration.getStartDate().minusMinutes(timeDifferenceMinutes)),\n                new DateTime(iteration.getEndDate()).minusMinutes(timeDifferenceMinutes));\n\n        formatChartStyle(burndown);\n\n        return burndown;\n    }\n\n    protected JFreeChart constructSmallChart(Iteration iteration, Integer timeZoneOffset) {\n        JFreeChart burndown = constructChart(iteration, timeZoneOffset);\n        return transformToSmallChart(burndown);\n    }\n\n    /**\n     * Trims and transforms a big burndown chart to a small one.\n     */\n    protected JFreeChart transformToSmallChart(JFreeChart burndownChart) {\n        JFreeChart chart = burndownChart;\n        XYPlot plot = chart.getXYPlot();\n        XYLineAndShapeRenderer renderer = (XYLineAndShapeRenderer) plot\n                .getRenderer();\n\n        chart.setBackgroundPaint(CHART_BACKGROUND_COLOR);\n        plot.setBackgroundPaint(PLOT_BACKGROUND_COLOR);\n\n        renderer.setSeriesPaint(EFFORT_LEFT_SERIES_NO, EFFORT_LEFT_SERIES_COLOR);\n        renderer.setSeriesPaint(EFFORT_SPENT_SERIES_NO, EFFORT_SPENT_SERIES_COLOR);\n        renderer.setSeriesPaint(CURRENT_DAY_EFFORT_LEFT_SERIES_NO, EFFORT_LEFT_SERIES_COLOR);\n        renderer.setSeriesPaint(CURRENT_DAY_EFFORT_SPENT_SERIES_NO, EFFORT_SPENT_SERIES_COLOR);\n        renderer.setSeriesPaint(SCOPING_SERIES_NO, EFFORT_LEFT_SERIES_COLOR);\n        renderer.setSeriesPaint(REFERENCE_SERIES_NO, REFERENCE_SERIES_COLOR);\n\n        renderer.setSeriesStroke(EFFORT_LEFT_SERIES_NO, SMALL_BURNDOWN_STROKE);\n        renderer.setSeriesStroke(EFFORT_SPENT_SERIES_NO, SMALL_BURNDOWN_STROKE);\n        renderer.setSeriesStroke(CURRENT_DAY_EFFORT_LEFT_SERIES_NO, SMALL_BURNDOWN_STROKE);\n        renderer.setSeriesStroke(CURRENT_DAY_EFFORT_SPENT_SERIES_NO, SMALL_BURNDOWN_STROKE);\n        renderer.setSeriesStroke(SCOPING_SERIES_NO, SMALL_BURNDOWN_STROKE);\n        renderer.setSeriesStroke(REFERENCE_SERIES_NO, SMALL_BURNDOWN_STROKE);\n\n        renderer.setSeriesShapesVisible(EFFORT_LEFT_SERIES_NO, false);\n        renderer.setSeriesShapesVisible(EFFORT_SPENT_SERIES_NO, false);\n        renderer.setSeriesShapesVisible(CURRENT_DAY_EFFORT_LEFT_SERIES_NO, false);\n        renderer.setSeriesShapesVisible(CURRENT_DAY_EFFORT_SPENT_SERIES_NO, false);\n        renderer.setSeriesShapesVisible(SCOPING_SERIES_NO, false);\n        renderer.setSeriesShapesVisible(REFERENCE_SERIES_NO, false);\n\n        \n        plot.setDomainGridlinesVisible(false);\n        plot.setRangeGridlinesVisible(false);\n        plot.getDomainAxis().setVisible(false);\n        plot.getRangeAxis().setVisible(false);\n\n        plot.getDomainAxis().setLabel(null);\n        plot.getRangeAxis().setLabel(null);\n\n        RectangleInsets ins = new RectangleInsets(-6, -8, -3, -7);\n        chart.setPadding(ins);\n\n        if (plot.getDataset() != null) {\n            TimeSeriesCollection dataset = (TimeSeriesCollection) plot\n                    .getDataset();\n            // HORROR!\n            // Will break horribly if some series is missing because the indexes\n            // cannot be trusted!!\n            // The indexes are defined as constants but the indexes come\n            // directly\n            // from the order in which the series are added\n            // If one series is missing, EXPECTED_SERIES_NO = 6 but the index\n            // for expected series is 5\n            // (and it's even possible that it doesn't exist!)\n            if (dataset.getSeriesCount() > EXPECTED_SERIES_NO) {\n                dataset.removeSeries(EXPECTED_SERIES_NO);\n            }\n        }\n\n        chart.removeLegend();\n        chart.setTitle(\"\");\n\n        return chart;\n    }\n\n    /**\n     * Sets the chart's and plot's background colors.\n     */\n    protected void formatChartStyle(JFreeChart chart) {\n        chart.setBackgroundPaint(CHART_BACKGROUND_COLOR);\n        chart.getPlot().setBackgroundPaint(PLOT_BACKGROUND_COLOR);\n\n        setSeriesStyles(chart);\n    }\n\n    protected void setSeriesStyles(JFreeChart chart) {\n        XYLineAndShapeRenderer rend = (XYLineAndShapeRenderer) chart\n                .getXYPlot().getRenderer();\n\n        rend.setSeriesPaint(EFFORT_LEFT_SERIES_NO, EFFORT_LEFT_SERIES_COLOR);\n        rend.setSeriesShape(EFFORT_LEFT_SERIES_NO, EFFORT_LEFT_SERIES_SHAPE);\n        rend.setSeriesShapesVisible(EFFORT_LEFT_SERIES_NO,\n                EFFORT_LEFT_SERIES_SHAPE_VISIBLE);\n        \n        rend.setSeriesPaint(EFFORT_SPENT_SERIES_NO, EFFORT_SPENT_SERIES_COLOR);\n        rend.setSeriesShape(EFFORT_SPENT_SERIES_NO, EFFORT_SPENT_SERIES_SHAPE);\n        rend.setSeriesShapesVisible(EFFORT_SPENT_SERIES_NO, \n                EFFORT_SPENT_SERIES_SHAPE_VISIBLE);\n\n        rend.setSeriesPaint(REFERENCE_SERIES_NO, REFERENCE_SERIES_COLOR);\n\n        rend.setSeriesPaint(CURRENT_DAY_EFFORT_LEFT_SERIES_NO, CURRENT_DAY_EFFORT_LEFT_SERIES_COLOR);\n        rend.setSeriesStroke(CURRENT_DAY_EFFORT_LEFT_SERIES_NO, CURRENT_DAY_SERIES_STROKE);\n        rend.setSeriesShape(CURRENT_DAY_EFFORT_LEFT_SERIES_NO, CURRENT_DAY_EFFORT_LEFT_SERIES_SHAPE);\n        rend.setSeriesShapesVisible(CURRENT_DAY_EFFORT_LEFT_SERIES_NO,\n                CURRENT_DAY_EFFORT_LEFT_SERIES_SHAPE_VISIBLE);\n        rend.setSeriesShapesFilled(CURRENT_DAY_EFFORT_LEFT_SERIES_NO,\n                CURRENT_DAY_EFFORT_LEFT_SERIES_SHAPE_FILLED);\n        \n        rend.setSeriesPaint(CURRENT_DAY_EFFORT_SPENT_SERIES_NO, CURRENT_DAY_EFFORT_SPENT_SERIES_COLOR);\n        rend.setSeriesStroke(CURRENT_DAY_EFFORT_SPENT_SERIES_NO, CURRENT_DAY_SERIES_STROKE);\n        rend.setSeriesShape(CURRENT_DAY_EFFORT_SPENT_SERIES_NO, CURRENT_DAY_EFFORT_SPENT_SERIES_SHAPE);\n        rend.setSeriesShapesVisible(CURRENT_DAY_EFFORT_SPENT_SERIES_NO, \n                CURRENT_DAY_EFFORT_SPENT_SERIES_SHAPE_VISIBLE);\n        rend.setSeriesShapesFilled(CURRENT_DAY_EFFORT_SPENT_SERIES_NO,\n                CURRENT_DAY_EFFORT_SPENT_SERIES_SHAPE_FILLED);\n\n        rend.setSeriesPaint(SCOPING_SERIES_NO, SCOPING_SERIES_COLOR);\n        rend.setSeriesStroke(SCOPING_SERIES_NO, SCOPING_SERIES_STROKE);\n\n        rend.setSeriesPaint(EXPECTED_SERIES_NO, EXPECTED_SERIES_COLOR);\n        rend.setSeriesStroke(EXPECTED_SERIES_NO, EXPECTED_SERIES_STROKE);\n        \n        // if the hourReporting was disabled, the effort spent line will be invisible.\n        if (!settingBusiness.isHourReportingEnabled()) {\n            rend.setSeriesVisible(EFFORT_SPENT_SERIES_NO, false);\n            rend.setSeriesVisible(CURRENT_DAY_EFFORT_SPENT_SERIES_NO, false);\n        }\n            \n    }\n\n    /**\n     * Sets the correct start and end dates and date format.\n     */\n    protected void formatChartAxes(JFreeChart chart, DateTime start,\n            DateTime end) {\n        XYPlot plot = chart.getXYPlot();\n        DateAxis axis = (DateAxis) plot.getDomainAxis();\n        axis.setMaximumDate(end.plusDays(1).toDateMidnight().toDate());\n        axis.setMinimumDate(start.toDateMidnight().toDate());\n        axis.setDateFormatOverride(new SimpleDateFormat(\"EEE d.M.\"));\n\n        axis.setStandardTickUnits(tickUnits);\n        \n        ValueAxis valueAxis = plot.getRangeAxis();\n        \n        if (plot.getDataset() != null) {\n            TimeSeriesCollection dataset = (TimeSeriesCollection) plot.getDataset();\n            \n            // There seems to be a bug in JFreeChart value axis scaling.\n            // The current day spent effort line is drawn outside the graph if it is the highest line on the graph\n            // Workaround: Manual scaling\n            double spentMax = 0, leftMax = 0;\n            \n            if (!dataset.getSeries(CURRENT_DAY_EFFORT_SPENT_SERIES_NO).isEmpty() && settingBusiness.isHourReportingEnabled()) {\n                try {\n                    spentMax = dataset.getSeries(CURRENT_DAY_EFFORT_SPENT_SERIES_NO).getValue(1).doubleValue();\n                    spentMax += spentMax * valueAxis.getUpperMargin();\n                } catch (Exception e) {\n                    System.out.println(\"Problem with formatChartAxes: \" + e.getMessage());\n                }\n            }\n            if (!dataset.getSeries(CURRENT_DAY_EFFORT_LEFT_SERIES_NO).isEmpty()) {\n                try {\n                    leftMax = dataset.getSeries(CURRENT_DAY_EFFORT_LEFT_SERIES_NO).getValue(1).doubleValue();\n                    leftMax += leftMax * valueAxis.getUpperMargin();\n                } catch (Exception e) {\n                    System.out.println(\"Problem with formatChartAxes: \" + e.getMessage());\n                }\n            }\n            \n            double current = valueAxis.getRange().getUpperBound();\n            current = Double.isNaN(current) ? 0 : current;\n            current = current > 0 ? current : 1; // setRange(0, 0) will cause endless loop, so set 1 hr\n            valueAxis.setRange(0, Math.max(current, Math.max(spentMax, leftMax)));\n        }\n\n        plot.setDomainGridlinePaint(GRIDLINE_COLOR);\n        plot.setRangeGridlinePaint(GRIDLINE_COLOR);\n    }\n\n    /**\n     * Assembles all the needed <code>TimeSeries</code>.\n     */\n    protected TimeSeriesCollection getDataset(Iteration iteration) {\n        TimeSeriesCollection chartDataset = new TimeSeriesCollection();\n\n        List<IterationHistoryEntry> iterationEntries = iterationHistoryEntryBusiness\n                .getHistoryEntriesForIteration(iteration);\n        \n        List<HourEntry> hourEntries = hourEntryBusiness.getHourEntriesForIteration(iteration);\n        \n        // Clear all hour entries if hour reporting is disabled so we don't mess up with the y-axis scaling\n        // It is more simple to hide the spent effort line than remove the series from the graph as it would affect the series indexes\n        // (see more comments on that in transformToSmallChart below HORROR comment)\n        if (!settingBusiness.isHourReportingEnabled()) {\n            hourEntries.clear();\n        }\n\n        LocalDate yesterday = new LocalDate().minusDays(1);\n        LocalDate today = new LocalDate();\n        IterationHistoryEntry yesterdayEntry = getHistoryEntryForDate(\n                iterationEntries, yesterday);\n        IterationHistoryEntry todayEntry = getHistoryEntryForDate(\n                iterationEntries, today);\n         \n        DateTime iterationStartDate = new DateTime(iteration.getStartDate());\n        DateTime iterationEndDate = new DateTime(iteration.getEndDate());\n\n        chartDataset.addSeries(getBurndownTimeSeries(iterationEntries,\n                new LocalDate(iteration.getStartDate()),\n                determineEndDate(new LocalDate(iteration.getEndDate()))));\n        \n        chartDataset.addSeries(getEffortSpentTimeSeries(hourEntries, \n                iterationStartDate, iterationEndDate));\n\n        chartDataset.addSeries(getCurrentDayEffortLeftSeries(yesterdayEntry,\n                todayEntry));\n        \n        chartDataset.addSeries(getCurrentDaySpentEffortSeries(hourEntries, \n                iterationStartDate));\n        \n        chartDataset.addSeries(getScopingTimeSeries(iterationEntries,\n                iterationStartDate.toLocalDate(), iterationEndDate\n                        .toLocalDate()));\n\n        chartDataset.addSeries(getReferenceVelocityTimeSeries(\n                iterationStartDate, iterationEndDate, new ExactEstimate(\n                        todayEntry.getOriginalEstimateSum())));\n\n        TimeSeries predictedVelocity = getPredictedVelocityTimeSeries(\n                iterationStartDate.toLocalDate(), iterationEndDate\n                        .toLocalDate(), yesterdayEntry, todayEntry);\n        if (predictedVelocity != null) {\n            chartDataset.addSeries(predictedVelocity);\n        }\n\n        return chartDataset;\n    }\n\n    protected LocalDate determineEndDate(LocalDate iterationEndDate) {\n        LocalDate currentDate = new LocalDate();\n        if (currentDate.compareTo(iterationEndDate) <= 0) {\n            return currentDate;\n        }\n        return iterationEndDate.plusDays(1);\n    }\n\n    protected IterationHistoryEntry getHistoryEntryForDate(\n            List<IterationHistoryEntry> entries, LocalDate date) {\n        IterationHistoryEntry foundEntry = new IterationHistoryEntry();\n        for (IterationHistoryEntry entry : entries) {\n            if (entry.getTimestamp().equals(date)) {\n                return entry;\n            }\n            if (entry.getTimestamp().compareTo(date) > 0) {\n                break;\n            }\n            foundEntry = entry;\n        }\n        IterationHistoryEntry returnable = new IterationHistoryEntry();\n        returnable.setTimestamp(date.toDateMidnight().toLocalDate());\n        returnable.setEffortLeftSum(foundEntry.getEffortLeftSum());\n        returnable.setOriginalEstimateSum(foundEntry.getOriginalEstimateSum());\n        return returnable;\n    }\n\n    protected List<IterationHistoryEntry> getIterationHistoryEntries(\n            Iteration iteration) {\n        return iterationHistoryEntryBusiness\n                .getHistoryEntriesForIteration(iteration);\n    }\n\n    protected ExactEstimate getTodaysStartValueWithScoping(\n            IterationHistoryEntry yesterdayEntry,\n            IterationHistoryEntry todayEntry) {\n\n        long minorUnits = yesterdayEntry.getEffortLeftSum();\n        minorUnits += todayEntry.getDeltaOriginalEstimate();\n\n        return new ExactEstimate(minorUnits);\n    }\n\n    /**\n     * Constructs the <code>TimeSeries</code> for the reference velocity.\n     * <p>\n     * Start point is at (startDate, originalEstimateSum). End point is at\n     * (endDate + 1, 0.0)\n     * @param timeDifferenceHours \n     */\n    protected TimeSeries getReferenceVelocityTimeSeries(DateTime startDate,\n            DateTime endDate, ExactEstimate originalEstimateSum) {\n        if (settingBusiness.isWeekendsInBurndown()) {\n            return this.getReferenceVelocityWithWeekends(REFERENCE_SERIES_NAME,\n                    startDate, endDate, originalEstimateSum);\n        }\n        else {\n            return this.getSeriesByStartAndEndPoints(REFERENCE_SERIES_NAME,\n                startDate.minusMinutes(timeDifferenceMinutes), originalEstimateSum, endDate.minusMinutes(timeDifferenceMinutes).plusDays(1),\n                new ExactEstimate(0));\n        }\n    }\n\n    protected TimeSeries getReferenceVelocityWithWeekends(String seriesKey, DateTime startDate, DateTime endDate, ExactEstimate oeSum) {\n        TimeSeries ts = new TimeSeries(seriesKey);\n        MutableDateTime date;\n        startDate = startDate.minusMinutes(timeDifferenceMinutes).toDateMidnight().toDateTime();\n        endDate = endDate.minusMinutes(timeDifferenceMinutes).toDateMidnight().toDateTime();\n        \n        double originalEstimate = ExactEstimateUtils.extractMajorUnits(oeSum);\n        \n        ts.add(new TimeSeriesDataItem(new Second(startDate.toDate()), originalEstimate));\n        \n        // Get the amount of work days\n        int amountOfWorkDays = 0;\n        for (date = new MutableDateTime(startDate); date.isBefore(endDate.plusDays(1)); date.addDays(1)) {\n            if (date.dayOfWeek().get() != DateTimeConstants.SATURDAY && date.dayOfWeek().get() != DateTimeConstants.SUNDAY) {\n                amountOfWorkDays++;\n            }\n        }\n        \n        double decrement = originalEstimate / ((double)amountOfWorkDays);\n        \n        double currentval = ExactEstimateUtils.extractMajorUnits(oeSum);\n        for (date = new MutableDateTime(startDate); date.isBefore(endDate); date.addDays(1)) {\n            if (date.dayOfWeek().get() != DateTimeConstants.SATURDAY && date.dayOfWeek().get() != DateTimeConstants.SUNDAY) {\n                currentval -= decrement;\n            }\n            \n            ts.add(new TimeSeriesDataItem(new Second(date.toDateTime().plusDays(1).toDate()), currentval));\n        }\n        \n        ts.add(new TimeSeriesDataItem(new Second(endDate.plusDays(1).toDate()), 0.0));\n        \n        return ts;\n    }\n    \n    protected TimeSeries getPredictedVelocityTimeSeries(LocalDate iterationStart, LocalDate iterationEnd,\n            IterationHistoryEntry yesterdayEntry, IterationHistoryEntry todayEntry) {\n        LocalDate today = new LocalDate();\n        ExactEstimate startValue = getTodaysStartValueWithScoping(yesterdayEntry, todayEntry);\n        ExactEstimate velocity = iterationBusiness.calculateDailyVelocity(iterationStart, iterationEnd, yesterdayEntry);\n        LocalDate startDate = (iterationEnd.isBefore(today)) ? iterationEnd : today;\n        LocalDate endDate = iterationHistoryEntryBusiness\n                .calculateExpectedEffortDoneDate(startDate, startValue,\n                        velocity);\n        if (endDate == null)\n            return null;\n        endDate = endDate.plusDays(1);\n        if (startDate.isEqual(endDate))\n            return null;\n        return this.getSeriesByStartAndEndPoints(EXPECTED_SERIES_NAME, today.toDateTimeAtCurrentTime().minusMinutes(timeDifferenceMinutes).toLocalDate()\n                .toDateTimeAtStartOfDay(), startValue, endDate.toDateTimeAtCurrentTime().minusMinutes(timeDifferenceMinutes).toLocalDate()\n                .toDateTimeAtStartOfDay(), ExactEstimate.ZERO);\n    }\n\n    /**\n     * Get the <code>TimeSeries</code> for drawing the current day line.\n     * @param timeDifferenceHours \n     */\n    protected TimeSeries getCurrentDayEffortLeftSeries(\n            IterationHistoryEntry yesterdayEntry,\n            IterationHistoryEntry todayEntry) {\n        ExactEstimate startValue = this.getTodaysStartValueWithScoping(\n                yesterdayEntry, todayEntry);\n\n        ExactEstimate endValue = new ExactEstimate(todayEntry\n                .getEffortLeftSum());\n\n        return this.getSeriesByStartAndEndPoints(CURRENT_DAY_EFFORT_LEFT_SERIES_NAME,\n                todayEntry.getTimestamp().toDateTimeAtCurrentTime().minusMinutes(timeDifferenceMinutes).toDateMidnight().toDateTime(),\n                startValue, todayEntry.getTimestamp().toDateTimeAtCurrentTime().minusMinutes(timeDifferenceMinutes).toDateMidnight()\n                        .toDateTime().plusDays(1), endValue);\n    }\n    \n    /**\n     * Get the <code>TimeSeries</code> for drawing the current day line.\n     * @param timeDifferenceHours \n     */\n    protected TimeSeries getCurrentDaySpentEffortSeries(List<? extends HourEntry> hourEntries,\n            DateTime startDate) {\n        TimeSeries effortSpentSeries = new TimeSeries(CURRENT_DAY_EFFORT_SPENT_SERIES_NAME);\n        \n        DateTime tomorrow = new DateMidnight().plusDays(1).toDateTime();\n        \n        List<DailySpentEffort> spentEffortList = hourEntryBusiness.getDailySpentEffortForHourEntries(hourEntries, \n                startDate, tomorrow);\n        \n        double cumulativeSum = 0.0;\n     \n        for (DailySpentEffort spentEffort : spentEffortList) {\n            TimeSeriesDataItem dateItem = getEffortSpentDataItemForDay(spentEffort);\n            \n            cumulativeSum += dateItem.getValue().doubleValue();\n            dateItem.setValue(cumulativeSum);\n            \n            DateMidnight dateTime = new DateMidnight(dateItem.getPeriod().getStart());\n            \n            // Add only values for tomorrow and today\n            if (dateTime.equals(tomorrow.toDateMidnight()) || dateTime.equals(tomorrow.minusDays(1).toDateMidnight())) {\n                effortSpentSeries.add(dateItem);\n            }\n        }\n        \n        return effortSpentSeries;\n    }\n\n    /**\n     * Creates a TimeSeries of effort spent for a given list of HourEntries\n     * \n     * @param hourEntries\n     * @param startDate\n     * @param endDate\n     * @return\n     */\n    protected TimeSeries getEffortSpentTimeSeries(List<? extends HourEntry> hourEntries, \n            DateTime startDate, DateTime endDate) {\n        TimeSeries effortSpentSeries = new TimeSeries(EFFORT_SPENT_SERIES_NAME);\n        \n        List<DailySpentEffort> spentEffortList = new ArrayList<DailySpentEffort>();\n        DateMidnight today = new DateMidnight();\n        \n        if (today.isBefore(endDate)) {\n           spentEffortList = hourEntryBusiness.getDailySpentEffortForHourEntries(hourEntries, \n                startDate.minusDays(1), today.minusDays(1).toDateTime());\n        }\n        else {\n            spentEffortList = hourEntryBusiness.getDailySpentEffortForHourEntries(hourEntries, \n                startDate.minusDays(1), endDate.plusDays(1));\n        }\n        \n        double cumulativeSum = 0.0;\n        \n        for (DailySpentEffort spentEffort : spentEffortList) {\n            TimeSeriesDataItem dateItem = getEffortSpentDataItemForDay(spentEffort);\n            \n            cumulativeSum += dateItem.getValue().doubleValue();\n            dateItem.setValue(cumulativeSum);\n            \n            effortSpentSeries.add(dateItem);\n        }\n        \n        return effortSpentSeries;\n    }\n    \n    protected TimeSeriesDataItem getEffortSpentDataItemForDay(DailySpentEffort entry) {\n        Second second  = new Second(entry.getDay().\n                minusMinutes(timeDifferenceMinutes).toDateMidnight().plusDays(1).toDate());\n        double value = 0.0;\n        \n        if (entry.getSpentEffort() != null) {\n            value = ExactEstimateUtils.extractMajorUnits(new ExactEstimate(entry.getSpentEffort()));\n        }\n        \n        TimeSeriesDataItem item = new TimeSeriesDataItem(second, value);\n        \n        return item;\n    }\n\n    /**\n     * Gets the history entry for each day and transforms it to a\n     * <code>JFreeChart</code> entry.\n     * @param timeDifferenceHours \n     */\n    protected TimeSeries getBurndownTimeSeries(\n            List<IterationHistoryEntry> iterationHistoryEntries,\n            LocalDate startDate, LocalDate endDate) {\n        TimeSeries burndownSeries = new TimeSeries(EFFORT_LEFT_SERIES_NAME);\n\n        for (LocalDate iter = startDate.minusDays(1); iter.compareTo(endDate) < 0; iter = iter\n                .plusDays(1)) {\n            IterationHistoryEntry todayEntry = getHistoryEntryForDate(\n                    iterationHistoryEntries, iter);\n            IterationHistoryEntry yesterdayEntry = getHistoryEntryForDate(\n                    iterationHistoryEntries, iter.minusDays(1));\n\n            if (isScopingDone(todayEntry)) {\n                Pair<TimeSeriesDataItem, TimeSeriesDataItem> scopedEntries = getBurndownScopedDataItemForDay(\n                        yesterdayEntry, todayEntry);\n                burndownSeries.add(scopedEntries.getFirst());\n                burndownSeries.add(scopedEntries.getSecond());\n            }\n\n            burndownSeries.add(getBurndownDataItemForDay(todayEntry));\n        }\n\n        return burndownSeries;\n    }\n\n    protected TimeSeriesDataItem getBurndownDataItemForDay(\n            IterationHistoryEntry entry) {\n        TimeSeriesDataItem item = new TimeSeriesDataItem(new Second(entry\n                .getTimestamp().toDateTimeAtCurrentTime().minusMinutes(timeDifferenceMinutes).toDateMidnight().plusDays(1).toDate()),\n                ExactEstimateUtils.extractMajorUnits(new ExactEstimate(entry\n                        .getEffortLeftSum())));\n        return item;\n\n    }\n\n    protected Pair<TimeSeriesDataItem, TimeSeriesDataItem> getBurndownScopedDataItemForDay(\n            IterationHistoryEntry yesterdayEntry,\n            IterationHistoryEntry todayEntry) {\n        DateTime timestamp = todayEntry.getTimestamp().toDateTimeAtCurrentTime().minusMinutes(timeDifferenceMinutes).toDateMidnight()\n                .toDateTime().plusSeconds(2);\n        Second period = new Second(timestamp.toDate());\n\n        long longValue = yesterdayEntry.getEffortLeftSum()\n                + todayEntry.getDeltaOriginalEstimate();\n        ExactEstimate scopedValue = new ExactEstimate(longValue);\n\n        TimeSeriesDataItem nullItem = new TimeSeriesDataItem(new Second(\n                timestamp.minusSeconds(1).toDate()), null);\n        TimeSeriesDataItem scopedItem = new TimeSeriesDataItem(period,\n                ExactEstimateUtils.extractMajorUnits(scopedValue));\n\n        return Pair.create(nullItem, scopedItem);\n    }\n\n    protected List<TimeSeriesDataItem> getScopeSeriesDataItems(\n            IterationHistoryEntry yesterdayEntry,\n            IterationHistoryEntry todayEntry) {\n\n        // Second item is places 2 seconds after the first\n        // Resulting in a almost vertical line in the graph\n        // Null value is added to break the line\n        Second firstItemPeriod = new Second(todayEntry.getTimestamp().toDateTimeAtCurrentTime().minusMinutes(timeDifferenceMinutes)\n                .toDateMidnight().toDate());\n        Second secondItemPeriod = new Second(todayEntry.getTimestamp().toDateTimeAtCurrentTime().minusMinutes(timeDifferenceMinutes)\n                .toDateMidnight().toDateTime().plusSeconds(2).toDate());\n        Second nullItemPeriod = new Second(todayEntry.getTimestamp().toDateTimeAtCurrentTime().minusMinutes(timeDifferenceMinutes)\n                .toDateMidnight().toDateTime().plusSeconds(3).toDate());\n\n        ExactEstimate firstValue = new ExactEstimate(yesterdayEntry\n                .getEffortLeftSum());\n        long secondValueAsLong = yesterdayEntry.getEffortLeftSum()\n                + todayEntry.getDeltaOriginalEstimate();\n        ExactEstimate secondValue = new ExactEstimate(secondValueAsLong);\n\n        TimeSeriesDataItem firstItem = new TimeSeriesDataItem(firstItemPeriod,\n                ExactEstimateUtils.extractMajorUnits(firstValue));\n        TimeSeriesDataItem secondItem = new TimeSeriesDataItem(\n                secondItemPeriod, ExactEstimateUtils\n                        .extractMajorUnits(secondValue));\n        TimeSeriesDataItem nullItem = new TimeSeriesDataItem(nullItemPeriod,\n                null);\n\n        return Arrays.asList(firstItem, secondItem, nullItem);\n    }\n\n    protected boolean isScopingDone(IterationHistoryEntry entry) {\n        return (entry.getDeltaOriginalEstimate() != 0);\n    }\n\n    protected TimeSeries getScopingTimeSeries(\n            List<IterationHistoryEntry> iterationHistoryEntries,\n            LocalDate startDate, LocalDate endDate) {\n        TimeSeries scopingSeries = new TimeSeries(SCOPING_SERIES_NAME);\n        for (LocalDate iter = startDate.minusDays(1); iter.compareTo(endDate\n                .plusDays(1)) < 0; iter = iter.plusDays(1)) {\n            IterationHistoryEntry todayEntry = getHistoryEntryForDate(\n                    iterationHistoryEntries, iter);\n            IterationHistoryEntry yesterdayEntry = getHistoryEntryForDate(\n                    iterationHistoryEntries, iter.minusDays(1));\n\n            if (isScopingDone(todayEntry)) {\n                List<TimeSeriesDataItem> scopeItems = getScopeSeriesDataItems(\n                        yesterdayEntry, todayEntry);\n                scopingSeries.add(scopeItems.get(0));\n                scopingSeries.add(scopeItems.get(1));\n                scopingSeries.add(scopeItems.get(2));\n            }\n        }\n        return scopingSeries;\n    }\n\n    protected TimeSeries getSeriesByStartAndEndPoints(String seriesKey,\n            DateTime startInstant, ExactEstimate startValue,\n            DateTime endInstant, ExactEstimate endValue) {\n        TimeSeries timeSeries = new TimeSeries(seriesKey);\n\n        addTimeSeriesItem(startInstant, startValue, timeSeries);\n        addTimeSeriesItem(endInstant, endValue, timeSeries);\n\n        return timeSeries;\n    }\n\n    protected void addTimeSeriesItem(DateTime instant, ExactEstimate value,\n            TimeSeries timeSeries) {\n        timeSeries.addOrUpdate(new Second(instant.toDateMidnight().toDateTime()\n                .toDate()), ExactEstimateUtils.extractMajorUnits(value));\n    }\n\n    public void setSettingBusiness(SettingBusiness settingBusiness) {\n        this.settingBusiness = settingBusiness;\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\impl\\\\IterationBusinessImpl.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["IterationBusinessImpl"], "AN": ["iterationDAO", "transferObjectBusiness", "storyBusiness", "hourEntryBusiness", "backlogHistoryEntryBusiness", "iterationHistoryEntryBusiness", "iterationHistoryEntryDAO", "backlogBusiness", "assignmentBusiness", "storyRankBusiness", "taskBusiness", "teamBusiness", "backlogHistoryDAO", "storyHistoryDAO", "taskHistoryDAO"], "SCS_VariableDeclarator": ["iterationDAO", "transferObjectBusiness", "storyBusiness", "hourEntryBusiness", "backlogHistoryEntryBusiness", "iterationHistoryEntryBusiness", "iterationHistoryEntryDAO", "backlogBusiness", "assignmentBusiness", "storyRankBusiness", "taskBusiness", "teamBusiness", "backlogHistoryDAO", "storyHistoryDAO", "taskHistoryDAO", "iteration", "project", "isStandalone", "tasks", "item", "stories", "item", "assignments", "item", "historyEntries", "item", "iteration", "iterationTO", "stories", "metricsData", "rank", "rankedStories", "story", "storyTO", "tasksWithoutStory", "taskEsData", "task", "taskTO", "story", "tasks", "task", "taskTO", "iteration", "today", "day", "length", "origEst", "effLeft", "velocity", "today", "entry", "today", "day", "length", "velocity", "metrics", "latestHistoryEntry", "doneStoryPoints", "spentEffort", "pairTasks", "pairStories", "today", "effortDone", "emptyParentId", "parent", "iter", "teams", "tid", "iterationId", "iter", "assignment", "teams", "tid", "oldParent", "now", "dayStart", "iterationTasks", "assignments", "unassignedLoad", "totalAvailability", "assignment", "to", "task", "responsibleCount", "taskEffort", "responsibles", "responsibles", "timeframeLeft", "weeksLeft", "iterationBaselineLoad", "assignment", "assignedPortion", "iterationWorkHours", "totalLoad", "user", "assignment", "latestHistoryEntry", "effortLeft", "dailyVelocity", "daysLeft", "added", "deleted", "entry", "story", "modified", "entry", "story", "ret", "allTasks", "ret", "ret", "iteration", "count"], "SCS_ConstructorDeclaration": ["IterationBusinessImpl"], "SCS_ClassReference": ["Iteration", "", "", "", "iteration", "", "backlogHistoryEntryBusiness", "project", "storyRankBusiness", "iteration", "iteration", "taskBusiness", "item", "iteration", "storyBusiness", "iteration", null, null, "iteration", null, null, "iteration", "assignmentBusiness", "item", "hourEntryBusiness", "iteration", "iteration", null, "iteration", "iterationHistoryEntryBusiness", "item", null, "transferObjectBusiness", null, null, "metricsData", "story", "storyTO", "metricsData", "story", "storyTO", "rankedStories", "iterationTO", "iteration", "iterationTO", null, "iterationTO", null, "taskEsData", "taskTO", "taskTO", "taskEsData", "taskTO", "iterationTO", "story", "taskEsData", "taskTO", "taskTO", "taskEsData", "taskTO", "tasks", "story", null, "iteration", "today", "Days", null, "yesterdayEntry", "yesterdayEntry", "iterationHistoryEntryDAO", "iteration", "today", "", "iteration", "iteration", "today", "Days", null, "Math", "iterationHistoryEntryBusiness", "metrics", "metrics", "metrics", "latestHistoryEntry", "metrics", "latestHistoryEntry", "iteration", "metrics", "metrics", "iteration", null, "backlogBusiness", "iteration", "metrics", "", "iteration", "iteration", "metrics", "backlogBusiness", "metrics", "hourEntryBusiness", "metrics", "iterationDAO", "metrics", "metrics", "iterationDAO", "metrics", "metrics", "metrics", "Days", null, "iteration", "iteration", "today", "iteration", null, "metrics", "backlogBusiness", null, "metrics", "", "metrics", "", "metrics", "", "metrics", "", "metrics", null, "metrics", null, "metrics", "metrics", "metrics", "", "metrics", "metrics", "metrics", "", "metrics", "metrics", "metrics", "metrics", "metrics", null, "metrics", null, "metrics", "", "metrics", null, "metrics", "backlogBusiness", "metrics", "backlogBusiness", "metrics", "", "metrics", "metrics", "", null, "iterationData", null, "iterationData", "transferObjectBusiness", null, null, "teams", "teamBusiness", "iter", "iter", "iterationData", "iter", "iterationData", "iter", "iterationData", "iter", "iterationData", "iter", "iterationData", "iter", "iterationData", "iter", "iterationData", "", null, "iter", null, "transferObjectBusiness", "iterationData", null, null, "", "", "iteration", "assigneeIds", "assignment", null, "assignmentBusiness", "assignment", "assignmentBusiness", "teams", "teamBusiness", "iteration", "iter", "iter", null, null, "oldParent", null, "parent", "now", "iterationDAO", "iterationDAO", null, "iter", "assignments", "assignment", null, "assignment", "task", null, "task", "task", null, "task", "", "task", "task", null, null, "task", null, null, "task", null, "", "backlogBusiness", "backlogBusiness", null, "iter", "iter", null, "assignments", "assignment", "assignment", null, "assignment", "iter", "Math", "iter", null, "assignment", "totalLoad", "assignment", null, "totalLoad", "assignment", null, "assignment", "assignment", null, "assignment", null, "assignment", "totalLoad", "assignment", null, "assignment", "iterationWorkHours", "assignment", "Math", "assignment", null, "assignment", null, "assignments", "assignments", "user", "assignment", "assignment", "user", "assignment", "assignment", "assignments", "user", "assignment", null, "iterationHistoryEntryBusiness", "latestHistoryEntry", "", null, "iter", null, "backlogBusiness", null, null, null, null, "entry", "entry", null, "entry", null, null, "entry", "entry", null, "entry", "ret", "ret", "ret", "Collections", null, "ret", "Collections", "ret", null, "ret", null, "Collections", "iterationDAO", "iterationDAO"], "MN": ["setIterationDAO", "delete", "deleteAndUpdateHistory", "delete", "getIterationContents", "retrieveIterationOnlyLeafStories", "calculateDailyVelocity", "calculateDailyVelocity", "calculateDailyStoryPointsVelocity", "calculatePercent", "getIterationMetrics", "storeStandAlone", "store", "create", "setAssignees", "setTeams", "moveTo", "retrieveCurrentAndFutureIterations", "retrieveAllStandAloneIterations", "calculateAssignedLoadPerAssignee", "divideTaskLoad", "calculateVariance", "retrieveChangesInIterationStories", "retrieveChangesInIterationTasks", "renderSortedTaskAndStoryRevisions", "retreiveIterationByReadonlyToken", "getIterationCountFromReadonlyToken"], "PN": ["iterationDAO", "id", "id", "iteration", "iterationId", "iterationId", "start", "end", "yesterdayEntry", "iteration", "start", "end", "points", "part", "total", "iteration", "iterationId", "iterationData", "assigneeIds", "teams", "iterationId", "parentBacklogId", "iterationData", "assigneeIds", "teamIds", "parentBacklog", "iterationData", "assigneeIds", "teamIds", "iteration", "assigneeIds", "iteration", "teamIds", "iter", "parent", "iter", "assignments", "responsibleCount", "taskEffort", "responsibles", "iter", "iteration", "iteration", "iteration", "readonlyToken", "readonlyToken"], "SCS_MemberReference": ["genericDAO", "iterationDAO", "iterationDAO", "iterationDAO", "id", "id", "iteration", "project", "iteration", "tasks", "DELETE", "stories", "item", "isStandalone", "item", "item", "assignments", "historyEntries", "iteration", "iterationDAO", "iterationId", "iteration", "iteration", "storyBusiness", "iteration", "iterationDAO", "iteration", "stories", "story", "rank", "storyTO", "rankedStories", "iterationDAO", "iteration", "tasksWithoutStory", "task", "taskTO", "task", "taskTO", "tasks", "iterationTO", "iterationId", "iteration", "yesterdayEntry", "end", "today", "end", "start", "day", "length", "length", "origEst", "effLeft", "length", "velocity", "entry", "points", "end", "today", "end", "start", "day", "length", "length", "points", "length", "velocity", "total", "part", "total", "iteration", "iteration", "latestHistoryEntry", "doneStoryPoints", "iteration", "doneStoryPoints", "iteration", "spentEffort", "iteration", "second", "first", "iteration", "second", "first", "iteration", "iteration", "first", "second", "first", "second", "effortDone", "iteration", "iteration", "metrics", "iterationId", "emptyParentId", "iterationData", "assigneeIds", "teams", "parentBacklogId", "parent", "backlogBusiness", "parentBacklogId", "parent", "iterationId", "parent", "iterationData", "assigneeIds", "teamIds", "iterationId", "teamIds", "teamIds", "tid", "teams", "iter", "assigneeIds", "iterationDAO", "iter", "parent", "parent", "iter", "parent", "iter", "parentBacklog", "parentBacklog", "iterationDAO", "iterationData", "iterationId", "iter", "assigneeIds", "parentBacklog", "iter", "teamIds", "iter", "assigneeIds", "iteration", "assigneeIds", "teamIds", "teamIds", "tid", "teams", "parent", "iterationDAO", "iter", "oldParent", "backlogHistoryEntryBusiness", "parent", "backlogHistoryEntryBusiness", "dayStart", "iterationDAO", "iter", "assignment", "to", "totalAvailability", "totalAvailability", "totalAvailability", "iterationTasks", "responsibleCount", "assignments", "responsibleCount", "taskEffort", "responsibles", "responsibleCount", "assignments", "responsibleCount", "taskEffort", "responsibles", "unassignedLoad", "taskEffort", "iter", "iter", "iterationBaselineLoad", "weeksLeft", "totalAvailability", "iterationBaselineLoad", "assignedPortion", "unassignedLoad", "iterationWorkHours", "timeframeLeft", "assignedPortion", "iterationWorkHours", "iterationWorkHours", "weeksLeft", "totalLoad", "responsibles", "assignment", "assignment", "user", "assignment", "taskEffort", "responsibleCount", "iter", "latestHistoryEntry", "iter", "dailyVelocity", "effortLeft", "effortLeft", "dailyVelocity", "daysLeft", "iter", "backlogHistoryDAO", "iteration", "backlogHistoryDAO", "iteration", "deleted", "storyHistoryDAO", "story", "backlogHistoryDAO", "iteration", "modified", "storyHistoryDAO", "story", "added", "deleted", "modified", "ret", "ret", "taskHistoryDAO", "iteration", "allTasks", "ret", "ret", "iteration", "iteration", "ret", "ret", "readonlyToken", "iteration", "readonlyToken", "count"], "SCS_MethodInvocation": ["delete", "retrieve", "retrieve", "getParent", "delete", "updateHistory", "getId", "removeBacklogRanks", "isStandAlone", "getTasks", "delete", "getId", "getAssignedStories", "forceDelete", "getParent", "getStories", "contains", "getParent", "getStories", "remove", "getAssignments", "delete", "getId", "deleteAll", "getHourEntries", "getHourEntries", "clear", "getHistoryEntries", "delete", "getId", "retrieveDeep", "constructIterationTO", "retrieveStoriesInIteration", "calculateIterationDirectStoryMetrics", "containsKey", "getId", "setMetrics", "get", "getId", "setRank", "add", "setRankedStories", "getTasks", "setTasks", "calculateIterationTaskEffortSpent", "getTasks", "add", "containsKey", "getId", "setEffortSpent", "get", "getId", "getRankedStories", "getTasks", "containsKey", "getId", "setEffortSpent", "get", "getId", "add", "setTasks", "getIterationContents", "setStories", "isBefore", "daysBetween", "getDays", "getOriginalEstimateSum", "getEffortLeftSum", "retrieveByDate", "getId", "minusDays", "calculateDailyVelocity", "getStartDate", "getEndDate", "isBefore", "daysBetween", "getDays", "round", "retrieveLatest", "setOriginalEstimate", "setEffortLeft", "setOriginalEstimate", "getOriginalEstimateSum", "setEffortLeft", "getEffortLeftSum", "getBacklogSize", "setPlannedSize", "setPlannedSize", "getBacklogSize", "intValue", "calculateDoneStoryPointSum", "getId", "setDailyVelocity", "calculateDailyStoryPointsVelocity", "getStartDate", "getEndDate", "setStoryPoints", "getStoryPointSumByIteration", "setDoneStoryPoints", "calculateSumOfIterationsHourEntries", "setSpentEffort", "getCountOfDoneAndNonDeferred", "setTotalTasks", "setCompletedTasks", "getCountOfDoneAndAllStories", "setTotalStories", "setCompletedStories", "setTotalDays", "daysBetween", "getDays", "getStartDate", "getEndDate", "isBefore", "getEndDate", "toLocalDate", "setDaysLeft", "daysLeftInSchedulableBacklog", "getDays", "setVariance", "calculateVariance", "setPercentDoneTasks", "calculatePercent", "setPercentDoneStories", "calculatePercent", "setPercentSpentEffort", "calculatePercent", "getSpentEffort", "intValue", "getPlannedSize", "intValue", "getPercentSpentEffort", "setPercentSpentEffort", "setDoneStoryPointsPercentage", "calculatePercent", "getDoneStoryPoints", "getStoryPoints", "setDaysLeftPercentage", "calculatePercent", "getDaysLeft", "getTotalDays", "getEffortLeft", "getOriginalEstimate", "getOriginalEstimate", "intValue", "getEffortLeft", "intValue", "setCompletedEffortPercentage", "calculatePercent", "getOriginalEstimate", "intValue", "setTotalValue", "getStoryValueSumByIteration", "setCompletedValue", "getCompletedStoryValueSumByIteration", "setPercentCompletedValue", "calculatePercent", "getCompletedValue", "getTotalValue", "store", "retrieve", "getEndDate", "isBefore", "getStartDate", "constructIterationTO", "create", "retrieve", "add", "retrieve", "setTeams", "setStartDate", "getStartDate", "setEndDate", "getEndDate", "setBacklogSize", "getBacklogSize", "setBaselineLoad", "getBaselineLoad", "setDescription", "getDescription", "setName", "getName", "setReadonlyToken", "getReadonlyToken", "setAssignees", "store", "getParent", "moveTo", "constructIterationTO", "setParent", "create", "retrieve", "setAssignees", "setTeams", "getAssignments", "contains", "getUser", "getId", "delete", "getId", "addMultiple", "add", "retrieve", "setTeams", "getParent", "setParent", "store", "updateHistory", "getId", "updateHistory", "getId", "withMillisOfDay", "retrieveCurrentAndFutureIterationsAt", "retrieveAllStandAloneIterations", "getAllTasksForIteration", "getAssignments", "put", "getUser", "getId", "getAvailability", "getResponsibles", "size", "getEffortLeft", "getEffortLeft", "longValue", "getResponsibles", "divideTaskLoad", "getStory", "getStory", "getResponsibles", "isEmpty", "getStory", "getResponsibles", "size", "getStory", "getResponsibles", "divideTaskLoad", "calculateBacklogTimeframePercentageLeft", "daysLeftInSchedulableBacklog", "getDays", "getBaselineLoad", "getBaselineLoad", "floatValue", "values", "getAvailability", "getBaselineLoad", "add", "setUnassignedLoad", "getBacklogSize", "round", "getBacklogSize", "floatValue", "setAvailableWorktime", "add", "getUnassignedLoad", "longValue", "add", "getAssignedLoad", "longValue", "getPersonalLoad", "getBaselineLoad", "add", "getPersonalLoad", "floatValue", "getBaselineLoad", "add", "getBaselineLoad", "longValue", "setTotalLoad", "longValue", "setLoadPercentage", "round", "getTotalLoad", "floatValue", "getAvailableWorktime", "floatValue", "values", "get", "getId", "setAvailability", "setId", "getId", "setUser", "setUnassigned", "put", "getId", "getAssignedLoad", "add", "retrieveLatest", "getEffortLeftSum", "calculateDailyVelocity", "longValue", "getStartDate", "isBeforeNow", "daysLeftInSchedulableBacklog", "getDays", "retrieveAddedStories", "retrieveDeletedStories", "retrieveClosestRevision", "getObjectId", "getRevision", "getId", "setObject", "retrieveModifiedStories", "retrieveClosestRevision", "getObjectId", "getRevision", "getId", "setObject", "addAll", "addAll", "addAll", "sort", "retrieveAllTaskRevisions", "addAll", "sort", "addAll", "retrieveChangesInIterationStories", "addAll", "retrieveChangesInIterationTasks", "sort", "getIterationFromReadonlyToken", "getIterationCountFromReadonlyToken"], "SCS_VariableDeclaration": ["Iteration", "Backlog", "Boolean", "Set", "Task", "Set", "Story", "Set", "Assignment", "Set", "IterationHistoryEntry", "Iteration", "IterationTO", "List", "Map", "int", "List", "Story", "StoryTO", "Collection", "Map", "Task", "TaskTO", "Story", "Set", "Task", "TaskTO", "IterationTO", "LocalDate", "LocalDate", "double", "long", "long", "double", "LocalDate", "IterationHistoryEntry", "LocalDate", "LocalDate", "double", "double", "IterationMetrics", "IterationHistoryEntry", "int", "long", "Pair", "Pair", "LocalDate", "int", "int", "Backlog", "Iteration", "Set", "Integer", "int", "Iteration", "Assignment", "Set", "Integer", "Backlog", "DateTime", "DateTime", "List", "Map", "long", "int", "Assignment", "AssignmentTO", "Task", "int", "long", "Collection", "Collection", "float", "float", "long", "AssignmentTO", "float", "ExactEstimate", "SignedExactEstimate", "User", "AssignmentTO", "IterationHistoryEntry", "long", "long", "int", "List", "List", "AgilefantHistoryEntry", "Story", "List", "AgilefantHistoryEntry", "Story", "List", "List", "List", "List", "Iteration", "int"], "CO": ["/* In case of normal iteration, story is removed from iteration and also from it's parent project.*/", "// Set the tasks without a story", "// 1. Set original estimate and effort left", "// Set the planned size", "// 2. Set story points", "// 3. Set spent effort", "// 3. Tasks done and Total", "//4. iteration interval", "//5. variance", "//6. calculate percentages", "//7. calculate 'Value'", "// Get teams", "//only set teams for standalone iterations", "// Get teams", "// user negative and", "// context unique id for", "// non-persited assignment", "/**\n     * This is to retrieve task history given an iteration, for all possible\n     * task modifications\n     * \n     * Task revisions are stored in table 'tasks_AUD' given the current\n     * iteration (iteration_id). Note that if story_id is NULL, the selected\n     * task does not belong to any story.     \n     *       \n     * Interface needed: TaskHistoryDAO in db.history package\n     *  --> add function retrieveAllTaskRevisions(iteration)\n     * Implementation: TaskHistoryDAOImpl in db.history.impl package\n     *  --> implement the added function. --> Note that this is the same\n     *  as BacklogHistoryDAO, except that it uses the Iteration class instead\n     *  of the Backlog class.\n     * \n     * @author aborici\n     * \n     */", "/**\n     * This is to mingle task and story revisions by sorting them based on\n     * timestamp.\n     * \n     * @author aborici\n     * \n     */", "// merge tasks and stories into list 'ret':"], "CODE": "package fi.hut.soberit.agilefant.business.impl;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\nimport org.joda.time.DateTime;\nimport org.joda.time.Days;\nimport org.joda.time.LocalDate;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.support.PropertyComparator;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport fi.hut.soberit.agilefant.business.AssignmentBusiness;\nimport fi.hut.soberit.agilefant.business.BacklogBusiness;\nimport fi.hut.soberit.agilefant.business.BacklogHistoryEntryBusiness;\nimport fi.hut.soberit.agilefant.business.HourEntryBusiness;\nimport fi.hut.soberit.agilefant.business.IterationBusiness;\nimport fi.hut.soberit.agilefant.business.IterationHistoryEntryBusiness;\nimport fi.hut.soberit.agilefant.business.StoryBusiness;\nimport fi.hut.soberit.agilefant.business.StoryRankBusiness;\nimport fi.hut.soberit.agilefant.business.TaskBusiness;\nimport fi.hut.soberit.agilefant.business.TeamBusiness;\nimport fi.hut.soberit.agilefant.business.TransferObjectBusiness;\nimport fi.hut.soberit.agilefant.db.IterationDAO;\nimport fi.hut.soberit.agilefant.db.IterationHistoryEntryDAO;\nimport fi.hut.soberit.agilefant.db.history.BacklogHistoryDAO;\nimport fi.hut.soberit.agilefant.db.history.StoryHistoryDAO;\nimport fi.hut.soberit.agilefant.db.history.TaskHistoryDAO;\nimport fi.hut.soberit.agilefant.exception.ObjectNotFoundException;\nimport fi.hut.soberit.agilefant.model.Assignment;\nimport fi.hut.soberit.agilefant.model.Backlog;\nimport fi.hut.soberit.agilefant.model.ExactDoubleEstimate;\nimport fi.hut.soberit.agilefant.model.ExactEstimate;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.IterationHistoryEntry;\nimport fi.hut.soberit.agilefant.model.Project;\nimport fi.hut.soberit.agilefant.model.SignedExactEstimate;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.Task;\nimport fi.hut.soberit.agilefant.model.Team;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.transfer.AgilefantHistoryEntry;\nimport fi.hut.soberit.agilefant.transfer.AssignmentTO;\nimport fi.hut.soberit.agilefant.transfer.IterationMetrics;\nimport fi.hut.soberit.agilefant.transfer.IterationTO;\nimport fi.hut.soberit.agilefant.transfer.StoryTO;\nimport fi.hut.soberit.agilefant.transfer.TaskTO;\nimport fi.hut.soberit.agilefant.util.HourEntryHandlingChoice;\nimport fi.hut.soberit.agilefant.util.Pair;\nimport fi.hut.soberit.agilefant.util.StoryMetrics;\n\n@Service(\"iterationBusiness\")\n@Transactional\npublic class IterationBusinessImpl extends GenericBusinessImpl<Iteration>\n        implements IterationBusiness {\n\n    private IterationDAO iterationDAO;\n\n    @Autowired\n    private TransferObjectBusiness transferObjectBusiness;\n    @Autowired\n    private StoryBusiness storyBusiness;\n    @Autowired\n    private HourEntryBusiness hourEntryBusiness;\n    @Autowired\n    private BacklogHistoryEntryBusiness backlogHistoryEntryBusiness;\n    @Autowired\n    private IterationHistoryEntryBusiness iterationHistoryEntryBusiness;\n    @Autowired\n    private IterationHistoryEntryDAO iterationHistoryEntryDAO;\n    @Autowired\n    private BacklogBusiness backlogBusiness;\n    @Autowired\n    private AssignmentBusiness assignmentBusiness;\n    @Autowired \n    private StoryRankBusiness storyRankBusiness;\n    @Autowired\n    private TaskBusiness taskBusiness;\n    @Autowired\n    private TeamBusiness teamBusiness;\n    @Autowired\n    private BacklogHistoryDAO backlogHistoryDAO;\n    @Autowired\n    private StoryHistoryDAO storyHistoryDAO;\n    @Autowired\n    private TaskHistoryDAO taskHistoryDAO;\n    \n    public IterationBusinessImpl() {\n        super(Iteration.class);\n    }\n    \n    @Autowired\n    public void setIterationDAO(IterationDAO iterationDAO) {\n        this.genericDAO = iterationDAO;\n        this.iterationDAO = iterationDAO;\n    }\n\n    @Override\n    public void delete(int id) {\n        delete(retrieve(id));\n    }\n    \n    \n    public void deleteAndUpdateHistory(int id) {\n        Iteration iteration = retrieve(id);\n        Backlog project = iteration.getParent();\n        delete(iteration);\n        if (project != null) {\n            backlogHistoryEntryBusiness.updateHistory(project.getId());      \n        }\n    }\n\n    @Override\n    public void delete(Iteration iteration) {\n\n        storyRankBusiness.removeBacklogRanks(iteration);\n        Boolean isStandalone = iteration.isStandAlone();\n        \n        Set<Task> tasks = new HashSet<Task>(iteration.getTasks());\n        for (Task item : tasks) {\n            taskBusiness.delete(item.getId(), HourEntryHandlingChoice.DELETE);\n        }\n\n        Set<Story> stories = new HashSet<Story>(iteration.getAssignedStories());\n        for (Story item : stories) {\n            storyBusiness.forceDelete(item);\n            /* In case of normal iteration, story is removed from iteration and also from it's parent project.*/\n            if (!isStandalone && iteration.getParent().getStories().contains(item))\n                iteration.getParent().getStories().remove(item);\n        }\n        Set<Assignment> assignments = new HashSet<Assignment>(iteration\n                .getAssignments());\n        for (Assignment item : assignments) {\n            assignmentBusiness.delete(item.getId());\n        }\n\n        hourEntryBusiness.deleteAll(iteration.getHourEntries());\n\n        iteration.getHourEntries().clear();\n\n        Set<IterationHistoryEntry> historyEntries = new HashSet<IterationHistoryEntry>(\n                iteration.getHistoryEntries());\n        for (IterationHistoryEntry item : historyEntries) {\n            iterationHistoryEntryBusiness.delete(item.getId());\n        }\n        super.delete(iteration);\n    }\n    \n\n    @Transactional\n    public IterationTO getIterationContents(int iterationId) {\n        Iteration iteration = this.iterationDAO.retrieveDeep(iterationId);\n        if (iteration == null) {\n            throw new ObjectNotFoundException(\"Iteration not found\");\n        }\n        IterationTO iterationTO = transferObjectBusiness.constructIterationTO(iteration);\n\n        List<Story> stories = this.storyBusiness.retrieveStoriesInIteration(iteration);\n\n        Map<Integer, StoryMetrics> metricsData = this.iterationDAO.calculateIterationDirectStoryMetrics(iteration);\n        int rank = 0;\n        List<StoryTO> rankedStories = new ArrayList<StoryTO>();\n\n        for (Story story : stories) {\n            StoryTO storyTO = new StoryTO(story);\n            if (metricsData.containsKey(story.getId())) {\n                storyTO.setMetrics(metricsData.get(story.getId()));\n            }\n            storyTO.setRank(rank++);\n            rankedStories.add(storyTO);\n        }\n        iterationTO.setRankedStories(rankedStories);\n        \n        // Set the tasks without a story\n        Collection<Task> tasksWithoutStory = iteration.getTasks();\n\n        iterationTO.setTasks(new HashSet<Task>());\n\n        Map<Integer, Long> taskEsData = this.iterationDAO\n                .calculateIterationTaskEffortSpent(iteration);\n\n        for (Task task : tasksWithoutStory) {\n            TaskTO taskTO = new TaskTO(task);\n            iterationTO.getTasks().add(taskTO);\n            if (taskEsData.containsKey(taskTO.getId())) {\n                taskTO.setEffortSpent(taskEsData.get(taskTO.getId()));\n            }\n        }\n\n        for (Story story : iterationTO.getRankedStories()) {\n            Set<Task> tasks = new HashSet<Task>();\n            for (Task task : story.getTasks()) {\n                TaskTO taskTO = new TaskTO(task);\n                if (taskEsData.containsKey(taskTO.getId())) {\n                    taskTO.setEffortSpent(taskEsData.get(taskTO.getId()));\n                }\n                tasks.add(taskTO);\n            }\n            story.setTasks(tasks);\n        }\n\n        return iterationTO;\n    }\n\n    public IterationTO retrieveIterationOnlyLeafStories(int iterationId) {\n        IterationTO iteration = this.getIterationContents(iterationId);\n        iteration.setStories(null);\n        return iteration;\n    }\n    \n    public ExactEstimate calculateDailyVelocity(LocalDate start, LocalDate end, IterationHistoryEntry yesterdayEntry) {\n        final LocalDate today = new LocalDate();\n\n        if (yesterdayEntry == null)\n            return new ExactEstimate(0);\n        final LocalDate day = (today.isBefore(end)) ? today : end;\n\n        double length = Days.daysBetween(start, day).getDays();\n        if (length < 1) {\n            length = 1;\n        }\n\n        final long origEst = yesterdayEntry.getOriginalEstimateSum();\n        final long effLeft = yesterdayEntry.getEffortLeftSum();\n\n        final double velocity = (origEst - effLeft) / length;\n\n        return new ExactEstimate((long) velocity);\n    }\n\n    public ExactEstimate calculateDailyVelocity(Iteration iteration) {\n        final LocalDate today = new LocalDate();\n        final IterationHistoryEntry entry = iterationHistoryEntryDAO.retrieveByDate(iteration.getId(), today.minusDays(1));\n        return calculateDailyVelocity(new LocalDate(iteration.getStartDate()), new LocalDate(iteration.getEndDate()), entry);\n    }\n    \n    public ExactDoubleEstimate calculateDailyStoryPointsVelocity(LocalDate start, LocalDate end, int points) {\n        final LocalDate today = new LocalDate();\n\n        if (points == 0)\n            return new ExactDoubleEstimate(0);\n        final LocalDate day = (today.isBefore(end)) ? today : end;\n\n        double length = Days.daysBetween(start, day).getDays();\n        if (length < 1) {\n            length = 1;\n        }\n\n        final double velocity = points / length;\n\n        return new ExactDoubleEstimate(velocity);\n    }\n\n    private Integer calculatePercent(Integer part, Integer total) {\n        if(total == 0) {\n            return 0;\n        }\n        return Math.round(100.0f * part / total);\n    }\n\n    public IterationMetrics getIterationMetrics(Iteration iteration) {\n        if (iteration == null) {\n            throw new IllegalArgumentException(\"Iteration must be not null.\");\n        }\n\n        IterationMetrics metrics = new IterationMetrics();\n\n        IterationHistoryEntry latestHistoryEntry = iterationHistoryEntryBusiness\n                .retrieveLatest(iteration);\n\n        // 1. Set original estimate and effort left\n        if (latestHistoryEntry == null) {\n            metrics.setOriginalEstimate(new ExactEstimate(0));\n            metrics.setEffortLeft(new ExactEstimate(0));\n        } else {\n            metrics.setOriginalEstimate(new ExactEstimate(latestHistoryEntry\n                    .getOriginalEstimateSum()));\n            metrics.setEffortLeft(new ExactEstimate(latestHistoryEntry\n                    .getEffortLeftSum()));\n        }\n        \n        // Set the planned size\n        if(iteration.getBacklogSize() == null)\n            metrics.setPlannedSize(new ExactEstimate(0));\n        else\n            metrics.setPlannedSize(new ExactEstimate(iteration.getBacklogSize().intValue()));\n\n        int doneStoryPoints = backlogBusiness.calculateDoneStoryPointSum(iteration.getId());\n        metrics.setDailyVelocity(calculateDailyStoryPointsVelocity(new LocalDate(iteration.getStartDate()), new LocalDate(iteration.getEndDate()), doneStoryPoints));\n\n        // 2. Set story points\n        metrics.setStoryPoints(backlogBusiness.getStoryPointSumByIteration(iteration));\n        metrics.setDoneStoryPoints(doneStoryPoints);\n\n        // 3. Set spent effort\n        long spentEffort = hourEntryBusiness\n                .calculateSumOfIterationsHourEntries(iteration);\n        metrics.setSpentEffort(new ExactEstimate(spentEffort));\n\n        // 3. Tasks done and Total\n        Pair<Integer, Integer> pairTasks = iterationDAO\n                .getCountOfDoneAndNonDeferred(iteration);\n        metrics.setTotalTasks(pairTasks.second);\n        metrics.setCompletedTasks(pairTasks.first);\n        \n\n        Pair<Integer, Integer>  pairStories = iterationDAO.getCountOfDoneAndAllStories(iteration);\n        metrics.setTotalStories(pairStories.second);\n        metrics.setCompletedStories(pairStories.first);\n\n        //4. iteration interval\n        LocalDate today = new LocalDate();\n        \n        metrics.setTotalDays(Days.daysBetween(iteration.getStartDate(), iteration.getEndDate()).getDays());\n        if (today.isBefore(iteration.getEndDate().toLocalDate())) {\n            metrics.setDaysLeft(backlogBusiness.daysLeftInSchedulableBacklog(iteration).getDays());\n        }\n        \n        //5. variance\n        metrics.setVariance(calculateVariance(iteration));\n        \n        //6. calculate percentages\n        metrics.setPercentDoneTasks(calculatePercent(pairTasks.first, pairTasks.second));\n        metrics.setPercentDoneStories(calculatePercent(pairStories.first, pairStories.second));\n        metrics.setPercentSpentEffort(calculatePercent(metrics.getSpentEffort().intValue(), metrics.getPlannedSize().intValue()));\n        if(metrics.getPercentSpentEffort() > 100)\n            metrics.setPercentSpentEffort(100);\n        metrics.setDoneStoryPointsPercentage(calculatePercent(metrics.getDoneStoryPoints(), metrics.getStoryPoints()));\n        metrics.setDaysLeftPercentage(calculatePercent(metrics.getDaysLeft(), metrics.getTotalDays()));\n        if(metrics.getEffortLeft() != null && metrics.getOriginalEstimate() != null) {\n            int effortDone = metrics.getOriginalEstimate().intValue() - metrics.getEffortLeft().intValue();\n            metrics.setCompletedEffortPercentage(calculatePercent(effortDone, metrics.getOriginalEstimate().intValue()));\n        }\n        \n        //7. calculate 'Value'\n        metrics.setTotalValue(backlogBusiness.getStoryValueSumByIteration(iteration));\n        metrics.setCompletedValue(backlogBusiness.getCompletedStoryValueSumByIteration(iteration));\n        metrics.setPercentCompletedValue(calculatePercent(metrics.getCompletedValue(), metrics.getTotalValue()));\n        return metrics;\n    }\n\n    \n    public IterationTO storeStandAlone(int iterationId, Iteration iterationData, Set<Integer> assigneeIds, Set<Integer> teams) {\n        final int emptyParentId = 0;\n        return store(iterationId, emptyParentId, iterationData, assigneeIds, teams);\n    }\n    \n    \n    public IterationTO store(int iterationId, int parentBacklogId, Iteration iterationData, Set<Integer> assigneeIds, Set<Integer> teamIds) {\n        Backlog parent = null;\n        if(parentBacklogId != 0) {\n            parent = this.backlogBusiness.retrieve(parentBacklogId);\n        }\n        if (parent instanceof Iteration) {\n            throw new IllegalArgumentException(\n                    \"Nested iterations are not allowed.\");\n        }\n        if (iterationData.getEndDate().isBefore(iterationData.getStartDate())) {\n            throw new IllegalArgumentException(\"End date before start date\");\n        }\n        if (iterationId == 0) {\n            return transferObjectBusiness.constructIterationTO(this.create(parent, iterationData, assigneeIds, teamIds));\n        }\n \n        Iteration iter = this.retrieve(iterationId);\n        \n        // Get teams\n        Set<Team> teams = new HashSet<Team>();\n        if (teamIds != null) {\n            for (Integer tid : teamIds) {\n                teams.add(teamBusiness.retrieve(tid));\n            }\n            iter.setTeams(teams);\n        }\n        \n        iter.setStartDate(iterationData.getStartDate());\n        iter.setEndDate(iterationData.getEndDate());\n        iter.setBacklogSize(iterationData.getBacklogSize());\n        iter.setBaselineLoad(iterationData.getBaselineLoad());\n        iter.setDescription(iterationData.getDescription());\n        iter.setName(iterationData.getName());\n        iter.setReadonlyToken(iterationData.getReadonlyToken());\n        setAssignees(iter, assigneeIds);\n        this.iterationDAO.store(iter);\n        if (parent != null && iter.getParent() != parent) {\n            this.moveTo(iter, parent);\n        }\n        return transferObjectBusiness.constructIterationTO(iter);\n    }\n\n    private Iteration create(Backlog parentBacklog, Iteration iterationData, Set<Integer> assigneeIds, Set<Integer> teamIds) {\n        if (parentBacklog != null) {\n            iterationData.setParent(parentBacklog);\n        }\n        int iterationId = (Integer) this.iterationDAO.create(iterationData);\n        Iteration iter = this.retrieve(iterationId);\n        \n        setAssignees(iter, assigneeIds);\n        \n        //only set teams for standalone iterations\n        if(parentBacklog == null)\n            setTeams(iter, teamIds);\n        \n        return iter;\n    }\n    \n    private void setAssignees(Iteration iteration, Set<Integer> assigneeIds) {\n        if (assigneeIds != null) {\n            for(Assignment assignment : iteration.getAssignments()) {\n                if(!assigneeIds.contains(assignment.getUser().getId())) {\n                    assignmentBusiness.delete(assignment.getId());\n                }\n            }\n            assignmentBusiness.addMultiple(iteration, assigneeIds);\n        }\n    }\n\n    private void setTeams(Iteration iteration, Set<Integer> teamIds) {\n        // Get teams\n        Set<Team> teams = new HashSet<Team>();\n        if (teamIds != null) {\n            for (Integer tid : teamIds) {\n                teams.add(teamBusiness.retrieve(tid));\n            }\n            iteration.setTeams(teams);\n        }\n    }\n    public void moveTo(Iteration iter, Backlog parent) {\n        Backlog oldParent = iter.getParent();\n        iter.setParent(parent);\n        this.iterationDAO.store(iter);\n        if (oldParent instanceof Project) {\n            this.backlogHistoryEntryBusiness.updateHistory(oldParent.getId());\n        }\n        if (parent instanceof Project) {\n            this.backlogHistoryEntryBusiness.updateHistory(parent.getId());\n        }\n    }\n\n    public Collection<Iteration> retrieveCurrentAndFutureIterations() {\n        DateTime now = new DateTime();\n        DateTime dayStart = now.withMillisOfDay(0);\n\n        return iterationDAO.retrieveCurrentAndFutureIterationsAt(dayStart);\n    }\n    \n    \n    public Collection<Iteration> retrieveAllStandAloneIterations() {\n        return iterationDAO.retrieveAllStandAloneIterations();\n    }\n    \n    public Set<AssignmentTO> calculateAssignedLoadPerAssignee(Iteration iter) {\n        List<Task> iterationTasks = this.iterationDAO\n                .getAllTasksForIteration(iter);\n\n        Map<Integer, AssignmentTO> assignments = new HashMap<Integer, AssignmentTO>();\n        long unassignedLoad = 0L;\n        int totalAvailability = 0;\n\n        for (Assignment assignment : iter.getAssignments()) {\n            AssignmentTO to = new AssignmentTO(assignment);\n            assignments.put(assignment.getUser().getId(), to);\n            totalAvailability += assignment.getAvailability();\n        }\n        if (totalAvailability == 0) {\n            totalAvailability = 1;\n        }\n\n        for (Task task : iterationTasks) {\n            int responsibleCount = task.getResponsibles().size();\n            long taskEffort = (task.getEffortLeft() != null) ? task\n                    .getEffortLeft().longValue() : 0;\n            if (responsibleCount != 0) {\n                Collection<User> responsibles = task.getResponsibles();\n                divideTaskLoad(assignments, responsibleCount, taskEffort,\n                        responsibles);\n            } else if (task.getStory() != null\n                    && !task.getStory().getResponsibles().isEmpty()) {\n                responsibleCount = task.getStory().getResponsibles().size();\n                Collection<User> responsibles = task.getStory()\n                        .getResponsibles();\n                divideTaskLoad(assignments, responsibleCount, taskEffort,\n                        responsibles);\n\n            } else {\n                unassignedLoad += taskEffort;\n            }\n        }\n        float timeframeLeft = backlogBusiness\n                .calculateBacklogTimeframePercentageLeft(iter);\n        float weeksLeft = (float) backlogBusiness.daysLeftInSchedulableBacklog(iter).getDays() / 7.0f;\n        long iterationBaselineLoad = 0l;\n        if (iter.getBaselineLoad() != null) {\n            iterationBaselineLoad = (long) (iter.getBaselineLoad().floatValue() * weeksLeft);\n        }\n        for (AssignmentTO assignment : assignments.values()) {\n            float assignedPortion = (float) assignment.getAvailability()\n                    / (float) totalAvailability;\n            assignment.getBaselineLoad().add(iterationBaselineLoad);\n            assignment.setUnassignedLoad(new ExactEstimate(\n                    (long) (assignedPortion * (float) unassignedLoad)));\n\n            ExactEstimate iterationWorkHours;\n            if(iter.getBacklogSize() != null) {\n                iterationWorkHours = new ExactEstimate(Math\n                        .round(timeframeLeft * iter.getBacklogSize().floatValue()\n                                * assignedPortion));\n            } else {\n                iterationWorkHours = new ExactEstimate(0);\n            }\n            assignment.setAvailableWorktime(iterationWorkHours);\n            SignedExactEstimate totalLoad = new SignedExactEstimate(0);\n            totalLoad.add(assignment.getUnassignedLoad().longValue());\n            totalLoad.add(assignment.getAssignedLoad().longValue());\n            if (assignment.getPersonalLoad() != null) {\n                assignment.getBaselineLoad().add(\n                        (long) (weeksLeft * assignment.getPersonalLoad()\n                                .floatValue()));\n            }\n            if(assignment.getBaselineLoad() != null) {\n                totalLoad.add(assignment.getBaselineLoad().longValue());\n            }\n            assignment.setTotalLoad(totalLoad);\n            if (iterationWorkHours.longValue() > 0l) {\n                assignment.setLoadPercentage(Math.round(100f\n                        * assignment.getTotalLoad().floatValue()\n                        / assignment.getAvailableWorktime().floatValue()));\n            }\n        }\n        return new HashSet<AssignmentTO>(assignments.values());\n    }\n\n    private void divideTaskLoad(Map<Integer, AssignmentTO> assignments,\n            int responsibleCount, long taskEffort, Collection<User> responsibles) {\n        for (User user : responsibles) {\n            AssignmentTO assignment = assignments.get(user.getId());\n            if (assignment == null) {\n                assignment = new AssignmentTO(new Assignment());\n                assignment.setAvailability(0);\n                assignment.setId(-1 * user.getId()); // user negative and\n                                                     // context unique id for\n                                                     // non-persited assignment\n                assignment.setUser(user);\n                assignment.setUnassigned(true);\n                assignments.put(user.getId(), assignment);\n            }\n            assignment.getAssignedLoad().add(taskEffort / responsibleCount);\n        }\n    }\n    \n    public Integer calculateVariance(Iteration iter) {\n        IterationHistoryEntry latestHistoryEntry = iterationHistoryEntryBusiness\n        .retrieveLatest(iter);\n        if(latestHistoryEntry == null) {\n            return null;\n        }\n        long effortLeft = latestHistoryEntry.getEffortLeftSum();\n        long dailyVelocity = calculateDailyVelocity(iter).longValue();\n        if(dailyVelocity != 0 && iter.getStartDate().isBeforeNow() && effortLeft != 0) {\n            int daysLeft = (int) (effortLeft / dailyVelocity);\n            return daysLeft - backlogBusiness.daysLeftInSchedulableBacklog(iter).getDays(); \n        } else {\n            return null;\n        }      \n    }\n    \n    @SuppressWarnings(\"unchecked\")\n    public List<AgilefantHistoryEntry> retrieveChangesInIterationStories(\n            Iteration iteration) {\n        List<AgilefantHistoryEntry> added = this.backlogHistoryDAO\n                .retrieveAddedStories(iteration);\n        List<AgilefantHistoryEntry> deleted = this.backlogHistoryDAO\n                .retrieveDeletedStories(iteration);\n        for (AgilefantHistoryEntry entry : deleted) {\n            Story story = this.storyHistoryDAO.retrieveClosestRevision(entry\n                    .getObjectId(), entry.getRevision().getId());\n            entry.setObject(story);\n        }\n        \n        List<AgilefantHistoryEntry> modified = this.backlogHistoryDAO\n                .retrieveModifiedStories(iteration);\n        for (AgilefantHistoryEntry entry : modified) {\n            Story story = this.storyHistoryDAO.retrieveClosestRevision(entry\n                    .getObjectId(), entry.getRevision().getId());\n            entry.setObject(story);\n        }\n        \n        List<AgilefantHistoryEntry> ret = new ArrayList<AgilefantHistoryEntry>();\n        ret.addAll(added);\n        ret.addAll(deleted);\n        ret.addAll(modified);\n        \n        Collections.sort(ret, new PropertyComparator(\"revision.timestamp\",\n                true, false));\n        return ret;\n    }\n\n    /**\n     * This is to retrieve task history given an iteration, for all possible\n     * task modifications\n     * \n     * Task revisions are stored in table 'tasks_AUD' given the current\n     * iteration (iteration_id). Note that if story_id is NULL, the selected\n     * task does not belong to any story.     \n     *       \n     * Interface needed: TaskHistoryDAO in db.history package\n     *  --> add function retrieveAllTaskRevisions(iteration)\n     * Implementation: TaskHistoryDAOImpl in db.history.impl package\n     *  --> implement the added function. --> Note that this is the same\n     *  as BacklogHistoryDAO, except that it uses the Iteration class instead\n     *  of the Backlog class.\n     * \n     * @author aborici\n     * \n     */\n    @SuppressWarnings(\"unchecked\")\n    public List<AgilefantHistoryEntry> retrieveChangesInIterationTasks(\n            Iteration iteration) {\n        \n        List<AgilefantHistoryEntry> allTasks = this.taskHistoryDAO\n                .retrieveAllTaskRevisions(iteration);\n       \n        List<AgilefantHistoryEntry> ret = new ArrayList<AgilefantHistoryEntry>();\n        ret.addAll(allTasks);\n        \n        Collections.sort(ret, new PropertyComparator(\"revision.timestamp\",\n                true, false));\n        \n        return ret;\n    }\n    \n    /**\n     * This is to mingle task and story revisions by sorting them based on\n     * timestamp.\n     * \n     * @author aborici\n     * \n     */\n    @SuppressWarnings(\"unchecked\")\n    public List<AgilefantHistoryEntry> renderSortedTaskAndStoryRevisions (\n            Iteration iteration) {\n\n        // merge tasks and stories into list 'ret':\n        List<AgilefantHistoryEntry> ret = new ArrayList<AgilefantHistoryEntry>();\n        ret.addAll(this.retrieveChangesInIterationStories(iteration));\n        ret.addAll(this.retrieveChangesInIterationTasks(iteration));\n        \n        Collections.sort(ret, new PropertyComparator(\"revision.timestamp\",\n                true, false));\n\n        return ret;\n    }\n    \n    public Iteration retreiveIterationByReadonlyToken(String readonlyToken) {\n        Iteration iteration = iterationDAO.getIterationFromReadonlyToken(readonlyToken);\n        return iteration;\n    }\n    \n    public int getIterationCountFromReadonlyToken(String readonlyToken) {\n        int count = iterationDAO.getIterationCountFromReadonlyToken(readonlyToken);\n        return count;\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\impl\\\\IterationHistoryEntryBusinessImpl.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["IterationHistoryEntryBusinessImpl"], "AN": ["iterationHistoryEntryDAO", "iterationDAO"], "SCS_VariableDeclarator": ["iterationHistoryEntryDAO", "iterationDAO", "iteration", "latest", "newEntry", "sums", "oldOriginalEstimateSum", "effortLeftSum", "originalEstimateSum", "latestEntry", "days"], "SCS_ConstructorDeclaration": ["IterationHistoryEntryBusinessImpl"], "SCS_ClassReference": ["IterationHistoryEntry", "iterationDAO", "iterationHistoryEntryDAO", "newEntry", "newEntry", "iterationHistoryEntryDAO", "latest", "sums.first", "sums.second", "Days", null, "latest", null, null, "latest", "latest", "latest", "latest", "iterationHistoryEntryDAO", "newEntry", "newEntry", "newEntry", "iterationHistoryEntryDAO", "iterationHistoryEntryDAO", "iteration", "latestEntry", "iterationHistoryEntryDAO", "iteration", "iterationHistoryEntryDAO", "iteration", "velocity", "Math", "effortLeft", "velocity", "startDate"], "MN": ["setIterationHistoryEntryDAO", "updateIterationHistory", "getLatestOriginalEstimateSum", "getHistoryEntriesForIteration", "retrieveLatest", "setIterationDAO", "calculateExpectedEffortDoneDate"], "PN": ["iterationHistoryEntryDAO", "iterationId", "iteration", "iteration", "iteration", "iterationDAO", "startDate", "effortLeft", "velocity"], "SCS_MemberReference": ["iterationHistoryEntryDAO", "iterationHistoryEntryDAO", "genericDAO", "iterationHistoryEntryDAO", "iterationId", "iterationId", "iteration", "iterationId", "latest", "first", "second", "latest", "effortLeftSum", "originalEstimateSum", "originalEstimateSum", "oldOriginalEstimateSum", "latest", "effortLeftSum", "originalEstimateSum", "originalEstimateSum", "oldOriginalEstimateSum", "newEntry", "latestEntry", "iterationDAO", "iterationDAO", "SUPPORTS", "days"], "SCS_VariableDeclaration": ["Iteration", "IterationHistoryEntry", "IterationHistoryEntry", "Pair", "long", "long", "long", "IterationHistoryEntry", "int"], "SCS_MethodInvocation": ["get", "retrieveLatest", "setIteration", "setTimestamp", "calculateCurrentHistoryData", "getOriginalEstimateSum", "getMinorUnits", "getMinorUnits", "daysBetween", "getDays", "getTimestamp", "toDateMidnight", "toDateMidnight", "setEffortLeftSum", "setOriginalEstimateSum", "setDeltaOriginalEstimate", "getDeltaOriginalEstimate", "store", "setEffortLeftSum", "setOriginalEstimateSum", "setDeltaOriginalEstimate", "store", "retrieveLatest", "getId", "getOriginalEstimateSum", "getHistoryEntriesForIteration", "getId", "retrieveLatest", "getId", "getMinorUnits", "ceil", "getMinorUnits", "getMinorUnits", "plusDays"], "CO": ["/** {@inheritDoc} */"], "CODE": "package fi.hut.soberit.agilefant.business.impl;\n\nimport java.util.List;\n\nimport org.joda.time.DateTime;\nimport org.joda.time.Days;\nimport org.joda.time.LocalDate;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Propagation;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport fi.hut.soberit.agilefant.business.IterationHistoryEntryBusiness;\nimport fi.hut.soberit.agilefant.db.IterationDAO;\nimport fi.hut.soberit.agilefant.db.IterationHistoryEntryDAO;\nimport fi.hut.soberit.agilefant.model.ExactEstimate;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.IterationHistoryEntry;\nimport fi.hut.soberit.agilefant.util.Pair;\n\n@Service(\"iterationHistoryEntryBusiness\")\n@Transactional\npublic class IterationHistoryEntryBusinessImpl extends\n        GenericBusinessImpl<IterationHistoryEntry> implements\n        IterationHistoryEntryBusiness {\n    \n    private IterationHistoryEntryDAO iterationHistoryEntryDAO;\n    \n    @Autowired\n    private IterationDAO iterationDAO;    \n    \n    public IterationHistoryEntryBusinessImpl() {\n        super(IterationHistoryEntry.class);\n    }\n    \n    @Autowired\n    public void setIterationHistoryEntryDAO(\n            IterationHistoryEntryDAO iterationHistoryEntryDAO) {\n        this.iterationHistoryEntryDAO = iterationHistoryEntryDAO;\n        this.genericDAO = iterationHistoryEntryDAO;\n    }\n  \n    public void updateIterationHistory(int iterationId) {\n        Iteration iteration = iterationDAO.get(iterationId);\n        IterationHistoryEntry latest = iterationHistoryEntryDAO.retrieveLatest(iterationId);\n        IterationHistoryEntry newEntry = new IterationHistoryEntry();\n        newEntry.setIteration(iteration);\n        newEntry.setTimestamp(new LocalDate());\n        Pair<ExactEstimate, ExactEstimate> sums = iterationHistoryEntryDAO.calculateCurrentHistoryData(iterationId);\n        long oldOriginalEstimateSum = (latest == null) ? 0 : latest.getOriginalEstimateSum();\n        long effortLeftSum = (sums.first == null) ? 0 : sums.first.getMinorUnits();\n        long originalEstimateSum = (sums.second == null) ? 0 : sums.second.getMinorUnits();\n        \n        if (latest != null &&\n                Days.daysBetween(latest.getTimestamp().toDateMidnight(), new DateTime().toDateMidnight()).getDays() == 0) {\n            latest.setEffortLeftSum(effortLeftSum);\n            latest.setOriginalEstimateSum(originalEstimateSum);\n            latest.setDeltaOriginalEstimate(latest.getDeltaOriginalEstimate() + originalEstimateSum - oldOriginalEstimateSum);\n            iterationHistoryEntryDAO.store(latest);\n        }\n        else {\n            newEntry.setEffortLeftSum(effortLeftSum);\n            newEntry.setOriginalEstimateSum(originalEstimateSum);\n            newEntry.setDeltaOriginalEstimate(originalEstimateSum - oldOriginalEstimateSum);\n            iterationHistoryEntryDAO.store(newEntry);\n        }\n    }\n    \n    @Transactional(readOnly = true)\n    public ExactEstimate getLatestOriginalEstimateSum(Iteration iteration) {\n        IterationHistoryEntry latestEntry = iterationHistoryEntryDAO.retrieveLatest(iteration.getId());\n        if (latestEntry == null) {\n            return new ExactEstimate(0);\n        }\n        return new ExactEstimate(latestEntry.getOriginalEstimateSum());\n    }\n    \n    /** {@inheritDoc} */\n    @Transactional(readOnly = true)\n    public List<IterationHistoryEntry> getHistoryEntriesForIteration(Iteration iteration) {\n        return iterationHistoryEntryDAO.getHistoryEntriesForIteration(iteration.getId());\n    }\n    \n    @Transactional(readOnly = true)\n    public IterationHistoryEntry retrieveLatest(Iteration iteration) {\n        return iterationHistoryEntryDAO.retrieveLatest(iteration.getId());\n    }\n    \n    public void setIterationDAO(IterationDAO iterationDAO) {\n        this.iterationDAO = iterationDAO;\n    }\n\n    @Transactional(readOnly = true, propagation = Propagation.SUPPORTS)\n    public LocalDate calculateExpectedEffortDoneDate(LocalDate startDate,\n            ExactEstimate effortLeft, ExactEstimate velocity) {\n        if (velocity.getMinorUnits() == 0) return null;\n        int days = (int)Math.ceil(effortLeft.getMinorUnits() / velocity.getMinorUnits());\n        return startDate.plusDays(days);\n    }\n    \n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\impl\\\\LabelBusinessImpl.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["LabelBusinessImpl"], "AN": ["labelDAO", "storybusiness"], "SCS_VariableDeclarator": ["labelDAO", "storybusiness", "story", "l", "labelId", "persisted", "currentUser", "story", "name", "label", "labelId", "persisted"], "SCS_ConstructorDeclaration": ["LabelBusinessImpl"], "SCS_ClassReference": ["Label", "labelDAO", "storybusiness", "labelDAO", "l", "labelDAO", "labelDAO", "story", null, "SecurityUtil", "storybusiness", "labelDAO", "label", "label", "label", "label", "label", "labelDAO", "labelDAO", "story", null, "labelDAO"], "MN": ["setLabelDAO", "store", "deleteLabel", "createStoryLabelsSet", "createStoryLabels", "lookupLabelsLike"], "PN": ["labelDAO", "label", "label", "labels", "storyId", "labelNames", "storyId", "labelName"], "SCS_MemberReference": ["genericDAO", "labelDAO", "labelDAO", "labelDAO", "label", "labels", "storyId", "labels", "story", "l", "labelId", "persisted", "labelNames", "storyId", "labelNames", "name", "story", "name", "name", "currentUser", "story", "label", "labelId", "persisted", "labelName"], "SCS_MethodInvocation": ["remove", "retrieve", "labelExists", "getName", "create", "get", "getLabels", "add", "getLoggedUser", "retrieve", "labelExists", "setDisplayName", "setName", "setCreator", "setStory", "setTimestamp", "create", "get", "getLabels", "add", "lookupLabelsLike"], "SCS_VariableDeclaration": ["Story", "Label", "int", "Label", "User", "Story", "String", "Label", "int", "Label"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.business.impl;\n\nimport java.util.List;\nimport java.util.Set;\n\nimport org.joda.time.DateTime;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport fi.hut.soberit.agilefant.business.LabelBusiness;\nimport fi.hut.soberit.agilefant.business.StoryBusiness;\nimport fi.hut.soberit.agilefant.db.LabelDAO;\nimport fi.hut.soberit.agilefant.exception.OperationNotPermittedException;\nimport fi.hut.soberit.agilefant.model.Label;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.security.SecurityUtil;\n\n@Service(\"labelBusiness\")\n@Transactional\npublic class LabelBusinessImpl extends GenericBusinessImpl<Label> implements\n        LabelBusiness {\n    \n    private LabelDAO labelDAO;\n\n    public LabelBusinessImpl() {\n        super(Label.class);\n    }\n    \n    @Autowired\n    private StoryBusiness storybusiness;\n    \n    @Autowired\n    public void setLabelDAO(LabelDAO labelDAO) {\n        this.genericDAO = labelDAO;\n        this.labelDAO = labelDAO;\n    }\n    \n    @Override\n    public void store(Label label){\n        throw new OperationNotPermittedException(\"Labels cannot be edited!\");\n    }\n\n    public void deleteLabel(Label label) {\n       labelDAO.remove(label);\n    }\n     \n    public void createStoryLabelsSet(Set<Label> labels, Integer storyId)\n    {\n        if (labels == null)\n            return;\n        Story story = storybusiness.retrieve(storyId);\n        for (Label l : labels)\n        {\n            if (!labelDAO.labelExists(l.getName(), story))\n            {\n                int labelId = (Integer)labelDAO.create(l);\n                Label persisted = labelDAO.get(labelId);\n                story.getLabels().add(persisted);\n            }\n        }\n    }\n    \n    public void createStoryLabels(List<String> labelNames, Integer storyId) {\n        if(labelNames == null) {\n            return;\n        }\n        User currentUser = SecurityUtil.getLoggedUser();\n        Story story = storybusiness.retrieve(storyId);\n        for (String name : labelNames){\n                if (labelDAO.labelExists(name, story)){\n                } else {\n                    Label label = new Label();\n                    label.setDisplayName(name);\n                    label.setName(name);\n                    label.setCreator(currentUser);\n                    label.setStory(story);\n                    label.setTimestamp(new DateTime());\n                    int labelId = (Integer)labelDAO.create(label);\n                    Label persisted = labelDAO.get(labelId);\n                    story.getLabels().add(persisted);\n                }\n        }\n    }\n    \n    public List<Label> lookupLabelsLike(String labelName) {\n        return labelDAO.lookupLabelsLike(labelName);\n    }\n    \n\n\n}", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\impl\\\\LoginBusinessImpl.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["LoginBusinessImpl"], "AN": ["loginDAO"], "SCS_VariableDeclarator": ["loginDAO"], "MN": ["setLoginDAO", "retrieveLoginsByUser", "retrieveLoginCountByUser"], "PN": ["loginDAO", "user", "user"], "SCS_MemberReference": ["loginDAO", "loginDAO", "genericDAO", "loginDAO", "loginDAO", "user", "loginDAO", "user"], "SCS_ConstructorDeclaration": ["LoginBusinessImpl"], "SCS_ClassReference": ["Login", null, null], "SCS_MethodInvocation": ["retrieveLoginsByUser", "retrieveLoginCountByUser"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.business.impl;\n\n\nimport java.util.List;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport fi.hut.soberit.agilefant.business.LoginBusiness;\nimport fi.hut.soberit.agilefant.db.LoginDAO;\nimport fi.hut.soberit.agilefant.model.Login;\nimport fi.hut.soberit.agilefant.model.User;\n\n@Service(\"loginBusiness\")\npublic class LoginBusinessImpl extends GenericBusinessImpl<Login> implements\n        LoginBusiness {\n    \n    @Autowired\n    private LoginDAO loginDAO;\n    \n    @Autowired\n    public void setLoginDAO(LoginDAO loginDAO) {\n        this.loginDAO = loginDAO;\n        this.genericDAO = loginDAO;\n    }\n\n    public LoginBusinessImpl() {\n        super(Login.class);\n    }\n\n\t@Override\n    @Transactional(readOnly=true)\n    public List<Login> retrieveLoginsByUser(User user) {\n        return this.loginDAO.retrieveLoginsByUser(user);\n    }\n\n\t@Override\n    @Transactional(readOnly=true)\n\tpublic int retrieveLoginCountByUser(User user) {\n\t\treturn this.loginDAO.retrieveLoginCountByUser(user);\n\t}\n\n  \n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\impl\\\\MenuBusinessImpl.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["MenuBusinessImpl"], "AN": ["iterationDAO", "projectDAO", "storyDAO", "productBusiness", "iterationBusiness", "transferObjectBusiness", "userBusiness", "authorizationBusiness"], "SCS_VariableDeclarator": ["iterationDAO", "projectDAO", "storyDAO", "productBusiness", "iterationBusiness", "transferObjectBusiness", "userBusiness", "authorizationBusiness", "nodes", "products", "prod", "standAloneIterations", "standaloneIterationNodes", "iteration", "standaloneIterationsParentNode", "mdn", "children", "backlogClassType", "child", "projects", "iterations", "stories", "builder", "project", "iteration", "story"], "MN": ["constructBacklogMenuData", "constructMenuDataNode", "constructMyAssignmentsData", "checkAccess", "setProductBusiness", "setIterationBusiness", "setTransferObjectBusiness", "setIterationDAO", "setProjectDAO", "setStoryDAO", "setUserBusiness", "setAuthorizationBusiness"], "PN": ["backlog", "user", "bl", "productBusiness", "iterationBusiness", "transferObjectBusiness", "iterationDAO", "projectDAO", "storyDAO", "userBusiness", "authorizationBusiness"], "SCS_VariableDeclaration": ["List", "List", "Product", "List", "List", "Iteration", "MenuDataNode", "MenuDataNode", "List", "BacklogType", "Backlog", "List", "List", "List", "MyAssignmentsMenuBuilder", "Project", "Iteration", "Story"], "SCS_ClassReference": ["productBusiness", "Collections", "", "nodes", "", "iterationBusiness", "", "standaloneIterationNodes", "", "standAloneIterations", "standaloneIterationsParentNode", "standaloneIterationsParentNode", "standaloneIterationsParentNode", "standaloneIterationsParentNode", "nodes", "mdn", "backlog", "mdn", "backlog", "mdn", "transferObjectBusiness", "children", "backlog", "Collections", "BacklogType", "mdn", "mdn", null, "", "projectDAO", "user", "iterationDAO", "user", "storyDAO", "user", "builder", "builder", "builder", "builder", null, "bl", "SecurityUtil"], "SCS_MethodInvocation": ["retrieveAllOrderByName", "sort", "checkAccess", "add", "constructMenuDataNode", "retrieveAllStandAloneIterations", "checkAccess", "add", "constructMenuDataNode", "size", "setTitle", "setType", "setId", "setChildren", "add", "setTitle", "getName", "setId", "getId", "setScheduleStatus", "getBacklogScheduleStatus", "addAll", "getChildren", "sort", "forBacklog", "setType", "getChildren", "add", "constructMenuDataNode", "retrieveActiveWithUserAssigned", "getId", "retrieveActiveWithUserAssigned", "getId", "retrieveActiveIterationStoriesWithUserResponsible", "getId", "insert", "insert", "insert", "getNodes", "isBacklogAccessible", "getId", "getLoggedUser"], "SCS_MemberReference": ["products", "products", "prod", "prod", "standAloneIterations", "iteration", "iteration", "PRODUCT", "standaloneIterationNodes", "standaloneIterationsParentNode", "nodes", "backlog", "EMPTY_LIST", "backlog", "children", "children", "backlog", "backlogClassType", "backlogClassType", "children", "child", "mdn", "projects", "project", "iterations", "iteration", "stories", "story", "authorizationBusiness", "productBusiness", "productBusiness", "iterationBusiness", "iterationBusiness", "transferObjectBusiness", "transferObjectBusiness", "iterationDAO", "iterationDAO", "projectDAO", "projectDAO", "storyDAO", "storyDAO", "userBusiness", "userBusiness", "authorizationBusiness", "authorizationBusiness"], "CO": ["/**\n * The implementation class for calculating data to the lefthand menu.\n * \n * @author rjokelai\n */", "// optimization"], "CODE": "package fi.hut.soberit.agilefant.business.impl;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.LinkedList;\nimport java.util.List;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.support.PropertyComparator;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport fi.hut.soberit.agilefant.business.AuthorizationBusiness;\nimport fi.hut.soberit.agilefant.business.IterationBusiness;\nimport fi.hut.soberit.agilefant.business.MenuBusiness;\nimport fi.hut.soberit.agilefant.business.ProductBusiness;\nimport fi.hut.soberit.agilefant.business.TransferObjectBusiness;\nimport fi.hut.soberit.agilefant.business.UserBusiness;\nimport fi.hut.soberit.agilefant.db.IterationDAO;\nimport fi.hut.soberit.agilefant.db.ProjectDAO;\nimport fi.hut.soberit.agilefant.db.StoryDAO;\nimport fi.hut.soberit.agilefant.model.Backlog;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.Product;\nimport fi.hut.soberit.agilefant.model.Project;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.security.SecurityUtil;\nimport fi.hut.soberit.agilefant.transfer.BacklogType;\nimport fi.hut.soberit.agilefant.transfer.MenuDataNode;\nimport fi.hut.soberit.agilefant.util.MyAssignmentsMenuBuilder;\n\n/**\n * The implementation class for calculating data to the lefthand menu.\n * \n * @author rjokelai\n */\n@Service(\"menuBusiness\")\n@Transactional\npublic class MenuBusinessImpl implements MenuBusiness {\n\n    @Autowired\n    private IterationDAO iterationDAO;\n    \n    @Autowired\n    private ProjectDAO projectDAO;\n    \n    @Autowired\n    private StoryDAO storyDAO;\n    \n    @Autowired\n    private ProductBusiness productBusiness;\n    \n    @Autowired\n    private IterationBusiness iterationBusiness;\n\n    @Autowired\n    private TransferObjectBusiness transferObjectBusiness;\n    \n    @Autowired\n    private UserBusiness userBusiness;\n    \n    @Autowired\n    private AuthorizationBusiness authorizationBusiness;\n\n    @SuppressWarnings(\"unchecked\")\n    public List<MenuDataNode> constructBacklogMenuData() {\n    \t\n        List<MenuDataNode> nodes = new ArrayList<MenuDataNode>();\n        List<Product> products = new ArrayList<Product>(productBusiness\n                .retrieveAllOrderByName());\n        Collections.sort(products, new PropertyComparator(\"name\", true, true));\n\n        for (Product prod : products) {\n        \tif (checkAccess(prod)) {\n                nodes.add(constructMenuDataNode(prod));\n            }\n        }\n        \n        final List<Iteration> standAloneIterations = new ArrayList<Iteration>(iterationBusiness.retrieveAllStandAloneIterations());\n        \n        List<MenuDataNode> standaloneIterationNodes = new LinkedList<MenuDataNode>();\n        for (Iteration iteration: standAloneIterations) {\n            if (checkAccess(iteration)) {\n                standaloneIterationNodes.add(constructMenuDataNode(iteration));\n            }\n        }\n        if (standAloneIterations.size() > 0) {\n            MenuDataNode standaloneIterationsParentNode = new MenuDataNode();\n            standaloneIterationsParentNode.setTitle(\"[Standalone iterations]\");\n            standaloneIterationsParentNode.setType(BacklogType.PRODUCT);\n            standaloneIterationsParentNode.setId(-1);\n            standaloneIterationsParentNode.setChildren(standaloneIterationNodes);\n            nodes.add(standaloneIterationsParentNode);\n        }\n        \n        return nodes;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    private MenuDataNode constructMenuDataNode(Backlog backlog) {\n        MenuDataNode mdn = new MenuDataNode();\n        mdn.setTitle(backlog.getName());\n        mdn.setId(backlog.getId());\n        mdn.setScheduleStatus(transferObjectBusiness\n                .getBacklogScheduleStatus(backlog));\n        List<Backlog> children = Collections.EMPTY_LIST;\n        if (!(backlog instanceof Iteration)) { // optimization\n            children = new ArrayList<Backlog>();\n            children.addAll(backlog.getChildren());\n            Collections.sort(children, new PropertyComparator(\"startDate\",\n                    true, true));\n        }\n        \n        final BacklogType backlogClassType = BacklogType.forBacklog(backlog);\n        if (backlogClassType != null) {\n            mdn.setType(backlogClassType);\n        }\n        \n        for (Backlog child : children) {\n            mdn.getChildren().add(constructMenuDataNode(child));\n        }\n\n        return mdn;\n    }\n    \n    @Transactional(readOnly = true)\n    public List<MenuDataNode> constructMyAssignmentsData(User user) {\n        List<Project> projects = projectDAO.retrieveActiveWithUserAssigned(user.getId());\n        List<Iteration> iterations = iterationDAO.retrieveActiveWithUserAssigned(user.getId());\n        List<Story> stories = storyDAO.retrieveActiveIterationStoriesWithUserResponsible(user.getId());\n        MyAssignmentsMenuBuilder builder = new MyAssignmentsMenuBuilder();\n        \n        for (Project project : projects) {\n            builder.insert(project);\n        }\n        for (Iteration iteration : iterations) {\n            builder.insert(iteration);\n        }\n        for (Story story : stories) {\n            builder.insert(story);\n        }\n        \n        return builder.getNodes();\n    }\n    \n    private boolean checkAccess(Backlog bl){\n        return this.authorizationBusiness.isBacklogAccessible(bl.getId(), SecurityUtil.getLoggedUser());\n    }\n\n    public void setProductBusiness(ProductBusiness productBusiness) {\n        this.productBusiness = productBusiness;\n    }\n    \n    public void setIterationBusiness(IterationBusiness iterationBusiness) {\n        this.iterationBusiness = iterationBusiness;\n    }\n\n    public void setTransferObjectBusiness(\n            TransferObjectBusiness transferObjectBusiness) {\n        this.transferObjectBusiness = transferObjectBusiness;\n    }\n    \n    public void setIterationDAO(IterationDAO iterationDAO) {\n        this.iterationDAO = iterationDAO;\n    }\n    \n    public void setProjectDAO(ProjectDAO projectDAO) {\n        this.projectDAO = projectDAO;\n    }\n    \n    public void setStoryDAO(StoryDAO storyDAO) {\n        this.storyDAO = storyDAO;\n    }\n    \n    public void setUserBusiness(UserBusiness userBusiness) {\n    \tthis.userBusiness = userBusiness;\n    }\n    \n    public void setAuthorizationBusiness(AuthorizationBusiness authorizationBusiness) {\n    \tthis.authorizationBusiness = authorizationBusiness;\n    }\n    \n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\impl\\\\NotificationEmailSender.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["NotificationEmailSender"], "AN": ["NOTIFICATION_BUSINESS_BEAN_NAME", "logger", "notificationsConfiguration", "mailSender", "asyncTaskExecutor", "newStoryTemplate", "updateStoryTemplate", "deleteStoryTemplate", "newTaskTemplate", "updateTaskTemplate", "deleteTaskTemplate", "agilefantUrl", "notificationsEnabled"], "SCS_VariableDeclarator": ["NOTIFICATION_BUSINESS_BEAN_NAME", "logger", "notificationsConfiguration", "mailSender", "asyncTaskExecutor", "newStoryTemplate", "updateStoryTemplate", "deleteStoryTemplate", "newTaskTemplate", "updateTaskTemplate", "deleteTaskTemplate", "agilefantUrl", "notificationsEnabled", "notificationConfiguration", "notificationEventEntityProperty", "notificationMessage", "mail", "subjectTemplate", "bodyTemplate", "story", "task", "taskParentUrl", "notificationRecipients", "recipientsMails", "responsibleUsers", "user"], "SCS_ClassReference": ["LoggerFactory", "NotificationEmailSender", "Validate", "CollectionUtils", "", null, "", "CollectionUtils", "", "", "notificationConfiguration", null, "notificationEvent", null, "notificationConfiguration", null, "notificationEvent", "CollectionUtils", "notificationConfiguration", "CollectionUtils", "notificationEvent", "notificationEvent", null, "notificationConfiguration", null, "", "mailSender", "logger", "notificationMessage", "logger", "", "mail", "mail", "bodyTemplate", "notificationEvent", "notificationEvent", "subjectTemplate", "story", "bodyTemplate", "story", "bodyTemplate", "story", "notificationEvent", "notificationEvent", "subjectTemplate", "task", "bodyTemplate", "task", "task", "task", null, "task", "task", null, "bodyTemplate", "mail", "subjectTemplate", "mail", "bodyTemplate", "", "mail", "notificationRecipients", "notificationEvent", "notificationEvent", "notificationEvent", "notificationEvent", "notificationEvent", "responsibleUsers", "notificationEvent", "notificationEvent", "responsibleUsers", "notificationEvent", "recipientsMails", "user"], "SCS_MethodInvocation": ["getLogger", "notNull", "isEmpty", "matchNotificationConfiguration", "execute", "isNotificationEvent", "isEmpty", "getNotificationRecipients", "sendMessage", "getNotificationAwareClass", "isAssignableFrom", "getEntity", "getClass", "getEventTypes", "contains", "getEventType", "isEmpty", "getClassPropertiesNames", "isEmpty", "getEntityProperties", "getEntityProperties", "keySet", "getClassPropertiesNames", "contains", "createNotificationMessage", "send", "info", "getSubject", "error", "getMessageTemplate", "getSubject", "getText", "setAttribute", "getEntity", "getEntity", "setAttribute", "getName", "setAttribute", "getName", "setAttribute", "getId", "getEntity", "getEntity", "setAttribute", "getName", "setAttribute", "getName", "getStory", "getStory", "getId", "getIteration", "getIteration", "getId", "setAttribute", "setSubject", "toString", "setText", "toString", "getNotificationRecipients", "setTo", "toArray", "getEntity", "getEventType", "getEntity", "getEventType", "getEntity", "addAll", "getEntity", "getEntity", "addAll", "getEntity", "add", "getEmail"], "MN": ["isNotificationEvent", "handleNotificationEvent", "run", "setMailSender", "setAsyncTaskExecutor", "setNotificationsConfiguration", "setNewTaskTemplate", "setUpdateTaskTemplate", "setDeleteTaskTemplate", "setNewStoryTemplate", "setUpdateStoryTemplate", "setDeleteStoryTemplate", "setAgilefantUrl", "setNotificationsEnabled", "matchNotificationConfiguration", "sendMessage", "createNotificationMessage", "getMessageTemplate", "getNotificationRecipients"], "PN": ["notificationEvent", "notificationEvent", "mailSender", "asyncTaskExecutor", "notificationsConfiguration", "newTaskTemplate", "updateTaskTemplate", "deleteTaskTemplate", "newStoryTemplate", "updateStoryTemplate", "deleteStoryTemplate", "agilefantUrl", "notificationsEnabled", "notificationEvent", "notificationConfiguration", "notificationEvent", "notificationEvent", "notificationEvent", "notificationEvent"], "SCS_MemberReference": ["notificationsEnabled", "notificationEvent", "notificationsConfiguration", "notificationsConfiguration", "notificationEvent", "notificationConfiguration", "asyncTaskExecutor", "notificationEvent", "notificationEvent", "notificationEvent", "mailSender", "mailSender", "asyncTaskExecutor", "asyncTaskExecutor", "notificationsConfiguration", "notificationsConfiguration", "newTaskTemplate", "newTaskTemplate", "updateTaskTemplate", "updateTaskTemplate", "deleteTaskTemplate", "deleteTaskTemplate", "newStoryTemplate", "newStoryTemplate", "updateStoryTemplate", "updateStoryTemplate", "deleteStoryTemplate", "deleteStoryTemplate", "agilefantUrl", "agilefantUrl", "notificationsEnabled", "notificationsEnabled", "notificationEventEntityProperty", "mailSender", "notificationEvent", "notificationMessage", "e", "notificationEvent", "agilefantUrl", "agilefantUrl", "taskParentUrl", "taskParentUrl", "taskParentUrl", "taskParentUrl", "notificationEvent", "mail", "newStoryTemplate", "updateStoryTemplate", "deleteStoryTemplate", "newTaskTemplate", "updateTaskTemplate", "deleteTaskTemplate", "responsibleUsers", "recipientsMails"], "SCS_VariableDeclaration": ["NotificationConfiguration", "String", "SimpleMailMessage", "SimpleMailMessage", "StringTemplate", "StringTemplate", "Story", "Task", "String", "List", "List", "Set", "User"], "CO": ["/** Global turn on/off for all notifications */", "/**\n     * Checks whether specified {@code notificationEvent} actually represents valid notification event.\n     * @param notificationEvent\n     * @return\n     */", "/**\n     * Checks if given event represents a notification that we are interested in and in such a case creates\n     * an email from template and send it to the recipients.\n     * <p>\n     *     This implementation perform its task asynchronously because sending an email can take a while and we do not\n     *     want to force the user to wait until email is sent.\n     * </p>\n     * @param notificationEvent\n     */", "// since this is not an notification event, simply do nothing", "// cause there are no recipients it does not make sense to send a notification message", "//------------------------------------------ SETTERS - better for testability --------------------------------------", "//--------------------------------------------------- HELPER METHODS -----------------------------------------------", "/**\n     * Checks whether given {@code notificationEvent} is supposed to be valid notification event\n     * by specification in {@code notificationsConfiguration}.\n     *\n     * @param notificationEvent see {@link fi.hut.soberit.agilefant.model.notification.NotificationEvent#getEntity()}\n     * @param notificationConfiguration\n     * @return\n     */", "// we are not interested in this kind of events", "// finer notification configuration has been specified - we must check whether notification event", "// relates to the particular properties", "// no property marked to be notifications' sensitive has been set in notificationEvent object", "//        common attributes", "// this task is without story, set reference to the iteration"], "CODE": "package fi.hut.soberit.agilefant.business.impl;\n\nimport fi.hut.soberit.agilefant.business.NotificationBusiness;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.Task;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.model.notification.NotificationConfiguration;\nimport fi.hut.soberit.agilefant.model.notification.NotificationEvent;\nimport fi.hut.soberit.agilefant.model.notification.NotificationEventType;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\nimport javax.annotation.Resource;\nimport org.antlr.stringtemplate.StringTemplate;\nimport org.apache.commons.lang.Validate;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.task.AsyncTaskExecutor;\nimport org.springframework.core.task.SimpleAsyncTaskExecutor;\nimport org.springframework.mail.SimpleMailMessage;\nimport org.springframework.mail.javamail.JavaMailSender;\nimport org.springframework.stereotype.Service;\nimport org.springframework.util.CollectionUtils;\n\npublic class NotificationEmailSender implements NotificationBusiness {\n\n    public static final String NOTIFICATION_BUSINESS_BEAN_NAME = \"notificationEmailSender\";\n    \n    private static final Logger logger = LoggerFactory.getLogger(NotificationEmailSender.class);\n\n    private List<NotificationConfiguration> notificationsConfiguration;\n    private JavaMailSender mailSender;\n    private AsyncTaskExecutor asyncTaskExecutor;\n\n\n    private SimpleMailMessage newStoryTemplate;\n    private SimpleMailMessage updateStoryTemplate;\n    private SimpleMailMessage deleteStoryTemplate;\n    private SimpleMailMessage newTaskTemplate;\n    private SimpleMailMessage updateTaskTemplate;\n    private SimpleMailMessage deleteTaskTemplate;\n\n    private String agilefantUrl;\n    /** Global turn on/off for all notifications */\n    private boolean notificationsEnabled = false;\n\n    /**\n     * Checks whether specified {@code notificationEvent} actually represents valid notification event.\n     * @param notificationEvent\n     * @return\n     */\n    @Override\n    public boolean isNotificationEvent(NotificationEvent notificationEvent) {\n        if (!notificationsEnabled) {\n            return false;\n        }\n        Validate.notNull(notificationEvent, \"notificationEvent cannot be null\");\n        if (CollectionUtils.isEmpty(notificationsConfiguration)) {\n            return false;\n        }\n        for (NotificationConfiguration notificationConfiguration : notificationsConfiguration) {\n            if (matchNotificationConfiguration(notificationEvent, notificationConfiguration)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n\n    /**\n     * Checks if given event represents a notification that we are interested in and in such a case creates\n     * an email from template and send it to the recipients.\n     * <p>\n     *     This implementation perform its task asynchronously because sending an email can take a while and we do not\n     *     want to force the user to wait until email is sent.\n     * </p>\n     * @param notificationEvent\n     */\n    @Override\n    public void handleNotificationEvent(final NotificationEvent notificationEvent) {\n        this.asyncTaskExecutor.execute(new Runnable() {\n            @Override\n            public void run() {\n                if (!isNotificationEvent(notificationEvent)) {\n                    // since this is not an notification event, simply do nothing\n                    return;\n                }\n\n                if (CollectionUtils.isEmpty(getNotificationRecipients(notificationEvent))) {\n                    // cause there are no recipients it does not make sense to send a notification message\n                    return;\n                }\n\n                sendMessage(notificationEvent);\n            }\n        });\n    }\n\n    //------------------------------------------ SETTERS - better for testability --------------------------------------\n\n    @Autowired\n    public void setMailSender(JavaMailSender mailSender) {\n        this.mailSender = mailSender;\n    }\n\n    @Autowired\n    public void setAsyncTaskExecutor(AsyncTaskExecutor asyncTaskExecutor) {\n        this.asyncTaskExecutor = asyncTaskExecutor;\n    }\n\n    @Resource(name = \"notificationsConfiguration\")\n    public void setNotificationsConfiguration(List<NotificationConfiguration> notificationsConfiguration) {\n        this.notificationsConfiguration = notificationsConfiguration;\n    }\n\n    @Resource(name = \"newTaskTemplate\")\n    public void setNewTaskTemplate(SimpleMailMessage newTaskTemplate) {\n        this.newTaskTemplate = newTaskTemplate;\n    }\n\n    @Resource(name = \"updateTaskTemplate\")\n    public void setUpdateTaskTemplate(SimpleMailMessage updateTaskTemplate) {\n        this.updateTaskTemplate = updateTaskTemplate;\n    }\n\n    @Resource(name = \"deleteTaskTemplate\")\n    public void setDeleteTaskTemplate(SimpleMailMessage deleteTaskTemplate) {\n        this.deleteTaskTemplate = deleteTaskTemplate;\n    }\n\n    @Resource(name = \"newStoryTemplate\")\n    public void setNewStoryTemplate(SimpleMailMessage newStoryTemplate) {\n        this.newStoryTemplate = newStoryTemplate;\n    }\n\n    @Resource(name = \"updateStoryTemplate\")\n    public void setUpdateStoryTemplate(SimpleMailMessage updateStoryTemplate) {\n        this.updateStoryTemplate = updateStoryTemplate;\n    }\n\n    @Resource(name = \"deleteStoryTemplate\")\n    public void setDeleteStoryTemplate(SimpleMailMessage deleteStoryTemplate) {\n        this.deleteStoryTemplate = deleteStoryTemplate;\n    }\n\n    public void setAgilefantUrl(String agilefantUrl) {\n        this.agilefantUrl = agilefantUrl;\n    }\n    \n    public void setNotificationsEnabled(boolean notificationsEnabled) {\n        this.notificationsEnabled = notificationsEnabled;\n    }\n\n    //--------------------------------------------------- HELPER METHODS -----------------------------------------------\n\n    /**\n     * Checks whether given {@code notificationEvent} is supposed to be valid notification event\n     * by specification in {@code notificationsConfiguration}.\n     *\n     * @param notificationEvent see {@link fi.hut.soberit.agilefant.model.notification.NotificationEvent#getEntity()}\n     * @param notificationConfiguration\n     * @return\n     */\n    private boolean matchNotificationConfiguration(NotificationEvent notificationEvent,\n            NotificationConfiguration notificationConfiguration) {\n\n        if ( ! notificationConfiguration.getNotificationAwareClass()\n                .isAssignableFrom(notificationEvent.getEntity().getClass())) {\n            return false;\n        }\n\n        if ( ! notificationConfiguration.getEventTypes().contains(notificationEvent.getEventType())) {\n            // we are not interested in this kind of events\n            return false;\n        }\n\n        if ( ! CollectionUtils.isEmpty(notificationConfiguration.getClassPropertiesNames())) {\n            // finer notification configuration has been specified - we must check whether notification event\n            // relates to the particular properties\n            if (CollectionUtils.isEmpty(notificationEvent.getEntityProperties())) {\n                return false;\n            }\n\n            for (String notificationEventEntityProperty : notificationEvent.getEntityProperties().keySet()) {\n                if (notificationConfiguration.getClassPropertiesNames().contains(notificationEventEntityProperty)) {\n                    return true;\n                }\n            }\n            // no property marked to be notifications' sensitive has been set in notificationEvent object\n            return false;\n        }\n\n        return true;\n    }\n\n\n    private void sendMessage(NotificationEvent notificationEvent) {\n        if (mailSender == null) {\n            throw new IllegalStateException(\"Mail sender is not set - cannot send notification email!\");\n        }\n        \n        try {\n            final SimpleMailMessage notificationMessage = createNotificationMessage(notificationEvent);\n            mailSender.send(notificationMessage);\n            logger.info(\"Notification message '\" + notificationMessage.getSubject() + \"' has been sent successfully.\");\n        } catch (Exception e) {\n            logger.error(\"Cannot send notification message\", e);\n        }\n        \n    }\n\n\n    private SimpleMailMessage createNotificationMessage(NotificationEvent notificationEvent) {\n        SimpleMailMessage mail = new SimpleMailMessage(getMessageTemplate(notificationEvent));\n\n        final StringTemplate subjectTemplate = new StringTemplate(mail.getSubject());\n        final StringTemplate bodyTemplate = new StringTemplate(mail.getText());\n\n//        common attributes\n        bodyTemplate.setAttribute(\"agilefantUrl\", this.agilefantUrl);\n\n        if (notificationEvent.getEntity() instanceof Story) {\n            final Story story = (Story) notificationEvent.getEntity();\n            subjectTemplate.setAttribute(\"storyName\", story.getName());\n            bodyTemplate.setAttribute(\"storyName\", story.getName());\n            bodyTemplate.setAttribute(\"storyId\", story.getId());\n        }\n        if (notificationEvent.getEntity() instanceof Task) {\n            final Task task = (Task) notificationEvent.getEntity();\n            subjectTemplate.setAttribute(\"taskName\", task.getName());\n            bodyTemplate.setAttribute(\"taskName\", task.getName());\n            String taskParentUrl = agilefantUrl;\n            if (task.getStory() != null) {\n                taskParentUrl += \"/qr.action?q=story:\" + task.getStory().getId();\n            } else if (task.getIteration() != null) {\n                // this task is without story, set reference to the iteration\n                taskParentUrl += \"/editIteration.action?iterationId=\" + task.getIteration().getId();\n            } else {\n                taskParentUrl = \"<Error: Cannot find task's parent>\";\n            }\n            bodyTemplate.setAttribute(\"taskParentUrl\", taskParentUrl);\n        }\n\n        mail.setSubject(subjectTemplate.toString());\n        mail.setText(bodyTemplate.toString());\n\n\n        final List<String> notificationRecipients = getNotificationRecipients(notificationEvent);\n        mail.setTo(notificationRecipients.toArray(new String[0]));\n\n        return mail;\n    }\n\n    private SimpleMailMessage getMessageTemplate(NotificationEvent notificationEvent) {\n        if (notificationEvent.getEntity() instanceof Story) {\n            switch (notificationEvent.getEventType()) {\n                case INSERT:\n                    return newStoryTemplate;\n                case UPDATE:\n                    return updateStoryTemplate;\n                case DELETE:\n                    return deleteStoryTemplate;\n            }\n        } else if (notificationEvent.getEntity() instanceof Task) {\n            switch (notificationEvent.getEventType()) {\n                case INSERT:\n                    return newTaskTemplate;\n                case UPDATE:\n                    return updateTaskTemplate;\n                case DELETE:\n                    return deleteTaskTemplate;\n            }\n        }\n\n        return null;\n    }\n\n    private List<String> getNotificationRecipients(NotificationEvent notificationEvent) {\n        final List<String> recipientsMails = new ArrayList<String>();\n\n        final Set<User> responsibleUsers = new HashSet<User>();\n\n        if (notificationEvent.getEntity() instanceof Story) {\n            responsibleUsers.addAll(((Story) notificationEvent.getEntity()).getResponsibles());\n        } else if (notificationEvent.getEntity() instanceof Task) {\n            responsibleUsers.addAll(((Task) notificationEvent.getEntity()).getResponsibles());\n        }\n\n        for (User user : responsibleUsers) {\n            recipientsMails.add(user.getEmail());\n        }\n        \n        return recipientsMails;\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\impl\\\\PasswordBusinessImpl.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["PasswordBusinessImpl"], "AN": ["mailSender", "newPasswordTemplate", "userDAO", "passwordEncoder"], "SCS_VariableDeclarator": ["mailSender", "newPasswordTemplate", "userDAO", "passwordEncoder", "user", "password", "mail", "bodyTemplate", "randomString"], "MN": ["generateAndMailPassword", "generateNewPassword", "getMailSender", "setMailSender", "getNewPasswordTemplate", "setNewPasswordTemplate", "setUserDAO", "getPasswordEncoder", "setPasswordEncoder"], "PN": ["user_id", "mailSender", "newPasswordTemplate", "userDAO", "passwordEncoder"], "SCS_VariableDeclaration": ["User", "String", "SimpleMailMessage", "StringTemplate", "String"], "SCS_ClassReference": ["userDAO", "", "user", "passwordEncoder", "mail", "bodyTemplate", "mail", "bodyTemplate", "mail", "user", "mailSender", "passwordEncoder", null, "randomString"], "SCS_MethodInvocation": ["get", "generateNewPassword", "setPassword", "encode", "getText", "setAttribute", "setText", "toString", "setTo", "getEmail", "send", "encode", "toString", "substring"], "SCS_MemberReference": ["user_id", "password", "newPasswordTemplate", "password", "mail", "mailSender", "mailSender", "mailSender", "newPasswordTemplate", "newPasswordTemplate", "newPasswordTemplate", "userDAO", "userDAO", "passwordEncoder", "passwordEncoder", "passwordEncoder"], "CO": ["/**\n     * Generates a new password. This input isn't exactly super secure, but it\n     * should do the trick.\n     * \n     * @return A new randomly generated 12 character <code>String</code>\n     *         representing an <code>User</code>'s (provisional) password.\n     */"], "CODE": "package fi.hut.soberit.agilefant.business.impl;\n\nimport java.util.Date;\nimport java.util.Random;\n\nimport javax.annotation.Resource;\n\nimport org.antlr.stringtemplate.StringTemplate;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.mail.SimpleMailMessage;\nimport org.springframework.mail.javamail.JavaMailSender;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport fi.hut.soberit.agilefant.business.PasswordBusiness;\nimport fi.hut.soberit.agilefant.db.UserDAO;\nimport fi.hut.soberit.agilefant.model.User;\n\n@Service(\"passwordBusiness\")\n@Transactional\npublic class PasswordBusinessImpl implements PasswordBusiness {\n    private JavaMailSender mailSender;\n\n    private SimpleMailMessage newPasswordTemplate;\n\n    private UserDAO userDAO;\n\n    private PasswordEncoder passwordEncoder;\n\n    @Transactional\n    public void generateAndMailPassword(int user_id) {\n        User user = userDAO.get(user_id);\n        String password = generateNewPassword();\n        user.setPassword(passwordEncoder.encode(password));\n\n        SimpleMailMessage mail = new SimpleMailMessage(newPasswordTemplate);\n        StringTemplate bodyTemplate = new StringTemplate(mail.getText());\n        bodyTemplate.setAttribute(\"password\", password);\n        mail.setText(bodyTemplate.toString());\n        mail.setTo(user.getEmail());\n        mailSender.send(mail);\n    }\n\n    /**\n     * Generates a new password. This input isn't exactly super secure, but it\n     * should do the trick.\n     * \n     * @return A new randomly generated 12 character <code>String</code>\n     *         representing an <code>User</code>'s (provisional) password.\n     */\n    private String generateNewPassword() {\n        String randomString = passwordEncoder.encode(new Date().toString());\n        return randomString.substring(0, 12);\n    }\n\n    public JavaMailSender getMailSender() {\n        return mailSender;\n    }\n\n    @Autowired\n    public void setMailSender(JavaMailSender mailSender) {\n        this.mailSender = mailSender;\n    }\n\n    public SimpleMailMessage getNewPasswordTemplate() {\n        return newPasswordTemplate;\n    }\n\n    @Resource(name = \"newPasswordTemplate\")\n    public void setNewPasswordTemplate(SimpleMailMessage newPasswordTemplate) {\n        this.newPasswordTemplate = newPasswordTemplate;\n    }\n\n    @Autowired\n    public void setUserDAO(UserDAO userDAO) {\n        this.userDAO = userDAO;\n    }\n\n    public PasswordEncoder getPasswordEncoder() {\n        return passwordEncoder;\n    }\n\n    @Resource(name = \"passwordEncoder\")\n    public void setPasswordEncoder(PasswordEncoder passwordEncoder) {\n        this.passwordEncoder = passwordEncoder;\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\impl\\\\PersonalLoadBusinessImpl.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["PersonalLoadBusinessImpl"], "AN": ["taskDAO", "storyDAO", "userBusiness", "iterationDAO", "assignmentDAO", "settingBusiness"], "SCS_VariableDeclarator": ["taskDAO", "storyDAO", "userBusiness", "iterationDAO", "assignmentDAO", "settingBusiness", "storyTasks", "storyTaskStoryIds", "task", "responsibleCounts", "task", "iteration", "numberOfAssignees", "taskEffort", "newContainer", "iterationTotal", "assignedTasks", "assignedTaskIds", "task", "responsibleCounts", "task", "iteration", "numberOfAssignees", "taskEffort", "taskEffort", "taskEffortLeft", "taskEffortLeft", "rawUnassignedLoad", "row", "newContainer", "availabilityFactor", "effortFraction", "currentIter", "emptyIterations", "iterationIds", "iter", "totalAvailabilities", "iter", "availability", "totalAvailability", "fraction", "newContainer", "assign", "iterationIds", "row", "iterations", "totalAvailabilities", "row", "iter", "userLoadDataPerIteration", "iterationInterval", "fraction", "assignedEffortPortion", "unassignedEffortPortion", "futureLoad", "perUserIterationLoad", "periodInterval", "workTimeInBacklog", "workTimeInPeriod", "fraction", "ret", "dateIterator", "period", "start", "loadContainers", "assigments", "assigmentIntervals", "intervalLoad", "assignment", "assigmentBacklogInterval", "assignmentWithinCurrentInterval", "dailyBaselineLoad", "effectiveWorktime", "exactDays", "baselineLoadForInterval", "backlogLoad", "targetContainer", "iterator", "tmp", "tmp", "baselineLoad", "backlogBaseline", "assigmentIntervals", "assigment", "blInterval", "backlog", "bl", "interval", "iterationEffortLeft", "periods", "loadData", "iterationId", "period", "len", "startDate", "start", "end", "limits", "userDailyMinutes", "lowPercentage", "mediumPercentage", "highPercentage", "criticalPercentage", "maximumPercentage"], "MN": ["calculateStoryAssignedTaskLoad", "addTaskAssignedEffortToMap", "calculateDirectlyAssignedTaskLoad", "divideAssignedTaskEffort", "calculateUnassignedTaskLoad", "calculateIterationFutureLoad", "lookupAvailability", "loadIterationAvailabilitySums", "calculateTotalAssignedUserLoad", "updateUserLoadByInterval", "calculateIntervalFraction", "initializeLoadContainers", "addBaselineLoad", "getBacklogLoadContainerFromInterval", "determinateWeeklyBaselineLoad", "calculateAssigmentIntervals", "generatePersonalAssignedLoad", "retrieveUserLoad", "getDailyLoadLimitsByUser", "getTaskDAO", "setTaskDAO", "getStoryDAO", "setStoryDAO", "setUserBusiness", "setIterationDAO", "setAssignmentDAO", "setSettingBusiness"], "PN": ["iterationEffortData", "user", "interval", "iterationEffortData", "iteration", "taskEffort", "iterationEffortData", "user", "interval", "task", "numberOfAssignees", "iterationEffortData", "user", "interval", "iterationEffortData", "user", "interval", "user", "iter", "rawUnassignedLoad", "user", "interval", "container", "load", "user", "containerInterval", "backlogInterval", "user", "user", "startDate", "endDate", "periodLength", "preComputedLoad", "user", "interval", "intervalLoad", "backlog", "assignment", "assigments", "user", "startDate", "endDate", "len", "user", "weeksAhead", "user", "taskDAO", "storyDAO", "userBusiness", "iterationDAO", "assignmentDAO", "settingBusiness"], "SCS_VariableDeclaration": ["List", "Set", "Task", "Map", "Task", "Iteration", "int", "long", "IterationLoadContainer", "long", "List", "Set", "Task", "Map", "Task", "Iteration", "int", "long", "long", "long", "long", "List", "UnassignedLoadTO", "IterationLoadContainer", "double", "double", "IterationLoadContainer", "List", "Set", "Iteration", "Map", "Iteration", "int", "int", "double", "IterationLoadContainer", "Assignment", "Set", "UnassignedLoadTO", "Collection", "Map", "UnassignedLoadTO", "Iteration", "Map", "Interval", "double", "double", "double", "double", "IterationLoadContainer", "Interval", "Duration", "Duration", "double", "List", "MutableDateTime", "IntervalLoadContainer", "DateTime", "List", "List", "Map", "IntervalLoadContainer", "Assignment", "Interval", "Interval", "long", "Duration", "long", "long", "BacklogLoadContainer", "BacklogLoadContainer", "BacklogLoadContainer", "IterationLoadContainer", "ProjectLoadContainer", "long", "ExactEstimate", "Map", "Assignment", "Interval", "Backlog", "Schedulable", "Interval", "Map", "List", "ComputedLoadData", "Integer", "IntervalLoadContainer", "Period", "MutableDateTime", "DateTime", "DateTime", "UserLoadLimits", "double", "double", "double", "double", "double", "double"], "SCS_MemberReference": ["taskDAO", "user", "interval", "storyTasks", "storyTaskStoryIds", "storyTasks", "task", "numberOfAssignees", "iterationEffortData", "iteration", "taskEffort", "iteration", "newContainer", "taskEffort", "iterationTotal", "taskDAO", "user", "interval", "taskDAO", "user", "interval", "assignedTasks", "assignedTaskIds", "assignedTasks", "iteration", "iteration", "task", "numberOfAssignees", "iterationEffortData", "iteration", "taskEffort", "numberOfAssignees", "DEFERRED", "DEFERRED", "taskEffort", "taskEffortLeft", "numberOfAssignees", "taskEffort", "taskEffortLeft", "numberOfAssignees", "taskEffort", "taskDAO", "user", "interval", "taskDAO", "user", "interval", "rawUnassignedLoad", "rawUnassignedLoad", "iterationId", "iteration", "iterationId", "newContainer", "availability", "availabilitySum", "effortLeft", "effortFraction", "availabilityFactor", "iterationId", "effortFraction", "iterationDAO", "user", "emptyIterations", "iterationDAO", "iterationIds", "emptyIterations", "user", "iter", "availability", "totalAvailability", "iter", "newContainer", "fraction", "user", "rawUnassignedLoad", "iterationId", "iterationDAO", "iterationIds", "iterationDAO", "iterationIds", "rawUnassignedLoad", "iterations", "iterationId", "iteration", "iter", "iterationId", "availabilitySum", "iterationId", "availabilitySum", "userLoadDataPerIteration", "user", "interval", "userLoadDataPerIteration", "user", "interval", "userLoadDataPerIteration", "user", "interval", "userLoadDataPerIteration", "iterationInterval", "user", "fraction", "fraction", "fraction", "assignedEffortPortion", "unassignedEffortPortion", "futureLoad", "assignedEffortPortion", "unassignedEffortPortion", "futureLoad", "perUserIterationLoad", "backlogInterval", "containerInterval", "backlogInterval", "userBusiness", "user", "backlogInterval", "userBusiness", "user", "periodInterval", "fraction", "endDate", "endDate", "periodLength", "start", "dateIterator", "period", "ret", "assignmentDAO", "interval", "user", "assigments", "loadContainers", "assigments", "assigmentBacklogInterval", "assignmentWithinCurrentInterval", "assignment", "userBusiness", "user", "assignmentWithinCurrentInterval", "dailyBaselineLoad", "exactDays", "baselineLoadForInterval", "intervalLoad", "baselineLoadForInterval", "targetContainer", "iterator", "targetContainer", "backlog", "backlog", "targetContainer", "tmp", "backlog", "backlog", "targetContainer", "tmp", "targetContainer", "targetContainer", "backlogBaseline", "backlogBaseline", "backlogBaseline", "baselineLoad", "baselineLoad", "baselineLoad", "assigments", "backlog", "backlog", "blInterval", "blInterval", "blInterval", "assigmentIntervals", "startDate", "endDate", "user", "interval", "iterationEffortLeft", "user", "interval", "user", "startDate", "endDate", "len", "periods", "periods", "period", "iterationId", "user", "loadData", "user", "interval", "startDate", "endDate", "loadData", "len", "weeksAhead", "user", "start", "end", "len", "userDailyMinutes", "userDailyMinutes", "userDailyMinutes", "lowPercentage", "userDailyMinutes", "mediumPercentage", "userDailyMinutes", "highPercentage", "userDailyMinutes", "criticalPercentage", "userDailyMinutes", "maximumPercentage", "limits", "taskDAO", "taskDAO", "taskDAO", "storyDAO", "storyDAO", "storyDAO", "userBusiness", "userBusiness", "iterationDAO", "iterationDAO", "assignmentDAO", "assignmentDAO", "settingBusiness", "settingBusiness"], "SCS_ClassReference": [null, "storyTaskStoryIds", "task", null, "storyDAO", "task", null, "responsibleCounts", "task", null, "", "", "iterationEffortData", "iteration", "newContainer", "iterationEffortData", "iteration", "iterationEffortData", null, "iteration", "iterationEffortData", null, "iteration", "assignedTasks", null, "assignedTasks", null, "assignedTaskIds", "task", "taskDAO", "task", "task", null, "responsibleCounts", "task", "", "", "task", "task", "task", "task", null, "task", null, "task", null, "rawUnassignedLoad", null, "rawUnassignedLoad", null, "", "iterationEffortData", "newContainer", "iterationEffortData", "row.effortLeft", "iterationEffortData", "currentIter", "currentIter", null, "interval", "interval", "iterationIds", "iter", null, "", "totalAvailabilities", "iter", "iterationEffortData", "iter", "newContainer", "iterationEffortData", "iter", "iterationEffortData", null, "iter", null, "iter", "iter", "assign", "assign", "iterationIds", null, null, "iter", "totalAvailabilities", "totalAvailabilities", null, null, null, "load", null, "load", null, "", "container", "load", "load", "load", "container", "container", "container", "container", "container", "container", "perUserIterationLoad", "load", "perUserIterationLoad", "perUserIterationLoad", "perUserIterationLoad", "container", null, "backlogInterval", null, "backlogInterval", "backlogInterval", "containerInterval", null, null, "workTimeInPeriod", "workTimeInBacklog", "startDate", "Collections", "startDate", "dateIterator", "dateIterator", "dateIterator", "period", "ret", "preComputedLoad", null, "", "assigmentIntervals", "assignment", "intervalLoad", null, "", null, "effectiveWorktime", "intervalLoad", "intervalLoad", null, "assignment", "backlogLoad", "backlogLoad", "intervalLoad", "iterator", null, "backlog", "tmp", "tmp", "intervalLoad", null, "assignment", "assignment", "assignment", "assignment", "backlogBaseline", "assignment", "assignment", null, "assigment", "bl", "bl", "assigmentIntervals", "assigment", null, null, null, "loadData", "iterationEffortLeft", null, "iterationEffortLeft", null, "loadData", "loadData", "len", "startDate", "startDate", "start", null, "user", "user", null, "settingBusiness", "limits", "settingBusiness", "limits", "settingBusiness", "limits", "settingBusiness", "limits", "settingBusiness", "limits"], "SCS_MethodInvocation": ["getStoryAssignedTasksWithEffortLeft", "add", "getStory", "getId", "getNumOfResponsiblesByStory", "getStory", "getIteration", "get", "getStory", "getId", "divideAssignedTaskEffort", "addTaskAssignedEffortToMap", "containsKey", "getId", "setIteration", "put", "getId", "get", "getTotalAssignedLoad", "getId", "get", "setTotalAssignedLoad", "getId", "addAll", "getIterationTasksWithEffortLeft", "addAll", "getStoryTasksWithEffortLeft", "add", "getId", "getNumOfResponsiblesByTask", "getIteration", "getStory", "getIteration", "get", "getId", "divideAssignedTaskEffort", "addTaskAssignedEffortToMap", "getEffortLeft", "getState", "getStory", "getStory", "getState", "getEffortLeft", "getMinorUnits", "getEffortLeft", "getMinorUnits", "addAll", "getUnassignedIterationTasksWithEffortLeft", "addAll", "getUnassignedStoryTasksWithEffortLeft", "loadIterationAvailabilitySums", "containsKey", "setIteration", "put", "doubleValue", "get", "setTotalUnassignedLoad", "getTotalUnassignedLoad", "retrieveEmptyIterationsWithPlannedSize", "getStart", "getEnd", "add", "getId", "getTotalAvailability", "lookupAvailability", "get", "getId", "containsKey", "getId", "setIteration", "put", "getId", "get", "setTotalFutureLoad", "getBacklogSize", "longValue", "getId", "getAssignments", "getUser", "getAvailability", "add", "getMultiple", "getTotalAvailability", "getId", "containsKey", "get", "calculateDirectlyAssignedTaskLoad", "calculateStoryAssignedTaskLoad", "calculateUnassignedTaskLoad", "getIteration", "getStartDate", "getIteration", "getEndDate", "calculateIntervalFraction", "getInterval", "getTotalAssignedLoad", "getTotalUnassignedLoad", "getTotalFutureLoad", "setAssignedLoad", "getAssignedLoad", "setUnassignedLoad", "getUnassignedLoad", "setFutureLoad", "getFutureLoad", "setIteration", "getIteration", "setTotalAssignedLoad", "setTotalUnassignedLoad", "setTotalFutureLoad", "getDetailedLoad", "add", "containsNow", "withMillisOfSecond", "getEnd", "overlaps", "overlap", "calculateWorktimePerPeriod", "calculateWorktimePerPeriod", "getMillis", "getMillis", "compareTo", "emptyList", "toDateMidnight", "isBefore", "toDateTime", "add", "setInterval", "add", "getLoadContainers", "assigmentsInBacklogTimeframe", "calculateAssigmentIntervals", "get", "getId", "getInterval", "overlap", "determinateWeeklyBaselineLoad", "calculateWorktimePerPeriod", "getMillis", "setBaselineLoad", "getBaselineLoad", "getBacklogLoadContainerFromInterval", "getBacklog", "setTotalBaselineLoad", "getTotalBaselineLoad", "getDetailedLoad", "getBacklog", "getId", "getId", "setIteration", "setProject", "getDetailedLoad", "add", "getBacklog", "getBacklog", "getBacklog", "getBacklog", "longValue", "getPersonalLoad", "getPersonalLoad", "longValue", "getBacklog", "getStartDate", "getEndDate", "put", "getId", "calculateTotalAssignedUserLoad", "calculateIterationFutureLoad", "initializeLoadContainers", "setLoadContainers", "keySet", "updateUserLoadByInterval", "get", "addBaselineLoad", "setStartDate", "setEndDate", "plusDays", "setMillisOfDay", "toDateTime", "plusWeeks", "generatePersonalAssignedLoad", "getWeekEffort", "getWeekEffort", "doubleValue", "getRangeLow", "setDailyLoadLow", "getOptimalLow", "setDailyLoadMedium", "getOptimalHigh", "setDailyLoadHigh", "getCriticalLow", "setDailyLoadCritical", "getRangeHigh", "setDailyLoadMaximum"], "CO": ["/**\n     * Calculate sum of task effort left portions for given user per iteration\n     * for tasks that don't have direct assignees, but have assignees for the\n     * parent story.\n     */", "// get total responsibles per task", "// add to the iteration total sum", "/**\n     * Calculate sum of task effort left portions for given user per iteration\n     * for tasks that have direct assignees.\n     */", "// divide task effort evenly per responsible", "// get raw load data", "// get iterations", "/**\n     * Sets iteration object and sum of each iterations assignment\n     * availabilities to the transfer object.\n     * \n     * @param rawUnassignedLoad\n     *            Collection of UnassignedLoadTO transfer objects that each\n     *            contain an iteration id.\n     */", "// get availability sums per iteration", "/**\n     * Combine directly and indirectly assigned task load.\n     */", "/**\n     * Update load data in the container to account for the load from the given\n     * iteration.\n     */", "// iteration is not ongoing at this time", "// (work days in period / total work days in this iteration) * total", "// work", "/**\n     * Computes baseline load portions per interval.\n     * \n     * Baseline load will not be added for vacations or weekends.\n     */", "// from milliseconds to days"], "CODE": "\npackage fi.hut.soberit.agilefant.business.impl;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\nimport org.joda.time.DateTime;\nimport org.joda.time.Duration;\nimport org.joda.time.Interval;\nimport org.joda.time.MutableDateTime;\nimport org.joda.time.Period;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport fi.hut.soberit.agilefant.business.PersonalLoadBusiness;\nimport fi.hut.soberit.agilefant.business.SettingBusiness;\nimport fi.hut.soberit.agilefant.business.UserBusiness;\nimport fi.hut.soberit.agilefant.db.AssignmentDAO;\nimport fi.hut.soberit.agilefant.db.IterationDAO;\nimport fi.hut.soberit.agilefant.db.StoryDAO;\nimport fi.hut.soberit.agilefant.db.TaskDAO;\nimport fi.hut.soberit.agilefant.model.Assignment;\nimport fi.hut.soberit.agilefant.model.Backlog;\nimport fi.hut.soberit.agilefant.model.ExactEstimate;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.Project;\nimport fi.hut.soberit.agilefant.model.Schedulable;\nimport fi.hut.soberit.agilefant.model.StoryState;\nimport fi.hut.soberit.agilefant.model.Task;\nimport fi.hut.soberit.agilefant.model.TaskState;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.transfer.BacklogLoadContainer;\nimport fi.hut.soberit.agilefant.transfer.ComputedLoadData;\nimport fi.hut.soberit.agilefant.transfer.IntervalLoadContainer;\nimport fi.hut.soberit.agilefant.transfer.IterationLoadContainer;\nimport fi.hut.soberit.agilefant.transfer.ProjectLoadContainer;\nimport fi.hut.soberit.agilefant.transfer.UnassignedLoadTO;\nimport fi.hut.soberit.agilefant.transfer.UserLoadLimits;\n\n@Service(\"personalLoadBusiness\")\n@Transactional(readOnly = true)\npublic class PersonalLoadBusinessImpl implements PersonalLoadBusiness {\n    @Autowired\n    private TaskDAO taskDAO;\n\n    @Autowired\n    private StoryDAO storyDAO;\n\n    @Autowired\n    private UserBusiness userBusiness;\n\n    @Autowired\n    private IterationDAO iterationDAO;\n\n    @Autowired\n    private AssignmentDAO assignmentDAO;\n\n    @Autowired\n    private SettingBusiness settingBusiness;\n\n    /**\n     * Calculate sum of task effort left portions for given user per iteration\n     * for tasks that don't have direct assignees, but have assignees for the\n     * parent story.\n     */\n    public void calculateStoryAssignedTaskLoad(\n            Map<Integer, IterationLoadContainer> iterationEffortData,\n            User user, Interval interval) {\n        List<Task> storyTasks = this.taskDAO\n                .getStoryAssignedTasksWithEffortLeft(user, interval);\n\n        Set<Integer> storyTaskStoryIds = new HashSet<Integer>();\n\n        // get total responsibles per task\n        for (Task task : storyTasks) {\n            storyTaskStoryIds.add(task.getStory().getId());\n        }\n        Map<Integer, Integer> responsibleCounts = storyDAO\n                .getNumOfResponsiblesByStory(storyTaskStoryIds);\n\n        for (Task task : storyTasks) {\n            Iteration iteration = (Iteration) task.getStory().getIteration();\n            int numberOfAssignees = responsibleCounts.get(task.getStory()\n                    .getId());\n            long taskEffort = divideAssignedTaskEffort(task, numberOfAssignees);\n            // add to the iteration total sum\n            addTaskAssignedEffortToMap(iterationEffortData, iteration,\n                    taskEffort);\n        }\n    }\n\n    private void addTaskAssignedEffortToMap(\n            Map<Integer, IterationLoadContainer> iterationEffortData,\n            Iteration iteration, long taskEffort) {\n        if (!iterationEffortData.containsKey(iteration.getId())) {\n            IterationLoadContainer newContainer = new IterationLoadContainer();\n            newContainer.setIteration(iteration);\n            iterationEffortData.put(iteration.getId(), newContainer);\n        }\n        long iterationTotal = taskEffort\n                + iterationEffortData.get(iteration.getId())\n                        .getTotalAssignedLoad();\n        iterationEffortData.get(iteration.getId()).setTotalAssignedLoad(\n                iterationTotal);\n    }\n\n    /**\n     * Calculate sum of task effort left portions for given user per iteration\n     * for tasks that have direct assignees.\n     */\n    public void calculateDirectlyAssignedTaskLoad(\n            Map<Integer, IterationLoadContainer> iterationEffortData,\n            User user, Interval interval) {\n        List<Task> assignedTasks = new ArrayList<Task>();\n        assignedTasks.addAll(this.taskDAO.getIterationTasksWithEffortLeft(user,\n                interval));\n        assignedTasks.addAll(this.taskDAO.getStoryTasksWithEffortLeft(user,\n                interval));\n\n        Set<Integer> assignedTaskIds = new HashSet<Integer>();\n\n        for (Task task : assignedTasks) {\n            assignedTaskIds.add(task.getId());\n        }\n        Map<Integer, Integer> responsibleCounts = taskDAO\n                .getNumOfResponsiblesByTask(assignedTaskIds);\n        for (Task task : assignedTasks) {\n            Iteration iteration = task.getIteration();\n            if (iteration == null) {\n                iteration = (Iteration) task.getStory().getIteration();\n            }\n            int numberOfAssignees = responsibleCounts.get(task.getId());\n            // divide task effort evenly per responsible\n            long taskEffort = divideAssignedTaskEffort(task, numberOfAssignees);\n            addTaskAssignedEffortToMap(iterationEffortData, iteration,\n                    taskEffort);\n        }\n    }\n\n    private long divideAssignedTaskEffort(Task task, int numberOfAssignees) {\n        long taskEffort = 0;\n        if (task.getEffortLeft() != null && numberOfAssignees != 0 && task.getState() != TaskState.DEFERRED) {\n            if(task.getStory() != null) {\n                if(task.getStory().getState() != StoryState.DEFERRED) {\n                    long taskEffortLeft = task.getEffortLeft().getMinorUnits();\n                    taskEffort = taskEffortLeft / numberOfAssignees;\n                }\n            }\n            else {\n                long taskEffortLeft = task.getEffortLeft().getMinorUnits();\n                taskEffort = taskEffortLeft / numberOfAssignees;\n            }\n        }\n        \n        return taskEffort;\n    }\n\n    public void calculateUnassignedTaskLoad(\n            Map<Integer, IterationLoadContainer> iterationEffortData,\n            User user, Interval interval) {\n        // get raw load data\n        List<UnassignedLoadTO> rawUnassignedLoad = new ArrayList<UnassignedLoadTO>();\n        rawUnassignedLoad.addAll(this.taskDAO\n                .getUnassignedIterationTasksWithEffortLeft(user, interval));\n        rawUnassignedLoad.addAll(this.taskDAO\n                .getUnassignedStoryTasksWithEffortLeft(user, interval));\n\n        // get iterations\n        loadIterationAvailabilitySums(rawUnassignedLoad);\n\n        for (UnassignedLoadTO row : rawUnassignedLoad) {\n            if (!iterationEffortData.containsKey(row.iterationId)) {\n                IterationLoadContainer newContainer = new IterationLoadContainer();\n                newContainer.setIteration(row.iteration);\n                iterationEffortData.put(row.iterationId, newContainer);\n            }\n            double availabilityFactor = ((double) row.availability)\n                    / ((double) row.availabilitySum);\n\n            double effortFraction = 0.0;\n            if (row.effortLeft != null) {\n                effortFraction = availabilityFactor\n                        * row.effortLeft.doubleValue();\n            }\n            IterationLoadContainer currentIter = iterationEffortData\n                    .get(row.iterationId);\n            currentIter.setTotalUnassignedLoad(currentIter\n                    .getTotalUnassignedLoad()\n                    + (long) effortFraction);\n        }\n    }\n\n    public void calculateIterationFutureLoad(\n            Map<Integer, IterationLoadContainer> iterationEffortData,\n            User user, Interval interval) {\n        List<Iteration> emptyIterations = this.iterationDAO\n                .retrieveEmptyIterationsWithPlannedSize(interval.getStart(),\n                        interval.getEnd(), user);\n        Set<Integer> iterationIds = new HashSet<Integer>();\n        for(Iteration iter : emptyIterations) {\n            iterationIds.add(iter.getId());\n        }\n        \n        Map<Integer, Integer> totalAvailabilities = this.iterationDAO\n        .getTotalAvailability(iterationIds);\n        \n        for (Iteration iter : emptyIterations) {\n            int availability = lookupAvailability(user, iter);\n            int totalAvailability = totalAvailabilities.get(iter.getId());\n            double fraction = (double)availability/(double)totalAvailability;\n            if (!iterationEffortData.containsKey(iter.getId())) {\n                IterationLoadContainer newContainer = new IterationLoadContainer();\n                newContainer.setIteration(iter);\n                iterationEffortData.put(iter.getId(), newContainer);\n            }\n            iterationEffortData.get(iter.getId()).setTotalFutureLoad(\n                    (long)(fraction*(double)iter.getBacklogSize().longValue()));\n        }\n    }\n\n    private int lookupAvailability(User user, Iteration iter) {\n        for(Assignment assign : iter.getAssignments()) {\n            if(assign.getUser() == user) {\n                return assign.getAvailability();\n            }\n        }\n        return 1;\n    }\n\n    /**\n     * Sets iteration object and sum of each iterations assignment\n     * availabilities to the transfer object.\n     * \n     * @param rawUnassignedLoad\n     *            Collection of UnassignedLoadTO transfer objects that each\n     *            contain an iteration id.\n     */\n    public void loadIterationAvailabilitySums(\n            List<UnassignedLoadTO> rawUnassignedLoad) {\n        Set<Integer> iterationIds = new HashSet<Integer>();\n        for (UnassignedLoadTO row : rawUnassignedLoad) {\n            iterationIds.add(row.iterationId);\n        }\n        Collection<Iteration> iterations = this.iterationDAO.getMultiple(iterationIds);\n        \n        // get availability sums per iteration\n        Map<Integer, Integer> totalAvailabilities = this.iterationDAO\n                .getTotalAvailability(iterationIds);\n\n        for (UnassignedLoadTO row : rawUnassignedLoad) {\n            for (Iteration iter : iterations) {\n                if (iter.getId() == row.iterationId) {\n                    row.iteration = iter;\n                }\n            }\n            if (totalAvailabilities.containsKey(row.iterationId)) {\n                row.availabilitySum = totalAvailabilities.get(row.iterationId);\n            } else {\n                row.availabilitySum = 1;\n            }\n        }\n    }\n\n    /**\n     * Combine directly and indirectly assigned task load.\n     */\n    public Map<Integer, IterationLoadContainer> calculateTotalAssignedUserLoad(\n            User user, Interval interval) {\n        Map<Integer, IterationLoadContainer> userLoadDataPerIteration = new HashMap<Integer, IterationLoadContainer>();\n        this.calculateDirectlyAssignedTaskLoad(userLoadDataPerIteration, user,\n                interval);\n        this.calculateStoryAssignedTaskLoad(userLoadDataPerIteration, user,\n                interval);\n        this.calculateUnassignedTaskLoad(userLoadDataPerIteration, user,\n                interval);\n        return userLoadDataPerIteration;\n    }\n\n    /**\n     * Update load data in the container to account for the load from the given\n     * iteration.\n     */\n    public void updateUserLoadByInterval(IntervalLoadContainer container,\n            IterationLoadContainer load, User user) {\n        Interval iterationInterval = new Interval(load.getIteration()\n                .getStartDate(), load.getIteration().getEndDate());\n        double fraction = calculateIntervalFraction(container.getInterval(),\n                iterationInterval, user);\n\n        double assignedEffortPortion = (double) load.getTotalAssignedLoad()\n                * fraction;\n        double unassignedEffortPortion = (double) load.getTotalUnassignedLoad()\n                * fraction;\n        double futureLoad = (double) load.getTotalFutureLoad() * fraction;\n\n        container.setAssignedLoad(container.getAssignedLoad()\n                + (long) assignedEffortPortion);\n        container.setUnassignedLoad(container.getUnassignedLoad()\n                + (long) unassignedEffortPortion);\n\n        container.setFutureLoad(container.getFutureLoad() + (long) futureLoad);\n\n        IterationLoadContainer perUserIterationLoad = new IterationLoadContainer();\n        perUserIterationLoad.setIteration(load.getIteration());\n        perUserIterationLoad.setTotalAssignedLoad((long) assignedEffortPortion);\n        perUserIterationLoad\n                .setTotalUnassignedLoad((long) unassignedEffortPortion);\n        perUserIterationLoad.setTotalFutureLoad((long) futureLoad);\n        container.getDetailedLoad().add(perUserIterationLoad);\n    }\n\n    private double calculateIntervalFraction(Interval containerInterval,\n            Interval backlogInterval, User user) {\n        \n        if(backlogInterval.containsNow()) {\n            backlogInterval = new Interval(new DateTime().withMillisOfSecond(0), backlogInterval.getEnd());\n        }\n        \n        // iteration is not ongoing at this time\n        if (!backlogInterval.overlaps(containerInterval)) {\n            return 0.0;\n        }\n        \n        Interval periodInterval = containerInterval.overlap(backlogInterval);\n\n        // (work days in period / total work days in this iteration) * total\n        // work\n        Duration workTimeInBacklog = this.userBusiness\n                .calculateWorktimePerPeriod(user, backlogInterval);\n        Duration workTimeInPeriod = this.userBusiness\n                .calculateWorktimePerPeriod(user, periodInterval);\n\n        double fraction = (double) workTimeInPeriod.getMillis()\n                / (double) workTimeInBacklog.getMillis();\n        return fraction;\n    }\n\n    public List<IntervalLoadContainer> initializeLoadContainers(User user,\n            DateTime startDate, DateTime endDate, Period periodLength) {\n        List<IntervalLoadContainer> ret = new ArrayList<IntervalLoadContainer>();\n        if (startDate.compareTo(endDate) > 0) {\n            return Collections.emptyList();\n        }\n        MutableDateTime dateIterator = new MutableDateTime(startDate\n                .toDateMidnight());\n        while (dateIterator.isBefore(endDate)) {\n            IntervalLoadContainer period = new IntervalLoadContainer();\n            DateTime start = dateIterator.toDateTime();\n            dateIterator.add(periodLength);\n            period.setInterval(new Interval(start, dateIterator));\n            ret.add(period);\n        }\n\n        return ret;\n    }\n\n    /**\n     * Computes baseline load portions per interval.\n     * \n     * Baseline load will not be added for vacations or weekends.\n     */\n    public void addBaselineLoad(ComputedLoadData preComputedLoad, User user,\n            Interval interval) {\n        List<IntervalLoadContainer> loadContainers = preComputedLoad\n                .getLoadContainers();\n        List<Assignment> assigments = this.assignmentDAO\n                .assigmentsInBacklogTimeframe(interval, user);\n        Map<Integer, Interval> assigmentIntervals = calculateAssigmentIntervals(assigments);\n        for (IntervalLoadContainer intervalLoad : loadContainers) {\n            for (Assignment assignment : assigments) {\n                Interval assigmentBacklogInterval = assigmentIntervals\n                        .get(assignment.getId());\n                Interval assignmentWithinCurrentInterval = intervalLoad\n                        .getInterval().overlap(assigmentBacklogInterval);\n                if (assignmentWithinCurrentInterval != null) {\n                    long dailyBaselineLoad = determinateWeeklyBaselineLoad(assignment) / 5;\n                    Duration effectiveWorktime = this.userBusiness\n                            .calculateWorktimePerPeriod(user,\n                                    assignmentWithinCurrentInterval);\n                    // from milliseconds to days\n                    long exactDays = effectiveWorktime.getMillis() / 86400000;\n                    long baselineLoadForInterval = dailyBaselineLoad\n                            * exactDays;\n\n                    intervalLoad.setBaselineLoad(intervalLoad.getBaselineLoad()\n                            + baselineLoadForInterval);\n\n                    BacklogLoadContainer backlogLoad = this\n                            .getBacklogLoadContainerFromInterval(intervalLoad,\n                                    assignment.getBacklog());\n\n                    backlogLoad.setTotalBaselineLoad(backlogLoad\n                            .getTotalBaselineLoad()\n                            + baselineLoadForInterval);\n                }\n            }\n        }\n    }\n\n    private BacklogLoadContainer getBacklogLoadContainerFromInterval(\n            IntervalLoadContainer intervalLoad, Backlog backlog) {\n        BacklogLoadContainer targetContainer = null;\n        for (BacklogLoadContainer iterator : intervalLoad.getDetailedLoad()) {\n            if (iterator.getBacklog().getId() == backlog.getId()) {\n                targetContainer = iterator;\n                break;\n            }\n        }\n        if (targetContainer == null) {\n            if (backlog instanceof Iteration) {\n                IterationLoadContainer tmp = new IterationLoadContainer();\n                tmp.setIteration((Iteration) backlog);\n                targetContainer = tmp;\n            } else if (backlog instanceof Project) {\n                ProjectLoadContainer tmp = new ProjectLoadContainer();\n                tmp.setProject((Project) backlog);\n                targetContainer = tmp;\n            }\n            intervalLoad.getDetailedLoad().add(targetContainer);\n        }\n        return targetContainer;\n    }\n\n    private long determinateWeeklyBaselineLoad(Assignment assignment) {\n        long baselineLoad = 0L;\n        ExactEstimate backlogBaseline = null;\n        if (assignment.getBacklog() instanceof Iteration) {\n            backlogBaseline = ((Iteration) assignment.getBacklog())\n                    .getBaselineLoad();\n        } else if (assignment.getBacklog() instanceof Project) {\n            backlogBaseline = ((Project) assignment.getBacklog())\n                    .getBaselineLoad();\n        }\n        if (backlogBaseline != null) {\n            baselineLoad = backlogBaseline.longValue();\n        }\n\n        if (assignment.getPersonalLoad() != null) {\n            baselineLoad += assignment.getPersonalLoad().longValue();\n        }\n        return baselineLoad;\n    }\n\n    private Map<Integer, Interval> calculateAssigmentIntervals(\n            List<Assignment> assigments) {\n        Map<Integer, Interval> assigmentIntervals = new HashMap<Integer, Interval>();\n        for (Assignment assigment : assigments) {\n            Interval blInterval;\n            Backlog backlog = assigment.getBacklog();\n            if (backlog instanceof Schedulable) {\n                Schedulable bl = (Schedulable) backlog;\n                blInterval = new Interval(bl.getStartDate(), bl.getEndDate());\n            } else {\n                blInterval = new Interval(0);\n            }\n            assigmentIntervals.put(assigment.getId(), blInterval);\n        }\n        return assigmentIntervals;\n    }\n\n    public ComputedLoadData generatePersonalAssignedLoad(User user,\n            DateTime startDate, DateTime endDate, Period len) {\n        Interval interval = new Interval(startDate, endDate);\n        Map<Integer, IterationLoadContainer> iterationEffortLeft = this\n                .calculateTotalAssignedUserLoad(user, interval);\n        this.calculateIterationFutureLoad(iterationEffortLeft, user, interval);\n        List<IntervalLoadContainer> periods = this.initializeLoadContainers(\n                user, startDate, endDate, len);\n        ComputedLoadData loadData = new ComputedLoadData();\n        loadData.setLoadContainers(periods);\n\n        for (Integer iterationId : iterationEffortLeft.keySet()) {\n            for (IntervalLoadContainer period : periods) {\n                this.updateUserLoadByInterval(period, iterationEffortLeft\n                        .get(iterationId), user);\n            }\n        }\n        this.addBaselineLoad(loadData, user, interval);\n        loadData.setStartDate(startDate);\n        loadData.setEndDate(endDate);\n        return loadData;\n    }\n\n    public ComputedLoadData retrieveUserLoad(User user, int weeksAhead) {\n        Period len = new Period();\n        len = len.plusDays(1);\n        MutableDateTime startDate = new MutableDateTime();\n        startDate.setMillisOfDay(0);\n\n        DateTime start = startDate.toDateTime();\n        DateTime end = start.plusWeeks(weeksAhead);\n        return this.generatePersonalAssignedLoad(user, start, end, len);\n    }\n\n    public UserLoadLimits getDailyLoadLimitsByUser(User user) {\n        UserLoadLimits limits = new UserLoadLimits();\n        double userDailyMinutes;\n        if (user.getWeekEffort() == null) {\n            userDailyMinutes = 0.0;\n        } else {\n            userDailyMinutes = user.getWeekEffort().doubleValue() / 5.0;\n        }\n        double lowPercentage = (double) settingBusiness.getRangeLow() / 100.0;\n        limits.setDailyLoadLow(userDailyMinutes * lowPercentage);\n        double mediumPercentage = (double) settingBusiness.getOptimalLow() / 100.0;\n        limits.setDailyLoadMedium(userDailyMinutes * mediumPercentage);\n        double highPercentage = (double) settingBusiness.getOptimalHigh() / 100.0;\n        limits.setDailyLoadHigh(userDailyMinutes * highPercentage);\n        double criticalPercentage = (double) settingBusiness.getCriticalLow() / 100.0;\n        limits.setDailyLoadCritical(userDailyMinutes * criticalPercentage);\n        double maximumPercentage = (double) settingBusiness.getRangeHigh() / 100.0;\n        limits.setDailyLoadMaximum(userDailyMinutes * maximumPercentage);\n        return limits;\n    }\n\n    public TaskDAO getTaskDAO() {\n        return taskDAO;\n    }\n\n    public void setTaskDAO(TaskDAO taskDAO) {\n        this.taskDAO = taskDAO;\n    }\n\n    public StoryDAO getStoryDAO() {\n        return storyDAO;\n    }\n\n    public void setStoryDAO(StoryDAO storyDAO) {\n        this.storyDAO = storyDAO;\n    }\n\n    public void setUserBusiness(UserBusiness userBusiness) {\n        this.userBusiness = userBusiness;\n    }\n\n    public void setIterationDAO(IterationDAO iterationDAO) {\n        this.iterationDAO = iterationDAO;\n    }\n\n    public void setAssignmentDAO(AssignmentDAO assignmentDAO) {\n        this.assignmentDAO = assignmentDAO;\n    }\n\n    public void setSettingBusiness(SettingBusiness settingBusiness) {\n        this.settingBusiness = settingBusiness;\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\impl\\\\PortfolioBusinessImpl.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["PortfolioBusinessImpl"], "AN": ["projectDAO", "settingBusiness", "authorizationBusiness"], "SCS_VariableDeclarator": ["projectDAO", "settingBusiness", "authorizationBusiness", "projectTOs", "project", "projectTO", "assignees", "assignment", "portfolioData", "startDate", "endDate"], "MN": ["getProjectTOs", "getPortfolioData", "setProjectDAO", "setSettingBusiness"], "PN": ["projects", "projectDAO", "settingBusiness"], "SCS_VariableDeclaration": ["List", "Project", "ProjectTO", "Set", "Assignment", "PortfolioTO", "LocalDate", "LocalDate"], "SCS_MemberReference": ["projects", "project", "assignees", "authorizationBusiness", "projectTO", "projectTOs", "startDate", "endDate", "startDate", "endDate", "startDate", "endDate", "portfolioData", "projectDAO", "projectDAO", "settingBusiness", "settingBusiness"], "SCS_ClassReference": ["projectTO", "assignees", "assignment", "projectTO", null, "project", "SecurityUtil", "projectTOs", "startDate", "settingBusiness", "portfolioData", null, "projectDAO", "portfolioData", null, "projectDAO", "portfolioData", "Days", null], "SCS_MethodInvocation": ["getAssignments", "add", "getUser", "setAssignees", "isBacklogAccessible", "getId", "getLoggedUser", "add", "plus", "getPortfolioTimeSpan", "setRankedProjects", "getProjectTOs", "getRankedProjects", "setUnrankedProjects", "getProjectTOs", "getUnrankedProjects", "setTimeSpanInDays", "daysBetween", "getDays"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.business.impl;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport org.joda.time.Days;\nimport org.joda.time.LocalDate;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport fi.hut.soberit.agilefant.business.AuthorizationBusiness;\nimport fi.hut.soberit.agilefant.business.PortfolioBusiness;\nimport fi.hut.soberit.agilefant.business.SettingBusiness;\nimport fi.hut.soberit.agilefant.db.ProjectDAO;\nimport fi.hut.soberit.agilefant.model.Assignment;\nimport fi.hut.soberit.agilefant.model.Project;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.security.SecurityUtil;\nimport fi.hut.soberit.agilefant.transfer.PortfolioTO;\nimport fi.hut.soberit.agilefant.transfer.ProjectTO;\n\n@Service(\"portfolioBusiness\")\n@Transactional\npublic class PortfolioBusinessImpl implements PortfolioBusiness {\n\n    @Autowired\n    private ProjectDAO projectDAO;\n\n    @Autowired\n    private SettingBusiness settingBusiness;\n\n    @Autowired\n    private AuthorizationBusiness authorizationBusiness;\n        \n    private List<Project> getProjectTOs(Collection<Project> projects) {\n        List<Project> projectTOs = new ArrayList<Project>();\n        for (Project project : projects) {\n            ProjectTO projectTO = new ProjectTO(project);\n            Set<User> assignees = new HashSet<User>();\n            for (Assignment assignment : projectTO.getAssignments()) {\n                assignees.add(assignment.getUser());\n            }\n            projectTO.setAssignees(assignees);\n            if(this.authorizationBusiness.isBacklogAccessible(project.getId(), SecurityUtil.getLoggedUser())) {\n                projectTOs.add(projectTO);            \t\n            }\n        }\n        return projectTOs;\n    }\n    \n    @Transactional(readOnly = true)\n    public PortfolioTO getPortfolioData() {\n        PortfolioTO portfolioData = new PortfolioTO();\n\n        LocalDate startDate = new LocalDate();\n        LocalDate endDate = startDate.plus(settingBusiness.getPortfolioTimeSpan());\n\n        portfolioData.setRankedProjects(this.getProjectTOs(projectDAO.getRankedProjects(startDate, endDate)));\n        portfolioData.setUnrankedProjects(this.getProjectTOs(projectDAO.getUnrankedProjects(startDate, endDate)));\n        \n        portfolioData.setTimeSpanInDays(Days.daysBetween(startDate, endDate).getDays());\n        return portfolioData;        \n    }\n\n    public void setProjectDAO(ProjectDAO projectDAO) {\n        this.projectDAO = projectDAO;\n    }\n\n    public void setSettingBusiness(SettingBusiness settingBusiness) {\n        this.settingBusiness = settingBusiness;\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\impl\\\\ProductBusinessImpl.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["ProductBusinessImpl"], "AN": ["productDAO", "projectBusiness", "iterationBusiness", "storyBusiness", "hourEntryBusiness", "transferObjectBusiness", "teamBusiness", "authorizationBusiness", "inner"], "SCS_VariableDeclarator": ["productDAO", "projectBusiness", "iterationBusiness", "storyBusiness", "hourEntryBusiness", "transferObjectBusiness", "teamBusiness", "authorizationBusiness", "storable", "teams", "tid", "createdId", "projects", "child", "children", "item", "stories", "item", "hourEntries", "backlogs", "root", "stories", "story", "assignedIteration", "backlog_id", "backlogComparator", "inner", "project", "comparator", "container", "standAloneIterations", "standIter", "iter", "iterTo", "standAloneStories", "standAloneStoriesTo", "s", "children", "child", "to", "backlogTO", "standaloneProduct", "canditateProducts", "iter", "product"], "SCS_ConstructorDeclaration": ["ProductBusinessImpl"], "SCS_ClassReference": ["Product", "productDAO", null, null, "teams", "teamBusiness", "storable", "storable", "productData", "storable", "productData", "storable", null, null, null, "productData", "productData", null, null, "product", "projects", "transferObjectBusiness", "", "", "product", "projectBusiness", "item", "iterationBusiness", "item", "product", "storyBusiness", "product", "hourEntryBusiness", "root", "backlogs", "root", "", null, "story", "assignedIteration", "assignedIteration", "backlogs", null, null, "story", null, "backlogs", null, null, "o1", "o2", "o1", null, "o2", null, null, "root", "Collections", "project", "Collections", "root", "backlogs", "Collections", "container", "iterationBusiness", "transferObjectBusiness", "storyBusiness", "standAloneStoriesTo", "transferObjectBusiness", "iterTo", "standIter", "root", "parent", "", "to", "backlogs", "to", "", "backlogTO", "backlogTO", "productDAO", "standaloneProduct", "standaloneProduct", "products", "canditateProducts", null, "canditateProducts", "iter", "iter", null, "product", "SecurityUtil", "products"], "MN": ["setProductDAO", "retrieveAllOrderByName", "store", "validateProductData", "retrieveProjects", "delete", "delete", "retrieveLeafStoriesOnly", "compare", "createBacklogTo", "createTO", "calculateProductSchedule", "storeAllTimeSheets"], "PN": ["productDAO", "productId", "productData", "teamIds", "productData", "product", "id", "product", "product", "o1", "o2", "parent", "backlogs", "parentTO", "backlog", "parentTO", "product", "products"], "SCS_MemberReference": ["genericDAO", "productDAO", "productDAO", "productDAO", "productData", "productId", "storable", "productId", "teamIds", "teamIds", "tid", "teams", "storable", "storable", "storable", "createdId", "child", "child", "projects", "id", "product", "children", "children", "item", "item", "stories", "stories", "item", "hourEntries", "hourEntries", "product", "product", "root", "product", "backlogs", "root", "productDAO", "product", "stories", "assignedIteration", "backlog_id", "story", "backlog_id", "assignedIteration", "backlog_id", "story", "backlog_id", "o1", "o2", "inner", "o1", "o2", "backlogComparator", "backlogComparator", "comparator", "standAloneIterations", "iter", "iter", "standAloneStories", "s", "standAloneStoriesTo", "iterTo", "standIter", "root", "children", "child", "parentTO", "to", "child", "backlogs", "to", "backlog", "backlogTO", "backlog", "parentTO", "backlogTO", "parentTO", "backlog", "backlogTO", "backlog", "parentTO", "backlogTO", "parentTO", "backlogTO", "product", "standaloneProduct", "authorizationBusiness", "product"], "SCS_MethodInvocation": ["retrieveBacklogTree", "validateProductData", "retrieve", "add", "retrieve", "setTeams", "setName", "getName", "setDescription", "getDescription", "getId", "store", "create", "retrieve", "getName", "getName", "trim", "length", "getChildren", "add", "constructProjectTO", "delete", "retrieve", "getChildren", "delete", "getId", "delete", "getId", "getStories", "forceDelete", "getHourEntries", "deleteAll", "setChildren", "put", "getId", "createBacklogTo", "retrieveLeafStories", "getIteration", "isStandAlone", "getId", "get", "getLeafStories", "add", "getBacklog", "getId", "get", "getLeafStories", "add", "getScheduleStatus", "getScheduleStatus", "getScheduleStatus", "ordinal", "getScheduleStatus", "ordinal", "compare", "getChildProjects", "sort", "getChildIterations", "sort", "getChildProjects", "values", "sort", "getLeafStories", "retrieveAllStandAloneIterations", "constructIterationTO", "retrieveStoriesInIteration", "add", "constructStoryTO", "setRankedStories", "add", "setStandaloneIterations", "getChildren", "createTO", "setChildren", "put", "getId", "createBacklogTo", "setParent", "setParent", "retrieveScheduleStartAndEnd", "setName", "setId", "add", "addAll", "retrieveAll", "iterator", "hasNext", "next", "isBacklogAccessible", "getId", "getLoggedUser", "add"], "SCS_VariableDeclaration": ["Product", "Set", "Integer", "int", "List", "Backlog", "Set", "Backlog", "Set", "Story", "Set", "Map", "ProductTO", "List", "Story", "Iteration", "int", "Comparator", "ProjectTO", "Comparator", "LeafStoryContainer", "List", "List", "Iteration", "IterationTO", "List", "List", "Story", "List", "Backlog", "Backlog", "Backlog", "Product", "Collection", "Iterator", "Product"], "CO": ["// Get teams", "// sort backlogs", "// sort stories", "// Added standalone iterations", "// Added storyTo object as well", "// Make sure the user has sufficient rights to export timesheets."], "CODE": "package fi.hut.soberit.agilefant.business.impl;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\nimport org.joda.time.DateTime;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.support.PropertyComparator;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport fi.hut.soberit.agilefant.business.AuthorizationBusiness;\nimport fi.hut.soberit.agilefant.business.HourEntryBusiness;\nimport fi.hut.soberit.agilefant.business.IterationBusiness;\nimport fi.hut.soberit.agilefant.business.ProductBusiness;\nimport fi.hut.soberit.agilefant.business.ProjectBusiness;\nimport fi.hut.soberit.agilefant.business.StoryBusiness;\nimport fi.hut.soberit.agilefant.business.TransferObjectBusiness;\nimport fi.hut.soberit.agilefant.business.TeamBusiness;\nimport fi.hut.soberit.agilefant.db.ProductDAO;\nimport fi.hut.soberit.agilefant.model.Backlog;\nimport fi.hut.soberit.agilefant.model.BacklogHourEntry;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.Product;\nimport fi.hut.soberit.agilefant.model.Project;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.Team;\nimport fi.hut.soberit.agilefant.security.SecurityUtil;\nimport fi.hut.soberit.agilefant.transfer.IterationTO;\nimport fi.hut.soberit.agilefant.transfer.LeafStoryContainer;\nimport fi.hut.soberit.agilefant.transfer.ProductTO;\nimport fi.hut.soberit.agilefant.transfer.ProjectTO;\nimport fi.hut.soberit.agilefant.transfer.Scheduled;\nimport fi.hut.soberit.agilefant.transfer.StoryTO;\nimport fi.hut.soberit.agilefant.util.Pair;\nimport fi.hut.soberit.agilefant.util.StoryComparator;\n\n@Service(\"productBusiness\")\n@Transactional\npublic class ProductBusinessImpl extends GenericBusinessImpl<Product> implements\n        ProductBusiness {\n\n    private ProductDAO productDAO;\n    @Autowired\n    private ProjectBusiness projectBusiness;\n    @Autowired\n    private IterationBusiness iterationBusiness;\n    @Autowired\n    private StoryBusiness storyBusiness;\n    @Autowired\n    private HourEntryBusiness hourEntryBusiness;\n    @Autowired\n    private TransferObjectBusiness transferObjectBusiness;\n    @Autowired\n    private TeamBusiness teamBusiness;\n    @Autowired\n    private AuthorizationBusiness authorizationBusiness;\n\n    public ProductBusinessImpl() {\n        super(Product.class);\n    }\n\n    @Autowired\n    public void setProductDAO(ProductDAO productDAO) {\n        this.genericDAO = productDAO;\n        this.productDAO = productDAO;\n    }\n\n    @Transactional(readOnly = true)\n    public Collection<Product> retrieveAllOrderByName() {\n        return productDAO.retrieveBacklogTree();\n    }\n\n    public Product store(int productId, Product productData, Set<Integer> teamIds) {\n        this.validateProductData(productData);\n        Product storable = new Product();\n        if (productId > 0) {\n            storable = this.retrieve(productId);\n        }\n        \n        // Get teams\n        Set<Team> teams = new HashSet<Team>();\n        if (teamIds != null) {\n            for (Integer tid : teamIds) {\n                teams.add(teamBusiness.retrieve(tid));\n            }\n            storable.setTeams(teams);\n        }\n        \n        storable.setName(productData.getName());\n        storable.setDescription(productData.getDescription());\n        if (storable.getId() > 0) {\n            this.store(storable);\n            return storable;\n        } else {\n            int createdId = this.create(storable);\n            return this.retrieve(createdId);\n        }\n    }\n\n    public void validateProductData(Product productData)\n            throws IllegalArgumentException {\n        if (productData.getName() == null\n                || productData.getName().trim().length() == 0) {\n            throw new IllegalArgumentException(\"product.emptyName\");\n        }\n    }\n\n    public List<ProjectTO> retrieveProjects(Product product) {\n        List<ProjectTO> projects = new ArrayList<ProjectTO>();\n        for (Backlog child : product.getChildren()) {\n            if (child instanceof Project) {\n                projects.add(transferObjectBusiness\n                        .constructProjectTO((Project) child));\n            }\n        }\n        return projects;\n    }\n\n    @Override\n    public void delete(int id) {\n        delete(retrieve(id));\n    }\n\n    @Override\n    public void delete(Product product) {\n        if (product == null)\n            return;\n        Set<Backlog> children = new HashSet<Backlog>(product.getChildren());\n\n        if (children != null) {\n            for (Backlog item : children) {\n                if (item instanceof Project) {\n                    projectBusiness.delete(item.getId());\n                } else if (item instanceof Iteration) {\n                    iterationBusiness.delete(item.getId());\n                }\n            }\n        }\n\n        Set<Story> stories = new HashSet<Story>(product.getStories());\n        if (stories != null) {\n            for (Story item : stories) {\n                storyBusiness.forceDelete(item);\n            }\n        }\n\n        Set<BacklogHourEntry> hourEntries = new HashSet<BacklogHourEntry>(\n                product.getHourEntries());\n        if (hourEntries != null) {\n            hourEntryBusiness.deleteAll(hourEntries);\n        }\n\n        super.delete(product);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    @Transactional(readOnly = true)\n    public ProductTO retrieveLeafStoriesOnly(Product product) {\n        Map<Integer, LeafStoryContainer> backlogs = new HashMap<Integer, LeafStoryContainer>();\n\n        ProductTO root = new ProductTO(product);\n        root.setChildren(new HashSet<Backlog>());\n        backlogs.put(root.getId(), root);\n\n        createBacklogTo(product, backlogs, root);\n\n        List<Story> stories = this.productDAO.retrieveLeafStories(product);\n        \n        for (Story story : stories) {\n            final Iteration assignedIteration = story.getIteration();\n            int backlog_id;\n\n            if (assignedIteration != null && !assignedIteration.isStandAlone()) {\n                backlog_id = assignedIteration.getId();\n                backlogs.get(backlog_id).getLeafStories().add(new StoryTO(story));\n            } else if (assignedIteration != null) {\n                continue;\n            } else {\n                backlog_id = story.getBacklog().getId();\n                backlogs.get(backlog_id).getLeafStories().add(new StoryTO(story));\n            }\n            \n            \n        }\n\n        \n        // sort backlogs\n        Comparator<Scheduled> backlogComparator = new Comparator<Scheduled>() {\n            private Comparator<Scheduled> inner = new PropertyComparator(\"startDate\", true, false);\n        \n            public int compare(Scheduled o1, Scheduled o2) {\n                if(o1 == null) {\n                    return -1;\n                }\n                if(o2 == null) {\n                    return 1;\n                }\n                if(o1.getScheduleStatus() != o2.getScheduleStatus()) {\n                    if(o1.getScheduleStatus().ordinal() < o2.getScheduleStatus().ordinal()) {\n                        return 1;\n                    } else {\n                        return -1;\n                    }\n                } else {\n                    return this.inner.compare(o1, o2);\n                }\n            }\n        };\n        \n        for (ProjectTO project : root.getChildProjects()) {\n            Collections.sort(project.getChildIterations(), backlogComparator);\n        }\n        Collections.sort(root.getChildProjects(), backlogComparator);\n\n        // sort stories\n        Comparator<Story> comparator = new StoryComparator();\n        for (LeafStoryContainer container : backlogs.values()) {\n            Collections.sort(container.getLeafStories(), comparator);\n        }\n        \n        // Added standalone iterations\n        List<Iteration> standAloneIterations = new ArrayList<Iteration>(iterationBusiness.retrieveAllStandAloneIterations());\n        List<IterationTO> standIter = new ArrayList<IterationTO>();\n        \n        for(Iteration iter :standAloneIterations ){\n            IterationTO iterTo = transferObjectBusiness.constructIterationTO(iter);\n            \n            // Added storyTo object as well\n            List<Story> standAloneStories = storyBusiness.retrieveStoriesInIteration(iter);\n            List<StoryTO> standAloneStoriesTo = new ArrayList<StoryTO>();\n            for(Story s : standAloneStories){\n                standAloneStoriesTo.add(transferObjectBusiness.constructStoryTO(s));\n            }\n            \n            iterTo.setRankedStories(standAloneStoriesTo);\n            standIter.add(iterTo);\n        }\n        \n        root.setStandaloneIterations(standIter);\n        return root;\n    }\n\n    private void createBacklogTo(Backlog parent,\n            Map<Integer, LeafStoryContainer> backlogs, Backlog parentTO) {\n        List<Backlog> children = new ArrayList<Backlog>(parent.getChildren());\n        for (Backlog child : children) {\n            Backlog to = createTO(child, parentTO);\n            to.setChildren(new HashSet<Backlog>());\n            backlogs.put(to.getId(), (LeafStoryContainer) to);\n            createBacklogTo(child, backlogs, to);\n        }\n    }\n\n    private Backlog createTO(Backlog backlog, Backlog parentTO) {\n        Backlog backlogTO = null;\n        if (backlog instanceof Project) {\n            backlogTO = new ProjectTO((Project) backlog);\n            backlogTO.setParent(parentTO);\n            ((ProjectTO) backlogTO).setScheduleStatus(transferObjectBusiness\n                    .getBacklogScheduleStatus(backlog));\n            ((ProductTO) parentTO).getChildProjects()\n                    .add((ProjectTO) backlogTO);\n        } else if (backlog instanceof Iteration) {\n            backlogTO = new IterationTO((Iteration) backlog);\n            backlogTO.setParent(parentTO);\n            ((IterationTO) backlogTO).setScheduleStatus(transferObjectBusiness\n                    .getBacklogScheduleStatus(backlog));\n            ((ProjectTO) parentTO).getChildIterations().add(\n                    (IterationTO) backlogTO);\n        }\n        return backlogTO;\n    }\n\n    public Pair<DateTime, DateTime> calculateProductSchedule(Product product) {\n        return productDAO.retrieveScheduleStartAndEnd(product);\n    }\n    \n    public void storeAllTimeSheets(Collection<Product> products) {\n        Product standaloneProduct = new Product();\n        standaloneProduct.setName(\"[Standalone Iterations]\");\n        standaloneProduct.setId(0);\n        products.add(standaloneProduct);\n        \n        Collection<Product> canditateProducts = new ArrayList<Product>();\n        \n        canditateProducts.addAll(this.retrieveAll());\n        \n        // Make sure the user has sufficient rights to export timesheets.\n        for (Iterator<Product> iter = canditateProducts.iterator(); iter.hasNext();) {\n            Product product = iter.next();\n            \n            if (this.authorizationBusiness.isBacklogAccessible(product.getId(), SecurityUtil.getLoggedUser())) {\n                products.add(product);\n            }\n        }\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\impl\\\\ProjectBurnupBusinessImpl.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["ProjectBurnupBusinessImpl"], "AN": ["backlogHistoryEntryDAO", "DEFAULT_WIDTH", "DEFAULT_HEIGHT", "SMALL_WIDTH", "SMALL_HEIGHT", "CHART_BACKGROUND_COLOR", "PLOT_BACKGROUND_COLOR", "GRIDLINE_COLOR", "DATE_AXIS_LABEL", "STORYPOINTS_AXIS_LABEL", "CHART_NAME", "PLANNED_NAME", "BRANCH_MAX_NAME", "DONE_NAME"], "SCS_VariableDeclarator": ["backlogHistoryEntryDAO", "DEFAULT_WIDTH", "DEFAULT_HEIGHT", "SMALL_WIDTH", "SMALL_HEIGHT", "CHART_BACKGROUND_COLOR", "PLOT_BACKGROUND_COLOR", "GRIDLINE_COLOR", "DATE_AXIS_LABEL", "STORYPOINTS_AXIS_LABEL", "CHART_NAME", "PLANNED_NAME", "BRANCH_MAX_NAME", "DONE_NAME", "out", "data", "burnup", "datasets", "plot", "burndown", "chart", "plot", "ins", "planned", "done", "branchMax", "now", "lastEntry", "lastDoneEntry", "entry", "second", "item", "item", "branchItem", "nowSecond", "nowItem", "branchItem", "nowItem", "plot", "axis", "result", "result", "stroke", "stepStroke", "result", "stroke", "stepStroke"], "SCS_MemberReference": ["white", "white", "project", "project", "SMALL_WIDTH", "SMALL_HEIGHT", "out", "chart", "width", "height", "chart", "DEFAULT_WIDTH", "DEFAULT_HEIGHT", "DATE_AXIS_LABEL", "STORYPOINTS_AXIS_LABEL", "VERTICAL", "data", "first", "second", "third", "burnup", "burnup", "burnup", "project", "burndown", "burndownChart", "CHART_BACKGROUND_COLOR", "PLOT_BACKGROUND_COLOR", "ins", "chart", "PLANNED_NAME", "DONE_NAME", "BRANCH_MAX_NAME", "data", "now", "lastDoneEntry", "doneSum", "doneSum", "second", "doneSum", "item", "lastDoneEntry", "entry", "second", "estimateSum", "item", "second", "branchMax", "branchItem", "lastEntry", "entry", "lastEntry", "now", "nowSecond", "estimateSum", "nowItem", "nowSecond", "branchMax", "branchItem", "lastDoneEntry", "now", "nowSecond", "doneSum", "nowItem", "planned", "done", "branchMax", "CHART_BACKGROUND_COLOR", "PLOT_BACKGROUND_COLOR", "GRIDLINE_COLOR", "GRIDLINE_COLOR", "result", "CAP_ROUND", "JOIN_ROUND", "stroke", "stepStroke", "result", "CAP_ROUND", "JOIN_ROUND", "stroke", "stepStroke", "result"], "MN": ["getBurnup", "getSmallBurnup", "getChartImageByteArray", "getChartImageByteArray", "constructChart", "constructSmallChart", "transformToSmallChart", "convertToDatasets", "formatChartStyle", "formatChartAxes", "getDoneRenderer", "getPlannedRenderer", "getBranchMaxRenderer"], "PN": ["project", "project", "chart", "width", "height", "chart", "project", "project", "burndownChart", "data", "chart", "chart", "start", "end"], "SCS_ClassReference": ["", "", "", "", "ChartUtilities", "out", "e", "", "backlogHistoryEntryDAO", "project", "ChartFactory", "project", "", "burnup", "plot", "", "plot", "plot", "", "plot", "plot", "", "plot", "", "project", "project", "", null, "", "chart", "chart", "plot", "plot", "plot", "plot", null, "plot", null, "plot", null, "plot", null, "chart", "chart", "chart", "entry.timestamp", "entry.timestamp", "done", "planned", "branchMax", "now", "lastEntry.timestamp", "planned", "branchMax", "lastDoneEntry.timestamp", "done", "Triple", "chart", "chart", null, "chart", "plot", "axis", "end", null, null, "axis", "start", null, "axis", "plot", "plot", "result", "result", "result", "result", "result", "result", "result", "result", "result", "result"], "SCS_MethodInvocation": ["getChartImageByteArray", "constructChart", "getChartImageByteArray", "constructSmallChart", "writeChartAsPNG", "toByteArray", "printStackTrace", "getChartImageByteArray", "retrieveBurnupData", "getId", "createXYStepChart", "getName", "convertToDatasets", "getXYPlot", "setRenderer", "getPlannedRenderer", "setDataset", "setRenderer", "getDoneRenderer", "setDataset", "setRenderer", "getBranchMaxRenderer", "setDataset", "formatChartAxes", "getStartDate", "getEndDate", "formatChartStyle", "constructChart", "transformToSmallChart", "getXYPlot", "setBackgroundPaint", "setBackgroundPaint", "setDomainGridlinesVisible", "setRangeGridlinesVisible", "getDomainAxis", "setVisible", "getRangeAxis", "setVisible", "getDomainAxis", "setLabel", "getRangeAxis", "setLabel", "setPadding", "removeLegend", "setTitle", "isAfter", "toDate", "add", "add", "add", "toDate", "isEqual", "add", "add", "isEqual", "add", "create", "setBackgroundPaint", "getPlot", "setBackgroundPaint", "getXYPlot", "getDomainAxis", "setMaximumDate", "toDateMidnight", "plusDays", "toDate", "setMinimumDate", "toDateMidnight", "toDate", "setDateFormatOverride", "setDomainGridlinePaint", "setRangeGridlinePaint", "setSeriesShape", "setSeriesPaint", "setSeriesPaint", "setSeriesStroke", "setSeriesShape", "setStepStroke", "setSeriesPaint", "setSeriesStroke", "setSeriesShape", "setStepStroke"], "SCS_VariableDeclaration": ["ByteArrayOutputStream", "ProjectBurnupData", "JFreeChart", "Triple", "XYPlot", "JFreeChart", "JFreeChart", "XYPlot", "RectangleInsets", "TimeSeries", "TimeSeries", "TimeSeries", "DateTime", "ProjectBurnupData", "ProjectBurnupData", "ProjectBurnupData", "Second", "TimeSeriesDataItem", "TimeSeriesDataItem", "TimeSeriesDataItem", "Second", "TimeSeriesDataItem", "TimeSeriesDataItem", "TimeSeriesDataItem", "XYPlot", "DateAxis", "XYAreaRenderer", "CustomXYStepRenderer", "Stroke", "Stroke", "CustomXYStepRenderer", "Stroke", "Stroke"], "CO": ["/* Chart sizes */", "/* Chart backgrounds */", "/* Axis titles */", "/* Names */", "/**\n     * Generates a byte array (a png image file) from a JFreeChart object\n     * \n     * @param chart\n     *            A chart object from which the image is created\n     * @param width\n     *            Width of the created image\n     * @param height\n     *            Height of the created image\n     * @return Byte array representing a png image file\n     */", "/**\n     * Trims and transforms a big burndown chart to a small one.\n     */", "/**\n     * Sets the chart's and plot's background colors.\n     */", "/**\n     * Sets the correct start and end dates and date format.\n     */"], "CODE": "package fi.hut.soberit.agilefant.business.impl;\n\nimport java.awt.BasicStroke;\nimport java.awt.Color;\nimport java.awt.Rectangle;\nimport java.awt.Stroke;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.text.SimpleDateFormat;\n\nimport org.jfree.chart.ChartFactory;\nimport org.jfree.chart.ChartUtilities;\nimport org.jfree.chart.JFreeChart;\nimport org.jfree.chart.axis.DateAxis;\nimport org.jfree.chart.plot.PlotOrientation;\nimport org.jfree.chart.plot.XYPlot;\nimport org.jfree.chart.renderer.xy.XYAreaRenderer;\nimport org.jfree.chart.renderer.xy.XYStepRenderer;\nimport org.jfree.data.time.Second;\nimport org.jfree.data.time.TimeSeries;\nimport org.jfree.data.time.TimeSeriesCollection;\nimport org.jfree.data.time.TimeSeriesDataItem;\nimport org.jfree.ui.RectangleInsets;\nimport org.joda.time.DateTime;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport fi.hut.soberit.agilefant.business.ProjectBurnupBusiness;\nimport fi.hut.soberit.agilefant.db.BacklogHistoryEntryDAO;\nimport fi.hut.soberit.agilefant.model.Project;\nimport fi.hut.soberit.agilefant.util.CustomXYStepRenderer;\nimport fi.hut.soberit.agilefant.util.ProjectBurnupData;\nimport fi.hut.soberit.agilefant.util.Triple;\n\n@Service(\"projectBurnupBusiness\")\npublic class ProjectBurnupBusinessImpl implements ProjectBurnupBusiness {\n\n    @Autowired\n    private BacklogHistoryEntryDAO backlogHistoryEntryDAO;\n\n    /* Chart sizes */\n    protected static final int DEFAULT_WIDTH = 780;\n    protected static final int DEFAULT_HEIGHT = 600;\n    protected static final int SMALL_WIDTH = 110;\n    protected static final int SMALL_HEIGHT = 85;\n\n    /* Chart backgrounds */\n    protected static final Color CHART_BACKGROUND_COLOR = Color.white;\n    protected static final Color PLOT_BACKGROUND_COLOR = Color.white;\n    protected static final Color GRIDLINE_COLOR = new Color(0xcc, 0xcc, 0xcc);\n\n    /* Axis titles */\n    protected static final String DATE_AXIS_LABEL = \"Date\";\n    protected static final String STORYPOINTS_AXIS_LABEL = \"Story points\";\n\n    /* Names */\n    protected static final String CHART_NAME = \"Project burnup\";\n    protected static final String PLANNED_NAME = \"Points in leaf stories\";\n    protected static final String BRANCH_MAX_NAME = \"Points in project\";\n    protected static final String DONE_NAME = \"Points done\";\n\n    \n    @Transactional(readOnly = true)\n    public byte[] getBurnup(Project project) {\n        return getChartImageByteArray(constructChart(project));\n    }\n    \n    @Transactional(readOnly = true)\n    public byte[] getSmallBurnup(Project project) {\n        return getChartImageByteArray(constructSmallChart(project), SMALL_WIDTH, SMALL_HEIGHT);\n    }\n    \n    \n    /**\n     * Generates a byte array (a png image file) from a JFreeChart object\n     * \n     * @param chart\n     *            A chart object from which the image is created\n     * @param width\n     *            Width of the created image\n     * @param height\n     *            Height of the created image\n     * @return Byte array representing a png image file\n     */\n    protected byte[] getChartImageByteArray(JFreeChart chart, int width,\n            int height) {\n        try {\n            ByteArrayOutputStream out = new ByteArrayOutputStream();\n            ChartUtilities.writeChartAsPNG(out, chart, width, height);\n            return out.toByteArray();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n\n    protected byte[] getChartImageByteArray(JFreeChart chart) {\n        return getChartImageByteArray(chart, DEFAULT_WIDTH, DEFAULT_HEIGHT);\n    }\n\n\n    protected JFreeChart constructChart(Project project) {\n        ProjectBurnupData data = backlogHistoryEntryDAO\n                .retrieveBurnupData(project.getId());\n\n        JFreeChart burnup = ChartFactory.createXYStepChart(\"'\" + project.getName() + \"' burnup\",\n                DATE_AXIS_LABEL, STORYPOINTS_AXIS_LABEL, null,\n                PlotOrientation.VERTICAL, true, true, false);\n\n        Triple<TimeSeriesCollection, TimeSeriesCollection, TimeSeriesCollection> datasets = convertToDatasets(data);\n\n        XYPlot plot = burnup.getXYPlot();\n        plot.setRenderer(0, getPlannedRenderer());\n        plot.setDataset(0, datasets.first);\n        plot.setRenderer(1, getDoneRenderer());\n        plot.setDataset(1, datasets.second);\n        plot.setRenderer(2, getBranchMaxRenderer());\n        plot.setDataset(2, datasets.third);\n\n        formatChartAxes(burnup, new DateTime(project.getStartDate()),\n                new DateTime(project.getEndDate()));\n\n        formatChartStyle(burnup);\n\n        return burnup;\n    }\n    \n    protected JFreeChart constructSmallChart(Project project) {\n        JFreeChart burndown = this.constructChart(project);\n        return transformToSmallChart(burndown);\n    }\n    \n    /**\n     * Trims and transforms a big burndown chart to a small one.\n     */\n    protected JFreeChart transformToSmallChart(JFreeChart burndownChart) {\n        JFreeChart chart = burndownChart;\n        XYPlot plot = chart.getXYPlot();\n        \n        chart.setBackgroundPaint(CHART_BACKGROUND_COLOR);\n        plot.setBackgroundPaint(PLOT_BACKGROUND_COLOR);\n        \n        plot.setDomainGridlinesVisible(false);\n        plot.setRangeGridlinesVisible(false);\n        plot.getDomainAxis().setVisible(false);\n        plot.getRangeAxis().setVisible(false);\n        \n        plot.getDomainAxis().setLabel(null);\n        plot.getRangeAxis().setLabel(null);\n        \n        RectangleInsets ins = new RectangleInsets(-6, -8, -3, -7);\n        chart.setPadding(ins);\n\n        chart.removeLegend();\n        chart.setTitle(\"\");\n        \n        return chart;\n    }\n\n    protected Triple<TimeSeriesCollection, TimeSeriesCollection, TimeSeriesCollection> convertToDatasets(\n            ProjectBurnupData data) {\n        TimeSeries planned = new TimeSeries(PLANNED_NAME);\n        TimeSeries done = new TimeSeries(DONE_NAME);\n        TimeSeries branchMax = new TimeSeries(BRANCH_MAX_NAME);\n        DateTime now = new DateTime();\n\n        ProjectBurnupData.Entry lastEntry = null;\n        ProjectBurnupData.Entry lastDoneEntry = null;\n        for (ProjectBurnupData.Entry entry : data) {\n            if (entry.timestamp.isAfter(now)) {\n                break;\n            }\n            Second second = new Second(entry.timestamp.toDate());\n            if (lastDoneEntry == null || entry.doneSum != lastDoneEntry.doneSum) {\n                TimeSeriesDataItem item = new TimeSeriesDataItem(second,\n                        entry.doneSum);\n                done.add(item);\n                lastDoneEntry = entry;\n            }\n            TimeSeriesDataItem item = new TimeSeriesDataItem(second,\n                    entry.estimateSum);\n            planned.add(item);\n            TimeSeriesDataItem branchItem = new TimeSeriesDataItem(second, \n                    entry.branchMax);\n            branchMax.add(branchItem);\n            lastEntry = entry;\n        }\n\n        Second nowSecond = new Second(now.toDate());\n        if (lastEntry != null && !lastEntry.timestamp.isEqual(now)) {\n            TimeSeriesDataItem nowItem = new TimeSeriesDataItem(nowSecond,\n                    lastEntry.estimateSum);\n            planned.add(nowItem);\n            TimeSeriesDataItem branchItem = new TimeSeriesDataItem(nowSecond,\n                    lastEntry.branchMax);\n            branchMax.add(branchItem);\n        }\n        if (lastDoneEntry != null && !lastDoneEntry.timestamp.isEqual(now)) {\n            TimeSeriesDataItem nowItem = new TimeSeriesDataItem(nowSecond,\n                    lastEntry.doneSum);\n            done.add(nowItem);\n        }\n\n        return Triple.create(new TimeSeriesCollection(planned),\n                new TimeSeriesCollection(done), new TimeSeriesCollection(branchMax));\n    }\n\n    /**\n     * Sets the chart's and plot's background colors.\n     */\n    protected void formatChartStyle(JFreeChart chart) {\n        chart.setBackgroundPaint(CHART_BACKGROUND_COLOR);\n        chart.getPlot().setBackgroundPaint(PLOT_BACKGROUND_COLOR);\n    }\n\n    /**\n     * Sets the correct start and end dates and date format.\n     */\n    protected void formatChartAxes(JFreeChart chart, DateTime start,\n            DateTime end) {\n        XYPlot plot = chart.getXYPlot();\n        DateAxis axis = (DateAxis) plot.getDomainAxis();\n        axis.setMaximumDate(end.toDateMidnight().plusDays(1).toDate());\n        axis.setMinimumDate(start.toDateMidnight().toDate());\n        axis.setDateFormatOverride(new SimpleDateFormat(\"EEE d.M.\"));\n        plot.setDomainGridlinePaint(GRIDLINE_COLOR);\n        plot.setRangeGridlinePaint(GRIDLINE_COLOR);\n    }\n\n    protected XYAreaRenderer getDoneRenderer() {\n        XYAreaRenderer result = new XYAreaRenderer();\n        result.setSeriesShape(0, new Rectangle(-2, -2, 4, 4));\n        result.setSeriesPaint(0, new Color(0, 187, 0, 100));\n        return result;\n    }\n\n    protected XYStepRenderer getPlannedRenderer() {\n        CustomXYStepRenderer result = new CustomXYStepRenderer();\n        result.setSeriesPaint(0, new Color(220, 100, 87));\n        Stroke stroke = new BasicStroke(1.5f);\n        Stroke stepStroke = new BasicStroke(1.5f, BasicStroke.CAP_ROUND,\n                BasicStroke.JOIN_ROUND, 1.0f, new float[] { 6.0f, 6.0f }, 0.0f);\n        result.setSeriesStroke(0, stroke);\n        result.setSeriesShape(0, null);\n        result.setStepStroke(stepStroke);\n        return result;\n    }\n\n    protected XYStepRenderer getBranchMaxRenderer() {\n        CustomXYStepRenderer result = new CustomXYStepRenderer();\n        result.setSeriesPaint(0, new Color(255, 0, 255));\n        Stroke stroke = new BasicStroke(1.5f);\n        Stroke stepStroke = new BasicStroke(1.5f, BasicStroke.CAP_ROUND,\n                BasicStroke.JOIN_ROUND, 1.0f, new float[] { 6.0f, 6.0f }, 0.0f);\n        result.setSeriesStroke(0, stroke);\n        result.setSeriesShape(0, null);\n        result.setStepStroke(stepStroke);\n        return result;\n    }\n    \n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\impl\\\\ProjectBusinessImpl.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["ProjectBusinessImpl"], "AN": ["projectDAO", "productBusiness", "assignmentBusiness", "backlogBusiness", "transferObjectBusiness", "rankingBusiness", "settingBusiness", "storyBusiness", "hourEntryBusiness", "iterationBusiness", "historyEntryBusiness", "storyRankBusiness", "storyFilterBusiness"], "SCS_VariableDeclarator": ["projectDAO", "productBusiness", "assignmentBusiness", "backlogBusiness", "transferObjectBusiness", "rankingBusiness", "settingBusiness", "storyBusiness", "hourEntryBusiness", "iterationBusiness", "historyEntryBusiness", "storyRankBusiness", "storyFilterBusiness", "project", "metrics", "today", "leafStories", "storyMetrics", "x", "y", "story", "totalSpentEffort", "iterations", "iteration", "story", "task", "persistable", "product", "stored", "to", "storyFilters", "assignment", "newId", "original", "project", "original", "leafStories", "leafStoriesWithRank", "rank", "leafStory", "tmp", "tasks", "task", "taskTO", "effortSpent", "entry", "original", "iterations", "backlog", "iter", "project", "rankUnder", "project", "rankOver", "rankUnder", "startDate", "endDate", "projects", "project", "maxRankedProject", "iterations", "item", "stories", "item", "assignments", "item", "hourEntries", "historyEntries", "item"], "SCS_ConstructorDeclaration": ["ProjectBusinessImpl"], "SCS_ClassReference": ["Project", "projectDAO", "project", "projectDAO", "project", "metrics", "Days", null, "project", "project", "today", "project", null, "metrics", "backlogBusiness", null, "metrics", "metrics", "Math", "metrics", "metrics", "metrics", "metrics", "Math", "metrics", "metrics", "metrics", "metrics", "Math", "metrics", "metrics", "metrics", "metrics", "Math", "metrics", "metrics", null, "storyBusiness", "storyMetrics", "storyMetrics", "metrics", "metrics", "metrics", "project", "metrics", "metrics", "metrics", null, "metrics", "Math", "metrics", null, "metrics", null, "metrics", "metrics", "metrics", "hourEntryBusiness", "project", null, "project", "hourEntryBusiness", "project", "story", "hourEntryBusiness", "story", "story", "hourEntryBusiness", "task", null, "", null, "persistable", "", "persistable", "project", "persistable", "project", "persistable", "project", "persistable", "project", "persistable", "project", "persistable", "project", "persistable", "project", "", "transferObjectBusiness", "to", "", "project", "assigneeIds", "assignment", "assignmentBusiness", "assignment", "project", null, "assignmentBusiness", "project", null, null, null, "project", null, "project", "projectDAO", null, "transferObjectBusiness", "project", null, null, null, "storyFilterBusiness", "tmp", "tmp", "taskTO", "entry", "taskTO", "tasks", "tmp", "leafStoriesWithRank", null, "original", "transferObjectBusiness", "iterations", "projectDAO", "projectDAO", "", "rankingBusiness", "projectDAO", "projectDAO", "projectDAO", "projectDAO", "rankOver", "projectDAO", "project", "", "startDate", "settingBusiness", "projectDAO", "projectDAO", "projectDAO", "project", "maxRankedProject", "projects", "project", "", "", "projects", "projects", "", "", "storyRankBusiness", "project", "iterationBusiness", "item", "project", "storyBusiness", "project", "assignmentBusiness", "item", "project", "hourEntryBusiness", "project", "historyEntryBusiness", "item"], "MN": ["setSettingBusiness", "setRankingBusiness", "setProjectDAO", "unrankProject", "getProjectMetrics", "getProjectTotalSpentEffort", "store", "setAssignees", "persistProject", "validateProjectData", "getAssignedUsers", "getProjectData", "retrieveLeafStories", "retrieveProjectIterations", "rankUnderProject", "rankUnderProject", "getWithRankBetween", "rankOverProject", "moveToRanked", "delete", "delete", "setAssignmentBusiness", "setStoryBusiness", "setHourEntryBusiness", "setIterationBusiness", "setHistoryEntryBusiness", "setStoryRankBusiness"], "PN": ["settingBusiness", "rankingBusiness", "projectDAO", "projectId", "project", "project", "projectId", "productId", "project", "assigneeIds", "project", "assigneeIds", "project", "project", "projectId", "productId", "project", "projectId", "projectId", "filters", "projectId", "projectId", "rankUnderId", "project", "upperProject", "lower", "upper", "projectId", "rankOverId", "projectId", "id", "project", "assignmentBusiness", "storyBusiness", "hourEntryBusiness", "iterationBusiness", "historyEntryBusiness", "storyRankBusiness"], "SCS_MemberReference": ["settingBusiness", "settingBusiness", "rankingBusiness", "rankingBusiness", "genericDAO", "projectDAO", "projectDAO", "projectDAO", "projectId", "project", "project", "storyRankBusiness", "project", "leafStories", "storyMetrics", "story", "x", "x", "y", "y", "x", "y", "ZERO", "metrics", "project", "iterations", "totalSpentEffort", "iteration", "totalSpentEffort", "totalSpentEffort", "totalSpentEffort", "projectId", "persistable", "projectId", "project", "projectId", "productId", "productId", "productBusiness", "productId", "product", "persistable", "assigneeIds", "persistable", "stored", "projectId", "projectId", "storyFilters", "to", "assigneeIds", "project", "assigneeIds", "project", "project", "project", "newId", "projectId", "productId", "project", "projectId", "original", "projectId", "project", "projectId", "storyRankBusiness", "original", "leafStories", "leafStories", "filters", "leafStories", "leafStory", "rank", "task", "effortSpent", "effortSpent", "taskTO", "tasks", "tmp", "leafStoriesWithRank", "projectId", "backlog", "iter", "iterations", "projectId", "rankUnderId", "project", "rankUnder", "project", "project", "project", "upperProject", "lower", "upper", "project", "projectId", "rankOverId", "rankUnder", "project", "rankUnder", "project", "startDate", "endDate", "projectId", "maxRankedProject", "maxRankedProject", "project", "maxRankedProject", "project", "id", "project", "project", "iterations", "iterations", "stories", "stories", "item", "assignments", "assignments", "hourEntries", "hourEntries", "historyEntries", "project", "assignmentBusiness", "assignmentBusiness", "storyBusiness", "storyBusiness", "hourEntryBusiness", "hourEntryBusiness", "iterationBusiness", "iterationBusiness", "historyEntryBusiness", "historyEntryBusiness", "storyRankBusiness", "storyRankBusiness"], "SCS_VariableDeclaration": ["Project", "ProjectMetrics", "LocalDate", "List", "StoryMetrics", "long", "Story", "long", "List", "Iteration", "Story", "Task", "Project", "Product", "Project", "ProjectTO", "StoryFilters", "Assignment", "int", "Project", "ProjectTO", "Project", "List", "List", "int", "Story", "StoryTO", "Set", "Task", "TaskTO", "long", "HourEntry", "Project", "List", "Backlog", "IterationTO", "Project", "Project", "Project", "Project", "Project", "LocalDate", "LocalDate", "List", "Project", "Project", "Set", "Backlog", "Set", "Story", "Set", "Assignment", "Set", "List", "BacklogHistoryEntry"], "SCS_MethodInvocation": ["get", "setRank", "calculateProjectStoryMetrics", "getId", "setTotalDays", "daysBetween", "getDays", "getStartDate", "getEndDate", "isBefore", "getEndDate", "toLocalDate", "setDaysLeft", "daysLeftInSchedulableBacklog", "getDays", "getTotalDays", "setDaysLeftPercentage", "round", "getDaysLeft", "getTotalDays", "getStoryPoints", "setStoryPointsCompletedPercentage", "round", "getCompletedStoryPoints", "getStoryPoints", "getNumberOfDoneStories", "setCompletedStoriesPercentage", "round", "getNumberOfDoneStories", "getNumberOfStories", "getTotalValue", "setValuePercentage", "round", "getCompletedValue", "getTotalValue", "retrieveByRankingContext", "calculateMetrics", "getEffortSpent", "getOriginalEstimate", "setEffortSpent", "setOriginalEstimate", "setPlannedSize", "getBacklogSize", "getPlannedSize", "setPlannedSize", "getPlannedSize", "equals", "setEfforSpentPercentage", "round", "getEffortSpent", "floatValue", "getPlannedSize", "floatValue", "getEffortSpentPercentage", "setEfforSpentPercentage", "setEfforSpentPercentage", "calculateSum", "getHourEntries", "retrieveProjectIterations", "getId", "calculateSumOfIterationsHourEntries", "getStories", "getIteration", "calculateSum", "getHourEntries", "getTasks", "calculateSum", "getHourEntries", "retrieve", "validateProjectData", "retrieve", "setParent", "setAssignees", "setName", "getName", "setStartDate", "getStartDate", "setEndDate", "getEndDate", "setDescription", "getDescription", "setStatus", "getStatus", "setBacklogSize", "getBacklogSize", "setBaselineLoad", "getBaselineLoad", "persistProject", "constructProjectTO", "setLeafStories", "retrieveLeafStories", "getAssignments", "contains", "getId", "delete", "getId", "getAssignments", "clear", "addMultiple", "getId", "store", "create", "retrieve", "getStartDate", "isAfter", "getEndDate", "getAssignedUsers", "retrieve", "constructProjectTO", "setChildIterations", "retrieveProjectIterations", "retrieve", "retrieveByRankingContext", "filterStoryList", "setRank", "getTasks", "getHourEntries", "getMinutesSpent", "setEffortSpent", "add", "setTasks", "add", "retrieve", "getChildren", "constructIterationTO", "add", "get", "get", "rankUnderProject", "rankUnder", "getProjectsWithRankBetween", "get", "get", "getProjectWithRankLessThan", "getRank", "increaseRankedProjectRanks", "setRank", "rankUnderProject", "plus", "getPortfolioTimeSpan", "getRankedProjects", "get", "getMaxRankedProject", "setRank", "getRank", "isEmpty", "setRank", "rankUnderProject", "rankUnderProject", "get", "size", "delete", "retrieve", "removeBacklogRanks", "getChildren", "delete", "getId", "getStories", "forceDelete", "getAssignments", "delete", "getId", "getHourEntries", "deleteAll", "getBacklogHistoryEntries", "delete", "getId"], "CO": ["/** {@inheritDoc} */", "// percentages", "// Effort spent", "/** {@inheritDoc} */", "/** {@inheritDoc} */", "/**\n     * Persists a given project.\n     * <p>\n     * Decides whether to use <code>store</code> or <code>create</code>.\n     * @return the persisted project\n     */", "/**\n     * Validates the given project's data.\n     * <p>\n     * Currently checks start and end date. \n     */", "/** {@inheritDoc} */", "/** {@inheritDoc} */", "/** {@inheritDoc} */", "/** {@inheritDoc} */"], "CODE": "package fi.hut.soberit.agilefant.business.impl;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport org.joda.time.Days;\nimport org.joda.time.LocalDate;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport fi.hut.soberit.agilefant.business.AssignmentBusiness;\nimport fi.hut.soberit.agilefant.business.BacklogBusiness;\nimport fi.hut.soberit.agilefant.business.BacklogHistoryEntryBusiness;\nimport fi.hut.soberit.agilefant.business.HourEntryBusiness;\nimport fi.hut.soberit.agilefant.business.IterationBusiness;\nimport fi.hut.soberit.agilefant.business.ProductBusiness;\nimport fi.hut.soberit.agilefant.business.ProjectBusiness;\nimport fi.hut.soberit.agilefant.business.RankUnderDelegate;\nimport fi.hut.soberit.agilefant.business.RankingBusiness;\nimport fi.hut.soberit.agilefant.business.SettingBusiness;\nimport fi.hut.soberit.agilefant.business.StoryBusiness;\nimport fi.hut.soberit.agilefant.business.StoryFilterBusiness;\nimport fi.hut.soberit.agilefant.business.StoryRankBusiness;\nimport fi.hut.soberit.agilefant.business.TransferObjectBusiness;\nimport fi.hut.soberit.agilefant.db.ProjectDAO;\nimport fi.hut.soberit.agilefant.exception.ObjectNotFoundException;\nimport fi.hut.soberit.agilefant.model.Assignment;\nimport fi.hut.soberit.agilefant.model.Backlog;\nimport fi.hut.soberit.agilefant.model.BacklogHistoryEntry;\nimport fi.hut.soberit.agilefant.model.BacklogHourEntry;\nimport fi.hut.soberit.agilefant.model.ExactEstimate;\nimport fi.hut.soberit.agilefant.model.HourEntry;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.Product;\nimport fi.hut.soberit.agilefant.model.Project;\nimport fi.hut.soberit.agilefant.model.Rankable;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.Task;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.transfer.IterationTO;\nimport fi.hut.soberit.agilefant.transfer.ProjectMetrics;\nimport fi.hut.soberit.agilefant.transfer.ProjectTO;\nimport fi.hut.soberit.agilefant.transfer.StoryTO;\nimport fi.hut.soberit.agilefant.transfer.TaskTO;\nimport fi.hut.soberit.agilefant.util.StoryFilters;\nimport fi.hut.soberit.agilefant.util.StoryMetrics;\n\n@Service(\"projectBusiness\")\n@Transactional\npublic class ProjectBusinessImpl extends GenericBusinessImpl<Project> implements\n        ProjectBusiness {\n\n    private ProjectDAO projectDAO;\n    @Autowired\n    private ProductBusiness productBusiness;\n    @Autowired\n    private AssignmentBusiness assignmentBusiness;\n    @Autowired\n    private BacklogBusiness backlogBusiness;\n    @Autowired\n    private TransferObjectBusiness transferObjectBusiness;\n    @Autowired\n    private RankingBusiness rankingBusiness;\n    @Autowired\n    private SettingBusiness settingBusiness;\n    @Autowired\n    private StoryBusiness storyBusiness;\n    @Autowired\n    private HourEntryBusiness hourEntryBusiness;\n    @Autowired\n    private IterationBusiness iterationBusiness;\n    @Autowired\n    private BacklogHistoryEntryBusiness historyEntryBusiness;\n    @Autowired\n    private StoryRankBusiness storyRankBusiness;\n    @Autowired\n    private StoryFilterBusiness storyFilterBusiness;\n\n    public ProjectBusinessImpl() {\n        super(Project.class);\n    }\n    \n    public void setSettingBusiness(SettingBusiness settingBusiness) {\n        this.settingBusiness = settingBusiness;\n    }\n    \n    public void setRankingBusiness(RankingBusiness rankingBusiness) {\n        this.rankingBusiness = rankingBusiness;\n    }\n    \n    @Autowired\n    public void setProjectDAO(ProjectDAO projectDAO) {\n        this.genericDAO = projectDAO;\n        this.projectDAO = projectDAO;\n    }\n    \n    @Transactional\n    public void unrankProject(int projectId) {\n        Project project = projectDAO.get(projectId);\n        project.setRank(0);\n    }\n    \n    /** {@inheritDoc} */\n    @Transactional(readOnly = true)\n    public ProjectMetrics getProjectMetrics(Project project) {\n        if (project == null) {\n            throw new IllegalArgumentException(\"Project must be supplied\");\n        }\n        ProjectMetrics metrics = projectDAO\n                .calculateProjectStoryMetrics(project.getId());\n\n        LocalDate today = new LocalDate();\n\n        metrics.setTotalDays(Days.daysBetween(project.getStartDate(),\n                project.getEndDate()).getDays());\n        if (today.isBefore(project.getEndDate().toLocalDate())) {\n            metrics.setDaysLeft(backlogBusiness.daysLeftInSchedulableBacklog(\n                    project).getDays());\n        }\n\n        // percentages\n        if (metrics.getTotalDays() != 0) {\n            metrics.setDaysLeftPercentage(Math.round((float) metrics\n                    .getDaysLeft()\n                    * 100f / (float) metrics.getTotalDays()));\n        }\n        if (metrics.getStoryPoints() != 0) {\n            metrics.setStoryPointsCompletedPercentage(Math\n                    .round((float) metrics.getCompletedStoryPoints() * 100f\n                            / (float) metrics.getStoryPoints()));\n        }\n        if (metrics.getNumberOfDoneStories() != 0) {\n            metrics.setCompletedStoriesPercentage(Math.round((float) metrics\n                    .getNumberOfDoneStories()\n                    * 100f / (float) metrics.getNumberOfStories()));\n        }\n        if (metrics.getTotalValue() != 0) {\n            metrics.setValuePercentage(Math.round((float) metrics\n                    .getCompletedValue()\n                    * 100f / (float) metrics.getTotalValue()));\n        }\n        \n        // Effort spent\n        List<Story> leafStories = this.storyRankBusiness.retrieveByRankingContext(project);\n        StoryMetrics storyMetrics;\n        long x = 0, y = 0;\n        for(Story story : leafStories)\n        {\n            storyMetrics = storyBusiness.calculateMetrics(story);\n            x = x + (int)storyMetrics.getEffortSpent();\n            y = y + (int)storyMetrics.getOriginalEstimate();\n        }\n        metrics.setEffortSpent(new ExactEstimate(x));\n        metrics.setOriginalEstimate(new ExactEstimate(y));\n        metrics.setPlannedSize(project.getBacklogSize());\n        if(metrics.getPlannedSize() == null)\n            metrics.setPlannedSize(new ExactEstimate(0));\n        if(!metrics.getPlannedSize().equals(ExactEstimate.ZERO)) {\n            metrics.setEfforSpentPercentage(Math.round((float) metrics\n                    .getEffortSpent().floatValue()\n                    * 100f / (float) metrics.getPlannedSize().floatValue()));\n            if(metrics.getEffortSpentPercentage() > 100)\n                metrics.setEfforSpentPercentage(100);\n        }\n        else {\n            metrics.setEfforSpentPercentage(100);\n        }\n\n        return metrics;\n    }\n    \n    /** {@inheritDoc} */\n    @Transactional(readOnly = true)\n    public long getProjectTotalSpentEffort(Project project) {\n        if (project == null) {\n            throw new IllegalArgumentException(\"Project must be supplied\");\n        }\n        \n        long totalSpentEffort = hourEntryBusiness.calculateSum(project.getHourEntries());\n        List<IterationTO> iterations = this.retrieveProjectIterations(project.getId());\n        for (Iteration iteration : iterations) {\n            totalSpentEffort += hourEntryBusiness.calculateSumOfIterationsHourEntries(iteration);\n        }\n        for (Story story: project.getStories()) {\n            if (story.getIteration() == null) {\n                totalSpentEffort += hourEntryBusiness.calculateSum(story.getHourEntries());\n                for (Task task : story.getTasks()) {\n                    totalSpentEffort += hourEntryBusiness.calculateSum(task.getHourEntries());\n                }\n            }\n        }\n        return totalSpentEffort;\n    }\n    \n    /** {@inheritDoc} */\n    public ProjectTO store(int projectId,\n            Integer productId, Project project, Set<Integer> assigneeIds) throws ObjectNotFoundException,\n            IllegalArgumentException {\n\n        Project persistable = new Project();\n        if (projectId > 0) {\n            persistable = this.retrieve(projectId);       \n        } \n        validateProjectData(project, projectId, productId);\n        if(productId != null ){\n            Product product = this.productBusiness.retrieve(productId);\n            persistable.setParent(product);\n        }\n        setAssignees(persistable, assigneeIds);\n        \n        persistable.setName(project.getName());\n        persistable.setStartDate(project.getStartDate());\n        persistable.setEndDate(project.getEndDate());\n        persistable.setDescription(project.getDescription());\n        persistable.setStatus(project.getStatus());\n        persistable.setBacklogSize(project.getBacklogSize());   \n        persistable.setBaselineLoad(project.getBaselineLoad());\n        Project stored = persistProject(persistable);\n        \n        ProjectTO to = transferObjectBusiness.constructProjectTO(stored);\n        if (projectId > 0) {\n            StoryFilters storyFilters = new StoryFilters(null, null);\n            to.setLeafStories(retrieveLeafStories(projectId, storyFilters));\n        }\n        return to;\n    }\n    \n    private void setAssignees(Project project, Set<Integer> assigneeIds) {\n        if (assigneeIds != null) {\n            for(Assignment assignment : project.getAssignments()) {\n                if(!assigneeIds.contains(assignment.getId())) {\n                    assignmentBusiness.delete(assignment.getId());\n                }\n            }\n            project.getAssignments().clear();\n            assignmentBusiness.addMultiple(project, assigneeIds);\n        }\n    }\n    /**\n     * Persists a given project.\n     * <p>\n     * Decides whether to use <code>store</code> or <code>create</code>.\n     * @return the persisted project\n     */\n    private Project persistProject(Project project) {\n        if (project.getId() > 0) {\n            this.store(project);\n            return project;\n        }\n        else {\n            int newId = this.create(project);\n            return this.retrieve(newId);\n        }\n    }\n    \n    /**\n     * Validates the given project's data.\n     * <p>\n     * Currently checks start and end date. \n     */\n    private static void validateProjectData(Project project, int projectId, Integer productId)\n        throws IllegalArgumentException {\n        if (project.getStartDate().isAfter(project.getEndDate())) {\n            throw new IllegalArgumentException(\"Project start date after end date.\");\n        }\n        if(projectId == 0 && productId == null) {\n            throw new IllegalArgumentException(\"New project must have a parent product\");\n        }\n    }\n\n\n    /** {@inheritDoc} */\n    @Transactional(readOnly = true)\n    public Collection<User> getAssignedUsers(Project project) {\n        return projectDAO.getAssignedUsers(project);\n    }\n\n\n    /** {@inheritDoc} */\n    @Transactional(readOnly = true)\n    public ProjectTO getProjectData(int projectId) {\n        Project original = this.retrieve(projectId);\n        ProjectTO project = transferObjectBusiness.constructProjectTO(original);\n        project.setChildIterations(this.retrieveProjectIterations(projectId));\n        return project;\n    }\n    \n    @Transactional(readOnly = true)\n    public List<StoryTO> retrieveLeafStories(int projectId, StoryFilters filters) {\n        Project original = this.retrieve(projectId);\n        List<Story> leafStories = this.storyRankBusiness.retrieveByRankingContext(original);\n        leafStories = storyFilterBusiness.filterStoryList(leafStories, filters);\n        List<StoryTO> leafStoriesWithRank = new ArrayList<StoryTO>();\n        int rank = 0;\n        for(Story leafStory : leafStories) {\n            StoryTO tmp = new StoryTO(leafStory);\n            tmp.setRank(rank++);\n            \n            Set<Task> tasks = new HashSet<Task>();\n            for (Task task : tmp.getTasks()) {\n                TaskTO taskTO = new TaskTO(task);\n                long effortSpent = 0;\n                for (HourEntry entry : taskTO.getHourEntries()) {\n                    effortSpent += entry.getMinutesSpent();\n                }\n                taskTO.setEffortSpent(effortSpent);\n                tasks.add(taskTO);\n            }\n            tmp.setTasks(tasks);\n            \n            leafStoriesWithRank.add(tmp);\n        }\n        return leafStoriesWithRank;\n    }\n    \n    @Transactional(readOnly = true)\n    public List<IterationTO> retrieveProjectIterations(int projectId) {\n        Project original = this.retrieve(projectId);\n        List<IterationTO> iterations = new ArrayList<IterationTO>();\n        for (Backlog backlog : original.getChildren()) {\n            IterationTO iter = transferObjectBusiness.constructIterationTO((Iteration)backlog);\n            iterations.add(iter);\n        }\n        return iterations;\n    }\n\n    @Transactional\n    public Project rankUnderProject(int projectId, int rankUnderId) {\n        Project project = projectDAO.get(projectId);\n        Project rankUnder = projectDAO.get(rankUnderId);\n        rankUnderProject(project, rankUnder);\n        return project;\n    }\n    \n    /** {@inheritDoc} */\n    @Transactional\n    public Project rankUnderProject(final Project project, Project upperProject)\n            throws IllegalArgumentException {\n        if (project == null) {\n            throw new IllegalArgumentException(\"Project should be given\");\n        }\n        \n        rankingBusiness.rankUnder(project, upperProject, new RankUnderDelegate() {\n            public Collection<? extends Rankable> getWithRankBetween(Integer lower, Integer upper) {\n                return projectDAO.getProjectsWithRankBetween(lower, upper);\n            }\n        });\n\n        return project;\n    }\n    \n    \n    @Transactional\n    public Project rankOverProject(int projectId, int rankOverId) {\n        Project project = projectDAO.get(projectId);\n        Project rankOver = projectDAO.get(rankOverId);        \n        Project rankUnder = projectDAO.getProjectWithRankLessThan(rankOver.getRank());\n        if (rankUnder == null) {\n            projectDAO.increaseRankedProjectRanks();\n            project.setRank(1);\n        } else {\n            rankUnderProject(project, rankUnder);            \n        }\n        return project;\n    }\n    \n    /** {@inheritDoc} */\n    @Transactional\n    public void moveToRanked(int projectId) {\n        LocalDate startDate = new LocalDate();\n        LocalDate endDate = startDate.plus(settingBusiness\n                .getPortfolioTimeSpan());\n        List<Project> projects = projectDAO.getRankedProjects(startDate, endDate);\n        Project project = projectDAO.get(projectId);\n        \n        Project maxRankedProject = projectDAO.getMaxRankedProject();\n        if (maxRankedProject != null) {\n            project.setRank(maxRankedProject.getRank() + 1);\n        }\n        if( projects.isEmpty() ) {\n            if(maxRankedProject == null) {\n                project.setRank(1);\n            } else {\n                rankUnderProject(project,maxRankedProject);\n            }   \n        } else {\n            rankUnderProject(project,projects.get(projects.size() - 1));\n        }\n        \n    }\n    \n    @Override\n    public void delete(int id) {\n        delete(retrieve(id));\n    }\n    \n    @Override\n    public void delete(Project project) {\n        if (project == null)\n            return;\n        \n        storyRankBusiness.removeBacklogRanks(project);\n        \n        Set<Backlog> iterations = new HashSet<Backlog>(project.getChildren());\n        \n        if (iterations != null) {\n            for (Backlog item : iterations) {\n                iterationBusiness.delete(item.getId());\n            }\n        }\n        \n        Set<Story> stories = new HashSet<Story>(project.getStories());\n       \n        if (stories != null) {\n            for (Story item : stories) {\n                storyBusiness.forceDelete(item);\n            }\n        }\n        Set<Assignment> assignments = new HashSet<Assignment>(project.getAssignments());\n        \n        if (assignments != null) {\n            for (Assignment item : assignments) {\n                assignmentBusiness.delete(item.getId());\n            }\n        }\n        \n        Set<BacklogHourEntry> hourEntries = new HashSet<BacklogHourEntry>(project.getHourEntries());\n        \n        if (hourEntries != null) {\n            hourEntryBusiness.deleteAll(hourEntries);\n        }\n        \n        \n        List<BacklogHistoryEntry> historyEntries = new ArrayList<BacklogHistoryEntry>(project.getBacklogHistoryEntries());\n        for (BacklogHistoryEntry item : historyEntries) {\n            historyEntryBusiness.delete(item.getId());\n        }\n        \n        super.delete(project);\n\n    }\n\n    public void setAssignmentBusiness(AssignmentBusiness assignmentBusiness) {\n        this.assignmentBusiness = assignmentBusiness;\n    }\n\n    public void setStoryBusiness(StoryBusiness storyBusiness) {\n        this.storyBusiness = storyBusiness;\n    }\n\n    public void setHourEntryBusiness(HourEntryBusiness hourEntryBusiness) {\n        this.hourEntryBusiness = hourEntryBusiness;\n    }\n\n    public void setIterationBusiness(IterationBusiness iterationBusiness) {\n        this.iterationBusiness = iterationBusiness;\n    }\n\n    public void setHistoryEntryBusiness(\n            BacklogHistoryEntryBusiness historyEntryBusiness) {\n        this.historyEntryBusiness = historyEntryBusiness;\n    }\n    \n    public void setStoryRankBusiness(StoryRankBusiness storyRankBusiness) {\n        this.storyRankBusiness = storyRankBusiness;\n    }\n    \n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\impl\\\\RankingBusinessImpl.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["RankingBusinessImpl", "RankDirection"], "MN": ["getRankBorders", "validateRankable", "findOutRankDirection", "shiftRanks", "findOutNewRank", "rankToBottom", "rankUnder"], "PN": ["rankable", "upper", "rankable", "rankable", "upper", "dir", "rankablesToShift", "rankable", "upper", "dir", "rankable", "lastInRank", "entry", "upperEntry", "delegate"], "SCS_ClassReference": ["", "", "rankable", "upper", "rankable", "rankable", "upper", "Pair", "", "rankable", "upper", "rankable", "rankable", "upper", "upper", "rankable", "lastInRank", "rankable", "", "", "", "shiftables", "delegate", "", "entry"], "SCS_MethodInvocation": ["validateRankable", "findOutRankDirection", "getRank", "getRank", "getRank", "getRank", "getRank", "create", "validateRankable", "getRank", "getRank", "setRank", "getRank", "getRank", "getRank", "setRank", "getRank", "setRank", "findOutRankDirection", "findOutNewRank", "getRankBorders", "addAll", "getWithRankBetween", "shiftRanks", "setRank"], "SCS_MemberReference": ["rankable", "rankable", "upper", "dir", "TOP", "higher", "dir", "UP", "lower", "higher", "lower", "higher", "lower", "higher", "rankable", "rankable", "upper", "TOP", "UP", "DOWN", "dir", "rankablesToShift", "dir", "DOWN", "modifier", "modifier", "rankablesToShift", "modifier", "dir", "TOP", "dir", "UP", "lastInRank", "entry", "upperEntry", "entry", "upperEntry", "dir", "entry", "upperEntry", "first", "second", "dir", "shiftables", "newRank"], "SCS_VariableDeclaration": ["RankDirection", "int", "int", "int", "Rankable", "RankDirection", "int", "Pair", "Collection"], "SCS_VariableDeclarator": ["dir", "lower", "higher", "modifier", "rankable", "dir", "newRank", "borders", "shiftables"], "CO": ["/**\n     * Get the border values of the ranks of the rankables to shift.\n     * \n     * @param rankable the rankable to rank\n     * @param upper \n     * @return a pair with first the lower rank and second the upper rank\n     * @throws IllegalArgumentException if rankable was null\n     */", "/**\n     * Find out the direction of the ranking.\n     */", "/**\n     * Shift ranks of all the given rankables according to the direction. \n     * @param dir\n     * @param rankablesToShift\n     */", "/**\n     * Get the new rank number.\n     */", "/**\n     * {@inheritDoc}\n     */", "// might be null if all tasks done.", "/**\n     * {@inheritDoc}\n     */"], "CODE": "package fi.hut.soberit.agilefant.business.impl;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\n\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport fi.hut.soberit.agilefant.business.RankUnderDelegate;\nimport fi.hut.soberit.agilefant.business.RankingBusiness;\nimport fi.hut.soberit.agilefant.model.Rankable;\nimport fi.hut.soberit.agilefant.util.Pair;\n\n@Transactional(readOnly = true)\n@Service(\"rankingBusiness\")\npublic class RankingBusinessImpl implements RankingBusiness {\n    public enum RankDirection { TOP, UP, DOWN };\n    \n    /**\n     * Get the border values of the ranks of the rankables to shift.\n     * \n     * @param rankable the rankable to rank\n     * @param upper \n     * @return a pair with first the lower rank and second the upper rank\n     * @throws IllegalArgumentException if rankable was null\n     */\n    public Pair<Integer, Integer> getRankBorders(Rankable rankable,\n            Rankable upper) throws IllegalArgumentException {\n        validateRankable(rankable);\n        RankDirection dir = findOutRankDirection(rankable, upper);\n        \n        int lower = 0;\n        int higher = 0;\n        \n        if (dir == RankDirection.TOP) {\n            higher = rankable.getRank() - 1;\n        }\n        else if (dir == RankDirection.UP) {\n            lower = upper.getRank() + 1;\n            higher = rankable.getRank() - 1;\n        }\n        else {\n            lower = rankable.getRank() + 1;\n            higher = upper.getRank();\n        }\n        \n        return Pair.create(lower, higher);\n    }\n\n    private void validateRankable(Rankable rankable) {\n        if (rankable == null) {\n            throw new IllegalArgumentException();\n        }\n    }\n    \n    /**\n     * Find out the direction of the ranking.\n     */\n    public RankDirection findOutRankDirection(Rankable rankable, Rankable upper) {\n        validateRankable(rankable);\n        if (upper == null) {\n            return RankDirection.TOP;    \n        }\n        else if (rankable.getRank() > upper.getRank()) {\n            return RankDirection.UP;\n        }\n        return RankDirection.DOWN;\n    }\n    \n    /**\n     * Shift ranks of all the given rankables according to the direction. \n     * @param dir\n     * @param rankablesToShift\n     */\n    public void shiftRanks(RankDirection dir,\n            Collection<Rankable> rankablesToShift) {\n        if (dir == null || rankablesToShift == null) {\n            throw new IllegalArgumentException();\n        }\n        int modifier = 0;\n        if (dir == RankDirection.DOWN) {\n            modifier = -1;\n        }\n        else {\n            modifier = 1;\n        }\n        for (Rankable rankable : rankablesToShift) {\n           rankable.setRank(rankable.getRank() + modifier);\n        }\n    }\n    \n    /**\n     * Get the new rank number.\n     */\n    public int findOutNewRank(Rankable rankable, Rankable upper,\n            RankDirection dir) {\n        if (dir == RankDirection.TOP) {\n            return 0;\n        }\n        else if (dir == RankDirection.UP) {\n            return upper.getRank() + 1;\n        }\n        return upper.getRank();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public void rankToBottom(Rankable rankable, Rankable lastInRank) {\n        // might be null if all tasks done.\n        if (lastInRank != null) {\n            rankable.setRank(lastInRank.getRank() + 1);\n        }\n        else {\n            rankable.setRank(0);\n        }\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public void rankUnder(Rankable entry, Rankable upperEntry,\n            RankUnderDelegate delegate) {\n        \n        RankDirection dir = findOutRankDirection(entry, upperEntry);\n        int newRank = findOutNewRank(entry, upperEntry, dir);\n        Pair<Integer, Integer> borders = getRankBorders(entry, upperEntry);\n        \n        Collection<Rankable> shiftables = new ArrayList<Rankable>();\n        shiftables.addAll(delegate.getWithRankBetween(borders.first, borders.second));\n\n        shiftRanks(dir, shiftables);\n        entry.setRank(newRank);\n    }\n    \n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\impl\\\\SearchBusinessImpl.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["SearchBusinessImpl"], "AN": ["storyDAO", "backlogDAO", "userDAO", "taskDAO", "authorizationBusiness"], "SCS_VariableDeclarator": ["storyDAO", "backlogDAO", "userDAO", "taskDAO", "authorizationBusiness", "result", "quickRefMatch", "backlogs", "stories", "tasks", "searchTermId", "backlogAccessMap", "story", "backlog", "backlogAccessMap", "task", "backlog", "iteration", "backlogAccessMap", "bl", "item", "access", "access", "matches", "objectId", "type", "backlogAccessMap", "story", "task", "bl", "result", "backlogs", "result", "backlogs", "result", "stories", "result", "users", "user", "backlogAccessMap", "result", "tasks", "task"], "MN": ["searchStoriesAndBacklog", "storyListSearchResult", "taskListSearchResult", "backlogListSearchResult", "checkAccess", "checkUserAccess", "searchByReference", "searchIterations", "searchProjects", "searchStories", "searchUsers", "searchTasks"], "PN": ["searchTerm", "result", "stories", "result", "tasks", "result", "backlogs", "bl", "backlogAccessMap", "user", "searchTerm", "searchTerm", "searchTerm", "searchTerm", "searchTerm", "searchTerm"], "SCS_VariableDeclaration": ["List", "NamedObject", "List", "List", "List", "Integer", "HashMap", "Story", "Backlog", "HashMap", "Task", "Backlog", "Iteration", "HashMap", "Backlog", "SearchResultRow", "Boolean", "Boolean", "String", "int", "String", "HashMap", "Story", "Task", "Backlog", "List", "List", "List", "List", "List", "List", "List", "List", "User", "HashMap", "List", "List", "Task"], "SCS_ClassReference": [null, "result", "quickRefMatch", "backlogDAO", "storyDAO", "taskDAO", "Integer", "backlogs", "backlogDAO", "stories", "storyDAO", "tasks", "taskDAO", "", "", "", "story", "story", "", "result", "backlog", "story", "task", "task", null, "task", null, "", "", "result", "task", null, "task", "task", "", "task", "result", "task", null, "task", "", "item", "bl", "item", "bl", null, "bl", "item", "bl", "result", "backlogAccessMap", "bl", null, "bl", "SecurityUtil", "backlogAccessMap", "bl", null, "user", "SecurityUtil", "searchTerm", "Integer", "type", "storyDAO", "story", "", "story", "story", "story", "type", "taskDAO", "task", "task", null, "", "task", null, "task", null, "task", "task", null, "", "task", null, "task", "", "task", "type", "backlogDAO", "", "backlogDAO", "Iteration", "", "backlogDAO", "Project", "", "storyDAO", "", "userDAO", "", "result", "user", "taskDAO", "task", "", "task", null, "result", "task", null, "task", null, "task", "", "task", "result", "task", null, "task"], "SCS_MethodInvocation": ["searchByReference", "add", "getName", "searchByName", "searchByName", "searchByName", "parseInt", "addAll", "searchByID", "addAll", "searchByID", "addAll", "searchByID", "backlogListSearchResult", "storyListSearchResult", "taskListSearchResult", "getIteration", "getBacklog", "checkAccess", "add", "getName", "getName", "getStory", "getStory", "getBacklog", "getStory", "getIteration", "checkAccess", "checkAccess", "add", "getStory", "getName", "getName", "getIteration", "checkAccess", "getIteration", "add", "getIteration", "getName", "getName", "checkAccess", "setOriginalObject", "getParent", "setLabel", "getParent", "getName", "getName", "setLabel", "getName", "add", "get", "getId", "isBacklogAccessible", "getId", "getLoggedUser", "put", "getId", "isUserAccessible", "getId", "getLoggedUser", "split", "parseInt", "equals", "get", "getBacklog", "checkAccess", "getBacklog", "getBacklog", "getIteration", "equals", "get", "getStory", "getStory", "getBacklog", "checkAccess", "getStory", "getBacklog", "getStory", "hasChildren", "getStory", "getStory", "getIteration", "checkAccess", "getStory", "getIteration", "getIteration", "checkAccess", "getIteration", "equals", "get", "checkAccess", "searchByName", "backlogListSearchResult", "searchByName", "backlogListSearchResult", "searchByName", "storyListSearchResult", "searchByName", "checkUserAccess", "add", "getFullName", "searchByName", "getStory", "checkAccess", "getStory", "getBacklog", "add", "getIteration", "getName", "getStory", "getName", "getName", "checkAccess", "getIteration", "add", "getIteration", "getName", "getName"], "SCS_MemberReference": ["searchTerm", "quickRefMatch", "quickRefMatch", "searchTerm", "searchTerm", "searchTerm", "searchTerm", "searchTermId", "searchTermId", "searchTermId", "result", "backlogs", "result", "stories", "result", "tasks", "result", "stories", "backlog", "backlog", "backlog", "backlogAccessMap", "story", "tasks", "backlog", "backlog", "backlogAccessMap", "iteration", "iteration", "backlogAccessMap", "task", "backlogAccessMap", "task", "backlogs", "bl", "backlogAccessMap", "bl", "item", "access", "access", "access", "authorizationBusiness", "access", "access", "authorizationBusiness", "access", "searchTerm", "length", "type", "matches", "objectId", "matches", "objectId", "story", "backlogAccessMap", "story", "story", "objectId", "task", "backlogAccessMap", "task", "backlogAccessMap", "task", "task", "backlogAccessMap", "task", "objectId", "bl", "bl", "backlogAccessMap", "bl", "searchTerm", "result", "backlogs", "result", "searchTerm", "result", "backlogs", "result", "searchTerm", "result", "stories", "result", "searchTerm", "users", "user", "user", "result", "searchTerm", "tasks", "backlogAccessMap", "task", "backlogAccessMap", "task", "result"], "CO": ["// The search term is not an integer"], "CODE": "package fi.hut.soberit.agilefant.business.impl;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport fi.hut.soberit.agilefant.business.AuthorizationBusiness;\nimport fi.hut.soberit.agilefant.business.SearchBusiness;\nimport fi.hut.soberit.agilefant.db.BacklogDAO;\nimport fi.hut.soberit.agilefant.db.StoryDAO;\nimport fi.hut.soberit.agilefant.db.TaskDAO;\nimport fi.hut.soberit.agilefant.db.UserDAO;\nimport fi.hut.soberit.agilefant.model.Backlog;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.NamedObject;\nimport fi.hut.soberit.agilefant.model.Product;\nimport fi.hut.soberit.agilefant.model.Project;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.Task;\nimport fi.hut.soberit.agilefant.model.Team;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.security.SecurityUtil;\nimport fi.hut.soberit.agilefant.transfer.SearchResultRow;\n\n@Service(\"searchBusiness\")\npublic class SearchBusinessImpl implements SearchBusiness {\n\n    @Autowired\n    private StoryDAO storyDAO;\n    @Autowired\n    private BacklogDAO backlogDAO;\n    @Autowired\n    private UserDAO userDAO;\n    @Autowired\n    private TaskDAO taskDAO;\n    @Autowired\n    private AuthorizationBusiness authorizationBusiness;\n    \n    @Transactional(readOnly=true)\n    public List<SearchResultRow> searchStoriesAndBacklog(String searchTerm) {\n        List<SearchResultRow> result = new ArrayList<SearchResultRow>();\n        NamedObject quickRefMatch = this.searchByReference(searchTerm);\n        if (quickRefMatch != null) {\n            result.add(new SearchResultRow(quickRefMatch.getName(),\n                    quickRefMatch));\n        }\n        List<Backlog> backlogs = backlogDAO.searchByName(searchTerm);\n        List<Story> stories = storyDAO.searchByName(searchTerm);\n        List<Task> tasks = taskDAO.searchByName(searchTerm);\n        try {\n            Integer searchTermId = Integer.parseInt(searchTerm);\n            backlogs.addAll(backlogDAO.searchByID(searchTermId));\n            stories.addAll(storyDAO.searchByID(searchTermId));\n            tasks.addAll(taskDAO.searchByID(searchTermId));\n        } catch (Exception e) {\n            // The search term is not an integer\n        }\n        backlogListSearchResult(result, backlogs);\n        storyListSearchResult(result, stories);\n        taskListSearchResult(result, tasks);\n        \n        return result;\n    }\n\n    private void storyListSearchResult(List<SearchResultRow> result,\n            List<Story> stories) {\n        HashMap<Integer, Boolean> backlogAccessMap = new HashMap<Integer, Boolean>();\n        for (Story story : stories) {\n            Backlog backlog = story.getIteration();\n            if(backlog == null) {\n                backlog = story.getBacklog();\n            }\n            if(checkAccess(backlog, backlogAccessMap)){\n                result.add(new SearchResultRow(backlog.getName() + \" > \"\n                    + story.getName(), story));\n            }\n        }\n    }\n    \n    private void taskListSearchResult(List<SearchResultRow> result,\n            List<Task> tasks) {\n        HashMap<Integer, Boolean> backlogAccessMap = new HashMap<Integer, Boolean>();\n        for(Task task : tasks) {\n            if(task.getStory()!= null){\n                Backlog backlog = task.getStory().getBacklog();\n                Iteration iteration = task.getStory().getIteration();\n                if((backlog!=null && checkAccess(backlog, backlogAccessMap)) || (iteration!=null && checkAccess(iteration, backlogAccessMap))){\n                    result.add(new SearchResultRow(task.getStory().getName() + \" > \" + \n                        task.getName(), task));\n                }\n            }\n            if(task.getIteration() != null){\n                if(checkAccess(task.getIteration(), backlogAccessMap)){  \n                    result.add(new SearchResultRow(task.getIteration().getName() + \" > \" + \n                        task.getName(), task));\n                }\n            }\n        }\n    }\n\n    private void backlogListSearchResult(List<SearchResultRow> result,\n            List<Backlog> backlogs) {\n        HashMap<Integer, Boolean> backlogAccessMap = new HashMap<Integer, Boolean>();\n        for (Backlog bl : backlogs) {\n            if(checkAccess(bl, backlogAccessMap)){            \n                SearchResultRow item = new SearchResultRow();\n                item.setOriginalObject(bl);\n                if (bl.getParent() != null) {\n                    item.setLabel(bl.getParent().getName() + \" > \" + bl.getName());\n                } else {\n                    item.setLabel(bl.getName());\n                }\n                result.add(item);\n            }\n        }\n    }\n    \n    private boolean checkAccess(Backlog bl, HashMap<Integer, Boolean> backlogAccessMap){\n        Boolean access = backlogAccessMap.get(bl.getId());\n        if (access != null) {\n            return access;\n        }\n        \n        access = this.authorizationBusiness.isBacklogAccessible(bl.getId(), SecurityUtil.getLoggedUser());\n        backlogAccessMap.put(bl.getId(), access);\n        return access;\n    }\n    \n    private boolean checkUserAccess(User user){\n        Boolean access = this.authorizationBusiness.isUserAccessible(user.getId(), SecurityUtil.getLoggedUser());\n        return access;\n    }\n\n    public NamedObject searchByReference(String searchTerm) {\n        if (searchTerm == null) {\n            return null;\n        }\n\n        String[] matches = searchTerm.split(\":\");\n        int objectId;\n        String type;\n        if (matches.length != 2) {\n            return null;\n        }\n        type = matches[0];\n\n        try {\n            objectId = Integer.parseInt(matches[1]);\n        } catch (Exception e) {\n            return null;\n        }\n        HashMap<Integer, Boolean> backlogAccessMap = new HashMap<Integer, Boolean>();\n        if (type.equals(\"story\")) {\n            Story story = storyDAO.get(objectId);\n            if(story != null && story.getBacklog() != null && checkAccess(story.getBacklog(), backlogAccessMap)){  \n                return story;\n            } else if (story != null && story.getBacklog() == null){\n                return story.getIteration();\n            }\n        } else if (type.equals(\"task\")) {\n            Task task = taskDAO.get(objectId);\n            if(task != null && task.getStory() != null) {\n            \tif(task.getStory().getBacklog() != null && checkAccess(task.getStory().getBacklog(), backlogAccessMap)){\n            \t\tif (task.getStory().hasChildren()) {\n            \t\t\treturn task.getStory();\n            \t\t} else {\n            \t\t\treturn task;\n            \t\t}\n                } else if (task.getStory().getIteration() != null && checkAccess(task.getStory().getIteration(), backlogAccessMap)) {\n                \treturn task;\n                }\n            } else if (task != null && task.getIteration() != null && checkAccess(task.getIteration(), backlogAccessMap)){\n                return task;\n            }\n        } else if (type.equals(\"backlog\")) {\n            Backlog bl = backlogDAO.get(objectId);\n            if(bl!=null && checkAccess(bl, backlogAccessMap)){  \n                return bl;\n            }\n        }\n        return null;\n    }\n    \n    public List<SearchResultRow> searchIterations(String searchTerm) {\n        List<SearchResultRow> result = new ArrayList<SearchResultRow>();\n        List<Backlog> backlogs = backlogDAO.searchByName(searchTerm, Iteration.class);\n        backlogListSearchResult(result, backlogs);\n        return result;\n    }\n\n    public List<SearchResultRow> searchProjects(String searchTerm) {\n        List<SearchResultRow> result = new ArrayList<SearchResultRow>();\n        List<Backlog> backlogs = backlogDAO.searchByName(searchTerm, Project.class);\n        backlogListSearchResult(result, backlogs);\n        return result;\n    }\n\n    public List<SearchResultRow> searchStories(String searchTerm) {\n        List<SearchResultRow> result = new ArrayList<SearchResultRow>();\n        List<Story> stories = storyDAO.searchByName(searchTerm);\n        storyListSearchResult(result, stories);\n        return result;\n    }\n\n    public List<SearchResultRow> searchUsers(String searchTerm) {\n        List<SearchResultRow> result = new ArrayList<SearchResultRow>();\n        List<User> users = userDAO.searchByName(searchTerm);\n        for(User user : users) {\n            if (checkUserAccess(user)) {\n                result.add(new SearchResultRow(user.getFullName(), user));\n            }\n        }\n        return result;\n    }\n    \n    public List<SearchResultRow> searchTasks(String searchTerm) {\n        HashMap<Integer, Boolean> backlogAccessMap = new HashMap<Integer, Boolean>();\n        List<SearchResultRow> result = new ArrayList<SearchResultRow>();\n        List<Task> tasks = taskDAO.searchByName(searchTerm);\n        for(Task task : tasks) {\n            if(task.getStory() != null){\n                if(checkAccess(task.getStory().getBacklog(), backlogAccessMap)){  \n                    result.add(new SearchResultRow(task.getIteration().getName() + \" > \" + task.getStory().getName() + \" > \" + \n                        task.getName(), task));\n                }\n            } else {\n                if(checkAccess(task.getIteration(), backlogAccessMap)){  \n                    result.add(new SearchResultRow(task.getIteration().getName() + \" > No Story > \" + \n                        task.getName(), task));\n                }\n            }\n        }\n        return result;\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\impl\\\\SettingBusinessImpl.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["SettingBusinessImpl"], "AN": ["SETTING_NAME_HOUR_REPORTING", "SETTING_NAME_DAILY_WORK", "SETTING_NAME_TIME_SHEET", "SETTING_NAME_DEV_PORTFOLIO", "SETTING_NAME_RANGE_LOW", "SETTING_NAME_RANGE_HIGH", "SETTING_NAME_OPTIMAL_LOW", "SETTING_NAME_OPTIMAL_HIGH", "SETTING_NAME_CRITICAL_LOW", "SETTING_NAME_PORTFOLIO_TIME_SPAN", "SETTING_NAME_STORY_TREE_FIELD_ORDER", "SETTING_NAME_BRANCH_METRICS", "SETTING_NAME_LABELS_IN_STORY_LIST", "SETTING_NAME_WEEKENDS_IN_BURNDOWN", "settingDAO", "transactionManager"], "SCS_VariableDeclarator": ["SETTING_NAME_HOUR_REPORTING", "SETTING_NAME_DAILY_WORK", "SETTING_NAME_TIME_SHEET", "SETTING_NAME_DEV_PORTFOLIO", "SETTING_NAME_RANGE_LOW", "SETTING_NAME_RANGE_HIGH", "SETTING_NAME_OPTIMAL_LOW", "SETTING_NAME_OPTIMAL_HIGH", "SETTING_NAME_CRITICAL_LOW", "SETTING_NAME_PORTFOLIO_TIME_SPAN", "SETTING_NAME_STORY_TREE_FIELD_ORDER", "SETTING_NAME_BRANCH_METRICS", "SETTING_NAME_LABELS_IN_STORY_LIST", "SETTING_NAME_WEEKENDS_IN_BURNDOWN", "settingDAO", "transactionManager", "setting", "setting", "setting", "setting", "setting", "setting", "setting", "setting", "setting", "setting", "setting", "setting", "permitted", "names", "name", "setting", "setting", "setting"], "SCS_ConstructorDeclaration": ["SettingBusinessImpl"], "SCS_ClassReference": ["Setting", null, null, null, null, "setting", "setting", null, "setting", null, null, null, "setting", null, null, null, "setting", null, null, null, "setting", null, null, null, "setting", null, null, null, null, null, "Integer", "setting", null, null, null, "Integer", "setting", null, null, null, "Integer", "setting", null, null, null, "Integer", "setting", null, null, null, "Integer", "setting", null, "Period", "Integer", "setting", null, "Integer", "DEFAULT_PORTFOLIO_TIME_SPAN", null, "Integer", "timeSpan", null, "setting", "", null, null, "Collections", "Arrays", "order", "name", "permitted", null, "DEFAULT_BRANCH_METRICS", null, "type", null, "BranchMetricsType", "setting", null, null, "setting", null, null, null, "setting", null], "MN": ["setSettingDAO", "setTransactionManager", "retrieveByName", "storeSetting", "storeSetting", "storeSetting", "setValue", "isHourReportingEnabled", "setHourReporting", "isDailyWork", "setDailyWork", "isTimeSheet", "setTimeSheet", "isDevPortfolio", "setDevPortfolio", "setRangeLow", "getRangeLow", "setRangeHigh", "getRangeHigh", "setOptimalLow", "getOptimalLow", "setOptimalHigh", "getOptimalHigh", "setCriticalLow", "getCriticalLow", "getPortfolioTimeSpan", "setPortfolioTimeSpan", "getStoryTreeFieldOrder", "setStoryTreeFieldOrder", "checkFieldOrderString", "setBranchMetricsType", "getBranchMetricsType", "setLabelsInStoryList", "isLabelsInStoryList", "setWeekendsInBurndown", "isWeekendsInBurndown"], "PN": ["settingDAO", "transactionManager", "name", "settingName", "value", "settingName", "value", "settingName", "value", "settingName", "value", "mode", "mode", "mode", "mode", "value", "value", "value", "value", "value", "timeSpan", "newOrder", "order", "type", "mode", "mode"], "SCS_MemberReference": ["genericDAO", "settingDAO", "settingDAO", "settingDAO", "transactionManager", "transactionManager", "settingDAO", "name", "settingName", "value", "settingName", "value", "settingName", "setting", "setting", "settingName", "value", "settingDAO", "setting", "value", "settingDAO", "setting", "settingName", "value", "SETTING_NAME_HOUR_REPORTING", "setting", "SETTING_NAME_HOUR_REPORTING", "mode", "SETTING_NAME_DAILY_WORK", "setting", "SETTING_NAME_DAILY_WORK", "mode", "SETTING_NAME_TIME_SHEET", "setting", "SETTING_NAME_TIME_SHEET", "mode", "SETTING_NAME_DEV_PORTFOLIO", "setting", "SETTING_NAME_DEV_PORTFOLIO", "mode", "value", "SETTING_NAME_RANGE_LOW", "DEFAULT_RANGE_LOW", "SETTING_NAME_RANGE_LOW", "value", "SETTING_NAME_RANGE_LOW", "setting", "DEFAULT_RANGE_LOW", "value", "SETTING_NAME_RANGE_HIGH", "DEFAULT_RANGE_HIGH", "SETTING_NAME_RANGE_HIGH", "value", "SETTING_NAME_RANGE_HIGH", "setting", "DEFAULT_RANGE_HIGH", "value", "SETTING_NAME_OPTIMAL_LOW", "DEFAULT_OPTIMAL_LOW", "SETTING_NAME_OPTIMAL_LOW", "value", "SETTING_NAME_OPTIMAL_LOW", "setting", "DEFAULT_OPTIMAL_LOW", "value", "SETTING_NAME_OPTIMAL_HIGH", "DEFAULT_OPTIMAL_HIGH", "SETTING_NAME_OPTIMAL_HIGH", "value", "SETTING_NAME_OPTIMAL_HIGH", "setting", "DEFAULT_OPTIMAL_HIGH", "value", "SETTING_NAME_CRITICAL_LOW", "value", "SETTING_NAME_CRITICAL_LOW", "DEFAULT_CRITICAL_LOW", "SETTING_NAME_CRITICAL_LOW", "setting", "DEFAULT_CRITICAL_LOW", "SETTING_NAME_PORTFOLIO_TIME_SPAN", "setting", "DEFAULT_PORTFOLIO_TIME_SPAN", "timeSpan", "SETTING_NAME_PORTFOLIO_TIME_SPAN", "SETTING_NAME_PORTFOLIO_TIME_SPAN", "SETTING_NAME_STORY_TREE_FIELD_ORDER", "setting", "DEFAULT_STORY_TREE_FIELD_ORDER", "newOrder", "newOrder", "SETTING_NAME_STORY_TREE_FIELD_ORDER", "DEFAULT_STORY_TREE_FIELD_ORDER", "SETTING_NAME_STORY_TREE_FIELD_ORDER", "newOrder", "names", "name", "type", "SETTING_NAME_BRANCH_METRICS", "SETTING_NAME_BRANCH_METRICS", "SETTING_NAME_BRANCH_METRICS", "setting", "DEFAULT_BRANCH_METRICS", "SETTING_NAME_LABELS_IN_STORY_LIST", "mode", "SETTING_NAME_LABELS_IN_STORY_LIST", "setting", "SETTING_NAME_WEEKENDS_IN_BURNDOWN", "mode", "SETTING_NAME_WEEKENDS_IN_BURNDOWN", "setting"], "SCS_MethodInvocation": ["getByName", "storeSetting", "storeSetting", "retrieveByName", "setName", "setValue", "create", "setValue", "store", "storeSetting", "retrieveByName", "getValue", "equals", "storeSetting", "retrieveByName", "getValue", "equals", "storeSetting", "retrieveByName", "getValue", "equals", "storeSetting", "retrieveByName", "getValue", "equals", "storeSetting", "storeSetting", "storeSetting", "retrieveByName", "parseInt", "getValue", "storeSetting", "storeSetting", "retrieveByName", "parseInt", "getValue", "storeSetting", "storeSetting", "retrieveByName", "parseInt", "getValue", "storeSetting", "storeSetting", "retrieveByName", "parseInt", "getValue", "storeSetting", "storeSetting", "retrieveByName", "parseInt", "getValue", "retrieveByName", "months", "parseInt", "getValue", "storeSetting", "toString", "getMonths", "storeSetting", "toString", "getMonths", "retrieveByName", "getValue", "checkFieldOrderString", "storeSetting", "storeSetting", "unmodifiableCollection", "asList", "split", "equals", "contains", "storeSetting", "toString", "storeSetting", "toString", "retrieveByName", "valueOf", "getValue", "storeSetting", "retrieveByName", "getValue", "equals", "storeSetting", "retrieveByName", "getValue", "equals"], "SCS_VariableDeclaration": ["Setting", "Setting", "Setting", "Setting", "Setting", "Setting", "Setting", "Setting", "Setting", "Setting", "Setting", "Setting", "Collection", "String", "String", "Setting", "Setting", "Setting"], "CO": ["/**\n * Business implementation for handling of settings\n * \n * @author kjniiran\n * @author Pasi Pekkanen\n * \n */", "//setting keys", "/**\n     * {@inheritDoc}\n     */", "/**\n     * {@inheritDoc}\n     */", "/**\n     * {@inheritDoc}\n     */", "/**\n     * {@inheritDoc}\n     */", "/**\n     * {@inheritDoc}\n     */", "/**\n     * {@inheritDoc}\n     */", "/**\n     * {@inheritDoc}\n     */", "/**\n     * {@inheritDoc}\n     */", "/**\n     * {@inheritDoc}\n     */", "/**\n     * {@inheritDoc}\n     */"], "CODE": "package fi.hut.soberit.agilefant.business.impl;\n\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport javax.annotation.PostConstruct;\n\nimport org.joda.time.Period;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.PlatformTransactionManager;\nimport org.springframework.transaction.TransactionStatus;\nimport org.springframework.transaction.annotation.Transactional;\nimport org.springframework.transaction.support.TransactionCallbackWithoutResult;\nimport org.springframework.transaction.support.TransactionTemplate;\n\nimport fi.hut.soberit.agilefant.business.SettingBusiness;\nimport fi.hut.soberit.agilefant.db.SettingDAO;\nimport fi.hut.soberit.agilefant.model.Setting;\n\n/**\n * Business implementation for handling of settings\n * \n * @author kjniiran\n * @author Pasi Pekkanen\n * \n */\n@Service(\"settingBusiness\")\n@Transactional\n@Scope(value=\"singleton\")\npublic class SettingBusinessImpl extends GenericBusinessImpl<Setting> implements\n        SettingBusiness {\n    \n    //setting keys\n    public static final String SETTING_NAME_HOUR_REPORTING = \"HourReporting\";\n    public static final String SETTING_NAME_DAILY_WORK = \"DailyWork\";\n    public static final String SETTING_NAME_TIME_SHEET = \"TimeSheet\";\n    public static final String SETTING_NAME_DEV_PORTFOLIO = \"DevPortfolio\";\n    public static final String SETTING_NAME_RANGE_LOW = \"RangeLow\";\n    public static final String SETTING_NAME_RANGE_HIGH = \"RangeHigh\";\n    public static final String SETTING_NAME_OPTIMAL_LOW = \"OptimalLow\";\n    public static final String SETTING_NAME_OPTIMAL_HIGH = \"OptimalHigh\";\n    public static final String SETTING_NAME_CRITICAL_LOW = \"CriticalLow\";\n    public static final String SETTING_NAME_PORTFOLIO_TIME_SPAN = \"PortfolioTimeSpan\";\n    public static final String SETTING_NAME_STORY_TREE_FIELD_ORDER = \"StoryTreeFieldOrder\";\n    public static final String SETTING_NAME_BRANCH_METRICS = \"branchMetricsType\";\n    public static final String SETTING_NAME_LABELS_IN_STORY_LIST = \"labelsInStoryList\";\n    public static final String SETTING_NAME_WEEKENDS_IN_BURNDOWN = \"weekendsInBurndown\";\n    \n    public SettingBusinessImpl() {\n        super(Setting.class);\n    }\n\n    @Autowired\n    private SettingDAO settingDAO;\n\n    @Autowired\n    private PlatformTransactionManager transactionManager;\n\n    public void setSettingDAO(SettingDAO settingDAO) {\n        this.genericDAO = settingDAO;\n        this.settingDAO = settingDAO;\n    }\n\n    public void setTransactionManager(PlatformTransactionManager transactionManager) {\n        this.transactionManager = transactionManager;\n    }\n\n    @Transactional(readOnly = true)\n    public Setting retrieveByName(String name) {\n        return this.settingDAO.getByName(name);\n    }\n    \n    public void storeSetting(String settingName, boolean value) {\n        this.storeSetting(settingName, ((Boolean)value).toString());\n    }\n    \n    public void storeSetting(String settingName, int value) {\n        this.storeSetting(settingName, ((Integer)value).toString());\n    }\n    \n    public synchronized void storeSetting(String settingName, String value) {\n        Setting setting = this.retrieveByName(settingName);\n        if (setting == null) {\n            setting = new Setting();\n            setting.setName(settingName);\n            setting.setValue(value);\n            this.settingDAO.create(setting);\n        } else {\n            setting.setValue(value);\n            this.settingDAO.store(setting);\n        } \n    }\n    \n    @Transactional\n    public void setValue(String settingName, String value) {\n        this.storeSetting(settingName, value);\n    }\n    \n    @Transactional(readOnly = true)\n    public boolean isHourReportingEnabled() {\n        Setting setting = this.retrieveByName(SETTING_NAME_HOUR_REPORTING);\n\n        if (setting == null) {\n            return false;\n        }\n\n        return setting.getValue().equals(\"true\");\n    }\n\n    @Transactional\n    public void setHourReporting(boolean mode) {\n        this.storeSetting(SETTING_NAME_HOUR_REPORTING, mode);\n\n    }\n    \n    @Transactional(readOnly = true)\n    public boolean isDailyWork() {\n        Setting setting = this.retrieveByName(SETTING_NAME_DAILY_WORK);\n\n        if (setting == null) {\n            return false;\n        }\n\n        return setting.getValue().equals(\"true\");\n    }\n\n    @Transactional\n    public void setDailyWork(boolean mode) {\n        this.storeSetting(SETTING_NAME_DAILY_WORK, mode);\n    }\n    \n    @Transactional(readOnly = true)\n    public boolean isTimeSheet() {\n        Setting setting = this.retrieveByName(SETTING_NAME_TIME_SHEET);\n\n        if (setting == null) {\n            return false;\n        }\n\n        return setting.getValue().equals(\"true\");\n    }\n    \n    @Transactional\n    public void setTimeSheet(boolean mode) {\n        this.storeSetting(SETTING_NAME_TIME_SHEET, mode);\n    }\n    \n    @Transactional(readOnly = true)\n    public boolean isDevPortfolio() {\n        Setting setting = this.retrieveByName(SETTING_NAME_DEV_PORTFOLIO);\n\n        if (setting == null) {\n            return false;\n        }\n\n        return setting.getValue().equals(\"true\");\n    }\n\n    @Transactional\n    public void setDevPortfolio(boolean mode) {\n        this.storeSetting(SETTING_NAME_DEV_PORTFOLIO, mode);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Transactional\n    public void setRangeLow(Integer value) {\n        if(value == null) {\n            this.storeSetting(SETTING_NAME_RANGE_LOW, DEFAULT_RANGE_LOW);\n        } else {\n            this.storeSetting(SETTING_NAME_RANGE_LOW, value);\n        }\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Transactional(readOnly = true)\n    public int getRangeLow() {\n        Setting setting = this.retrieveByName(SETTING_NAME_RANGE_LOW);\n\n        if (setting == null) {\n            return DEFAULT_RANGE_LOW;\n        } else {\n            return Integer.parseInt(setting.getValue());\n        }\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Transactional\n    public void setRangeHigh(Integer value) {\n        if(value == null) {\n            this.storeSetting(SETTING_NAME_RANGE_HIGH, DEFAULT_RANGE_HIGH);\n        } else {\n            this.storeSetting(SETTING_NAME_RANGE_HIGH, value);\n        }\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Transactional(readOnly = true)\n    public int getRangeHigh() {\n        Setting setting = this.retrieveByName(SETTING_NAME_RANGE_HIGH);\n\n        if (setting == null) {\n            return DEFAULT_RANGE_HIGH;\n        }\n        return Integer.parseInt(setting.getValue());\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Transactional\n    public void setOptimalLow(Integer value) {\n        if(value == null) {\n            this.storeSetting(SETTING_NAME_OPTIMAL_LOW, DEFAULT_OPTIMAL_LOW);\n        } else {\n            this.storeSetting(SETTING_NAME_OPTIMAL_LOW, value);\n        }\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Transactional(readOnly = true)\n    public int getOptimalLow() {\n        Setting setting = this.retrieveByName(SETTING_NAME_OPTIMAL_LOW);\n\n        if (setting == null) {\n            return DEFAULT_OPTIMAL_LOW;\n        }\n        return Integer.parseInt(setting.getValue());\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Transactional\n    public void setOptimalHigh(Integer value) {\n        if(value == null) {\n            this.storeSetting(SETTING_NAME_OPTIMAL_HIGH, DEFAULT_OPTIMAL_HIGH);\n        } else {\n            this.storeSetting(SETTING_NAME_OPTIMAL_HIGH, value);            \n        }\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Transactional(readOnly = true)\n    public int getOptimalHigh() {\n        Setting setting = this.retrieveByName(SETTING_NAME_OPTIMAL_HIGH);\n\n        if (setting == null) {\n            return DEFAULT_OPTIMAL_HIGH;\n        }\n        return Integer.parseInt(setting.getValue());\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Transactional\n    public void setCriticalLow(Integer value) {\n        if(value != null) {\n            this.storeSetting(SETTING_NAME_CRITICAL_LOW, value);\n        } else {\n            this.storeSetting(SETTING_NAME_CRITICAL_LOW, DEFAULT_CRITICAL_LOW);\n        }\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Transactional(readOnly = true)\n    public int getCriticalLow() {\n        Setting setting = this.retrieveByName(SETTING_NAME_CRITICAL_LOW);\n\n        if (setting == null) {\n            return DEFAULT_CRITICAL_LOW;\n        }\n        return Integer.parseInt(setting.getValue());\n    }\n    \n    \n    @Transactional(readOnly = true)\n    public Period getPortfolioTimeSpan() {\n        Setting setting = this.retrieveByName(SETTING_NAME_PORTFOLIO_TIME_SPAN);\n        \n        if(setting == null) {\n            return DEFAULT_PORTFOLIO_TIME_SPAN; \n        }\n        return Period.months(Integer.parseInt(setting.getValue()));\n        \n    }\n    \n    @Transactional(readOnly = true)\n    public void setPortfolioTimeSpan(Period timeSpan) {\n        if( timeSpan == null) {\n            this.storeSetting(SETTING_NAME_PORTFOLIO_TIME_SPAN, Integer.toString(DEFAULT_PORTFOLIO_TIME_SPAN.getMonths()));\n        } else {\n            this.storeSetting(SETTING_NAME_PORTFOLIO_TIME_SPAN, Integer.toString(timeSpan.getMonths()));\n        }\n    }\n\n    @Transactional(readOnly = true)\n    public String getStoryTreeFieldOrder() {\n        Setting setting = this.retrieveByName(SETTING_NAME_STORY_TREE_FIELD_ORDER);\n        if (setting == null) {\n            return DEFAULT_STORY_TREE_FIELD_ORDER;\n        }\n        return setting.getValue();\n    }\n    \n    public void setStoryTreeFieldOrder(String newOrder) {\n        checkFieldOrderString(newOrder);\n        if (newOrder == null) {\n            this.storeSetting(SETTING_NAME_STORY_TREE_FIELD_ORDER, DEFAULT_STORY_TREE_FIELD_ORDER);\n        } else {\n            this.storeSetting(SETTING_NAME_STORY_TREE_FIELD_ORDER, newOrder);\n        }\n    }\n    \n    private void checkFieldOrderString(String order) {\n        Collection<String> permitted = Collections.unmodifiableCollection(Arrays.asList(\"state\",\"storyPoints\",\"labels\",\"name\",\"backlog\",\"breadcrumb\"));\n        String[] names = order.split(\",\");\n        for (String name : names) {\n            if (name.equals(\"\") || !permitted.contains(name)) {\n                throw new IllegalArgumentException(\"Incorrect setting string for story tree field order\");\n            }\n        }\n    }\n    \n    public void setBranchMetricsType(BranchMetricsType type) {\n        if(type == null) {\n            this.storeSetting(SETTING_NAME_BRANCH_METRICS, DEFAULT_BRANCH_METRICS.toString());\n        } else {\n            this.storeSetting(SETTING_NAME_BRANCH_METRICS, type.toString());\n        }\n    }\n    \n    @Transactional(readOnly = true)\n    public BranchMetricsType getBranchMetricsType() {\n        Setting setting = this.retrieveByName(SETTING_NAME_BRANCH_METRICS);\n        if (setting == null) {\n            return DEFAULT_BRANCH_METRICS;\n        }\n        return BranchMetricsType.valueOf(setting.getValue());\n    }\n    \n    \n    public void setLabelsInStoryList(boolean mode) {\n        this.storeSetting(SETTING_NAME_LABELS_IN_STORY_LIST, mode);\n    }\n    \n    @Transactional(readOnly = true)\n    public boolean isLabelsInStoryList() {\n        Setting setting = this.retrieveByName(SETTING_NAME_LABELS_IN_STORY_LIST);\n\n        if (setting == null) {\n            return true;\n        }\n\n        return setting.getValue().equals(\"true\");\n    }\n    \n    public void setWeekendsInBurndown(boolean mode) {\n        this.storeSetting(SETTING_NAME_WEEKENDS_IN_BURNDOWN, mode);\n    }\n    \n    @Transactional(readOnly = true)\n    public boolean isWeekendsInBurndown() {\n        Setting setting = this.retrieveByName(SETTING_NAME_WEEKENDS_IN_BURNDOWN);\n        if (setting == null) {\n            return true;\n        }\n        \n        return setting.getValue().equals(\"true\");\n    }\n    \n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\impl\\\\StoryAccessBusinessImp.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["StoryAccessBusinessImp"], "AN": ["storyAccessDAO", "storyBusiness", "userBusiness", "storyHistoryDAO"], "SCS_VariableDeclarator": ["storyAccessDAO", "storyBusiness", "userBusiness", "storyHistoryDAO", "now", "user", "entry", "story", "user", "user", "data", "res", "story", "data", "stories", "res", "story"], "SCS_ConstructorDeclaration": ["StoryAccessBusinessImp"], "SCS_ClassReference": ["StoryAccess", "SecurityUtil", "entry", "entry", "entry", null, null, null, null, null, null, null, null, "data", "res", "data", "Collections", "res", "res", null, null, "data", "res", "data", "story", "Collections", "res", "res"], "MN": ["addAccessEntry", "addAccessEntry", "calculateOccurences", "calculateEditOccurences", "calculateOccurences", "calculateEditOccurences"], "PN": ["story", "storyId", "start", "end", "userId", "numberOfItems", "start", "end", "userId", "numberOfItems", "start", "end", "user", "numberOfItems", "start", "end", "user", "numberOfItems"], "SCS_VariableDeclaration": ["DateTime", "User", "StoryAccess", "Story", "User", "User", "Map", "List", "Story", "Map", "Collection", "List", "Story"], "SCS_MethodInvocation": ["getLoggedUser", "setDate", "setStory", "setUser", "create", "retrieve", "addAccessEntry", "retrieve", "calculateOccurences", "retrieve", "calculateEditOccurences", "calculateAccessCounts", "keySet", "add", "get", "sort", "size", "subList", "calculateAccessCounts", "retrieveMultiple", "keySet", "add", "get", "getId", "sort", "size", "subList"], "SCS_MemberReference": ["now", "story", "user", "storyAccessDAO", "entry", "storyBusiness", "storyId", "story", "userBusiness", "userId", "start", "end", "user", "numberOfItems", "userBusiness", "userId", "start", "end", "user", "numberOfItems", "storyAccessDAO", "start", "end", "user", "story", "story", "res", "numberOfItems", "numberOfItems", "res", "storyHistoryDAO", "start", "end", "user", "storyBusiness", "stories", "story", "res", "numberOfItems", "numberOfItems", "res"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.business.impl;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.joda.time.DateTime;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.support.PropertyComparator;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport fi.hut.soberit.agilefant.business.StoryAccessBusiness;\nimport fi.hut.soberit.agilefant.business.StoryBusiness;\nimport fi.hut.soberit.agilefant.business.UserBusiness;\nimport fi.hut.soberit.agilefant.db.StoryAccessDAO;\nimport fi.hut.soberit.agilefant.db.history.StoryHistoryDAO;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.StoryAccess;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.security.SecurityUtil;\nimport fi.hut.soberit.agilefant.transfer.StoryAccessCloudTO;\n\n@Service(\"storyAccessBusiness\")\n@Transactional\npublic class StoryAccessBusinessImp extends GenericBusinessImpl<StoryAccess>\n        implements StoryAccessBusiness {\n\n    @Autowired\n    private StoryAccessDAO storyAccessDAO;\n    @Autowired\n    private StoryBusiness storyBusiness;\n    @Autowired\n    private UserBusiness userBusiness;\n    @Autowired\n    private StoryHistoryDAO storyHistoryDAO;\n\n    public StoryAccessBusinessImp() {\n        super(StoryAccess.class);\n    }\n\n    public void addAccessEntry(Story story) {\n        DateTime now = new DateTime();\n        User user = SecurityUtil.getLoggedUser();\n\n        StoryAccess entry = new StoryAccess();\n\n        entry.setDate(now);\n        entry.setStory(story);\n        entry.setUser(user);\n        this.storyAccessDAO.create(entry);\n    }\n\n    public void addAccessEntry(int storyId) {\n        Story story = this.storyBusiness.retrieve(storyId);\n        this.addAccessEntry(story);\n    }\n\n    @Transactional(readOnly=true)\n    public List<StoryAccessCloudTO> calculateOccurences(DateTime start,\n            DateTime end, int userId, int numberOfItems) {\n        User user = this.userBusiness.retrieve(userId);\n        return this.calculateOccurences(start, end, user, numberOfItems);\n\n    }\n\n    @Transactional(readOnly=true)\n    public List<StoryAccessCloudTO> calculateEditOccurences(DateTime start,\n            DateTime end, int userId, int numberOfItems) {\n        User user = this.userBusiness.retrieve(userId);\n        return this.calculateEditOccurences(start, end, user, numberOfItems);\n\n    }\n    \n    @SuppressWarnings(\"unchecked\")\n    @Transactional(readOnly=true)\n    public List<StoryAccessCloudTO> calculateOccurences(DateTime start,\n            DateTime end, User user, int numberOfItems) {\n        Map<Story, Long> data = this.storyAccessDAO.calculateAccessCounts(\n                start, end, user);\n        List<StoryAccessCloudTO> res = new ArrayList<StoryAccessCloudTO>();\n        for (Story story : data.keySet()) {\n            res.add(new StoryAccessCloudTO(story, data.get(story)));\n        }\n        Collections.sort(res, new PropertyComparator(\"count\", true, false));\n        if(res.size() > numberOfItems) {\n            return res.subList(0, numberOfItems - 1);\n        }\n        return res;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    @Transactional(readOnly=true)\n    public List<StoryAccessCloudTO> calculateEditOccurences(DateTime start,\n            DateTime end, User user, int numberOfItems) {\n        Map<Integer, Long> data = this.storyHistoryDAO.calculateAccessCounts(\n                start, end, user);\n        \n        Collection<Story> stories = this.storyBusiness.retrieveMultiple(data.keySet());\n        \n        List<StoryAccessCloudTO> res = new ArrayList<StoryAccessCloudTO>();\n        for (Story story : stories) {\n            res.add(new StoryAccessCloudTO(story, data.get(story.getId())));\n        }\n        Collections.sort(res, new PropertyComparator(\"count\", true, false));\n        if(res.size() > numberOfItems) {\n            return res.subList(0, numberOfItems - 1);\n        }\n        return res;\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\impl\\\\StoryBatchBusinessImpl.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["StoryBatchBusinessImpl"], "AN": ["storyBusiness", "labelBusiness"], "SCS_VariableDeclarator": ["storyBusiness", "labelBusiness", "stories", "story", "story"], "MN": ["modifyMultiple", "addLabels", "updateStates"], "PN": ["storyIds", "state", "labelNames", "labelNames", "stories", "state", "stories"], "SCS_VariableDeclaration": ["Set", "Story", "Story"], "SCS_ClassReference": ["stories", "storyBusiness", "", "", "labelNames", "labelBusiness", "story", "story", "storyBusiness", "storyBusiness"], "SCS_MethodInvocation": ["addAll", "retrieveMultiple", "updateStates", "addLabels", "isEmpty", "createStoryLabels", "getId", "setState", "store", "updateParentStates"], "SCS_MemberReference": ["storyIds", "state", "stories", "labelNames", "stories", "labelNames", "stories", "labelNames", "state", "stories", "state", "story", "story"], "CO": ["//storyBusiness.store(story.getId(), story, null, null, false);"], "CODE": "package fi.hut.soberit.agilefant.business.impl;\n\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport fi.hut.soberit.agilefant.business.LabelBusiness;\nimport fi.hut.soberit.agilefant.business.StoryBatchBusiness;\nimport fi.hut.soberit.agilefant.business.StoryBusiness;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.StoryState;\n\n@Service(\"storyBatchBusiness\")\npublic class StoryBatchBusinessImpl implements StoryBatchBusiness {\n\n    @Autowired\n    private StoryBusiness storyBusiness;\n    @Autowired\n    private LabelBusiness labelBusiness;\n\n    public void modifyMultiple(Set<Integer> storyIds, StoryState state,\n            List<String> labelNames) {\n        Set<Story> stories = new HashSet<Story>();\n\n        stories.addAll(storyBusiness.retrieveMultiple(storyIds));\n\n        updateStates(state, stories);\n\n        addLabels(labelNames, stories);\n\n    }\n\n    private void addLabels(List<String> labelNames, Set<Story> stories) {\n        if (labelNames != null && !labelNames.isEmpty()) {\n            for (Story story : stories) {\n                labelBusiness.createStoryLabels(labelNames, story.getId());\n\n            }\n        }\n    }\n\n    private void updateStates(StoryState state, Set<Story> stories) {\n        if (state != null) {\n            for (Story story : stories) {\n                story.setState(state);\n                storyBusiness.store(story);\n                storyBusiness.updateParentStates(story);\n                //storyBusiness.store(story.getId(), story, null, null, false);\n            }\n        }\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\impl\\\\StoryBusinessImpl.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["StoryBusinessImpl"], "AN": ["storyDAO", "backlogBusiness", "iterationBusiness", "iterationDAO", "userDAO", "hourEntryDAO", "iterationHistoryEntryBusiness", "backlogHistoryEntryBusiness", "storyRankBusiness", "transferObjectBusiness", "hourEntryBusiness", "taskBusiness", "storyHierarchyBusiness", "storyTreeIntegrityBusiness", "labelBusiness"], "SCS_VariableDeclarator": ["storyDAO", "backlogBusiness", "iterationBusiness", "iterationDAO", "userDAO", "hourEntryDAO", "iterationHistoryEntryBusiness", "backlogHistoryEntryBusiness", "storyRankBusiness", "transferObjectBusiness", "hourEntryBusiness", "taskBusiness", "storyHierarchyBusiness", "storyTreeIntegrityBusiness", "labelBusiness", "tasks", "storyTasks", "bli", "story", "storyBacklog", "iteration", "persisted", "iteration", "backlog", "t", "parent", "storysIteration", "storysBacklog", "iterationsParent", "children", "oldStoryIteration", "newStoryIteration", "oldIteration", "newIteration", "userId", "referenceStory", "backlog", "story", "referenceStory", "backlog", "story", "backlog", "referenceBacklog", "currentBacklog", "backlog", "hasBacklog", "iteration", "newStory", "t", "backlog", "hasBacklog", "iteration", "newStory", "persisted", "backlog", "story", "iteration", "parent", "newId", "persisted", "backlog", "iteration", "newId", "oldParent", "storyBacklogs", "storyIterations", "storyBacklog", "storyIteration", "child", "parent", "childStories", "childStory", "parentBacklog", "oldBacklog", "oldIteration", "targetIteration", "targetId", "oldIterationId", "targetParent", "oldIterationParent", "hasChildren", "rankingProject", "hasSameBacklog", "metrics", "story", "storyTo", "stories", "stories", "child", "task", "iteration", "task", "backlog", "iteration", "parentStory", "allChildren", "allBacklogs", "child", "blog", "backlogs", "child", "iteration", "children", "child", "s", "tasks", "t"], "SCS_ConstructorDeclaration": ["StoryBusinessImpl"], "SCS_ClassReference": ["Story", "iterationDAO", "bli", "storyTasks", "", null, "", "", "", "story", "backlogHistoryEntryBusiness", "storyBacklog", "story", "iterationHistoryEntryBusiness", "iteration", null, "persisted", "persisted", "", "dataItem", "", "", "", "", "", "storyDAO", "", "persisted", "taskBusiness", "iterationHistoryEntryBusiness", "iteration", "dataItem", "dataItem", "dataItem", "dataItem", "dataItem", "dataItem", null, "backlogBusiness", "dataItem", "dataItem", null, "dataItem", "backlogHistoryEntryBusiness", "backlog", "story", "story", "story", "parent", "parent", "parent", "persisted", "persisted", "storysIteration", "storysIteration", "persisted", "story", "children", "oldStory", "newStory", "storyRankBusiness", "storyRankBusiness", "oldStory", "newStory", "oldIteration", "newIteration", "story", "story", null, "story", null, "storyRankBusiness", "story", null, "story", null, "", "story", null, null, "backlog", null, "backlog", "persisted", "dataItem", "persisted", "dataItem", "persisted", "dataItem", "persisted", "dataItem", "persisted", "dataItem", "persisted", "dataItem", "persisted", "dataItem", "story", null, "story", null, "userDAO", null, null, null, "backlog", null, null, "story", null, null, null, "backlog", null, null, "story", "referenceStory", null, "currentBacklog", "currentBacklog", null, "story", null, "story", null, "story", "newStory", "newStory", "newStory", "t", "t", "t", "taskBusiness", "newStory", "newStory", "", "labelBusiness", "newStory", "newStory", null, "", null, null, "story", null, "story", null, "story", "newStory", "newStory", "story", "story", "newStory", null, "newStory", "newStory", null, "story", null, "story", "story", null, "newStory", "newStory", "", "labelBusiness", "newStory", "newStory", null, "", null, null, null, "storyHierarchyBusiness", "storyRankBusiness", "backlogBusiness", null, "persisted", "", null, null, null, null, "story", "iteration", "story", "story", "story", "", "storyDAO", "story", "story", "storyDAO", "storyDAO", "", "backlogHistoryEntryBusiness", "backlog", "", "iterationHistoryEntryBusiness", "iteration", "story", null, "story", "story", null, "backlogBusiness", "story", "backlogBusiness", "storyTreeIntegrityBusiness", "", "", "story", "story", "story", null, null, "story", "story", "oldParent", null, "storyHierarchyBusiness", "", "", "", "story", "", "", "story", "storyBacklogs", "story", "story", "storyIterations", "story", "story", "story", "childStory", "parent", null, "story", null, "storyDAO", null, "story", "parent", null, "storyHierarchyBusiness", "parent", "parent", null, "storyRankBusiness", "", "", "story", "story", "story", "story", "story", "targetIteration", null, "target", "story", "target", "target", null, null, "", "oldIteration", "story", "story", "target", null, "", "storyDAO", "target", "oldBacklog", "backlogHistoryEntryBusiness", "oldBacklog", "oldIteration", "backlogHistoryEntryBusiness", "iterationHistoryEntryBusiness", "backlogHistoryEntryBusiness", "iterationHistoryEntryBusiness", "", "", "", "storyRankBusiness", "story", "storyRankBusiness", "storyRankBusiness", "storyRankBusiness", "target", "targetParent", "oldBacklog", "storyRankBusiness", "storyRankBusiness", "target", "oldBacklog", "storyRankBusiness", "oldIteration", "storyRankBusiness", "oldIteration", "story", "target", "oldIterationParent", "storyRankBusiness", "", "storyRankBusiness", "", "storyRankBusiness", "storyRankBusiness", "storyRankBusiness", "story", "", "story", "story", "story", "upperStory", "story", "upperStory", "story", null, "story", "storyDAO", "metrics", "hourEntryDAO", null, null, "storyTo", null, "storyDAO", "storyDAO", "story", "story", "child", "story", "child", "story", null, "", "story", "hourEntryBusiness", "task", "story", "task", null, "taskBusiness", "task", "story", "story", "taskBusiness", "iteration", "task", "story", null, "hourEntryBusiness", "story", "hourEntryBusiness", "story", "story", "story", null, "story", null, "story", null, "story", null, "story", "backlog", null, "story", "iteration", null, "story", "parentStory", null, "", "storyHierarchyBusiness", "", "", "", "story", null, "iterationHistoryEntryBusiness", "blog", "backlogHistoryEntryBusiness", "blog", "parent", "backlogs", "", "backlogs", "parent", "parent", "backlogs", "story", "story", "children", "", "Collections", "story", "s", "story", null, "story", "taskBusiness", "hourEntryBusiness", "story", "story", "story", null], "MN": ["setStoryDAO", "getStoryContents", "delete", "delete", "deleteAndUpdateHistory", "store", "updateParentStates", "checkStoriesBacklogIfAssignedToIteration", "storyHasChildren", "fixAssignedIterationRanks", "haveDifferentIteration", "updateStoryRanks", "createStoryRanks", "populateStoryFields", "setResponsibles", "createStoryUnder", "createStorySibling", "getBacklogForCreatedStory", "copyStorySibling", "extractUnfinishedStorySibling", "create", "persistNewStory", "persistNewStory", "create", "moveStoryAway", "moveStoryAndChildren", "recursiveMoveStory", "moveSingleStoryToBacklog", "moveStory", "updateHistories", "rankToBottom", "rankToProduct", "rankToIteration", "rankToProject", "rankStoryUnder", "rankStoryOver", "rankStoryToTop", "rankStoryToBottom", "checkRankingArguments", "isValidRankTarget", "calculateMetrics", "calculateMetrics", "retrieveStoryWithMetrics", "retrieveStoriesInIteration", "retrieveStoriesInBacklog", "delete", "deleteStoryChildren", "getTreeBacklogs", "getTreeChildren", "forceDelete", "setUserDAO", "setIterationDAO", "setBacklogHistoryEntryBusiness", "setIterationHistoryEntryBusiness", "setHourEntryDAO", "setBacklogBusiness", "setTransferObjectBusiness", "setHourEntryBusiness", "setTaskBusiness", "setStoryRankBusiness", "setStoryHierarchyBusiness", "addResponsible"], "PN": ["storyDAO", "story", "iteration", "storyId", "story", "id", "taskHandlingChoice", "storyHourEntryHandlingChoice", "taskHourEntryHandlingChoice", "childHandlingChoice", "storyId", "dataItem", "backlogId", "responsibleIds", "tasksToDone", "story", "persisted", "story", "oldStory", "newStory", "oldStory", "newStory", "story", "story", "backlog", "persisted", "dataItem", "story", "responsibleIds", "referenceStoryId", "backlogId", "data", "responsibleIds", "labelNames", "referenceStoryId", "backlogId", "data", "responsibleIds", "labelNames", "referenceStory", "currentBacklogId", "storyId", "story", "storyId", "story", "dataItem", "backlogId", "iterationId", "responsibleIds", "labelNames", "dataItem", "backlogId", "responsibleIds", "dataItem", "backlogId", "iterationId", "responsibleIds", "story", "story", "backlog", "story", "backlog", "story", "backlog", "storyBacklogs", "storyIterations", "story", "backlog", "story", "target", "target", "oldBacklog", "oldIteration", "story", "target", "oldBacklog", "oldIteration", "story", "oldBacklog", "oldIteration", "story", "target", "oldBacklog", "oldIteration", "story", "target", "oldBacklog", "oldIteration", "story", "upperStory", "backlog", "story", "lowerStory", "backlog", "story", "context", "story", "context", "story", "otherStory", "backlog", "story", "upperStory", "rankingProject", "story", "storyId", "storyId", "iteration", "backlog", "story", "taskHandlingChoice", "storyHourEntryHandlingChoice", "taskHourEntryHandlingChoice", "childHandlingChoice", "story", "parent", "story", "story", "userDAO", "iterationDAO", "backlogHistoryEntryBusiness", "iterationHistoryEntryBusiness", "hourEntryDAO", "backlogBusiness", "transferObjectBusiness", "hourEntryBusiness", "taskBusiness", "storyRankBusiness", "storyHierarchyBusiness", "story", "user"], "SCS_MemberReference": ["genericDAO", "storyDAO", "storyDAO", "storyDAO", "iteration", "tasks", "story", "bli", "storyTasks", "storyId", "story", "id", "story", "taskHandlingChoice", "storyHourEntryHandlingChoice", "taskHourEntryHandlingChoice", "childHandlingChoice", "storyBacklog", "iteration", "storyId", "storyId", "persisted", "persisted", "responsibleIds", "persisted", "persisted", "dataItem", "persisted", "dataItem", "persisted", "dataItem", "persisted", "persisted", "tasksToDone", "iteration", "t", "iteration", "backlog", "backlog", "backlogId", "backlog", "persisted", "backlogId", "backlog", "persisted", "backlog", "persisted", "NOT_STARTED", "DEFERRED", "parent", "NOT_STARTED", "STARTED", "parent", "persisted", "storysIteration", "iterationsParent", "iterationsParent", "storysBacklog", "iterationsParent", "story", "children", "oldStory", "newStory", "oldStoryIteration", "newStoryIteration", "newStory", "newStoryIteration", "oldStory", "oldStoryIteration", "oldStory", "newStory", "oldStory", "newStory", "oldStory", "newStory", "oldIteration", "newIteration", "oldIteration", "newIteration", "oldIteration", "newIteration", "story", "story", "story", "story", "backlog", "backlog", "storyRankBusiness", "story", "backlog", "storyRankBusiness", "story", "backlog", "storyRankBusiness", "story", "responsibleIds", "responsibleIds", "userId", "referenceStoryId", "referenceStory", "backlogId", "data", "responsibleIds", "storyHierarchyBusiness", "story", "referenceStory", "labelBusiness", "labelNames", "story", "referenceStoryId", "referenceStory", "backlogId", "data", "responsibleIds", "storyHierarchyBusiness", "story", "referenceStory", "labelBusiness", "labelNames", "story", "backlogBusiness", "currentBacklogId", "referenceBacklog", "backlog", "currentBacklog", "backlog", "referenceBacklog", "backlog", "story", "storyId", "hasBacklog", "backlog", "backlogBusiness", "backlog", "story", "t", "hasBacklog", "backlog", "iteration", "newStory", "storyHierarchyBusiness", "newStory", "story", "newStory", "story", "backlog", "transferObjectBusiness", "newStory", "story", "storyId", "hasBacklog", "backlog", "backlogBusiness", "backlog", "story", "hasBacklog", "backlog", "iteration", "newStory", "storyHierarchyBusiness", "newStory", "story", "newStory", "story", "backlog", "transferObjectBusiness", "newStory", "iterationId", "iterationId", "persisted", "dataItem", "backlogId", "iterationId", "responsibleIds", "persisted", "dataItem", "backlogId", "responsibleIds", "persisted", "persisted", "backlogId", "labelBusiness", "labelNames", "persisted", "dataItem", "backlogId", "responsibleIds", "dataItem", "backlogId", "backlogBusiness", "backlogId", "backlog", "story", "responsibleIds", "story", "dataItem", "iterationId", "iterationBusiness", "iterationId", "iteration", "parent", "parent", "backlog", "story", "newId", "persisted", "story", "story", "newId", "backlog", "backlog", "iteration", "story", "backlog", "backlog", "iteration", "story", "iteration", "newId", "backlog", "story", "backlog", "story", "backlog", "backlog", "backlog", "storyTreeIntegrityBusiness", "story", "backlog", "oldParent", "story", "oldParent", "story", "backlog", "storyBacklogs", "storyIterations", "storyBacklogs", "backlog", "storyBacklog", "storyIterations", "backlog", "storyIteration", "child", "backlog", "storyBacklogs", "storyIterations", "story", "backlog", "childStories", "parent", "parent", "childStory", "childStory", "childStory", "storyTreeIntegrityBusiness", "story", "backlog", "parent", "story", "parent", "parent", "parentBacklog", "parent", "parentBacklog", "story", "backlog", "backlog", "target", "target", "targetIteration", "story", "story", "story", "target", "oldBacklog", "oldIteration", "oldIteration", "oldBacklog", "target", "target", "story", "story", "target", "oldBacklog", "oldIteration", "story", "oldBacklog", "targetId", "oldIteration", "oldIterationId", "oldIterationId", "targetId", "target", "targetId", "target", "oldBacklog", "oldIteration", "target", "story", "oldBacklog", "oldIteration", "target", "story", "target", "oldBacklog", "oldIteration", "target", "story", "target", "oldBacklog", "oldIteration", "story", "oldBacklog", "oldIteration", "story", "oldIteration", "oldIteration", "story", "oldIteration", "story", "target", "targetParent", "oldBacklog", "story", "targetParent", "story", "oldBacklog", "oldBacklog", "story", "oldBacklog", "oldIteration", "story", "oldIteration", "oldIterationParent", "hasChildren", "oldIterationParent", "story", "target", "backlog", "story", "upperStory", "backlog", "story", "backlog", "upperStory", "story", "backlog", "story", "lowerStory", "backlog", "story", "backlog", "lowerStory", "story", "context", "story", "context", "story", "context", "story", "context", "story", "story", "backlog", "rankingProject", "rankingProject", "otherStory", "story", "otherStory", "rankingProject", "backlog", "backlog", "backlog", "otherStory", "backlog", "rankingProject", "hasSameBacklog", "storyId", "storyId", "metrics", "storyId", "transferObjectBusiness", "story", "story", "storyTo", "iteration", "stories", "backlog", "stories", "childHandlingChoice", "childHandlingChoice", "child", "child", "story", "taskHandlingChoice", "taskHandlingChoice", "taskHourEntryHandlingChoice", "MOVE", "taskHourEntryHandlingChoice", "task", "storyHourEntryHandlingChoice", "storyHourEntryHandlingChoice", "backlog", "story", "iteration", "story", "parentStory", "story", "parentStory", "parentStory", "story", "story", "story", "allChildren", "child", "allBacklogs", "blog", "child", "iteration", "iteration", "backlogs", "child", "children", "children", "tasks", "t", "DELETE", "userDAO", "userDAO", "iterationDAO", "iterationDAO", "backlogHistoryEntryBusiness", "backlogHistoryEntryBusiness", "iterationHistoryEntryBusiness", "iterationHistoryEntryBusiness", "hourEntryDAO", "hourEntryDAO", "backlogBusiness", "backlogBusiness", "transferObjectBusiness", "transferObjectBusiness", "hourEntryBusiness", "hourEntryBusiness", "taskBusiness", "taskBusiness", "storyRankBusiness", "storyRankBusiness", "storyHierarchyBusiness", "storyHierarchyBusiness", "user"], "SCS_VariableDeclaration": ["List", "Collection", "Task", "Story", "Backlog", "Iteration", "Story", "Iteration", "Backlog", "Task", "Story", "Iteration", "Backlog", "Backlog", "List", "Iteration", "Iteration", "Iteration", "Iteration", "Integer", "Story", "Backlog", "Story", "Story", "Backlog", "Story", "Backlog", "Backlog", "Backlog", "Backlog", "Boolean", "Iteration", "Story", "Task", "Backlog", "Boolean", "Iteration", "Story", "Story", "Backlog", "Story", "Iteration", "Backlog", "int", "Story", "Backlog", "Iteration", "int", "Story", "Set", "Set", "Backlog", "Iteration", "Story", "Story", "List", "Story", "Backlog", "Backlog", "Iteration", "Iteration", "int", "int", "Backlog", "Backlog", "boolean", "boolean", "boolean", "StoryMetrics", "Story", "StoryTO", "List", "List", "Story", "Task", "Iteration", "Task", "Backlog", "Iteration", "Story", "List", "Set", "Story", "Backlog", "Set", "Story", "Iteration", "List", "Story", "Story", "Set", "Task"], "SCS_MethodInvocation": ["getAllTasksForIteration", "getStory", "add", "delete", "retrieve", "delete", "retrieve", "delete", "getBacklog", "updateHistory", "getId", "getIteration", "updateIterationHistory", "getId", "retrieve", "getIteration", "getBacklog", "storyHasChildren", "getIteration", "setResponsibles", "checkStoriesBacklogIfAssignedToIteration", "haveDifferentIteration", "fixAssignedIterationRanks", "populateStoryFields", "store", "updateParentStates", "getTasks", "setTaskToDone", "updateIterationHistory", "getId", "getIteration", "getBacklog", "getIteration", "getBacklog", "getBacklog", "getBacklog", "moveStoryAway", "retrieve", "getBacklog", "getBacklog", "moveStoryAway", "getBacklog", "updateHistory", "getId", "getState", "getState", "getParent", "getState", "setState", "getParent", "getIteration", "getBacklog", "isStandAlone", "getParent", "setBacklog", "getChildren", "size", "getIteration", "getIteration", "createRank", "removeRank", "getIteration", "getIteration", "getId", "getId", "getBacklog", "getChildren", "isEmpty", "getStoryRanks", "isEmpty", "removeStoryRanks", "getChildren", "isEmpty", "getStoryRanks", "isEmpty", "createStoryRanks", "getBacklog", "rankToBottom", "rankToHead", "isStandAlone", "rankToBottom", "getParent", "setDescription", "getDescription", "setName", "getName", "setState", "getState", "setStoryValue", "getStoryValue", "setStoryPoints", "getStoryPoints", "setParent", "getParent", "setIteration", "getIteration", "getResponsibles", "clear", "getResponsibles", "add", "get", "retrieve", "getBacklogForCreatedStory", "persistNewStory", "getId", "moveUnder", "createStoryLabels", "getId", "retrieve", "getBacklogForCreatedStory", "persistNewStory", "getId", "moveAfter", "createStoryLabels", "getId", "getBacklog", "retrieve", "getParent", "getParent", "retrieve", "getBacklog", "retrieve", "getBacklog", "getId", "getIteration", "setName", "getName", "getTasks", "setEffortLeft", "setOriginalEstimate", "setHourEntries", "store", "setBacklog", "setIteration", "create", "createStoryLabelsSet", "getLabels", "getId", "moveAfter", "rankStoryUnder", "constructStoryTO", "retrieve", "getBacklog", "retrieve", "getBacklog", "getId", "getIteration", "setName", "getName", "setName", "getName", "getName", "length", "setName", "getName", "substring", "getName", "length", "setName", "getName", "substring", "setBacklog", "setIteration", "create", "createStoryLabelsSet", "getLabels", "getId", "moveAfter", "rankStoryUnder", "constructStoryTO", "persistNewStory", "persistNewStory", "moveToTop", "rankToHead", "retrieve", "createStoryLabels", "getId", "persistNewStory", "retrieve", "setResponsibles", "populateStoryFields", "retrieve", "setIteration", "getParent", "setBacklog", "setBacklog", "setBacklog", "create", "get", "getBacklog", "getIteration", "create", "get", "createStoryRanks", "updateHistory", "getId", "createStoryRanks", "updateIterationHistory", "getId", "getChildren", "isEmpty", "getIteration", "getIteration", "isStandAlone", "getParentProduct", "getBacklog", "getParentProduct", "canStoryBeMovedToBacklog", "moveStory", "updateHistories", "getBacklog", "getIteration", "getChildren", "isEmpty", "hasParentStoryConflict", "getParent", "setParent", "getChildren", "remove", "updateChildrenTreeRanks", "recursiveMoveStory", "updateHistories", "updateHistories", "getChildren", "recursiveMoveStory", "moveStory", "getBacklog", "add", "getBacklog", "getIteration", "add", "getIteration", "getParent", "getChildren", "setParent", "getChildren", "add", "getChildren", "remove", "store", "hasParentStoryConflict", "setParent", "getChildren", "remove", "updateChildrenTreeRanks", "getBacklog", "getChildren", "isEmpty", "rankToBottom", "moveStory", "updateHistories", "getBacklog", "getIteration", "getBacklog", "getIteration", "setIteration", "getAssignedStories", "add", "isStandAlone", "setBacklog", "getParent", "getParent", "getStories", "add", "rankToBottom", "isStandAlone", "setIteration", "setBacklog", "getStories", "add", "rankToBottom", "store", "getId", "getId", "updateHistory", "getId", "getId", "updateHistory", "updateIterationHistory", "updateHistory", "updateIterationHistory", "rankToProduct", "rankToProject", "rankToIteration", "removeRank", "getIteration", "removeRank", "removeRank", "rankToBottom", "getParent", "getId", "getId", "rankToBottom", "removeRank", "getId", "getId", "removeRank", "isStandAlone", "removeRank", "getParent", "hasChildren", "getId", "getId", "rankToBottom", "checkRankingArguments", "rankBelow", "checkRankingArguments", "rankAbove", "rankToHead", "rankToBottom", "getIteration", "isValidRankTarget", "getIteration", "getIteration", "getBacklog", "getBacklog", "getBacklog", "getIteration", "getIteration", "calculateMetrics", "getId", "calculateMetrics", "setEffortSpent", "calculateSumByStory", "retrieve", "constructStoryTO", "setMetrics", "calculateMetrics", "retrieveStoriesInIteration", "retrieveStoriesInBacklog", "getChildren", "getParent", "setParent", "getParent", "setParent", "getChildren", "clear", "deleteStoryChildren", "getTasks", "moveToBacklog", "getHourEntries", "getBacklog", "getHourEntries", "clear", "delete", "getId", "getIteration", "getTasks", "move", "getId", "setStory", "getTasks", "clear", "deleteAll", "getHourEntries", "moveToBacklog", "getHourEntries", "getBacklog", "getHourEntries", "clear", "getHourEntries", "size", "getTasks", "size", "getChildren", "size", "getBacklog", "getStories", "remove", "getIteration", "getAssignedStories", "remove", "getParent", "getChildren", "remove", "updateStoryRanks", "updateChildrenTreeRanks", "getTreeChildren", "getTreeBacklogs", "forceDelete", "getChildren", "clear", "updateIterationHistory", "getId", "updateHistory", "getId", "getChildren", "addAll", "getTreeBacklogs", "add", "getBacklog", "getIteration", "add", "getChildren", "getChildren", "addAll", "getTreeChildren", "reverse", "getChildren", "setParent", "getChildren", "clear", "getTasks", "delete", "deleteAll", "getHourEntries", "getId", "getResponsibles", "add"], "CO": ["/** {@inheritDoc} */", "/** {@inheritDoc} */", "// Store the story", "// do nothing, if iteration id and backlog id remains same", "// do nothing, if project/product id remains same and no iteration id exists", "//now, case where moved from standalone to another standalone", "// case, where story is moved to another backlog", "/** {@inheritDoc} */", "/**\n         * if story's backlog doesn't match normal iterations parent project, \n         * set the backlog to the project\n         */", "// need to remove ranks", "//persisted.setBacklog(dataItem.getBacklog());", "// Persist the tasks. ", "//storyRankBusiness.rankToHead(persisted, backlogBusiness.retrieve(iterationId)); // Rank in iteration", "//old - prevents tree view from exploding until it's fixed ", "//storyHierarchyBusiness.moveToBottom(persisted);", "//new", "/* * {@inheritDoc} */", "/* * {@inheritDoc} */", "// stories created into an iteration have the iteration assigned", "// stories created into a nested iteration have their backlog set as the nested iteration's parent", "// story created into another backlog type: product, project    ", "//move children to the parent story", "//reset parent story", "// DO NOTHING", "// moved to another project", "// remove old backlog rank only if moving to another project", "/** {@inheritDoc} */", "/** {@inheritDoc} */", "/** {@inheritDoc} */", "/** {@inheritDoc} */", "// backlog mismatch", "/* if last child of the parent story is removed the parent story may\n           need to be ranked.\n           The parent story's children's treeRanks are also updated\n        */", "//        storyRankBusiness.removeStoryRanks(story);", "// Remove children (set parent to null)", "// Remove tasks", "// Remove own hour entries"], "CODE": "package fi.hut.soberit.agilefant.business.impl;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport fi.hut.soberit.agilefant.business.BacklogBusiness;\nimport fi.hut.soberit.agilefant.business.BacklogHistoryEntryBusiness;\nimport fi.hut.soberit.agilefant.business.HourEntryBusiness;\nimport fi.hut.soberit.agilefant.business.IterationBusiness;\nimport fi.hut.soberit.agilefant.business.IterationHistoryEntryBusiness;\nimport fi.hut.soberit.agilefant.business.LabelBusiness;\nimport fi.hut.soberit.agilefant.business.StoryBusiness;\nimport fi.hut.soberit.agilefant.business.StoryHierarchyBusiness;\nimport fi.hut.soberit.agilefant.business.StoryRankBusiness;\nimport fi.hut.soberit.agilefant.business.StoryTreeIntegrityBusiness;\nimport fi.hut.soberit.agilefant.business.TaskBusiness;\nimport fi.hut.soberit.agilefant.business.TransferObjectBusiness;\nimport fi.hut.soberit.agilefant.db.HourEntryDAO;\nimport fi.hut.soberit.agilefant.db.IterationDAO;\nimport fi.hut.soberit.agilefant.db.StoryDAO;\nimport fi.hut.soberit.agilefant.db.UserDAO;\nimport fi.hut.soberit.agilefant.exception.ObjectNotFoundException;\nimport fi.hut.soberit.agilefant.exception.OperationNotPermittedException;\nimport fi.hut.soberit.agilefant.model.Backlog;\nimport fi.hut.soberit.agilefant.model.ExactEstimate;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.Product;\nimport fi.hut.soberit.agilefant.model.Project;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.StoryHourEntry;\nimport fi.hut.soberit.agilefant.model.StoryRank;\nimport fi.hut.soberit.agilefant.model.StoryState;\nimport fi.hut.soberit.agilefant.model.Task;\nimport fi.hut.soberit.agilefant.model.TaskHourEntry;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.transfer.StoryTO;\nimport fi.hut.soberit.agilefant.util.ChildHandlingChoice;\nimport fi.hut.soberit.agilefant.util.HourEntryHandlingChoice;\nimport fi.hut.soberit.agilefant.util.StoryMetrics;\nimport fi.hut.soberit.agilefant.util.TaskHandlingChoice;\n\n@Service(\"storyBusiness\")\n@Transactional\npublic class StoryBusinessImpl extends GenericBusinessImpl<Story> implements\n        StoryBusiness {\n\n    private StoryDAO storyDAO;\n    @Autowired\n    private BacklogBusiness backlogBusiness;\n    @Autowired\n    private IterationBusiness iterationBusiness;\n    @Autowired\n    private IterationDAO iterationDAO;\n    @Autowired\n    private UserDAO userDAO;\n    @Autowired\n    private HourEntryDAO hourEntryDAO;\n    @Autowired\n    private IterationHistoryEntryBusiness iterationHistoryEntryBusiness;\n    @Autowired\n    private BacklogHistoryEntryBusiness backlogHistoryEntryBusiness;\n    @Autowired\n    private StoryRankBusiness storyRankBusiness;\n    @Autowired\n    private TransferObjectBusiness transferObjectBusiness;\n    @Autowired\n    private HourEntryBusiness hourEntryBusiness;\n    @Autowired\n    private TaskBusiness taskBusiness;\n    @Autowired\n    private StoryHierarchyBusiness storyHierarchyBusiness;\n    @Autowired\n    private StoryTreeIntegrityBusiness storyTreeIntegrityBusiness;\n    @Autowired\n    private LabelBusiness labelBusiness;\n    \n    public StoryBusinessImpl() {\n        super(Story.class);\n    }\n\n    @Autowired\n    public void setStoryDAO(StoryDAO storyDAO) {\n        this.genericDAO = storyDAO;\n        this.storyDAO = storyDAO;\n    }\n\n    @Transactional(readOnly = true)\n    public Collection<Task> getStoryContents(Story story, Iteration iteration) {\n        List<Task> tasks = iterationDAO.getAllTasksForIteration(iteration);\n        Collection<Task> storyTasks = new ArrayList<Task>();\n        for (Task bli : tasks) {\n            if (bli.getStory() == story) {\n                storyTasks.add(bli);\n            }\n        }\n        return storyTasks;\n    }\n\n    /** {@inheritDoc} */\n    @Override\n    public void delete(int storyId) throws ObjectNotFoundException {\n        delete(this.retrieve(storyId));\n    }\n\n    @Override\n    public void delete(Story story) {\n        delete(story, null, null, null, null);\n    }\n    \n    \n    public void deleteAndUpdateHistory(int id,TaskHandlingChoice taskHandlingChoice,\n            HourEntryHandlingChoice storyHourEntryHandlingChoice,\n            HourEntryHandlingChoice taskHourEntryHandlingChoice,\n            ChildHandlingChoice childHandlingChoice) {\n        Story story = retrieve(id);\n        delete(story, taskHandlingChoice, storyHourEntryHandlingChoice,\n                taskHourEntryHandlingChoice, childHandlingChoice);\n        \n        Backlog storyBacklog = story.getBacklog();\n        if (storyBacklog != null) {\n            backlogHistoryEntryBusiness.updateHistory(storyBacklog.getId());\n        }\n        \n        Iteration iteration = story.getIteration();\n        if(iteration != null) {\n            iterationHistoryEntryBusiness.updateIterationHistory(iteration.getId());\n        }\n    }\n\n\n    /** {@inheritDoc} */\n    @Transactional\n    public Story store(Integer storyId, Story dataItem, Integer backlogId,\n            Set<Integer> responsibleIds, boolean tasksToDone) throws ObjectNotFoundException,\n            IllegalArgumentException {\n        if (storyId == null) {\n            throw new IllegalArgumentException(\"Story id should be given\");\n        }\n\n        Story persisted = this.retrieve(storyId);\n        \n        Iteration iteration = persisted.getIteration();\n        Backlog backlog     = persisted.getBacklog();\n\n        if (storyHasChildren(persisted) && dataItem.getIteration() != null) {\n            throw new OperationNotPermittedException(\"Can't move a story with children to an iteration\");\n        }\n        \n        setResponsibles(persisted, responsibleIds);\n        \n        checkStoriesBacklogIfAssignedToIteration(persisted);\n\n        if (haveDifferentIteration(persisted, dataItem)) {\n            fixAssignedIterationRanks(persisted, dataItem);\n        }\n        \n        populateStoryFields(persisted, dataItem);\n        \n        // Store the story\n        storyDAO.store(persisted);\n\n        updateParentStates(persisted);\n   \n        if (tasksToDone && iteration != null) {\n            for (Task t : persisted.getTasks()) {\n                taskBusiness.setTaskToDone(t);\n            }\n            iterationHistoryEntryBusiness.updateIterationHistory(iteration.getId());\n        }\n        \n        if (dataItem.getIteration() == iteration && dataItem.getBacklog() == backlog) { \n            // do nothing, if iteration id and backlog id remains same\n        } else if (dataItem.getIteration() == null && dataItem.getBacklog() == backlog) {             \n            // do nothing, if project/product id remains same and no iteration id exists\n        } else if (backlogId != null && (dataItem.getBacklog() == null || (dataItem.getBacklog() == backlog) )) {  //now, case where moved from standalone to another standalone\n            this.moveStoryAway(persisted, backlogBusiness.retrieve(backlogId));\n        } else if (dataItem.getBacklog() != backlog && dataItem.getBacklog() != null) {   // case, where story is moved to another backlog\n            this.moveStoryAway(persisted, dataItem.getBacklog());\n        }\n        \n        if (backlog != null) {\n            backlogHistoryEntryBusiness.updateHistory(backlog.getId());\n        }\n        \n        return persisted;\n    }\n    \n    /** {@inheritDoc} */\n    @Override\n    public void updateParentStates(Story story) {\n        if (story.getState() != StoryState.NOT_STARTED && story.getState() != StoryState.DEFERRED) {\n            Story parent = story.getParent();\n            while (parent != null && parent.getState() == StoryState.NOT_STARTED) {\n                parent.setState(StoryState.STARTED);\n                parent = parent.getParent();\n            }\n        }\n    }\n\n    private static void checkStoriesBacklogIfAssignedToIteration(Story persisted) {\n        if (persisted == null) {\n            return;\n        }\n        \n        Iteration storysIteration = persisted.getIteration();\n        if (storysIteration == null) {\n            return;\n        }\n        \n        Backlog storysBacklog = persisted.getBacklog();\n        \n        /**\n         * if story's backlog doesn't match normal iterations parent project, \n         * set the backlog to the project\n         */\n        if (!storysIteration.isStandAlone()) {\n            Backlog iterationsParent = storysIteration.getParent();\n            \n            if (iterationsParent != null &&  iterationsParent != storysBacklog) {\n                persisted.setBacklog(iterationsParent);\n            }\n        }\n    }\n\n    static boolean storyHasChildren(Story story) {\n        if (story == null) {\n            return false;\n        }\n        \n        List<Story> children = story.getChildren();\n        if (children != null && children.size() > 0) {\n            return true;\n        }\n        \n        return false;\n    }\n\n    \n    void fixAssignedIterationRanks(Story oldStory, Story newStory) {\n        \n        if (oldStory == null || newStory == null) {\n            return;\n        }\n\n        Iteration oldStoryIteration = oldStory.getIteration();\n        Iteration newStoryIteration = newStory.getIteration();\n        \n        if (oldStoryIteration == null) {\n            if (newStoryIteration != null) {\n                storyRankBusiness.createRank(newStory, newStoryIteration);\n            }\n            return;\n        } else {\n            storyRankBusiness.removeRank(oldStory, oldStoryIteration);\n        }\n    }\n\n    static boolean haveDifferentIteration(Story oldStory, Story newStory) {\n        if (oldStory == null && newStory == null) {\n            return false;\n        }\n        \n        if ((oldStory == null && newStory != null) || (oldStory != null && newStory == null)) {\n            return true;\n        }\n        \n        final Iteration oldIteration = oldStory.getIteration();\n        final Iteration newIteration = newStory.getIteration();\n        \n        if (oldIteration == null && newIteration == null) {\n            return false;\n        }\n        \n        if (oldIteration == null && newIteration != null) {\n            return true;\n        }\n        \n        if (oldIteration != null && newIteration == null) {\n            return false;\n        }\n        \n        if (oldIteration.getId() != newIteration.getId()) {\n            return true;\n        } else {\n            return false;\n        }\n        \n    }\n    \n    public Story updateStoryRanks(Story story) {\n        if (story.getBacklog() instanceof Product) {\n            return story;\n        }\n\n        if (!story.getChildren().isEmpty() && !story.getStoryRanks().isEmpty()) {\n            // need to remove ranks\n            storyRankBusiness.removeStoryRanks(story);\n\n        } else if (story.getChildren().isEmpty()\n                && story.getStoryRanks().isEmpty()) {\n            createStoryRanks(story, story.getBacklog());\n        }\n        return story;\n    }\n\n    private void createStoryRanks(Story story, Backlog backlog) {\n        if (!(backlog instanceof Product)) {\n            if (backlog instanceof Project) {\n                this.storyRankBusiness.rankToBottom(story, backlog);\n            } else {\n                this.storyRankBusiness.rankToHead(story, backlog);\n                if (!backlog.isStandAlone()) {\n                    this.storyRankBusiness.rankToBottom(story,\n                            backlog.getParent());\n                }\n            }\n        }\n    }\n\n    private void populateStoryFields(Story persisted, Story dataItem) {\n        persisted.setDescription(dataItem.getDescription());\n        persisted.setName(dataItem.getName());\n        persisted.setState(dataItem.getState());\n        persisted.setStoryValue(dataItem.getStoryValue());\n        persisted.setStoryPoints(dataItem.getStoryPoints());\n        persisted.setParent(dataItem.getParent());\n        persisted.setIteration(dataItem.getIteration());\n        //persisted.setBacklog(dataItem.getBacklog());\n    }\n\n    private void setResponsibles(Story story, Set<Integer> responsibleIds) {\n        if (responsibleIds != null) {\n            story.getResponsibles().clear();\n            for (Integer userId : responsibleIds) {\n                story.getResponsibles().add(userDAO.get(userId));\n            }\n        }\n    }\n    \n    public Story createStoryUnder(int referenceStoryId, int backlogId, Story data,\n            Set<Integer> responsibleIds, List<String> labelNames) {\n        Story referenceStory = this.retrieve(referenceStoryId);\n        Backlog backlog = this.getBacklogForCreatedStory(referenceStory, backlogId);\n        Story story = this.persistNewStory(data, backlog.getId(), responsibleIds);\n        \n        this.storyHierarchyBusiness.moveUnder(story, referenceStory);\n        this.labelBusiness.createStoryLabels(labelNames, story.getId());\n        \n        return story;\n    }\n\n    public Story createStorySibling(int referenceStoryId, int backlogId, Story data, \n            Set<Integer> responsibleIds, List<String> labelNames) {\n        Story referenceStory = this.retrieve(referenceStoryId);\n        Backlog backlog = this.getBacklogForCreatedStory(referenceStory, backlogId);\n        Story story = this.persistNewStory(data, backlog.getId(), responsibleIds);\n        \n        this.storyHierarchyBusiness.moveAfter(story, referenceStory);\n        this.labelBusiness.createStoryLabels(labelNames, story.getId());\n        \n        return story;\n    }\n    \n    private Backlog getBacklogForCreatedStory(Story referenceStory, int currentBacklogId) {\n        Backlog backlog;\n        Backlog referenceBacklog = referenceStory.getBacklog();\n        Backlog currentBacklog = this.backlogBusiness.retrieve(currentBacklogId);\n        \n        if (currentBacklog.getParent() != null && currentBacklog.getParent() == referenceBacklog) {\n            backlog = currentBacklog;\n        }\n        else {\n            backlog = referenceBacklog;\n        }\n        \n        return backlog;\n    }\n    \n    public Story copyStorySibling(Integer storyId, Story story)\n    {\n        story = this.retrieve(storyId);\n        Backlog backlog = null;\n        Boolean hasBacklog = story.getBacklog() != null ;\n        if (hasBacklog) {\n            backlog = this.backlogBusiness.retrieve(story.getBacklog().getId());\n            if (backlog == null) {\n                throw new ObjectNotFoundException(\"backlog.notFound\");\n            }\n        }\n        Iteration iteration = story.getIteration();\n\n        Story newStory = new Story(story);\n        newStory.setName(\"Copy of \" + newStory.getName());\n        // Persist the tasks. \n        for (Task t : newStory.getTasks())\n        {\n            t.setEffortLeft(new ExactEstimate());\n            t.setOriginalEstimate(new ExactEstimate());\n            t.setHourEntries(new HashSet<TaskHourEntry>());\n            taskBusiness.store(t);\n        }\n        if (hasBacklog) {\n            newStory.setBacklog(backlog);\n        }\n        newStory.setIteration(iteration);\n        create(newStory);\n        labelBusiness.createStoryLabelsSet(newStory.getLabels(), newStory.getId());\n        this.storyHierarchyBusiness.moveAfter(newStory, story);\n        rankStoryUnder(newStory, story,backlog );\n        return this.transferObjectBusiness.constructStoryTO(newStory);\n    }\n    \n    public Story extractUnfinishedStorySibling(Integer storyId, Story story)\n    {\n        story = this.retrieve(storyId);\n        Backlog backlog = null;\n        Boolean hasBacklog = story.getBacklog() != null ;\n        if (hasBacklog) {\n            backlog = this.backlogBusiness.retrieve(story.getBacklog().getId());\n            if (backlog == null) {\n                throw new ObjectNotFoundException(\"backlog.notFound\");\n            }\n        }\n        Iteration iteration = story.getIteration();\n        Story newStory = new Story(story, true);\n        newStory.setName(\"[The part that is not yet done - rename this story accordingly!] \" + newStory.getName());\n        story.setName(\"[The part that got done - rename this story accordingly!] \" + story.getName());\n        if (newStory.getName().length() > 255) {\n          newStory.setName(newStory.getName().substring(0, 255));\n        }\n        if (story.getName().length() > 255) {\n          story.setName(story.getName().substring(0, 255));\n        }\n\n        if (hasBacklog) {\n            newStory.setBacklog(backlog);\n        }\n        newStory.setIteration(iteration);\n        create(newStory);\n        labelBusiness.createStoryLabelsSet(newStory.getLabels(), newStory.getId());\n        this.storyHierarchyBusiness.moveAfter(newStory, story);\n        rankStoryUnder(newStory, story,backlog );\n        return this.transferObjectBusiness.constructStoryTO(newStory);\n    }\n    \n    public Story create(Story dataItem, Integer backlogId, Integer iterationId, Set<Integer> responsibleIds, List<String> labelNames) \n            throws IllegalArgumentException, ObjectNotFoundException {\n        \n        Story persisted = null;\n        if (iterationId != null && iterationId != 0) {\n            persisted = this.persistNewStory(dataItem, backlogId, iterationId, responsibleIds);\n            //storyRankBusiness.rankToHead(persisted, backlogBusiness.retrieve(iterationId)); // Rank in iteration\n        } else {\n            persisted = this.persistNewStory(dataItem, backlogId, responsibleIds);        \n        }\n\n        //old - prevents tree view from exploding until it's fixed \n        //storyHierarchyBusiness.moveToBottom(persisted);\n        storyHierarchyBusiness.moveToTop(persisted);\n        \n        //new\n        storyRankBusiness.rankToHead(persisted, backlogBusiness.retrieve(backlogId)); \n        \n        this.labelBusiness.createStoryLabels(labelNames, persisted.getId());\n        return persisted;\n    }\n    \n    \n    \n    @Transactional\n    /* * {@inheritDoc} */\n    private Story persistNewStory(Story dataItem, Integer backlogId, Set<Integer> responsibleIds) \n            throws IllegalArgumentException, ObjectNotFoundException {\n        return persistNewStory(dataItem, backlogId, null, responsibleIds);\n    }\n    \n    \n    @Transactional\n    /* * {@inheritDoc} */\n    private Story persistNewStory(Story dataItem, Integer backlogId, Integer iterationId, Set<Integer> responsibleIds) \n            throws IllegalArgumentException, ObjectNotFoundException {\n        if (dataItem == null || backlogId == null) {\n            throw new IllegalArgumentException(\n                    \"DataItem and backlogId should not be null\");\n        }\n        Backlog backlog = this.backlogBusiness.retrieve(backlogId);\n        if (backlog == null) {\n            throw new ObjectNotFoundException(\"backlog.notFound\");\n        }\n\n        Story story = new Story();\n\n        this.setResponsibles(story, responsibleIds);\n        this.populateStoryFields(story, dataItem);\n        \n        // stories created into an iteration have the iteration assigned\n        if (iterationId != null) {\n            Iteration iteration = this.iterationBusiness.retrieve(iterationId);\n            story.setIteration(iteration);\n            \n            // stories created into a nested iteration have their backlog set as the nested iteration's parent\n            final Backlog parent = iteration.getParent();\n            if (parent != null) {\n                story.setBacklog(parent);\n            } else {\n                story.setBacklog(null);\n            }\n        // story created into another backlog type: product, project    \n        } else {\n            story.setBacklog(backlog);\n        }\n        \n        int newId = create(story);\n        Story persisted = storyDAO.get(newId);\n        \n        return persisted;\n    }\n\n    @Transactional\n    @Override\n    public int create(Story story) {\n        Backlog backlog = story.getBacklog();\n        Iteration iteration = story.getIteration();\n        int newId = (Integer) storyDAO.create(story);\n        story = storyDAO.get(newId);\n\n        if (backlog != null && backlog != iteration) {\n            createStoryRanks(story, backlog);\n            if (backlog instanceof Project) {\n                backlogHistoryEntryBusiness.updateHistory(backlog.getId());\n            }\n        }\n        \n        if (iteration != null) {\n            createStoryRanks(story, iteration);\n            iterationHistoryEntryBusiness.updateIterationHistory(iteration.getId());\n        }\n\n        return newId;\n    }\n\n    @Transactional\n    public void moveStoryAway(Story story, Backlog backlog) {\n        if (!story.getChildren().isEmpty()) {\n\n            if (story.getIteration() != null && !story.getIteration().isStandAlone()) {\n                if (backlogBusiness.getParentProduct(story.getBacklog()) != backlogBusiness\n                        .getParentProduct(backlog)) {\n                    throw new OperationNotPermittedException(\n                            \"Can't move a story with children to another product\");\n                }\n            }\n        }\n        if(!storyTreeIntegrityBusiness.canStoryBeMovedToBacklog(story, backlog)) {\n            throw new OperationNotPermittedException(\"Story tree integrity violation\");\n        }\n        \n        moveStory(story, backlog);\n        updateHistories(backlog, story.getBacklog(), story.getIteration());\n    }\n    \n    public void moveStoryAndChildren(Story story, Backlog backlog) {\n        if (!story.getChildren().isEmpty() && backlog instanceof Iteration) {\n            throw new OperationNotPermittedException(\n                    \"Story containing child stories can not be moved to an iteration.\");\n        }\n\n        if (this.storyTreeIntegrityBusiness.hasParentStoryConflict(story, backlog)) {\n            Story oldParent = story.getParent();\n            story.setParent(null);\n            if(oldParent != null) {\n                oldParent.getChildren().remove(story);\n                storyHierarchyBusiness.updateChildrenTreeRanks(oldParent);\n            }\n        }\n        Set<Backlog> storyBacklogs = new HashSet<Backlog>();\n        Set<Iteration> storyIterations = new HashSet<Iteration>();\n        recursiveMoveStory(story, backlog, storyBacklogs, storyIterations);\n        for (Backlog storyBacklog : storyBacklogs) {\n            updateHistories(backlog, storyBacklog, null);\n        }\n        for (Iteration storyIteration : storyIterations) {\n            updateHistories(backlog, null, storyIteration);\n        }\n    }\n    \n    private void recursiveMoveStory(Story story, Backlog backlog, Set<Backlog> storyBacklogs, Set<Iteration> storyIterations) {\n        for(Story child : story.getChildren()) {\n            recursiveMoveStory(child, backlog, storyBacklogs, storyIterations);\n        }\n        moveStory(story, backlog);\n        if (story.getBacklog() != null) storyBacklogs.add(story.getBacklog());\n        if (story.getIteration() != null) storyIterations.add(story.getIteration());\n    }\n    \n    public void moveSingleStoryToBacklog(Story story, Backlog backlog) {\n        //move children to the parent story\n        Story parent = story.getParent();\n        List<Story> childStories = new ArrayList<Story>(story.getChildren());\n        for(Story childStory : childStories) {\n            childStory.setParent(parent);\n            if (parent != null) {\n                parent.getChildren().add(childStory);\n                \n            }\n            story.getChildren().remove(childStory);\n            storyDAO.store(childStory);\n        }\n        \n        //reset parent story\n        if(this.storyTreeIntegrityBusiness.hasParentStoryConflict(story, backlog)) {\n            story.setParent(null);\n            if(parent != null) {\n                parent.getChildren().remove(story);\n            }\n        }\n        if(parent != null) {\n            storyHierarchyBusiness.updateChildrenTreeRanks(parent);\n            Backlog parentBacklog = parent.getBacklog();\n            if (parentBacklog != null && parent.getChildren().isEmpty()) {\n                storyRankBusiness.rankToBottom(parent, parentBacklog);\n            }\n        }\n        moveStory(story, backlog);\n        updateHistories(backlog, story.getBacklog(), story.getIteration());\n    }\n\n    \n    private void moveStory(Story story, Backlog target) {\n        Backlog oldBacklog = story.getBacklog();\n        Iteration oldIteration = story.getIteration();\n\n        if (target instanceof Iteration) {\n            Iteration targetIteration = (Iteration) target;\n            story.setIteration(targetIteration);\n            targetIteration.getAssignedStories().add(story);\n            \n            if (!target.isStandAlone()) {\n                story.setBacklog(target.getParent());\n                target.getParent().getStories().add(story);\n            }\n            \n            rankToBottom(story, target, oldBacklog, oldIteration);\n            \n        } else {\n            \n            if (oldIteration != null && oldIteration.isStandAlone() && oldBacklog != target) {\n                // DO NOTHING\n            } else {\n                story.setIteration(null);\n            }\n            story.setBacklog(target);\n            target.getStories().add(story);\n            rankToBottom(story, target, oldBacklog, oldIteration);\n        }\n\n        storyDAO.store(story);\n    }\n\n\n    private void updateHistories(Backlog target, Backlog oldBacklog, Iteration oldIteration) {\n        int targetId = target.getId();\n\n        if (oldBacklog != null && oldBacklog.getId() != targetId) {\n            backlogHistoryEntryBusiness.updateHistory(oldBacklog.getId());\n        }\n\n        if (oldIteration != null) {\n            int oldIterationId = oldIteration.getId();\n            backlogHistoryEntryBusiness.updateHistory(oldIterationId);\n            iterationHistoryEntryBusiness.updateIterationHistory(oldIterationId);\n        }\n\n        backlogHistoryEntryBusiness.updateHistory(targetId);\n        if (target instanceof Iteration) {\n            iterationHistoryEntryBusiness.updateIterationHistory(targetId);\n        }\n    }\n\n    private void rankToBottom(Story story, Backlog target, Backlog oldBacklog, Backlog oldIteration) {\n        if (target == null || (oldBacklog == null && oldIteration == null)) {\n            throw new IllegalArgumentException(\"backlogs can not be null\");\n        }\n\n        if (target instanceof Product) {\n            rankToProduct(story, oldBacklog, oldIteration);\n        } else if (target instanceof Project) {\n            rankToProject(story, target, oldBacklog, oldIteration);\n        } else if (target instanceof Iteration) {\n            rankToIteration(story, target, oldBacklog, oldIteration);\n        }\n    }\n\n    private void rankToProduct(Story story, Backlog oldBacklog, Backlog oldIteration) {\n        storyRankBusiness.removeRank(story, oldBacklog);\n        if (oldIteration != null && story.getIteration() == null) {\n            storyRankBusiness.removeRank(story, oldIteration);\n        }\n    }\n\n    private void rankToIteration(Story story, Backlog target, Backlog oldBacklog, Backlog oldIteration) {\n        if (oldIteration != null) {\n            storyRankBusiness.removeRank(story, oldIteration);\n        }\n        storyRankBusiness.rankToBottom(story, target);\n\n        Backlog targetParent = target.getParent();\n        // moved to another project\n        if (targetParent != null && oldBacklog != null && targetParent.getId() != oldBacklog.getId()) {\n            storyRankBusiness.rankToBottom(story, targetParent);\n            storyRankBusiness.removeRank(story, oldBacklog);\n        }\n    }\n\n    private void rankToProject(Story story, Backlog target, Backlog oldBacklog, Backlog oldIteration) {\n        // remove old backlog rank only if moving to another project\n        if (oldBacklog != null && target.getId() != oldBacklog.getId()) {\n            storyRankBusiness.removeRank(story, oldBacklog);\n        }\n        Backlog oldIterationParent = null;\n        if (oldIteration != null && !oldIteration.isStandAlone()) {\n            storyRankBusiness.removeRank(story, oldIteration);\n            oldIterationParent = oldIteration.getParent();\n        }\n        boolean hasChildren = story.hasChildren();\n        if (!hasChildren && (oldIterationParent == null || target.getId() != oldIterationParent.getId())) {\n            storyRankBusiness.rankToBottom(story, target);\n        }\n    }\n\n    /** {@inheritDoc} */\n    @Transactional\n    public Story rankStoryUnder(Story story, Story upperStory, Backlog backlog) {\n        backlog = checkRankingArguments(story, upperStory, backlog);\n        storyRankBusiness.rankBelow(story, backlog, upperStory);\n        return story;\n    }\n\n    /** {@inheritDoc} */\n    @Transactional\n    public Story rankStoryOver(Story story, Story lowerStory, Backlog backlog) {\n        backlog = checkRankingArguments(story, lowerStory, backlog);\n        storyRankBusiness.rankAbove(story, backlog, lowerStory);\n        return story;\n    }\n    \n    /** {@inheritDoc} */\n    @Transactional\n    public Story rankStoryToTop(Story story, Backlog context) {\n        if (context == null) {\n            throw new IllegalArgumentException(\"Backlog should be given\");\n        }\n        storyRankBusiness.rankToHead(story, context);\n        return story;\n    }\n    \n    /** {@inheritDoc} */\n    @Transactional\n    public Story rankStoryToBottom(Story story, Backlog context) {\n        if (context == null) {\n            throw new IllegalArgumentException(\"Backlog should be given\");\n        }\n        storyRankBusiness.rankToBottom(story, context);\n        return story;\n    }\n\n    private Backlog checkRankingArguments(Story story, Story otherStory, Backlog backlog) {\n        if (story == null) {\n            throw new IllegalArgumentException(\"Story should be given\");\n        }\n        // backlog mismatch\n        boolean rankingProject;\n        if (backlog == null && story.getIteration() != null) {\n            rankingProject = false;\n        } else {\n            rankingProject = true;\n        }\n        \n        if (otherStory != null && !isValidRankTarget(story, otherStory, rankingProject)) {\n            throw new IllegalArgumentException(\"Invalid backlogs\");\n        }\n        if (backlog == null && story.getIteration() != null) {\n            backlog = story.getIteration();\n        } else {\n            backlog = story.getBacklog();\n        }\n        if (otherStory == null) {\n            throw new IllegalArgumentException(\"Upper story should be given\");\n        }\n        return backlog;\n    }\n\n    private boolean isValidRankTarget(Story story, Story upperStory, boolean rankingProject) {\n        \n        if (rankingProject) {\n        \n            boolean hasSameBacklog = upperStory.getBacklog() == story.getBacklog();\n            return hasSameBacklog;\n        } else {\n            return upperStory.getIteration() == story.getIteration();\n            \n        }\n    }\n\n    @Transactional(readOnly = true)\n    public StoryMetrics calculateMetrics(Story story) {\n        return this.calculateMetrics(story.getId());\n    }\n\n    @Transactional(readOnly = true)\n    public StoryMetrics calculateMetrics(int storyId) {\n        StoryMetrics metrics = storyDAO.calculateMetrics(storyId);\n        metrics.setEffortSpent(hourEntryDAO.calculateSumByStory(storyId));\n        return metrics;\n    }\n\n    @Transactional(readOnly = true)\n    public StoryTO retrieveStoryWithMetrics(int storyId) {\n        Story story = this.retrieve(storyId);\n        StoryTO storyTo = this.transferObjectBusiness.constructStoryTO(story);\n        storyTo.setMetrics(this.calculateMetrics(story));\n        return storyTo;\n    }\n\n    @Transactional(readOnly = true)\n    public List<Story> retrieveStoriesInIteration(Iteration iteration) {\n        final List<Story> stories = storyDAO.retrieveStoriesInIteration(iteration);\n        return stories;\n    }\n\n    @Transactional(readOnly = true)\n    public List<Story> retrieveStoriesInBacklog(Backlog backlog) {\n        final List<Story> stories = storyDAO.retrieveStoriesInBacklog(backlog);\n        return stories;\n    }\n    \n    public void delete(Story story, TaskHandlingChoice taskHandlingChoice,\n            HourEntryHandlingChoice storyHourEntryHandlingChoice,\n            HourEntryHandlingChoice taskHourEntryHandlingChoice,\n            ChildHandlingChoice childHandlingChoice) {\n      \n        if (childHandlingChoice != null) {\n            switch (childHandlingChoice) {\n            case MOVE:\n                for (Story child : story.getChildren()) {\n                    if (child != null && story.getParent() != null) {\n                        child.setParent(story.getParent());\n                    }\n                    else if (child != null) {\n                        child.setParent(null);\n                    }\n                }\n                story.getChildren().clear();\n                break;\n            case DELETE:\n                deleteStoryChildren(story);\n                break;\n            }\n        }\n\n        if (taskHandlingChoice != null) {\n            switch (taskHandlingChoice) {\n            case DELETE:\n                for (Task task : story.getTasks()) {\n                    if (taskHourEntryHandlingChoice == HourEntryHandlingChoice.MOVE) {\n                        hourEntryBusiness.moveToBacklog(task.getHourEntries(),\n                                story.getBacklog());\n                        task.getHourEntries().clear();\n                    }\n                    taskBusiness.delete(task.getId(), taskHourEntryHandlingChoice);\n                }\n                break;\n            case MOVE:\n                Iteration iteration = story.getIteration();\n                for (Task task : story.getTasks()) {\n                    taskBusiness.move(task, iteration.getId(), null);\n                    task.setStory(null);\n                }\n                break;\n            }\n            story.getTasks().clear();\n            \n        }\n        if (storyHourEntryHandlingChoice != null) {\n            switch (storyHourEntryHandlingChoice) {\n            case DELETE:\n                hourEntryBusiness.deleteAll(story.getHourEntries());\n                break;\n            case MOVE:\n                hourEntryBusiness.moveToBacklog(story.getHourEntries(), story\n                        .getBacklog());\n                break;\n            }\n            story.getHourEntries().clear();\n        }\n        if (story.getHourEntries().size() != 0) {\n            throw new OperationNotPermittedException(\n                    \"Story contains spent effort entries.\");\n        }\n        if (story.getTasks().size() != 0) {\n            throw new OperationNotPermittedException(\"Story contains tasks.\");\n        }\n        if (story.getChildren().size() > 0) {\n            throw new OperationNotPermittedException(\"Story has child stories.\");\n        }\n        Backlog backlog = story.getBacklog();\n        if (backlog != null) {\n            backlog.getStories().remove(story);\n        }\n        Iteration iteration = story.getIteration();\n        if(iteration != null) {\n            iteration.getAssignedStories().remove(story);\n        }\n        Story parentStory = story.getParent();\n\n        /* if last child of the parent story is removed the parent story may\n           need to be ranked.\n           The parent story's children's treeRanks are also updated\n        */\n        if (parentStory != null) {\n            parentStory.getChildren().remove(story);\n            updateStoryRanks(parentStory);\n            storyHierarchyBusiness.updateChildrenTreeRanks(parentStory);\n        }\n//        storyRankBusiness.removeStoryRanks(story);\n        super.delete(story);\n        \n    }\n    \n    private void deleteStoryChildren(Story story) {\n        List<Story> allChildren = getTreeChildren(story);\n        Set<Backlog> allBacklogs = getTreeBacklogs(story);\n        \n        for (Story child : allChildren) {\n            forceDelete(child);\n        }\n        story.getChildren().clear();\n        \n        for (Backlog blog : allBacklogs) {\n            if (blog instanceof Iteration) {\n                iterationHistoryEntryBusiness.updateIterationHistory(blog.getId());\n            } else {\n                backlogHistoryEntryBusiness.updateHistory(blog.getId());\n            }\n        }\n    }\n    \n    \n    private Set<Backlog> getTreeBacklogs(Story parent) {\n        Set<Backlog> backlogs = new HashSet<Backlog>();\n        \n        for (Story child : parent.getChildren()) {\n            backlogs.addAll(getTreeBacklogs(child));\n        }\n        \n        backlogs.add(parent.getBacklog());\n        Iteration iteration = parent.getIteration();\n        if(iteration != null) {\n            backlogs.add(iteration);\n        }\n        return backlogs;\n    }\n    \n    private List<Story> getTreeChildren(Story story) {\n        List<Story> children = new ArrayList<Story>(story.getChildren());\n        for (Story child : story.getChildren()) {\n            children.addAll(getTreeChildren(child));\n        }\n        Collections.reverse(children);\n        return children;\n    }\n    \n    public void forceDelete(Story story) {\n        // Remove children (set parent to null)\n        for (Story s : story.getChildren()) {\n            s.setParent(null);\n        }\n        story.getChildren().clear();\n        \n        // Remove tasks\n        Set<Task> tasks = new HashSet<Task>(story.getTasks());\n        for (Task t : tasks) {\n            taskBusiness.delete(t, HourEntryHandlingChoice.DELETE);\n        }\n        \n        // Remove own hour entries\n        hourEntryBusiness.deleteAll(story.getHourEntries());\n        \n        super.delete(story.getId());\n    }\n    \n    public void setUserDAO(UserDAO userDAO) {\n        this.userDAO = userDAO;\n    }\n\n    public void setIterationDAO(IterationDAO iterationDAO) {\n        this.iterationDAO = iterationDAO;\n    }\n\n    public void setBacklogHistoryEntryBusiness(\n            BacklogHistoryEntryBusiness backlogHistoryEntryBusiness) {\n        this.backlogHistoryEntryBusiness = backlogHistoryEntryBusiness;\n    }\n\n    public void setIterationHistoryEntryBusiness(\n            IterationHistoryEntryBusiness iterationHistoryEntryBusiness) {\n        this.iterationHistoryEntryBusiness = iterationHistoryEntryBusiness;\n    }\n\n    public void setHourEntryDAO(HourEntryDAO hourEntryDAO) {\n        this.hourEntryDAO = hourEntryDAO;\n    }\n\n    public void setBacklogBusiness(BacklogBusiness backlogBusiness) {\n        this.backlogBusiness = backlogBusiness;\n    }\n\n    public void setTransferObjectBusiness(\n            TransferObjectBusiness transferObjectBusiness) {\n        this.transferObjectBusiness = transferObjectBusiness;\n    }\n\n    public void setHourEntryBusiness(HourEntryBusiness hourEntryBusiness) {\n        this.hourEntryBusiness = hourEntryBusiness;\n    }\n\n    public void setTaskBusiness(TaskBusiness taskBusiness) {\n        this.taskBusiness = taskBusiness;\n    }\n\n    public void setStoryRankBusiness(StoryRankBusiness storyRankBusiness) {\n        this.storyRankBusiness = storyRankBusiness;\n    }\n    \n    public void setStoryHierarchyBusiness(StoryHierarchyBusiness storyHierarchyBusiness) {\n        this.storyHierarchyBusiness = storyHierarchyBusiness;\n    }\n    \n    public void addResponsible(Story story, User user) {\n        story.getResponsibles().add(user);\n    }\n    \n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\impl\\\\StoryFilterBusinessImpl.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["StoryFilterBusinessImpl"], "MN": ["filterStories", "filterStoryList", "filterStory", "filterByState", "filterByName", "filterByBacklogName", "filterByIterationName", "filterByLabels", "filterByResponsibleInitials"], "PN": ["stories", "storyFilters", "stories", "filters", "story", "storyFilters", "story", "storyFilters", "story", "storyFilters", "story", "backlogName", "story", "iterationName", "story", "labelName", "story", "responsibleInitials"], "SCS_VariableDeclaration": ["List", "Story", "List", "StoryTO", "List", "Story", "String", "String", "String", "String", "Label", "String", "User"], "SCS_VariableDeclarator": ["filteredStories", "story", "filteredChildren", "storyTO", "result", "story", "name", "lowerCaseName", "lowerCaseName", "lowerCaseName", "label", "lowerCaseName", "user"], "SCS_MemberReference": ["stories", "story", "storyFilters", "story", "storyFilters", "story", "filteredChildren", "storyTO", "filteredStories", "stories", "story", "filters", "story", "result", "story", "storyFilters", "name", "story", "storyFilters", "story", "name", "story", "name", "story", "name", "story", "name", "states", "name", "ENGLISH", "ENGLISH", "lowerCaseName", "lowerCaseName", "lowerCaseName", "lowerCaseName"], "SCS_ClassReference": ["", "story", "filteredChildren", "", "storyTO", "filteredStories", "", "result", "", "", "", "", "", "", "storyFilters.states", "storyFilters.states", "story", "story", "story", null, null, "name", "story", "backlogName", "story", null, null, null, "story", "iterationName", "story", null, null, null, "labelName", "story", "label", null, "responsibleInitials", "story", "user", "user", null, null], "SCS_MethodInvocation": ["filterStories", "getChildren", "isEmpty", "filterStory", "setChildren", "add", "filterStory", "add", "filterByState", "filterByName", "filterByLabels", "filterByBacklogName", "filterByIterationName", "filterByResponsibleInitials", "isEmpty", "contains", "getState", "getName", "getName", "toLowerCase", "contains", "toLowerCase", "getBacklog", "toLowerCase", "getBacklog", "getName", "toLowerCase", "contains", "getIteration", "toLowerCase", "getIteration", "getName", "toLowerCase", "contains", "toLowerCase", "getLabels", "getName", "contains", "toLowerCase", "getResponsibles", "getInitials", "getInitials", "toLowerCase", "contains"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.business.impl;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Locale;\n\nimport org.springframework.stereotype.Service;\n\nimport fi.hut.soberit.agilefant.business.StoryFilterBusiness;\nimport fi.hut.soberit.agilefant.model.Label;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.transfer.StoryTO;\nimport fi.hut.soberit.agilefant.util.StoryFilters;\n\n@Service(\"storyFilterBusiness\")\npublic class StoryFilterBusinessImpl implements StoryFilterBusiness {\n\n    public List<Story> filterStories(List<Story> stories,\n            StoryFilters storyFilters) {\n        List<Story> filteredStories = new ArrayList<Story>();\n        for (Story story : stories) {\n            if (story == null) {\n                continue;\n            }\n            List<Story> filteredChildren = filterStories(story.getChildren(),\n                    storyFilters);\n            if (!filteredChildren.isEmpty() || filterStory(story, storyFilters)) {\n                StoryTO storyTO = new StoryTO(story);\n                storyTO.setChildren(filteredChildren);\n                filteredStories.add(storyTO);\n            }\n        }\n        return filteredStories;\n    }\n\n    public List<Story> filterStoryList(List<Story> stories, StoryFilters filters) {\n        List<Story> result = new ArrayList<Story>();\n        for(Story story : stories) {\n            if(filterStory(story, filters)) {\n                result.add(story);\n            }\n        }\n        return result;\n    }\n    public boolean filterStory(Story story, StoryFilters storyFilters) {\n        if (!filterByState(story, storyFilters)) {\n            return false;\n        }\n        if(storyFilters.name == null) {\n            return true;\n        }\n        if (filterByName(story, storyFilters) || filterByLabels(story, storyFilters.name) || filterByBacklogName(story, storyFilters.name) || \n        \t\tfilterByIterationName(story, storyFilters.name) || filterByResponsibleInitials(story, storyFilters.name)) {\n            return true;\n        }\n        return false;\n    }\n\n    public boolean filterByState(Story story, StoryFilters storyFilters) {\n        if(storyFilters.states == null || storyFilters.states.isEmpty()) {\n            return true;\n        }\n        return storyFilters.states.contains(story.getState());\n    }\n\n    public boolean filterByName(Story story, StoryFilters storyFilters) {\n        String name = storyFilters.name;\n        if(story.getName() == null) {\n            return false;\n        }\n        return story.getName().toLowerCase(Locale.ENGLISH).contains(\n                name.toLowerCase(Locale.ENGLISH));\n    }\n    \n    public boolean filterByBacklogName(Story story, String backlogName) {\n        if(story.getBacklog() == null) {\n            return false;\n        }\n        String lowerCaseName = backlogName.toLowerCase();\n        return story.getBacklog().getName().toLowerCase().contains(lowerCaseName);    \n    }\n    \n    public boolean filterByIterationName(Story story, String iterationName) {\n        if(story.getIteration() == null) {\n            return false;\n        }\n        String lowerCaseName = iterationName .toLowerCase();\n        return story.getIteration().getName().toLowerCase().contains(lowerCaseName);\n    }\n\n    public boolean filterByLabels(Story story, String labelName) {\n        String lowerCaseName = labelName.toLowerCase();\n        for (Label label : story.getLabels()) {\n            if(label.getName().contains(lowerCaseName)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    \n    public boolean filterByResponsibleInitials(Story story, String responsibleInitials) {\n        String lowerCaseName = responsibleInitials.toLowerCase();\n        for (User user : story.getResponsibles()) {\n            if(user.getInitials() != null && user.getInitials().toLowerCase().contains(lowerCaseName)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\impl\\\\StoryHierarchyBusinessImpl.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["StoryHierarchyBusinessImpl"], "AN": ["storyHierarchyDAO", "storyBusiness", "backlogBusiness", "storyFilterBusiness", "storyTreeIntegrityBusiness"], "SCS_VariableDeclarator": ["storyHierarchyDAO", "storyBusiness", "backlogBusiness", "storyFilterBusiness", "storyTreeIntegrityBusiness", "oldParent", "oldParent", "parent", "tmpList", "oldParent", "parent", "tmpList", "rankBacklog", "rootParentId", "maxRank", "parent", "firstSibling", "prod", "stories", "tmpList", "product", "currentRank", "iter", "tmp", "stories", "stories", "story", "results", "addedTos", "story", "result", "parent", "alreadyAdded", "childList", "to", "newRank", "tmpStory", "returned", "transfer", "old", "iterator", "minutes", "entry", "task", "entry", "effortLeft", "task", "metrics", "deferred", "child", "childMetrics"], "MN": ["retrieveProjectLeafStories", "moveUnder", "moveAfter", "moveBefore", "moveToBottom", "moveToTop", "retrieveChildListAndMoveStory", "updateBacklogRanks", "updateTreeRanks", "retrieveProductRootStories", "retrieveProjectRootStories", "sortStoriesByTreeRank", "replaceStoryNodesWithRoots", "updateChildrenTreeRanks", "recurseHierarchy", "storyPointsAsLong", "storyHoursAsLong", "storyEffortLeftAsLong", "calculateStoryTreeMetrics"], "PN": ["project", "story", "reference", "story", "reference", "story", "reference", "story", "story", "story", "oldParent", "parent", "story", "tmpList", "productId", "storyFilters", "projectId", "storyFilters", "stories", "stories", "story", "story", "story", "story", "story", "story"], "SCS_ClassReference": ["storyHierarchyDAO", "story", null, "oldParent", null, "reference", null, "story", "", "", "", "reference", "", "oldParent", "story", "reference", "", "tmpList", "tmpList", "tmpList", "tmpList", "tmpList", "", "parent", "", "story", "reference", "", "tmpList", "tmpList", "tmpList", "", "parent", "", "story", "story", "backlogBusiness", "storyHierarchyDAO", "story", "story", "backlogBusiness", "story", "story", null, "stories", "stories", null, null, "prod", null, "parent", null, null, null, "story", "oldParent", null, "", "", "oldParent", "tmpList", "parent", "story", "backlogBusiness", "story", "tmpList", null, "product", "tmpList", "tmpList", "storyBusiness", "tmpList", "iter", "iter", "tmp", "tmp", "storyHierarchyDAO", "storyFilterBusiness", "storyHierarchyDAO", "storyFilterBusiness", "", "", "e", "Collections", "story", null, "", "story", "stories", "result", "result", "addedTos", "parent", "alreadyAdded", null, "childList", "alreadyAdded", "childList", "alreadyAdded", "addedTos", "to", "to", "Arrays", "results", "story", "tmpStory", "iterator", "transfer", "Arrays", "transfer", "story", "story", "story", "entry", "story", "task", "entry", "Math", "story", "task", "task", null, "task", null, "Math", "story", null, "story", "", "story", "", "", "", "story", "child", "story", null, "child", "", "story", "", "story", ""], "SCS_MethodInvocation": ["retrieveProjectLeafStories", "getParent", "checkChangeParentStoryAndThrow", "getChildren", "remove", "getChildren", "add", "setParent", "updateBacklogRanks", "updateBacklogRanks", "updateTreeRanks", "getChildren", "updateTreeRanks", "getChildren", "getParent", "getParent", "retrieveChildListAndMoveStory", "size", "getLast", "add", "indexOf", "addLast", "updateTreeRanks", "setChildren", "updateBacklogRanks", "getParent", "getParent", "retrieveChildListAndMoveStory", "indexOf", "add", "indexOf", "updateTreeRanks", "setChildren", "updateBacklogRanks", "getBacklog", "getIteration", "getRootParentId", "getMaximumTreeRank", "setTreeRank", "getParent", "getParentProduct", "getBacklog", "getIteration", "getAssignedStories", "size", "iterator", "next", "retrieveProductRootStories", "getId", "get", "getChildren", "get", "moveBefore", "checkChangeParentStoryAndThrow", "setParent", "getChildren", "remove", "updateBacklogRanks", "updateTreeRanks", "getChildren", "addAll", "getChildren", "getBacklog", "getParentProduct", "getBacklog", "addAll", "retrieveProductRootStories", "getId", "contains", "remove", "updateStoryRanks", "iterator", "hasNext", "next", "getTreeRank", "setTreeRank", "retrieveProductRootStories", "filterStories", "retrieveProjectRootStories", "filterStories", "replaceStoryNodesWithRoots", "sortStoriesByTreeRank", "printStackTrace", "sort", "getChildren", "size", "sortStoriesByTreeRank", "getChildren", "size", "getParent", "getParent", "get", "getId", "getChildren", "size", "addAll", "getChildren", "add", "setChildren", "put", "getId", "setChildren", "asList", "add", "getChildren", "setTreeRank", "getParent", "setChildren", "asList", "setChildren", "getStoryPoints", "getStoryPoints", "getHourEntries", "getMinutesSpent", "getTasks", "getHourEntries", "getMinutesSpent", "round", "getTasks", "getEffortLeft", "getEffortLeft", "getMinorUnits", "getEffortLeft", "doubleValue", "round", "getChildren", "isEmpty", "getState", "storyPointsAsLong", "getState", "storyPointsAsLong", "storyHoursAsLong", "storyEffortLeftAsLong", "getChildren", "getId", "getId", "calculateStoryTreeMetrics", "getState", "storyPointsAsLong", "getState", "storyPointsAsLong", "getState", "storyPointsAsLong"], "SCS_MemberReference": ["project", "storyTreeIntegrityBusiness", "story", "reference", "oldParent", "story", "story", "reference", "oldParent", "reference", "oldParent", "story", "oldParent", "parent", "reference", "reference", "story", "story", "tmpList", "parent", "tmpList", "parent", "oldParent", "parent", "story", "oldParent", "parent", "tmpList", "reference", "reference", "story", "tmpList", "parent", "tmpList", "parent", "oldParent", "parent", "rankBacklog", "rankBacklog", "rankBacklog", "rootParentId", "maxRank", "parent", "prod", "firstSibling", "firstSibling", "firstSibling", "firstSibling", "firstSibling", "story", "firstSibling", "parent", "oldParent", "parent", "storyTreeIntegrityBusiness", "story", "parent", "parent", "oldParent", "story", "oldParent", "parent", "story", "story", "tmpList", "story", "story", "currentRank", "currentRank", "currentRank", "productId", "storyFilters", "stories", "storyFilters", "stories", "projectId", "storyFilters", "stories", "stories", "storyFilters", "stories", "stories", "stories", "stories", "stories", "stories", "stories", "story", "alreadyAdded", "result", "childList", "result", "parent", "to", "result", "result", "to", "result", "result", "results", "story", "newRank", "story", "iterator", "iterator", "transfer", "iterator", "old", "old", "old", "transfer", "returned", "transfer", "returned", "minutes", "minutes", "minutes", "effortLeft", "effortLeft", "DEFERRED", "deferred", "leafPoints", "story", "DONE", "doneLeafPoints", "story", "spentEffort", "story", "effortLeft", "story", "child", "deferred", "estimatedDonePoints", "estimatedDonePoints", "estimatedPoints", "estimatedPoints", "leafPoints", "leafPoints", "doneLeafPoints", "doneLeafPoints", "spentEffort", "spentEffort", "effortLeft", "effortLeft", "story", "estimatedPoints", "deferred", "estimatedPoints", "story", "DONE", "estimatedDonePoints", "story", "metrics"], "SCS_VariableDeclaration": ["Story", "Story", "Story", "LinkedList", "Story", "Story", "LinkedList", "Backlog", "int", "int", "Story", "Story", "Product", "Set", "LinkedList", "Product", "int", "Iterator", "Story", "List", "List", "Story", "List", "Map", "Story", "Story", "Story", "Story", "List", "StoryTO", "int", "Story", "StoryTO", "StoryTO", "StoryTO", "Story", "double", "StoryHourEntry", "Task", "TaskHourEntry", "double", "Task", "StoryTreeBranchMetrics", "StoryState", "Story", "StoryTreeBranchMetrics"], "CO": ["//Product prod = backlogBusiness.getParentProduct(story.getBacklog());", "// parent -> not root story, move to top of parent", "//standalone iteration", "// root story", "/*\n        Product prod = backlogBusiness.getParentProduct(story.getBacklog());\n        List<Story> stories = retrieveProductRootStories(prod.getId(), null);        \n        this.moveBefore(story, stories.get(0));\n        */", "/* if (story.getIteration()!=null && story.getIteration().isStandAlone()) {\n            tmpList.addAll(storyBusiness.retrieveStoriesInIteration(story.getIteration()));\n            if (tmpList.contains(story)) {\n                tmpList.remove(story);\n            }\n            return tmpList;\n        }*/", "// account for root stories", "// AND standalone iterations", "/** {@inheritDoc} */", "/** {@inheritDoc} */"], "CODE": "package fi.hut.soberit.agilefant.business.impl;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.support.PropertyComparator;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport fi.hut.soberit.agilefant.business.BacklogBusiness;\nimport fi.hut.soberit.agilefant.business.StoryBusiness;\nimport fi.hut.soberit.agilefant.business.StoryFilterBusiness;\nimport fi.hut.soberit.agilefant.business.StoryHierarchyBusiness;\nimport fi.hut.soberit.agilefant.business.StoryTreeIntegrityBusiness;\nimport fi.hut.soberit.agilefant.db.StoryHierarchyDAO;\nimport fi.hut.soberit.agilefant.model.Backlog;\nimport fi.hut.soberit.agilefant.model.Product;\nimport fi.hut.soberit.agilefant.model.Project;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.StoryHourEntry;\nimport fi.hut.soberit.agilefant.model.StoryState;\nimport fi.hut.soberit.agilefant.model.Task;\nimport fi.hut.soberit.agilefant.model.TaskHourEntry;\nimport fi.hut.soberit.agilefant.transfer.StoryTO;\nimport fi.hut.soberit.agilefant.transfer.StoryTreeBranchMetrics;\nimport fi.hut.soberit.agilefant.util.StoryFilters;\n\n@Service(\"storyHierarchyBusiness\")\npublic class StoryHierarchyBusinessImpl implements StoryHierarchyBusiness {\n\n    @Autowired\n    private StoryHierarchyDAO storyHierarchyDAO;\n\n    @Autowired\n    private StoryBusiness storyBusiness;\n\n    @Autowired\n    private BacklogBusiness backlogBusiness;\n\n    @Autowired\n    private StoryFilterBusiness storyFilterBusiness;\n    \n    @Autowired\n    private StoryTreeIntegrityBusiness storyTreeIntegrityBusiness;\n   \n\n    @Transactional(readOnly = true)\n    public List<Story> retrieveProjectLeafStories(Project project) {\n        return storyHierarchyDAO.retrieveProjectLeafStories(project);\n    }\n\n    @Transactional\n    public void moveUnder(Story story, Story reference) {\n        Story oldParent = story.getParent();\n        this.storyTreeIntegrityBusiness.checkChangeParentStoryAndThrow(story,\n                reference);\n        if (oldParent != null) {\n            oldParent.getChildren().remove(story);\n        }\n        reference.getChildren().add(0, story);\n        story.setParent(reference);\n\n        updateBacklogRanks(oldParent);\n        updateBacklogRanks(reference);\n\n        updateTreeRanks(reference.getChildren());\n        if (oldParent != null) {\n            updateTreeRanks(oldParent.getChildren());\n        }\n\n    }\n\n    @Transactional\n    public void moveAfter(Story story, Story reference) {\n        Story oldParent = story.getParent();\n        Story parent = reference.getParent();\n\n        LinkedList<Story> tmpList = retrieveChildListAndMoveStory(story,\n                oldParent, parent);\n\n        if (tmpList.size() != 0 && tmpList.getLast() != reference) {\n            tmpList.add(tmpList.indexOf(reference) + 1, story);\n        } else {\n            tmpList.addLast(story);\n        }\n\n        updateTreeRanks(tmpList);\n        if (parent != null) {\n            parent.setChildren(tmpList);\n            if (parent != oldParent) {\n                updateBacklogRanks(parent);\n            }\n        }\n\n    }\n\n    \n    @Transactional\n    public void moveBefore(Story story, Story reference) {        \n        Story oldParent = story.getParent();\n        Story parent = reference.getParent();\n        LinkedList<Story> tmpList = retrieveChildListAndMoveStory(story,\n                oldParent, parent);\n\n        if (tmpList != null && tmpList.indexOf(reference) >= 0) {\n            tmpList.add(tmpList.indexOf(reference), story);\n\n            updateTreeRanks(tmpList);\n            if (parent != null) {\n                parent.setChildren(tmpList);\n                if (parent != oldParent) {\n                    updateBacklogRanks(parent);\n                }\n            }\n        }\n    }\n\n    @Transactional\n    public void moveToBottom(Story story) {\n        //Product prod = backlogBusiness.getParentProduct(story.getBacklog());\n        Backlog rankBacklog = story.getBacklog();\n        if (rankBacklog == null) {\n            rankBacklog = story.getIteration();\n        }\n        int rootParentId = backlogBusiness.getRootParentId(rankBacklog);\n        int maxRank = storyHierarchyDAO.getMaximumTreeRank(rootParentId);\n        story.setTreeRank(maxRank + 1);\n    }\n    \n    @Transactional\n    public void moveToTop(Story story) {\n        // parent -> not root story, move to top of parent\n        Story parent = story.getParent();\n        Story firstSibling = null;\n        if (parent == null) {             \n            Product prod = backlogBusiness.getParentProduct(story.getBacklog());  \n            if(prod == null){  //standalone iteration\n                Set<Story> stories = story.getIteration().getAssignedStories();\n                if(stories.size() == 0){\n                    firstSibling = null;\n                } else {\n                    firstSibling = stories.iterator().next();\n                }\n            } else {\n                firstSibling = this.retrieveProductRootStories(prod.getId(), null).get(0);\n            }\n        } else {            \n            firstSibling = parent.getChildren().get(0);\n        }\n        \n        if (firstSibling != null) {\n            this.moveBefore(story, firstSibling);\n        }\n        // root story\n        /*\n        Product prod = backlogBusiness.getParentProduct(story.getBacklog());\n        List<Story> stories = retrieveProductRootStories(prod.getId(), null);        \n        this.moveBefore(story, stories.get(0));\n        */\n    }\n    \n    \n    private LinkedList<Story> retrieveChildListAndMoveStory(Story story,\n            Story oldParent, Story parent) {\n        LinkedList<Story> tmpList = new LinkedList<Story>();\n       /* if (story.getIteration()!=null && story.getIteration().isStandAlone()) {\n            tmpList.addAll(storyBusiness.retrieveStoriesInIteration(story.getIteration()));\n            if (tmpList.contains(story)) {\n                tmpList.remove(story);\n            }\n            return tmpList;\n        }*/\n        if (parent != oldParent) {\n            if(parent != null) {\n                this.storyTreeIntegrityBusiness.checkChangeParentStoryAndThrow(story, parent);\n            }\n            story.setParent(parent);\n            if (oldParent != null) {\n                oldParent.getChildren().remove(story);\n                updateBacklogRanks(oldParent);\n                updateTreeRanks(oldParent.getChildren());\n            }\n        }\n        if (parent != null) {  // account for root stories\n            tmpList.addAll(parent.getChildren());\n        } else if (story.getBacklog() != null) { // AND standalone iterations\n            Product product = backlogBusiness.getParentProduct(story\n                    .getBacklog());\n            tmpList.addAll(this.retrieveProductRootStories(product.getId(),\n                    null));\n        }\n        if (tmpList.contains(story)) {\n            tmpList.remove(story);\n        }\n        return tmpList;\n    }\n\n    private void updateBacklogRanks(Story story) {\n        if (story != null) {\n            storyBusiness.updateStoryRanks(story);\n        }\n\n    }\n\n    private void updateTreeRanks(List<Story> tmpList) {\n        int currentRank = 0;\n        for (Iterator<Story> iter = tmpList.iterator(); iter.hasNext(); currentRank++) {\n            Story tmp = iter.next();\n            if (tmp.getTreeRank() != currentRank) {\n                tmp.setTreeRank(currentRank);\n            }\n        }\n    }\n\n    @Transactional(readOnly = true)\n    public List<Story> retrieveProductRootStories(int productId,\n            StoryFilters storyFilters) {\n        List<Story> stories = storyHierarchyDAO\n                .retrieveProductRootStories(productId);\n        if (storyFilters != null) {\n            return storyFilterBusiness.filterStories(stories, storyFilters);\n        } else {\n            return stories;\n        }\n    }\n\n    @Transactional(readOnly = true)\n    public List<Story> retrieveProjectRootStories(int projectId,\n            StoryFilters storyFilters) {\n        List<Story> stories = storyHierarchyDAO\n                .retrieveProjectRootStories(projectId);\n        if (storyFilters != null) {\n            stories = storyFilterBusiness.filterStories(stories, storyFilters);\n        }\n        try {\n            stories = replaceStoryNodesWithRoots(stories);\n            sortStoriesByTreeRank(stories);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return stories;\n    }\n    \n    private void sortStoriesByTreeRank(List<Story> stories) {\n        Collections.sort(stories, new PropertyComparator(\"treeRank\", true, true));\n        for (Story story: stories) {\n            if (story.getChildren().size() > 0) {\n                sortStoriesByTreeRank(story.getChildren());\n            }\n        }\n    }\n\n    public List<Story> replaceStoryNodesWithRoots(List<Story> stories) {\n        List<Story> results = new ArrayList<Story>(stories.size());\n        Map<Integer, Story> addedTos = new HashMap<Integer, Story>();\n        for (Story story : stories) {\n            Story result = story;\n            while (result.getParent() != null) {\n                Story parent = result.getParent();\n                Story alreadyAdded = addedTos.get(parent.getId());\n                if (alreadyAdded != null) {\n                    List<Story> childList = new ArrayList<Story>(alreadyAdded\n                            .getChildren().size() + 1);\n                    childList.addAll(alreadyAdded.getChildren());\n                    childList.add(result);\n                    alreadyAdded.setChildren(childList);\n                    result = null;\n                    break;\n                } else {\n                    StoryTO to = new StoryTO(parent);\n                    addedTos.put(to.getId(), to);\n                    to.setChildren(Arrays.asList(result));\n                    result = to;\n                }\n            }\n            if (result != null) {\n                results.add(result);\n            }\n        }\n        return results;\n    }\n    \n    \n    @Transactional\n    /** {@inheritDoc} */\n    public void updateChildrenTreeRanks(Story story) {\n        if (story == null) {\n            throw new IllegalArgumentException(\"No null stories allowed\");\n        }\n        int newRank = 0;\n        for (Story tmpStory : story.getChildren()) {\n            tmpStory.setTreeRank(newRank++);\n        }\n    } \n\n    \n    /** {@inheritDoc} */\n    @Transactional(readOnly = true)\n    public StoryTO recurseHierarchy(Story story) {\n        StoryTO returned = null;\n        StoryTO transfer = null;\n        StoryTO old = null;\n        \n        for (Story iterator = story; iterator != null; iterator = iterator.getParent()) {\n            transfer = new StoryTO(iterator);\n            \n            if (old != null) {\n                transfer.setChildren(new ArrayList<Story>(Arrays.asList(old)));\n            }\n            else {\n                transfer.setChildren(new ArrayList<Story>());\n            }\n            \n            old = transfer;\n            returned = transfer;\n        }\n        return returned;\n    }\n    \n    private long storyPointsAsLong(Story story) {\n        if(story.getStoryPoints() == null) {\n            return 0L;\n        }\n        return story.getStoryPoints();\n    }\n    \n    private long storyHoursAsLong(Story story) {\n        double minutes = 0;\n        for (StoryHourEntry entry: story.getHourEntries()) {\n        \tminutes += entry.getMinutesSpent();\n        }\n        for (Task task: story.getTasks()) {\n        \tfor (TaskHourEntry entry: task.getHourEntries()) {\n        \t\tminutes += entry.getMinutesSpent();\n        \t}\n        }\n    \treturn Math.round(minutes / 60.0);\n    }\n    \n    private long storyEffortLeftAsLong(Story story) {\n        double effortLeft = 0;\n        for (Task task: story.getTasks()) {\n        \tif (task.getEffortLeft() != null && task.getEffortLeft().getMinorUnits() != null) {\n                effortLeft += task.getEffortLeft().doubleValue();\n        \t}\n        }\n    \treturn Math.round(effortLeft / 60.0);\n    }\n    \n    public StoryTreeBranchMetrics calculateStoryTreeMetrics(Story story) {\n        StoryTreeBranchMetrics metrics = new StoryTreeBranchMetrics();\n        \n        StoryState deferred = StoryState.DEFERRED;\n        \n        if(story.getChildren().isEmpty()) {\n            if(story.getState() != deferred) {\n                metrics.leafPoints = storyPointsAsLong(story);\n                if(story.getState() == StoryState.DONE) {\n                    metrics.doneLeafPoints = storyPointsAsLong(story);\n                }\n            }\n        }\n        \n        metrics.spentEffort = storyHoursAsLong(story);\n        metrics.effortLeft = storyEffortLeftAsLong(story);\n        \n        for(Story child : story.getChildren()) {\n            if (child.getId() == story.getId()) {\n                continue;\n            }\n            StoryTreeBranchMetrics childMetrics = this.calculateStoryTreeMetrics(child);\n            if(child.getState() != deferred) {\n                metrics.estimatedDonePoints += childMetrics.estimatedDonePoints;\n                metrics.estimatedPoints += childMetrics.estimatedPoints;\n                metrics.leafPoints += childMetrics.leafPoints;\n                metrics.doneLeafPoints += childMetrics.doneLeafPoints;\n            }\n            metrics.spentEffort += childMetrics.spentEffort;\n            metrics.effortLeft += childMetrics.effortLeft;\n        }\n        \n        if(storyPointsAsLong(story) > metrics.estimatedPoints) {\n            if(story.getState() != deferred) {\n                metrics.estimatedPoints = storyPointsAsLong(story);\n                if(story.getState() == StoryState.DONE) {\n                    metrics.estimatedDonePoints = storyPointsAsLong(story);\n                }\n            }\n        }\n        \n        return metrics;\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\impl\\\\StoryRankBusinessImpl.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["StoryRankBusinessImpl"], "AN": ["storyRankDAO", "backlogBusiness"], "SCS_VariableDeclarator": ["storyRankDAO", "backlogBusiness", "rank", "nextRank", "rank", "id", "ranks", "nextIndex", "ranks", "previousIndex", "currentRankNum", "currentRank", "ranks", "ranks", "ranks", "rank", "prevRank", "ret", "current", "story", "storyto", "ranks", "stories", "rank", "rank", "rank", "rank", "rank", "ranks", "tailRank", "rank", "ranks", "topRank"], "MN": ["getRankByBacklog", "rankAbove", "createRank", "rankAbove", "rankBelow", "updateContextRanks", "prepareRankingContext", "retrieveLinkedList", "skipRank", "rankBelow", "retrieveByRankingContext", "retrieveByRankingContext", "removeRank", "removeStoryRanks", "removeBacklogRanks", "rankToBottom", "rankToHead", "setStoryRankDAO"], "PN": ["story", "backlog", "story", "context", "upper", "story", "context", "rank", "next", "rank", "previous", "ranks", "rank", "rank", "rank", "story", "context", "upper", "backlogId", "backlog", "story", "context", "story", "backlog", "story", "context", "story", "backlog", "storyRankDAO"], "SCS_ClassReference": ["storyRankDAO", null, null, "", "", "rank", "rank", null, null, "", "ranks", "ranks", "ranks", "", "", "ranks", "ranks", "ranks", "ranks", "", "currentRank", "", "ranks", "ranks", "ranks", null, "rank", "", "ranks", "", null, null, "", "", null, null, "storyto", "ret", null, "stories", "rank", null, "", null, "story", "", null, "story", null, "backlog", "rank", null, null, null, "backlog", null, null, "ranks", null, "ranks", "", "rank", "tailRank", "", null, "ranks", null, "ranks", "", "rank", ""], "SCS_MethodInvocation": ["retrieveByBacklogAndStory", "retrieveByBacklogAndStory", "retrieveByBacklogAndStory", "createRank", "rankAbove", "setStory", "setBacklog", "create", "get", "prepareRankingContext", "indexOf", "addLast", "add", "updateContextRanks", "prepareRankingContext", "indexOf", "size", "addLast", "add", "updateContextRanks", "setRank", "retrieveLinkedList", "contains", "remove", "addAll", "retrieveRanksByBacklog", "getBacklog", "retrieveLinkedList", "remove", "updateContextRanks", "retrieveByBacklogAndStory", "retrieveByBacklogAndStory", "createRank", "rankBelow", "retrieveByRankingContext", "retrieve", "setRank", "add", "retrieveRanksByBacklog", "add", "getStory", "retrieveByBacklogAndStory", "skipRank", "remove", "getStoryRanks", "skipRank", "remove", "getStoryRanks", "clear", "getStoryRanks", "getStory", "getStoryRanks", "remove", "remove", "getStoryRanks", "clear", "retrieveByBacklogAndStory", "addAll", "retrieveRanksByBacklog", "getLast", "createRank", "getRank", "getRank", "rankBelow", "retrieveByBacklogAndStory", "addAll", "retrieveRanksByBacklog", "getFirst", "createRank", "getRank", "rankAbove"], "SCS_MemberReference": ["backlog", "story", "context", "storyRankDAO", "context", "story", "storyRankDAO", "context", "upper", "rank", "rank", "story", "context", "nextRank", "rank", "nextRank", "context", "rank", "story", "context", "storyRankDAO", "rank", "rank", "storyRankDAO", "id", "rank", "rank", "next", "nextIndex", "rank", "nextIndex", "rank", "ranks", "rank", "previous", "previousIndex", "previousIndex", "rank", "previousIndex", "rank", "ranks", "ranks", "currentRankNum", "rank", "rank", "rank", "ranks", "storyRankDAO", "ranks", "rank", "rank", "ranks", "context", "storyRankDAO", "context", "story", "storyRankDAO", "context", "upper", "rank", "rank", "story", "context", "prevRank", "rank", "prevRank", "backlogBusiness", "backlogId", "story", "current", "storyto", "ret", "storyRankDAO", "backlog", "ranks", "stories", "context", "storyRankDAO", "context", "story", "rank", "rank", "storyRankDAO", "rank", "rank", "storyRankDAO", "rank", "rank", "storyRankDAO", "rank", "context", "storyRankDAO", "context", "story", "storyRankDAO", "context", "tailRank", "rank", "rank", "story", "context", "tailRank", "tailRank", "rank", "tailRank", "backlog", "storyRankDAO", "backlog", "story", "storyRankDAO", "backlog", "topRank", "rank", "rank", "story", "backlog", "topRank", "topRank", "rank", "topRank", "rank", "topRank", "storyRankDAO", "storyRankDAO"], "SCS_VariableDeclaration": ["StoryRank", "StoryRank", "StoryRank", "int", "LinkedList", "int", "LinkedList", "int", "int", "StoryRank", "LinkedList", "LinkedList", "LinkedList", "StoryRank", "StoryRank", "List", "int", "Story", "StoryTO", "List", "List", "StoryRank", "StoryRank", "StoryRank", "StoryRank", "StoryRank", "LinkedList", "StoryRank", "StoryRank", "LinkedList", "StoryRank"], "CO": ["/** {@inheritDoc} */", "/**\n     * {@inheritDoc}\n     */", "/**\n     * Create a rank for a story in the given context.\n     */", "/**\n     * Remove item from the linked list.\n     */", "/**\n     * {@inheritDoc}\n     */", "/**\n     * {@inheritDoc}\n     */", "/**\n     * {@inheritDoc}\n     */", "/**\n     * {@inheritDoc}\n     */", "/**\n     * {@inheritDoc}\n     */", "/**\n     * {@inheritDoc}\n     */", "/**\n     * {@inheritDoc}\n     */", "//story is already at the bottom", "//story is already at top"], "CODE": "package fi.hut.soberit.agilefant.business.impl;\n\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Set;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport fi.hut.soberit.agilefant.business.BacklogBusiness;\nimport fi.hut.soberit.agilefant.business.StoryRankBusiness;\nimport fi.hut.soberit.agilefant.db.StoryRankDAO;\nimport fi.hut.soberit.agilefant.model.Backlog;\nimport fi.hut.soberit.agilefant.model.Product;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.StoryRank;\nimport fi.hut.soberit.agilefant.transfer.StoryTO;\n\n@Service(\"storyRankBusiness\")\n@Transactional\npublic class StoryRankBusinessImpl implements StoryRankBusiness {\n\n    @Autowired\n    private StoryRankDAO storyRankDAO;\n    @Autowired\n    private BacklogBusiness backlogBusiness;\n\n    \n    /** {@inheritDoc} */\n    public StoryRank getRankByBacklog(Story story, Backlog backlog) {\n        return storyRankDAO.retrieveByBacklogAndStory(backlog, story);\n    }\n    \n    /**\n     * {@inheritDoc}\n     */\n    public void rankAbove(Story story, Backlog context, Story upper) {\n        if(context instanceof Product) {\n            return;\n        }\n        \n        StoryRank rank = this.storyRankDAO.retrieveByBacklogAndStory(context,\n                story);\n        StoryRank nextRank = this.storyRankDAO.retrieveByBacklogAndStory(\n                context, upper);\n        if (rank == null) {\n            rank = createRank(story, context);\n        }\n        if (nextRank != null) {\n            rankAbove(rank, nextRank);\n        }\n    }\n\n    /**\n     * Create a rank for a story in the given context.\n     */\n    public StoryRank createRank(Story story, Backlog context) {\n        if(context instanceof Product) {\n            return null;\n        }\n        \n        StoryRank rank;\n        rank = new StoryRank();\n        rank.setStory(story);\n        rank.setBacklog(context);\n        int id = (Integer) this.storyRankDAO.create(rank);\n        rank = this.storyRankDAO.get(id);\n        return rank;\n    }\n\n    private void rankAbove(StoryRank rank, StoryRank next) {\n        LinkedList<StoryRank> ranks = prepareRankingContext(rank);\n\n        int nextIndex = ranks.indexOf(next);\n        if (nextIndex == -1) {\n            ranks.addLast(rank);\n        } else {\n            ranks.add(nextIndex, rank);\n        }\n\n        updateContextRanks(ranks);\n    }\n\n    private void rankBelow(StoryRank rank, StoryRank previous) {\n        LinkedList<StoryRank> ranks = prepareRankingContext(rank);\n\n        int previousIndex = ranks.indexOf(previous);\n        if (previousIndex == -1 || previousIndex == ranks.size() - 1) {\n            ranks.addLast(rank);\n        } else {\n            ranks.add(previousIndex + 1, rank);\n        }\n\n        updateContextRanks(ranks);\n    }\n\n    private void updateContextRanks(LinkedList<StoryRank> ranks) {\n        int currentRankNum = 0;\n        for (StoryRank currentRank : ranks) {\n            currentRank.setRank(currentRankNum++);\n        }\n    }\n\n    private LinkedList<StoryRank> prepareRankingContext(StoryRank rank) {\n        LinkedList<StoryRank> ranks = retrieveLinkedList(rank);\n        if (ranks.contains(rank)) {\n            ranks.remove(rank);\n        }\n        return ranks;\n    }\n\n    private LinkedList<StoryRank> retrieveLinkedList(StoryRank rank) {\n        LinkedList<StoryRank> ranks = new LinkedList<StoryRank>();\n        ranks.addAll(this.storyRankDAO.retrieveRanksByBacklog(rank.getBacklog()));\n        return ranks;\n    }\n\n    /**\n     * Remove item from the linked list.\n     */\n\n    private void skipRank(StoryRank rank) {\n        LinkedList<StoryRank> ranks = retrieveLinkedList(rank);\n        ranks.remove(rank);\n        updateContextRanks(ranks);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public void rankBelow(Story story, Backlog context, Story upper) {\n        if(context instanceof Product) {\n            return;\n        }\n        \n        StoryRank rank = this.storyRankDAO.retrieveByBacklogAndStory(context,\n                story);\n        StoryRank prevRank = this.storyRankDAO.retrieveByBacklogAndStory(\n                context, upper);\n        if (rank == null) {\n            rank = createRank(story, context);\n        }\n        if (prevRank != null) {\n            rankBelow(rank, prevRank);\n        }\n\n    }\n    \n    /**\n     * {@inheritDoc}\n     */\n    public List<StoryTO> retrieveByRankingContext(int backlogId) {\n        List<StoryTO> ret = new ArrayList<StoryTO>();\n        int current = 0;\n        for(Story story : this.retrieveByRankingContext(this.backlogBusiness.retrieve(backlogId))) {\n            StoryTO storyto = new StoryTO(story);\n            storyto.setRank(current++);\n            ret.add(storyto);\n        }\n        return ret;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public List<Story> retrieveByRankingContext(Backlog backlog) {\n        List<StoryRank> ranks = this.storyRankDAO.retrieveRanksByBacklog(backlog);\n        List<Story> stories = new ArrayList<Story>();\n        for(StoryRank rank : ranks ) {\n            stories.add(rank.getStory());\n        }\n        return stories;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public void removeRank(Story story, Backlog context) {\n        if (context == null) {\n            return;\n        }\n        StoryRank rank = this.storyRankDAO.retrieveByBacklogAndStory(context,story);\n        if (rank != null) {\n            skipRank(rank);\n            this.storyRankDAO.remove(rank);\n        }\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public void removeStoryRanks(Story story) {\n        for (StoryRank rank : story.getStoryRanks()) {\n            skipRank(rank);\n            this.storyRankDAO.remove(rank);\n        }\n        story.getStoryRanks().clear();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public void removeBacklogRanks(Backlog backlog) {\n        for (StoryRank rank : backlog.getStoryRanks()) {\n            rank.getStory().getStoryRanks().remove(rank);\n            this.storyRankDAO.remove(rank);\n        }\n        backlog.getStoryRanks().clear();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public void rankToBottom(Story story, Backlog context) {\n        if(context instanceof Product) {\n            return;\n        }\n        \n        StoryRank rank = this.storyRankDAO.retrieveByBacklogAndStory(context, story);\n        LinkedList<StoryRank> ranks = new LinkedList<StoryRank>();\n        ranks.addAll(this.storyRankDAO.retrieveRanksByBacklog(context));\n        StoryRank tailRank = null;\n        try {\n            tailRank = ranks.getLast();\n        } catch (Exception e) {\n\n        }\n        if (rank == null) {\n            rank = createRank(story, context);\n        }\n        \n        if(tailRank != null && (rank.getRank() == tailRank.getRank())){\n            //story is already at the bottom\n            return;\n        }\n        \n        if (tailRank != null) {\n            rankBelow(rank, tailRank);\n        }\n\n    }\n\n    public void rankToHead(Story story, Backlog backlog) {\n        if(backlog instanceof Product) {\n            return;\n        }\n        \n        StoryRank rank = this.storyRankDAO.retrieveByBacklogAndStory(backlog, story);\n        \n        LinkedList<StoryRank> ranks = new LinkedList<StoryRank>();\n        ranks.addAll(this.storyRankDAO.retrieveRanksByBacklog(backlog));\n        \n        StoryRank topRank = null;\n        \n        try {\n            topRank = ranks.getFirst();\n        } catch (Exception e) {\n        }\n        \n        if (rank == null) {\n            rank = createRank(story, backlog);\n        } \n        else if (rank.getRank() == 0 && (topRank == null || topRank == rank)) {\n            //story is already at top\n            return;\n        }\n        \n        if (topRank != null) {\n            rankAbove(rank, topRank);\n        }\n    }\n\n    public void setStoryRankDAO(StoryRankDAO storyRankDAO) {\n        this.storyRankDAO = storyRankDAO;\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\impl\\\\StoryTreeIntegrityBusinessImpl.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["StoryTreeIntegrityBusinessImpl"], "AN": ["backlogBusiness"], "SCS_VariableDeclarator": ["backlogBusiness", "messages", "allowed", "allowed", "child", "child", "parent", "allowedBacklogsForParents", "parent", "messages", "messages", "allowedBacklogs", "children", "containsChanges", "currentStory", "story", "child", "message", "message", "node", "lastChanged", "previous", "currentParent", "cnode", "message", "messages", "parentsBacklog", "newBacklogsParent", "newBacklogsRoot", "targetProduct", "currentProduct", "targetProject", "parent", "parentStory", "project", "product", "parentsBacklog", "parentsBacklogId", "differentProduct", "newBacklogsParent", "parentInDifferentBranch"], "MN": ["checkChangeBacklog", "getAllowedBacklogsForChildren", "checkChildBacklogRule", "checkMoveToIterationRule", "checkParentDepthRule", "checkParentDifferentProjectRule", "checkChangeParentStoryAndThrow", "checkChangeParentStory", "getAllowedIterationforChildren", "checkTargetBacklogInWrongBranch", "checkTargetParentInIterationRule", "recurseChangedStoryTreeChildren", "hasNodeChanged", "generateChangedStoryTree", "canStoryBeMovedToBacklog", "checkParentStoryConflict", "originalAndTargetProductEqual", "parentStoryInDifferentBranch", "hasParentStoryConflict"], "PN": ["story", "newBacklog", "newBacklog", "parent", "messages", "allowedBacklogs", "message", "story", "newBacklog", "messages", "story", "newBacklog", "messages", "story", "newBacklog", "messages", "story", "newParent", "story", "newParent", "story", "allowedBacklogs", "story", "newParent", "messages", "allowedBacklogs", "story", "newParent", "messages", "movedStory", "messages", "movedStory", "messages", "movedStory", "messages", "story", "newBacklog", "story", "newBacklog", "messages", "original", "target", "story", "newBacklog", "story", "newBacklog"], "SCS_VariableDeclaration": ["List", "Set", "Set", "Backlog", "Story", "Story", "Set", "Story", "List", "List", "Set", "List", "boolean", "MoveStoryNode", "Story", "MoveStoryNode", "StoryTreeIntegrityMessage", "StoryTreeIntegrityMessage", "MoveStoryNode", "MoveStoryNode", "Story", "MoveStoryNode", "StoryTreeIntegrityMessage", "List", "Backlog", "Backlog", "Backlog", "Backlog", "Backlog", "Project", "Story", "Story", "Backlog", "Backlog", "Backlog", "int", "boolean", "Backlog", "boolean"], "SCS_ClassReference": ["story", null, "", "", "", "story", "", "", "", "allowed", "newBacklog", "allowed", "", "parent", "allowedBacklogs", "child", "allowedBacklogs", "child", "messages", "", "messages", "story", "parent", "parent", "messages", "story", "newBacklog", "allowedBacklogsForParents", "newBacklog", "allowedBacklogsForParents", "newBacklog", null, "allowedBacklogsForParents", "allowedBacklogsForParents", "newBacklog", "story", "parent", "allowedBacklogsForParents", "parent", "messages", null, "messages", "", "newParent", "", "newParent", "", "", "", "story", "story", null, "allowedBacklogs", "story", "story", "messages", "allowedBacklogs", "story", "allowedBacklogs", "story", "messages", "newParent", "messages", "currentStory", "movedStory", "", "child", "children", "currentStory", "", "currentStory", "currentStory", "currentStory", "message", "message", "", "movedStory", "currentParent", "cnode", "", "cnode", "cnode", "cnode", "cnode", "Arrays", null, "messages", "story", "", "story", "newBacklog", "story", null, "newBacklog", "parentsBacklog", "newBacklogsParent", "newBacklogsParent", "parentsBacklog", "newBacklogsRoot", "messages", "story", "backlogBusiness", "backlogBusiness", "newBacklog", "newBacklog", "story", "parent", "parent", "parent", "story", "newBacklog", "newBacklog", "project", "parentStory", "parentsBacklog", "project", "product", "story", "story", null, "story", "newBacklog", "newBacklog", "parentStory", "", "story", "", "story"], "SCS_MethodInvocation": ["getChildren", "isEmpty", "checkMoveToIterationRule", "getAllowedBacklogsForChildren", "checkChildBacklogRule", "getParent", "checkParentDepthRule", "checkParentDifferentProjectRule", "checkParentStoryConflict", "add", "getChildren", "addAll", "getAllowedBacklogsForChildren", "getChildren", "contains", "getBacklog", "contains", "getIteration", "add", "checkChildBacklogRule", "add", "getParent", "getParent", "getBacklog", "add", "getBacklog", "isStandAlone", "add", "getParent", "add", "getParent", "getParent", "add", "add", "getParent", "getParent", "getParent", "contains", "getBacklog", "add", "checkChangeParentStory", "isEmpty", "checkTargetParentInIterationRule", "getBacklog", "getAllowedBacklogsForChildren", "getBacklog", "getAllowedIterationforChildren", "checkTargetBacklogInWrongBranch", "checkChildBacklogRule", "getIteration", "getIteration", "isStandAlone", "add", "getIteration", "getBacklog", "add", "contains", "getBacklog", "contains", "getIteration", "add", "getIteration", "add", "setStory", "getChildren", "recurseChangedStoryTreeChildren", "isContainsChanges", "add", "setChildren", "hasNodeChanged", "setChanged", "setMessage", "setContainsChanges", "getSource", "getTarget", "recurseChangedStoryTreeChildren", "getParent", "getParent", "setStory", "hasNodeChanged", "setChanged", "setMessage", "setContainsChanges", "setChildren", "asList", "checkChangeBacklog", "isEmpty", "getParent", "originalAndTargetProductEqual", "getBacklog", "isStandAlone", "getParent", "getBacklog", "getParent", "getId", "getId", "getParent", "getId", "getId", "add", "getParent", "getParentProduct", "getParentProduct", "isStandAlone", "getParent", "getParent", "getParent", "getBacklog", "getBacklog", "getParent", "isStandAlone", "getParent", "getParent", "getBacklog", "getId", "getId", "getId", "getIteration", "getIteration", "isStandAlone", "getIteration", "getParent", "isStandAlone", "getBacklog", "originalAndTargetProductEqual", "getBacklog", "parentStoryInDifferentBranch", "getParent"], "SCS_MemberReference": ["story", "newBacklog", "messages", "newBacklog", "story", "messages", "allowed", "CHILD_IN_WRONG_BRANCH", "story", "newBacklog", "messages", "story", "newBacklog", "messages", "story", "newBacklog", "messages", "messages", "newBacklog", "child", "allowed", "parent", "child", "message", "child", "messages", "allowedBacklogs", "message", "newBacklog", "story", "MOVE_TO_ITERATION_HAS_CHILDREN", "newBacklog", "parent", "parent", "story", "parent", "PARENT_DEEPER_IN_HIERARCHY", "newBacklog", "newBacklog", "newBacklog", "newBacklog", "parent", "parent", "story", "parent", "PARENT_IN_WRONG_BRANCH", "story", "newParent", "messages", "story", "newParent", "messages", "story", "allowedBacklogs", "story", "newParent", "messages", "allowedBacklogs", "story", "messages", "allowedBacklogs", "TARGET_PARENT_IN_WRONG_BRANCH", "messages", "allowedBacklogs", "story", "newParent", "TARGET_PARENT_DEEPER_IN_HIERARCHY", "story", "newParent", "TARGET_PARENT_IN_WRONG_BRANCH", "story", "newParent", "TARGET_PARENT_IN_ITERATION", "movedStory", "story", "messages", "containsChanges", "child", "children", "movedStory", "messages", "message", "containsChanges", "message", "containsChanges", "currentStory", "messages", "movedStory", "movedStory", "message", "node", "movedStory", "messages", "node", "node", "currentParent", "currentParent", "currentParent", "currentParent", "messages", "message", "message", "lastChanged", "cnode", "previous", "previous", "cnode", "lastChanged", "story", "newBacklog", "newBacklog", "messages", "parentsBacklog", "newBacklogsParent", "messages", "newBacklogsRoot", "messages", "story", "PARENT_IN_WRONG_PRODUCT", "messages", "target", "original", "currentProduct", "original", "targetProduct", "currentProduct", "newBacklog", "targetProject", "newBacklog", "newBacklog", "targetProject", "parent", "parent", "targetProject", "parentStory", "newBacklog", "newBacklog", "parentsBacklog", "parentsBacklogId", "parentsBacklogId", "newBacklog", "newBacklogsParent", "differentProduct", "differentProduct", "differentProduct", "newBacklog", "story", "newBacklog", "differentProduct", "parentInDifferentBranch"], "CO": ["/** {@inheritDoc} */", "// If story has children", "/*\n             * Can't move to iteration, if the story has children.\n             */", "/*\n             * Can't move to different branch, if the story has children.\n             */", "// If story has a parent", "/*\n             * Can't move to product, if the story has parent in project.\n             * Note!\n             * Parents can't reside in iterations\n             */", "/*\n             * Can't move to another branch, if the story's parent is not on \n             * product level.\n             */", "/*\n             * Check if the parent story restricts moving \n             */", "/*\n     * CHANGING PARENT STORY\n     */", "/** {@inheritDoc} */", "/*\n         * Target parent story can't reside in an iteration\n         */", "/*\n         * Check that all the children are allowed to move to target branch.\n         */", "/**\n     * Add story's iteration (in case of standalone) to the allowedBacklog list in order to\n     * make possible to create stories in standalone iteration if there is stories which backlog\n     * refers to project or product.\n     *  \n     * @param story\n     * @param allowedBacklogs\n     * @return \n     */", "// 1. lookup children", "// 2. lookup parents", "// OK to move to standalone", "// OK to move to backlog tree which is the same tree as the parent story's backlog", "/**\n     * A conflict exists if the old and new backlogs are under different products.\n     * If moving story from standalone iteration, original backlog will be null. That's why it\n     * shoud be checked.\n     */", "/**\n     * A conflict exists if the story being moved has a parent story in project backlog\n     * and that project backlog is not the backlog where the story is being moved to.\n     */", "/**\n         * Moving to standalone iteration: OK\n         */", "/**\n         * Normal iteration & parent's backlog is in same tree\n         */", "// moving from standalone iteration", "// moving to parents backlog", "// moving to other product"], "CODE": "package fi.hut.soberit.agilefant.business.impl;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport fi.hut.soberit.agilefant.business.BacklogBusiness;\nimport fi.hut.soberit.agilefant.business.StoryTreeIntegrityBusiness;\nimport fi.hut.soberit.agilefant.exception.StoryTreeIntegrityViolationException;\nimport fi.hut.soberit.agilefant.model.Backlog;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.Product;\nimport fi.hut.soberit.agilefant.model.Project;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.transfer.MoveStoryNode;\nimport fi.hut.soberit.agilefant.util.StoryHierarchyIntegrityViolationType;\nimport fi.hut.soberit.agilefant.util.StoryTreeIntegrityMessage;\n\n\n@Service(\"storyTreeIntegrityBusiness\")\n@Transactional(readOnly = true)\npublic class StoryTreeIntegrityBusinessImpl implements StoryTreeIntegrityBusiness {\n    \n    @Autowired\n    private BacklogBusiness backlogBusiness;\n\n    /** {@inheritDoc} */\n    public List<StoryTreeIntegrityMessage> checkChangeBacklog(\n            Story story, Backlog newBacklog) {\n        List<StoryTreeIntegrityMessage> messages = new ArrayList<StoryTreeIntegrityMessage>();\n        \n        // If story has children\n        if (!story.getChildren().isEmpty()) {\n            /*\n             * Can't move to iteration, if the story has children.\n             */\n            checkMoveToIterationRule(story, newBacklog, messages);\n            \n            /*\n             * Can't move to different branch, if the story has children.\n             */\n            Set<Backlog> allowed = getAllowedBacklogsForChildren(newBacklog); \n            checkChildBacklogRule(story, messages, allowed, StoryHierarchyIntegrityViolationType.CHILD_IN_WRONG_BRANCH);\n        }\n        \n        // If story has a parent\n        if (story.getParent() != null) {\n            /*\n             * Can't move to product, if the story has parent in project.\n             * Note!\n             * Parents can't reside in iterations\n             */\n            checkParentDepthRule(story, newBacklog, messages);\n            \n            /*\n             * Can't move to another branch, if the story's parent is not on \n             * product level.\n             */\n            checkParentDifferentProjectRule(story, newBacklog, messages);\n            \n            /*\n             * Check if the parent story restricts moving \n             */\n            checkParentStoryConflict(story, newBacklog, messages);\n        }\n        \n        return messages;\n    }\n    \n    private Set<Backlog> getAllowedBacklogsForChildren(Backlog newBacklog) {\n        Set<Backlog> allowed = new HashSet<Backlog>();\n        \n        allowed.add(newBacklog);\n        \n        for (Backlog child : newBacklog.getChildren()) {\n            allowed.addAll(getAllowedBacklogsForChildren(child));\n        }\n        \n        return allowed;\n    }\n\n    static void checkChildBacklogRule(Story parent, List<StoryTreeIntegrityMessage> messages,\n            Set<Backlog> allowedBacklogs, StoryHierarchyIntegrityViolationType message) {\n        \n        for (Story child : parent.getChildren()) {\n            \n            if (!allowedBacklogs.contains(child.getBacklog()) && !allowedBacklogs.contains(child.getIteration())) {\n                messages.add(new StoryTreeIntegrityMessage(parent, child, message));\n            }\n            \n            checkChildBacklogRule(child, messages, allowedBacklogs, message);\n        }\n        \n    }\n    \n    static void checkMoveToIterationRule(Story story, Backlog newBacklog,\n            List<StoryTreeIntegrityMessage> messages) {\n        if (newBacklog instanceof Iteration) {\n            messages.add(new StoryTreeIntegrityMessage(story, null,\n                    StoryHierarchyIntegrityViolationType.MOVE_TO_ITERATION_HAS_CHILDREN));\n        }\n    }\n    \n    static void checkParentDepthRule(Story story, Backlog newBacklog,\n            List<StoryTreeIntegrityMessage> messages) {\n        \n        if (!(newBacklog instanceof Product)) {\n            return;\n        }\n        \n        for (Story parent = story.getParent(); parent != null; parent = parent.getParent()) {\n            if (parent.getBacklog() instanceof Project) {\n                messages.add(new StoryTreeIntegrityMessage(story, parent,\n                        StoryHierarchyIntegrityViolationType.PARENT_DEEPER_IN_HIERARCHY));\n            }\n        }\n    }\n    \n    \n    static void checkParentDifferentProjectRule(Story story, Backlog newBacklog,\n            List<StoryTreeIntegrityMessage> messages) {\n        if (story.getBacklog() instanceof Product || newBacklog instanceof Product) {\n            return;\n        }\n        Set<Backlog> allowedBacklogsForParents = new HashSet<Backlog>();\n        \n        if (newBacklog instanceof Iteration) {\n            \n            if (newBacklog.isStandAlone()) {\n                return;\n            }\n            \n            allowedBacklogsForParents.add(newBacklog.getParent());\n            allowedBacklogsForParents.add(newBacklog.getParent().getParent());\n        }\n        else if (newBacklog instanceof Project) {\n            allowedBacklogsForParents.add(newBacklog);\n            allowedBacklogsForParents.add(newBacklog.getParent());\n        }\n        \n        for (Story parent = story.getParent(); parent != null; parent = parent.getParent()) {\n           if (!allowedBacklogsForParents.contains(parent.getBacklog())) {\n                messages.add(new StoryTreeIntegrityMessage(story, parent,\n                        StoryHierarchyIntegrityViolationType.PARENT_IN_WRONG_BRANCH));\n           }\n        }\n        \n    }\n    \n    \n    \n    \n    /*\n     * CHANGING PARENT STORY\n     */\n    \n    \n    public void checkChangeParentStoryAndThrow(Story story, Story newParent) throws StoryTreeIntegrityViolationException {\n        List<StoryTreeIntegrityMessage> messages = this.checkChangeParentStory(story, newParent);\n        if(!messages.isEmpty()) {\n            throw new StoryTreeIntegrityViolationException(messages);\n        }\n    }\n    \n    /** {@inheritDoc} */\n    public List<StoryTreeIntegrityMessage> checkChangeParentStory(\n            Story story, Story newParent) {\n        List<StoryTreeIntegrityMessage> messages = new ArrayList<StoryTreeIntegrityMessage>();\n        \n        /*\n         * Target parent story can't reside in an iteration\n         */\n        checkTargetParentInIterationRule(story, newParent, messages);\n        \n        /*\n         * Check that all the children are allowed to move to target branch.\n         */\n        if (newParent.getBacklog() instanceof Project) {\n            Set<Backlog> allowedBacklogs = getAllowedBacklogsForChildren(newParent.getBacklog());\n            getAllowedIterationforChildren(story, allowedBacklogs);\n            \n            checkTargetBacklogInWrongBranch(story, newParent, messages, allowedBacklogs);\n            \n            checkChildBacklogRule(story, messages, allowedBacklogs, StoryHierarchyIntegrityViolationType.TARGET_PARENT_IN_WRONG_BRANCH);\n        }\n        \n        \n        return messages;\n    }\n\n    /**\n     * Add story's iteration (in case of standalone) to the allowedBacklog list in order to\n     * make possible to create stories in standalone iteration if there is stories which backlog\n     * refers to project or product.\n     *  \n     * @param story\n     * @param allowedBacklogs\n     * @return \n     */\n    private Set<Backlog> getAllowedIterationforChildren(Story story, Set<Backlog> allowedBacklogs) {\n        if (story.getIteration()!=null && story.getIteration().isStandAlone())\n            allowedBacklogs.add((Backlog)story.getIteration());\n        return allowedBacklogs;\n    }\n\n    private void checkTargetBacklogInWrongBranch(Story story, Story newParent,\n            List<StoryTreeIntegrityMessage> messages,\n            Set<Backlog> allowedBacklogs) {\n        if (story.getBacklog() instanceof Product) {\n            messages.add(new StoryTreeIntegrityMessage(story, newParent, StoryHierarchyIntegrityViolationType.TARGET_PARENT_DEEPER_IN_HIERARCHY));\n        }\n        else if (!allowedBacklogs.contains(story.getBacklog()) && !allowedBacklogs.contains(story.getIteration())) {\n            messages.add(new StoryTreeIntegrityMessage(story, newParent, StoryHierarchyIntegrityViolationType.TARGET_PARENT_IN_WRONG_BRANCH));\n        }\n    }\n\n    private void checkTargetParentInIterationRule(Story story, Story newParent,\n            List<StoryTreeIntegrityMessage> messages) {\n        if (newParent.getIteration() != null) {\n            messages.add(new StoryTreeIntegrityMessage(story, newParent,\n                    StoryHierarchyIntegrityViolationType.TARGET_PARENT_IN_ITERATION));\n        }\n    }\n\n    private MoveStoryNode recurseChangedStoryTreeChildren(Story movedStory, List<StoryTreeIntegrityMessage> messages) {\n        List<MoveStoryNode> children = new ArrayList<MoveStoryNode>();\n        boolean containsChanges = false;\n        \n        MoveStoryNode currentStory = new MoveStoryNode();\n        currentStory.setStory(movedStory);\n        \n        for(Story story : movedStory.getChildren()) {\n            MoveStoryNode child = recurseChangedStoryTreeChildren(story, messages);\n            if(child.isContainsChanges()) {\n                containsChanges = true;\n            }\n            children.add(child);\n        }\n        currentStory.setChildren(children);\n        \n        StoryTreeIntegrityMessage message = hasNodeChanged(movedStory, messages);\n        if(message != null) {\n            containsChanges = true;\n            currentStory.setChanged(true);\n            currentStory.setMessage(message);\n        }\n        currentStory.setContainsChanges(containsChanges);\n        return currentStory;\n    }\n\n    private StoryTreeIntegrityMessage hasNodeChanged(Story movedStory,\n            List<StoryTreeIntegrityMessage> messages) {\n        for(StoryTreeIntegrityMessage message : messages) {\n            if(message.getSource() == movedStory || message.getTarget() == movedStory) {\n                return message;\n            }\n        }\n        return null;\n    }\n    \n    public MoveStoryNode generateChangedStoryTree(Story movedStory,\n            List<StoryTreeIntegrityMessage> messages) {\n        MoveStoryNode node;\n        // 1. lookup children\n        node = recurseChangedStoryTreeChildren(movedStory, messages);\n        // 2. lookup parents\n    \n        MoveStoryNode lastChanged = node, previous = node;\n        for (Story currentParent = movedStory.getParent(); currentParent != null;\n            currentParent = currentParent.getParent()) {\n            \n            MoveStoryNode cnode = new MoveStoryNode();\n            cnode.setStory(currentParent);\n            \n            StoryTreeIntegrityMessage message = hasNodeChanged(currentParent, messages);\n            if(message != null) {\n                cnode.setChanged(true);\n                cnode.setMessage(message);\n                lastChanged = cnode;\n            }\n            cnode.setContainsChanges(true);\n            cnode.setChildren(Arrays.asList(previous));\n            previous = cnode;\n        }\n        return lastChanged;\n    }\n\n    public boolean canStoryBeMovedToBacklog(Story story, Backlog newBacklog) {\n        List<StoryTreeIntegrityMessage> messages = this.checkChangeBacklog(story, newBacklog);\n        return messages.isEmpty();\n    }\n    \n    \n    private List<StoryTreeIntegrityMessage> checkParentStoryConflict(\n            Story story, Backlog newBacklog, List<StoryTreeIntegrityMessage> messages) {\n        \n        if (story.getParent() != null && originalAndTargetProductEqual(story.getBacklog(), newBacklog)) {\n            // OK to move to standalone\n            if (newBacklog.isStandAlone()) {\n                return messages;\n            }\n            \n            // OK to move to backlog tree which is the same tree as the parent story's backlog\n            Backlog parentsBacklog = story.getParent().getBacklog();\n            Backlog newBacklogsParent = newBacklog.getParent();\n            if (parentsBacklog != null && newBacklogsParent != null) {\n                if (parentsBacklog.getId() == newBacklogsParent.getId()) {\n                    return messages;\n                }\n                \n                Backlog newBacklogsRoot = newBacklogsParent.getParent();\n                if (newBacklogsRoot != null && parentsBacklog.getId() == newBacklogsRoot.getId()) {\n                    return messages;\n                }\n            }\n            \n            \n            messages.add(new StoryTreeIntegrityMessage(\n                            story,\n                            story.getParent(),\n                            StoryHierarchyIntegrityViolationType.PARENT_IN_WRONG_PRODUCT));\n        }\n        return messages;\n    }\n    \n    /**\n     * A conflict exists if the old and new backlogs are under different products.\n     * If moving story from standalone iteration, original backlog will be null. That's why it\n     * shoud be checked.\n     */\n    protected boolean originalAndTargetProductEqual(Backlog original, Backlog target) {\n        Backlog targetProduct = backlogBusiness.getParentProduct(target);\n        Backlog currentProduct = null;\n        if (original != null) {\n            currentProduct = backlogBusiness.getParentProduct(original); \n        }\n        return targetProduct != currentProduct;\n    }\n    \n    /**\n     * A conflict exists if the story being moved has a parent story in project backlog\n     * and that project backlog is not the backlog where the story is being moved to.\n     */\n    protected boolean parentStoryInDifferentBranch(Story story, Backlog newBacklog) {\n        Project targetProject = null;\n        if(newBacklog instanceof Project) {\n            targetProject = (Project)newBacklog;\n        } else if (newBacklog instanceof Iteration) {\n            if (!newBacklog.isStandAlone()) {\n                targetProject = (Project)newBacklog.getParent();\n            }\n        }\n        for(Story parent = story.getParent(); parent != null; parent = parent.getParent()) {\n            if(parent.getBacklog() instanceof Project && parent.getBacklog() != targetProject) {\n                return true;\n            }\n        }\n        return false;\n    }\n    \n    public boolean hasParentStoryConflict(Story story, Backlog newBacklog) {\n        Story parentStory = story.getParent();\n        if (parentStory == null) {\n            return false;\n        }\n        \n        /**\n         * Moving to standalone iteration: OK\n         */\n        if (newBacklog != null && newBacklog.isStandAlone()) {\n            return false;\n        }\n        \n\n        /**\n         * Normal iteration & parent's backlog is in same tree\n         */\n        if (newBacklog instanceof Iteration) {\n            Backlog project = newBacklog.getParent();\n            Backlog product = project.getParent();\n            \n            Backlog parentsBacklog = parentStory.getBacklog();\n            if (parentsBacklog != null) {\n                int parentsBacklogId = parentsBacklog.getId();\n                if (parentsBacklogId == project.getId() || parentsBacklogId == product.getId()) {\n                    return false;\n                }\n            }\n        }\n        \n        \n        boolean differentProduct;\n        \n        // moving from standalone iteration\n        if ((story.getIteration() != null && story.getIteration().isStandAlone()) && newBacklog != story.getIteration()) {\n            Backlog newBacklogsParent = newBacklog.getParent();\n            // moving to parents backlog\n            if (!newBacklog.isStandAlone() && newBacklogsParent == parentStory.getBacklog()) {\n                differentProduct = false;\n\n            // moving to other product\n            } else {\n                differentProduct = true;\n            }\n        } else {\n            differentProduct = originalAndTargetProductEqual(story.getBacklog(), newBacklog);\n        }\n        boolean parentInDifferentBranch = parentStoryInDifferentBranch(story,\n                newBacklog);\n        return (story.getParent() != null) && (differentProduct || parentInDifferentBranch);\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\impl\\\\TaskBusinessImpl.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["TaskBusinessImpl"], "AN": ["iterationBusiness", "storyBusiness", "iterationHistoryEntryBusiness", "dailyWorkBusiness", "rankingBusiness", "hourEntryBusiness", "taskDAO"], "SCS_VariableDeclarator": ["iterationBusiness", "storyBusiness", "iterationHistoryEntryBusiness", "dailyWorkBusiness", "rankingBusiness", "hourEntryBusiness", "taskDAO", "storedTask", "currentTaskState", "newTaskId", "parent", "grandFather", "iterationId", "sourceIterationId", "destinationIterationId", "iterationId", "tasksIteration", "task", "task", "story", "iter", "lastInRank"], "SCS_ConstructorDeclaration": ["TaskBusinessImpl"], "SCS_ClassReference": ["Task", "task", null, "task", null, "task", "", "", "task", null, null, "", null, null, "task", "task", "parent", "parent", "parent", "grandFather", "grandFather", "grandFather", "", "task", "dailyWorkBusiness", "task", "", "dailyWorkBusiness", null, "", "", "task", "task", "task", "task", "task", "task", "task", "task", "task", "task", "", "task", "iterationBusiness", "task", "task", "storyBusiness", "task", "", "", "", null, "", "", "", "iterationHistoryEntryBusiness", "task", "tasksIteration", "task", null, "task", null, null, "", "task", "task", "taskDAO", "", "", "", "", "", "", "", "", "task", "iterationHistoryEntryBusiness", "task", null, "task", null, "iterationHistoryEntryBusiness", "task", null, null, "hourEntryBusiness", "task", "task", null, "task", "hourEntryBusiness", "task", "task", "hourEntryBusiness", "task", "task", "task", null, "task", null, "taskDAO", "task", "task", "upperTask", "task", "upperTask", "rankingBusiness", "taskDAO", "task", "task", "storyBusiness", "iterationBusiness", null, "taskDAO", "taskDAO", "rankingBusiness", "", "", "", "task", null], "MN": ["setTaskDAO", "storeTask", "setTaskToDone", "updateIterationHistoryIfApplicable", "updateEffortLeftAndOriginalEstimate", "assignParentForTask", "checkArgumentsForMoving", "move", "updateIterationHistoryIfNotNull", "getTaskIterationId", "resetOriginalEstimate", "delete", "delete", "delete", "deleteAndUpdateHistory", "delete", "rankUnderTask", "getWithRankBetween", "rankToBottom", "rankToBottom", "rankAndMove", "addResponsible", "setIterationBusiness", "setStoryBusiness", "setIterationHistoryEntryBusiness", "setRankingBusiness", "setDailyWorkBusiness", "setHourEntryBusiness"], "PN": ["taskDAO", "task", "iterationId", "storyId", "storyToStarted", "task", "task", "task", "task", "iterationId", "storyId", "task", "iterationId", "storyId", "task", "iterationId", "storyId", "iterationId", "task", "taskId", "id", "task", "id", "hourEntryHandlingChoice", "id", "hourEntryHandlingChoice", "task", "hourEntryHandlingChoice", "task", "upperTask", "first", "second", "task", "parentStoryId", "parentIterationId", "task", "story", "iteration", "task", "upperTask", "parentStoryId", "parentIterationId", "task", "user", "iterationBusiness", "storyBusiness", "iterationHistoryEntryBusiness", "rankingBusiness", "dailyWorkBusiness", "hourEntryBusiness"], "SCS_MemberReference": ["genericDAO", "taskDAO", "taskDAO", "taskDAO", "task", "currentTaskState", "iterationId", "storyId", "task", "iterationId", "storyId", "task", "task", "storedTask", "newTaskId", "storedTask", "storyId", "iterationId", "task", "storedTask", "task", "iterationId", "storyId", "task", "storyId", "iterationId", "currentTaskState", "NOT_STARTED", "NOT_STARTED", "storyToStarted", "parent", "NOT_STARTED", "STARTED", "grandFather", "grandFather", "NOT_STARTED", "STARTED", "grandFather", "task", "DONE", "task", "storedTask", "DONE", "task", "task", "task", "task", "iterationId", "DONE", "task", "iterationId", "storyId", "iterationId", "iterationId", "storyId", "task", "iterationId", "storyId", "iterationId", "storyId", "task", "iterationId", "storyId", "task", "task", "iterationId", "storyId", "task", "task", "sourceIterationId", "destinationIterationId", "sourceIterationId", "destinationIterationId", "task", "iterationId", "iterationId", "tasksIteration", "iterationId", "iterationId", "iterationId", "taskId", "task", "task", "task", "id", "task", "id", "hourEntryHandlingChoice", "id", "task", "hourEntryHandlingChoice", "hourEntryHandlingChoice", "hourEntryHandlingChoice", "task", "upperTask", "task", "upperTask", "first", "second", "task", "parentStoryId", "story", "parentStoryId", "parentIterationId", "iter", "parentIterationId", "task", "story", "iter", "task", "story", "iteration", "story", "lastInRank", "story", "lastInRank", "iteration", "task", "lastInRank", "task", "task", "parentIterationId", "parentStoryId", "task", "parentStoryId", "parentIterationId", "task", "upperTask", "task", "user", "iterationBusiness", "iterationBusiness", "storyBusiness", "storyBusiness", "iterationHistoryEntryBusiness", "iterationHistoryEntryBusiness", "rankingBusiness", "rankingBusiness", "dailyWorkBusiness", "dailyWorkBusiness", "hourEntryBusiness", "hourEntryBusiness"], "SCS_VariableDeclaration": ["Task", "TaskState", "int", "Story", "Story", "Integer", "Integer", "Integer", "Integer", "Iteration", "Task", "Task", "Story", "Iteration", "Task"], "SCS_MethodInvocation": ["getId", "retrieveDetached", "getId", "getState", "getId", "assignParentForTask", "updateEffortLeftAndOriginalEstimate", "getId", "create", "retrieve", "rankAndMove", "store", "rankToBottom", "getStory", "getState", "getState", "setState", "getParent", "getState", "setState", "getParent", "updateIterationHistoryIfApplicable", "getState", "removeTaskFromWorkQueues", "setState", "updateEffortLeftAndOriginalEstimate", "removeTaskFromWorkQueues", "store", "getTaskIterationId", "updateIterationHistoryIfNotNull", "getEffortLeft", "getOriginalEstimate", "setEffortLeft", "getOriginalEstimate", "getOriginalEstimate", "getEffortLeft", "setOriginalEstimate", "getEffortLeft", "getState", "setEffortLeft", "checkArgumentsForMoving", "setIteration", "retrieve", "setStory", "setStory", "retrieve", "setIteration", "checkArgumentsForMoving", "getTaskIterationId", "assignParentForTask", "store", "getTaskIterationId", "updateIterationHistoryIfNotNull", "updateIterationHistoryIfNotNull", "updateIterationHistory", "getIteration", "getId", "getStory", "getIteration", "getStory", "getIteration", "getId", "retrieve", "setEffortLeft", "setOriginalEstimate", "store", "updateIterationHistoryIfApplicable", "delete", "retrieve", "delete", "delete", "retrieve", "retrieve", "delete", "getIteration", "updateIterationHistory", "getIteration", "getId", "getStory", "getIteration", "updateIterationHistory", "getStory", "getIteration", "getId", "deleteAll", "getHourEntries", "getHourEntries", "clear", "getStory", "moveToBacklog", "getHourEntries", "getIteration", "moveToStory", "getHourEntries", "getStory", "getHourEntries", "clear", "getHourEntries", "size", "remove", "getId", "getStory", "getStory", "getIteration", "getIteration", "rankUnder", "getTasksWithRankBetween", "getIteration", "getStory", "retrieve", "retrieve", "rankToBottom", "getLastTaskInRank", "getLastTaskInRank", "rankToBottom", "assignParentForTask", "rankToBottom", "rankUnderTask", "getResponsibles", "add"], "CO": ["/** {@inheritDoc} */", "// allow storing existing task without relations", "// populateUserData(task, userIds);", "// Put new tasks to the top of the task list", "/** {@inheritDoc} */", "// 1. Error handling", "// 2. The logic", "/** {@inheritDoc} */", "/**\n     * Gets the tasks parent iteration's id.\n     * <p>\n     * If task resides under a story, get the story's parent iteration id.\n     * \n     * If story's parent backlog is not and iteration, return null.\n     */", "/* RANKING */", "/** {@inheritDoc} */", "/** {@inheritDoc} */", "/** {@inheritDoc} */", "// AUTOGENERATED"], "CODE": "package fi.hut.soberit.agilefant.business.impl;\n\nimport java.util.Collection;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport fi.hut.soberit.agilefant.business.DailyWorkBusiness;\nimport fi.hut.soberit.agilefant.business.HourEntryBusiness;\nimport fi.hut.soberit.agilefant.business.IterationBusiness;\nimport fi.hut.soberit.agilefant.business.IterationHistoryEntryBusiness;\nimport fi.hut.soberit.agilefant.business.RankUnderDelegate;\nimport fi.hut.soberit.agilefant.business.RankingBusiness;\nimport fi.hut.soberit.agilefant.business.StoryBusiness;\nimport fi.hut.soberit.agilefant.business.TaskBusiness;\nimport fi.hut.soberit.agilefant.db.TaskDAO;\nimport fi.hut.soberit.agilefant.exception.ObjectNotFoundException;\nimport fi.hut.soberit.agilefant.exception.OperationNotPermittedException;\nimport fi.hut.soberit.agilefant.model.ExactEstimate;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.Rankable;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.StoryState;\nimport fi.hut.soberit.agilefant.model.Task;\nimport fi.hut.soberit.agilefant.model.TaskState;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.util.HourEntryHandlingChoice;\n\n@Service(\"taskBusiness\")\n@Transactional\npublic class TaskBusinessImpl extends GenericBusinessImpl<Task> implements\n        TaskBusiness {\n\n    @Autowired\n    private IterationBusiness iterationBusiness;\n\n    @Autowired\n    private StoryBusiness storyBusiness;\n\n    @Autowired\n    private IterationHistoryEntryBusiness iterationHistoryEntryBusiness;\n\n    @Autowired\n    private DailyWorkBusiness dailyWorkBusiness;\n\n    @Autowired\n    private RankingBusiness rankingBusiness;\n\n    @Autowired\n    private HourEntryBusiness hourEntryBusiness;\n\n    private TaskDAO taskDAO;\n\n    public TaskBusinessImpl() {\n        super(Task.class);\n    }\n\n    @Autowired\n    public void setTaskDAO(TaskDAO taskDAO) {\n        this.genericDAO = taskDAO;\n        this.taskDAO = taskDAO;\n    }\n\n    /** {@inheritDoc} */\n    public Task storeTask(Task task, Integer iterationId, Integer storyId, boolean storyToStarted) {\n        Task storedTask = null;\n        TaskState currentTaskState = null;\n\n        if (task == null) {\n            throw new IllegalArgumentException(\"Task should be given\");\n        }\n\n        if(task.getId() != 0) {\n            currentTaskState = this.retrieveDetached(task.getId()).getState();\n        }\n        \n        // allow storing existing task without relations\n        if (task.getId() == 0 || iterationId != null || storyId != null) {\n            assignParentForTask(task, iterationId, storyId);\n        }\n\n        updateEffortLeftAndOriginalEstimate(task);\n\n        // populateUserData(task, userIds);\n\n        if (task.getId() == 0) {\n            int newTaskId = this.create(task);\n            storedTask = this.retrieve(newTaskId);\n            // Put new tasks to the top of the task list\n            rankAndMove(storedTask, null, storyId, iterationId);\n        } else {\n            this.store(task);\n            storedTask = task;\n            if (iterationId != null || storyId != null) {\n                this.rankToBottom(task, storyId, iterationId);\n            }\n        }\n    \n        Story parent = task.getStory();\n        Story grandFather=null;\n        if(currentTaskState == TaskState.NOT_STARTED && task.getState() != TaskState.NOT_STARTED) {\n            if (storyToStarted && parent != null && parent.getState() == StoryState.NOT_STARTED) {\n                parent.setState(StoryState.STARTED);\n                grandFather=parent.getParent();\n                while (grandFather != null && grandFather.getState() == StoryState.NOT_STARTED){\n                    grandFather.setState(StoryState.STARTED);\n                    grandFather=grandFather.getParent();\n                }\n               \n            }\n        }\n\n        updateIterationHistoryIfApplicable(task);\n\n        if (task.getState() == TaskState.DONE) {\n            dailyWorkBusiness.removeTaskFromWorkQueues(task);\n        }\n\n        return storedTask;\n    }\n        \n    public void setTaskToDone(Task task) {\n        task.setState(TaskState.DONE);\n        updateEffortLeftAndOriginalEstimate(task);\n        dailyWorkBusiness.removeTaskFromWorkQueues(task);\n        this.store(task);\n    }\n\n    private void updateIterationHistoryIfApplicable(Task task) {\n        Integer iterationId = getTaskIterationId(task);\n        updateIterationHistoryIfNotNull(iterationId);\n    }\n\n    private void updateEffortLeftAndOriginalEstimate(Task task) {\n        if (task.getEffortLeft() == null && task.getOriginalEstimate() != null) {\n            task.setEffortLeft(task.getOriginalEstimate());\n        }\n\n        if (task.getOriginalEstimate() == null && task.getEffortLeft() != null) {\n            task.setOriginalEstimate(task.getEffortLeft());\n        }\n\n        if (task.getState() == TaskState.DONE) {\n            task.setEffortLeft(new ExactEstimate(0));\n        }\n    }\n\n    /** {@inheritDoc} */\n    @Transactional\n    public void assignParentForTask(Task task, Integer iterationId,\n            Integer storyId) throws IllegalArgumentException,\n            ObjectNotFoundException {\n        // 1. Error handling\n        checkArgumentsForMoving(task, iterationId, storyId);\n\n        // 2. The logic\n        if (iterationId != null) {\n            task.setIteration(iterationBusiness.retrieve(iterationId));\n            task.setStory(null);\n        } else {\n            task.setStory(storyBusiness.retrieve(storyId));\n            task.setIteration(null);\n        }\n    }\n\n    private void checkArgumentsForMoving(Task task, Integer iterationId,\n            Integer storyId) {\n        if (task == null) {\n            throw new IllegalArgumentException(\"Task should be given.\");\n        } else if (iterationId == null && storyId == null) {\n            throw new IllegalArgumentException(\"The parent id should be given\");\n        } else if (iterationId != null && storyId != null) {\n            throw new IllegalArgumentException(\"Only one parent can be given\");\n        }\n    }\n\n    /** {@inheritDoc} */\n    @Transactional\n    public Task move(Task task, Integer iterationId, Integer storyId) {\n        checkArgumentsForMoving(task, iterationId, storyId);\n\n        Integer sourceIterationId = getTaskIterationId(task);\n        assignParentForTask(task, iterationId, storyId);\n        this.store(task);\n\n        Integer destinationIterationId = getTaskIterationId(task);\n\n        if (sourceIterationId != destinationIterationId) {\n            updateIterationHistoryIfNotNull(sourceIterationId);\n            updateIterationHistoryIfNotNull(destinationIterationId);\n        }\n\n        return task;\n    }\n\n    private void updateIterationHistoryIfNotNull(Integer iterationId) {\n        if (iterationId == null) {\n            return;\n        }\n        iterationHistoryEntryBusiness.updateIterationHistory(iterationId);\n    }\n\n    /**\n     * Gets the tasks parent iteration's id.\n     * <p>\n     * If task resides under a story, get the story's parent iteration id.\n     * \n     * If story's parent backlog is not and iteration, return null.\n     */\n    private Integer getTaskIterationId(Task task) {\n        Integer iterationId = null;\n        Iteration tasksIteration = task.getIteration();\n        if (tasksIteration != null) {\n            iterationId = tasksIteration.getId();\n        } else if (task.getStory().getIteration() != null) {\n            iterationId = task.getStory().getIteration().getId();\n        }\n        return iterationId;\n    }\n\n    public Task resetOriginalEstimate(int taskId) {\n        Task task = retrieve(taskId);\n        task.setEffortLeft(null);\n        task.setOriginalEstimate(null);\n        taskDAO.store(task);\n\n        updateIterationHistoryIfApplicable(task);\n\n        return task;\n    }\n\n    @Override\n    public void delete(int id) {\n        delete(retrieve(id), null);\n    }\n    \n    @Override\n    public void delete(Task task) {\n        delete(task, null);\n    }\n\n    public void delete(int id, HourEntryHandlingChoice hourEntryHandlingChoice) {\n        delete(retrieve(id), hourEntryHandlingChoice);\n    }\n\n    public void deleteAndUpdateHistory(int id,\n            HourEntryHandlingChoice hourEntryHandlingChoice) {\n        Task task = retrieve(id);\n        delete(task, hourEntryHandlingChoice);\n        if (task.getIteration() != null) {\n            iterationHistoryEntryBusiness.updateIterationHistory(task\n                    .getIteration().getId());\n        } else if (task.getStory().getIteration() != null) {\n            iterationHistoryEntryBusiness.updateIterationHistory(task\n                    .getStory().getIteration().getId());\n        }\n    }\n\n    public void delete(Task task,\n            HourEntryHandlingChoice hourEntryHandlingChoice) {\n        if (hourEntryHandlingChoice != null) {\n            switch (hourEntryHandlingChoice) {\n            case DELETE:\n                hourEntryBusiness.deleteAll(task.getHourEntries());\n                task.getHourEntries().clear();\n                break;\n            case MOVE:\n                if (task.getStory() == null) {\n                    hourEntryBusiness.moveToBacklog(task.getHourEntries(), task\n                            .getIteration());\n                } else {\n                    hourEntryBusiness.moveToStory(task.getHourEntries(), task\n                            .getStory());\n                }\n                task.getHourEntries().clear();\n                break;\n            }\n        }\n        if (task.getHourEntries().size() != 0) {\n            throw new OperationNotPermittedException(\n                    \"Task contains spent effort entries.\");\n        }\n        taskDAO.remove(task.getId());\n    }\n\n    /* RANKING */\n    /** {@inheritDoc} */\n    @Transactional\n    public Task rankUnderTask(final Task task, Task upperTask)\n            throws IllegalArgumentException {\n        if (task == null) {\n            throw new IllegalArgumentException(\"Task should be given\");\n        } else if (upperTask != null) {\n            if (task.getStory() != upperTask.getStory()) {\n                throw new IllegalArgumentException(\n                        \"The tasks' parent's should be the same\");\n            } else if (task.getIteration() != upperTask.getIteration()) {\n                throw new IllegalArgumentException(\n                        \"The tasks' parent's should be the same\");\n            }\n        }\n\n        rankingBusiness.rankUnder(task, upperTask, new RankUnderDelegate() {\n            public Collection<? extends Rankable> getWithRankBetween(\n                    Integer first, Integer second) {\n                return taskDAO.getTasksWithRankBetween(first, second, task\n                        .getIteration(), task.getStory());\n            }\n        });\n\n        return task;\n    }\n\n    /** {@inheritDoc} */\n    @Transactional\n    public Task rankToBottom(Task task, Integer parentStoryId,\n            Integer parentIterationId) throws IllegalArgumentException {\n        Story story = null;\n        Iteration iter = null;\n\n        if (parentStoryId != null) {\n            story = storyBusiness.retrieve(parentStoryId);\n        } else if (parentIterationId != null) {\n            iter = iterationBusiness.retrieve(parentIterationId);\n        }\n\n        return this.rankToBottom(task, story, iter);\n    }\n\n    private Task rankToBottom(Task task, Story story, Iteration iteration) {\n        if (task == null || (story == null && iteration == null)) {\n            throw new IllegalArgumentException();\n        }\n        Task lastInRank = null;\n\n        if (story != null) {\n            lastInRank = taskDAO.getLastTaskInRank(story, null);\n        } else {\n            lastInRank = taskDAO.getLastTaskInRank(null, iteration);\n        }\n\n        rankingBusiness.rankToBottom(task, lastInRank);\n\n        return task;\n    }\n\n    /** {@inheritDoc} */\n    @Transactional\n    public Task rankAndMove(Task task, Task upperTask, Integer parentStoryId,\n            Integer parentIterationId) throws IllegalArgumentException {\n        assignParentForTask(task, parentIterationId, parentStoryId);\n        rankToBottom(task, parentStoryId, parentIterationId);\n        rankUnderTask(task, upperTask);\n\n        return task;\n    }\n\n    public void addResponsible(Task task, User user) {\n        task.getResponsibles().add(user);\n    }\n\n    // AUTOGENERATED\n\n    public void setIterationBusiness(IterationBusiness iterationBusiness) {\n        this.iterationBusiness = iterationBusiness;\n    }\n\n    public void setStoryBusiness(StoryBusiness storyBusiness) {\n        this.storyBusiness = storyBusiness;\n    }\n\n    public void setIterationHistoryEntryBusiness(\n            IterationHistoryEntryBusiness iterationHistoryEntryBusiness) {\n        this.iterationHistoryEntryBusiness = iterationHistoryEntryBusiness;\n    }\n\n    public void setRankingBusiness(RankingBusiness rankingBusiness) {\n        this.rankingBusiness = rankingBusiness;\n    }\n\n    public void setDailyWorkBusiness(DailyWorkBusiness dailyWorkBusiness) {\n        this.dailyWorkBusiness = dailyWorkBusiness;\n    }\n\n    public void setHourEntryBusiness(HourEntryBusiness hourEntryBusiness) {\n        this.hourEntryBusiness = hourEntryBusiness;\n    }\n}", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\impl\\\\TaskSplitBusinessImpl.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["TaskSplitBusinessImpl"], "AN": ["taskBusiness"], "SCS_VariableDeclarator": ["taskBusiness", "parentStoryId", "parentIterationId", "task"], "MN": ["splitTask", "persistNewTasks", "setTaskBusiness"], "PN": ["original", "newTasks", "original", "newTasks", "taskBusiness"], "SCS_MemberReference": ["original", "newTasks", "original", "original", "newTasks", "original", "parentStoryId", "parentIterationId", "newTasks", "task", "task", "parentIterationId", "parentStoryId", "task", "original", "taskBusiness", "taskBusiness"], "SCS_ClassReference": ["original", "taskBusiness", "", "original", "original", null, "original", "original", null, "task", "original", "task", "original", "taskBusiness", "taskBusiness"], "SCS_MethodInvocation": ["getId", "store", "persistNewTasks", "getStory", "getStory", "getId", "getIteration", "getIteration", "getId", "setIteration", "getIteration", "setStory", "getStory", "storeTask", "rankUnderTask"], "SCS_VariableDeclaration": ["Integer", "Integer", "Task"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.business.impl;\n\nimport java.util.Collection;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport fi.hut.soberit.agilefant.business.TaskBusiness;\nimport fi.hut.soberit.agilefant.business.TaskSplitBusiness;\nimport fi.hut.soberit.agilefant.model.Task;\n\n@Service(\"taskSplitBusiness\")\n@Transactional\npublic class TaskSplitBusinessImpl implements TaskSplitBusiness {\n    @Autowired\n    private TaskBusiness taskBusiness;\n\n    @Transactional\n    public Task splitTask(Task original, Collection<Task> newTasks) {\n        if (original == null || newTasks == null) {\n            throw new IllegalArgumentException(\n                    \"Original task and new task list should be given\");\n        }\n        if (original.getId() == 0) {\n            throw new RuntimeException(\"Original story not persisted.\");\n        }\n        taskBusiness.store(original);\n        persistNewTasks(original, newTasks);\n        return original;\n    }\n\n    private void persistNewTasks(Task original, Collection<Task> newTasks) {\n        Integer parentStoryId     = null;\n        if (original.getStory() != null) {\n            parentStoryId = original.getStory().getId();\n        }\n        \n        Integer parentIterationId = null;\n        if (original.getIteration() != null) {\n            parentIterationId = original.getIteration().getId();\n        }\n        \n        for (Task task : newTasks) {\n            task.setIteration(original.getIteration());\n            task.setStory(original.getStory());\n            \n            task = taskBusiness.storeTask(task, parentIterationId, parentStoryId, false);\n            taskBusiness.rankUnderTask(task, original);\n        }\n    }\n\n    public void setTaskBusiness(TaskBusiness taskBusiness) {\n        this.taskBusiness = taskBusiness;\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\impl\\\\TeamBusinessImpl.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["TeamBusinessImpl"], "AN": ["teamDAO", "userBusiness", "productBusiness", "iterationBusiness"], "SCS_VariableDeclarator": ["teamDAO", "userBusiness", "productBusiness", "iterationBusiness", "users", "uid", "products", "pid", "iterations", "pid", "stored", "newId", "user", "users", "teams", "team", "teams", "team"], "SCS_ConstructorDeclaration": ["TeamBusinessImpl"], "SCS_ClassReference": ["Team", "teamDAO", "users", "userBusiness", "team", "products", "productBusiness", "team", "iterations", "iterationBusiness", "team", "team", "teamDAO", "teamDAO", "teamDAO", null, "user", "users", "team", "call", "Hibernate", "team"], "MN": ["setTeamDAO", "setUserBusiness", "getByTeamName", "storeTeam", "getUsersInSameTeams", "withUsers"], "PN": ["teamDAO", "userBusiness", "teamName", "team", "userIds", "productIds", "iterationIds", "userId", "call"], "SCS_MemberReference": ["genericDAO", "teamDAO", "teamDAO", "teamDAO", "userBusiness", "userBusiness", "teamName", "team", "userIds", "userIds", "uid", "users", "productIds", "productIds", "pid", "products", "iterationIds", "iterationIds", "pid", "iterations", "stored", "team", "stored", "team", "stored", "newId", "stored", "userBusiness", "userId", "teams", "users", "teams", "teams"], "SCS_MethodInvocation": ["getByTeamName", "add", "retrieve", "setUsers", "add", "retrieve", "setProducts", "add", "retrieve", "setIterations", "getId", "store", "create", "get", "retrieve", "getTeams", "addAll", "getUsers", "call", "initialize", "getUsers"], "SCS_VariableDeclaration": ["Set", "Integer", "Set", "Integer", "Set", "Integer", "Team", "int", "User", "Set", "Collection", "Team", "Collection", "Team"], "CO": ["/** {@inheritDoc} */", "// Get users", "// Get products", "// Get iterations"], "CODE": "package fi.hut.soberit.agilefant.business.impl;\n\nimport java.util.Collection;\nimport java.util.HashSet;\nimport java.util.Set;\n\nimport org.hibernate.Hibernate;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport fi.hut.soberit.agilefant.business.IterationBusiness;\nimport fi.hut.soberit.agilefant.business.TeamBusiness;\nimport fi.hut.soberit.agilefant.business.UserBusiness;\nimport fi.hut.soberit.agilefant.business.ProductBusiness;\nimport fi.hut.soberit.agilefant.db.TeamDAO;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.Team;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.model.Product;\n\n@Service(\"teamBusiness\")\n@Transactional\npublic class TeamBusinessImpl extends GenericBusinessImpl<Team> implements\n        TeamBusiness {\n\n    private TeamDAO teamDAO;\n\n    private UserBusiness userBusiness;\n    \n    @Autowired\n    private ProductBusiness productBusiness;\n    \n    @Autowired\n    private IterationBusiness iterationBusiness;\n    \n    public TeamBusinessImpl() {\n        super(Team.class);\n    }\n    \n    @Autowired\n    public void setTeamDAO(TeamDAO teamDAO) {\n        this.genericDAO = teamDAO;\n        this.teamDAO = teamDAO;\n    }\n    \n    @Autowired\n    public void setUserBusiness(UserBusiness userBusiness) {\n        this.userBusiness = userBusiness;\n    }\n    \n    @Transactional(readOnly = true)\n    public Team getByTeamName(String teamName) {\n        return teamDAO.getByTeamName(teamName);\n    }\n\n\n    /** {@inheritDoc} */\n    @Transactional\n    public Team storeTeam(Team team, Set<Integer> userIds, Set<Integer> productIds, Set<Integer> iterationIds) {\n        if (team == null) {\n            throw new IllegalArgumentException(\"Team must be supplied.\");\n        }\n        \n        // Get users\n        Set<User> users = new HashSet<User>();\n        if (userIds != null) {\n            for (Integer uid : userIds) {\n                users.add(userBusiness.retrieve(uid));\n            }\n            team.setUsers(users);\n        }\n        \n        // Get products\n        Set<Product> products = new HashSet<Product>();\n        if (productIds != null) {\n            for (Integer pid : productIds) {\n                products.add(productBusiness.retrieve(pid));\n            }\n            team.setProducts(products);\n        }\n        \n        // Get iterations\n        Set<Iteration> iterations = new HashSet<Iteration>();\n        if (iterationIds != null) {\n            for (Integer pid : iterationIds) {\n                iterations.add(iterationBusiness.retrieve(pid));\n            }\n            team.setIterations(iterations);\n        }\n        \n        Team stored = null;\n        if (team.getId() != 0) {\n            stored = team;\n            teamDAO.store(stored);\n        }\n        else {\n            int newId = (Integer)teamDAO.create(team);\n            stored = teamDAO.get(newId);\n        }\n        \n        return stored;\n    }\n\n\t@Override\n\t@Transactional(readOnly=true)\n\tpublic Set<User> getUsersInSameTeams(int userId) {\n\t\tUser user = this.userBusiness.retrieve(userId);\n\n\t\tSet<User> users = new HashSet<User>();\n\t\t\n        Collection<Team> teams = user.getTeams();\n        for (Team team: teams) {\n            users.addAll(team.getUsers());\n        }\n        \n        return users;\n\t}\n\n\t@Override\n\t@Transactional(readOnly=true)\n\tpublic Collection<Team> withUsers(Call<Collection<Team>> call) {\n\t\tCollection<Team> teams = call.call();\n\t\tfor(Team team : teams) {\n\t\t\tHibernate.initialize(team.getUsers());\n\t\t}\n\t\treturn teams;\n\t}\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\impl\\\\TimesheetBusinessImpl.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["TimesheetBusinessImpl"], "AN": ["hourEntryDAO", "serverTimeZone"], "SCS_VariableDeclarator": ["hourEntryDAO", "serverTimeZone", "sum", "node", "rootNodes", "node", "sheetData", "sheetData", "sheetData", "backlogEntries", "storyEntries", "taskEntries", "entry", "entry", "entry", "story", "storyId", "parentNode", "iteration", "iterationId", "parentNode", "backlog", "backlogId", "parentNode", "parentBacklog", "backlogId", "parentNode", "taskNodes", "node", "parentStory", "storyNodes", "node", "backlogNodes", "node", "node", "node"], "SCS_ClassReference": [null, "node", "sheetData", "node", "node", null, "node", "rootNodes", "startDate", null, "serverTimeZone", "timeZone", "endDate", null, "serverTimeZone", "timeZone", null, null, null, null, null, null, null, null, null, "sheetData", "sheetData", "sheetData", "taskNode", null, "story", "sheetData", "parentNode", null, "sheetData", "parentNode", "taskNode", null, "iteration", "sheetData", "parentNode", null, "sheetData", "parentNode", "storyNode", null, "storyNode", null, "backlog", "sheetData", "parentNode", null, "sheetData", "parentNode", "backlogNode", null, "parentBacklog", "sheetData", "parentNode", null, "sheetData", "parentNode", "sheetData", "node", null, null, null, "sheetData", null, "backlogNodes", "sheetData", "node", null, "backlogNodes", "sheetData", "node", null, "backlogNodes", "sheetData", "node", null], "SCS_MethodInvocation": ["getZone", "getEffortSum", "getBacklogNodes", "getBacklog", "getBacklog", "isStandAlone", "calculateEffortSum", "add", "minusMillis", "plusMillis", "getOffset", "getOffset", "minusMillis", "plusMillis", "getOffset", "getOffset", "generateTimesheet", "findRootNodes", "getUnlinkedTimesheetData", "linkTasks", "linkStories", "linkBacklogs", "getBacklogHourEntriesByFilter", "getStoryHourEntriesByFilter", "getTaskHourEntriesByFilter", "addEntry", "addEntry", "addEntry", "getTask", "getStory", "getId", "getStoryNode", "getChildren", "contains", "addNode", "addChild", "getTask", "getIteration", "getId", "getBacklogNode", "getTaskNodes", "contains", "addNode", "addChild", "getStory", "getIteration", "getStory", "getBacklog", "getId", "getBacklogNode", "getStoryNodes", "contains", "addNode", "addChild", "getBacklog", "getParent", "getId", "getBacklogNode", "getBacklogNodes", "contains", "addNode", "addChild", "getTaskNodes", "getTask", "getStory", "attachTaskNodeToIterationNode", "attachTaskNodeToStoryNode", "getStoryNodes", "attachStoryNodeToBacklogNode", "addAll", "getBacklogNodes", "getBacklog", "attachBacklogNodeToBacklogNode", "addAll", "getBacklogNodes", "getBacklog", "attachBacklogNodeToBacklogNode", "addAll", "getBacklogNodes", "getBacklog", "attachBacklogNodeToBacklogNode"], "MN": ["getRootNodeSum", "findRootNodes", "getRootNodes", "generateTimesheet", "getUnlinkedTimesheetData", "attachTaskNodeToStoryNode", "attachTaskNodeToIterationNode", "attachStoryNodeToBacklogNode", "attachBacklogNodeToBacklogNode", "linkTasks", "linkStories", "linkBacklogs", "setHourEntryDAO"], "PN": ["nodes", "sheetData", "backlogIds", "startDate", "endDate", "timeZone", "userIds", "backlogIds", "startDate", "endDate", "userIds", "backlogIds", "startDate", "endDate", "userIds", "sheetData", "taskNode", "sheetData", "taskNode", "sheetData", "storyNode", "sheetData", "backlogNode", "sheetData", "sheetData", "sheetData", "hourEntryDAO"], "SCS_MemberReference": ["nodes", "nodes", "sum", "sum", "node", "rootNodes", "startDate", "timeZone", "startDate", "endDate", "timeZone", "endDate", "backlogIds", "startDate", "endDate", "userIds", "sheetData", "backlogIds", "startDate", "endDate", "userIds", "sheetData", "sheetData", "sheetData", "sheetData", "hourEntryDAO", "backlogIds", "startDate", "endDate", "userIds", "hourEntryDAO", "backlogIds", "startDate", "endDate", "userIds", "hourEntryDAO", "backlogIds", "startDate", "endDate", "userIds", "backlogEntries", "entry", "storyEntries", "entry", "taskEntries", "entry", "sheetData", "story", "storyId", "parentNode", "taskNode", "parentNode", "parentNode", "story", "parentNode", "taskNode", "iteration", "iterationId", "parentNode", "taskNode", "parentNode", "parentNode", "iteration", "parentNode", "taskNode", "backlog", "backlog", "backlog", "backlogId", "parentNode", "storyNode", "parentNode", "parentNode", "backlog", "parentNode", "storyNode", "parentBacklog", "backlogId", "parentNode", "backlogNode", "parentNode", "parentNode", "parentBacklog", "parentNode", "backlogNode", "taskNodes", "parentStory", "sheetData", "node", "sheetData", "node", "storyNodes", "sheetData", "node", "backlogNodes", "sheetData", "node", "backlogNodes", "sheetData", "node", "backlogNodes", "sheetData", "node", "hourEntryDAO", "hourEntryDAO"], "SCS_VariableDeclaration": ["long", "BacklogTimesheetNode", "List", "BacklogTimesheetNode", "TimesheetData", "TimesheetData", "TimesheetData", "List", "List", "List", "BacklogHourEntry", "StoryHourEntry", "TaskHourEntry", "Story", "int", "StoryTimesheetNode", "Iteration", "int", "BacklogTimesheetNode", "Backlog", "int", "BacklogTimesheetNode", "Backlog", "int", "BacklogTimesheetNode", "Collection", "TaskTimesheetNode", "Story", "Collection", "StoryTimesheetNode", "Collection", "BacklogTimesheetNode", "BacklogTimesheetNode", "BacklogTimesheetNode"], "CO": ["//directly under an iteration"], "CODE": "package fi.hut.soberit.agilefant.business.impl;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.Set;\n\nimport org.joda.time.DateTime;\nimport org.joda.time.DateTimeZone;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport fi.hut.soberit.agilefant.business.TimesheetBusiness;\nimport fi.hut.soberit.agilefant.db.HourEntryDAO;\nimport fi.hut.soberit.agilefant.model.Backlog;\nimport fi.hut.soberit.agilefant.model.BacklogHourEntry;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.Product;\nimport fi.hut.soberit.agilefant.model.Project;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.StoryHourEntry;\nimport fi.hut.soberit.agilefant.model.TaskHourEntry;\nimport fi.hut.soberit.agilefant.transfer.BacklogTimesheetNode;\nimport fi.hut.soberit.agilefant.transfer.StoryTimesheetNode;\nimport fi.hut.soberit.agilefant.transfer.TaskTimesheetNode;\nimport fi.hut.soberit.agilefant.util.TimesheetData;\n\n@Service(\"timesheetBusiness\")\n@Transactional\npublic class TimesheetBusinessImpl implements TimesheetBusiness {\n    \n    @Autowired\n    private HourEntryDAO hourEntryDAO;\n    \n    private DateTimeZone serverTimeZone = new DateTime().getZone();\n    \n    public long getRootNodeSum(List<BacklogTimesheetNode> nodes) {\n        if(nodes == null) {\n            return 0L;\n        }\n        long sum = 0;\n        for(BacklogTimesheetNode node : nodes) {\n            sum += node.getEffortSum();\n        }\n        return sum;\n    }\n    public List<BacklogTimesheetNode> findRootNodes(TimesheetData sheetData) {\n        List<BacklogTimesheetNode> rootNodes = new ArrayList<BacklogTimesheetNode>();\n        for(BacklogTimesheetNode node : sheetData.getBacklogNodes()) {\n            if(node.getBacklog() instanceof Product || node.getBacklog().isStandAlone()) {\n                node.calculateEffortSum();\n                rootNodes.add(node);\n            }\n        }\n        return rootNodes;\n    }\n    public List<BacklogTimesheetNode> getRootNodes(Set<Integer> backlogIds, DateTime startDate, DateTime endDate, DateTimeZone timeZone, Set<Integer> userIds) {\n    \tif (startDate != null && timeZone != null) {\n        \tstartDate = startDate.minusMillis(timeZone.getOffset(0)).plusMillis(serverTimeZone.getOffset(0));\n        }\n        if (endDate != null && timeZone != null) {\n        \tendDate = endDate.minusMillis(timeZone.getOffset(0)).plusMillis(serverTimeZone.getOffset(0));\n        }\n        TimesheetData sheetData = this.generateTimesheet(backlogIds, startDate, endDate, userIds);\n        return this.findRootNodes(sheetData);\n    }\n    public TimesheetData generateTimesheet(Set<Integer> backlogIds, DateTime startDate, DateTime endDate, Set<Integer> userIds) {\n        TimesheetData sheetData = this.getUnlinkedTimesheetData(backlogIds, startDate, endDate, userIds);\n        this.linkTasks(sheetData);\n        this.linkStories(sheetData);\n        this.linkBacklogs(sheetData);\n        return sheetData;\n    }\n    protected TimesheetData getUnlinkedTimesheetData(Set<Integer> backlogIds, DateTime startDate, DateTime endDate, Set<Integer> userIds) {\n        TimesheetData sheetData = new TimesheetData();\n        List<BacklogHourEntry> backlogEntries = this.hourEntryDAO.getBacklogHourEntriesByFilter(backlogIds, startDate, endDate, userIds);\n        List<StoryHourEntry> storyEntries = this.hourEntryDAO.getStoryHourEntriesByFilter(backlogIds, startDate, endDate, userIds);\n        List<TaskHourEntry> taskEntries = this.hourEntryDAO.getTaskHourEntriesByFilter(backlogIds, startDate, endDate, userIds);\n        \n        for(BacklogHourEntry entry : backlogEntries) {\n            sheetData.addEntry(entry);\n        }\n        \n        for(StoryHourEntry entry : storyEntries) {\n            sheetData.addEntry(entry);\n        }\n        \n        for(TaskHourEntry entry : taskEntries) {\n            sheetData.addEntry(entry);\n        }\n        return sheetData;\n    }\n    \n    protected void attachTaskNodeToStoryNode(TimesheetData sheetData, TaskTimesheetNode taskNode) {\n        Story story = taskNode.getTask().getStory();\n        if(story == null) {\n            return;\n        }\n        int storyId = story.getId();\n\n        StoryTimesheetNode parentNode = sheetData.getStoryNode(storyId);\n        \n        if(parentNode != null && parentNode.getChildren().contains(taskNode)) {\n            return;\n        }\n        if(parentNode == null) {\n            parentNode = new StoryTimesheetNode(story);\n            sheetData.addNode(parentNode);\n        }\n        parentNode.addChild(taskNode);\n    }\n    \n    protected void attachTaskNodeToIterationNode(TimesheetData sheetData, TaskTimesheetNode taskNode) {\n        Iteration iteration = taskNode.getTask().getIteration();\n        if(iteration == null) {\n            return;\n        }\n        \n       int iterationId = iteration.getId();\n       BacklogTimesheetNode parentNode = sheetData.getBacklogNode(iterationId);\n       \n       if(parentNode != null && parentNode.getTaskNodes().contains(taskNode)) {\n           return;\n       }\n       \n       if(parentNode == null) {\n           parentNode = new BacklogTimesheetNode(iteration);\n           sheetData.addNode(parentNode);\n       } \n       parentNode.addChild(taskNode);\n    }\n    protected void attachStoryNodeToBacklogNode(TimesheetData sheetData, StoryTimesheetNode storyNode) {\n        Backlog backlog = storyNode.getStory().getIteration();\n        \n        if(backlog == null) {\n            backlog = storyNode.getStory().getBacklog();\n        }\n        \n        if(backlog == null) {\n            return;\n        }\n        \n        int backlogId = backlog.getId();\n        BacklogTimesheetNode parentNode = sheetData.getBacklogNode(backlogId);\n        \n        if(parentNode != null && parentNode.getStoryNodes().contains(storyNode)) {\n            return;\n        }\n        \n        if(parentNode == null) {\n            parentNode = new BacklogTimesheetNode(backlog);\n            sheetData.addNode(parentNode);\n        }\n        parentNode.addChild(storyNode);\n    } \n    \n    protected void attachBacklogNodeToBacklogNode(TimesheetData sheetData, BacklogTimesheetNode backlogNode) {\n        Backlog parentBacklog = backlogNode.getBacklog().getParent();\n        if(parentBacklog == null) {\n            return;\n        }\n        \n        int backlogId = parentBacklog.getId();\n        \n        BacklogTimesheetNode parentNode = sheetData.getBacklogNode(backlogId);\n        \n        if(parentNode != null && parentNode.getBacklogNodes().contains(backlogNode)) {\n            return;\n        }\n        if(parentNode == null) {\n            parentNode = new BacklogTimesheetNode(parentBacklog);\n            sheetData.addNode(parentNode);\n        }\n        parentNode.addChild(backlogNode);\n    }\n    \n    protected void linkTasks(TimesheetData sheetData) {\n        Collection<TaskTimesheetNode> taskNodes = sheetData.getTaskNodes();\n        \n        for(TaskTimesheetNode node : taskNodes) {\n            Story parentStory = node.getTask().getStory();\n            //directly under an iteration\n            if(parentStory == null) {\n                this.attachTaskNodeToIterationNode(sheetData, node);\n            } else {\n                this.attachTaskNodeToStoryNode(sheetData, node);\n            }\n        }\n    }\n    protected void linkStories(TimesheetData sheetData) {\n        Collection<StoryTimesheetNode> storyNodes = sheetData.getStoryNodes();\n        \n        for(StoryTimesheetNode node : storyNodes) {\n            this.attachStoryNodeToBacklogNode(sheetData, node);\n        }\n    }\n    \n    protected void  linkBacklogs(TimesheetData sheetData) {\n        Collection<BacklogTimesheetNode> backlogNodes = new ArrayList<BacklogTimesheetNode>();\n        backlogNodes.addAll(sheetData.getBacklogNodes());\n        for(BacklogTimesheetNode node : backlogNodes) {\n            if(node.getBacklog() instanceof Iteration) {\n                this.attachBacklogNodeToBacklogNode(sheetData, node);\n            }\n        }\n        backlogNodes.addAll(sheetData.getBacklogNodes());\n        for(BacklogTimesheetNode node : backlogNodes) {\n            if(node.getBacklog() instanceof Project) {\n                this.attachBacklogNodeToBacklogNode(sheetData, node);\n            }\n        }\n        backlogNodes.addAll(sheetData.getBacklogNodes());\n        for(BacklogTimesheetNode node : backlogNodes) {\n            if(node.getBacklog() instanceof Product) {\n                this.attachBacklogNodeToBacklogNode(sheetData, node);\n            }\n        }\n    }\n    public void setHourEntryDAO(HourEntryDAO hourEntryDAO) {\n        this.hourEntryDAO = hourEntryDAO;\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\impl\\\\TimesheetExportBusinessImpl.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["TimesheetExportBusinessImpl"], "AN": ["dateColumnStyle", "decimalFormat", "headerStyle", "hourEntryDAO", "serverTimeZone"], "SCS_VariableDeclarator": ["dateColumnStyle", "decimalFormat", "headerStyle", "hourEntryDAO", "serverTimeZone", "workbook", "reportData", "plainReport", "backlogEntries", "storyEntries", "taskEntries", "timesheetData", "entry", "entry", "entry", "data", "rowData", "currentRow", "cell", "headerRow", "columnNumber", "columnHeader", "currentCell", "cHelper", "headerFont", "columnNum", "columnWidth", "productName", "dateColumn", "effortColumn"], "SCS_ClassReference": [null, "startDate", null, "serverTimeZone", "timeZone", "endDate", null, "serverTimeZone", "timeZone", null, "workbook", null, null, null, null, null, null, null, "timesheetData", "timesheetData", "timesheetData", "data", "Collections", "sheet", "sheet", null, "row", "cell", "sheet", "textProvider", "", "currentCell", "wb", "wb", null, "cHelper", null, "wb", null, "cHelper", null, "wb", "wb", "headerFont", null, "sheet", "sheet", "sheet", "rowData", "rowData", null, "", "rowData", "", "rowData", null, "rowData", "", "rowData", null, "rowData", "", "rowData", null, "", "rowData", null, "rowData", "", "rowData", null, "", "rowData", null, "", "rowData", "", "rowData", null, "row", "dateColumn", "dateColumn", "rowData", null, "row", "effortColumn", "effortColumn", "rowData", "effortColumn"], "SCS_MethodInvocation": ["getZone", "minusMillis", "plusMillis", "getOffset", "getOffset", "minusMillis", "plusMillis", "getOffset", "getOffset", "getTimesheetRows", "createSheet", "initializeColumnStyles", "renderHeader", "renderSheetData", "sizeColumns", "getBacklogHourEntriesByFilter", "getStoryHourEntriesByFilter", "getTaskHourEntriesByFilter", "add", "add", "add", "setTimeZone", "sort", "createRow", "getLastRowNum", "setRowValues", "createCell", "setCellValue", "createRow", "getText", "createCellWithValue", "setCellStyle", "createCellStyle", "getCreationHelper", "setDataFormat", "createDataFormat", "getFormat", "createCellStyle", "setDataFormat", "createDataFormat", "getFormat", "createCellStyle", "createFont", "setBoldweight", "setFont", "autoSizeColumn", "getColumnWidth", "setColumnWidth", "getProduct", "getProduct", "getName", "createCellWithValue", "getProject", "createCellWithValue", "getProject", "getName", "getIteration", "createCellWithValue", "getIteration", "getName", "getStory", "createCellWithValue", "getStory", "getId", "createCellWithValue", "getStory", "getName", "getTask", "createCellWithValue", "getTask", "getId", "createCellWithValue", "getTask", "getName", "createCellWithValue", "getDescription", "createCellWithValue", "getUser", "getFullName", "createCell", "setCellStyle", "setCellValue", "getDate", "toDate", "createCell", "setCellType", "setCellValue", "getEffort", "setCellStyle"], "MN": ["generateTimesheet", "getTimesheetRows", "renderSheetData", "createCellWithValue", "renderHeader", "initializeColumnStyles", "sizeColumns", "setRowValues", "setHourEntryDAO"], "PN": ["textProvider", "backlogIds", "startDate", "endDate", "timeZone", "userIds", "backlogIds", "startDate", "endDate", "timeZone", "userIds", "sheet", "dataRows", "row", "value", "cellNo", "sheet", "textProvider", "wb", "sheet", "row", "rowData", "hourEntryDAO"], "SCS_VariableDeclaration": ["Workbook", "List", "Sheet", "List", "List", "List", "List", "BacklogHourEntry", "StoryHourEntry", "TaskHourEntry", "TimesheetExportRowData", "TimesheetExportRowData", "Row", "Cell", "Row", "int", "String", "Cell", "CreationHelper", "Font", "int", "int", "String", "Cell", "Cell"], "SCS_MemberReference": ["startDate", "timeZone", "startDate", "endDate", "timeZone", "endDate", "backlogIds", "startDate", "endDate", "timeZone", "userIds", "workbook", "plainReport", "textProvider", "plainReport", "reportData", "plainReport", "workbook", "hourEntryDAO", "backlogIds", "startDate", "endDate", "userIds", "hourEntryDAO", "backlogIds", "startDate", "endDate", "userIds", "hourEntryDAO", "backlogIds", "startDate", "endDate", "userIds", "backlogEntries", "entry", "storyEntries", "entry", "taskEntries", "entry", "timesheetData", "timeZone", "timesheetData", "timesheetData", "dataRows", "currentRow", "rowData", "cellNo", "value", "cell", "columnNumber", "length", "columnNumber", "COLUMN_NAMES", "columnNumber", "headerRow", "columnHeader", "columnNumber", "headerStyle", "dateColumnStyle", "dateColumnStyle", "DATE_FORMAT", "decimalFormat", "decimalFormat", "EFFORT_FORMAT", "headerStyle", "BOLDWEIGHT_BOLD", "headerStyle", "headerFont", "columnNum", "length", "columnNum", "columnNum", "columnNum", "MAX_COLUMN_SIZE", "columnNum", "columnWidth", "MAX_COLUMN_SIZE", "columnNum", "columnNum", "MAX_COLUMN_SIZE", "columnNum", "productName", "row", "productName", "PRODUCT_COLUMN_NUM", "row", "PROJECT_COLUMN_NUM", "row", "ITERATION_COLUMN_NUM", "row", "STORYID_COLUMN_NUM", "row", "STORY_COLUMN_NUM", "row", "TASKID_COLUMN_NUM", "row", "TASK_COLUMN_NUM", "row", "DESCRIPTION_COLUMN_NUM", "row", "USER_COLUMN_NUM", "DATE_COLUMN_NUM", "dateColumnStyle", "EFFORT_COLUMN_NUM", "CELL_TYPE_NUMERIC", "decimalFormat", "hourEntryDAO", "hourEntryDAO"], "CO": ["// if column has max size and column width exceeds that, resize the", "// column"], "CODE": "package fi.hut.soberit.agilefant.business.impl;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Set;\n\nimport org.apache.poi.hssf.usermodel.HSSFWorkbook;\nimport org.apache.poi.ss.usermodel.Cell;\nimport org.apache.poi.ss.usermodel.CellStyle;\nimport org.apache.poi.ss.usermodel.CreationHelper;\nimport org.apache.poi.ss.usermodel.Font;\nimport org.apache.poi.ss.usermodel.Row;\nimport org.apache.poi.ss.usermodel.Sheet;\nimport org.apache.poi.ss.usermodel.Workbook;\nimport org.joda.time.DateTime;\nimport org.joda.time.DateTimeZone;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport com.opensymphony.xwork2.TextProvider;\n\nimport fi.hut.soberit.agilefant.business.TimesheetExportBusiness;\nimport fi.hut.soberit.agilefant.db.HourEntryDAO;\nimport fi.hut.soberit.agilefant.model.BacklogHourEntry;\nimport fi.hut.soberit.agilefant.model.StoryHourEntry;\nimport fi.hut.soberit.agilefant.model.TaskHourEntry;\nimport fi.hut.soberit.agilefant.util.TimesheetExportRowData;\nimport fi.hut.soberit.agilefant.util.TimesheetExportRowDataComparator;\n\n@Service(\"timesheetExportBusiness\")\n@Transactional\npublic class TimesheetExportBusinessImpl implements TimesheetExportBusiness {\n\n    private CellStyle dateColumnStyle;\n    private CellStyle decimalFormat; \n    private CellStyle headerStyle;\n    @Autowired\n    private HourEntryDAO hourEntryDAO;\n    private DateTimeZone serverTimeZone = new DateTime().getZone();\n\n    public Workbook generateTimesheet(TextProvider textProvider,\n            Set<Integer> backlogIds, DateTime startDate, DateTime endDate, DateTimeZone timeZone,\n            Set<Integer> userIds) {\n        Workbook workbook = new HSSFWorkbook();\n        if (startDate != null && timeZone != null) {\n        \tstartDate = startDate.minusMillis(timeZone.getOffset(0)).plusMillis(serverTimeZone.getOffset(0));\n        }\n        if (endDate != null && timeZone != null) {\n        \tendDate = endDate.minusMillis(timeZone.getOffset(0)).plusMillis(serverTimeZone.getOffset(0));\n        }\n        List<TimesheetExportRowData> reportData = this.getTimesheetRows(\n        \t\tbacklogIds, startDate, endDate, timeZone, userIds);\n        Sheet plainReport = workbook.createSheet(\"Agilefant Timesheet\");\n        this.initializeColumnStyles(workbook);\n        this.renderHeader(plainReport, textProvider);\n        this.renderSheetData(plainReport, reportData);\n        this.sizeColumns(plainReport);\n        return workbook;\n    }\n\n    public List<TimesheetExportRowData> getTimesheetRows(\n            Set<Integer> backlogIds, DateTime startDate, DateTime endDate, DateTimeZone timeZone,\n            Set<Integer> userIds) {\n        List<BacklogHourEntry> backlogEntries = this.hourEntryDAO\n                .getBacklogHourEntriesByFilter(backlogIds, startDate, endDate,\n                        userIds);\n        List<StoryHourEntry> storyEntries = this.hourEntryDAO\n                .getStoryHourEntriesByFilter(backlogIds, startDate, endDate,\n                        userIds);\n        List<TaskHourEntry> taskEntries = this.hourEntryDAO\n                .getTaskHourEntriesByFilter(backlogIds, startDate, endDate,\n                        userIds);\n        List<TimesheetExportRowData> timesheetData = new ArrayList<TimesheetExportRowData>();\n\n        for (BacklogHourEntry entry : backlogEntries) {\n            timesheetData.add(new TimesheetExportRowData(entry));\n        }\n\n        for (StoryHourEntry entry : storyEntries) {\n            timesheetData.add(new TimesheetExportRowData(entry));\n        }\n\n        for (TaskHourEntry entry : taskEntries) {\n            timesheetData.add(new TimesheetExportRowData(entry));\n        }\n        for (TimesheetExportRowData data: timesheetData) {\n        \tdata.setTimeZone(timeZone);\n        }\n        Collections.sort(timesheetData, new TimesheetExportRowDataComparator());\n        return timesheetData;\n    }\n\n    protected void renderSheetData(Sheet sheet,\n            List<TimesheetExportRowData> dataRows) {\n        for (TimesheetExportRowData rowData : dataRows) {\n            Row currentRow = sheet.createRow(sheet.getLastRowNum() + 1);\n            this.setRowValues(currentRow, rowData);\n        }\n    }\n\n    protected Cell createCellWithValue(Row row, String value, int cellNo) {\n        Cell cell = row.createCell(cellNo);\n        cell.setCellValue(value);\n        return cell;\n    }\n\n    protected void renderHeader(Sheet sheet, TextProvider textProvider) {\n        Row headerRow = sheet.createRow(0);\n        for (int columnNumber = 0; columnNumber < COLUMN_NAMES.length; columnNumber++) {\n            String columnHeader = textProvider\n                    .getText(COLUMN_NAMES[columnNumber]);\n            Cell currentCell = createCellWithValue(headerRow, columnHeader, columnNumber);\n            currentCell.setCellStyle(this.headerStyle);\n        }\n    }\n\n    protected void initializeColumnStyles(Workbook wb) {\n        this.dateColumnStyle = wb.createCellStyle();\n        CreationHelper cHelper = wb.getCreationHelper();\n        this.dateColumnStyle.setDataFormat(cHelper\n                .createDataFormat().getFormat(DATE_FORMAT));\n        this.decimalFormat = wb.createCellStyle();\n        this.decimalFormat.setDataFormat(cHelper.\n                createDataFormat().getFormat(EFFORT_FORMAT));\n        this.headerStyle = wb.createCellStyle();\n        Font headerFont = wb.createFont();\n        headerFont.setBoldweight(Font.BOLDWEIGHT_BOLD);\n        this.headerStyle.setFont(headerFont);\n    }\n\n    protected void sizeColumns(Sheet sheet) {\n        for (int columnNum = 0; columnNum < MAX_COLUMN_SIZE.length; columnNum++) {\n            sheet.autoSizeColumn(columnNum);\n            int columnWidth = sheet.getColumnWidth(columnNum);\n            // if column has max size and column width exceeds that, resize the\n            // column\n            if (MAX_COLUMN_SIZE[columnNum] > 0\n                    && columnWidth > MAX_COLUMN_SIZE[columnNum]) {\n                sheet.setColumnWidth(columnNum, MAX_COLUMN_SIZE[columnNum]);\n            }\n        }\n    }\n\n    protected void setRowValues(Row row, TimesheetExportRowData rowData) {\n        String productName = \"\";\n        if (rowData.getProduct() != null)\n            productName = rowData.getProduct().getName();\n        \n        createCellWithValue(row, productName,\n                PRODUCT_COLUMN_NUM);\n        if (rowData.getProject() != null) {\n            createCellWithValue(row, rowData.getProject().getName(),\n                    PROJECT_COLUMN_NUM);\n        }\n        if (rowData.getIteration() != null) {\n            createCellWithValue(row, rowData.getIteration().getName(),\n                    ITERATION_COLUMN_NUM);\n        }\n        if (rowData.getStory() != null) {\n        \tcreateCellWithValue(row, \"\"+rowData.getStory().getId(),\n                    STORYID_COLUMN_NUM);\n            createCellWithValue(row, rowData.getStory().getName(),\n                    STORY_COLUMN_NUM);\n        }\n        if (rowData.getTask() != null) {\n        \tcreateCellWithValue(row, \"\"+rowData.getTask().getId(),\n                    TASKID_COLUMN_NUM);\n            createCellWithValue(row, rowData.getTask().getName(),\n                    TASK_COLUMN_NUM);\n        }\n        createCellWithValue(row, rowData.getDescription(),\n                DESCRIPTION_COLUMN_NUM);\n        createCellWithValue(row, rowData.getUser().getFullName(),\n                USER_COLUMN_NUM);\n        Cell dateColumn = row.createCell(DATE_COLUMN_NUM);\n        dateColumn.setCellStyle(this.dateColumnStyle);\n        dateColumn.setCellValue(rowData.getDate().toDate());\n        Cell effortColumn = row.createCell(EFFORT_COLUMN_NUM);\n        effortColumn.setCellType(Cell.CELL_TYPE_NUMERIC);\n        effortColumn.setCellValue((double)rowData.getEffort()/60.0);\n        effortColumn.setCellStyle(this.decimalFormat);\n    }\n\n    public void setHourEntryDAO(HourEntryDAO hourEntryDAO) {\n        this.hourEntryDAO = hourEntryDAO;\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\impl\\\\TransferObjectBusinessImpl.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["TransferObjectBusinessImpl"], "AN": ["backlogBusiness", "productBusiness", "projectBusiness", "hourEntryBusiness", "userBusiness", "teamBusiness", "iterationBusiness", "storyBusiness", "authorizationBusiness"], "SCS_VariableDeclarator": ["backlogBusiness", "productBusiness", "projectBusiness", "hourEntryBusiness", "userBusiness", "teamBusiness", "iterationBusiness", "storyBusiness", "authorizationBusiness", "taskTO", "returned", "task", "taskTO", "returned", "assignment", "team", "returned", "assignment", "loggedUser", "allUsers", "teams", "team", "users", "user", "autocompleteData", "user", "curNode", "loggedUser", "user", "allTeams", "autocompleteData", "team", "userIds", "u", "curNode", "allBacklogs", "filteredBacklogs", "original", "filterBy", "backlog", "autocompleteData", "allBacklogs", "autocompleteData", "allBacklogs", "autocompleteData", "autocompleteData", "autocompleteData", "blog", "name", "node", "parent", "name", "blog", "interval", "currentAndFutureIterations", "autocompleteData", "blog", "name", "node", "task", "toReturn", "story", "toReturn", "to", "storyTasks", "taskTos", "t", "returned", "stories", "storyTOs", "tasksWithoutStory", "task", "story", "story", "loggedUser", "user"], "MN": ["fillInEffortSpent", "fillInEffortSpent", "constructTaskTO", "constructStoryTO", "constructIterationTO", "constructProjectTO", "constructUserAutocompleteData", "constructTeamAutocompleteData", "constructBacklogAutocompleteData", "checkAccess", "constructProductAutocompleteData", "constructProjectAutocompleteData", "constructBacklogAndIterationAutocompleteData", "getBacklogDataRecurseNames", "recurseBacklogNameWithParents", "getBacklogScheduleStatus", "constructCurrentIterationAutocompleteData", "constructQueuedDailyWorkTaskTO", "constructQueuedStoryTO", "createStoryTOWithTaskTOs", "constructAssignedWorkTO", "setHourEntryBusiness", "setUserBusiness", "setTeamBusiness", "setBacklogBusiness", "setIterationBusiness", "setProductBusiness", "setProjectBusiness", "setStoryBusiness", "setAuthorizationBusiness", "getloggedUser"], "PN": ["taskTO", "storyTO", "task", "story", "iteration", "project", "listUserIds", "backlogId", "bl", "backlogId", "allBacklogs", "blog", "backlog", "entry", "entry", "story", "tasks", "assignedStories", "hourEntryBusiness", "userBusiness", "teamBusiness", "backlogBusiness", "iterationBusiness", "productBusiness", "projectBusiness", "storyBusiness", "authorizationBusiness"], "SCS_ClassReference": ["taskTO", "hourEntryBusiness", "taskTO", "storyTO", "hourEntryBusiness", "storyTO", "", "returned", "returned", "storyBusiness", "story", null, "returned", null, "returned", null, "returned", "iteration", "returned", null, "assignment", "returned", "iteration", "returned", null, "returned", null, "returned", "project", "returned", null, "assignment", "", "loggedUser", null, "loggedUser", "team", "allUsers", "allUsers", "users", "teams", "User", "user", "user", "user", "curNode", "user", "user", "curNode", "autocompleteData", "SecurityUtil", "userBusiness", "loggedUser", "user", null, "user", "team", "userIds", "u", "Team", "team", "team", "curNode", "team", "curNode", "autocompleteData", null, null, null, null, "filteredBacklogs", "", null, "bl", "SecurityUtil", null, "", null, "", "", "autocompleteData", "", "", "", "Backlog", "blog", "node", "autocompleteData", "node", "blog", "blog", "parent", "parent", "blog", "blog", "interval", "interval", null, "", "", "Backlog", "blog", "node", "autocompleteData", "entry", "", "toReturn", "entry", "entry", "", "toReturn", "entry", "", "to", "taskTos", "", "to", "to", "storyBusiness", "task", "task", "stories", "stories", "storyTOs", "", "tasksWithoutStory", "", "stories", "story", null, "stories", "storyTOs", "", "returned", "returned", "SecurityUtil", "userBusiness", "loggedUser"], "SCS_MethodInvocation": ["setEffortSpent", "calculateSum", "getHourEntries", "setEffortSpent", "calculateSum", "getHourEntries", "fillInEffortSpent", "setTasks", "setMetrics", "calculateMetrics", "getTasks", "constructTaskTO", "getTasks", "add", "setScheduleStatus", "getBacklogScheduleStatus", "setAssignees", "getAssignments", "getAssignees", "add", "getUser", "setTeams", "getTeams", "getTeams", "add", "setScheduleStatus", "getBacklogScheduleStatus", "setAssignees", "getAssignments", "getAssignees", "add", "getUser", "getloggedUser", "isAdmin", "retrieveAll", "getTeams", "getUsers", "contains", "add", "clear", "clear", "getId", "getFullName", "isEnabled", "setMatchedString", "getFullName", "getLoginName", "setOriginalObject", "add", "getLoggedUser", "retrieve", "getId", "isAdmin", "retrieveAll", "getTeams", "getUsers", "add", "getId", "getId", "getName", "setMatchedString", "getName", "setOriginalObject", "add", "retrieveAll", "retrieve", "getParentProduct", "getParentProduct", "add", "getBacklogDataRecurseNames", "isBacklogAccessible", "getId", "getLoggedUser", "retrieveAll", "getBacklogDataRecurseNames", "retrieveAll", "getBacklogDataRecurseNames", "constructBacklogAutocompleteData", "addAll", "constructCurrentIterationAutocompleteData", "checkAccess", "recurseBacklogNameWithParents", "getId", "setMatchedString", "add", "setOriginalObject", "getParent", "getName", "getName", "getParent", "getStartDate", "getEndDate", "isBeforeNow", "isAfterNow", "retrieveCurrentAndFutureIterations", "checkAccess", "recurseBacklogNameWithParents", "getId", "setOriginalObject", "add", "getTask", "fillInEffortSpent", "setWorkQueueRank", "getRank", "getStory", "fillInEffortSpent", "setWorkQueueRank", "getRank", "constructStoryTO", "getTasks", "add", "constructTaskTO", "setTasks", "setMetrics", "calculateMetrics", "getStory", "getStory", "contains", "add", "add", "createStoryTOWithTaskTOs", "add", "constructTaskTO", "contains", "getState", "equals", "add", "add", "createStoryTOWithTaskTOs", "setTasksWithoutStory", "setStories", "getLoggedUser", "retrieve", "getId"], "SCS_VariableDeclaration": ["TaskTO", "StoryTO", "Task", "TaskTO", "IterationTO", "Assignment", "Team", "ProjectTO", "Assignment", "User", "Collection", "Collection", "Team", "Collection", "User", "List", "User", "AutocompleteDataNode", "User", "User", "Collection", "List", "Team", "Set", "User", "AutocompleteDataNode", "Collection", "Collection", "Backlog", "Product", "Backlog", "List", "Collection", "List", "Collection", "List", "List", "List", "Backlog", "String", "AutocompleteDataNode", "Backlog", "String", "Schedulable", "Interval", "Collection", "List", "Backlog", "String", "AutocompleteDataNode", "Task", "DailyWorkTaskTO", "Story", "StoryTO", "StoryTO", "Set", "Set", "Task", "AssignedWorkTO", "Set", "List", "List", "Task", "Story", "Story", "User", "User"], "SCS_MemberReference": ["task", "taskTO", "taskTO", "story", "story", "task", "taskTO", "returned", "iteration", "iteration", "team", "returned", "project", "project", "returned", "allUsers", "userBusiness", "teams", "teams", "users", "users", "user", "user", "allUsers", "user", "curNode", "autocompleteData", "allTeams", "teamBusiness", "allTeams", "allTeams", "allTeams", "listUserIds", "userIds", "userIds", "team", "curNode", "autocompleteData", "backlogBusiness", "backlogId", "backlogBusiness", "backlogId", "backlogBusiness", "original", "allBacklogs", "backlogBusiness", "backlog", "filterBy", "backlog", "allBacklogs", "filteredBacklogs", "allBacklogs", "autocompleteData", "authorizationBusiness", "productBusiness", "allBacklogs", "autocompleteData", "projectBusiness", "allBacklogs", "autocompleteData", "backlogId", "autocompleteData", "allBacklogs", "blog", "blog", "blog", "name", "name", "node", "blog", "autocompleteData", "parent", "name", "name", "parent", "name", "backlog", "ONGOING", "backlog", "PAST", "FUTURE", "ONGOING", "iterationBusiness", "currentAndFutureIterations", "blog", "blog", "name", "blog", "node", "autocompleteData", "task", "toReturn", "toReturn", "story", "toReturn", "toReturn", "story", "storyTasks", "t", "taskTos", "to", "to", "tasks", "story", "story", "story", "task", "assignedStories", "story", "story", "story", "tasksWithoutStory", "storyTOs", "returned", "hourEntryBusiness", "hourEntryBusiness", "userBusiness", "userBusiness", "teamBusiness", "teamBusiness", "backlogBusiness", "backlogBusiness", "iterationBusiness", "iterationBusiness", "productBusiness", "productBusiness", "projectBusiness", "projectBusiness", "storyBusiness", "storyBusiness", "authorizationBusiness", "authorizationBusiness", "user"], "CO": ["/** {@inheritDoc} */", "/** {@inheritDoc} */", "/** {@inheritDoc} */", "/** {@inheritDoc} */", "// TODO: Why user.getTeams() shows null?", "/** {@inheritDoc} */", "/** {@inheritDoc} */", "/** {@inheritDoc} */", "/** {@inheritDoc} */", "// iterations should not be included in backlogs list.", "/** {@inheritDoc} */", "/** {@inheritDoc} */", "/*\n     * GETTERS AND SETTERS\n     */"], "CODE": "package fi.hut.soberit.agilefant.business.impl;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport org.joda.time.Interval;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport fi.hut.soberit.agilefant.business.AuthorizationBusiness;\nimport fi.hut.soberit.agilefant.business.BacklogBusiness;\nimport fi.hut.soberit.agilefant.business.HourEntryBusiness;\nimport fi.hut.soberit.agilefant.business.IterationBusiness;\nimport fi.hut.soberit.agilefant.business.ProductBusiness;\nimport fi.hut.soberit.agilefant.business.ProjectBusiness;\nimport fi.hut.soberit.agilefant.business.StoryBusiness;\nimport fi.hut.soberit.agilefant.business.TeamBusiness;\nimport fi.hut.soberit.agilefant.business.TransferObjectBusiness;\nimport fi.hut.soberit.agilefant.business.UserBusiness;\nimport fi.hut.soberit.agilefant.model.Assignment;\nimport fi.hut.soberit.agilefant.model.Backlog;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.Product;\nimport fi.hut.soberit.agilefant.model.Project;\nimport fi.hut.soberit.agilefant.model.Schedulable;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.Task;\nimport fi.hut.soberit.agilefant.model.Team;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.model.WhatsNextEntry;\nimport fi.hut.soberit.agilefant.model.WhatsNextStoryEntry;\nimport fi.hut.soberit.agilefant.security.SecurityUtil;\nimport fi.hut.soberit.agilefant.transfer.AssignedWorkTO;\nimport fi.hut.soberit.agilefant.transfer.AutocompleteDataNode;\nimport fi.hut.soberit.agilefant.transfer.DailyWorkTaskTO;\nimport fi.hut.soberit.agilefant.transfer.IterationTO;\nimport fi.hut.soberit.agilefant.transfer.ProjectTO;\nimport fi.hut.soberit.agilefant.transfer.ScheduleStatus;\nimport fi.hut.soberit.agilefant.transfer.StoryTO;\nimport fi.hut.soberit.agilefant.transfer.TaskTO;\n\n@Service(\"transferObjectBusiness\")\n@Transactional(readOnly = true)\npublic class TransferObjectBusinessImpl implements TransferObjectBusiness {\n\n    @Autowired\n    private BacklogBusiness backlogBusiness;\n    \n    @Autowired\n    private ProductBusiness productBusiness;\n    \n    @Autowired\n    private ProjectBusiness projectBusiness;\n    \n    @Autowired\n    private HourEntryBusiness hourEntryBusiness;\n    \n    @Autowired\n    private UserBusiness userBusiness;\n    \n    @Autowired\n    private TeamBusiness teamBusiness;\n\n    @Autowired\n    private IterationBusiness iterationBusiness;\n    \n    @Autowired\n    private StoryBusiness storyBusiness;\n   \n    @Autowired\n    private AuthorizationBusiness authorizationBusiness;\n  \n    private void fillInEffortSpent(TaskTO taskTO) {\n        taskTO.setEffortSpent(hourEntryBusiness.calculateSum(taskTO.getHourEntries()));\n    }\n    \n    private void fillInEffortSpent(StoryTO storyTO) {\n        storyTO.setEffortSpent(hourEntryBusiness.calculateSum(storyTO.getHourEntries()));\n    }\n    \n    /** {@inheritDoc} */\n    @Transactional(readOnly = true)\n    public TaskTO constructTaskTO(Task task) {\n        TaskTO taskTO = new TaskTO(task);\n        fillInEffortSpent(taskTO);\n        return taskTO;\n    }\n    \n    /** {@inheritDoc} */\n    @Transactional(readOnly = true)\n    public StoryTO constructStoryTO(Story story) {\n        StoryTO returned = new StoryTO(story);\n        returned.setTasks(new HashSet<Task>());\n        \n        returned.setMetrics(storyBusiness.calculateMetrics(story));\n        \n        for (Task task : story.getTasks()) {\n            TaskTO taskTO = this.constructTaskTO(task);\n            returned.getTasks().add(taskTO);\n        }\n        \n        return returned;\n    }\n    \n    @Transactional(readOnly = true)\n    public IterationTO constructIterationTO(Iteration iteration) {\n        IterationTO returned = new IterationTO(iteration);\n        returned.setScheduleStatus(this.getBacklogScheduleStatus(iteration));\n        \n        returned.setAssignees(new HashSet<User>());\n        \n        for(Assignment assignment : iteration.getAssignments()) {\n            returned.getAssignees().add(assignment.getUser());\n        }\n        \n        returned.setTeams(new HashSet<Team>());\n        \n        for(Team team : iteration.getTeams()) {\n            returned.getTeams().add(team);\n        }\n        \n        return returned;\n    }\n    \n    @Transactional(readOnly = true)\n    public ProjectTO constructProjectTO(Project project) {\n        ProjectTO returned = new ProjectTO(project);\n        returned.setScheduleStatus(this.getBacklogScheduleStatus(project));        \n        returned.setAssignees(new HashSet<User>());\n        \n        for(Assignment assignment : project.getAssignments()) {\n            returned.getAssignees().add(assignment.getUser());\n        }\n        \n        return returned;\n    }\n    \n    /** {@inheritDoc} */\n    @Transactional(readOnly = true)\n    public List<AutocompleteDataNode> constructUserAutocompleteData() {\n        User loggedUser = getloggedUser();\n        Collection<User> allUsers = new ArrayList<User>();\n        if (loggedUser.isAdmin()) {\n            allUsers = this.userBusiness.retrieveAll();\n        } else {\n            Collection<Team> teams = loggedUser.getTeams();\n            if (teams != null)\n                for (Team team : teams) {\n                    Collection<User> users = team.getUsers();\n                    if (users != null)\n                        for (User user : users) {\n                            if (!allUsers.contains(user)) {\n                                allUsers.add(user);\n                            }\n                        }\n                    users.clear();\n                }\n            teams.clear();\n        }\n        List<AutocompleteDataNode> autocompleteData = new ArrayList<AutocompleteDataNode>();\n        for(User user : allUsers) {\n            AutocompleteDataNode curNode = new AutocompleteDataNode(User.class,\n                    user.getId(), user.getFullName(), user.isEnabled());\n            curNode.setMatchedString(user.getFullName() + \" \" + user.getLoginName());\n            curNode.setOriginalObject(user);\n            autocompleteData.add(curNode);\n        }\n        return autocompleteData;\n    }\n    \n    /** {@inheritDoc} */\n    @Transactional(readOnly = true)\n    public List<AutocompleteDataNode> constructTeamAutocompleteData(boolean listUserIds) {\n        User loggedUser = SecurityUtil.getLoggedUser();\n        User user = userBusiness.retrieve(loggedUser.getId()); // TODO: Why user.getTeams() shows null?\n        Collection<Team> allTeams = new ArrayList<Team>();\n        if (user.isAdmin()) {\n            allTeams = this.teamBusiness.retrieveAll();\n        } else {\n            allTeams = user.getTeams();\n        }\n        List<AutocompleteDataNode> autocompleteData = new ArrayList<AutocompleteDataNode>();\n        if (allTeams != null)\n        for(Team team : allTeams) {\n                Set<Integer> userIds = null;\n                if (listUserIds) {\n                    userIds = new HashSet<Integer>();\n                    for (User u : team.getUsers()) {\n                        userIds.add(u.getId());\n                    }\n                }\n                AutocompleteDataNode curNode = new AutocompleteDataNode(Team.class,\n                        team.getId(), team.getName(), userIds);\n                curNode.setMatchedString(team.getName());\n                curNode.setOriginalObject(team);\n                autocompleteData.add(curNode);\n        }\n        return autocompleteData;\n    }\n    \n\n    /** {@inheritDoc} */\n    @Transactional(readOnly = true)\n    public List<AutocompleteDataNode> constructBacklogAutocompleteData(Integer backlogId) {\n        Collection<Backlog> allBacklogs = this.backlogBusiness.retrieveAll();\n        if (backlogId != null) {\n            Collection<Backlog> filteredBacklogs = new ArrayList<Backlog>();\n            Backlog original = this.backlogBusiness.retrieve(backlogId);\n            Product filterBy = this.backlogBusiness.getParentProduct(original);\n            for (Backlog backlog : allBacklogs) {\n                if (this.backlogBusiness.getParentProduct(backlog) == filterBy) {\n                    filteredBacklogs.add(backlog);\n                }\n            }\n            allBacklogs = filteredBacklogs;\n        }\n        List<AutocompleteDataNode> autocompleteData = getBacklogDataRecurseNames(allBacklogs);\n        return autocompleteData; \n    }\n\n    private boolean checkAccess(Backlog bl){\n        return this.authorizationBusiness.isBacklogAccessible(bl.getId(), SecurityUtil.getLoggedUser());\n    }\n\n    /** {@inheritDoc} */\n    @Transactional(readOnly = true)\n    public List<AutocompleteDataNode> constructProductAutocompleteData() {\n        Collection<Product> allBacklogs = this.productBusiness.retrieveAll();\n        List<AutocompleteDataNode> autocompleteData = getBacklogDataRecurseNames(allBacklogs);\n        return autocompleteData; \n    }\n    \n    /** {@inheritDoc} */\n    @Transactional(readOnly = true)\n    public List<AutocompleteDataNode> constructProjectAutocompleteData() {\n        Collection<Project> allBacklogs = this.projectBusiness.retrieveAll();\n        List<AutocompleteDataNode> autocompleteData = getBacklogDataRecurseNames(allBacklogs);\n        return autocompleteData; \n    }\n\n    \n    /** {@inheritDoc} */\n    @Transactional(readOnly = true)\n    public List<AutocompleteDataNode> constructBacklogAndIterationAutocompleteData(Integer backlogId) {\n        List<AutocompleteDataNode> autocompleteData = constructBacklogAutocompleteData(backlogId);\n        autocompleteData.addAll(constructCurrentIterationAutocompleteData());\n        return autocompleteData; \n    }\n    \n    private List<AutocompleteDataNode> getBacklogDataRecurseNames(\n            Collection<? extends Backlog> allBacklogs) {\n        List<AutocompleteDataNode> autocompleteData = new ArrayList<AutocompleteDataNode>();\n        \n        for (Backlog blog : allBacklogs) { \n            if(blog instanceof Iteration){\n                continue; // iterations should not be included in backlogs list.\n            }\n            if (checkAccess(blog)) {\n                String name = recurseBacklogNameWithParents(blog);\n                AutocompleteDataNode node = new AutocompleteDataNode(Backlog.class, blog.getId(), name);\n                node.setMatchedString(name);\n                autocompleteData.add(node);\n                node.setOriginalObject(blog);\n            } \n        }\n        \n        return autocompleteData;\n    }\n    \n    private String recurseBacklogNameWithParents(Backlog blog) {\n        Backlog parent = blog.getParent();\n        String name = blog.getName();\n        while (parent != null) {\n            name = parent.getName() + \" > \" + name;\n            parent = parent.getParent();\n        }\n        return name;\n    }\n    \n    \n    \n   \n    @Transactional(readOnly = true)\n    public ScheduleStatus getBacklogScheduleStatus(Backlog backlog) {\n        if (backlog instanceof Product) {\n            return ScheduleStatus.ONGOING;\n        }\n        Schedulable blog = (Schedulable)backlog;\n        Interval interval = new Interval(blog.getStartDate(), blog.getEndDate());\n        if (interval.isBeforeNow()) {\n            return ScheduleStatus.PAST;\n        }\n        else if (interval.isAfterNow()) {\n            return ScheduleStatus.FUTURE;\n        }\n        return ScheduleStatus.ONGOING;\n    }\n    \n    @Transactional(readOnly = true)\n    public List<AutocompleteDataNode> constructCurrentIterationAutocompleteData() {\n        Collection<Iteration> currentAndFutureIterations = this.iterationBusiness.retrieveCurrentAndFutureIterations();\n        List<AutocompleteDataNode> autocompleteData = new ArrayList<AutocompleteDataNode>();\n        for (Backlog blog : currentAndFutureIterations) {\n            if (checkAccess(blog)) {\n                String name = recurseBacklogNameWithParents(blog);\n                AutocompleteDataNode node = new AutocompleteDataNode(Backlog.class,\n                        blog.getId(), name);\n                node.setOriginalObject(blog);\n                autocompleteData.add(node);\n            }\n        }\n        return autocompleteData; \n    }\n\n    \n    /** {@inheritDoc} */\n    @Transactional(readOnly = true)\n    public DailyWorkTaskTO constructQueuedDailyWorkTaskTO(WhatsNextEntry entry) {\n        Task task = entry.getTask();\n        DailyWorkTaskTO toReturn = new DailyWorkTaskTO(task);\n        fillInEffortSpent(toReturn);\n        toReturn.setWorkQueueRank(entry.getRank());\n\n        return toReturn;\n    }\n    \n    /** {@inheritDoc} */\n    @Transactional(readOnly = true)\n    public StoryTO constructQueuedStoryTO(WhatsNextStoryEntry entry) {\n        Story story = entry.getStory();\n        StoryTO toReturn = new StoryTO(story);\n        fillInEffortSpent(toReturn);\n        toReturn.setWorkQueueRank(entry.getRank());\n\n        return toReturn;\n    }\n    \n    protected StoryTO createStoryTOWithTaskTOs(Story story) {\n        StoryTO to = constructStoryTO(story);\n        Set<Task> storyTasks = to.getTasks();\n        Set<Task> taskTos = new HashSet<Task>();\n        \n        for (Task t: storyTasks) {\n            taskTos.add(constructTaskTO(t));\n        }\n        \n        to.setTasks(taskTos);\n\n        to.setMetrics(storyBusiness.calculateMetrics(to));\n        return to;\n    }\n    \n    public AssignedWorkTO constructAssignedWorkTO(Collection<Task> tasks, Collection<Story> assignedStories) {\n        AssignedWorkTO returned = new AssignedWorkTO();\n        \n        Set<Story> stories = new HashSet<Story>();\n        List<StoryTO> storyTOs = new ArrayList<StoryTO>();\n        List<Task> tasksWithoutStory = new ArrayList<Task>();\n        \n        for (Task task: tasks) {\n            Story story = task.getStory();\n            if (task.getStory() != null) {\n                if (stories.contains(story)) {\n                    continue;\n                }\n                \n                stories.add(story);\n                storyTOs.add(createStoryTOWithTaskTOs(story));\n            }\n            else {\n                tasksWithoutStory.add(constructTaskTO(task));\n            }\n        }\n        \n        for (Story story: assignedStories) {\n            if (! stories.contains(story)) {\n                if (!story.getState().equals(\"Done\")) {\n                    stories.add(story);\n                    storyTOs.add(createStoryTOWithTaskTOs(story));\n                }\n            }\n        }\n        \n        returned.setTasksWithoutStory(tasksWithoutStory);\n        returned.setStories(storyTOs);\n        return returned;\n    }\n    \n    /*\n     * GETTERS AND SETTERS\n     */\n    \n    public void setHourEntryBusiness(HourEntryBusiness hourEntryBusiness) {\n        this.hourEntryBusiness = hourEntryBusiness;\n    }\n\n    public void setUserBusiness(UserBusiness userBusiness) {\n        this.userBusiness = userBusiness;\n    }\n\n    public void setTeamBusiness(TeamBusiness teamBusiness) {\n        this.teamBusiness = teamBusiness;\n    }\n\n    public void setBacklogBusiness(BacklogBusiness backlogBusiness) {\n        this.backlogBusiness = backlogBusiness;\n    }\n\n    public void setIterationBusiness(IterationBusiness iterationBusiness) {\n        this.iterationBusiness = iterationBusiness;\n    }\n\n    public void setProductBusiness(ProductBusiness productBusiness) {\n        this.productBusiness = productBusiness;\n    }\n\n    public void setProjectBusiness(ProjectBusiness projectBusiness) {\n        this.projectBusiness = projectBusiness;\n    }\n\n    public void setStoryBusiness(StoryBusiness storyBusiness) {\n        this.storyBusiness = storyBusiness;\n    }\n    \n    public void setAuthorizationBusiness(AuthorizationBusiness authorizationBusiness) {\n        this.authorizationBusiness = authorizationBusiness;\n    }\n    \n    private User getloggedUser() {\n        User loggedUser = SecurityUtil.getLoggedUser();\n        User user = userBusiness.retrieve(loggedUser.getId());\n        return user;\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\impl\\\\UserBusinessImpl.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["UserBusinessImpl"], "AN": ["userDAO", "teamBusiness", "passwordEncoder"], "SCS_VariableDeclarator": ["userDAO", "teamBusiness", "passwordEncoder", "teams", "tid", "returned", "newId", "holiday", "iterator", "deductDays", "worktime", "workDuration", "user", "user", "user", "user"], "SCS_ConstructorDeclaration": ["UserBusinessImpl"], "SCS_ClassReference": ["User", "userDAO", "userDAO", "userDAO", "userDAO", "", "", "", "teams", "teamBusiness", "data", "data", "userDAO", "userDAO", "userDAO", "password", "password", "data", null, "user", "holiday", null, "interval", "iterator", "interval", "iterator", "iterator", null, "iterator", "iterator", "interval", "interval", null, "worktime", null, "workDuration", null, null, "userDAO", "user", "userDAO", "user", "userDAO", "user", "", "user", null], "MN": ["setUserDAO", "setTeamBusiness", "setPasswordEncoder", "retrieveByLoginName", "isLoginNameUnique", "getDisabledUsers", "getEnabledUsers", "storeUser", "changeTeams", "storeOrCreate", "changePassword", "isDayUserHoliday", "calculateWorktimePerPeriod", "calculateWorkHoursPerPeriod", "disableUser", "enableUser", "setAdmin", "retrieveByCredentials"], "PN": ["userDAO", "teamBusiness", "passwordEncoder", "loginName", "loginName", "data", "teamIds", "password", "passwordConfirm", "data", "teamIds", "data", "data", "password", "passwordConfirm", "date", "user", "user", "interval", "user", "interval", "id", "id", "id", "admin", "loginName", "password"], "SCS_MemberReference": ["genericDAO", "userDAO", "userDAO", "userDAO", "teamBusiness", "teamBusiness", "passwordEncoder", "passwordEncoder", "loginName", "loginName", "data", "password", "passwordConfirm", "data", "teamIds", "data", "teamIds", "teamIds", "tid", "teams", "data", "returned", "newId", "data", "returned", "data", "returned", "password", "passwordConfirm", "passwordEncoder", "password", "date", "SATURDAY", "SUNDAY", "deductDays", "user", "deductDays", "deductDays", "worktime", "user", "interval", "id", "id", "id", "admin", "loginName", "user", "password", "user"], "SCS_MethodInvocation": ["getByLoginName", "getByLoginNameIgnoreCase", "listUsersByEnabledStatus", "listUsersByEnabledStatus", "changePassword", "changeTeams", "storeOrCreate", "add", "retrieve", "setTeams", "getId", "create", "get", "store", "equals", "equalsIgnoreCase", "setPassword", "encode", "getHolidays", "getInterval", "contains", "getStart", "isBefore", "getEnd", "getDayOfWeek", "getDayOfWeek", "isDayUserHoliday", "toDateTime", "addDays", "getStart", "getEnd", "minusDays", "getMillis", "calculateWorktimePerPeriod", "toStandardSeconds", "toStandardHours", "getHours", "get", "setEnabled", "get", "setEnabled", "get", "setAdmin", "retrieveByLoginName", "getPassword", "equals"], "SCS_VariableDeclaration": ["Collection", "Integer", "User", "int", "Holiday", "MutableDateTime", "int", "Duration", "Duration", "User", "User", "User", "User"], "CO": ["/**\n * \n * @author rjokelai\n * \n */", "//if interval ends on a holiday at 00:00 the result would be negative"], "CODE": "package fi.hut.soberit.agilefant.business.impl;\n\nimport java.util.Collection;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport org.joda.time.DateTime;\nimport org.joda.time.DateTimeConstants;\nimport org.joda.time.Duration;\nimport org.joda.time.Interval;\nimport org.joda.time.MutableDateTime;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\nimport org.springframework.security.crypto.password.PasswordEncoder;\n\nimport fi.hut.soberit.agilefant.business.TeamBusiness;\nimport fi.hut.soberit.agilefant.business.UserBusiness;\nimport fi.hut.soberit.agilefant.db.UserDAO;\nimport fi.hut.soberit.agilefant.model.ExactEstimate;\nimport fi.hut.soberit.agilefant.model.Holiday;\nimport fi.hut.soberit.agilefant.model.Team;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.security.SecurityUtil;\n\n/**\n * \n * @author rjokelai\n * \n */\n@Service(\"userBusiness\")\n@Transactional\npublic class UserBusinessImpl extends GenericBusinessImpl<User> implements\n        UserBusiness {\n\n    private UserDAO userDAO;\n    \n    private TeamBusiness teamBusiness;\n\n    @Autowired\n    private PasswordEncoder passwordEncoder;\n    \n    public UserBusinessImpl() {\n        super(User.class);\n    }\n    \n    @Autowired\n    public void setUserDAO(UserDAO userDAO) {\n        this.genericDAO = userDAO;\n        this.userDAO = userDAO;\n    }\n\n    @Autowired\n    public void setTeamBusiness(TeamBusiness teamBusiness) {\n        this.teamBusiness = teamBusiness;\n    }\n    \n    public void setPasswordEncoder(PasswordEncoder passwordEncoder) {\n        this.passwordEncoder = passwordEncoder;\n    }\n\n    @Transactional(readOnly = true)\n    public User retrieveByLoginName(String loginName) {\n        return userDAO.getByLoginName(loginName);\n    }\n\n    @Transactional(readOnly = true)\n    public boolean isLoginNameUnique(String loginName) {\n        return userDAO.getByLoginNameIgnoreCase(loginName) == null;\n    }\n    \n    @Transactional(readOnly = true)\n    public List<User> getDisabledUsers() {\n        return userDAO.listUsersByEnabledStatus(false);\n    }\n\n    @Transactional(readOnly = true)\n    public List<User> getEnabledUsers() {\n        return userDAO.listUsersByEnabledStatus(true);\n    }\n\n    @Transactional\n    public User storeUser(User data, Set<Integer> teamIds, String password, String passwordConfirm) {\n        \n        changePassword(data, password, passwordConfirm);\n        changeTeams(data, teamIds);\n        \n        return storeOrCreate(data);\n    }\n\n    private void changeTeams(User data, Set<Integer> teamIds) {\n        if (teamIds != null) {\n            Collection<Team> teams = new HashSet<Team>();\n            for (Integer tid : teamIds) {\n                teams.add(teamBusiness.retrieve(tid));\n            }\n            data.setTeams(teams);\n        }\n    }\n\n    private User storeOrCreate(User data) {\n        User returned;\n        if (data.getId() == 0) {\n            int newId = (Integer)userDAO.create(data);\n            returned = userDAO.get(newId);\n        }\n        else {\n            userDAO.store(data);\n            returned = data;\n        }\n        return returned;\n    }\n\n    private void changePassword(User data, String password,\n            String passwordConfirm) {\n        if (password != null) {\n            if (!password.equals(passwordConfirm)) {\n                throw new IllegalArgumentException(\"Passwords don't match\");\n            }\n            else if (!password.equalsIgnoreCase(\"\")) {\n                data.setPassword(this.passwordEncoder.encode(password));    \n            }\n        }\n    }\n    \n    public boolean isDayUserHoliday(DateTime date, User user) {\n        for(Holiday holiday : user.getHolidays()) {\n            if(holiday.getInterval().contains(date)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    \n    public Duration calculateWorktimePerPeriod(User user, Interval interval) {\n        MutableDateTime iterator = new MutableDateTime(interval.getStart());\n        int deductDays = 0;\n        \n        while(iterator.isBefore(interval.getEnd())) {\n            if(iterator.getDayOfWeek() == DateTimeConstants.SATURDAY || iterator.getDayOfWeek() == DateTimeConstants.SUNDAY) {\n                deductDays++;\n            }\n            if(this.isDayUserHoliday(iterator.toDateTime(), user)) {\n                deductDays++;\n            }\n            iterator.addDays(1);\n        }\n        //if interval ends on a holiday at 00:00 the result would be negative\n        Duration worktime = new Duration(interval.getStart(), interval.getEnd().minusDays(deductDays));\n        if(worktime.getMillis() < 0 ) {\n            return new Duration(0);\n        }\n        return worktime;\n    }\n\n    public ExactEstimate calculateWorkHoursPerPeriod(User user,\n            Interval interval) {\n        Duration workDuration = this.calculateWorktimePerPeriod(user, interval);\n        return new ExactEstimate((long) workDuration.toStandardSeconds()\n                .toStandardHours().getHours());\n    }\n\n    public void disableUser(int id) {\n        User user = userDAO.get(id);\n        user.setEnabled(false);        \n    }\n\n    public void enableUser(int id) {\n        User user = userDAO.get(id);\n        user.setEnabled(true);  \n    }\n    \n    public void setAdmin(int id, boolean admin) {\n        User user = userDAO.get(id);\n        user.setAdmin(admin);\n    }\n    \n    public User retrieveByCredentials(String loginName, String password) {\n        User user = retrieveByLoginName(loginName);\n        if (user != null && user.getPassword().equals(password)) {\n            return user;\n        }\n        return null;\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\impl\\\\WidgetCollectionBusinessImpl.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["WidgetCollectionBusinessImpl"], "AN": ["widgetCollectionDAO"], "SCS_VariableDeclarator": ["widgetCollectionDAO", "allCollections", "collection", "newId", "w"], "MN": ["setWidgetCollectionDAO", "getCollections", "createPortfolio", "insertWidgetToHead", "insertWidgetToPosition"], "PN": ["widgetCollectionDAO", "collection", "widget", "collection", "widget", "position", "listNumber"], "SCS_MemberReference": ["genericDAO", "widgetCollectionDAO", "widgetCollectionDAO", "widgetCollectionDAO", "allCollections", "collection", "collection", "newId", "collection", "collection", "widget", "listNumber", "position", "position", "listNumber"], "SCS_ConstructorDeclaration": ["WidgetCollectionBusinessImpl"], "SCS_ClassReference": ["WidgetCollection", "allCollections", "widgetCollectionDAO", "collection", "widgetCollectionDAO", "widgetCollectionDAO", "collection", null, "collection", "w", "w", "w", "w", "widget", "widget"], "SCS_VariableDeclaration": ["List", "WidgetCollection", "Integer", "AgilefantWidget"], "SCS_MethodInvocation": ["addAll", "getCollections", "setName", "create", "get", "setName", "insertWidgetToPosition", "getWidgets", "getListNumber", "getPosition", "setPosition", "getPosition", "setPosition", "setListNumber"], "CO": ["/** {@inheritDoc} */", "/** {@inheritDoc} */", "/** {@inheritDoc} */", "/** {@inheritDoc} */"], "CODE": "package fi.hut.soberit.agilefant.business.impl;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport fi.hut.soberit.agilefant.business.WidgetCollectionBusiness;\nimport fi.hut.soberit.agilefant.db.WidgetCollectionDAO;\nimport fi.hut.soberit.agilefant.model.AgilefantWidget;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.model.WidgetCollection;\n\n@Service(\"widgetCollectionBusiness\")\n@Transactional\npublic class WidgetCollectionBusinessImpl extends\n        GenericBusinessImpl<WidgetCollection> implements WidgetCollectionBusiness {\n\n    private WidgetCollectionDAO widgetCollectionDAO;\n    \n    @Autowired\n    public void setWidgetCollectionDAO(WidgetCollectionDAO widgetCollectionDAO) {\n        this.genericDAO = widgetCollectionDAO;\n        this.widgetCollectionDAO = widgetCollectionDAO;\n    }\n\n    public WidgetCollectionBusinessImpl() {\n        super(WidgetCollection.class);\n    }\n    \n    /** {@inheritDoc} */\n    @Transactional(readOnly = true)\n    public List<WidgetCollection> getCollections() {\n        List<WidgetCollection> allCollections = new ArrayList<WidgetCollection>();\n        allCollections.addAll(widgetCollectionDAO.getCollections());\n        return allCollections;\n    }\n    \n    /** {@inheritDoc} */\n    @Transactional\n    public WidgetCollection createPortfolio() {\n        WidgetCollection collection = new WidgetCollection();\n        collection.setName(\"New dashboard\");\n        \n        Integer newId = (Integer)widgetCollectionDAO.create(collection);\n        collection = widgetCollectionDAO.get(newId);\n        \n        collection.setName(\"New dashboard\");\n        \n        return collection;\n    }\n    \n    \n    /** {@inheritDoc} */\n    @Transactional\n    public void insertWidgetToHead(WidgetCollection collection,\n            AgilefantWidget widget) {\n        this.insertWidgetToPosition(collection, widget, 0, 0);\n    }\n\n    /** {@inheritDoc} */\n    @Transactional\n    public void insertWidgetToPosition(WidgetCollection collection,\n            AgilefantWidget widget, int position, int listNumber) {\n        for (AgilefantWidget w : collection.getWidgets()) {\n            if (w.getListNumber() == listNumber && w.getPosition() >= position) {\n                w.setPosition(w.getPosition() + 1);\n            }\n        }\n        widget.setPosition(position);\n        widget.setListNumber(listNumber);\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\config\\\\BootstrapperListener.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["BootstrapperListener"], "AN": ["CONFIG", "springListener"], "SCS_VariableDeclarator": ["CONFIG", "springListener", "config", "agilefantLogs", "location", "loggerContext", "joran", "config", "servletParams", "overrides", "classpathConfig", "warConfig", "config", "url", "properties", "names", "name"], "MN": ["getConfig", "contextInitialized", "configureLogging", "findLoggingConfig", "resolveConfig", "readWarConfig", "readServletParams", "contextDestroyed"], "PN": ["sce", "ctx", "file", "cl", "ctx", "ctx", "ctx", "sce"], "SCS_ClassReference": ["Preconditions", "CONFIG", "", "sce", "", "sce", "CONFIG", "sce", null, "springListener", "CONFIG", "Objects", "LoggerContext", null, "ctx", "ctx", "ctx", "System", "System", "Preconditions", "", null, null, "ctx", "LoggerFactory", "joran", "loggerContext", "loggerContext", "joran", "cl", "cl", "cl", "", "ConfigFactory", "ConfigFactory", "", "servletParams", null, null, null, "Preconditions", "ctx", "ConfigFactory", "ctx", "names", "names", "properties", "ctx", "ConfigFactory", "springListener"], "SCS_MethodInvocation": ["checkNotNull", "get", "configureLogging", "getServletContext", "resolveConfig", "getServletContext", "set", "getServletContext", "setAttribute", "contextInitialized", "remove", "equal", "getClassLoader", "getClassLoader", "getInitParameter", "getInitParameter", "getProperty", "getProperty", "checkNotNull", "findLoggingConfig", "getClass", "getClassLoader", "log", "getILoggerFactory", "setContext", "reset", "putProperty", "doConfigure", "getResource", "getResource", "getResource", "readServletParams", "defaultOverrides", "parseResources", "readWarConfig", "withFallback", "withFallback", "withFallback", "resolve", "checkNotNull", "getResource", "parseURL", "getInitParameterNames", "hasMoreElements", "nextElement", "put", "getInitParameter", "parseProperties", "contextDestroyed"], "SCS_VariableDeclaration": ["Config", "String", "URL", "LoggerContext", "JoranConfigurator", "URL", "Config", "Config", "Config", "Config", "Config", "URL", "Properties", "Enumeration", "String"], "SCS_MemberReference": ["config", "CONFIG_ATTR", "config", "sce", "agilefantLogs", "agilefantLogs", "agilefantLogs", "location", "loggerContext", "agilefantLogs", "agilefantLogs", "location", "e", "config", "config", "file", "ctx", "ctx", "classpathConfig", "warConfig", "overrides", "config", "url", "e", "name", "name", "properties", "sce"], "CO": ["/**\n * Resolves configuration for the application, and bootstraps Spring.\n * \n * <p>\n * It's possible to create the configuration in Spring context instead of using\n * \"magical\" thread locals, but that solution becomes problematic if we need\n * access to the config in a class initialized by reflection. Many frameworks\n * (e.g. Hibernate) initialize extension classes directly without any support\n * for injection, so the config must be available through other means. Static\n * fields are also an option, but a thread local is a much cleaner solution as\n * long as the thread local is cleaned immediately after initialization.\n * \n */", "/**\n     * Holds the immutable config object during initialization\n     */", "/**\n     * Returns the current config from the thread local, which is only available\n     * at initialization time.\n     * \n     * <strong>This method exists only to pass external libraries the config object without\n     * hassle</strong>\n     * \n     * @throws NullPointerException\n     *             if thread local is not available.\n     * @return config object\n     */", "// Skip configuration if Logback is not managed by this webpap", "/**\n     * Parses and resolves an immutable config object from default sources.\n     * \n     * The standard config chain is the following:\n     * <ul>\n     * <li>Servlet context init parameters\n     * <li>Default overrides (System properties)\n     * <li>Config from classpath (agilefant.conf)\n     * <li>Default config from WAR (/WEB-INF/agilefant.conf)\n     * \n     * @param ctx\n     *            servlet context\n     * @return config object\n     */", "/**\n     * Parses an immutable config object from configuration file in the WAR.\n     * \n     * @param ctx\n     *            servlet context\n     * @return config object\n     */", "/**\n     * Creates an immutable config object from servlet context init parameters.\n     * \n     * @param ctx\n     *            servlet context\n     * @return config object\n     */"], "CODE": "package fi.hut.soberit.agilefant.config;\n\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.util.Enumeration;\nimport java.util.Properties;\n\nimport javax.servlet.ServletContext;\nimport javax.servlet.ServletContextEvent;\nimport javax.servlet.ServletContextListener;\n\nimport org.slf4j.LoggerFactory;\nimport org.springframework.web.context.ContextLoaderListener;\n\nimport ch.qos.logback.classic.LoggerContext;\nimport ch.qos.logback.classic.joran.JoranConfigurator;\n\nimport com.google.common.base.Objects;\nimport com.google.common.base.Preconditions;\nimport com.typesafe.config.Config;\nimport com.typesafe.config.ConfigFactory;\n\n/**\n * Resolves configuration for the application, and bootstraps Spring.\n * \n * <p>\n * It's possible to create the configuration in Spring context instead of using\n * \"magical\" thread locals, but that solution becomes problematic if we need\n * access to the config in a class initialized by reflection. Many frameworks\n * (e.g. Hibernate) initialize extension classes directly without any support\n * for injection, so the config must be available through other means. Static\n * fields are also an option, but a thread local is a much cleaner solution as\n * long as the thread local is cleaned immediately after initialization.\n * \n */\npublic class BootstrapperListener implements ServletContextListener {\n\n    /**\n     * Holds the immutable config object during initialization\n     */\n    private static final ThreadLocal<Config> CONFIG = new ThreadLocal<Config>();\n\n    /**\n     * Returns the current config from the thread local, which is only available\n     * at initialization time.\n     * \n     * <strong>This method exists only to pass external libraries the config object without\n     * hassle</strong>\n     * \n     * @throws NullPointerException\n     *             if thread local is not available.\n     * @return config object\n     */\n    static Config getConfig() {\n        return Preconditions.checkNotNull(CONFIG.get(), \"thread local config is not available\");\n    }\n\n    private final ContextLoaderListener springListener = new ContextLoaderListener();\n\n    @Override\n    public void contextInitialized(ServletContextEvent sce) {\n        configureLogging(sce.getServletContext());\n\n        Config config = resolveConfig(sce.getServletContext());\n\n        try {\n            CONFIG.set(config);\n            sce.getServletContext().setAttribute(ConfigFactoryBean.CONFIG_ATTR, config);\n            springListener.contextInitialized(sce);\n        } finally {\n            CONFIG.remove();\n        }\n    }\n\n    private void configureLogging(ServletContext ctx) {\n        try {\n            // Skip configuration if Logback is not managed by this webpap\n            if (!Objects.equal(LoggerContext.class.getClassLoader(), ctx.getClassLoader()))\n                return;\n\n            String agilefantLogs = null;\n            if (ctx.getInitParameter(\"agilefant.logs\") != null)\n                agilefantLogs = ctx.getInitParameter(\"agilefant.logs\");\n            else if (System.getProperty(\"catalina.home\") != null)\n                agilefantLogs = System.getProperty(\"catalina.home\") + \"/logs\";\n\n            URL location = Preconditions.checkNotNull(findLoggingConfig(agilefantLogs != null, this.getClass().getClassLoader()),\n                    \"Logging configuration could not be found\");\n            ctx.log(\"Configuring logging from \" + location);\n            LoggerContext loggerContext = (LoggerContext) LoggerFactory.getILoggerFactory();\n            JoranConfigurator joran = new JoranConfigurator();\n            joran.setContext(loggerContext);\n            loggerContext.reset();\n\n            if (agilefantLogs != null)\n                loggerContext.putProperty(\"agilefant.logs\", agilefantLogs);\n\n            joran.doConfigure(location);\n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to configure logging\", e);\n        }\n\n    }\n\n    private URL findLoggingConfig(boolean file, ClassLoader cl) {\n        URL config = cl.getResource(\"agilefant-logback.xml\");\n        if (config != null)\n            return config;\n\n        if (file)\n            return cl.getResource(\"agilefant/logback-file.xml\");\n        else\n            return cl.getResource(\"agilefant/logback-stdout.xml\");\n    }\n\n    /**\n     * Parses and resolves an immutable config object from default sources.\n     * \n     * The standard config chain is the following:\n     * <ul>\n     * <li>Servlet context init parameters\n     * <li>Default overrides (System properties)\n     * <li>Config from classpath (agilefant.conf)\n     * <li>Default config from WAR (/WEB-INF/agilefant.conf)\n     * \n     * @param ctx\n     *            servlet context\n     * @return config object\n     */\n    private Config resolveConfig(ServletContext ctx) {\n        Config servletParams = readServletParams(ctx);\n        Config overrides = ConfigFactory.defaultOverrides();\n        Config classpathConfig = ConfigFactory.parseResources(\"agilefant.conf\");\n        Config warConfig = readWarConfig(ctx);\n\n        Config config = servletParams.withFallback(overrides).withFallback(classpathConfig).withFallback(warConfig).resolve();\n\n        return config;\n    }\n\n    /**\n     * Parses an immutable config object from configuration file in the WAR.\n     * \n     * @param ctx\n     *            servlet context\n     * @return config object\n     */\n    private Config readWarConfig(ServletContext ctx) {\n        try {\n            URL url = Preconditions.checkNotNull(ctx.getResource(\"/WEB-INF/agilefant.conf\"), \"WAR config could not be found\");\n            return ConfigFactory.parseURL(url);\n        } catch (MalformedURLException e) {\n            throw new RuntimeException(\"Failed to parse config from WAR\", e);\n        }\n    }\n\n    /**\n     * Creates an immutable config object from servlet context init parameters.\n     * \n     * @param ctx\n     *            servlet context\n     * @return config object\n     */\n    private Config readServletParams(ServletContext ctx) {\n        Properties properties = new Properties();\n        Enumeration<String> names = ctx.getInitParameterNames();\n        while (names.hasMoreElements()) {\n            String name = names.nextElement();\n            properties.put(name, ctx.getInitParameter(name));\n        }\n        return ConfigFactory.parseProperties(properties);\n    }\n\n    @Override\n    public void contextDestroyed(ServletContextEvent sce) {\n        springListener.contextDestroyed(sce);\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\config\\\\BusinessConfiguration.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["BusinessConfiguration"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.config;\n\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\n@ComponentScan(basePackages = \"fi.hut.soberit.agilefant.business.impl\")\npublic class BusinessConfiguration {\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\config\\\\ConfigFactoryBean.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["ConfigFactoryBean"], "AN": ["CONFIG_ATTR", "servletContext", "object"], "SCS_VariableDeclarator": ["CONFIG_ATTR", "servletContext", "object"], "SCS_ClassReference": ["Config", null, "Config", "Preconditions", "servletContext"], "SCS_MethodInvocation": ["getName", "checkNotNull", "getAttribute"], "MN": ["getObject", "getObjectType", "isSingleton", "afterPropertiesSet"], "PN": [], "SCS_MemberReference": ["object", "object", "CONFIG_ATTR"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.config;\n\nimport javax.servlet.ServletContext;\n\nimport org.springframework.beans.factory.FactoryBean;\nimport org.springframework.beans.factory.InitializingBean;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport com.google.common.base.Preconditions;\nimport com.typesafe.config.Config;\n\npublic class ConfigFactoryBean implements FactoryBean<Config>, InitializingBean {\n\n    static final String CONFIG_ATTR = Config.class.getName();\n\n    @Autowired\n    private ServletContext servletContext;\n\n    private Config object;\n\n    @Override\n    public Config getObject() throws Exception {\n        return object;\n    }\n\n    @Override\n    public Class<?> getObjectType() {\n        return Config.class;\n    }\n\n    @Override\n    public boolean isSingleton() {\n        return true;\n    }\n\n    @Override\n    public void afterPropertiesSet() throws Exception {\n        object = Preconditions.checkNotNull((Config) servletContext.getAttribute(CONFIG_ATTR), \"Config could not be found in the servlet context\");\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\config\\\\DaoConfiguration.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["DaoConfiguration"], "AN": ["config", "resourceLoader", "dataSource"], "SCS_VariableDeclarator": ["config", "resourceLoader", "dataSource", "bean", "bean", "props", "hibernateConfig", "entry"], "MN": ["flyway", "databaseInitializer", "sessionFactory"], "PN": [], "SCS_VariableDeclaration": ["Flyway", "LocalSessionFactoryBean", "Properties", "Config", "Entry"], "SCS_ClassReference": ["bean", "bean", "bean", "bean", "", "", "", "bean", "resourceLoader", "bean", "config", null, "hibernateConfig", "props", "entry", "hibernateConfig", "entry", "bean"], "SCS_MethodInvocation": ["setDataSource", "setInitOnMigrate", "setLocations", "migrate", "flyway", "flyway", "databaseInitializer", "setConfigLocation", "getResource", "setDataSource", "getConfig", "atPath", "entrySet", "put", "getKey", "getString", "getKey", "setHibernateProperties"], "SCS_MemberReference": ["dataSource", "bean", "dataSource", "props", "bean"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.config;\n\nimport java.util.Map.Entry;\nimport java.util.Properties;\n\nimport javax.sql.DataSource;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.io.ResourceLoader;\nimport org.springframework.orm.hibernate4.LocalSessionFactoryBean;\n\nimport com.googlecode.flyway.core.Flyway;\nimport com.typesafe.config.Config;\nimport com.typesafe.config.ConfigValue;\n\n@Configuration\n@ComponentScan(basePackages = { \"fi.hut.soberit.agilefant.db.hibernate\", \"fi.hut.soberit.agilefant.db.history.impl\" })\npublic class DaoConfiguration {\n\n    @Autowired\n    private Config config;\n    @Autowired\n    private ResourceLoader resourceLoader;\n    @Autowired\n    private DataSource dataSource;\n\n    @Bean\n    public Flyway flyway() {\n        Flyway bean = new Flyway();\n        bean.setDataSource(dataSource);\n        bean.setInitOnMigrate(true);\n        bean.setLocations(\"agilefant/flyway\", \"fi.hut.soberit.agilefant.flyway\");\n        bean.migrate();\n        return bean;\n    }\n\n    @Bean\n    public DatabaseInitializer databaseInitializer() {\n        flyway();\n        return new DatabaseInitializer();\n    }\n\n    @Bean\n    public LocalSessionFactoryBean sessionFactory() throws Exception {\n        flyway();\n        databaseInitializer();\n\n        LocalSessionFactoryBean bean = new LocalSessionFactoryBean();\n        bean.setConfigLocation(resourceLoader.getResource(\"/WEB-INF/hibernate.cfg.xml\"));\n        bean.setDataSource(dataSource);\n\n        Properties props = new Properties();\n        Config hibernateConfig = config.getConfig(\"agilefant.hibernate\").atPath(\"hibernate\");\n\n        for (Entry<String, ConfigValue> entry : hibernateConfig.entrySet()) {\n            props.put(entry.getKey(), hibernateConfig.getString(entry.getKey()));\n        }\n\n        bean.setHibernateProperties(props);\n\n        return bean;\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\config\\\\DatabaseInitializer.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["DatabaseInitializer"], "AN": ["log", "dataSource"], "SCS_VariableDeclarator": ["log", "dataSource", "jdbc", "productId", "projectId", "iterationId", "storyId", "userId", "teamId"], "SCS_ClassReference": ["LoggerFactory", null, "jdbc", "log", "jdbc", "jdbc", "log", "jdbc", "log", "jdbc", "jdbc", "jdbc", "jdbc", "jdbc", "log", "jdbc", "jdbc", "jdbc", "jdbc", "jdbc", "jdbc", "jdbc", "log", "jdbc", "jdbc", "jdbc", "jdbc", "log", "log"], "SCS_MethodInvocation": ["getLogger", "getClass", "queryForInt", "info", "update", "update", "info", "queryForInt", "info", "update", "queryForInt", "update", "queryForInt", "update", "info", "queryForInt", "update", "queryForInt", "queryForInt", "update", "update", "update", "info", "update", "queryForInt", "update", "update", "info", "error"], "MN": ["afterPropertiesSet"], "PN": [], "SCS_VariableDeclaration": ["JdbcTemplate", "int", "int", "int", "int", "int", "int"], "SCS_MemberReference": ["dataSource", "productId", "projectId", "projectId", "iterationId", "projectId", "storyId", "iterationId", "storyId", "storyId", "userId", "teamId", "productId", "teamId", "userId", "exception"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.config;\n\nimport javax.sql.DataSource;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.jdbc.core.JdbcTemplate;\n\npublic class DatabaseInitializer implements InitializingBean {\n\n    private final Logger log = LoggerFactory.getLogger(this.getClass());\n\n    @Autowired\n    private DataSource dataSource;\n\n    @Override\n    public void afterPropertiesSet() throws Exception {\n        JdbcTemplate jdbc = new JdbcTemplate(dataSource);\n\n        if (jdbc.queryForInt(\"SELECT COUNT(*) FROM users\") > 0) {\n            log.info(\"Users table has data -> skipping initialization\");\n            return;\n        }\n\n        jdbc.update(\"INSERT INTO users (fullName, loginName, passwd, initials, enabled, recentItemsNumberOfWeeks) VALUES (?, ?, ?, ?, ?, ?)\",\n                \"Administrator\", \"admin\", \"$2a$10$fkULKc1/AmruYR9HTmh5ROc5692D3WaPidZ7dHz073W33AvU2Vqom\", \"Admin\", 1, 16);\n        jdbc.update(\"INSERT INTO users (admin, fullName, loginName, passwd, initials, enabled, recentItemsNumberOfWeeks) VALUES (?, ?, ?, ?, ?, ?, ?)\", 0,\n                \"readonly\", \"readonly\", \"$2a$10$fkULKc1/AmruYR9HTmh5ROc5692D3WaPidZ7dHz073W33AvU2Vqom\", \"readonly\", 1, 0);\n\n        log.info(\"Initialized users table with default users\");\n\n        if (jdbc.queryForInt(\"SELECT COUNT(*) FROM backlogs\") > 0) {\n            log.info(\"Backlogs table has data -> skipping initialization\");\n            return;\n        }\n\n        try {\n            jdbc.update(\"INSERT INTO backlogs (description, name, parent_id, backlogtype) VALUES (?, ?, ?, ?)\",\n                \"&nbsp;<br><b>Welcome to your Agilefant account!</b><br><br>This is a <b>Product. </b>Products<b>&nbsp;</b>are developed in <b>projects</b>, <br>which in turn can further be split into <b>iterations <br></b>(in Scrum, iterations are called \\\"sprints\\\").&nbsp;<br><br><div>On the <b>story tree</b>&nbsp;tab below you can see all the stories that <br>belong to this Product. You can create new stories directly<br> under the product, or create them in Project and<br> Iteration views and they will also be visible in this view. <br><br>On the <b>Project planning</b>&nbsp;tab, <br>you can drag n' drop the leaf stories (that is, stories that have <br>no children) into projects and iterations. And on the <b>projects <br></b>tab, you can create stories, set their status, assign people to <br>them and modify the projects' start and end dates.<br><div><br>If you want to get rid of all example data, just click Actions -&gt; Delete <br>for the Example Product of the backlogs.<br></div><div><br></div><div><u>For more info on Agilefant, see:</u><br></div><div>+ The <a href=\\\"http://agilefant.org/support/user-guide/\\\">User Guide</a></div><div>+ The <a href=\\\"http://agilefant.org/support/faq/\\\">FAQ</a> - details regarding specific features<br><br><u>For in-depth info on the principles behind Agilefant and their origin, see:</u><br>+ <a href=\\\"http://www.soberit.hut.fi/%7Ejvahanii/\\\">Dr. Agilefant's</a> Ph.D.: \\\"<a href=\\\"http://lib.tkk.fi/Diss/2012/isbn9789526045061/isbn9789526045061.pdf\\\">Towards Agile Product and Portfolio Management</a>\\\"<br></div></div>\", \"Example Product\", null, \"Product\");\n\n            int productId = jdbc.queryForInt(\"SELECT id FROM backlogs WHERE name='Example Product'\");\n\n            jdbc.update(\"INSERT INTO backlogs (description, name, parent_id, backlogSize, baselineLoad, endDate, rank, startDate, status, backlogtype) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\",\n                \"&nbsp;<br>This is an example <b>project</b>.&nbsp;Think of&nbsp;Projects as corresponding <br>to a major release or an otherwise significant undertaking from a <br>business point of view. If you're familiar with Dean Leffingwell's <br><a href=\\\"http://scaledagileframework.com/\\\">scaled agile framework</a>, the project level in Agilefant corresponds to <br>\\\"<a href=\\\"http://www.scaledagileframework.com/program-level/\\\">program</a>\\\".<br><br>The <b>Story tree</b>&nbsp;tab works just like on the \\nProduct level, with the <br>exception that it only displays those \\nstories (and their parent stories) <br>that have been scheduled to be developed \\nin this project.<br><br>On the&nbsp;<b>Leaf stories&nbsp;</b>tab, you can prioritize the leaf stories against <br>each other using a force-ranked list. You can also move them <br>into and out of <b>iterations</b>.<br><br>On the <b>iterations</b> tab you can see a single iteration. If you have<br>many teams working in your project, you'll want to create<br>an iteration for each of them.<div><br><div><div><b>Planned size</b> and <b>baseline load</b> are <br>explained in the <a href=\\\"http://agilefant.org/support/faq/\\\">FAQ</a>. Look at the <a href=\\\"http://agilefant.org/support/user-guide/\\\">user guide</a> to <br>see how the <b>project burn-up</b> works.</div></div></div>\", \"Example Project\", productId, 0, 0, \"2016-07-01\", 0, \"2015-07-01\", 0, \"Project\");\n\n            int projectId = jdbc.queryForInt(\"SELECT id FROM backlogs WHERE name='Example Project'\");\n\n            jdbc.update(\"INSERT INTO backlogs (description, name, parent_id, backlogSize, baselineLoad, endDate, readonlyToken, startDate, backlogtype) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)\",\n                \"&nbsp;<br>This is an iteration. Here you can see the <b>Stories</b> planned <br>for this iteration as a prioritised list.<br><br>Click the \\\"Create story\\\" button to create new stories. <br>Click the \\\"Actions\\\" button (on the top right corner of this Info area) to add <br>spent effort hours directly to the iteration, <br>or to save the Iteration data as an Excel file.<br><br>You can also have tasks that do not belong to any story.<br><br>(<b>Planned size</b> and <b>baseline load</b> are explained in the <a href=\\\"http://agilefant.org/support/faq/\\\">FAQ</a>.)\", \"Example Iteration\", projectId, 0, 0, \"2016-07-01\", null, \"2015-07-01\", \"Iteration\");\n\n            log.info(\"Initialized backlogs table with example backlogs\");\n\n            int iterationId = jdbc.queryForInt(\"SELECT id FROM backlogs WHERE name='Example Iteration'\");\n\n            jdbc.update(\"INSERT INTO stories (backlog_id, description, iteration_id, name, parent_id, state, storyPoints, storyValue, treeRank) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)\",\n                projectId, \"This is an example story.<br><br>You can create new stories from the upper left \\\"Create new\\\" menu or from \\\"Create story\\\" button in story list and story tree views.\", iterationId, \"Example Story\", null, 0, null, null, 0);\n\n            int storyId = jdbc.queryForInt(\"SELECT id FROM stories WHERE name='Example Story'\");\n            int userId = jdbc.queryForInt(\"SELECT id FROM users WHERE loginName='admin'\");\n\n            jdbc.update(\"INSERT INTO storyrank (backlog_id, rank, story_id) VALUES (?, ?, ?)\",\n                projectId, 0, storyId);\n\n            jdbc.update(\"INSERT INTO storyrank (backlog_id, rank, story_id) VALUES (?, ?, ?)\",\n                iterationId, 0, storyId);\n\n            jdbc.update(\"INSERT INTO story_user (Story_id, User_id) VALUES (?, ?)\",\n                storyId, userId);\n\n            log.info(\"Initialized stories table with example story\");\n\n            jdbc.update(\"INSERT INTO teams (description, name) VALUES (?, ?)\",\n                \"Example team for admin user\", \"Admin Team\");\n\n            int teamId = jdbc.queryForInt(\"SELECT id FROM teams WHERE name='Admin Team'\");\n\n            jdbc.update(\"INSERT INTO team_product (Team_id, Product_id) VALUES (?, ?)\",\n                teamId, productId);\n\n            jdbc.update(\"INSERT INTO team_user (Team_id, User_id) VALUES (?, ?)\",\n                teamId, userId);\n\n            log.info(\"Initialized team table with example team\");\n\n        } catch (Exception exception) {\n            log.error(\"Failed to initialize backlogs: \" + exception);\n        }\n\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\config\\\\DataSourceFactoryBean.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["DataSourceFactoryBean"], "AN": ["log", "config", "jndiDataSource", "dataSource"], "SCS_VariableDeclarator": ["log", "config", "jndiDataSource", "dataSource", "bean", "jndiName", "jndi", "dataSource"], "SCS_ClassReference": ["LoggerFactory", null, "Preconditions", "", "", "bean", "config", "bean", "config", "bean", "config", "bean", "config", "bean", "bean", "log", "bean", "config", "jndi", "jndi", "DataSource", "log", "log", "dataSource", "DataSource"], "SCS_MethodInvocation": ["getLogger", "getClass", "checkNotNull", "jndiLookup", "configureDataSource", "setDriverClassName", "getString", "setUsername", "getString", "setPassword", "getString", "setUrl", "getString", "setTestWhileIdle", "setValidationQuery", "info", "getUrl", "getString", "setResourceRef", "lookup", "info", "info", "close"], "MN": ["afterPropertiesSet", "configureDataSource", "jndiLookup", "destroy", "getObject", "getObjectType", "isSingleton"], "PN": [], "SCS_MemberReference": ["config", "jndiDataSource", "jndiDataSource", "dataSource", "bean", "jndiName", "jndiName", "dataSource", "jndiName", "dataSource", "dataSource", "jndiDataSource", "jndiDataSource", "dataSource"], "SCS_VariableDeclaration": ["BasicDataSource", "String", "JndiLocatorDelegate", "DataSource"], "CO": ["/**\n     * Attempts to lookup a JNDI data source using the name from configuration.\n     * \n     * @return data source or null\n     */"], "CODE": "package fi.hut.soberit.agilefant.config;\n\nimport javax.naming.NamingException;\nimport javax.sql.DataSource;\n\nimport org.apache.commons.dbcp.BasicDataSource;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.DisposableBean;\nimport org.springframework.beans.factory.FactoryBean;\nimport org.springframework.beans.factory.InitializingBean;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.jndi.JndiLocatorDelegate;\n\nimport com.google.common.base.Preconditions;\nimport com.typesafe.config.Config;\n\npublic class DataSourceFactoryBean implements InitializingBean, DisposableBean, FactoryBean<DataSource> {\n\n    private final Logger log = LoggerFactory.getLogger(this.getClass());\n\n    @Autowired\n    private Config config;\n\n    private DataSource jndiDataSource;\n    private BasicDataSource dataSource;\n\n    @Override\n    public void afterPropertiesSet() throws Exception {\n        Preconditions.checkNotNull(config, \"config cannot be null\");\n\n        jndiDataSource = jndiLookup();\n        if (jndiDataSource == null)\n            dataSource = configureDataSource();\n    }\n\n    private BasicDataSource configureDataSource() {\n        BasicDataSource bean = new BasicDataSource();\n\n        bean.setDriverClassName(config.getString(\"agilefant.database.driver-class\"));\n        bean.setUsername(config.getString(\"agilefant.database.username\"));\n        bean.setPassword(config.getString(\"agilefant.database.password\"));\n        bean.setUrl(config.getString(\"agilefant.database.url\"));\n        bean.setTestWhileIdle(true);\n        bean.setValidationQuery(\"/* ping */ SELECT 1\");\n\n        log.info(\"Using locally pooled data source '{}'\", bean.getUrl());\n\n        return bean;\n    }\n\n    /**\n     * Attempts to lookup a JNDI data source using the name from configuration.\n     * \n     * @return data source or null\n     */\n    private DataSource jndiLookup() {\n        String jndiName = config.getString(\"agilefant.database.jndi-name\");\n        try {\n            JndiLocatorDelegate jndi = new JndiLocatorDelegate();\n            jndi.setResourceRef(true);\n\n            DataSource dataSource = jndi.lookup(jndiName, DataSource.class);\n            log.info(\"Using JNDI data source '{}'\", jndiName);\n            return dataSource;\n        } catch (NamingException e) {\n            log.info(\"JNDI data source '{}' could not be found\", jndiName);\n            return null;\n        }\n    }\n\n    @Override\n    public void destroy() throws Exception {\n        if (dataSource != null) {\n            dataSource.close();\n            dataSource = null;\n        }\n    }\n\n    @Override\n    public DataSource getObject() throws Exception {\n        return jndiDataSource != null ? jndiDataSource : dataSource;\n    }\n\n    @Override\n    public Class<?> getObjectType() {\n        return DataSource.class;\n    }\n\n    @Override\n    public boolean isSingleton() {\n        return true;\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\config\\\\ExportImportConfiguration.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["ExportImportConfiguration"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.config;\n\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\n@ComponentScan(basePackages = \"fi.hut.soberit.agilefant.exportimport\")\npublic class ExportImportConfiguration {\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\config\\\\InitJFreeChartsListener.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["InitJFreeChartsListener"], "MN": ["contextInitialized", "contextDestroyed"], "PN": ["sce", "sce"], "SCS_VariableDeclaration": ["JFreeChart"], "SCS_VariableDeclarator": ["chart"], "SCS_ClassReference": ["ChartFactory"], "SCS_MethodInvocation": ["createTimeSeriesChart"], "CO": ["/**\n * Class will creates a dummy charts object so that JFreeCharts work with new EC2 AMIs\n * \n * @author jkorri\n */", "// Init JFreeChart so that compatible with Amazon m3 amis"], "CODE": "package fi.hut.soberit.agilefant.config;\n\nimport javax.servlet.ServletContextEvent;\nimport javax.servlet.ServletContextListener;\n\nimport org.jfree.chart.ChartFactory;\nimport org.jfree.chart.JFreeChart;\n\n/**\n * Class will creates a dummy charts object so that JFreeCharts work with new EC2 AMIs\n * \n * @author jkorri\n */\npublic class InitJFreeChartsListener implements ServletContextListener {\n\n\t@Override\n\tpublic void contextInitialized(ServletContextEvent sce) {\n\t\t// Init JFreeChart so that compatible with Amazon m3 amis\n    \tJFreeChart chart = ChartFactory.createTimeSeriesChart(\"\",\n                \"\",\n                \"\",\n                null, true, true, false);\n\t}\n\n\t@Override\n\tpublic void contextDestroyed(ServletContextEvent sce) {\n\t}\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\config\\\\MasterConfiguration.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["MasterConfiguration"], "SCS_ClassReference": ["BusinessConfiguration", "DaoConfiguration", "RestConfiguration", "TransactionConfiguration", "WebConfiguration", "ExportImportConfiguration", "UtilConfiguration", "DbConnectionInfo", "", null, "", null], "MN": ["config", "dataSource", "dbConnectionInfo"], "PN": [], "SCS_MethodInvocation": ["create", "config", "getObject", "dataSource", "getObject"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.config;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.context.annotation.ImportResource;\n\nimport fi.hut.soberit.agilefant.util.DbConnectionInfo;\n\n@Configuration\n@Import({ BusinessConfiguration.class, DaoConfiguration.class, RestConfiguration.class, TransactionConfiguration.class, WebConfiguration.class, ExportImportConfiguration.class, UtilConfiguration.class })\n@ImportResource({ \"/WEB-INF/applicationContext-core.xml\", \"/WEB-INF/applicationContext-email.xml\", \"/WEB-INF/applicationContext-notifications.xml\",\n        \"/WEB-INF/applicationContext-security.xml\" })\npublic class MasterConfiguration {\n\n    @Bean\n    public ConfigFactoryBean config() {\n        return new ConfigFactoryBean();\n    }\n\n    @Bean\n    public DataSourceFactoryBean dataSource() {\n        return new DataSourceFactoryBean();\n    }\n\n    @Bean\n    public DbConnectionInfo dbConnectionInfo() throws Exception {\n        return DbConnectionInfo.create(config().getObject(), dataSource().getObject());\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\config\\\\RestConfiguration.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["RestConfiguration"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.config;\n\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\n@ComponentScan(basePackages = \"fi.hut.soberit.agilefant.remote\")\npublic class RestConfiguration {\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\config\\\\TransactionConfiguration.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["TransactionConfiguration"], "AN": ["dataSource", "sessionFactory"], "SCS_VariableDeclarator": ["dataSource", "sessionFactory", "bean"], "MN": ["transactionManager", "annotationDrivenTransactionManager"], "PN": [], "SCS_VariableDeclaration": ["HibernateTransactionManager"], "SCS_ClassReference": ["bean", "bean", ""], "SCS_MethodInvocation": ["setDataSource", "setSessionFactory", "transactionManager"], "SCS_MemberReference": ["dataSource", "sessionFactory", "bean"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.config;\n\nimport javax.sql.DataSource;\n\nimport org.hibernate.SessionFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.orm.hibernate4.HibernateTransactionManager;\nimport org.springframework.transaction.PlatformTransactionManager;\nimport org.springframework.transaction.annotation.EnableTransactionManagement;\nimport org.springframework.transaction.annotation.TransactionManagementConfigurer;\n\n@Configuration\n@EnableTransactionManagement\npublic class TransactionConfiguration implements TransactionManagementConfigurer {\n\n    @Autowired\n    private DataSource dataSource;\n    @Autowired\n    private SessionFactory sessionFactory;\n\n    @Bean\n    public HibernateTransactionManager transactionManager() {\n        HibernateTransactionManager bean = new HibernateTransactionManager();\n        bean.setDataSource(dataSource);\n        bean.setSessionFactory(sessionFactory);\n        return bean;\n    }\n\n    @Override\n    public PlatformTransactionManager annotationDrivenTransactionManager() {\n        return transactionManager();\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\config\\\\UtilConfiguration.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["UtilConfiguration"], "MN": ["characterEncodingFilter"], "PN": [], "SCS_VariableDeclaration": ["CharacterEncodingFilter"], "SCS_VariableDeclarator": ["bean"], "SCS_ClassReference": ["bean"], "SCS_MethodInvocation": ["setEncoding"], "SCS_MemberReference": ["bean"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.config;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.filter.CharacterEncodingFilter;\n\n@Configuration\n@ComponentScan(basePackages = \"fi.hut.soberit.agilefant.util\")\npublic class UtilConfiguration {\n\n    @Bean\n    public CharacterEncodingFilter characterEncodingFilter() {\n        CharacterEncodingFilter bean = new CharacterEncodingFilter();\n        bean.setEncoding(\"UTF-8\");\n        return bean;\n    }\n\t\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\config\\\\WebConfiguration.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["WebConfiguration"], "MN": ["characterEncodingFilter"], "PN": [], "SCS_VariableDeclaration": ["CharacterEncodingFilter"], "SCS_VariableDeclarator": ["bean"], "SCS_ClassReference": ["bean"], "SCS_MethodInvocation": ["setEncoding"], "SCS_MemberReference": ["bean"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.config;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.filter.CharacterEncodingFilter;\n\n@Configuration\n@ComponentScan(basePackages = \"fi.hut.soberit.agilefant.web\")\npublic class WebConfiguration {\n\n    @Bean\n    public CharacterEncodingFilter characterEncodingFilter() {\n        CharacterEncodingFilter bean = new CharacterEncodingFilter();\n        bean.setEncoding(\"UTF-8\");\n        return bean;\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\core\\\\ApplicationContextHolder.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["ApplicationContextHolder"], "AN": ["applicationContext"], "SCS_VariableDeclarator": ["applicationContext"], "SCS_ConstructorDeclaration": ["ApplicationContextHolder"], "MN": ["getApplicationContext", "setApplicationContext"], "PN": ["appContext"], "SCS_MemberReference": ["applicationContext", "applicationContext", "appContext"], "CO": ["/**\n * This class can be used for retrieving of Spring's applicationContext.\n * <p>\n * Please, use wisely and only if no better option (i.e. Dependency Injection) is available!\n *\n * @author Juraj Martinka\n *         Date: 25.1.11\n */", "// DO NOT INSTANTIATE!"], "CODE": "package fi.hut.soberit.agilefant.core;\n\nimport org.springframework.context.ApplicationContext;\n\n/**\n * This class can be used for retrieving of Spring's applicationContext.\n * <p>\n * Please, use wisely and only if no better option (i.e. Dependency Injection) is available!\n *\n * @author Juraj Martinka\n *         Date: 25.1.11\n */\npublic final class ApplicationContextHolder {\n\n    private static ApplicationContext applicationContext;\n\n    private ApplicationContextHolder() {\n        // DO NOT INSTANTIATE!\n    }\n\n\n    public static ApplicationContext getApplicationContext() {\n        return applicationContext;\n    }\n\n    static synchronized void setApplicationContext(ApplicationContext appContext) {\n        applicationContext = appContext;\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\core\\\\ApplicationContextProvider.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["ApplicationContextProvider"], "MN": ["setApplicationContext"], "PN": ["applicationContext"], "SCS_ClassReference": ["ApplicationContextHolder"], "SCS_MethodInvocation": ["setApplicationContext"], "SCS_MemberReference": ["applicationContext"], "CO": ["/**\n * Class that can be used for retrieving applicationContext.\n * It is not supposed to be used outside this package.\n *\n * <p>\n * For retrieving application context itself, use {@link ApplicationContextHolder}.\n *\n * @author Juraj Martinka\n *         Date: 25.1.11\n */"], "CODE": "package fi.hut.soberit.agilefant.core;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ApplicationContextAware;\nimport org.springframework.stereotype.Service;\n\n/**\n * Class that can be used for retrieving applicationContext.\n * It is not supposed to be used outside this package.\n *\n * <p>\n * For retrieving application context itself, use {@link ApplicationContextHolder}.\n *\n * @author Juraj Martinka\n *         Date: 25.1.11\n */\n@Service(\"applicationContextProvider\")\nfinal class ApplicationContextProvider implements ApplicationContextAware {\n\n\n    @Override\n    @Autowired\n    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {\n        ApplicationContextHolder.setApplicationContext(applicationContext);\n    }\n}", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\AgilefantWidgetDAO.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["AgilefantWidgetDAO"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.db;\n\nimport fi.hut.soberit.agilefant.model.AgilefantWidget;\n\npublic interface AgilefantWidgetDAO extends GenericDAO<AgilefantWidget> {\n\n}", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\AssignmentDAO.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["AssignmentDAO"], "MN": ["assigmentsInBacklogTimeframe"], "PN": ["interval", "user"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.db;\n\nimport java.util.List;\n\nimport org.joda.time.Interval;\n\nimport fi.hut.soberit.agilefant.model.Assignment;\nimport fi.hut.soberit.agilefant.model.User;\n\npublic interface AssignmentDAO extends GenericDAO<Assignment> {\n    public List<Assignment> assigmentsInBacklogTimeframe(Interval interval, User user); \n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\BacklogDAO.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["BacklogDAO"], "MN": ["getNumberOfChildren", "getResponsiblesByBacklog", "calculateStoryPointSum", "calculateDoneStoryPointSum", "searchByName", "searchByName", "searchByID", "retrieveStandaloneIterations"], "PN": ["backlog", "backlog", "backlogId", "backlogId", "name", "name", "type", "id"], "CO": ["/**\n * Interface for a DAO of a Backlog.\n * \n * @see GenericDAO\n */", "/**\n     * Gets the number of backlog's child backlogs.\n     */"], "CODE": "package fi.hut.soberit.agilefant.db;\n\nimport java.util.Collection;\nimport java.util.List;\n\nimport fi.hut.soberit.agilefant.model.Backlog;\n\n/**\n * Interface for a DAO of a Backlog.\n * \n * @see GenericDAO\n */\npublic interface BacklogDAO extends GenericDAO<Backlog> {\n\n    /**\n     * Gets the number of backlog's child backlogs.\n     */\n    public int getNumberOfChildren(Backlog backlog);\n\n    public List<Object[]> getResponsiblesByBacklog(Backlog backlog);\n\n    int calculateStoryPointSum(int backlogId);\n    \n    int calculateDoneStoryPointSum(int backlogId);\n    \n    public List<Backlog> searchByName(String name);\n    \n    public List<Backlog> searchByName(String name, Class<?> type);\n    \n    public List<Backlog> searchByID(Integer id);\n    \n    public Collection<Backlog> retrieveStandaloneIterations();\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\BacklogHistoryEntryDAO.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["BacklogHistoryEntryDAO"], "MN": ["retrieveLatest", "retrieveBurnupData"], "PN": ["timestamp", "backlogId", "projectId"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.db;\n\nimport org.joda.time.DateTime;\n\nimport fi.hut.soberit.agilefant.model.BacklogHistoryEntry;\nimport fi.hut.soberit.agilefant.util.ProjectBurnupData;\n\npublic interface BacklogHistoryEntryDAO extends GenericDAO<BacklogHistoryEntry> {\n\n    BacklogHistoryEntry retrieveLatest(DateTime timestamp, int backlogId);\n    \n    ProjectBurnupData retrieveBurnupData(int projectId);\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\BacklogHourEntryDAO.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["BacklogHourEntryDAO"], "MN": ["retrieveByBacklog"], "PN": ["parent"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.db;\n\nimport java.util.List;\n\nimport fi.hut.soberit.agilefant.model.Backlog;\nimport fi.hut.soberit.agilefant.model.BacklogHourEntry;\n\npublic interface BacklogHourEntryDAO extends GenericDAO<BacklogHourEntry> {\n\n    List<BacklogHourEntry> retrieveByBacklog(Backlog parent);\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\GenericDAO.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["GenericDAO"], "MN": ["getAll", "get", "getMultiple", "getAndDetach", "remove", "remove", "store", "create", "count", "exists"], "PN": ["id", "ids", "id", "id", "object", "object", "object", "id"], "CO": ["/**\n * Generic interface for a DAO of some type. Defines minimal functionality for a\n * DAO.\n * <p>\n * Actual DAO interfaces implement this interface, possibly adding some new\n * functionality.\n * \n * @param <T>\n *            type of the entity bean / data model object the DAO is for\n * @see fi.hut.soberit.agilefant.db.hibernate.GenericDAOHibernate\n */", "/**\n     * Get all objects of this type.\n     * \n     * @return collection of all objects of this type\n     */", "/**\n     * Get data model object of this type by id.\n     * \n     * @param id\n     *            requested id\n     * @return object with given id, or null if not found\n     */", "/**\n     * Get multiple model objects of the type by id collection.\n     * \n     * @param ids\n     *            the requested id collection\n     * @return collection of the given objects, or empty collection if none\n     *         found\n     */", "/**\n     * Get data model object of this type by id.\n     * \n     * Will detach the object from Hibernate session.\n     * \n     * @param id\n     *          requested id\n     * @return\n     */", "/**\n     * Removes the object of this type with given id.\n     * \n     * @param id\n     *            requested id\n     */", "/**\n     * Removes given object.\n     * \n     * @param object\n     *            object instance to remove\n     */", "/**\n     * Persists given object. An ID is given, if the object doesn't already\n     * exist in the database.\n     * \n     * @param object\n     *            object instance to store\n     */", "/**\n     * Creates and persists a new object\n     * \n     * @param object\n     *            object instance to store\n     * @return generated ID\n     */", "/**\n     * Retrieves the amount of data model objects of this type in the database\n     * \n     * @return amount of objects\n     */"], "CODE": "package fi.hut.soberit.agilefant.db;\n\nimport java.io.Serializable;\nimport java.util.Collection;\n\n/**\n * Generic interface for a DAO of some type. Defines minimal functionality for a\n * DAO.\n * <p>\n * Actual DAO interfaces implement this interface, possibly adding some new\n * functionality.\n * \n * @param <T>\n *            type of the entity bean / data model object the DAO is for\n * @see fi.hut.soberit.agilefant.db.hibernate.GenericDAOHibernate\n */\npublic interface GenericDAO<T> {\n\n    /**\n     * Get all objects of this type.\n     * \n     * @return collection of all objects of this type\n     */\n    Collection<T> getAll();\n\n    /**\n     * Get data model object of this type by id.\n     * \n     * @param id\n     *            requested id\n     * @return object with given id, or null if not found\n     */\n    T get(int id);\n\n    /**\n     * Get multiple model objects of the type by id collection.\n     * \n     * @param ids\n     *            the requested id collection\n     * @return collection of the given objects, or empty collection if none\n     *         found\n     */\n    Collection<T> getMultiple(Collection<Integer> ids); \n    \n    /**\n     * Get data model object of this type by id.\n     * \n     * Will detach the object from Hibernate session.\n     * \n     * @param id\n     *          requested id\n     * @return\n     */\n    T getAndDetach(int id);\n    \n    /**\n     * Removes the object of this type with given id.\n     * \n     * @param id\n     *            requested id\n     */\n    void remove(int id);\n\n    /**\n     * Removes given object.\n     * \n     * @param object\n     *            object instance to remove\n     */\n    void remove(T object);\n\n    /**\n     * Persists given object. An ID is given, if the object doesn't already\n     * exist in the database.\n     * \n     * @param object\n     *            object instance to store\n     */\n    void store(T object);\n\n    /**\n     * Creates and persists a new object\n     * \n     * @param object\n     *            object instance to store\n     * @return generated ID\n     */\n    Serializable create(T object);\n\n    /**\n     * Retrieves the amount of data model objects of this type in the database\n     * \n     * @return amount of objects\n     */\n    int count();\n\n    boolean exists(int id);\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\HolidayDAO.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["HolidayDAO"], "MN": ["retrieveFutureHolidaysByUser"], "PN": ["user"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.db;\n\nimport java.util.List;\n\nimport fi.hut.soberit.agilefant.model.Holiday;\nimport fi.hut.soberit.agilefant.model.User;\n\npublic interface HolidayDAO extends GenericDAO<Holiday> {\n\n    public List<Holiday> retrieveFutureHolidaysByUser(User user);\n}\n\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\HourEntryDAO.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["HourEntryDAO"], "MN": ["calculateSumByUserAndTimeInterval", "calculateSumByUserAndTimeInterval", "calculateSumByStory", "calculateSumFromTasksWithoutStory", "getAllIterationHourEntries", "getBacklogHourEntriesByFilter", "getTaskHourEntriesByFilter", "getStoryHourEntriesByFilter", "calculateIterationHourEntriesSum", "getHourEntriesByFilter", "getBacklogHourEntries", "getTaskHourEntries", "getStoryHourEntries", "retrieveByUserAndInterval", "retrieveLatestHourEntryDelta"], "PN": ["user", "startDate", "endDate", "userId", "startDate", "endDate", "storyId", "iterationId", "iterationId", "backlogIds", "startDate", "endDate", "userIds", "backlogIds", "startDate", "endDate", "userIds", "backlogIds", "startDate", "endDate", "userIds", "iterationId", "startTime", "endTime", "userId", "backlogId", "limit", "taskId", "limit", "storyId", "limit", "user", "interval", "userId"], "CO": ["/**\n     * Return all hour entries for an iteration\n     * \n     * @param iterationId\n     * @return\n     */", "/**\n     * Recursive hour entry lookup. Will search from the given backlogs and all of their sub backlogs.\n     * \n     * @param backlogIds Set of backlog ids. If argument is null, method will return an empty list.\n     * @param startDate Beginning (or null) of the search interval.\n     * @param endDate End (or null) of the search interval.\n     * @param userIds Set of user ids (or null).\n     * @return List of matched hour entries.\n     */", "/**\n     * @see getBacklogHourEntriesByFilter\n     */", "/**\n     * @see getBacklogHourEntriesByFilter\n     */", "/**\n     * Gets the iterations backlog, story and task hour entries and\n     * calculates the sum of their spent time.\n     */", "/**\n     * Get all hour entries matching the given filter.\n     */", "//public HourEntry retrieveLatestByUser(User user);"], "CODE": "package fi.hut.soberit.agilefant.db;\n\nimport java.util.List;\nimport java.util.Set;\n\nimport org.joda.time.DateTime;\nimport org.joda.time.Interval;\n\nimport fi.hut.soberit.agilefant.model.BacklogHourEntry;\nimport fi.hut.soberit.agilefant.model.HourEntry;\nimport fi.hut.soberit.agilefant.model.StoryHourEntry;\nimport fi.hut.soberit.agilefant.model.TaskHourEntry;\nimport fi.hut.soberit.agilefant.model.User;\n\npublic interface HourEntryDAO extends GenericDAO<HourEntry> {\n\n    long calculateSumByUserAndTimeInterval(User user, DateTime startDate,\n            DateTime endDate);\n    \n    long calculateSumByUserAndTimeInterval(int userId, DateTime startDate,\n            DateTime endDate);\n\n    long calculateSumByStory(int storyId);\n\n    long calculateSumFromTasksWithoutStory(int iterationId);\n    \n    /**\n     * Return all hour entries for an iteration\n     * \n     * @param iterationId\n     * @return\n     */\n    public List<HourEntry> getAllIterationHourEntries(int iterationId);\n    \n    /**\n     * Recursive hour entry lookup. Will search from the given backlogs and all of their sub backlogs.\n     * \n     * @param backlogIds Set of backlog ids. If argument is null, method will return an empty list.\n     * @param startDate Beginning (or null) of the search interval.\n     * @param endDate End (or null) of the search interval.\n     * @param userIds Set of user ids (or null).\n     * @return List of matched hour entries.\n     */\n    public List<BacklogHourEntry> getBacklogHourEntriesByFilter(\n            Set<Integer> backlogIds, DateTime startDate, DateTime endDate, Set<Integer> userIds);\n\n    /**\n     * @see getBacklogHourEntriesByFilter\n     */\n    public List<TaskHourEntry> getTaskHourEntriesByFilter(Set<Integer> backlogIds,\n            DateTime startDate, DateTime endDate, Set<Integer> userIds);\n\n    /**\n     * @see getBacklogHourEntriesByFilter\n     */\n    public List<StoryHourEntry> getStoryHourEntriesByFilter(Set<Integer> backlogIds,\n            DateTime startDate, DateTime endDate, Set<Integer> userIds);\n    \n    /**\n     * Gets the iterations backlog, story and task hour entries and\n     * calculates the sum of their spent time.\n     */\n    public long calculateIterationHourEntriesSum(int iterationId);\n    \n    /**\n     * Get all hour entries matching the given filter.\n     */\n    public List<HourEntry> getHourEntriesByFilter(DateTime startTime,\n            DateTime endTime, int userId);\n\n    List<HourEntry> getBacklogHourEntries(int backlogId, int limit);\n\n    List<HourEntry> getTaskHourEntries(int taskId, int limit);\n\n    List<HourEntry> getStoryHourEntries(int storyId, int limit);\n    \n    public List<HourEntry> retrieveByUserAndInterval(User user, Interval interval);\n\n    long retrieveLatestHourEntryDelta(int userId);\n    \n    //public HourEntry retrieveLatestByUser(User user);\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\IterationDAO.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["IterationDAO"], "MN": ["getAllTasksForIteration", "countIterationStoriesByState", "getCountOfDoneAndAllTasks", "getCountOfDoneAndNonDeferred", "getCountOfDoneAndAllStories", "getTotalAvailability", "retrieveEmptyIterationsWithPlannedSize", "retrieveCurrentAndFutureIterationsAt", "retrieveAllStandAloneIterations", "retrieveDeep", "retrieveActiveWithUserAssigned", "calculateIterationDirectStoryMetrics", "calculateIterationTaskEffortSpent", "getIterationFromReadonlyToken", "getIterationCountFromReadonlyToken"], "PN": ["iteration", "iterationId", "iteration", "iteration", "iteration", "iterationIds", "startDate", "endDate", "assignee", "dayStart", "iterationId", "userId", "iteration", "iteration", "token", "token"], "CO": ["/**\n * Interface for a DAO of an Iteration.\n * \n * @see GenericDAO\n */", "/**\n     * Retrieves an iteration by id and fetches eagerly the following\n     * associations:\n     * \n     * <ul>\n     * <li>tasks</li>\n     * <li>tasks.responsibles</li>\n     * <li>tasks.whatsNextEntries</li>\n     * <li>stories</li>\n     * <li>stories.labels</li>\n     * <li>stories.tasks</li>\n     * <li>stories.tasks.responsibles</li>\n     * <li>stories.tasks.whatsNextEntries</li>\n     * </ul>\n     * \n     * @param iterationId\n     * @return retrieved iteration object\n     */"], "CODE": "package fi.hut.soberit.agilefant.db;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\nimport org.joda.time.DateTime;\n\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.StoryState;\nimport fi.hut.soberit.agilefant.model.Task;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.util.Pair;\nimport fi.hut.soberit.agilefant.util.StoryMetrics;\n\n/**\n * Interface for a DAO of an Iteration.\n * \n * @see GenericDAO\n */\npublic interface IterationDAO extends GenericDAO<Iteration> {\n\n    public List<Task> getAllTasksForIteration(Iteration iteration);\n\n    public Map<StoryState, Integer> countIterationStoriesByState(int iterationId);\n\n    public Pair<Integer, Integer> getCountOfDoneAndAllTasks(Iteration iteration);\n\n    public Pair<Integer, Integer> getCountOfDoneAndNonDeferred(Iteration iteration);\n    \n    public Pair<Integer, Integer> getCountOfDoneAndAllStories(\n            Iteration iteration);\n\n    public Map<Integer, Integer> getTotalAvailability(Set<Integer> iterationIds);\n\n    public List<Iteration> retrieveEmptyIterationsWithPlannedSize(\n            DateTime startDate, DateTime endDate, User assignee);\n\n    public List<Iteration> retrieveCurrentAndFutureIterationsAt(\n            DateTime dayStart);\n    \n    public List<Iteration> retrieveAllStandAloneIterations();\n\n    /**\n     * Retrieves an iteration by id and fetches eagerly the following\n     * associations:\n     * \n     * <ul>\n     * <li>tasks</li>\n     * <li>tasks.responsibles</li>\n     * <li>tasks.whatsNextEntries</li>\n     * <li>stories</li>\n     * <li>stories.labels</li>\n     * <li>stories.tasks</li>\n     * <li>stories.tasks.responsibles</li>\n     * <li>stories.tasks.whatsNextEntries</li>\n     * </ul>\n     * \n     * @param iterationId\n     * @return retrieved iteration object\n     */\n    public Iteration retrieveDeep(int iterationId);\n\n    List<Iteration> retrieveActiveWithUserAssigned(int userId);\n    \n    public Map<Integer, StoryMetrics> calculateIterationDirectStoryMetrics(\n            Iteration iteration);\n    \n    public Map<Integer, Long> calculateIterationTaskEffortSpent(Iteration iteration);\n    \n    public Iteration getIterationFromReadonlyToken(String token);\n    \n    public int getIterationCountFromReadonlyToken(String token);\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\IterationHistoryEntryDAO.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["IterationHistoryEntryDAO"], "MN": ["retrieveLatest", "calculateCurrentHistoryData", "getHistoryEntriesForIteration", "retrieveByDate"], "PN": ["iterationId", "iterationId", "iterationId", "iterationId", "timestamp"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.db;\n\n\nimport java.util.List;\n\nimport org.joda.time.LocalDate;\n\nimport fi.hut.soberit.agilefant.model.ExactEstimate;\nimport fi.hut.soberit.agilefant.model.IterationHistoryEntry;\nimport fi.hut.soberit.agilefant.util.Pair;\n\npublic interface IterationHistoryEntryDAO extends\n        GenericDAO<IterationHistoryEntry> {\n\n    IterationHistoryEntry retrieveLatest(int iterationId);\n\n    Pair<ExactEstimate, ExactEstimate> calculateCurrentHistoryData(int iterationId);\n\n    public List<IterationHistoryEntry> getHistoryEntriesForIteration(\n            int iterationId);\n\n    IterationHistoryEntry retrieveByDate(int iterationId, LocalDate timestamp);\n    \n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\LabelDAO.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["LabelDAO"], "MN": ["labelExists", "lookupLabelsLike"], "PN": ["labelName", "story", "labelName"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.db;\n\nimport java.util.List;\n\nimport fi.hut.soberit.agilefant.model.Label;\nimport fi.hut.soberit.agilefant.model.Story;\n\npublic interface LabelDAO extends GenericDAO<Label> {\n\n    public boolean labelExists(String labelName, Story story);\n\n    List<Label> lookupLabelsLike(String labelName);\n\n}", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\LoginDAO.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["LoginDAO"], "MN": ["retrieveLoginsByUser", "retrieveLoginCountByUser"], "PN": ["user", "user"], "CO": ["/**\n * DAO object for Login model object\n * \n */", "/**\n\t * Retrieve logins for a user\n\t * \n\t * @param user user for which logins are to be retrieved\n\t * @return list of logins for user\n\t */", "/**\n     * Retrieve the number of logins for a user\n     * \n     * @param user user for which login count is to be retrieved\n     * @return login count\n     */"], "CODE": "package fi.hut.soberit.agilefant.db;\n\nimport java.util.List;\n\nimport fi.hut.soberit.agilefant.model.Login;\nimport fi.hut.soberit.agilefant.model.User;\n\n/**\n * DAO object for Login model object\n * \n */\npublic interface LoginDAO extends GenericDAO<Login> {\n\n\t/**\n\t * Retrieve logins for a user\n\t * \n\t * @param user user for which logins are to be retrieved\n\t * @return list of logins for user\n\t */\n    public List<Login> retrieveLoginsByUser(User user);\n    \n    /**\n     * Retrieve the number of logins for a user\n     * \n     * @param user user for which login count is to be retrieved\n     * @return login count\n     */\n    public int retrieveLoginCountByUser(User user);\n}\n\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\package-info.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": [], "CO": ["/**\n * This package contains all DAO interfaces. \n */"], "CODE": "/**\n * This package contains all DAO interfaces. \n */\npackage fi.hut.soberit.agilefant.db;", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\ProductDAO.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["ProductDAO"], "MN": ["getAllOrderByName", "retrieveBacklogTree", "retrieveLeafStories", "retrieveScheduleStartAndEnd"], "PN": ["product", "product"], "CO": ["/**\n * Interface for a DAO of a Product.\n * \n * @see GenericDAO\n */"], "CODE": "package fi.hut.soberit.agilefant.db;\n\nimport java.util.Collection;\nimport java.util.List;\n\nimport org.joda.time.DateTime;\n\nimport fi.hut.soberit.agilefant.model.Product;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.util.Pair;\n\n/**\n * Interface for a DAO of a Product.\n * \n * @see GenericDAO\n */\npublic interface ProductDAO extends GenericDAO<Product> {\n\n    Collection<Product> getAllOrderByName();\n    \n    public List<Product> retrieveBacklogTree();\n\n    public List<Story> retrieveLeafStories(Product product);\n    \n    public Pair<DateTime, DateTime> retrieveScheduleStartAndEnd(Product product);\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\ProjectDAO.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["ProjectDAO"], "MN": ["getAssignedUsers", "getProjectsWithUserAssigned", "getActiveProjectsSortedByRank", "getUnrankedProjects", "getRankedProjects", "getProjectsWithRankBetween", "getMaxRankedProject", "getProjectWithRankLessThan", "increaseRankedProjectRanks", "retrieveActiveWithUserAssigned", "getHistoryEntriesForProject", "calculateProjectStoryMetrics"], "PN": ["project", "user", "startDate", "endDate", "startDate", "endDate", "lower", "upper", "rank", "userId", "id", "backlogId"], "CO": ["/**\n * Interface for a DAO of a Project.\n * \n * @see GenericDAO\n */", "/**\n     * Gets a collection of users assigned to the project.\n     */", "/**\n     * Gets all active projects (endDate > today)\n     * @return projects\n     */", "/**\n     * Gets a collection of unranked projects\n     * @param startDate start date\n     * @param endDate end date\n     * @return projects\n     */", "/**\n     * Gets a list of ranked projects\n     * @param startDate start date\n     * @param endDate end date\n     * @return projects\n     */"], "CODE": "package fi.hut.soberit.agilefant.db;\n\nimport java.util.Collection;\nimport java.util.List;\n\nimport org.joda.time.LocalDate;\n\nimport fi.hut.soberit.agilefant.model.BacklogHistoryEntry;\nimport fi.hut.soberit.agilefant.model.Project;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.transfer.ProjectMetrics;\n\n/**\n * Interface for a DAO of a Project.\n * \n * @see GenericDAO\n */\npublic interface ProjectDAO extends GenericDAO<Project> {\n\n    /**\n     * Gets a collection of users assigned to the project.\n     */\n    public Collection<User> getAssignedUsers(Project project);\n    \n    public Collection<Project> getProjectsWithUserAssigned(User user);\n    \n    /**\n     * Gets all active projects (endDate > today)\n     * @return projects\n     */\n    public List<Project> getActiveProjectsSortedByRank();\n    \n    /**\n     * Gets a collection of unranked projects\n     * @param startDate start date\n     * @param endDate end date\n     * @return projects\n     */\n    public Collection<Project> getUnrankedProjects(LocalDate startDate, LocalDate endDate);\n    \n    /**\n     * Gets a list of ranked projects\n     * @param startDate start date\n     * @param endDate end date\n     * @return projects\n     */\n    public List<Project> getRankedProjects(LocalDate startDate, LocalDate endDate);\n\n    Collection<Project> getProjectsWithRankBetween(int lower, int upper);\n    \n    public Project getMaxRankedProject();\n\n    Project getProjectWithRankLessThan(int rank);\n\n    void increaseRankedProjectRanks();\n\n    List<Project> retrieveActiveWithUserAssigned(int userId);\n    public List<BacklogHistoryEntry> getHistoryEntriesForProject(int id);\n    \n    public ProjectMetrics calculateProjectStoryMetrics(int backlogId);\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\SettingDAO.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["SettingDAO"], "MN": ["getByName", "getAllOrderByName"], "PN": ["name"], "CO": ["/**\n * Interface for a DAO of a Setting. \n * \n * @see GenericDAO\n */"], "CODE": "package fi.hut.soberit.agilefant.db;\n\nimport java.util.Collection;\n\nimport fi.hut.soberit.agilefant.model.Setting;\n\n/**\n * Interface for a DAO of a Setting. \n * \n * @see GenericDAO\n */\npublic interface SettingDAO extends GenericDAO<Setting> {\n\n    Setting getByName(String name);\n\n    Collection<Setting> getAllOrderByName();\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\StoryAccessDAO.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["StoryAccessDAO"], "MN": ["calculateAccessCounts"], "PN": ["start", "end", "user"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.db;\n\nimport java.util.Map;\n\nimport org.joda.time.DateTime;\n\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.StoryAccess;\nimport fi.hut.soberit.agilefant.model.User;\n\npublic interface StoryAccessDAO extends GenericDAO<StoryAccess> {\n    public Map<Story, Long> calculateAccessCounts(DateTime start, DateTime end, User user);\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\StoryDAO.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["StoryDAO"], "MN": ["calculateMetrics", "getStoryPointSumByIteration", "getStoryValueSumByIteration", "getCompletedStoryValueSumByIteration", "getNumOfResponsiblesByStory", "getAllIterationStoriesByResponsibleAndInterval", "retrieveStoriesInIteration", "retrieveStoriesInBacklog", "retrieveActiveIterationStoriesWithUserResponsible", "searchByName", "searchByID"], "PN": ["storyId", "iterationId", "iterationId", "iterationId", "storyIds", "user", "interval", "iteration", "backlog", "userId", "name", "id"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.db;\n\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\nimport org.joda.time.Interval;\n\nimport fi.hut.soberit.agilefant.model.Backlog;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.util.StoryMetrics;\n\npublic interface StoryDAO extends GenericDAO<Story> {\n\n    StoryMetrics calculateMetrics(int storyId);\n\n    public int getStoryPointSumByIteration(int iterationId);\n    public int getStoryValueSumByIteration(int iterationId);\n    public int getCompletedStoryValueSumByIteration(int iterationId);\n\n    public Map<Integer, Integer> getNumOfResponsiblesByStory(Set<Integer> storyIds);\n    \n    public Collection<Story> getAllIterationStoriesByResponsibleAndInterval(User user, Interval interval);\n\n    public List<Story> retrieveStoriesInIteration(Iteration iteration);\n\n    public List<Story> retrieveStoriesInBacklog(Backlog backlog);\n    \n    List<Story> retrieveActiveIterationStoriesWithUserResponsible(int userId);\n    \n    public List<Story> searchByName(String name);\n    \n    public List<Story> searchByID(Integer id);\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\StoryHierarchyDAO.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["StoryHierarchyDAO"], "MN": ["retrieveProjectRootStories", "retrieveProjectLeafStories", "totalLeafStoryPoints", "totalLeafDoneStoryPoints", "totalRootStoryPoints", "totalLeafStoryPoints", "totalLeafDoneStoryPoints", "retrieveProductRootStories", "getMaximumTreeRank", "totalBranchStoryPoints"], "PN": ["projectId", "project", "project", "project", "project", "iteration", "iteration", "productId", "productId", "project"], "CO": ["/**\n     * Fetch root stories that are attached to the given project or any of the\n     * iterations under the project. Root story stands for story that either has\n     * no parent story or the parent story is in the product backlog.\n     * \n     * @param project id\n     * @return list of root stories\n     */", "/***\n     * Fetch leaf stories that are attached to the given project or any of the\n     * iterations under the project. Leaf story means a story which has no child\n     * stories.\n     * \n     * @param project\n     * @return list of leaf stories\n     */", "/**\n     * Story point sum of product leaf stories.\n     * \n     * @param project\n     * @return\n     */", "/**\n     * Story point sum of done product leaf stories.\n     * \n     * @param project\n     * @return\n     */", "/**\n     * Story point sum of product root stories.\n     * \n     * @param project\n     * @return\n     */", "/**\n     * Story point sum of Standalone Iteration leaf stories.\n     * \n     * @param project\n     * @return\n     */", "/**\n     * Story point sum of done Standalone Iteration leaf stories.\n     * \n     * @param project\n     * @return\n     */", "/**\n     * Retrieve all stories within a given product that do not have \n     * a parent story.\n     * \n     * @param product id\n     * @return list of product root stories\n     */", "/**\n     * Get a rank number for a new root story.\n     * <p>\n     * Will return the count of the root stories.\n     * @param productId\n     * @return\n     */", "/**\n     * Get a sum of all the story points for branch stories for a project, including leaf stories.\n     * @param productId\n     * @return\n     */"], "CODE": "package fi.hut.soberit.agilefant.db;\n\nimport java.util.List;\n\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.Project;\nimport fi.hut.soberit.agilefant.model.Story;\n\npublic interface StoryHierarchyDAO {\n    /**\n     * Fetch root stories that are attached to the given project or any of the\n     * iterations under the project. Root story stands for story that either has\n     * no parent story or the parent story is in the product backlog.\n     * \n     * @param project id\n     * @return list of root stories\n     */\n    public List<Story> retrieveProjectRootStories(int projectId);\n\n    /***\n     * Fetch leaf stories that are attached to the given project or any of the\n     * iterations under the project. Leaf story means a story which has no child\n     * stories.\n     * \n     * @param project\n     * @return list of leaf stories\n     */\n    public List<Story> retrieveProjectLeafStories(Project project);\n\n    /**\n     * Story point sum of product leaf stories.\n     * \n     * @param project\n     * @return\n     */\n    public long totalLeafStoryPoints(Project project);\n\n    /**\n     * Story point sum of done product leaf stories.\n     * \n     * @param project\n     * @return\n     */\n    public long totalLeafDoneStoryPoints(Project project);\n\n    /**\n     * Story point sum of product root stories.\n     * \n     * @param project\n     * @return\n     */\n    public long totalRootStoryPoints(Project project);\n    \n    /**\n     * Story point sum of Standalone Iteration leaf stories.\n     * \n     * @param project\n     * @return\n     */\n    public long totalLeafStoryPoints(Iteration iteration);\n\n    /**\n     * Story point sum of done Standalone Iteration leaf stories.\n     * \n     * @param project\n     * @return\n     */\n    public long totalLeafDoneStoryPoints(Iteration iteration);\n\n    /**\n     * Retrieve all stories within a given product that do not have \n     * a parent story.\n     * \n     * @param product id\n     * @return list of product root stories\n     */\n    public List<Story> retrieveProductRootStories(int productId);\n    \n    /**\n     * Get a rank number for a new root story.\n     * <p>\n     * Will return the count of the root stories.\n     * @param productId\n     * @return\n     */\n    public int getMaximumTreeRank(int productId);\n    \n    /**\n     * Get a sum of all the story points for branch stories for a project, including leaf stories.\n     * @param productId\n     * @return\n     */\n    public long totalBranchStoryPoints(Project project);\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\StoryHourEntryDAO.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["StoryHourEntryDAO"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.db;\n\nimport fi.hut.soberit.agilefant.model.StoryHourEntry;\n\npublic interface StoryHourEntryDAO extends GenericDAO<StoryHourEntry> {\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\StoryRankDAO.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["StoryRankDAO"], "MN": ["retrieveByBacklogAndStory", "retrieveRanksByBacklog", "getIterationRanksForStories", "getProjectRanksForStories"], "PN": ["backlog", "story", "backlog", "stories", "stories"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.db;\n\nimport java.util.Collection;\nimport java.util.List;\n\nimport fi.hut.soberit.agilefant.model.Backlog;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.StoryRank;\n\npublic interface StoryRankDAO extends GenericDAO<StoryRank> {\n    StoryRank retrieveByBacklogAndStory(Backlog backlog, Story story);\n        \n    List<StoryRank> retrieveRanksByBacklog(Backlog backlog);\n    \n    public Collection<StoryRank> getIterationRanksForStories(Collection<Story> stories);\n    public Collection<StoryRank> getProjectRanksForStories(Collection<Story> stories);\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\TaskDAO.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["TaskDAO"], "MN": ["getStoryTasksWithEffortLeft", "getIterationTasksWithEffortLeft", "getStoryAssignedTasksWithEffortLeft", "getNumOfResponsiblesByTask", "getAllIterationAndStoryTasks", "getAllTasks", "getUnassignedStoryTasksWithEffortLeft", "getUnassignedIterationTasksWithEffortLeft", "getTasksWithRankBetween", "getNextTaskInRank", "getLastTaskInRank", "searchByName", "searchByID"], "PN": ["user", "interval", "user", "interval", "user", "interval", "taskIds", "user", "interval", "user", "interval", "user", "interval", "user", "interval", "lower", "upper", "parentIteration", "parentStory", "rank", "iteration", "story", "story", "iteration", "name", "id"], "CO": ["/**\n     * Lookup tasks that are assigned to the given user and are attached to an\n     * iteration via a story. Will lookup only tasks from iterations that\n     * overlap with the given interval.\n     * \n     * @param user\n     *            Assignee or one of the assignees for the searched tasks.\n     * @param interval\n     *            Search interval for the container iteration.\n     */", "/**\n     * Lookup tasks that are assigned to the given user and are directly\n     * attached to an iteration. Will lookup only tasks from iterations that\n     * overlap with the given interval.\n     * \n     * @param user\n     *            Assignee or one of the assignees for the searched tasks.\n     * @param interval\n     *            Search interval for the container iteration.\n     */", "/**\n     * Count total number of assignees per task.\n     * \n     * @param taskIds \n     * @return\n     */", "/**\n     * Lookup tasks that are assigned to the given user and are either directly\n     * attached to an iteration, or whose story is attached to an iteration. \n     * Selects only tasks from iterations that overlap with the given interval,\n     * or whose story timeframe overlaps with the given interval. Only\n     * returns tasks that are not yet done.\n     * \n     * @param user\n     *            Assignee or one of the assignees for the searched tasks.\n     * @param interval\n     *            Search interval for the container iteration.\n     */", "/**\n     * Lookup tasks that are assigned to the given user and are either directly\n     * attached to an iteration, or whose story is attached to any \n     * backlog (iteration, project or product).\n     * Selects only tasks from iterations that overlap with the given interval,\n     * or whose story timeframe overlaps with the given interval. Only\n     * returns tasks that are not done, deferred, or whose story is not\n     * deferred.\n     * \n     * @param user\n     *            Assignee or one of the assignees for the searched tasks.\n     * @param interval\n     *            Search interval for the container backlog.\n     */", "/**\n     * \n     * @param user\n     * @param interval\n     * @return\n     */", "/**\n     * \n     * @param user\n     * @param interval\n     * @return\n     */", "/**\n     * Get the iteration's straight child tasks with rank between and including\n     * lower and upper borders.\n     * <p>\n     * Will not get the iteration's stories' tasks.\n     * @param lower lower border of the rank (0 if topmost included)\n     * @param upper upper border of the rank\n     * @param parentIteration the parent iteration\n     * @param parentStory TODO\n     * \n     * @return\n     */", "/**\n     * Gets the next task with the given parent and rank > parameter,\n     * excluding parameter.\n     * <p>\n     * Supply only one of the parameters iterationId and storyId.\n     *  \n     * @return the next task in rank, null if not found\n     */", "/**\n     * Gets the last ranked task for given parent.\n     * <p>\n     * Only one id should be supplied, otherwise will return <code>null</code>.\n     */", "/**\n     * Gets the list of all tasks that are found in the given search term.\n     * @param name Search term\n     * \n     * @return List of all tasks in search term\n     */"], "CODE": "package fi.hut.soberit.agilefant.db;\n\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\nimport org.joda.time.Interval;\n\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.Task;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.transfer.UnassignedLoadTO;\n\npublic interface TaskDAO extends GenericDAO<Task> {\n    \n    /**\n     * Lookup tasks that are assigned to the given user and are attached to an\n     * iteration via a story. Will lookup only tasks from iterations that\n     * overlap with the given interval.\n     * \n     * @param user\n     *            Assignee or one of the assignees for the searched tasks.\n     * @param interval\n     *            Search interval for the container iteration.\n     */\n    public List<Task> getStoryTasksWithEffortLeft(User user, Interval interval);\n    \n    /**\n     * Lookup tasks that are assigned to the given user and are directly\n     * attached to an iteration. Will lookup only tasks from iterations that\n     * overlap with the given interval.\n     * \n     * @param user\n     *            Assignee or one of the assignees for the searched tasks.\n     * @param interval\n     *            Search interval for the container iteration.\n     */\n    public List<Task> getIterationTasksWithEffortLeft(User user,\n            Interval interval);\n\n    \n    public List<Task> getStoryAssignedTasksWithEffortLeft(User user, Interval interval);\n    /**\n     * Count total number of assignees per task.\n     * \n     * @param taskIds \n     * @return\n     */\n    public Map<Integer, Integer> getNumOfResponsiblesByTask(Set<Integer> taskIds);\n\n    /**\n     * Lookup tasks that are assigned to the given user and are either directly\n     * attached to an iteration, or whose story is attached to an iteration. \n     * Selects only tasks from iterations that overlap with the given interval,\n     * or whose story timeframe overlaps with the given interval. Only\n     * returns tasks that are not yet done.\n     * \n     * @param user\n     *            Assignee or one of the assignees for the searched tasks.\n     * @param interval\n     *            Search interval for the container iteration.\n     */\n    public List<Task> getAllIterationAndStoryTasks(User user, Interval interval);\n    \n    /**\n     * Lookup tasks that are assigned to the given user and are either directly\n     * attached to an iteration, or whose story is attached to any \n     * backlog (iteration, project or product).\n     * Selects only tasks from iterations that overlap with the given interval,\n     * or whose story timeframe overlaps with the given interval. Only\n     * returns tasks that are not done, deferred, or whose story is not\n     * deferred.\n     * \n     * @param user\n     *            Assignee or one of the assignees for the searched tasks.\n     * @param interval\n     *            Search interval for the container backlog.\n     */\n    public List<Task> getAllTasks(User user, Interval interval);\n\n    \n    /**\n     * \n     * @param user\n     * @param interval\n     * @return\n     */\n    public List<UnassignedLoadTO> getUnassignedStoryTasksWithEffortLeft(User user,\n            Interval interval);\n    \n    /**\n     * \n     * @param user\n     * @param interval\n     * @return\n     */\n    public List<UnassignedLoadTO> getUnassignedIterationTasksWithEffortLeft(User user,\n            Interval interval);\n\n    /**\n     * Get the iteration's straight child tasks with rank between and including\n     * lower and upper borders.\n     * <p>\n     * Will not get the iteration's stories' tasks.\n     * @param lower lower border of the rank (0 if topmost included)\n     * @param upper upper border of the rank\n     * @param parentIteration the parent iteration\n     * @param parentStory TODO\n     * \n     * @return\n     */\n    public Collection<Task> getTasksWithRankBetween(int lower, int upper, Iteration parentIteration, Story parentStory);\n    \n    /**\n     * Gets the next task with the given parent and rank > parameter,\n     * excluding parameter.\n     * <p>\n     * Supply only one of the parameters iterationId and storyId.\n     *  \n     * @return the next task in rank, null if not found\n     */\n    public Task getNextTaskInRank(int rank, Iteration iteration, Story story);\n\n    \n    /**\n     * Gets the last ranked task for given parent.\n     * <p>\n     * Only one id should be supplied, otherwise will return <code>null</code>.\n     */\n    public Task getLastTaskInRank(Story story, Iteration iteration);\n    \n    /**\n     * Gets the list of all tasks that are found in the given search term.\n     * @param name Search term\n     * \n     * @return List of all tasks in search term\n     */\n    public List<Task> searchByName(String name);\n    \n    public List<Task> searchByID(Integer id);\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\TaskHourEntryDAO.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["TaskHourEntryDAO"], "MN": ["retrieveByTask"], "PN": ["parent"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.db;\n\nimport java.util.List;\n\nimport fi.hut.soberit.agilefant.model.Task;\nimport fi.hut.soberit.agilefant.model.TaskHourEntry;\n\npublic interface TaskHourEntryDAO extends GenericDAO<TaskHourEntry> {\n    List<TaskHourEntry> retrieveByTask(Task parent);\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\TeamDAO.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["TeamDAO"], "MN": ["getByTeamName"], "PN": ["teamName"], "CO": ["/**\n * Interface for a DAO of a Team.\n * \n * @see GenericDAO\n */", "/**\n     * Get the team by team name.\n     * \n     * Is case-sensitive.\n     */"], "CODE": "package fi.hut.soberit.agilefant.db;\n\nimport fi.hut.soberit.agilefant.model.Team;\n\n/**\n * Interface for a DAO of a Team.\n * \n * @see GenericDAO\n */\npublic interface TeamDAO extends GenericDAO<Team> {\n\t\n    /**\n     * Get the team by team name.\n     * \n     * Is case-sensitive.\n     */\n\tTeam getByTeamName(String teamName);\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\UserDAO.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["UserDAO"], "MN": ["getByLoginName", "getByLoginNameIgnoreCase", "listUsersByEnabledStatus", "searchByName"], "PN": ["loginName", "loginName", "enabled", "searchTerm"], "CO": ["/**\n * Interface for a DAO of a User.\n * \n * @see GenericDAO\n */", "/**\n     * Get the user by login name.\n     * \n     * Is case-sensitive.\n     */", "/**\n     * Get the user by login name.\n     * \n     * Ignores character case.\n     */", "/**\n     * Get the users by their enabled status.\n     * <p>\n     * If set to true, gets all enabled users.\n     * If set to false, gets all disabled users.\n     * @param enabled whether the wanted users are enabled or disabled\n     */"], "CODE": "package fi.hut.soberit.agilefant.db;\n\nimport java.util.List;\n\nimport fi.hut.soberit.agilefant.model.User;\n\n/**\n * Interface for a DAO of a User.\n * \n * @see GenericDAO\n */\npublic interface UserDAO extends GenericDAO<User> {\n\n    /**\n     * Get the user by login name.\n     * \n     * Is case-sensitive.\n     */\n    User getByLoginName(String loginName);\n    \n    /**\n     * Get the user by login name.\n     * \n     * Ignores character case.\n     */\n    User getByLoginNameIgnoreCase(String loginName);\n\n    /**\n     * Get the users by their enabled status.\n     * <p>\n     * If set to true, gets all enabled users.\n     * If set to false, gets all disabled users.\n     * @param enabled whether the wanted users are enabled or disabled\n     */\n    List<User> listUsersByEnabledStatus(boolean enabled);\n    \n    List<User> searchByName(String searchTerm);\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\WhatsNextEntryDAO.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["WhatsNextEntryDAO"], "MN": ["getTasksWithRankBetween", "getLastTaskInRank", "getWhatsNextEntryFor", "getWhatsNextEntriesFor", "removeAllByTask", "getTopmostWorkQueueEntries"], "PN": ["lower", "upper", "user", "user", "user", "task", "user", "task"], "CO": ["/**\n     * Gets the user's \"what's next\" tasks with rank between and including\n     * lower and upper borders.\n     * <p>\n     * Will not get the iteration's stories' tasks.\n     * @param lower lower border of the rank (0 if topmost included)\n     * @param upper upper border of the rank\n     * @param user the user\n     * \n     * @return\n     */", "/**\n     * Gets the last ranked \"what's next\" task for given user.\n     */", "/**\n     * Gets the What's next entry for given user and given task, if exists\n     */", "/**\n     * Gets the What's next entry for given user and given task, if exists\n     */", "/**\n     * Removes all entries by task\n     * @param task\n     */", "/**\n     * Fetches User->Task mappings, for each user the first task on their work queue.\n     * @return\n     */"], "CODE": "package fi.hut.soberit.agilefant.db;\n\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.Map;\n\nimport fi.hut.soberit.agilefant.model.Task;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.model.WhatsNextEntry;\n\npublic interface WhatsNextEntryDAO extends GenericDAO<WhatsNextEntry> {\n    /**\n     * Gets the user's \"what's next\" tasks with rank between and including\n     * lower and upper borders.\n     * <p>\n     * Will not get the iteration's stories' tasks.\n     * @param lower lower border of the rank (0 if topmost included)\n     * @param upper upper border of the rank\n     * @param user the user\n     * \n     * @return\n     */\n    public Collection<WhatsNextEntry> getTasksWithRankBetween(int lower, int upper, User user);\n        \n    /**\n     * Gets the last ranked \"what's next\" task for given user.\n     */\n    public WhatsNextEntry getLastTaskInRank(User user);\n    \n    /**\n     * Gets the What's next entry for given user and given task, if exists\n     */\n    public WhatsNextEntry getWhatsNextEntryFor(User user, Task task);\n\n    /**\n     * Gets the What's next entry for given user and given task, if exists\n     */\n    public Collection<WhatsNextEntry> getWhatsNextEntriesFor(User user);\n\n    /**\n     * Removes all entries by task\n     * @param task\n     */\n    public void removeAllByTask(Task task);\n    \n    /**\n     * Fetches User->Task mappings, for each user the first task on their work queue.\n     * @return\n     */\n    public Map<User, List<Task>> getTopmostWorkQueueEntries();\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\WhatsNextStoryEntryDAO.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["WhatsNextStoryEntryDAO"], "MN": ["getStoriesWithRankBetween", "getLastStoryInRank", "getWhatsNextStoryEntryFor", "getWhatsNextStoryEntriesFor", "removeAllByStory", "getTopmostWorkQueueEntries"], "PN": ["lower", "upper", "user", "user", "user", "story", "user", "story"], "CO": ["/**\n     * Gets the user's \"what's next\" stories with rank between and including\n     * lower and upper borders.\n     * <p>\n     * @param lower lower border of the rank (0 if topmost included)\n     * @param upper upper border of the rank\n     * @param user the user\n     * \n     * @return\n     */", "/**\n     * Gets the last ranked \"what's next\" story for given user.\n     */", "/**\n     * Gets the What's next entry for given user and given story, if exists\n     */", "/**\n     * Gets the What's next entry for given user and given story, if exists\n     */", "/**\n     * Removes all entries by story\n     * @param story\n     */", "/**\n     * Fetches User->Story mappings, for each user the first story on their work queue.\n     * @return\n     */"], "CODE": "package fi.hut.soberit.agilefant.db;\n\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.Map;\n\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.model.WhatsNextStoryEntry;\n\npublic interface WhatsNextStoryEntryDAO extends GenericDAO<WhatsNextStoryEntry> {\n    /**\n     * Gets the user's \"what's next\" stories with rank between and including\n     * lower and upper borders.\n     * <p>\n     * @param lower lower border of the rank (0 if topmost included)\n     * @param upper upper border of the rank\n     * @param user the user\n     * \n     * @return\n     */\n    public Collection<WhatsNextStoryEntry> getStoriesWithRankBetween(int lower, int upper, User user);\n        \n    /**\n     * Gets the last ranked \"what's next\" story for given user.\n     */\n    public WhatsNextStoryEntry getLastStoryInRank(User user);\n    \n    /**\n     * Gets the What's next entry for given user and given story, if exists\n     */\n    public WhatsNextStoryEntry getWhatsNextStoryEntryFor(User user, Story story);\n\n    /**\n     * Gets the What's next entry for given user and given story, if exists\n     */\n    public Collection<WhatsNextStoryEntry> getWhatsNextStoryEntriesFor(User user);\n\n    /**\n     * Removes all entries by story\n     * @param story\n     */\n    public void removeAllByStory(Story story);\n    \n    /**\n     * Fetches User->Story mappings, for each user the first story on their work queue.\n     * @return\n     */\n    public Map<User, List<Story>> getTopmostWorkQueueEntries();\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\WidgetCollectionDAO.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["WidgetCollectionDAO"], "MN": ["getCollections"], "PN": [], "CO": ["/**\n     * Get all <code>WidgetCollection</code>s.\n     * <p>\n     * Will retrieve all public collections\n     * @return\n     */"], "CODE": "package fi.hut.soberit.agilefant.db;\n\n\nimport java.util.List;\n\nimport fi.hut.soberit.agilefant.model.WidgetCollection;\n\npublic interface WidgetCollectionDAO extends GenericDAO<WidgetCollection> {\n\n    /**\n     * Get all <code>WidgetCollection</code>s.\n     * <p>\n     * Will retrieve all public collections\n     * @return\n     */\n    public List<WidgetCollection> getCollections();\n}", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\hibernate\\\\AgilefantWidgetDAOHibernate.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["AgilefantWidgetDAOHibernate"], "SCS_ConstructorDeclaration": ["AgilefantWidgetDAOHibernate"], "SCS_ClassReference": ["AgilefantWidget"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.db.hibernate;\n\nimport org.springframework.stereotype.Repository;\n\nimport fi.hut.soberit.agilefant.db.AgilefantWidgetDAO;\nimport fi.hut.soberit.agilefant.model.AgilefantWidget;\n\n@Repository(\"agilefantWidgetDAO\")\npublic class AgilefantWidgetDAOHibernate extends\n        GenericDAOHibernate<AgilefantWidget> implements AgilefantWidgetDAO {\n    \n    public AgilefantWidgetDAOHibernate() {\n        super(AgilefantWidget.class);\n    }\n    \n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\hibernate\\\\AssignmentDAOHibernate.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["AssignmentDAOHibernate"], "SCS_ConstructorDeclaration": ["AssignmentDAOHibernate"], "SCS_ClassReference": ["Assignment", null, "Assignment", "crit", "crit", null, "Restrictions", "user", "interval", "interval", "Restrictions", "Restrictions", "Restrictions", "Restrictions", "Restrictions", "Restrictions", "backlog", "Restrictions", ""], "MN": ["assigmentsInBacklogTimeframe"], "PN": ["interval", "user"], "SCS_VariableDeclaration": ["Criteria", "Criteria", "DateTime", "DateTime", "Criterion", "Criterion", "Criterion", "Criterion"], "SCS_VariableDeclarator": ["crit", "backlog", "startDate", "endDate", "startDateLimit", "endDateLimit", "overlaps", "withinIteration"], "SCS_MethodInvocation": ["createCriteria", "createCriteria", "createCriteria", "add", "idEq", "getId", "getStart", "getEnd", "between", "between", "or", "and", "le", "ge", "add", "or", "asList"], "SCS_MemberReference": ["startDate", "endDate", "startDate", "endDate", "startDateLimit", "endDateLimit", "startDate", "endDate", "overlaps", "withinIteration", "crit"], "CO": ["//iteration may start during the interval", "//iteration end during the interval", "//interval may be within the iteration"], "CODE": "package fi.hut.soberit.agilefant.db.hibernate;\n\nimport java.util.List;\n\nimport org.hibernate.Criteria;\nimport org.hibernate.criterion.Criterion;\nimport org.hibernate.criterion.Restrictions;\nimport org.joda.time.DateTime;\nimport org.joda.time.Interval;\nimport org.springframework.stereotype.Repository;\n\nimport fi.hut.soberit.agilefant.db.AssignmentDAO;\nimport fi.hut.soberit.agilefant.model.Assignment;\nimport fi.hut.soberit.agilefant.model.User;\n\n@Repository(\"assignmentDAO\")\npublic class AssignmentDAOHibernate extends GenericDAOHibernate<Assignment> implements\n        AssignmentDAO {\n\n    public AssignmentDAOHibernate() {\n        super(Assignment.class);\n    }\n\n    public List<Assignment> assigmentsInBacklogTimeframe(Interval interval,\n            User user) {\n        Criteria crit = this.createCriteria(Assignment.class);\n        Criteria backlog = crit.createCriteria(\"backlog\");\n        crit.createCriteria(\"user\").add(Restrictions.idEq(user.getId()));\n        DateTime startDate = interval.getStart();\n        DateTime endDate = interval.getEnd();\n        //iteration may start during the interval\n        Criterion startDateLimit = Restrictions.between(\"startDate\", startDate,\n                endDate);\n        //iteration end during the interval\n        Criterion endDateLimit = Restrictions.between(\"endDate\", startDate,\n                endDate);\n        //interval may be within the iteration\n        Criterion overlaps = Restrictions.or(startDateLimit, endDateLimit);\n        Criterion withinIteration = Restrictions.and(Restrictions.le(\n                \"startDate\", startDate), Restrictions.ge(\"endDate\", endDate));\n        backlog.add(Restrictions.or(overlaps, withinIteration));\n        return asList(crit);\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\hibernate\\\\BacklogDAOHibernate.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["BacklogDAOHibernate"], "SCS_ConstructorDeclaration": ["BacklogDAOHibernate"], "SCS_ClassReference": ["Backlog", null, "Backlog", "criteria", "Restrictions", "backlog", "criteria", "criteria", "Projections", null, null, null, null, null, null, null, "Story", "crit", "Projections", "crit", null, "Restrictions", "", "result", null, "Story", "crit", "Projections", "crit", null, "Restrictions", "crit", "Restrictions", "", "result", "", "Backlog", null, "Restrictions", "Restrictions", "crit", "Restrictions", "crit", "Order", "crit", "Order", "crit", "", null, "Backlog", "crit", "Restrictions", "crit", "Order", "crit", "Order", "crit", "", null, "Backlog", "crit", "Restrictions", "crit", "Restrictions", ""], "MN": ["getNumberOfChildren", "getResponsiblesByBacklog", "calculateStoryPointSum", "calculateDoneStoryPointSum", "searchByName", "searchByName", "searchByID", "retrieveStandaloneIterations"], "PN": ["backlog", "backlog", "iterationId", "iterationId", "name", "name", "type", "id"], "SCS_VariableDeclaration": ["Criteria", "String", "Criteria", "Long", "Criteria", "Long", "Criteria", "Criterion", "Criterion", "Criteria", "Criteria"], "SCS_VariableDeclarator": ["criteria", "hql", "crit", "result", "crit", "result", "crit", "nameCrit", "descriptionCrit", "crit", "crit"], "SCS_MethodInvocation": ["createCriteria", "add", "idEq", "getId", "createCriteria", "setProjection", "rowCount", "asList", "get", "asTuplesList", "getCurrentSession", "createQuery", "setEntity", "createCriteria", "setProjection", "sum", "createCriteria", "add", "idEq", "uniqueResult", "intValue", "createCriteria", "setProjection", "sum", "createCriteria", "add", "idEq", "add", "eq", "uniqueResult", "intValue", "searchByName", "createCriteria", "like", "like", "add", "or", "addOrder", "asc", "addOrder", "asc", "setMaxResults", "asList", "createCriteria", "add", "eq", "addOrder", "asc", "addOrder", "asc", "setMaxResults", "asList", "createCriteria", "add", "sqlRestriction", "add", "sqlRestriction", "asCollection"], "SCS_MemberReference": ["criteria", "hql", "backlog", "iterationId", "crit", "result", "iterationId", "DONE", "crit", "result", "name", "type", "name", "ANYWHERE", "name", "ANYWHERE", "nameCrit", "descriptionCrit", "MAX_RESULTS_PER_TYPE", "crit", "id", "MAX_RESULTS_PER_TYPE", "crit", "crit"], "CO": ["/**\n * Hibernate implementation of BacklogDAO interface using GenericDAOHibernate.\n */", "/** {@inheritDoc} */"], "CODE": "package fi.hut.soberit.agilefant.db.hibernate;\n\nimport java.util.Collection;\nimport java.util.List;\n\nimport org.hibernate.Criteria;\nimport org.hibernate.Query;\nimport org.hibernate.criterion.Criterion;\nimport org.hibernate.criterion.MatchMode;\nimport org.hibernate.criterion.Order;\nimport org.hibernate.criterion.Projections;\nimport org.hibernate.criterion.Restrictions;\nimport org.springframework.stereotype.Repository;\n\nimport fi.hut.soberit.agilefant.business.SearchBusiness;\nimport fi.hut.soberit.agilefant.db.BacklogDAO;\nimport fi.hut.soberit.agilefant.model.Backlog;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.StoryState;\n\n/**\n * Hibernate implementation of BacklogDAO interface using GenericDAOHibernate.\n */\n@Repository(\"backlogDAO\")\npublic class BacklogDAOHibernate extends GenericDAOHibernate<Backlog> implements\n        BacklogDAO {\n\n    public BacklogDAOHibernate() {\n        super(Backlog.class);\n    }\n\n    /** {@inheritDoc} */\n    public int getNumberOfChildren(Backlog backlog) {\n        Criteria criteria = this.createCriteria(Backlog.class);\n        criteria.add(Restrictions.idEq(backlog.getId()));\n        criteria.createCriteria(\"children\");\n        criteria.setProjection(Projections.rowCount());\n        return ((Long)this.asList(criteria).get(0)).intValue();\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public List<Object[]> getResponsiblesByBacklog(Backlog backlog) {\n        String hql = \"from Story as story left outer join story.responsibles as resp WHERE story.backlog = ?\";\n        return this.asTuplesList(this.getCurrentSession().createQuery(hql).setEntity(0, backlog));\n    }\n\n    public int calculateStoryPointSum(int iterationId) {\n        Criteria crit = this.createCriteria(Story.class);\n        crit.setProjection(Projections.sum(\"storyPoints\"));\n        crit.createCriteria(\"iteration\").add(Restrictions.idEq(iterationId));\n        Long result = uniqueResult(crit);\n        if (result == null) return 0;\n        return result.intValue();\n    }\n    \n    public int calculateDoneStoryPointSum(int iterationId) {\n        Criteria crit = this.createCriteria(Story.class);\n        crit.setProjection(Projections.sum(\"storyPoints\"));\n        crit.createCriteria(\"iteration\").add(Restrictions.idEq(iterationId));\n        crit.add(Restrictions.eq(\"state\", StoryState.DONE));\n        Long result = uniqueResult(crit);\n        if (result == null) return 0;\n        return result.intValue();\n    }\n    \n    \n    public List<Backlog> searchByName(String name) {\n        return searchByName(name, Backlog.class);\n    }\n    \n    public List<Backlog> searchByName(String name, Class<?> type) {\n        Criteria crit = this.createCriteria(type);\n        Criterion nameCrit = Restrictions.like(\"name\", name, MatchMode.ANYWHERE);\n        Criterion descriptionCrit = Restrictions.like(\"description\", name, MatchMode.ANYWHERE);\n        crit.add(Restrictions.or(nameCrit, descriptionCrit));\n        crit.addOrder(Order.asc(\"class\"));\n        crit.addOrder(Order.asc(\"name\"));\n        crit.setMaxResults(SearchBusiness.MAX_RESULTS_PER_TYPE);\n        return asList(crit);\n    }\n    \n    public List<Backlog> searchByID(Integer id) {\n        Criteria crit = this.createCriteria(Backlog.class);\n        crit.add(Restrictions.eq(\"id\", id));\n        crit.addOrder(Order.asc(\"class\"));\n        crit.addOrder(Order.asc(\"name\"));\n        crit.setMaxResults(SearchBusiness.MAX_RESULTS_PER_TYPE);\n        return asList(crit);\n    }\n    \n    public Collection<Backlog> retrieveStandaloneIterations() {\n        Criteria crit = this.createCriteria(Backlog.class);\n        crit.add(Restrictions.sqlRestriction(\"{alias}.parent_id is NULL\"));\n        crit.add(Restrictions.sqlRestriction(\"{alias}.backlogType like 'Iteration'\"));\n        return asCollection(crit);\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\hibernate\\\\BacklogHistoryEntryDAOHibernate.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["BacklogHistoryEntryDAOHibernate"], "SCS_ConstructorDeclaration": ["BacklogHistoryEntryDAOHibernate"], "SCS_ClassReference": ["BacklogHistoryEntry", null, "BacklogHistoryEntry", "crit", "Restrictions", "crit", "Restrictions", "crit", "Order", "crit", "", null, "BacklogHistoryEntry", "crit", "Restrictions", "crit", "Order", "crit", "Projections", null, "Projections", null, "Projections", null, "Projections", null, "Projections", "", "ProjectBurnupData"], "MN": ["retrieveLatest", "retrieveBurnupData"], "PN": ["timestamp", "backlogId", "projectId"], "SCS_VariableDeclaration": ["Criteria", "Criteria", "List"], "SCS_VariableDeclarator": ["crit", "crit", "data"], "SCS_MethodInvocation": ["createCriteria", "add", "eq", "add", "le", "addOrder", "desc", "setMaxResults", "uniqueResult", "createCriteria", "add", "eq", "addOrder", "asc", "setProjection", "projectionList", "add", "groupProperty", "add", "max", "add", "max", "add", "max", "asList", "createFromRawData"], "SCS_MemberReference": ["backlogId", "timestamp", "crit", "projectId", "crit", "data"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.db.hibernate;\n\nimport java.util.List;\n\nimport org.hibernate.Criteria;\nimport org.hibernate.criterion.Order;\nimport org.hibernate.criterion.Projections;\nimport org.hibernate.criterion.Restrictions;\nimport org.joda.time.DateTime;\nimport org.springframework.stereotype.Repository;\n\nimport fi.hut.soberit.agilefant.db.BacklogHistoryEntryDAO;\nimport fi.hut.soberit.agilefant.model.BacklogHistoryEntry;\nimport fi.hut.soberit.agilefant.util.ProjectBurnupData;\n\n@Repository(\"backlogHistoryEntryDAO\")\npublic class BacklogHistoryEntryDAOHibernate extends\n        GenericDAOHibernate<BacklogHistoryEntry> implements\n        BacklogHistoryEntryDAO {\n\n    public BacklogHistoryEntryDAOHibernate() {\n        super(BacklogHistoryEntry.class);\n    }\n\n    public BacklogHistoryEntry retrieveLatest(DateTime timestamp, int backlogId) {\n        Criteria crit = this.createCriteria(\n                BacklogHistoryEntry.class);\n        crit.add(Restrictions.eq(\"backlog.id\", backlogId));\n        crit.add(Restrictions.le(\"timestamp\", timestamp));\n        crit.addOrder(Order.desc(\"timestamp\"));\n        crit.setMaxResults(1);\n        return uniqueResult(crit);\n    }\n\n    public ProjectBurnupData retrieveBurnupData(int projectId) {\n        Criteria crit = this.createCriteria(\n                BacklogHistoryEntry.class);\n        crit.add(Restrictions.eq(\"backlog.id\", projectId));\n        crit.addOrder(Order.asc(\"timestamp\"));\n        crit\n                .setProjection(Projections.projectionList().add(\n                        Projections.groupProperty(\"timestamp\")).add(\n                        Projections.max(\"estimateSum\")).add(\n                        Projections.max(\"doneSum\")).add(Projections.max(\"branchMax\")));\n        List<Object[]> data = asList(crit);\n        return ProjectBurnupData.createFromRawData(data);\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\hibernate\\\\BacklogHourEntryDAOHibernate.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["BacklogHourEntryDAOHibernate"], "SCS_ConstructorDeclaration": ["BacklogHourEntryDAOHibernate"], "SCS_ClassReference": ["BacklogHourEntry", null, null, "criteria", "Restrictions", null], "MN": ["retrieveByBacklog"], "PN": ["target"], "SCS_VariableDeclaration": ["Criteria"], "SCS_VariableDeclarator": ["criteria"], "SCS_MethodInvocation": ["createCriteria", "getPersistentClass", "add", "eq", "asList"], "SCS_MemberReference": ["target", "criteria"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.db.hibernate;\n\nimport java.util.List;\n\nimport org.hibernate.Criteria;\nimport org.hibernate.criterion.Restrictions;\nimport org.springframework.stereotype.Repository;\n\nimport fi.hut.soberit.agilefant.db.BacklogHourEntryDAO;\nimport fi.hut.soberit.agilefant.model.Backlog;\nimport fi.hut.soberit.agilefant.model.BacklogHourEntry;\n\n@Repository(\"backlogHourEntryDAO\")\npublic class BacklogHourEntryDAOHibernate extends GenericDAOHibernate<BacklogHourEntry> implements\n        BacklogHourEntryDAO {\n\n    public BacklogHourEntryDAOHibernate() {\n        super(BacklogHourEntry.class);\n    }\n    \n    @SuppressWarnings(\"unchecked\")\n    public List<BacklogHourEntry> retrieveByBacklog(Backlog target) {\n    \tCriteria criteria = this.createCriteria(this.getPersistentClass());\n    \tcriteria.add(Restrictions.eq(\"backlog\", target));\n    \treturn this.asList(criteria);\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\hibernate\\\\Email.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "SCS_AnnotationDeclaration": ["Email"], "SCS_ClassReference": ["EmailValidator"], "SCS_MemberReference": ["METHOD", "FIELD", "RUNTIME"], "CN": [], "CO": ["/**\n * Annotation to enable our hibernate custom email validator.\n * \n * @author Turkka \u00c3\u201eij\u00c3\u00a4l\u00c3\u00a4\n * @see fi.fi.hut.soberit.agilefant.db.hibernate.EmailValidator\n */", "// bind to EmailValidator"], "CODE": "package fi.hut.soberit.agilefant.db.hibernate;\n\nimport java.lang.annotation.Documented;\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\nimport javax.validation.Constraint;\nimport javax.validation.Payload;\n\n/**\n * Annotation to enable our hibernate custom email validator.\n * \n * @author Turkka \u00c3\u201eij\u00c3\u00a4l\u00c3\u00a4\n * @see fi.fi.hut.soberit.agilefant.db.hibernate.EmailValidator\n */\n@Documented\n@Constraint(validatedBy = EmailValidator.class)\n// bind to EmailValidator\n@Target({ ElementType.METHOD, ElementType.FIELD })\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface Email {\n    String message() default \"is not a proper email address\";\n\n    Class<? extends Payload>[] payload() default {};\n\n    Class<?>[] groups() default {};\n}", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\hibernate\\\\EmailValidator.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["EmailValidator"], "AN": ["serialVersionUID", "EMAIL_PATTERN"], "SCS_VariableDeclarator": ["serialVersionUID", "EMAIL_PATTERN"], "MN": ["initialize", "isValid"], "PN": ["parameters", "value", "context"], "SCS_ClassReference": ["Strings", "org.apache.commons.validator.routines.EmailValidator", null, "EMAIL_PATTERN", null, "Pattern"], "SCS_MethodInvocation": ["isNullOrEmpty", "getInstance", "isValid", "matcher", "matches", "compile"], "SCS_MemberReference": ["value", "value", "value"], "CO": ["/**\n * Implementation of the email validator. When using the email annotation in the\n * hibernate data model, this class is used to validate if the field is a proper\n * email address.\n * \n * @author Turkka \u00c3\u201eij\u00c3\u00a4l\u00c3\u00a4\n * @see fi.fi.hut.soberit.agilefant.db.hibernate.Email\n */"], "CODE": "package fi.hut.soberit.agilefant.db.hibernate;\n\nimport java.io.Serializable;\nimport java.util.regex.Pattern;\n\nimport javax.validation.ConstraintValidator;\nimport javax.validation.ConstraintValidatorContext;\n\nimport com.google.common.base.Strings;\n\n/**\n * Implementation of the email validator. When using the email annotation in the\n * hibernate data model, this class is used to validate if the field is a proper\n * email address.\n * \n * @author Turkka \u00c3\u201eij\u00c3\u00a4l\u00c3\u00a4\n * @see fi.fi.hut.soberit.agilefant.db.hibernate.Email\n */\npublic class EmailValidator implements ConstraintValidator<Email, String>, Serializable {\n\n    private static final long serialVersionUID = 4334203403474352735L;\n\n    @Override\n    public void initialize(Email parameters) {\n    }\n\n    @Override\n    public boolean isValid(String value, ConstraintValidatorContext context) {\n        if (Strings.isNullOrEmpty(value) || org.apache.commons.validator.routines.EmailValidator.getInstance().isValid(value))\n            return true;\n        return EMAIL_PATTERN.matcher(value).matches();\n    }\n\n\tprivate static final Pattern EMAIL_PATTERN = Pattern.compile(\n\t\t\"^[_A-Za-z0-9-\\\\+]+(\\\\.[_A-Za-z0-9-]+)*@\"\n\t\t+ \"[A-Za-z0-9-]+(\\\\.[A-Za-z0-9]+)*(\\\\.[A-Za-z0-9]{2,})$\");\n\n}", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\hibernate\\\\GenericDAOHibernate.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["GenericDAOHibernate"], "AN": ["clazz", "sessionFactory"], "SCS_VariableDeclarator": ["clazz", "sessionFactory", "object", "c", "criteria", "criteria", "list", "list", "list"], "MN": ["init", "setSessionFactory", "getPersistentClass", "get", "getAndDetach", "getAll", "getMultiple", "remove", "remove", "store", "create", "getFirst", "getFirstTypeSafe", "createCriteria", "createCriteria", "count", "exists", "getCurrentSession", "asCollection", "asList", "firstResult", "uniqueResult", "asList", "asTuplesList"], "PN": ["sessionFactory", "id", "id", "ids", "id", "object", "object", "object", "list", "list", "clazz", "clazz", "alias", "id", "criteria", "criteria", "criteria", "criteria", "query", "query"], "SCS_MemberReference": ["sessionFactory", "sessionFactory", "sessionFactory", "clazz", "clazz", "clazz", "id", "id", "sessionFactory", "object", "object", "DISTINCT_ROOT_ENTITY", "ids", "ids", "c", "id", "object", "object", "object", "list", "list", "clazz", "clazz", "alias", "criteria", "id", "criteria", "sessionFactory", "criteria", "list", "EMPTY_LIST", "list", "list", "EMPTY_LIST", "list", "criteria", "list"], "SCS_ConstructorDeclaration": ["GenericDAOHibernate"], "SCS_ClassReference": [null, null, "", null, null, null, null, null, null, null, "ids", null, "", "c", "Restrictions", "", null, null, null, null, null, null, null, null, "list", "list", null, "list", "list", null, null, null, null, null, null, null, "criteria", "Projections", null, null, null, "criteria", null, "Projections", "Restrictions", null, null, null, "criteria", "", "", "criteria", "query", "query"], "SCS_MethodInvocation": ["getCurrentSession", "get", "getPersistentClass", "get", "getCurrentSession", "evict", "asList", "createCriteria", "getPersistentClass", "setResultTransformer", "isEmpty", "createCriteria", "getPersistentClass", "add", "in", "asCollection", "remove", "get", "getCurrentSession", "delete", "getCurrentSession", "saveOrUpdate", "getCurrentSession", "save", "isEmpty", "iterator", "next", "isEmpty", "iterator", "next", "getCurrentSession", "createCriteria", "getCurrentSession", "createCriteria", "createCriteria", "getPersistentClass", "setProjection", "rowCount", "uniqueResult", "createCriteria", "getPersistentClass", "add", "setProjection", "rowCount", "idEq", "uniqueResult", "getCurrentSession", "asList", "list", "asList", "getFirstTypeSafe", "uniqueResult", "list", "list"], "SCS_VariableDeclaration": ["T", "Criteria", "Criteria", "Criteria", "Collection", "List", "List"], "CO": ["/**\n * Generically implements basic DAO functionality specified by GenericDAO.\n * <p>\n * All the concrete DAOs under this same package inherit from this class. They\n * also implement the corresponding DAO interface, \"delegating\" method\n * implementations to this class.\n * \n * @param <T>\n *            type of the entity bean / data model object the DAO is for\n * @see fi.hut.soberit.agilefant.db.GenericDAO\n */", "/** {@inheritDoc} */", "/** {@inheritDoc} */", "/** {@inheritDoc} */", "/** {@inheritDoc} */", "/** {@inheritDoc} */", "/** {@inheritDoc} */", "/** {@inheritDoc} */", "/** {@inheritDoc} */"], "CODE": "package fi.hut.soberit.agilefant.db.hibernate;\n\nimport java.io.Serializable;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.List;\n\nimport javax.annotation.PostConstruct;\n\nimport org.hibernate.Criteria;\nimport org.hibernate.Query;\nimport org.hibernate.Session;\nimport org.hibernate.SessionFactory;\nimport org.hibernate.criterion.Projections;\nimport org.hibernate.criterion.Restrictions;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport fi.hut.soberit.agilefant.db.GenericDAO;\n\n/**\n * Generically implements basic DAO functionality specified by GenericDAO.\n * <p>\n * All the concrete DAOs under this same package inherit from this class. They\n * also implement the corresponding DAO interface, \"delegating\" method\n * implementations to this class.\n * \n * @param <T>\n *            type of the entity bean / data model object the DAO is for\n * @see fi.hut.soberit.agilefant.db.GenericDAO\n */\npublic abstract class GenericDAOHibernate<T> implements GenericDAO<T> {\n\n    private Class<T> clazz;\n\n    protected SessionFactory sessionFactory;\n\n    @PostConstruct\n    public void init() {\n        if (sessionFactory == null) {\n            throw new IllegalStateException(\"SessionFactory cannot be null\");\n        }\n    }\n\n    @Autowired\n    public void setSessionFactory(SessionFactory sessionFactory) {\n        this.sessionFactory = sessionFactory;\n    }\n\n    protected GenericDAOHibernate(Class<T> clazz) {\n        this.clazz = clazz;\n    }\n\n    protected Class<T> getPersistentClass() {\n        return clazz;\n    }\n\n    /** {@inheritDoc} */\n    public T get(int id) {\n        return (T) this.getCurrentSession().get(getPersistentClass(), id);\n    }\n\n    /** {@inheritDoc} */\n    public T getAndDetach(int id) {\n        T object = (T) this.get(id);\n        this.sessionFactory.getCurrentSession().evict(object);\n        return object;\n    }\n\n    /** {@inheritDoc} */\n    public Collection<T> getAll() {\n        return this.asList(this.createCriteria(this.getPersistentClass()).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY));\n    }\n\n    /** {@inheritDoc} */\n    public Collection<T> getMultiple(Collection<Integer> ids) {\n        if (ids == null || ids.isEmpty()) {\n            return new HashSet<T>();\n        }\n        Criteria c = this.createCriteria(getPersistentClass());\n        c.add(Restrictions.in(\"id\", ids));\n        return asCollection(c);\n    }\n\n    /** {@inheritDoc} */\n    public void remove(int id) {\n        this.remove(this.get(id));\n    }\n\n    /** {@inheritDoc} */\n    public void remove(T object) {\n        this.getCurrentSession().delete(object);\n    }\n\n    /** {@inheritDoc} */\n    public void store(T object) {\n        this.getCurrentSession().saveOrUpdate(object);\n    }\n\n    /** {@inheritDoc} */\n    public Serializable create(T object) {\n        return this.getCurrentSession().save(object);\n    }\n\n    protected T getFirst(Collection<T> list) {\n        if (list == null || list.isEmpty()) {\n            return null;\n        }\n        return list.iterator().next();\n    }\n\n    protected <ResultType> ResultType getFirstTypeSafe(Collection<ResultType> list) {\n        if (list == null || list.isEmpty()) {\n            return null;\n        }\n        return list.iterator().next();\n    }\n\n    protected Criteria createCriteria(Class clazz) {\n        return this.getCurrentSession().createCriteria(clazz);\n    }\n\n    protected Criteria createCriteria(Class clazz, String alias) {\n        return this.getCurrentSession().createCriteria(clazz, alias);\n    }\n\n    public int count() {\n        Criteria criteria = this.createCriteria(this.getPersistentClass());\n        criteria.setProjection(Projections.rowCount());\n        return ((Long) this.uniqueResult(criteria)).intValue();\n    }\n\n    public boolean exists(int id) {\n        Criteria criteria = this.createCriteria(this.getPersistentClass());\n        criteria.add(Restrictions.idEq(id)).setProjection(Projections.rowCount());\n        return ((Long) this.uniqueResult(criteria)).intValue() > 0;\n    }\n\n    public Session getCurrentSession() {\n        return this.sessionFactory.getCurrentSession();\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    protected <ResultType> Collection<ResultType> asCollection(Criteria criteria) {\n        Collection<ResultType> list = this.asList(criteria);\n        if (list == null) {\n            return Collections.EMPTY_LIST;\n        }\n        return list;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    protected <ResultType> List<ResultType> asList(Criteria criteria) {\n        List<ResultType> list = criteria.list();\n        if (list == null) {\n            return Collections.EMPTY_LIST;\n        }\n        return list;\n    }\n\n    protected <ResultType> ResultType firstResult(Criteria criteria) {\n        List<ResultType> list = asList(criteria);\n        return getFirstTypeSafe(list);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    protected <ResultType> ResultType uniqueResult(Criteria criteria) {\n        return (ResultType) criteria.uniqueResult();\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    protected List<T> asList(Query query) {\n        return query.list();\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    protected List<Object[]> asTuplesList(Query query) {\n        return query.list();\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\hibernate\\\\HolidayDAOHibernate.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["HolidayDAOHibernate"], "SCS_ConstructorDeclaration": ["HolidayDAOHibernate"], "SCS_ClassReference": ["Holiday", null, "Holiday", "crit", "Restrictions", "crit", "Restrictions", "crit", "Order", ""], "MN": ["retrieveFutureHolidaysByUser"], "PN": ["user"], "SCS_VariableDeclaration": ["Criteria"], "SCS_VariableDeclarator": ["crit"], "SCS_MethodInvocation": ["createCriteria", "add", "eq", "add", "ge", "addOrder", "asc", "asList"], "SCS_MemberReference": ["user", "crit"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.db.hibernate;\n\n\nimport java.util.List;\n\nimport org.hibernate.Criteria;\nimport org.hibernate.criterion.Order;\nimport org.hibernate.criterion.Restrictions;\nimport org.joda.time.DateTime;\nimport org.springframework.stereotype.Repository;\n\nimport fi.hut.soberit.agilefant.db.HolidayDAO;\nimport fi.hut.soberit.agilefant.model.Holiday;\nimport fi.hut.soberit.agilefant.model.User;\n\n@Repository(\"holidayDAO\")\npublic class HolidayDAOHibernate extends GenericDAOHibernate<Holiday> implements\n        HolidayDAO {\n\n    public HolidayDAOHibernate() {\n        super(Holiday.class);\n    }\n    \n    public List<Holiday> retrieveFutureHolidaysByUser(User user) {\n        Criteria crit = this.createCriteria(Holiday.class);\n        crit.add(Restrictions.eq(\"user\", user));\n        crit.add(Restrictions.ge(\"endDate\", new DateTime()));\n        crit.addOrder(Order.asc(\"startDate\"));\n        return asList(crit);\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\hibernate\\\\HourEntryDAOHibernate.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["HourEntryDAOHibernate"], "SCS_ConstructorDeclaration": ["HourEntryDAOHibernate"], "SCS_ClassReference": ["HourEntry", null, "HourEntry", "crit", null, "Restrictions", "crit", "Restrictions", "crit", "Projections", null, "TaskHourEntry", "StoryHourEntry", null, "crit", "Projections", "crit", "crit", null, "Restrictions", null, "", "", null, "TaskHourEntry", "crit", "Projections", "crit", "taskCrit", "Restrictions", "taskCrit", null, "Restrictions", null, "crit", "Restrictions", "crit", "Restrictions", "users", "users", "crit", "crit", "Restrictions", "backlogIds", "Collections", null, "BacklogHourEntry", "crit", "crit", "crit", "crit", "Restrictions", "Restrictions", "Restrictions", "Restrictions", "Restrictions", "crit", "Order", null, "", "backlogIds", "Collections", null, "StoryHourEntry", "crit", "crit", "crit", "crit", "Restrictions", "Restrictions", "Restrictions", "Restrictions", "Restrictions", "crit", "Order", null, "", "backlogIds", "Collections", null, "TaskHourEntry", "crit", "crit", "crit", "crit", "crit", "crit", "crit", "Restrictions", "Restrictions", "Restrictions", "crit", "crit", "Order", null, "", "", "", "", "", null, "TaskHourEntry", "criteria", "criteria", "Restrictions", "criteria", "criteria", "Restrictions", "", null, "TaskHourEntry", "criteria", "Projections", "criteria", "criteria", "Restrictions", "criteria", "criteria", "Restrictions", "", null, "TaskHourEntry", "criteria", "criteria", "Restrictions", "criteria", "criteria", "criteria", "Restrictions", "", null, "TaskHourEntry", "criteria", "Projections", "criteria", "criteria", "Restrictions", "criteria", "criteria", "criteria", "Restrictions", "", null, "StoryHourEntry", "criteria", "criteria", "criteria", "Restrictions", "", null, "StoryHourEntry", "criteria", "Projections", "criteria", "criteria", "criteria", "Restrictions", "", null, "BacklogHourEntry", "criteria", "Projections", "criteria", "criteria", "Restrictions", "", null, "user", null, "HourEntry", "crit", "Restrictions", "crit", "Restrictions", "users", "users", "crit", "crit", "Restrictions", "", "", "iterationHourEntries", "", "iterationHourEntries", "", "iterationHourEntries", "", null, "BacklogHourEntry", "crit", "Restrictions", "crit", "Order", "crit", "", null, "TaskHourEntry", "crit", "Restrictions", "crit", "Order", "crit", "", null, "StoryHourEntry", "crit", "Restrictions", "crit", "Order", "crit", "", null, "HourEntry", "crit", "Restrictions", "crit", "Restrictions", "interval", "interval", "", null, "HourEntry", "crit", "Restrictions", "crit", "Order", "crit", "", null, "hourEntry"], "MN": ["calculateSumByUserAndTimeInterval", "calculateHourSum", "calculateSumByStory", "calculateSumFromTasksWithoutStory", "setDateUserFilter", "getBacklogHourEntriesByFilter", "getStoryHourEntriesByFilter", "getTaskHourEntriesByFilter", "calculateIterationHourEntriesSum", "getHourEntriesForTaskWithoutStoryForIteration", "getSumForTaskHourEntriesWithoutStoryForIteration", "getHourEntriesForTaskWithStoryForIteration", "getSumForTaskHourEntriesWithStoryForIteration", "getHourEntriesForStoryForIteration", "getSumForStoryHourEntriesForIteration", "getSumForBacklogHourEntriesForIteration", "calculateSumByUserAndTimeInterval", "getHourEntriesByFilter", "getAllIterationHourEntries", "getBacklogHourEntries", "getTaskHourEntries", "getStoryHourEntries", "retrieveByUserAndInterval", "retrieveLatestHourEntryDelta"], "PN": ["userId", "startDate", "endDate", "task", "storyId", "storyId", "iterationId", "crit", "start", "end", "users", "backlogIds", "startDate", "endDate", "userIds", "backlogIds", "startDate", "endDate", "userIds", "backlogIds", "startDate", "endDate", "userIds", "iterationId", "iterationId", "iterationId", "iterationId", "iterationId", "iterationId", "iterationId", "iterationId", "user", "startDate", "endDate", "startTime", "endTime", "userId", "iterationId", "backlogId", "limit", "taskId", "limit", "storyId", "limit", "user", "interval", "userId"], "SCS_VariableDeclaration": ["Criteria", "Long", "Class", "Criteria", "Long", "Criteria", "Criteria", "Long", "Criteria", "Criteria", "Criteria", "String", "Criterion", "String", "long", "long", "long", "long", "Criteria", "Criteria", "Long", "Criteria", "Criteria", "Long", "Criteria", "Criteria", "Long", "Criteria", "Long", "Criteria", "Set", "List", "Criteria", "Criteria", "Criteria", "Criteria", "Criteria", "HourEntry", "DateTime"], "SCS_VariableDeclarator": ["crit", "result", "type", "crit", "result", "crit", "taskCrit", "result", "crit", "crit", "crit", "backlogs", "condition", "alias", "tasksEntrySum", "tasksWithStoryEntrySum", "storyEntrySum", "backlogEntrySum", "criteria", "criteria", "result", "criteria", "criteria", "result", "criteria", "criteria", "result", "criteria", "result", "crit", "users", "iterationHourEntries", "crit", "crit", "crit", "crit", "crit", "hourEntry", "now"], "SCS_MethodInvocation": ["createCriteria", "createCriteria", "add", "idEq", "add", "between", "setProjection", "sum", "uniqueResult", "createCriteria", "setProjection", "sum", "createCriteria", "createCriteria", "add", "idEq", "uniqueResult", "calculateHourSum", "calculateHourSum", "createCriteria", "setProjection", "sum", "createCriteria", "add", "isNull", "createCriteria", "add", "idEq", "uniqueResult", "add", "ge", "add", "le", "size", "add", "createAlias", "add", "in", "size", "emptyList", "createCriteria", "createAlias", "createAlias", "createAlias", "add", "or", "in", "or", "in", "in", "addOrder", "desc", "setDateUserFilter", "asList", "size", "emptyList", "createCriteria", "createAlias", "createAlias", "createAlias", "add", "or", "in", "or", "in", "in", "addOrder", "desc", "setDateUserFilter", "asList", "size", "emptyList", "createCriteria", "createAlias", "createAlias", "createAlias", "createAlias", "createAlias", "createAlias", "createAlias", "isNull", "or", "in", "add", "addOrder", "desc", "setDateUserFilter", "asList", "getSumForTaskHourEntriesWithoutStoryForIteration", "getSumForTaskHourEntriesWithStoryForIteration", "getSumForStoryHourEntriesForIteration", "getSumForBacklogHourEntriesForIteration", "createCriteria", "createCriteria", "add", "isNull", "createCriteria", "add", "idEq", "asList", "createCriteria", "setProjection", "sum", "createCriteria", "add", "isNull", "createCriteria", "add", "idEq", "uniqueResult", "createCriteria", "createCriteria", "add", "isNotNull", "createCriteria", "createCriteria", "add", "idEq", "asList", "createCriteria", "setProjection", "sum", "createCriteria", "add", "isNotNull", "createCriteria", "createCriteria", "add", "idEq", "uniqueResult", "createCriteria", "createCriteria", "createCriteria", "add", "idEq", "asList", "createCriteria", "setProjection", "sum", "createCriteria", "createCriteria", "add", "idEq", "uniqueResult", "createCriteria", "setProjection", "sum", "createCriteria", "add", "idEq", "uniqueResult", "calculateSumByUserAndTimeInterval", "getId", "createCriteria", "add", "ge", "add", "le", "add", "add", "createAlias", "add", "in", "asList", "getHourEntriesForTaskWithoutStoryForIteration", "addAll", "getHourEntriesForTaskWithStoryForIteration", "addAll", "getHourEntriesForStoryForIteration", "addAll", "getBacklogHourEntries", "createCriteria", "add", "eq", "addOrder", "desc", "setMaxResults", "asList", "createCriteria", "add", "eq", "addOrder", "desc", "setMaxResults", "asList", "createCriteria", "add", "eq", "addOrder", "desc", "setMaxResults", "asList", "createCriteria", "add", "eq", "add", "between", "getStart", "getEnd", "asList", "createCriteria", "add", "eq", "addOrder", "desc", "setMaxResults", "firstResult", "getStandardSeconds", "getDate"], "SCS_MemberReference": ["userId", "startDate", "endDate", "crit", "result", "result", "task", "type", "task", "crit", "crit", "storyId", "crit", "result", "result", "storyId", "storyId", "iterationId", "crit", "result", "result", "start", "start", "end", "end", "users", "NON_EXISTENT_USER_ID", "users", "backlogIds", "LEFT_JOIN", "LEFT_JOIN", "LEFT_JOIN", "backlogIds", "backlogIds", "backlogIds", "crit", "startDate", "endDate", "userIds", "crit", "backlogIds", "LEFT_JOIN", "LEFT_JOIN", "LEFT_JOIN", "backlogIds", "backlogIds", "backlogIds", "crit", "startDate", "endDate", "userIds", "crit", "backlogIds", "LEFT_JOIN", "LEFT_JOIN", "LEFT_JOIN", "LEFT_JOIN", "LEFT_JOIN", "LEFT_JOIN", "LEFT_JOIN", "backlogs", "condition", "alias", "backlogIds", "condition", "condition", "crit", "startDate", "endDate", "userIds", "crit", "iterationId", "iterationId", "iterationId", "iterationId", "tasksEntrySum", "tasksWithStoryEntrySum", "storyEntrySum", "backlogEntrySum", "criteria", "criteria", "iterationId", "criteria", "criteria", "criteria", "iterationId", "criteria", "result", "result", "criteria", "criteria", "criteria", "iterationId", "criteria", "criteria", "criteria", "criteria", "iterationId", "criteria", "result", "result", "criteria", "criteria", "iterationId", "criteria", "criteria", "criteria", "iterationId", "criteria", "result", "result", "criteria", "iterationId", "criteria", "result", "result", "user", "startDate", "endDate", "startTime", "startTime", "endTime", "endTime", "userId", "userId", "NON_EXISTENT_USER_ID", "users", "crit", "iterationId", "iterationId", "iterationId", "iterationId", "iterationHourEntries", "backlogId", "limit", "limit", "crit", "taskId", "limit", "limit", "crit", "storyId", "limit", "limit", "crit", "user", "crit", "userId", "crit", "hourEntry", "now"], "CO": ["// Hack: Add non-existent user id to the list to make the query faster.", "// If there is only one user id in the list, mysql query will use intersect, and the query will be very slow.", "// Hack: Add non-existent user id to the list to make the query faster.", "// If there is only one user id in the list, mysql query will use intersect, and the query will be very slow."], "CODE": "package fi.hut.soberit.agilefant.db.hibernate;\n\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.HashSet;\nimport java.util.Set;\n\nimport org.hibernate.Criteria;\nimport org.hibernate.criterion.CriteriaSpecification;\nimport org.hibernate.criterion.Criterion;\nimport org.hibernate.criterion.Order;\nimport org.hibernate.criterion.Projections;\nimport org.hibernate.criterion.Restrictions;\nimport org.joda.time.DateTime;\nimport org.joda.time.Duration;\nimport org.joda.time.Interval;\nimport org.springframework.stereotype.Repository;\n\nimport fi.hut.soberit.agilefant.business.UserBusiness;\nimport fi.hut.soberit.agilefant.db.HourEntryDAO;\nimport fi.hut.soberit.agilefant.model.BacklogHourEntry;\nimport fi.hut.soberit.agilefant.model.HourEntry;\nimport fi.hut.soberit.agilefant.model.StoryHourEntry;\nimport fi.hut.soberit.agilefant.model.TaskHourEntry;\nimport fi.hut.soberit.agilefant.model.TaskState;\nimport fi.hut.soberit.agilefant.model.User;\n\n@Repository(\"hourEntryDAO\")\npublic class HourEntryDAOHibernate extends GenericDAOHibernate<HourEntry>\n        implements HourEntryDAO {\n\n    public HourEntryDAOHibernate() {\n        super(HourEntry.class);\n    }\n\n    public long calculateSumByUserAndTimeInterval(int userId,\n            DateTime startDate, DateTime endDate) {\n        Criteria crit = this.createCriteria(HourEntry.class);\n        crit.createCriteria(\"user\").add(Restrictions.idEq(userId));\n        crit.add(Restrictions.between(\"date\", startDate, endDate));\n        crit.setProjection(Projections.sum(\"minutesSpent\"));\n        Long result = (Long) this.uniqueResult(crit);\n        if (result == null)\n            return 0;\n        return result;\n    }\n\n    private long calculateHourSum(boolean task, int storyId) {\n        Class<?> type = task ? TaskHourEntry.class : StoryHourEntry.class;\n        Criteria crit = this.createCriteria(type);\n        crit.setProjection(Projections.sum(\"minutesSpent\"));\n        if (task)\n            crit = crit.createCriteria(\"task\");\n        crit = crit.createCriteria(\"story\").add(Restrictions.idEq(storyId));\n        Long result = (Long) this.uniqueResult(crit);\n\n        if (result == null)\n            return 0;\n        return result;\n    }\n\n    public long calculateSumByStory(int storyId) {\n        return calculateHourSum(true, storyId)\n                + calculateHourSum(false, storyId);\n    }\n\n    public long calculateSumFromTasksWithoutStory(int iterationId) {\n        Criteria crit = this.createCriteria(TaskHourEntry.class);\n        crit.setProjection(Projections.sum(\"minutesSpent\"));\n        Criteria taskCrit = crit.createCriteria(\"task\");\n        taskCrit.add(Restrictions.isNull(\"story\"));\n        taskCrit.createCriteria(\"iteration\")\n                .add(Restrictions.idEq(iterationId));\n        Long result = (Long) this.uniqueResult(crit);\n        if (result == null)\n            return 0;\n        return result;\n    }\n\n    private void setDateUserFilter(Criteria crit, DateTime start, DateTime end,\n            Set<Integer> users) {\n        if (start != null) {\n            crit.add(Restrictions.ge(\"date\", start));\n        }\n        if (end != null) {\n            crit.add(Restrictions.le(\"date\", end));\n        }\n        if (users != null && users.size() > 0) {\n            // Hack: Add non-existent user id to the list to make the query faster.\n            // If there is only one user id in the list, mysql query will use intersect, and the query will be very slow.\n            users.add(UserBusiness.NON_EXISTENT_USER_ID);\n            crit.createAlias(\"user\", \"usr\");\n            crit.add(Restrictions.in(\"usr.id\", users));\n        }\n    }\n\n    public List<BacklogHourEntry> getBacklogHourEntriesByFilter(\n            Set<Integer> backlogIds, DateTime startDate, DateTime endDate,\n            Set<Integer> userIds) {\n        if (backlogIds == null || backlogIds.size() == 0) {\n            return Collections.emptyList();\n        }\n        Criteria crit = this.createCriteria(BacklogHourEntry.class);\n        crit.createAlias(\"backlog\", \"bl\", CriteriaSpecification.LEFT_JOIN);\n        crit.createAlias(\"backlog.parent\", \"blParent\",\n                CriteriaSpecification.LEFT_JOIN);\n        crit.createAlias(\"backlog.parent.parent\", \"blParentParent\",\n                CriteriaSpecification.LEFT_JOIN);\n        crit.add(Restrictions.or(Restrictions.in(\"bl.id\", backlogIds),\n                Restrictions.or(Restrictions.in(\"blParent.id\", backlogIds),\n                        Restrictions.in(\"blParentParent.id\", backlogIds))));\n        crit.addOrder(Order.desc(\"date\"));\n        this.setDateUserFilter(crit, startDate, endDate, userIds);\n        return asList(crit);\n    }\n\n    public List<StoryHourEntry> getStoryHourEntriesByFilter(\n            Set<Integer> backlogIds, DateTime startDate, DateTime endDate,\n            Set<Integer> userIds) {\n        if (backlogIds == null || backlogIds.size() == 0) {\n            return Collections.emptyList();\n        }\n\n        Criteria crit = this.createCriteria(StoryHourEntry.class);\n        crit.createAlias(\"story.iteration\", \"iteration\",\n                CriteriaSpecification.LEFT_JOIN);\n        crit.createAlias(\"story.backlog\", \"backlog\",\n                CriteriaSpecification.LEFT_JOIN);\n        crit.createAlias(\"story.backlog.parent\", \"backlogParent\",\n                CriteriaSpecification.LEFT_JOIN);\n\n        crit.add(Restrictions.or(Restrictions.in(\"iteration.id\", backlogIds),\n                Restrictions.or(Restrictions.in(\"backlog.id\", backlogIds),\n                        Restrictions.in(\"backlogParent.id\", backlogIds))));\n        crit.addOrder(Order.desc(\"date\"));\n        this.setDateUserFilter(crit, startDate, endDate, userIds);\n        return asList(crit);\n    }\n\n    public List<TaskHourEntry> getTaskHourEntriesByFilter(\n            Set<Integer> backlogIds, DateTime startDate, DateTime endDate,\n            Set<Integer> userIds) {\n        if (backlogIds == null || backlogIds.size() == 0) {\n            return Collections.emptyList();\n        }\n\n        Criteria crit = this.createCriteria(TaskHourEntry.class);\n\n        String[] backlogs = { \"iteration\", \"backlog\", \"backlogParent\",\n                \"task_without_story_iteration\", \"task_without_story_project\",\n                \"task_without_story_product\" };\n\n        crit.createAlias(\"task.story\", \"story\", CriteriaSpecification.LEFT_JOIN);\n        crit.createAlias(\"task.story.iteration\", \"iteration\",\n                CriteriaSpecification.LEFT_JOIN);\n        crit.createAlias(\"task.story.backlog\", \"backlog\",\n                CriteriaSpecification.LEFT_JOIN);\n        crit.createAlias(\"task.story.backlog.parent\", \"backlogParent\",\n                CriteriaSpecification.LEFT_JOIN);\n        crit.createAlias(\"task.iteration\", \"task_without_story_iteration\",\n                CriteriaSpecification.LEFT_JOIN);\n        crit.createAlias(\"task.iteration.parent\", \"task_without_story_project\",\n                CriteriaSpecification.LEFT_JOIN);\n        crit.createAlias(\"task.iteration.parent.parent\",\n                \"task_without_story_product\", CriteriaSpecification.LEFT_JOIN);\n\n        Criterion condition = Restrictions.isNull(\"task.id\");\n        for (String alias : backlogs) {\n            condition = Restrictions.or(\n                    Restrictions.in(alias + \".id\", backlogIds), condition);\n        }\n\n        crit.add(condition);\n        crit.addOrder(Order.desc(\"date\"));\n        this.setDateUserFilter(crit, startDate, endDate, userIds);\n\n        return asList(crit);\n    }\n\n    public long calculateIterationHourEntriesSum(int iterationId) {\n        long tasksEntrySum = getSumForTaskHourEntriesWithoutStoryForIteration(iterationId);\n        long tasksWithStoryEntrySum = getSumForTaskHourEntriesWithStoryForIteration(iterationId);\n        long storyEntrySum = getSumForStoryHourEntriesForIteration(iterationId);\n        long backlogEntrySum = getSumForBacklogHourEntriesForIteration(iterationId);\n\n        return tasksEntrySum + tasksWithStoryEntrySum + storyEntrySum\n                + backlogEntrySum;\n    }\n\n    private List<HourEntry> getHourEntriesForTaskWithoutStoryForIteration(\n            int iterationId) {\n        Criteria criteria = this.createCriteria(TaskHourEntry.class);\n\n        criteria = criteria.createCriteria(\"task\");\n        criteria.add(Restrictions.isNull(\"story\"));\n        criteria = criteria.createCriteria(\"iteration\");\n        criteria.add(Restrictions.idEq(iterationId));\n\n        return asList(criteria);\n    }\n\n    private long getSumForTaskHourEntriesWithoutStoryForIteration(\n            int iterationId) {\n        Criteria criteria = this.createCriteria(TaskHourEntry.class);\n\n        criteria.setProjection(Projections.sum(\"minutesSpent\"));\n\n        criteria = criteria.createCriteria(\"task\");\n        criteria.add(Restrictions.isNull(\"story\"));\n        criteria = criteria.createCriteria(\"iteration\");\n        criteria.add(Restrictions.idEq(iterationId));\n\n        Long result = (Long) uniqueResult(criteria);\n\n        if (result == null) {\n            return 0;\n        }\n        return result;\n    }\n\n    private List<HourEntry> getHourEntriesForTaskWithStoryForIteration(\n            int iterationId) {\n        Criteria criteria = this.createCriteria(TaskHourEntry.class);\n\n        criteria = criteria.createCriteria(\"task\");\n        criteria.add(Restrictions.isNotNull(\"story\"));\n        criteria = criteria.createCriteria(\"story\");\n        criteria = criteria.createCriteria(\"iteration\");\n        criteria.add(Restrictions.idEq(iterationId));\n\n        return asList(criteria);\n    }\n\n    private long getSumForTaskHourEntriesWithStoryForIteration(int iterationId) {\n        Criteria criteria = this.createCriteria(TaskHourEntry.class);\n\n        criteria.setProjection(Projections.sum(\"minutesSpent\"));\n\n        criteria = criteria.createCriteria(\"task\");\n        criteria.add(Restrictions.isNotNull(\"story\"));\n        criteria = criteria.createCriteria(\"story\");\n        criteria = criteria.createCriteria(\"iteration\");\n        criteria.add(Restrictions.idEq(iterationId));\n\n        Long result = (Long) uniqueResult(criteria);\n\n        if (result == null) {\n            return 0;\n        }\n        return result;\n    }\n\n    private List<HourEntry> getHourEntriesForStoryForIteration(int iterationId) {\n        Criteria criteria = this.createCriteria(StoryHourEntry.class);\n\n        criteria = criteria.createCriteria(\"story\");\n        criteria = criteria.createCriteria(\"iteration\");\n        criteria.add(Restrictions.idEq(iterationId));\n\n        return asList(criteria);\n    }\n\n    private long getSumForStoryHourEntriesForIteration(int iterationId) {\n        Criteria criteria = this.createCriteria(StoryHourEntry.class);\n\n        criteria.setProjection(Projections.sum(\"minutesSpent\"));\n\n        criteria = criteria.createCriteria(\"story\");\n        criteria = criteria.createCriteria(\"iteration\");\n        criteria.add(Restrictions.idEq(iterationId));\n\n        Long result = (Long) uniqueResult(criteria);\n\n        if (result == null) {\n            return 0;\n        }\n        return result;\n    }\n\n    private long getSumForBacklogHourEntriesForIteration(int iterationId) {\n        Criteria criteria = this.createCriteria(BacklogHourEntry.class);\n\n        criteria.setProjection(Projections.sum(\"minutesSpent\"));\n\n        criteria = criteria.createCriteria(\"backlog\");\n        criteria.add(Restrictions.idEq(iterationId));\n\n        Long result = (Long) uniqueResult(criteria);\n\n        if (result == null) {\n            return 0;\n        }\n        return result;\n\n    }\n\n    public long calculateSumByUserAndTimeInterval(User user,\n            DateTime startDate, DateTime endDate) {\n        if (user == null) {\n            return 0L;\n        }\n        return this.calculateSumByUserAndTimeInterval(user.getId(), startDate,\n                endDate);\n    }\n\n    public List<HourEntry> getHourEntriesByFilter(DateTime startTime,\n            DateTime endTime, int userId) {\n        Criteria crit = this.createCriteria(HourEntry.class);\n        if (startTime != null) {\n            crit.add(Restrictions.ge(\"date\", startTime));\n        }\n        if (endTime != null) {\n            crit.add(Restrictions.le(\"date\", endTime));\n        }\n        if (userId != 0) {\n            Set<Integer> users = new HashSet<Integer>();\n            users.add(userId); \n            // Hack: Add non-existent user id to the list to make the query faster.\n            // If there is only one user id in the list, mysql query will use intersect, and the query will be very slow.\n            users.add(UserBusiness.NON_EXISTENT_USER_ID);\n            crit.createAlias(\"user\", \"usr\");\n            crit.add(Restrictions.in(\"usr.id\", users));\n        }\n        return asList(crit);\n    }\n\n    public List<HourEntry> getAllIterationHourEntries(int iterationId) {\n        List<HourEntry> iterationHourEntries = getHourEntriesForTaskWithoutStoryForIteration(iterationId);\n        iterationHourEntries\n                .addAll(getHourEntriesForTaskWithStoryForIteration(iterationId));\n        iterationHourEntries\n                .addAll(getHourEntriesForStoryForIteration(iterationId));\n        iterationHourEntries.addAll(getBacklogHourEntries(iterationId, 0));\n\n        return iterationHourEntries;\n    }\n\n    public List<HourEntry> getBacklogHourEntries(int backlogId, int limit) {\n        Criteria crit = this.createCriteria(BacklogHourEntry.class);\n        crit.add(Restrictions.eq(\"backlog.id\", backlogId));\n        crit.addOrder(Order.desc(\"date\"));\n        if (limit > 0) {\n            crit.setMaxResults(limit);\n        }\n        return asList(crit);\n    }\n\n    public List<HourEntry> getTaskHourEntries(int taskId, int limit) {\n        Criteria crit = this.createCriteria(TaskHourEntry.class);\n        crit.add(Restrictions.eq(\"task.id\", taskId));\n        crit.addOrder(Order.desc(\"date\"));\n        if (limit > 0) {\n            crit.setMaxResults(limit);\n        }\n        return asList(crit);\n    }\n\n    public List<HourEntry> getStoryHourEntries(int storyId, int limit) {\n        Criteria crit = this.createCriteria(StoryHourEntry.class);\n        crit.add(Restrictions.eq(\"story.id\", storyId));\n        crit.addOrder(Order.desc(\"date\"));\n        if (limit > 0) {\n            crit.setMaxResults(limit);\n        }\n        return asList(crit);\n    }\n\n    public List<HourEntry> retrieveByUserAndInterval(User user,\n            Interval interval) {\n        Criteria crit = this.createCriteria(HourEntry.class);\n        crit.add(Restrictions.eq(\"user\", user));\n        crit.add(Restrictions.between(\"date\", interval.getStart(),\n                interval.getEnd()));\n\n        return asList(crit);\n    }\n\n    @Override\n    public long retrieveLatestHourEntryDelta(int userId) {\n        Criteria crit = this.createCriteria(HourEntry.class);\n        crit.add(Restrictions.eq(\"user.id\", userId));\n        crit.addOrder(Order.desc(\"date\"));\n        crit.setMaxResults(1);\n\n        HourEntry hourEntry = firstResult(crit);\n        if (hourEntry == null) {\n            return 0;\n        }\n        DateTime now = new DateTime();\n        return new Duration(hourEntry.getDate(), now).getStandardSeconds() / 60;\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\hibernate\\\\IterationDAOHelpers.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["IterationDAOHelpers"], "MN": ["addIterationIntervalLimit", "addBacklogIntervalLimit", "addIterationIntervalStartLimit", "addBacklogIntervalStartLimit"], "PN": ["crit", "interval", "crit", "interval", "crit", "interval", "crit", "interval"], "SCS_ClassReference": ["crit", "Restrictions", "interval", "interval", "Restrictions", "Restrictions", "Restrictions", "Restrictions", "Restrictions", "Restrictions", "crit", "Restrictions", "interval", "interval", "Restrictions", "Restrictions", "Restrictions", "Restrictions", "Restrictions", "Restrictions", "Restrictions", "Restrictions", "crit", "Restrictions", "crit", "Restrictions", "interval", "interval", "Restrictions", "Restrictions", "Restrictions", "Restrictions", "crit", "Restrictions", "interval", "interval", "Restrictions", "Restrictions", "Restrictions", "Restrictions", "Restrictions", "Restrictions", "crit", "Restrictions"], "SCS_MethodInvocation": ["add", "eq", "getStart", "getEnd", "between", "between", "or", "and", "le", "ge", "add", "or", "getStart", "getEnd", "between", "between", "or", "and", "le", "ge", "or", "isNull", "add", "or", "add", "eq", "getStart", "getEnd", "between", "between", "or", "le", "add", "or", "getStart", "getEnd", "between", "between", "or", "le", "or", "isNull", "add", "or"], "SCS_VariableDeclaration": ["DateTime", "DateTime", "Criterion", "Criterion", "Criterion", "Criterion", "DateTime", "DateTime", "Criterion", "Criterion", "Criterion", "Criterion", "Criterion", "Criterion", "DateTime", "DateTime", "Criterion", "Criterion", "Criterion", "Criterion", "DateTime", "DateTime", "Criterion", "Criterion", "Criterion", "Criterion", "Criterion", "Criterion"], "SCS_VariableDeclarator": ["startDate", "endDate", "startDateLimit", "endDateLimit", "overlaps", "withinIteration", "startDate", "endDate", "startDateLimit", "endDateLimit", "overlaps", "withinIteration", "timeConstraint", "backlogProduct", "startDate", "endDate", "startDateLimit", "endDateLimit", "overlaps", "iterationStarted", "startDate", "endDate", "startDateLimit", "endDateLimit", "overlaps", "withinIteration", "timeConstraint", "backlogProduct"], "SCS_MemberReference": ["startDate", "endDate", "startDate", "endDate", "startDateLimit", "endDateLimit", "startDate", "endDate", "overlaps", "withinIteration", "startDate", "endDate", "startDate", "endDate", "startDateLimit", "endDateLimit", "startDate", "endDate", "overlaps", "withinIteration", "timeConstraint", "backlogProduct", "startDate", "endDate", "startDate", "endDate", "startDateLimit", "endDateLimit", "startDate", "overlaps", "iterationStarted", "startDate", "endDate", "startDate", "endDate", "startDateLimit", "endDateLimit", "startDate", "overlaps", "withinIteration", "timeConstraint", "backlogProduct"], "CO": ["//search only from iterations", "//iteration may start during the interval", "//iteration end during the interval", "//interval may be within the iteration", "//backlog may start during the interval", "//backlog end during the interval", "//interval may be within the backlog", "// If backlog is product then ignore the start and end date (because product doesnt have enddate startdate)", "//search only from iterations", "//iteration may start during the interval", "//iteration end during the interval", "//interval may be within the iteration or after the iteration start date", "//backlog may start during the interval", "//backlog end during the interval", "//interval may be within the backlog or after the backlog start date", "// If backlog is product then ignore the start and end date (because product doesnt have enddate startdate)"], "CODE": "package fi.hut.soberit.agilefant.db.hibernate;\n\nimport org.hibernate.Criteria;\nimport org.hibernate.criterion.Criterion;\nimport org.hibernate.criterion.Restrictions;\nimport org.joda.time.DateTime;\nimport org.joda.time.Interval;\n\npublic class IterationDAOHelpers {\n    static void addIterationIntervalLimit(Criteria crit, Interval interval) {\n        //search only from iterations\n        crit.add(Restrictions.eq(\"class\", \"Iteration\"));\n        DateTime startDate = interval.getStart();\n        DateTime endDate = interval.getEnd();\n        //iteration may start during the interval\n        Criterion startDateLimit = Restrictions.between(\"startDate\", startDate,\n                endDate);\n        //iteration end during the interval\n        Criterion endDateLimit = Restrictions.between(\"endDate\", startDate,\n                endDate);\n        //interval may be within the iteration\n        Criterion overlaps = Restrictions.or(startDateLimit, endDateLimit);\n        Criterion withinIteration = Restrictions.and(Restrictions.le(\n                \"startDate\", startDate), Restrictions.ge(\"endDate\", endDate));\n        crit.add(Restrictions.or(overlaps, withinIteration));\n    }\n    \n    static void addBacklogIntervalLimit(Criteria crit, Interval interval) {\n        DateTime startDate = interval.getStart();\n        DateTime endDate = interval.getEnd();\n        //backlog may start during the interval\n        Criterion startDateLimit = Restrictions.between(\"startDate\", startDate,\n                endDate);\n        //backlog end during the interval\n        Criterion endDateLimit = Restrictions.between(\"endDate\", startDate,\n                endDate);\n        //interval may be within the backlog\n        Criterion overlaps = Restrictions.or(startDateLimit, endDateLimit);\n        Criterion withinIteration = Restrictions.and(Restrictions.le(\n                \"startDate\", startDate), Restrictions.ge(\"endDate\", endDate));\n        \n        // If backlog is product then ignore the start and end date (because product doesnt have enddate startdate)\n        Criterion timeConstraint = Restrictions.or(overlaps, withinIteration);\n        Criterion backlogProduct = Restrictions.isNull(\"startDate\");\n        crit.add(Restrictions.or(timeConstraint, backlogProduct));\n    }\n    \n    static void addIterationIntervalStartLimit(Criteria crit, Interval interval) {\n        //search only from iterations\n        crit.add(Restrictions.eq(\"class\", \"Iteration\"));\n        DateTime startDate = interval.getStart();\n        DateTime endDate = interval.getEnd();\n        //iteration may start during the interval\n        Criterion startDateLimit = Restrictions.between(\"startDate\", startDate,\n                endDate);\n        //iteration end during the interval\n        Criterion endDateLimit = Restrictions.between(\"endDate\", startDate,\n                endDate);\n        //interval may be within the iteration or after the iteration start date\n        Criterion overlaps = Restrictions.or(startDateLimit, endDateLimit);\n        Criterion iterationStarted = Restrictions.le(\"startDate\", startDate);\n        crit.add(Restrictions.or(overlaps, iterationStarted));\n    }\n    \n    static void addBacklogIntervalStartLimit(Criteria crit, Interval interval) {\n        DateTime startDate = interval.getStart();\n        DateTime endDate = interval.getEnd();\n        //backlog may start during the interval\n        Criterion startDateLimit = Restrictions.between(\"startDate\", startDate,\n                endDate);\n        //backlog end during the interval\n        Criterion endDateLimit = Restrictions.between(\"endDate\", startDate,\n                endDate);\n        //interval may be within the backlog or after the backlog start date\n        Criterion overlaps = Restrictions.or(startDateLimit, endDateLimit);\n        Criterion withinIteration = Restrictions.le(\"startDate\", startDate);\n        \n        // If backlog is product then ignore the start and end date (because product doesnt have enddate startdate)\n        Criterion timeConstraint = Restrictions.or(overlaps, withinIteration);\n        Criterion backlogProduct = Restrictions.isNull(\"startDate\");\n        crit.add(Restrictions.or(timeConstraint, backlogProduct));\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\hibernate\\\\IterationDAOHibernate.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["IterationDAOHibernate"], "SCS_ConstructorDeclaration": ["IterationDAOHibernate"], "SCS_ClassReference": ["Iteration", "criteria", "criteria", "Restrictions", "iteration", null, "Task", "storyTaskCrit", "storyTaskCrit", null, "storyTaskCrit", "Restrictions", "iteration", null, "Task", "tasksWoStoryCrit", "tasksWoStoryCrit", "tasksWoStoryCrit", "Restrictions", "iteration", "", "tasks", "", "tasks", null, "Story", "criteria", "Restrictions", "criteria", "Projections", null, "Projections", null, "Projections", null, "Projections", "StoryState", "StoryState", "results", "", "results", null, "criteria", "Projections", null, "Projections", null, "Projections", null, "Projections", "", "", "Pair", null, "criteria", "Projections", null, "Projections", null, "Projections", null, "Projections", "", "", "Story", "Task", null, "Pair", "", "task", "task", null, "task", "task", "task", "task", "task", "Pair", "", "Task", "Arrays", "", "Task", "Arrays", "Pair", "", "", "Story", "Arrays", "iterationIds", "Collections", null, "Iteration", "crit", "Restrictions", "crit", "crit", "Projections", null, "Projections", null, "Projections", "", "result", null, "Iteration", "Restrictions", "Restrictions", "Restrictions", "Restrictions", "Restrictions", "Restrictions", "crit", "Restrictions", "crit", null, null, "Restrictions", "assignee", "crit", "Restrictions", "crit", "Restrictions", "crit", "Restrictions", "", null, "Iteration", "crit", "Restrictions", "", null, "Iteration", "crit", "Restrictions", "crit", "Order", "", null, "Iteration", "crit", "storiesCrit", "storiesCrit", "storyTasksCrit", "storyTasksCrit", "crit", "Restrictions", "crit", null, null, "Task", "taskMetrics", "Restrictions", "taskMetrics", null, "Restrictions", "Projections", "taskSums", "Projections", "taskSums", "Projections", "taskSums", "Projections", "taskMetrics", null, "StoryHourEntry", "storySpentEffort", null, "Restrictions", "Projections", "storySpentEffortSums", "Projections", "storySpentEffortSums", "Projections", "storySpentEffort", null, "TaskHourEntry", "taskSpentEffort", null, null, "Restrictions", "Projections", "taskSpentEffortSums", "Projections", "taskSpentEffortSums", "Projections", "taskSpentEffort", "", "", "", "result", "story", "result", null, "story", "result", null, "story", "result", "story", "result", "story", "result", null, "story", "result", "story", "result", "story", "result", null, "result", null, "story", "story", null, "TaskHourEntry", "crit", "taskCrit", "taskCrit", "Restrictions", "Restrictions", "Restrictions", "Projections", "sumsProj", "Projections", "sumsProj", "Projections", "crit", "", "ret", "task", null, "Iteration", "crit", "crit", "Restrictions", "crit", "crit", "crit", "Restrictions", "", null, "Iteration", "crit", "Restrictions", "crit", "Restrictions", "Restrictions", "Restrictions", "", null, "token", null, "Iteration", "crit", "Restrictions", "", null, "", null, "Iteration", "crit", "Restrictions", "", "dummy", "", null, "Iteration", "crit", "Restrictions", "", "dummy"], "MN": ["addIterationRestriction", "getAllTasksForIteration", "countIterationStoriesByState", "getGenericCountDoneNonDeferred", "getCounOfDoneAndAllNonDeffered", "getCountOfDoneAndAllNonDeferredTasks", "getCountOfDoneAndAllTasks", "getCountOfDoneAndNonDeferred", "getCountOfDoneAndAllStories", "getTotalAvailability", "retrieveEmptyIterationsWithPlannedSize", "retrieveCurrentAndFutureIterationsAt", "retrieveAllStandAloneIterations", "retrieveDeep", "calculateIterationDirectStoryMetrics", "calculateIterationTaskEffortSpent", "retrieveActiveWithUserAssigned", "hasReadonlyToken", "isValidReadonlyToken", "getIterationFromReadonlyToken", "getIterationCountFromReadonlyToken"], "PN": ["criteria", "joins", "iteration", "iteration", "iterationId", "type", "joins", "iteration", "type", "doneValue", "joins", "iteration", "iteration", "iteration", "iteration", "iteration", "iterationIds", "startDate", "endDate", "assignee", "point", "iterationId", "iteration", "iteration", "userId", "iterationId", "token", "token", "token"], "SCS_VariableDeclaration": ["String", "Criteria", "Criteria", "List", "List", "List", "Criteria", "Map", "StoryState", "List", "Object", "StoryState", "Integer", "Criteria", "List", "int", "int", "Object", "Long", "Criteria", "List", "int", "int", "Object", "Long", "List", "int", "int", "Task", "Pair", "Pair", "Pair", "Criteria", "List", "Map", "Object", "Criteria", "Criterion", "Criterion", "Criterion", "Criterion", "Criteria", "Criteria", "Criteria", "Criteria", "Criteria", "Criteria", "ProjectionList", "Criteria", "ProjectionList", "Criteria", "ProjectionList", "List", "List", "List", "Map", "Object", "Story", "Object", "Story", "Object", "Story", "Criteria", "Criteria", "ProjectionList", "List", "Map", "Object", "Task", "Criteria", "Criteria", "Criteria", "Criteria", "List", "Criteria", "List"], "SCS_VariableDeclarator": ["join", "storyTaskCrit", "tasksWoStoryCrit", "tasks", "storyTasks", "iterationTasks", "criteria", "results", "state", "queryResults", "row", "state", "count", "criteria", "results", "total", "done", "row", "count", "criteria", "results", "total", "done", "row", "count", "tasks", "done", "total", "task", "noStory", "inStory", "tasks", "crit", "data", "result", "row", "crit", "startDateLimit", "endDateLimit", "overlaps", "withinIteration", "crit", "crit", "crit", "storiesCrit", "storyTasksCrit", "taskMetrics", "taskSums", "storySpentEffort", "storySpentEffortSums", "taskSpentEffort", "taskSpentEffortSums", "taskData", "storySpentEffortData", "taskSpentEffortData", "result", "row", "story", "row", "story", "row", "story", "crit", "taskCrit", "sumsProj", "data", "ret", "row", "task", "crit", "crit", "crit", "crit", "dummy", "crit", "dummy"], "SCS_MemberReference": ["joins", "criteria", "join", "criteria", "SELECT", "storyTaskCrit", "SELECT", "tasksWoStoryCrit", "storyTaskCrit", "storyTasks", "tasksWoStoryCrit", "iterationTasks", "tasks", "iterationId", "state", "criteria", "queryResults", "row", "row", "state", "count", "results", "type", "criteria", "criteria", "joins", "iteration", "criteria", "results", "row", "total", "row", "count", "done", "row", "count", "done", "total", "type", "criteria", "criteria", "joins", "iteration", "criteria", "results", "row", "type", "total", "row", "count", "type", "total", "row", "count", "row", "doneValue", "done", "count", "done", "total", "iteration", "tasks", "DEFERRED", "DEFERRED", "total", "DONE", "done", "DEFERRED", "total", "DONE", "done", "done", "total", "DONE", "iteration", "DONE", "iteration", "first", "first", "second", "second", "iteration", "tasks", "DONE", "iteration", "iterationIds", "iterationIds", "crit", "data", "row", "row", "result", "startDate", "endDate", "startDate", "endDate", "startDateLimit", "endDateLimit", "startDate", "endDate", "overlaps", "withinIteration", "crit", "point", "crit", "crit", "LEFT_JOIN", "JOIN", "LEFT_JOIN", "JOIN", "JOIN", "iterationId", "DISTINCT_ROOT_ENTITY", "crit", "DEFERRED", "iteration", "taskSums", "iteration", "storySpentEffortSums", "iteration", "taskSpentEffortSums", "taskMetrics", "storySpentEffort", "taskSpentEffort", "taskData", "row", "row", "row", "row", "row", "storySpentEffortData", "row", "row", "taskSpentEffortData", "row", "row", "result", "LEFT_JOIN", "iteration", "iteration", "sumsProj", "crit", "data", "row", "row", "ret", "JOIN", "crit", "crit", "userId", "crit", "iterationId", "crit", "token", "token", "crit", "token", "token", "crit", "token", "token", "crit"], "SCS_MethodInvocation": ["createCriteria", "add", "idEq", "getId", "createCriteria", "setFetchMode", "createCriteria", "createCriteria", "add", "idEq", "getId", "createCriteria", "setFetchMode", "createCriteria", "add", "idEq", "getId", "asList", "addAll", "asList", "addAll", "createCriteria", "add", "eq", "setProjection", "projectionList", "add", "property", "add", "rowCount", "add", "groupProperty", "values", "put", "asList", "put", "createCriteria", "setProjection", "projectionList", "add", "property", "add", "rowCount", "add", "groupProperty", "addIterationRestriction", "asList", "create", "createCriteria", "setProjection", "projectionList", "add", "property", "add", "rowCount", "add", "groupProperty", "addIterationRestriction", "asList", "equals", "create", "getAllTasksForIteration", "getStory", "getStory", "getState", "getState", "getState", "getStory", "getState", "getState", "create", "getCounOfDoneAndAllNonDeffered", "asList", "getCounOfDoneAndAllNonDeffered", "asList", "create", "getCountOfDoneAndAllNonDeferredTasks", "getCounOfDoneAndAllNonDeffered", "asList", "size", "emptyMap", "createCriteria", "add", "in", "createAlias", "setProjection", "projectionList", "add", "groupProperty", "add", "sum", "asList", "put", "createCriteria", "between", "between", "or", "and", "le", "ge", "add", "or", "createCriteria", "createCriteria", "add", "eq", "getId", "add", "isNotNull", "add", "isEmpty", "add", "isEmpty", "asList", "createCriteria", "add", "ge", "asList", "createCriteria", "add", "isNull", "addOrder", "asc", "asList", "createCriteria", "createCriteria", "setFetchMode", "createCriteria", "setFetchMode", "setFetchMode", "add", "idEq", "setResultTransformer", "uniqueResult", "createCriteria", "add", "ne", "createCriteria", "add", "eq", "projectionList", "add", "groupProperty", "add", "sum", "add", "sum", "setProjection", "createCriteria", "createCriteria", "add", "eq", "projectionList", "add", "groupProperty", "add", "sum", "setProjection", "createCriteria", "createCriteria", "createCriteria", "add", "eq", "projectionList", "add", "groupProperty", "add", "sum", "setProjection", "asList", "asList", "asList", "put", "getId", "get", "setEffortLeft", "getId", "get", "setOriginalEstimate", "getId", "containsKey", "getId", "put", "getId", "get", "setEffortSpent", "getId", "containsKey", "getId", "put", "getId", "get", "setEffortSpent", "get", "getEffortSpent", "getId", "getId", "createCriteria", "createCriteria", "createAlias", "add", "or", "eq", "eq", "projectionList", "add", "groupProperty", "add", "sum", "setProjection", "asList", "put", "getId", "createCriteria", "setFetchMode", "add", "gt", "createCriteria", "createCriteria", "add", "idEq", "asList", "createCriteria", "add", "idEq", "add", "and", "isNotNull", "ne", "asList", "isEmpty", "equals", "createCriteria", "add", "eq", "asList", "isEmpty", "isValidReadonlyToken", "createCriteria", "add", "eq", "asList", "get", "isValidReadonlyToken", "createCriteria", "add", "eq", "asList", "size"], "CO": ["/**\n * Hibernate implementation of IterationDAO interface using GenericDAOHibernate.\n */", "// interval limitations", "// iteration end during the interval", "// interval may be within the iteration", "// limit by assignee", "// must have planned size set", "// must be empty", "//doesn't work: will cause the same task responsible to be inserted too many times", "//Criteria iterationTasksCrit = crit.createCriteria(\"tasks\", CriteriaSpecification.LEFT_JOIN);", "//iterationTasksCrit.setFetchMode(\"responsibles\", FetchMode.JOIN);", "//iterationTasksCrit.setFetchMode(\"whatsNextEntries\", FetchMode.JOIN);", "//            ExactEstimate el = (ExactEstimate)row[1];", "//            ExactEstimate oe = (ExactEstimate)row[2];", "/**\n     * This function determines whether or not an iteration has an associated \n     * token for readonly access. \n     * \n     * @param iterationId\n     * @return true if iteration has an associated readonly token, false otherwise\n     */", "/**\n     * This function determines whether a given readonly token is valid of not. \n     * A token is valid if it exists in the backlog db. \n     * \n     * @param token\n     * @return true if the readonly token exists in the database, false otherwise.\n     */", "// Empty or null tokens can never be valid.", "/**\n     * This function fetches the iteration id associated with a given token. \n     * \n     * @param token\n     * @return if the token is valid the associated iteration id is returned, \n     *          if the token is not valid null is returned. \n     */", "// First ensure token is valid.", "/**\n     * This function fetches the count associated with a given token in case we need to\n     * create another one to be unique\n     * \n     * @param token\n     * @return if the token is valid the associated iteration id is returned, \n     *          if the token is not valid null is returned. \n     */", "// First ensure token is valid."], "CODE": "package fi.hut.soberit.agilefant.db.hibernate;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.EnumMap;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\nimport org.hibernate.Criteria;\nimport org.hibernate.FetchMode;\nimport org.hibernate.Session;\nimport org.hibernate.criterion.CriteriaSpecification;\nimport org.hibernate.criterion.Criterion;\nimport org.hibernate.criterion.Order;\nimport org.hibernate.criterion.ProjectionList;\nimport org.hibernate.criterion.Projections;\nimport org.hibernate.criterion.Restrictions;\nimport org.joda.time.DateTime;\nimport org.springframework.stereotype.Repository;\n\nimport fi.hut.soberit.agilefant.db.IterationDAO;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.StoryHourEntry;\nimport fi.hut.soberit.agilefant.model.StoryState;\nimport fi.hut.soberit.agilefant.model.Task;\nimport fi.hut.soberit.agilefant.model.TaskHourEntry;\nimport fi.hut.soberit.agilefant.model.TaskState;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.util.Pair;\nimport fi.hut.soberit.agilefant.util.StoryMetrics;\n\n/**\n * Hibernate implementation of IterationDAO interface using GenericDAOHibernate.\n */\n@Repository(\"iterationDAO\")\npublic class IterationDAOHibernate extends GenericDAOHibernate<Iteration>\n        implements IterationDAO {\n\n    public IterationDAOHibernate() {\n        super(Iteration.class);\n    }\n\n    private Criteria addIterationRestriction(Criteria criteria,\n            Collection<String> joins, Iteration iteration) {\n        for (String join : joins)\n            criteria = criteria.createCriteria(join);\n        criteria.add(Restrictions.idEq(iteration.getId()));\n        return criteria;\n    }\n\n    public List<Task> getAllTasksForIteration(Iteration iteration) {\n        Criteria storyTaskCrit = this.createCriteria(Task.class);\n        storyTaskCrit.setFetchMode(\"iteration\",FetchMode.SELECT);\n        storyTaskCrit = storyTaskCrit.createCriteria(\"story\").createCriteria(\"iteration\");\n        storyTaskCrit.add(Restrictions.idEq(iteration.getId()));\n        \n        Criteria tasksWoStoryCrit = this.createCriteria(Task.class);\n        tasksWoStoryCrit.setFetchMode(\"story\", FetchMode.SELECT);\n        tasksWoStoryCrit = tasksWoStoryCrit.createCriteria(\"iteration\");\n        tasksWoStoryCrit.add(Restrictions.idEq(iteration.getId()));\n        \n        List<Task> tasks = new ArrayList<Task>();\n        List<Task> storyTasks = asList(storyTaskCrit);\n        tasks.addAll(storyTasks);\n        List<Task> iterationTasks = asList(tasksWoStoryCrit);\n        tasks.addAll(iterationTasks);\n\n        return tasks;\n    }\n\n    public Map<StoryState, Integer> countIterationStoriesByState(int iterationId) {\n        Criteria criteria = this.createCriteria(Story.class);\n        criteria.add(Restrictions.eq(\"iteration.id\", iterationId));\n        criteria.setProjection(Projections.projectionList().add(\n                Projections.property(\"state\")).add(Projections.rowCount(),\n                \"storyCount\").add(Projections.groupProperty(\"state\"), \"state\"));\n\n        Map<StoryState, Integer> results = new EnumMap<StoryState, Integer>(\n                StoryState.class);\n\n        for (StoryState state : StoryState.values()) {\n            results.put(state, 0);\n        }\n\n        List<Object[]> queryResults = asList(criteria);\n\n        for (Object[] row : queryResults) {\n            StoryState state = (StoryState) row[0];\n            Integer count = ((Long) row[1]).intValue();\n            results.put(state, count);\n        }\n\n        return results;\n    }\n\n    private Pair<Integer, Integer> getGenericCountDoneNonDeferred(Class<?> type,\n            Collection<String> joins, Iteration iteration) {\n            Criteria criteria = this.createCriteria(type);\n            criteria.setProjection(Projections.projectionList().add(\n                    Projections.property(\"state\")).add(Projections.rowCount(),\n                    \"taskCount\").add(Projections.groupProperty(\"state\"), \"state\"));\n            criteria = addIterationRestriction(criteria, joins, iteration);\n            \n            List<Object[]> results = asList(criteria);\n            int total = 0;\n            int done = 0;\n            for (Object[] row : results) {\n                Long count = (Long) row[1];\n                total += (row[0].equals(TaskState.DEFERRED)) ? 0 : count;\n                done  += (row[0].equals(TaskState.DONE)) ? count : 0;\n            }\n        return Pair.create(done, total);\n    }\n    \n    private Pair<Integer, Integer> getCounOfDoneAndAllNonDeffered(Class<?> type,\n            Object doneValue, Collection<String> joins, Iteration iteration) {\n        Criteria criteria = this.createCriteria(type);\n        criteria.setProjection(Projections.projectionList().add(\n                Projections.property(\"state\")).add(Projections.rowCount(),\n                \"taskCount\").add(Projections.groupProperty(\"state\"), \"state\"));\n        criteria = addIterationRestriction(criteria, joins, iteration);\n\n        List<Object[]> results = asList(criteria);\n\n        int total = 0;\n        int done = 0;\n\n        for (Object[] row : results) {\n            Long count = (Long) row[1];\n            if(type == Story.class){\n                total += (row[0].equals(StoryState.DEFERRED)) ? 0 : count;\n            }\n            else if(type == Task.class){\n                total += (row[0].equals(TaskState.DEFERRED)) ? 0 : count;\n            }\n            if (row[0].equals(doneValue))\n                done += count;\n        }\n\n        return Pair.create(done, total);\n    }\n    \n    public Pair<Integer, Integer> getCountOfDoneAndAllNonDeferredTasks(Iteration iteration) {\n        List<Task> tasks = getAllTasksForIteration(iteration);\n        \n        int done = 0;\n        int total = 0;\n        for(Task task: tasks) {\n            if(task.getStory() != null && task.getStory().getState() != StoryState.DEFERRED && task.getState() != TaskState.DEFERRED) {\n                total++;\n                if(task.getState() == TaskState.DONE){\n                    done++;\n                }\n            }\n            else if(task.getStory() == null && task.getState() != TaskState.DEFERRED) {\n                total++;\n                if(task.getState() == TaskState.DONE){\n                    done++;\n                }\n            }\n        }\n        \n        return Pair.create(done, total);\n    }\n\n    public Pair<Integer, Integer> getCountOfDoneAndAllTasks(Iteration iteration) {\n        Pair<Integer, Integer> noStory = getCounOfDoneAndAllNonDeffered(Task.class,\n                TaskState.DONE, Arrays.asList(\"iteration\"), iteration);\n        Pair<Integer, Integer> inStory = getCounOfDoneAndAllNonDeffered(Task.class,\n                TaskState.DONE, Arrays.asList(\"story\", \"iteration\"), iteration);\n        return Pair.create(noStory.first + inStory.first, noStory.second\n                + inStory.second);\n    }\n    \n    public Pair<Integer, Integer> getCountOfDoneAndNonDeferred(Iteration iteration) {\n        Pair<Integer, Integer> tasks = getCountOfDoneAndAllNonDeferredTasks(iteration);\n        return tasks;\n    }\n    \n    public Pair<Integer, Integer> getCountOfDoneAndAllStories(\n            Iteration iteration) {\n        return getCounOfDoneAndAllNonDeffered(Story.class, StoryState.DONE, Arrays\n                .asList(\"iteration\"), iteration);\n    }\n\n    public Map<Integer, Integer> getTotalAvailability(Set<Integer> iterationIds) {\n        if (iterationIds == null || iterationIds.size() == 0) {\n            return Collections.emptyMap();\n        }\n        Criteria crit = this.createCriteria(Iteration.class);\n        crit.add(Restrictions.in(\"id\", iterationIds));\n        crit.createAlias(\"assignments\", \"assignments\");\n        crit.setProjection(Projections.projectionList().add(\n                Projections.groupProperty(\"id\")).add(\n                Projections.sum(\"assignments.availability\")));\n        List<Object[]> data = asList(crit);\n        Map<Integer, Integer> result = new HashMap<Integer, Integer>();\n        for (Object[] row : data) {\n            result.put((Integer) row[0], ((Long) row[1]).intValue());\n        }\n        return result;\n    }\n\n    public List<Iteration> retrieveEmptyIterationsWithPlannedSize(\n            DateTime startDate, DateTime endDate, User assignee) {\n        Criteria crit = this.createCriteria(Iteration.class);\n\n        // interval limitations\n        Criterion startDateLimit = Restrictions.between(\"startDate\", startDate,\n                endDate);\n        // iteration end during the interval\n        Criterion endDateLimit = Restrictions.between(\"endDate\", startDate,\n                endDate);\n        // interval may be within the iteration\n        Criterion overlaps = Restrictions.or(startDateLimit, endDateLimit);\n        Criterion withinIteration = Restrictions.and(Restrictions.le(\n                \"startDate\", startDate), Restrictions.ge(\"endDate\", endDate));\n        crit.add(Restrictions.or(overlaps, withinIteration));\n\n        // limit by assignee\n        crit.createCriteria(\"assignments\").createCriteria(\"user\").add(\n                Restrictions.eq(\"id\", assignee.getId()));\n\n        // must have planned size set\n        crit.add(Restrictions.isNotNull(\"backlogSize\"));\n\n        // must be empty\n        crit.add(Restrictions.isEmpty(\"assignedStories\"));\n        crit.add(Restrictions.isEmpty(\"tasks\"));\n\n        return asList(crit);\n    }\n\n    public List<Iteration> retrieveCurrentAndFutureIterationsAt(DateTime point) {\n\n        Criteria crit = this.createCriteria(Iteration.class);\n        crit.add(Restrictions.ge(\"endDate\", point));\n        return asList(crit);\n    }\n    \n    public List<Iteration> retrieveAllStandAloneIterations() {\n        final Criteria crit = this.createCriteria(Iteration.class);\n        crit.add(Restrictions.isNull(\"parent\"));\n        crit.addOrder(Order.asc(\"name\"));\n        return asList(crit);\n    }\n    \n    public Iteration retrieveDeep(int iterationId) {\n        Criteria crit = this.createCriteria(Iteration.class);\n\n        //doesn't work: will cause the same task responsible to be inserted too many times\n        //Criteria iterationTasksCrit = crit.createCriteria(\"tasks\", CriteriaSpecification.LEFT_JOIN);\n\n        //iterationTasksCrit.setFetchMode(\"responsibles\", FetchMode.JOIN);\n        //iterationTasksCrit.setFetchMode(\"whatsNextEntries\", FetchMode.JOIN);\n\n        Criteria storiesCrit = crit.createCriteria(\"stories\", CriteriaSpecification.LEFT_JOIN);\n\n        storiesCrit.setFetchMode(\"labels\", FetchMode.JOIN);\n\n        Criteria storyTasksCrit = storiesCrit.createCriteria(\"tasks\", CriteriaSpecification.LEFT_JOIN);\n\n        storyTasksCrit.setFetchMode(\"responsibles\", FetchMode.JOIN);\n        storyTasksCrit.setFetchMode(\"whatsNextEntries\", FetchMode.JOIN);\n\n        crit.add(Restrictions.idEq(iterationId));\n\n        crit.setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY);\n        return this.uniqueResult(crit);\n    }\n\n    public Map<Integer, StoryMetrics> calculateIterationDirectStoryMetrics(\n            Iteration iteration) {\n        \n        Criteria taskMetrics = this.createCriteria(\n                Task.class);\n        taskMetrics.add(Restrictions.ne(\"state\", TaskState.DEFERRED));\n        taskMetrics.createCriteria(\"story\", \"story\").add(\n                Restrictions.eq(\"iteration\", iteration));\n        ProjectionList taskSums = Projections.projectionList();\n        taskSums.add(Projections.groupProperty(\"story\"));\n        taskSums.add(Projections.sum(\"effortLeft\"));\n        taskSums.add(Projections.sum(\"originalEstimate\"));\n        taskMetrics.setProjection(taskSums);\n\n        Criteria storySpentEffort = this.createCriteria(\n                StoryHourEntry.class);\n        storySpentEffort.createCriteria(\"story\", \"story\").add(\n                Restrictions.eq(\"iteration\", iteration));\n        ProjectionList storySpentEffortSums = Projections.projectionList();\n        storySpentEffortSums.add(Projections.groupProperty(\"story\"));\n        storySpentEffortSums.add(Projections.sum(\"minutesSpent\"));\n        storySpentEffort.setProjection(storySpentEffortSums);\n\n        Criteria taskSpentEffort = this.createCriteria(\n                TaskHourEntry.class);\n        taskSpentEffort.createCriteria(\"task\", \"task\").createCriteria(\"story\",\n                \"story\").add(Restrictions.eq(\"iteration\", iteration));\n        ProjectionList taskSpentEffortSums = Projections.projectionList();\n        taskSpentEffortSums.add(Projections.groupProperty(\"task.story\"));\n        taskSpentEffortSums.add(Projections.sum(\"minutesSpent\"));\n        taskSpentEffort.setProjection(taskSpentEffortSums);\n        \n        List<Object[]> taskData = asList(taskMetrics);\n        List<Object[]> storySpentEffortData = asList(storySpentEffort);\n        List<Object[]> taskSpentEffortData = asList(taskSpentEffort);      \n        \n        Map<Integer, StoryMetrics> result = new HashMap<Integer, StoryMetrics>();\n        \n        for(Object[] row : taskData) {\n            Story story = (Story)row[0];\n//            ExactEstimate el = (ExactEstimate)row[1];\n//            ExactEstimate oe = (ExactEstimate)row[2];\n            result.put(story.getId(), new StoryMetrics());\n            if(row[1] != null)\n                result.get(story.getId()).setEffortLeft((Long)row[1]);\n            if(row[2] != null)\n                result.get(story.getId()).setOriginalEstimate((Long)row[2]);\n        }\n        \n        for (Object[] row : storySpentEffortData) {\n            Story story = (Story) row[0];\n            if (!result.containsKey(story.getId())) {\n                result.put(story.getId(), new StoryMetrics());\n            }\n            result.get(story.getId()).setEffortSpent((Long) row[1]);\n        }\n\n        for (Object[] row : taskSpentEffortData) {\n            Story story = (Story) row[0];\n            if (!result.containsKey(story.getId())) {\n                result.put(story.getId(), new StoryMetrics());\n            }\n            result.get(story.getId()).setEffortSpent(\n                    (Long) row[1] + result.get(story.getId()).getEffortSpent());\n        }\n        return result;\n    }\n    \n    public Map<Integer, Long> calculateIterationTaskEffortSpent(Iteration iteration) {\n        Criteria crit = this.createCriteria(TaskHourEntry.class);\n        Criteria taskCrit = crit.createCriteria(\"task\");\n        taskCrit.createAlias(\"story\", \"story\", CriteriaSpecification.LEFT_JOIN);\n        taskCrit.add(Restrictions.or(Restrictions.eq(\"iteration\", iteration), Restrictions.eq(\"story.iteration\", iteration)));\n        ProjectionList sumsProj = Projections.projectionList();\n        sumsProj.add(Projections.groupProperty(\"task\"));\n        sumsProj.add(Projections.sum(\"minutesSpent\"));\n        crit.setProjection(sumsProj);\n        List<Object[]> data = asList(crit);\n        \n        Map<Integer, Long> ret = new HashMap<Integer, Long>();\n        for(Object[] row : data) {\n            Task task = (Task)row[0];\n            ret.put(task.getId(), (Long)row[1]);\n        }\n        return ret;\n    }\n\n    public List<Iteration> retrieveActiveWithUserAssigned(int userId) {\n        Criteria crit = this.createCriteria(Iteration.class);\n        crit.setFetchMode(\"parent\", FetchMode.JOIN);\n        crit.add(Restrictions.gt(\"endDate\", new DateTime()));\n        crit = crit.createCriteria(\"assignments\");\n        crit = crit.createCriteria(\"user\");\n        crit.add(Restrictions.idEq(userId));\n        return asList(crit);\n    }\n    \n    /**\n     * This function determines whether or not an iteration has an associated \n     * token for readonly access. \n     * \n     * @param iterationId\n     * @return true if iteration has an associated readonly token, false otherwise\n     */\n    public boolean hasReadonlyToken(int iterationId) {\n        Criteria crit = this.createCriteria(Iteration.class);\n        crit.add(Restrictions.idEq(iterationId));\n        crit.add(Restrictions.and(Restrictions.isNotNull(\"readonlyToken\"), Restrictions.ne(\"readonlyToken\", \"\")));\n        \n        return !asList(crit).isEmpty();\n    }\n    \n    /**\n     * This function determines whether a given readonly token is valid of not. \n     * A token is valid if it exists in the backlog db. \n     * \n     * @param token\n     * @return true if the readonly token exists in the database, false otherwise.\n     */\n    public boolean isValidReadonlyToken(String token) {\n        \n        // Empty or null tokens can never be valid.\n        if (token == null || token.equals(\"\")) {\n            return false;\n        }\n        \n        Criteria crit = this.createCriteria(Iteration.class);\n        crit.add(Restrictions.eq(\"readonlyToken\", token));\n        \n        return !asList(crit).isEmpty();\n    }\n    \n    /**\n     * This function fetches the iteration id associated with a given token. \n     * \n     * @param token\n     * @return if the token is valid the associated iteration id is returned, \n     *          if the token is not valid null is returned. \n     */\n    public Iteration getIterationFromReadonlyToken(String token) {\n        \n        // First ensure token is valid.\n        if (!isValidReadonlyToken(token)) {\n            return null;\n        }\n        \n        Criteria crit = this.createCriteria(Iteration.class);\n        crit.add(Restrictions.eq(\"readonlyToken\", token));\n        List<Iteration> dummy = asList(crit);\n        return dummy.get(0);\n    }\n    \n    /**\n     * This function fetches the count associated with a given token in case we need to\n     * create another one to be unique\n     * \n     * @param token\n     * @return if the token is valid the associated iteration id is returned, \n     *          if the token is not valid null is returned. \n     */\n    public int getIterationCountFromReadonlyToken(String token) {\n        \n        // First ensure token is valid.\n        if (!isValidReadonlyToken(token)) {\n            return 0;\n        }\n        \n        Criteria crit = this.createCriteria(Iteration.class);\n        crit.add(Restrictions.eq(\"readonlyToken\", token));\n        List<Iteration> dummy = asList(crit);\n        return dummy.size();\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\hibernate\\\\IterationHistoryEntryDAOHibernate.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["IterationHistoryEntryDAOHibernate"], "SCS_ConstructorDeclaration": ["IterationHistoryEntryDAOHibernate"], "SCS_ClassReference": ["IterationHistoryEntry", "", null, "IterationHistoryEntry", "crit", "crit", "Restrictions", "crit", "Order", "crit", "Restrictions", null, "", null, null, "", "tasksWithoutStorySum", null, "tasksInsideStorySum", null, "tasksWithoutStorySum", null, "tasksInsideStorySum", null, "Pair", null, "Task", "crit", "Restrictions", "crit", "Restrictions", "crit", "Projections", null, "Projections", null, "Projections", null, "", null, "Task", "crit", "Projections", null, "Projections", null, "Projections", "crit", "Restrictions", "crit", "crit", "crit", "Restrictions", "crit", "crit", "Restrictions", null, "", "Pair", null, "IterationHistoryEntry", "crit", "Restrictions", "crit", "Order", ""], "MN": ["retrieveByDate", "retrieveByDateInternal", "retrieveLatest", "calculateCurrentHistoryData", "extractPairSum", "calculateCurrentHistoryData_tasksWithoutStory", "calculateCurrentHistoryData_tasksInsideStory", "parseResultToPair", "getHistoryEntriesForIteration"], "PN": ["iterationId", "timestamp", "iterationId", "timestamp", "iterationId", "iterationId", "tasksWithoutStorySum", "tasksInsideStorySum", "iterationId", "iterationId", "results", "iterationId"], "SCS_MethodInvocation": ["retrieveByDateInternal", "createCriteria", "setMaxResults", "add", "le", "addOrder", "desc", "add", "eq", "uniqueResult", "retrieveByDateInternal", "calculateCurrentHistoryData_tasksWithoutStory", "calculateCurrentHistoryData_tasksInsideStory", "extractPairSum", "getFirst", "getMinorUnits", "getFirst", "getMinorUnits", "getSecond", "getMinorUnits", "getSecond", "getMinorUnits", "create", "createCriteria", "add", "eq", "add", "ne", "setProjection", "projectionList", "add", "sum", "add", "sum", "uniqueResult", "parseResultToPair", "createCriteria", "setProjection", "projectionList", "add", "sum", "add", "sum", "add", "ne", "createCriteria", "setFetchMode", "add", "ne", "createCriteria", "add", "idEq", "uniqueResult", "parseResultToPair", "create", "createCriteria", "add", "eq", "addOrder", "asc", "asList"], "SCS_MemberReference": ["iterationId", "timestamp", "timestamp", "timestamp", "iterationId", "crit", "iterationId", "iterationId", "iterationId", "tasksWithoutStorySum", "tasksInsideStorySum", "first", "second", "iterationId", "DEFERRED", "crit", "results", "DEFERRED", "crit", "SELECT", "DEFERRED", "crit", "iterationId", "crit", "results", "results", "first", "results", "results", "second", "results", "first", "second", "iterationId", "crit"], "SCS_VariableDeclaration": ["Criteria", "Pair", "Pair", "long", "long", "Criteria", "Object", "Criteria", "Object", "long", "long", "Criteria"], "SCS_VariableDeclarator": ["crit", "tasksWithoutStorySum", "tasksInsideStorySum", "first", "second", "crit", "results", "crit", "results", "first", "second", "crit"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.db.hibernate;\n\nimport java.util.List;\n\nimport org.hibernate.Criteria;\nimport org.hibernate.FetchMode;\nimport org.hibernate.criterion.Order;\nimport org.hibernate.criterion.Projections;\nimport org.hibernate.criterion.Restrictions;\nimport org.joda.time.LocalDate;\nimport org.springframework.stereotype.Repository;\n\nimport fi.hut.soberit.agilefant.model.TaskState;\nimport fi.hut.soberit.agilefant.db.IterationHistoryEntryDAO;\nimport fi.hut.soberit.agilefant.model.ExactEstimate;\nimport fi.hut.soberit.agilefant.model.IterationHistoryEntry;\nimport fi.hut.soberit.agilefant.model.StoryState;\nimport fi.hut.soberit.agilefant.model.Task;\nimport fi.hut.soberit.agilefant.util.Pair;\n\n@Repository(\"iterationHistoryEntryDAO\")\npublic class IterationHistoryEntryDAOHibernate extends\n        GenericDAOHibernate<IterationHistoryEntry> implements\n        IterationHistoryEntryDAO {\n\n    public IterationHistoryEntryDAOHibernate() {\n        super(IterationHistoryEntry.class);\n    }\n\n    public IterationHistoryEntry retrieveByDate(int iterationId, LocalDate timestamp) {\n        return retrieveByDateInternal(iterationId, timestamp);\n    }\n\n    private IterationHistoryEntry retrieveByDateInternal(int iterationId, LocalDate timestamp) {\n        Criteria crit = this.createCriteria(IterationHistoryEntry.class);\n        crit.setMaxResults(1);\n        if (timestamp != null) {\n            crit.add(Restrictions.le(\"timestamp\", timestamp));\n        }\n        crit.addOrder(Order.desc(\"timestamp\"));\n        crit.add(Restrictions.eq(\"iteration.id\", iterationId));\n        return (IterationHistoryEntry) this.uniqueResult(crit);\n    }\n\n    public IterationHistoryEntry retrieveLatest(int iterationId) {\n        return retrieveByDateInternal(iterationId, null);\n    }\n\n    public Pair<ExactEstimate, ExactEstimate> calculateCurrentHistoryData(int iterationId) {\n        Pair<ExactEstimate, ExactEstimate> tasksWithoutStorySum = this.calculateCurrentHistoryData_tasksWithoutStory(iterationId);\n        Pair<ExactEstimate, ExactEstimate> tasksInsideStorySum = this.calculateCurrentHistoryData_tasksInsideStory(iterationId);\n        return extractPairSum(tasksWithoutStorySum, tasksInsideStorySum);\n    }\n\n    private Pair<ExactEstimate, ExactEstimate> extractPairSum(\n            Pair<ExactEstimate, ExactEstimate> tasksWithoutStorySum,\n            Pair<ExactEstimate, ExactEstimate> tasksInsideStorySum) {\n        long first = tasksWithoutStorySum.getFirst().getMinorUnits() + tasksInsideStorySum.getFirst().getMinorUnits();\n        long second = tasksWithoutStorySum.getSecond().getMinorUnits() + tasksInsideStorySum.getSecond().getMinorUnits();\n        \n        return Pair.create(new ExactEstimate(first), new ExactEstimate(second));\n    }\n    \n    private Pair<ExactEstimate, ExactEstimate> calculateCurrentHistoryData_tasksWithoutStory(int iterationId) {\n        Criteria crit = this.createCriteria(Task.class);\n        crit.add(Restrictions.eq(\"iteration.id\", iterationId));\n        crit.add(Restrictions.ne(\"state\", TaskState.DEFERRED));\n        crit.setProjection(Projections.projectionList().add(\n                Projections.sum(\"effortLeft\")).add(\n                Projections.sum(\"originalEstimate\")));\n        Object[] results = (Object[]) this.uniqueResult(crit);\n        \n        return parseResultToPair(results);        \n    }\n    \n    private Pair<ExactEstimate, ExactEstimate> calculateCurrentHistoryData_tasksInsideStory(int iterationId) {\n        Criteria crit = this.createCriteria(Task.class);\n        \n        crit.setProjection(Projections.projectionList().add(\n                Projections.sum(\"effortLeft\")).add(\n                Projections.sum(\"originalEstimate\")));\n        crit.add(Restrictions.ne(\"state\", TaskState.DEFERRED));\n        crit = crit.createCriteria(\"story\");\n\n        crit.setFetchMode(\"story\", FetchMode.SELECT);\n        crit.add(Restrictions.ne(\"state\", StoryState.DEFERRED));\n        \n        crit = crit.createCriteria(\"iteration\");\n        crit.add(Restrictions.idEq(iterationId));\n        \n        Object[] results = (Object[]) this.uniqueResult(crit);\n        \n        return parseResultToPair(results);\n    }\n    \n    private Pair<ExactEstimate, ExactEstimate> parseResultToPair(Object[] results) {\n        long first = 0;\n        long second = 0;\n        if (results[0] != null) {\n            first = (Long)results[0];\n        }\n        if (results[1] != null) {\n            second = (Long)results[1];\n        }\n        return Pair.create(new ExactEstimate(first), new ExactEstimate(second));\n    }\n    \n    \n    public List<IterationHistoryEntry> getHistoryEntriesForIteration(\n            int iterationId) {\n        Criteria crit = this.createCriteria(IterationHistoryEntry.class);\n        crit.add(Restrictions.eq(\"iteration.id\", iterationId));\n        crit.addOrder(Order.asc(\"timestamp\"));\n        return asList(crit);\n    }\n    \n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\hibernate\\\\LabelDAOHibernate.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["LabelDAOHibernate"], "SCS_ConstructorDeclaration": ["LabelDAOHibernate"], "SCS_ClassReference": ["Label", null, "Label", "crit", "Restrictions", "crit", "Restrictions", "labelName", "crit", "Projections", null, "Projections", null, null, "Label", "crit", "Restrictions", "labelName", "crit", "Order", "Projections", "plist", "Projections", "plist", "Projections", "plist", "Projections", "crit", "", "tempLabel", "tempLabel", "tempLabel", "labelList"], "MN": ["labelExists", "lookupLabelsLike"], "PN": ["labelName", "story", "labelName"], "SCS_VariableDeclaration": ["Criteria", "Object", "long", "Criteria", "ProjectionList", "List", "ArrayList", "Object", "Label"], "SCS_VariableDeclarator": ["crit", "ret", "count", "crit", "plist", "clist", "labelList", "obj", "tempLabel"], "SCS_MethodInvocation": ["createCriteria", "add", "eq", "add", "eq", "toLowerCase", "setProjection", "projectionList", "add", "count", "uniqueResult", "createCriteria", "add", "like", "toLowerCase", "addOrder", "asc", "projectionList", "add", "groupProperty", "add", "property", "add", "property", "setProjection", "asList", "setDisplayName", "setName", "setId", "add"], "SCS_MemberReference": ["story", "crit", "ret", "count", "plist", "crit", "clist", "obj", "obj", "obj", "tempLabel", "labelList"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.db.hibernate;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.hibernate.Criteria;\nimport org.hibernate.criterion.Order;\nimport org.hibernate.criterion.ProjectionList;\nimport org.hibernate.criterion.Projections;\nimport org.hibernate.criterion.Restrictions;\nimport org.springframework.stereotype.Repository;\n\nimport fi.hut.soberit.agilefant.db.LabelDAO;\nimport fi.hut.soberit.agilefant.model.Label;\nimport fi.hut.soberit.agilefant.model.Story;\n\n@Repository(\"labelDAO\")\npublic class LabelDAOHibernate extends GenericDAOHibernate<Label> implements\nLabelDAO {\n\n    public LabelDAOHibernate() {\n        super(Label.class);\n    }\n\n    public boolean labelExists(String labelName, Story story) {\n        Criteria crit = this.createCriteria(Label.class);\n        crit.add(Restrictions.eq(\"story\", story));\n        crit.add(Restrictions.eq(\"name\", labelName.toLowerCase()));\n        crit.setProjection(Projections.projectionList().add(Projections.count(\"id\")));\n        Object ret = this.uniqueResult(crit);\n        long count = (Long)ret;\n        return count > 0;\n    }\n    \n    public List<Label> lookupLabelsLike(String labelName) {\n        Criteria crit = this.createCriteria(Label.class);\n        crit.add(Restrictions.like(\"name\", labelName.toLowerCase() + \"%\"));\n        crit.addOrder(Order.asc(\"name\"));\n        ProjectionList plist = Projections.projectionList();\n        plist.add(Projections.groupProperty(\"name\"));\n        plist.add(Projections.property(\"displayName\"));\n        plist.add(Projections.property(\"id\"));\n        crit.setProjection(plist);\n        List<Object[]> clist = asList(crit);\n        ArrayList<Label> labelList = new ArrayList<Label>();\n        for (Object[] obj : clist){\n            Label tempLabel = new Label();\n            tempLabel.setDisplayName((String)obj[1]);\n            tempLabel.setName((String)obj[0]);\n            tempLabel.setId((Integer)obj[2]);\n            labelList.add(tempLabel);\n        }\n        return labelList;\n        \n    }\n\n}\n    \n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\hibernate\\\\LoginDAOHibernate.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["LoginDAOHibernate"], "SCS_ConstructorDeclaration": ["LoginDAOHibernate"], "SCS_ClassReference": ["Login", null, "Login", "crit", "Restrictions", "crit", "Order", "", null, "Login", "crit", "Restrictions", "crit", "Projections", null], "MN": ["retrieveLoginsByUser", "retrieveLoginCountByUser"], "PN": ["user", "user"], "SCS_VariableDeclaration": ["Criteria", "Criteria"], "SCS_VariableDeclarator": ["crit", "crit"], "SCS_MethodInvocation": ["createCriteria", "add", "eq", "addOrder", "asc", "asList", "createCriteria", "add", "eq", "setProjection", "rowCount", "uniqueResult"], "SCS_MemberReference": ["user", "crit", "user", "crit"], "CO": ["//crit.add(Restrictions.ge(\"endDate\", new DateTime()));"], "CODE": "package fi.hut.soberit.agilefant.db.hibernate;\n\n\nimport java.util.List;\n\nimport org.hibernate.Criteria;\nimport org.hibernate.criterion.Order;\nimport org.hibernate.criterion.Projections;\nimport org.hibernate.criterion.Restrictions;\nimport org.joda.time.DateTime;\nimport org.springframework.stereotype.Repository;\n\nimport fi.hut.soberit.agilefant.db.LoginDAO;\nimport fi.hut.soberit.agilefant.model.Login;\nimport fi.hut.soberit.agilefant.model.User;\n\n@Repository(\"loginDAO\")\npublic class LoginDAOHibernate extends GenericDAOHibernate<Login> implements\n        LoginDAO {\n\n    public LoginDAOHibernate() {\n        super(Login.class);\n    }\n    \n    public List<Login> retrieveLoginsByUser(User user) {\n        Criteria crit = this.createCriteria(Login.class);\n        crit.add(Restrictions.eq(\"user\", user));\n        //crit.add(Restrictions.ge(\"endDate\", new DateTime()));\n        crit.addOrder(Order.asc(\"time\"));\n        return asList(crit);\n    }\n\n\t@Override\n\tpublic int retrieveLoginCountByUser(User user) {\n        Criteria crit = this.createCriteria(Login.class);\n        crit.add(Restrictions.eq(\"user\", user));\n        crit.setProjection(Projections.rowCount());\n        return ((Long)this.uniqueResult(crit)).intValue();\n\t}\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\hibernate\\\\package-info.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": [], "CO": ["/**\n * This package contains Hibernate implementations of all DAO interfaces, as well as \n * special hibernate-related classes. \n */"], "CODE": "/**\n * This package contains Hibernate implementations of all DAO interfaces, as well as \n * special hibernate-related classes. \n */\npackage fi.hut.soberit.agilefant.db.hibernate;", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\hibernate\\\\ProductDAOHibernate.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["ProductDAOHibernate"], "SCS_ConstructorDeclaration": ["ProductDAOHibernate"], "SCS_ClassReference": ["Product", null, null, "criteria", "Order", null, null, null, "crit", "crit", "crit", "Order", "crit", "", "product", null, "Story", "leaftStoryCrit", null, "leaftStoryCrit", "Restrictions", "Restrictions", "Restrictions", "Restrictions", "Restrictions", "leaftStoryCrit", "Restrictions", "", null, "Iteration", null, "Project", "iterations", null, "Restrictions", "projects", "Restrictions", "Projections", "minMax", "Projections", "minMax", "Projections", "iterations", "projects", "", "", "projectStart", "projectEnd"], "MN": ["getAllOrderByName", "retrieveBacklogTree", "retrieveLeafStories", "retrieveScheduleStartAndEnd"], "PN": ["product", "product"], "SCS_VariableDeclaration": ["Criteria", "Criteria", "int", "Criteria", "Criteria", "Criteria", "ProjectionList", "Object", "Object", "DateTime", "DateTime", "DateTime", "DateTime", "DateTime", "DateTime"], "SCS_VariableDeclarator": ["criteria", "crit", "productId", "leaftStoryCrit", "iterations", "projects", "minMax", "iterationDates", "projectDates", "iterationStart", "iterationEnd", "projectStart", "projectEnd", "startDate", "endDate"], "SCS_MethodInvocation": ["createCriteria", "getPersistentClass", "addOrder", "asc", "asList", "createCriteria", "getPersistentClass", "createAlias", "createAlias", "addOrder", "asc", "setResultTransformer", "asList", "getId", "createCriteria", "createAlias", "createAlias", "add", "or", "or", "eq", "eq", "eq", "add", "isEmpty", "asList", "createCriteria", "createCriteria", "createCriteria", "add", "eq", "add", "eq", "projectionList", "add", "min", "add", "max", "setProjection", "setProjection", "uniqueResult", "uniqueResult", "isBefore", "isAfter"], "SCS_MemberReference": ["criteria", "LEFT_JOIN", "LEFT_JOIN", "DISTINCT_ROOT_ENTITY", "crit", "LEFT_JOIN", "LEFT_JOIN", "productId", "productId", "productId", "leaftStoryCrit", "product", "product", "minMax", "minMax", "iterations", "projects", "iterationDates", "iterationDates", "projectDates", "projectDates", "iterationStart", "startDate", "projectStart", "projectStart", "startDate", "iterationStart", "iterationStart", "startDate", "projectStart", "startDate", "iterationStart", "projectEnd", "endDate", "iterationEnd", "iterationEnd", "endDate", "projectEnd", "iterationEnd", "endDate", "projectEnd", "endDate", "iterationEnd", "startDate", "endDate"], "CO": ["/**\n * Hibernate implementation of ProductDAO interface using GenericDAOHibernate.\n */"], "CODE": "package fi.hut.soberit.agilefant.db.hibernate;\n\nimport java.util.Collection;\nimport java.util.List;\n\nimport org.hibernate.Criteria;\nimport org.hibernate.criterion.CriteriaSpecification;\nimport org.hibernate.criterion.Order;\nimport org.hibernate.criterion.ProjectionList;\nimport org.hibernate.criterion.Projections;\nimport org.hibernate.criterion.Restrictions;\nimport org.joda.time.DateTime;\nimport org.springframework.stereotype.Repository;\n\nimport fi.hut.soberit.agilefant.db.ProductDAO;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.Product;\nimport fi.hut.soberit.agilefant.model.Project;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.util.Pair;\n\n/**\n * Hibernate implementation of ProductDAO interface using GenericDAOHibernate.\n */\n@Repository(\"productDAO\")\npublic class ProductDAOHibernate extends GenericDAOHibernate<Product> implements\n        ProductDAO {\n\n    public ProductDAOHibernate() {\n        super(Product.class);\n    }\n\n    public Collection<Product> getAllOrderByName() {\n    \tCriteria criteria = this.createCriteria(this.getPersistentClass());\n    \tcriteria.addOrder(Order.asc(\"name\"));\n    \treturn this.asList(criteria);    \t\n    }\n    \n    public List<Product> retrieveBacklogTree() {\n        Criteria crit = this.createCriteria(this.getPersistentClass());\n        crit.createAlias(\"children\", \"projects\", CriteriaSpecification.LEFT_JOIN);\n        crit.createAlias(\"projects.children\", \"iterations\", CriteriaSpecification.LEFT_JOIN);\n        crit.addOrder(Order.asc(\"name\"));\n        crit.setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY);\n        return asList(crit);\n    }\n\n    public List<Story> retrieveLeafStories(Product product) {\n        int productId = product.getId();\n        \n        Criteria leaftStoryCrit = this.createCriteria(Story.class);\n        leaftStoryCrit.createAlias(\n                \"backlog.parent\", \"secondParent\", CriteriaSpecification.LEFT_JOIN)\n                .createAlias(\"secondParent.parent\", \"thirdParent\",\n                        CriteriaSpecification.LEFT_JOIN);\n        leaftStoryCrit.add(Restrictions.or(Restrictions.or(Restrictions.eq(\n                \"backlog.id\", productId), Restrictions.eq(\"secondParent.id\",\n                productId)), Restrictions.eq(\"thirdParent.id\", productId)));\n        \n        leaftStoryCrit.add(Restrictions.isEmpty(\"children\"));\n        return asList(leaftStoryCrit);\n    }\n\n    public Pair<DateTime, DateTime> retrieveScheduleStartAndEnd(Product product) {\n        Criteria iterations = this.createCriteria(Iteration.class);\n        Criteria projects = this.createCriteria(Project.class);\n        \n        iterations.createCriteria(\"parent\").add(Restrictions.eq(\"parent\", product));\n        \n        projects.add(Restrictions.eq(\"parent\", product));\n        \n        ProjectionList minMax = Projections.projectionList();\n        minMax.add(Projections.min(\"startDate\"));\n        minMax.add(Projections.max(\"endDate\"));\n        \n        iterations.setProjection(minMax);\n        projects.setProjection(minMax);\n        \n        Object[] iterationDates = uniqueResult(iterations);\n        Object[] projectDates = uniqueResult(projects);\n        \n        DateTime iterationStart = (DateTime)iterationDates[0];\n        DateTime iterationEnd = (DateTime)iterationDates[1];\n        \n        DateTime projectStart = (DateTime)projectDates[0];\n        DateTime projectEnd = (DateTime)projectDates[1];\n        \n        DateTime startDate;\n        if(iterationStart == null) {\n            startDate = projectStart;\n        } else if(projectStart == null) {\n            startDate = iterationStart;\n        } else if(projectStart.isBefore(iterationStart)) {\n            startDate = projectStart;\n        } else {\n            startDate = iterationStart;\n        }\n        \n        DateTime endDate;\n        if(projectEnd == null) {\n            endDate = iterationEnd;\n        } else if(iterationEnd == null) {\n            endDate = projectEnd;\n        } else if(projectEnd.isAfter(iterationEnd)) {\n            endDate = projectEnd;\n        } else {\n            endDate = iterationEnd;\n        }\n        return new Pair<DateTime, DateTime>(startDate, endDate);\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\hibernate\\\\ProjectDAOHibernate.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["ProjectDAOHibernate"], "SCS_ConstructorDeclaration": ["ProjectDAOHibernate"], "SCS_ClassReference": ["Project", null, "User", "crit", "crit", "crit", "Restrictions", "project", "", null, "User", "criteria", "Restrictions", "user", "criteria", "criteria", "", null, "Project", "crit", "Restrictions", "crit", "Order", "", null, "Project", "crit", "Restrictions", "", null, "Project", "crit", "Restrictions", "startDate", "crit", "Restrictions", "endDate", "crit", "Restrictions", "", null, "Project", "crit", "Restrictions", "startDate", "crit", "Restrictions", "endDate", "crit", "Restrictions", "crit", "Order", "", null, "Project", "crit", "Restrictions", "crit", "Order", "crit", "", null, "Project", "crit", "Restrictions", "crit", "Restrictions", "crit", "Order", "crit", "", "", null, "query", null, "Project", "crit", "Restrictions", "crit", "crit", "crit", "Restrictions", "", null, "BacklogHistoryEntry", "crit", "Restrictions", "crit", "Order", "", null, "Story", "Projections", "proj", "Projections", "proj", "Projections", "proj", "Projections", "proj", "Projections", "crit", "crit", null, null, "Restrictions", "", "metrics", "metrics", "", "metrics", "metrics", "", "metrics", "metrics", "", "metrics", "metrics", "", "metrics", "metrics", "", "metrics", "metrics", ""], "MN": ["getAssignedUsers", "getProjectsWithUserAssigned", "getActiveProjectsSortedByRank", "getProjectsWithRankBetween", "getUnrankedProjects", "getRankedProjects", "getMaxRankedProject", "getProjectWithRankLessThan", "increaseRankedProjectRanks", "retrieveActiveWithUserAssigned", "getHistoryEntriesForProject", "toInt", "calculateProjectStoryMetrics"], "PN": ["project", "user", "lower", "upper", "startDate", "endDate", "startDate", "endDate", "rank", "userId", "projectId", "obj", "backlogId"], "SCS_VariableDeclaration": ["Criteria", "Criteria", "Criteria", "Criteria", "Criteria", "Criteria", "Criteria", "Criteria", "Query", "Criteria", "Criteria", "Criteria", "ProjectionList", "List", "ProjectMetrics", "Object"], "SCS_VariableDeclarator": ["crit", "criteria", "crit", "crit", "crit", "crit", "crit", "crit", "query", "crit", "crit", "crit", "proj", "res", "metrics", "row"], "SCS_MethodInvocation": ["createCriteria", "createCriteria", "createCriteria", "add", "idEq", "getId", "asCollection", "createCriteria", "add", "idEq", "getId", "createCriteria", "createCriteria", "asCollection", "createCriteria", "add", "gt", "addOrder", "desc", "asList", "createCriteria", "add", "between", "asCollection", "createCriteria", "add", "ge", "toDateTimeAtStartOfDay", "add", "le", "toDateTimeAtStartOfDay", "add", "lt", "asCollection", "createCriteria", "add", "ge", "toDateTimeAtStartOfDay", "add", "le", "toDateTimeAtStartOfDay", "add", "gt", "addOrder", "asc", "asList", "createCriteria", "add", "gt", "addOrder", "desc", "setMaxResults", "uniqueResult", "createCriteria", "add", "lt", "add", "gt", "addOrder", "asc", "setMaxResults", "uniqueResult", "getCurrentSession", "createQuery", "executeUpdate", "createCriteria", "add", "gt", "createCriteria", "createCriteria", "add", "idEq", "asList", "createCriteria", "add", "eq", "addOrder", "asc", "asList", "createCriteria", "projectionList", "add", "sum", "add", "sum", "add", "count", "add", "groupProperty", "setProjection", "createCriteria", "createCriteria", "add", "idEq", "asList", "setCompletedStoryPoints", "getCompletedStoryPoints", "toInt", "setNumberOfDoneStories", "getNumberOfDoneStories", "toInt", "setCompletedValue", "getCompletedValue", "toInt", "setStoryPoints", "getStoryPoints", "toInt", "setNumberOfStories", "getNumberOfStories", "toInt", "setTotalValue", "getTotalValue", "toInt"], "SCS_MemberReference": ["crit", "crit", "crit", "criteria", "criteria", "criteria", "crit", "lower", "upper", "crit", "crit", "crit", "crit", "rank", "crit", "crit", "crit", "userId", "crit", "projectId", "crit", "obj", "obj", "proj", "backlogId", "crit", "res", "row", "DONE", "row", "row", "row", "row", "DEFERRED", "row", "row", "row", "metrics"], "CO": ["/**\n * Hibernate implementation of ProjectDAO interface using\n * GenericDAOHibernate.\n */", "// Value metric", "// Value metric"], "CODE": "package fi.hut.soberit.agilefant.db.hibernate;\n\nimport java.util.Collection;\nimport java.util.List;\n\nimport org.hibernate.Criteria;\nimport org.hibernate.Query;\nimport org.hibernate.Session;\nimport org.hibernate.criterion.Order;\nimport org.hibernate.criterion.ProjectionList;\nimport org.hibernate.criterion.Projections;\nimport org.hibernate.criterion.Restrictions;\nimport org.joda.time.DateTime;\nimport org.joda.time.LocalDate;\nimport org.springframework.stereotype.Repository;\n\nimport fi.hut.soberit.agilefant.db.ProjectDAO;\nimport fi.hut.soberit.agilefant.model.BacklogHistoryEntry;\nimport fi.hut.soberit.agilefant.model.Project;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.StoryState;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.transfer.ProjectMetrics;\n\n/**\n * Hibernate implementation of ProjectDAO interface using\n * GenericDAOHibernate.\n */\n@Repository(\"projectDAO\")\npublic class ProjectDAOHibernate extends GenericDAOHibernate<Project> implements\n        ProjectDAO {\n\n    public ProjectDAOHibernate() {\n        super(Project.class);\n    }\n    \n    public Collection<User> getAssignedUsers(Project project) {\n        Criteria crit = this.createCriteria(User.class);\n        crit = crit.createCriteria(\"assignments\");\n        crit = crit.createCriteria(\"backlog\");\n        crit.add(Restrictions.idEq(project.getId()));\n        return asCollection(crit);\n    }\n    \n    public Collection<Project> getProjectsWithUserAssigned(User user) {\n        Criteria criteria = this.createCriteria(User.class);\n        criteria.add(Restrictions.idEq(user.getId()));\n        criteria = criteria.createCriteria(\"assignments\");\n        criteria = criteria.createCriteria(\"backlog\");\n        return asCollection(criteria);\n    }\n\n    public List<Project> getActiveProjectsSortedByRank() {\n        Criteria crit = this.createCriteria(Project.class);\n        crit.add(Restrictions.gt(\"endDate\", new DateTime()));\n        crit.addOrder(Order.desc(\"rank\"));\n        return asList(crit);\n    }\n    \n    public Collection<Project> getProjectsWithRankBetween(int lower, int upper) {\n        Criteria crit = this.createCriteria(Project.class);\n        crit.add(Restrictions.between(\"rank\", lower, upper));\n        return asCollection(crit);\n    }\n    \n    public Collection<Project> getUnrankedProjects(LocalDate startDate, LocalDate endDate) {\n        Criteria crit = this.createCriteria(Project.class);\n        crit.add(Restrictions.ge(\"endDate\", startDate.toDateTimeAtStartOfDay()));\n        crit.add(Restrictions.le(\"startDate\", endDate.toDateTimeAtStartOfDay()));\n        crit.add(Restrictions.lt(\"rank\", 1));\n        return asCollection(crit);\n    }\n           \n    public List<Project> getRankedProjects(LocalDate startDate, LocalDate endDate) {\n        Criteria crit = this.createCriteria(Project.class);\n        crit.add(Restrictions.ge(\"endDate\", startDate.toDateTimeAtStartOfDay()));\n        crit.add(Restrictions.le(\"startDate\", endDate.toDateTimeAtStartOfDay()));\n        crit.add(Restrictions.gt(\"rank\", 0));\n        crit.addOrder(Order.asc(\"rank\"));\n        return asList(crit);\n    }\n    \n    public Project getMaxRankedProject() {\n        Criteria crit = this.createCriteria(Project.class);\n        crit.add(Restrictions.gt(\"rank\", 0));\n        crit.addOrder(Order.desc(\"rank\"));\n        crit.setMaxResults(1);\n        return uniqueResult(crit);\n    }\n\n    public Project getProjectWithRankLessThan(int rank) {\n        Criteria crit = this.createCriteria(Project.class);\n        crit.add(Restrictions.lt(\"rank\", rank));\n        crit.add(Restrictions.gt(\"rank\", 0));\n        crit.addOrder(Order.asc(\"rank\"));\n        crit.setMaxResults(1);\n        return uniqueResult(crit);\n    }\n    \n    public void increaseRankedProjectRanks() {\n        Query query = getCurrentSession().createQuery(\"UPDATE Project project SET project.rank = project.rank + 1 WHERE project.rank > 0\");\n        query.executeUpdate();\n    }\n    \n    public List<Project> retrieveActiveWithUserAssigned(int userId) {\n        Criteria crit = this.createCriteria(Project.class);\n        crit.add(Restrictions.gt(\"endDate\", new DateTime()));\n        crit = crit.createCriteria(\"assignments\");\n        crit = crit.createCriteria(\"user\");\n        crit.add(Restrictions.idEq(userId));\n        return asList(crit);\n    }\n    \n    public List<BacklogHistoryEntry> getHistoryEntriesForProject(\n            int projectId) {\n        Criteria crit = this.createCriteria(BacklogHistoryEntry.class);\n        crit.add(Restrictions.eq(\"backlog.id\", projectId));\n        crit.addOrder(Order.asc(\"timestamp\"));\n        return asList(crit);\n    }\n    \n    private int toInt(Object obj) {\n        if(obj != null) {\n            return ((Long)obj).intValue();\n        }\n        return 0;\n    }\n    public ProjectMetrics calculateProjectStoryMetrics(int backlogId) {\n        Criteria crit = this.createCriteria(Story.class);\n        ProjectionList proj = Projections.projectionList();\n        proj.add(Projections.sum(\"storyPoints\"));\n        proj.add(Projections.sum(\"storyValue\"));\n        proj.add(Projections.count(\"id\"));\n        proj.add(Projections.groupProperty(\"state\"));\n        crit.setProjection(proj);\n        crit.createCriteria(\"storyRanks\", \"ranks\").createCriteria(\"backlog\", \"backlog\").add(Restrictions.idEq(backlogId));\n        List<Object[]> res = asList(crit);\n        ProjectMetrics metrics = new ProjectMetrics();\n        for(Object[] row : res) {\n            if((StoryState)row[3] == StoryState.DONE) {\n                metrics.setCompletedStoryPoints(metrics.getCompletedStoryPoints() + toInt(row[0]));\n                metrics.setNumberOfDoneStories(metrics.getNumberOfDoneStories() + toInt(row[2]));\n                \n                // Value metric\n                metrics.setCompletedValue(metrics.getCompletedValue() + toInt(row[1]));\n            } \n            if((StoryState)row[3] != StoryState.DEFERRED) {\n                metrics.setStoryPoints(metrics.getStoryPoints() + toInt(row[0]));\n                metrics.setNumberOfStories(metrics.getNumberOfStories() + toInt(row[2]));\n                \n                // Value metric\n                metrics.setTotalValue(metrics.getTotalValue() + toInt(row[1]));\n            }\n        }\n        return metrics;\n    }\n    \n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\hibernate\\\\SettingDAOHibernate.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["SettingDAOHibernate"], "SCS_ConstructorDeclaration": ["SettingDAOHibernate"], "SCS_ClassReference": ["Setting", null, null, "criteria", "Restrictions", null, null, null, "criteria", "Order", null, null, null, null], "MN": ["getByName", "getAllOrderByName", "getAll"], "PN": ["name"], "SCS_VariableDeclaration": ["Criteria", "List", "Criteria", "Criteria"], "SCS_VariableDeclarator": ["criteria", "list", "criteria", "criteria"], "SCS_MethodInvocation": ["createCriteria", "getPersistentClass", "add", "eq", "asList", "createCriteria", "getPersistentClass", "addOrder", "asc", "asList", "createCriteria", "getPersistentClass", "asList"], "SCS_MemberReference": ["name", "criteria", "list", "criteria", "criteria"], "CO": ["/**\n     * {@inheritDoc}\n     */", "/**\n     * {@inheritDoc}\n     */"], "CODE": "package fi.hut.soberit.agilefant.db.hibernate;\n\nimport java.util.Collection;\nimport java.util.List;\n\nimport org.hibernate.Criteria;\nimport org.hibernate.criterion.Order;\nimport org.hibernate.criterion.Restrictions;\nimport org.springframework.stereotype.Repository;\n\nimport fi.hut.soberit.agilefant.db.SettingDAO;\nimport fi.hut.soberit.agilefant.model.Setting;\n\n@Repository(\"settingDAO\")\npublic class SettingDAOHibernate extends GenericDAOHibernate<Setting> implements SettingDAO {\n\n    public SettingDAOHibernate() {\n        super(Setting.class);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public Setting getByName(String name) {\n        Criteria criteria = this.createCriteria(this.getPersistentClass());\n        criteria.add(Restrictions.eq(\"name\", name));\n        List<Setting> list = this.asList(criteria);\n        return super.getFirst(list);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public List<Setting> getAllOrderByName() {\n        Criteria criteria = this.createCriteria(this.getPersistentClass());\n        criteria.addOrder(Order.asc(\"name\"));\n        return this.asList(criteria);\n    }\n\n    @Override\n    public Collection<Setting> getAll() {\n        Criteria criteria = this.createCriteria(this.getPersistentClass());\n        return this.asList(criteria);\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\hibernate\\\\StoryAccessDAOHibernate.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["StoryAccessDAOHibernate"], "SCS_ConstructorDeclaration": ["StoryAccessDAOHibernate"], "SCS_ClassReference": ["StoryAccess", null, "StoryAccess", "crit", "Restrictions", "crit", "Restrictions", "Projections", "proj", "Projections", "proj", "Projections", "crit", "", "res"], "MN": ["calculateAccessCounts"], "PN": ["start", "end", "user"], "SCS_VariableDeclaration": ["Criteria", "ProjectionList", "Map", "List", "Object"], "SCS_VariableDeclarator": ["crit", "proj", "res", "data", "row"], "SCS_MethodInvocation": ["createCriteria", "add", "eq", "add", "between", "projectionList", "add", "groupProperty", "add", "count", "setProjection", "asList", "put"], "SCS_MemberReference": ["user", "start", "end", "proj", "crit", "data", "row", "row", "res"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.db.hibernate;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.hibernate.Criteria;\nimport org.hibernate.criterion.ProjectionList;\nimport org.hibernate.criterion.Projections;\nimport org.hibernate.criterion.Restrictions;\nimport org.joda.time.DateTime;\nimport org.springframework.stereotype.Repository;\n\nimport fi.hut.soberit.agilefant.db.StoryAccessDAO;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.StoryAccess;\nimport fi.hut.soberit.agilefant.model.User;\n\n@Repository(\"storyAccessDAO\")\npublic class StoryAccessDAOHibernate extends GenericDAOHibernate<StoryAccess> implements\n        StoryAccessDAO {\n\n    protected StoryAccessDAOHibernate() {\n        super(StoryAccess.class);\n    }\n\n    public Map<Story, Long> calculateAccessCounts(DateTime start,\n            DateTime end, User user) {\n        Criteria crit = this.createCriteria(StoryAccess.class);\n        crit.add(Restrictions.eq(\"user\", user));\n        crit.add(Restrictions.between(\"date\", start, end));\n        ProjectionList proj = Projections.projectionList();\n        proj.add(Projections.groupProperty(\"story\"));\n        proj.add(Projections.count(\"id\"));\n        crit.setProjection(proj);\n        \n        Map<Story, Long> res = new HashMap<Story, Long>();\n        \n        List<Object[]> data = asList(crit);\n        for(Object[] row : data) {\n            res.put((Story)row[0], (Long)row[1]);\n        }\n        return res;\n    }\n\n    \n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\hibernate\\\\StoryDAOHibernate.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["StoryDAOHibernate"], "SCS_ConstructorDeclaration": ["StoryDAOHibernate"], "SCS_ClassReference": ["Story", null, "Task", "criteria", "Projections", null, "Projections", null, "Projections", "criteria", "Restrictions", "criteria", "Restrictions", null, "metrics", "metrics", null, "Story", "criteria", "Restrictions", "criteria", "Restrictions", "criteria", "Restrictions", "criteria", "Projections", null, "Integer", "result", null, "Story", "criteria", "Restrictions", "criteria", "Restrictions", "criteria", "Restrictions", "Restrictions", "criteria", "Projections", null, "Integer", "result", null, "Story", "criteria", "Restrictions", "criteria", "Restrictions", "criteria", "Restrictions", "Restrictions", "criteria", "Restrictions", "criteria", "Projections", null, "Integer", "result", "storyIds", "Collections", null, "Story", "crit", "Restrictions", "crit", "Projections", "sums", "Projections", "sums", "Projections", "crit", "", "result", null, "Story", "crit", null, "Restrictions", "user", "crit", "IterationDAOHelpers", "crit", "Restrictions", "crit", "Restrictions", "", "stories", null, "Story", "standaloneCrit", null, "Restrictions", "user", "standaloneCrit", "IterationDAOHelpers", "standaloneCrit", "Restrictions", "", "stories", null, "Story", "criteria", "Restrictions", "iteration", "criteria", "criteria", "Restrictions", "criteria", "Order", "", "stories", null, "Story", "criteria", "Restrictions", "backlog", "criteria", "Order", "", "stories", "", null, "query", "query", "query", null, null, "Story", "Restrictions", "Restrictions", "crit", "Restrictions", "crit", "Order", "crit", "", null, "Story", "crit", "Restrictions", "crit", "Order", "crit", ""], "MN": ["calculateMetrics", "getStoryPointSumByIteration", "getStoryValueSumByIteration", "getCompletedStoryValueSumByIteration", "getNumOfResponsiblesByStory", "getAllIterationStoriesByResponsibleAndInterval", "retrieveStoriesInIteration", "retrieveStoriesInBacklog", "retrieveActiveIterationStoriesWithUserResponsible", "searchByName", "searchByID"], "PN": ["storyId", "iterationId", "iterationId", "iterationId", "storyIds", "user", "interval", "iteration", "backlog", "userId", "name", "id"], "SCS_VariableDeclaration": ["StoryMetrics", "Criteria", "Object", "Criteria", "Object", "Criteria", "Object", "Criteria", "Object", "Criteria", "ProjectionList", "List", "Map", "Object", "ArrayList", "Criteria", "Criteria", "List", "Criteria", "Criteria", "List", "ArrayList", "Criteria", "List", "ArrayList", "Criteria", "List", "Query", "Criteria", "Criterion", "Criterion", "Criteria"], "SCS_VariableDeclarator": ["metrics", "criteria", "result", "criteria", "result", "criteria", "result", "criteria", "result", "crit", "sums", "rawData", "result", "row", "stories", "crit", "backlogCriteria", "dummy", "standaloneCrit", "iterationCrit", "standaloneStories", "stories", "criteria", "dummy", "stories", "criteria", "dummy", "QUERY_RETRIEVE_ACTIVE_ITERATION_STORIES_WITH_USER_RESPONSIBLE", "query", "crit", "nameCrit", "descriptionCrit", "crit"], "SCS_MethodInvocation": ["createCriteria", "setProjection", "projectionList", "add", "sum", "add", "sum", "add", "eq", "add", "ne", "uniqueResult", "setOriginalEstimate", "setEffortLeft", "createCriteria", "add", "eq", "add", "isNotNull", "add", "ne", "setProjection", "sum", "uniqueResult", "parseInt", "toString", "createCriteria", "add", "eq", "add", "isNotNull", "add", "not", "eq", "setProjection", "sum", "uniqueResult", "parseInt", "toString", "createCriteria", "add", "eq", "add", "isNotNull", "add", "not", "eq", "add", "eq", "setProjection", "sum", "uniqueResult", "parseInt", "toString", "size", "emptyMap", "createCriteria", "add", "in", "createAlias", "projectionList", "add", "groupProperty", "add", "count", "setProjection", "asList", "put", "createCriteria", "createCriteria", "add", "idEq", "getId", "createCriteria", "addBacklogIntervalStartLimit", "add", "ne", "add", "isNull", "asList", "addAll", "createCriteria", "createCriteria", "add", "idEq", "getId", "createCriteria", "addIterationIntervalStartLimit", "add", "ne", "asList", "addAll", "createCriteria", "add", "eq", "getId", "createCriteria", "add", "eq", "addOrder", "asc", "asList", "addAll", "createCriteria", "add", "eq", "getId", "addOrder", "asc", "asList", "addAll", "getCurrentSession", "createQuery", "setParameter", "setParameter", "setParameter", "asList", "createCriteria", "like", "like", "add", "or", "addOrder", "asc", "setMaxResults", "asList", "createCriteria", "add", "eq", "addOrder", "asc", "setMaxResults", "asList"], "SCS_MemberReference": ["storyId", "DEFERRED", "criteria", "result", "result", "result", "result", "metrics", "iterationId", "DEFERRED", "criteria", "result", "iterationId", "DEFERRED", "criteria", "result", "iterationId", "DEFERRED", "DONE", "criteria", "result", "storyIds", "storyIds", "sums", "crit", "rawData", "row", "row", "result", "backlogCriteria", "interval", "DONE", "crit", "dummy", "iterationCrit", "interval", "DONE", "standaloneCrit", "standaloneStories", "stories", "iteration", "criteria", "dummy", "stories", "criteria", "dummy", "stories", "QUERY_RETRIEVE_ACTIVE_ITERATION_STORIES_WITH_USER_RESPONSIBLE", "userId", "query", "name", "ANYWHERE", "name", "ANYWHERE", "nameCrit", "descriptionCrit", "MAX_RESULTS_PER_TYPE", "crit", "id", "MAX_RESULTS_PER_TYPE", "crit"], "AN": ["QUERY_RETRIEVE_ACTIVE_ITERATION_STORIES_WITH_USER_RESPONSIBLE"], "CO": ["// Add  stories that don't have an iteration", "// Add stories in iterations", "// all stories in iteration", "// sort by rank", "// all stories in backlog", "// :)"], "CODE": "package fi.hut.soberit.agilefant.db.hibernate;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\nimport org.hibernate.Criteria;\nimport org.hibernate.Query;\nimport org.hibernate.criterion.Criterion;\nimport org.hibernate.criterion.MatchMode;\nimport org.hibernate.criterion.Order;\nimport org.hibernate.criterion.ProjectionList;\nimport org.hibernate.criterion.Projections;\nimport org.hibernate.criterion.Restrictions;\nimport org.joda.time.DateTime;\nimport org.joda.time.Interval;\nimport org.springframework.stereotype.Repository;\n\nimport fi.hut.soberit.agilefant.business.SearchBusiness;\nimport fi.hut.soberit.agilefant.db.StoryDAO;\nimport fi.hut.soberit.agilefant.model.Backlog;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.StoryState;\nimport fi.hut.soberit.agilefant.model.Task;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.util.StoryMetrics;\nimport fi.hut.soberit.agilefant.model.TaskState;\n\n@Repository(\"storyDAO\")\npublic class StoryDAOHibernate extends GenericDAOHibernate<Story> implements\n        StoryDAO {\n\n    public StoryDAOHibernate() {\n        super(Story.class);\n    }\n\n    public StoryMetrics calculateMetrics(int storyId) {\n        StoryMetrics metrics = new StoryMetrics();\n        Criteria criteria = this.createCriteria(Task.class);\n        criteria.setProjection(\n                Projections.projectionList()\n                .add(Projections.sum(\"originalEstimate\"), \"originalEstimateSum\")\n                .add(Projections.sum(\"effortLeft\"), \"effortLeftSum\")\n                );\n        criteria.add(Restrictions.eq(\"story.id\", storyId));\n        criteria.add(Restrictions.ne(\"state\", TaskState.DEFERRED));\n        Object[] result = (Object[])this.uniqueResult(criteria);\n        if (result[0] != null) {\n            metrics.setOriginalEstimate((Long)result[0]);\n        }\n        if (result[1] != null) {\n            metrics.setEffortLeft((Long)result[1]);\n        }\n        return metrics;        \n    }\n    \n    public int getStoryPointSumByIteration(int iterationId) {\n        Criteria criteria = this.createCriteria(Story.class);\n        criteria.add(Restrictions.eq(\"iteration.id\", iterationId));\n        criteria.add(Restrictions.isNotNull(\"storyPoints\"));\n        criteria.add(Restrictions.ne(\"state\", StoryState.DEFERRED));\n        criteria.setProjection(Projections.sum(\"storyPoints\"));\n        Object result = this.uniqueResult(criteria);\n        if (result == null) {\n            return 0;\n        }\n        return Integer.parseInt(result.toString());\n    }\n    \n    public int getStoryValueSumByIteration(int iterationId) {\n        Criteria criteria = this.createCriteria(Story.class);\n        criteria.add(Restrictions.eq(\"iteration.id\", iterationId));\n        criteria.add(Restrictions.isNotNull(\"storyValue\"));\n        criteria.add(Restrictions.not(Restrictions.eq(\"state\", StoryState.DEFERRED)));\n        criteria.setProjection(Projections.sum(\"storyValue\"));\n        Object result = this.uniqueResult(criteria);\n        if (result == null) {\n            return 0;\n        }\n        return Integer.parseInt(result.toString());\n    }\n    \n    public int getCompletedStoryValueSumByIteration(int iterationId) {\n        Criteria criteria = this.createCriteria(Story.class);\n        criteria.add(Restrictions.eq(\"iteration.id\", iterationId));\n        criteria.add(Restrictions.isNotNull(\"storyValue\"));\n        criteria.add(Restrictions.not(Restrictions.eq(\"state\", StoryState.DEFERRED)));\n        criteria.add(Restrictions.eq(\"state\", StoryState.DONE));\n        criteria.setProjection(Projections.sum(\"storyValue\"));\n        Object result = this.uniqueResult(criteria);\n        if (result == null) {\n            return 0;\n        }\n        return Integer.parseInt(result.toString());\n    }\n\n    public Map<Integer, Integer> getNumOfResponsiblesByStory(\n            Set<Integer> storyIds) {\n        if(storyIds == null || storyIds.size() == 0) {\n            return Collections.emptyMap();\n        }\n        Criteria crit = this.createCriteria(Story.class);\n        crit.add(Restrictions.in(\"id\", storyIds));\n        crit.createAlias(\"responsibles\", \"responsible\");\n        ProjectionList sums = Projections.projectionList();\n        sums.add(Projections.groupProperty(\"id\"));\n        sums.add(Projections.count(\"responsible.id\"));\n        \n        crit.setProjection(sums);\n        List<Object[]> rawData = asList(crit);\n        \n        Map<Integer, Integer> result = new HashMap<Integer, Integer>();\n        for(Object[] row : rawData) {\n            result.put((Integer)row[0], ((Long)row[1]).intValue());\n        }\n        return result;\n    }\n\n\n    \n    public Collection<Story> getAllIterationStoriesByResponsibleAndInterval(User user, Interval interval) {\n        ArrayList<Story> stories = new ArrayList<Story>();\n        \n        // Add  stories that don't have an iteration\n        Criteria crit = this.createCriteria(Story.class);\n        crit.createCriteria(\"responsibles\").add(Restrictions.idEq(user.getId()));\n                \n        Criteria backlogCriteria = crit.createCriteria(\"backlog\");\n        IterationDAOHelpers.addBacklogIntervalStartLimit(backlogCriteria, interval);\n        crit.add(Restrictions.ne(\"state\", StoryState.DONE));\n        crit.add(Restrictions.isNull(\"iteration\"));\n        List<Story> dummy = asList(crit); \n        stories.addAll(dummy);\n        \n        // Add stories in iterations\n        Criteria standaloneCrit = this.createCriteria(Story.class);\n        standaloneCrit.createCriteria(\"responsibles\").add(Restrictions.idEq(user.getId()));\n        \n        Criteria iterationCrit = standaloneCrit.createCriteria(\"iteration\");\n        IterationDAOHelpers.addIterationIntervalStartLimit(iterationCrit, interval);\n        standaloneCrit.add(Restrictions.ne(\"state\", StoryState.DONE));\n        List<Story> standaloneStories = asList(standaloneCrit);\n        stories.addAll(standaloneStories);\n        \n        return stories;\n    }\n    \n    \n    public List<Story> retrieveStoriesInIteration(Iteration iteration) {\n        ArrayList<Story> stories = new ArrayList<Story>();\n\n        // all stories in iteration\n        Criteria criteria = this.createCriteria(Story.class);\n        criteria.add(Restrictions.eq(\"iteration.id\", iteration.getId()));\n\n        // sort by rank\n        criteria.createCriteria(\"storyRanks\", \"ranks\");\n        criteria.add(Restrictions.eq(\"ranks.backlog\", iteration));\n        criteria.addOrder(Order.asc(\"ranks.rank\"));\n\n        List<Story> dummy = asList(criteria);\n        stories.addAll(dummy);\n        \n        return stories;\n    }\n   \n    public List<Story> retrieveStoriesInBacklog(Backlog backlog) {\n        ArrayList<Story> stories = new ArrayList<Story>();\n\n        // all stories in backlog\n        Criteria criteria = this.createCriteria(Story.class);\n        criteria.add(Restrictions.eq(\"backlog.id\", backlog.getId()));\n\n        criteria.addOrder(Order.asc(\"name\"));\n\n        List<Story> dummy = asList(criteria);\n        stories.addAll(dummy);\n\n        return stories;\n    } \n    \n    // :)\n    private static final String QUERY_RETRIEVE_ACTIVE_ITERATION_STORIES_WITH_USER_RESPONSIBLE =\n        \"SELECT story FROM Story story\" + \" LEFT JOIN story.responsibles AS responsible\"\n        + \" LEFT JOIN story.iteration.parent AS project\"\n        + \" WHERE responsible.id = :userId\"\n        + \" AND story.iteration.endDate > :now\"\n        + \" AND story.iteration.class = :backlogType\";\n    \n    @SuppressWarnings(\"unchecked\")\n    public List<Story> retrieveActiveIterationStoriesWithUserResponsible(int userId) {\n        Query query = getCurrentSession().createQuery(QUERY_RETRIEVE_ACTIVE_ITERATION_STORIES_WITH_USER_RESPONSIBLE);\n        query.setParameter(\"userId\", userId);\n        query.setParameter(\"now\", new DateTime());\n        query.setParameter(\"backlogType\", \"Iteration\");\n        return this.asList(query);\n    }\n    \n    public List<Story> searchByName(String name) {\n        Criteria crit = this.createCriteria(Story.class);\n        Criterion nameCrit = Restrictions.like(\"name\", name, MatchMode.ANYWHERE);\n        Criterion descriptionCrit = Restrictions.like(\"description\", name, MatchMode.ANYWHERE);\n        crit.add(Restrictions.or(nameCrit, descriptionCrit));\n        crit.addOrder(Order.asc(\"name\"));\n        crit.setMaxResults(SearchBusiness.MAX_RESULTS_PER_TYPE);\n        return asList(crit);\n    }\n    \n    public List<Story> searchByID(Integer id) {\n        Criteria crit = this.createCriteria(Story.class);\n        crit.add(Restrictions.eq(\"id\", id));\n        crit.addOrder(Order.asc(\"name\"));\n        crit.setMaxResults(SearchBusiness.MAX_RESULTS_PER_TYPE);\n        return asList(crit);\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\hibernate\\\\StoryHierarchyDAOHibernate.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["StoryHierarchyDAOHibernate"], "SCS_ConstructorDeclaration": ["StoryHierarchyDAOHibernate"], "SCS_ClassReference": ["Story", "projectCrit", "Restrictions", "projectCrit", "Restrictions", "iterationCrit", null, "Restrictions", "iterationCrit", "Restrictions", "projectCrit", "Restrictions", "projectCrit", "Restrictions", "iterationCrit", null, "Restrictions", "iterationCrit", "Restrictions", null, "Story", null, "Story", null, "", "", "ret", "ret", null, "Story", null, "Story", null, "iterationCrit", "Restrictions", "projectCrit", "Restrictions", "projectCrit", "Projections", null, "Projections", "iterationCrit", "Projections", null, "Projections", "", null, null, null, "Story", "iterationCrit", "Restrictions", "iterationCrit", "Restrictions", "iterationCrit", "Projections", null, "Projections", "", null, null, "Story", null, "Story", null, "projectCrit", "Projections", null, "Projections", "iterationCrit", "Projections", null, "Projections", "projectCrit", "Restrictions", "iterationCrit", "Restrictions", "", null, null, null, "Story", "iterationCrit", "Restrictions", "iterationCrit", "Projections", null, "Projections", "iterationCrit", "Restrictions", "iterationCrit", "Restrictions", "iterationCrit", "Restrictions", null, "Restrictions", "Restrictions", "Restrictions", "projectCrit", "Restrictions", "projectCrit", "projectCrit", "Restrictions", "Restrictions", "projectCrit", "projectCrit", "Restrictions", "iterationCrit", "iterationCrit", null, "Restrictions", null, "iterationCrit", "standaloneIterationCrit", "Restrictions", "standaloneIterationCrit", "Restrictions", "standaloneIterationCrit", null, "Restrictions", "standaloneIterationCrit", "standaloneIterationCrit", "standaloneIterationCrit", null, "Story", null, "Story", null, "Story", null, "", "", "", "ret", "ret", "ret", "Collections", null, "Story", null, "Story", null, "Story", null, "project", "iterationCrit", "Restrictions", "projectCrit", "Restrictions", "standaloneIterationCrit", "Restrictions", "projectCrit", "Projections", null, "Projections", "iterationCrit", "Projections", null, "Projections", "standaloneIterationCrit", "Projections", null, "Projections", "", null, null, "", null, "", "rootFilter", "Order", "", "", "rootFilter", "Order", "rootFilter", "", "story", null, "project", "impl", "m", null, "Story", "rootFilter", null, "rootFilter", "Restrictions", "Restrictions", "Restrictions", "Restrictions", "Restrictions", "rootFilter", "Restrictions"], "MN": ["attachLeafFilters", "attachBranchFilters", "retrieveProjectLeafStories", "sum", "totalLeafStoryPoints", "totalLeafStoryPoints", "totalLeafDoneStoryPoints", "totalLeafDoneStoryPoints", "attachRootFilters", "retrieveProjectRootStories", "totalRootStoryPoints", "retrieveProductRootStories", "getMaximumTreeRank", "totalBranchStoryPoints", "getRootStoryCriteria"], "PN": ["projectCrit", "iterationCrit", "project", "projectCrit", "iterationCrit", "project", "project", "val1", "val2", "project", "iteration", "project", "iteration", "projectCrit", "iterationCrit", "standaloneIterationCrit", "projectId", "projectId", "project", "productId", "productId", "project", "productId"], "SCS_MethodInvocation": ["add", "eq", "add", "isEmpty", "createCriteria", "add", "eq", "add", "isEmpty", "add", "eq", "add", "isNotEmpty", "createCriteria", "add", "eq", "add", "isNotEmpty", "createCriteria", "createCriteria", "attachLeafFilters", "asList", "asList", "addAll", "addAll", "createCriteria", "createCriteria", "attachLeafFilters", "add", "ne", "add", "ne", "setProjection", "projectionList", "add", "sum", "setProjection", "projectionList", "add", "sum", "sum", "uniqueResult", "uniqueResult", "createCriteria", "add", "isEmpty", "add", "ne", "setProjection", "projectionList", "add", "sum", "sum", "uniqueResult", "createCriteria", "createCriteria", "attachLeafFilters", "setProjection", "projectionList", "add", "sum", "setProjection", "projectionList", "add", "sum", "add", "eq", "add", "eq", "sum", "uniqueResult", "uniqueResult", "createCriteria", "add", "isEmpty", "setProjection", "projectionList", "add", "sum", "add", "eq", "add", "isNotNull", "add", "eq", "uniqueResult", "and", "isNotNull", "eqProperty", "add", "eq", "createAlias", "createAlias", "or", "isNull", "add", "add", "isNull", "createAlias", "createCriteria", "add", "eq", "createAlias", "add", "add", "eq", "add", "isNotNull", "createCriteria", "add", "isNull", "createAlias", "createAlias", "add", "createCriteria", "createCriteria", "createCriteria", "attachRootFilters", "asList", "asList", "asList", "addAll", "addAll", "addAll", "sort", "createCriteria", "createCriteria", "createCriteria", "attachRootFilters", "getId", "add", "ne", "add", "ne", "add", "ne", "setProjection", "projectionList", "add", "sum", "setProjection", "projectionList", "add", "sum", "setProjection", "projectionList", "add", "sum", "sum", "uniqueResult", "uniqueResult", "sum", "uniqueResult", "getRootStoryCriteria", "addOrder", "asc", "asList", "getRootStoryCriteria", "addOrder", "desc", "setMaxResults", "uniqueResult", "getTreeRank", "retrieveProjectRootStories", "getId", "calculateStoryTreeMetrics", "getEstimatedPoints", "createCriteria", "createAlias", "createAlias", "add", "or", "or", "eq", "eq", "eq", "add", "isNull"], "SCS_MemberReference": ["project", "project", "project", "project", "projectCrit", "iterationCrit", "project", "projectCrit", "iterationCrit", "projectLeaf", "iterationLeaf", "ret", "val1", "sum", "val1", "val2", "sum", "val2", "sum", "projectCrit", "iterationCrit", "project", "DEFERRED", "DEFERRED", "projectCrit", "iterationCrit", "DEFERRED", "iterationCrit", "projectCrit", "iterationCrit", "project", "DONE", "DONE", "projectCrit", "iterationCrit", "DONE", "iteration", "iterationCrit", "result", "result", "projectId", "LEFT_JOIN", "parentInProductBacklog", "parentFilter", "LEFT_JOIN", "projectId", "parentFilter", "standaloneIterationCrit", "projectId", "LEFT_JOIN", "parentFilter", "projectCrit", "iterationCrit", "standaloneIterationCrit", "projectId", "projectCrit", "iterationCrit", "standaloneIterationCrit", "directProjectRoots", "iterationRoots", "standaloneIterationRoots", "ret", "ret", "projectCrit", "iterationCrit", "standaloneIterationCrit", "DEFERRED", "DEFERRED", "DEFERRED", "projectCrit", "iterationCrit", "standaloneIterationCrit", "sum", "productId", "rootFilter", "productId", "rootFilter", "story", "s", "sum", "sum", "LEFT_JOIN", "LEFT_JOIN", "productId", "productId", "productId", "rootFilter"], "SCS_VariableDeclaration": ["Criteria", "Criteria", "List", "List", "List", "long", "Criteria", "Criteria", "Criteria", "Criteria", "Criteria", "Criteria", "Long", "LogicalExpression", "Criterion", "Criteria", "Criteria", "Criteria", "List", "List", "List", "List", "Criteria", "Criteria", "Criteria", "long", "Criteria", "Criteria", "Story", "StoryHierarchyBusinessImpl", "long", "Story", "StoryTreeBranchMetrics", "Criteria"], "SCS_VariableDeclarator": ["projectCrit", "iterationCrit", "projectLeaf", "iterationLeaf", "ret", "sum", "projectCrit", "iterationCrit", "iterationCrit", "projectCrit", "iterationCrit", "iterationCrit", "result", "parentInProductBacklog", "parentFilter", "projectCrit", "iterationCrit", "standaloneIterationCrit", "directProjectRoots", "iterationRoots", "standaloneIterationRoots", "ret", "projectCrit", "iterationCrit", "standaloneIterationCrit", "sum", "rootFilter", "rootFilter", "story", "impl", "sum", "s", "m", "rootFilter"], "CO": ["/**\n     * {@inheritDoc}\n     */", "/**\n     * {@inheritDoc}\n     */", "/**\n     * {@inheritDoc}\n     */", "/**\n     * {@inheritDoc}\n     */", "/**\n     * {@inheritDoc}\n     */", "// stories attached to the project", "// Stories attached to iterations under the project", "// Stories in standalone iterations and this project", "// story's backlog is this project", "// story's iteration is not null", "// story's iteration doesn't have a parent", "// story doesn't have a parent OR parent in product", "/**\n     * {@inheritDoc}\n     */", "/**\n     * {@inheritDoc}\n     */", "/** {@inheritDoc} */", "/** {@inheritDoc} */", "/**\n     * {@inheritDoc}\n     */"], "CODE": "package fi.hut.soberit.agilefant.db.hibernate;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport org.hibernate.Criteria;\nimport org.hibernate.criterion.CriteriaSpecification;\nimport org.hibernate.criterion.Criterion;\nimport org.hibernate.criterion.LogicalExpression;\nimport org.hibernate.criterion.Order;\nimport org.hibernate.criterion.Projections;\nimport org.hibernate.criterion.Restrictions;\nimport org.springframework.beans.support.PropertyComparator;\nimport org.springframework.stereotype.Repository;\n\nimport fi.hut.soberit.agilefant.business.impl.StoryHierarchyBusinessImpl;\nimport fi.hut.soberit.agilefant.db.StoryHierarchyDAO;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.Project;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.StoryState;\nimport fi.hut.soberit.agilefant.transfer.StoryTreeBranchMetrics;\n\n@Repository(\"storyHierarchyDAO\")\npublic class StoryHierarchyDAOHibernate extends GenericDAOHibernate<Story>\n        implements StoryHierarchyDAO {\n\n    public StoryHierarchyDAOHibernate() {\n        super(Story.class);\n    }\n\n    private void attachLeafFilters(Criteria projectCrit,\n            Criteria iterationCrit, Project project) {\n        projectCrit.add(Restrictions.eq(\"backlog\", project));\n        projectCrit.add(Restrictions.isEmpty(\"children\"));\n\titerationCrit.createCriteria(\"backlog\").add(Restrictions.eq(\"parent\", project));\n        iterationCrit.add(Restrictions.isEmpty(\"children\"));\n    }\n    \n    private void attachBranchFilters(Criteria projectCrit,\n            Criteria iterationCrit, Project project) {\n        projectCrit.add(Restrictions.eq(\"backlog\", project));\n        projectCrit.add(Restrictions.isNotEmpty(\"children\"));\n        iterationCrit.createCriteria(\"backlog\").add(\n                Restrictions.eq(\"parent\", project));\n        iterationCrit.add(Restrictions.isNotEmpty(\"children\"));\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public List<Story> retrieveProjectLeafStories(Project project) {\n        Criteria projectCrit = this.createCriteria(Story.class);\n        Criteria iterationCrit = this.createCriteria(Story.class);\n        this.attachLeafFilters(projectCrit, iterationCrit, project);\n        \n        List<Story> projectLeaf = asList(projectCrit);\n        List<Story> iterationLeaf = asList(iterationCrit);\n\n        List<Story> ret = new ArrayList<Story>();\n        ret.addAll(projectLeaf);\n        ret.addAll(iterationLeaf);\n\n        return ret;\n    }\n\n    private static long sum(Long val1, Long val2) {\n        long sum = 0;\n        if (val1 != null) {\n            sum += val1;\n        }\n        if (val2 != null) {\n            sum += val2;\n        }\n        return sum;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public long totalLeafStoryPoints(Project project) {\n        Criteria projectCrit = this.createCriteria(Story.class);\n        Criteria iterationCrit = this.createCriteria(Story.class);\n        this.attachLeafFilters(projectCrit, iterationCrit, project);\n        \n        iterationCrit.add(Restrictions.ne(\"state\", StoryState.DEFERRED));\n        projectCrit.add(Restrictions.ne(\"state\", StoryState.DEFERRED));\n        \n        projectCrit.setProjection(Projections.projectionList().add(\n                Projections.sum(\"storyPoints\")));\n        iterationCrit.setProjection(Projections.projectionList().add(\n                Projections.sum(\"storyPoints\")));\n        return sum((Long) this.uniqueResult(projectCrit),\n                (Long) this.uniqueResult(iterationCrit));\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public long totalLeafStoryPoints(Iteration iteration) {\n        Criteria iterationCrit = this.createCriteria(Story.class);\n        \n        iterationCrit.add(Restrictions.isEmpty(\"children\"));\n        \n        iterationCrit.add(Restrictions.ne(\"state\", StoryState.DEFERRED));\n        \n        iterationCrit.setProjection(Projections.projectionList().add(\n                Projections.sum(\"storyPoints\")));\n        return sum(0L,\n                (Long) this.uniqueResult(iterationCrit));\n    }\n    \n    /**\n     * {@inheritDoc}\n     */\n    public long totalLeafDoneStoryPoints(Project project) {\n        Criteria projectCrit = this.createCriteria(Story.class);\n        Criteria iterationCrit = this.createCriteria(Story.class);\n        this.attachLeafFilters(projectCrit, iterationCrit, project);\n        projectCrit.setProjection(Projections.projectionList().add(\n                Projections.sum(\"storyPoints\")));\n        iterationCrit.setProjection(Projections.projectionList().add(\n                Projections.sum(\"storyPoints\")));\n        projectCrit.add(Restrictions.eq(\"state\", StoryState.DONE));\n        iterationCrit.add(Restrictions.eq(\"state\", StoryState.DONE));\n        return sum((Long) this.uniqueResult(projectCrit),\n                (Long) this.uniqueResult(iterationCrit));\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public long totalLeafDoneStoryPoints(Iteration iteration) {\n        Criteria iterationCrit = this.createCriteria(Story.class);\n        iterationCrit.add(Restrictions.isEmpty(\"children\"));\n        iterationCrit.setProjection(Projections.projectionList().add(\n                Projections.sum(\"storyPoints\")));\n        iterationCrit.add(Restrictions.eq(\"state\", StoryState.DONE));\n        iterationCrit.add(Restrictions.isNotNull(\"storyPoints\"));\n        iterationCrit.add(Restrictions.eq(\"iteration\", iteration));\n        Long result = (Long) this.uniqueResult(iterationCrit);\n        return result == null ? 0 : result;\n    }\n    \n    private void attachRootFilters(Criteria projectCrit, Criteria iterationCrit, Criteria standaloneIterationCrit, int projectId) {\n        LogicalExpression parentInProductBacklog = Restrictions.and(\n                Restrictions.isNotNull(\"parent\"), Restrictions.eqProperty(\n                        \"parentStory.backlog\", \"project.parent\"));\n        // stories attached to the project\n        projectCrit.add(Restrictions.eq(\"backlog.id\", projectId));\n        projectCrit.createAlias(\"backlog\", \"project\");\n\n        projectCrit.createAlias(\"parent\", \"parentStory\",CriteriaSpecification.LEFT_JOIN);\n        Criterion parentFilter = Restrictions.or(Restrictions.isNull(\"parent\"),parentInProductBacklog);\n        \n        projectCrit.add(parentFilter);\n        projectCrit.add(Restrictions.isNull(\"iteration\"));\n        \n        // Stories attached to iterations under the project\n        iterationCrit.createAlias(\"parent\", \"parentStory\", CriteriaSpecification.LEFT_JOIN);\n        iterationCrit.createCriteria(\"iteration\").add(Restrictions.eq(\"parent.id\", projectId))\n            .createAlias(\"parent\", \"project\");\n        iterationCrit.add(parentFilter);\n\n\n        // Stories in standalone iterations and this project\n        if (standaloneIterationCrit != null) {\n            // story's backlog is this project\n            standaloneIterationCrit.add(Restrictions.eq(\"backlog.id\", projectId));\n            \n            // story's iteration is not null\n            standaloneIterationCrit.add(Restrictions.isNotNull(\"iteration\"));\n            \n            // story's iteration doesn't have a parent\n            standaloneIterationCrit.createCriteria(\"iteration\").add(Restrictions.isNull(\"parent\"));\n            \n            standaloneIterationCrit.createAlias(\"backlog\", \"project\");\n            \n            // story doesn't have a parent OR parent in product\n            standaloneIterationCrit.createAlias(\"parent\", \"parentStory\", CriteriaSpecification.LEFT_JOIN);\n            standaloneIterationCrit.add(parentFilter);\n        }\n        \n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @SuppressWarnings(\"unchecked\")\n    public List<Story> retrieveProjectRootStories(int projectId) {\n\n        Criteria projectCrit = this.createCriteria(Story.class);\n        Criteria iterationCrit = this.createCriteria(Story.class);\n        Criteria standaloneIterationCrit = this.createCriteria(Story.class);\n        this.attachRootFilters(projectCrit, iterationCrit, standaloneIterationCrit, projectId);\n        List<Story> directProjectRoots = asList(projectCrit);\n        List<Story> iterationRoots = asList(iterationCrit);\n        List<Story> standaloneIterationRoots = asList(standaloneIterationCrit);\n\n        List<Story> ret = new ArrayList<Story>();\n        ret.addAll(directProjectRoots);\n        ret.addAll(iterationRoots);\n        ret.addAll(standaloneIterationRoots);\n        \n        Collections.sort(ret, new PropertyComparator(\"treeRank\", true, true));\n        \n        return ret;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public long totalRootStoryPoints(Project project) {\n        Criteria projectCrit = this.createCriteria(Story.class);\n        Criteria iterationCrit = this.createCriteria(Story.class);\n        Criteria standaloneIterationCrit = this.createCriteria(Story.class);\n        this.attachRootFilters(projectCrit, iterationCrit, standaloneIterationCrit, project.getId());\n        \n        iterationCrit.add(Restrictions.ne(\"state\", StoryState.DEFERRED));\n        projectCrit.add(Restrictions.ne(\"state\", StoryState.DEFERRED));\n        standaloneIterationCrit.add(Restrictions.ne(\"state\", StoryState.DEFERRED));\n        \n        projectCrit.setProjection(Projections.projectionList().add(\n                Projections.sum(\"storyPoints\")));\n        iterationCrit.setProjection(Projections.projectionList().add(\n                Projections.sum(\"storyPoints\")));\n        standaloneIterationCrit.setProjection(Projections.projectionList().add(\n                Projections.sum(\"storyPoints\")));\n        long sum = sum((Long) this.uniqueResult(projectCrit), (Long) this.uniqueResult(iterationCrit));\n        return sum((Long) this.uniqueResult(standaloneIterationCrit), sum);\n    }\n\n    /** {@inheritDoc} */\n    public List<Story> retrieveProductRootStories(int productId) {\n        Criteria rootFilter = getRootStoryCriteria(productId);\n        rootFilter.addOrder(Order.asc(\"treeRank\"));\n        return asList(rootFilter);\n    }\n\n    /** {@inheritDoc} */\n    public int getMaximumTreeRank(int productId) {\n        Criteria rootFilter = getRootStoryCriteria(productId);\n        rootFilter.addOrder(Order.desc(\"treeRank\"));\n        rootFilter.setMaxResults(1);\n        Story story = (Story)uniqueResult(rootFilter);\n        if (story == null) {\n            return 0;\n        } else {    \n            return story.getTreeRank();\n        }\n    }\n    \n    /**\n     * {@inheritDoc}\n     */\n    public long totalBranchStoryPoints(Project project)\n    {\n        StoryHierarchyBusinessImpl impl = new StoryHierarchyBusinessImpl();\n        long sum = 0;\n        for (Story s : this.retrieveProjectRootStories(project.getId())) {\n            StoryTreeBranchMetrics m = impl.calculateStoryTreeMetrics(s);\n            sum += m.getEstimatedPoints();\n        }\n        return sum;\n    }\n     \n    private Criteria getRootStoryCriteria(int productId) {\n        Criteria rootFilter = this.createCriteria(Story.class);\n        rootFilter.createAlias(\n                \"backlog.parent\", \"secondParent\", CriteriaSpecification.LEFT_JOIN)\n                .createAlias(\"secondParent.parent\", \"thirdParent\",\n                        CriteriaSpecification.LEFT_JOIN);\n        rootFilter.add(Restrictions.or(Restrictions.or(Restrictions.eq(\n                \"backlog.id\", productId), Restrictions.eq(\"secondParent.id\",\n                productId)), Restrictions.eq(\"thirdParent.id\", productId)));\n        rootFilter.add(Restrictions.isNull(\"parent\"));\n        return rootFilter;\n    }\n\n}\n    \n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\hibernate\\\\StoryHourEntryDAOHibernate.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["StoryHourEntryDAOHibernate"], "SCS_ConstructorDeclaration": ["StoryHourEntryDAOHibernate"], "SCS_ClassReference": ["StoryHourEntry"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.db.hibernate;\n\nimport org.springframework.stereotype.Repository;\n\nimport fi.hut.soberit.agilefant.db.StoryHourEntryDAO;\nimport fi.hut.soberit.agilefant.model.StoryHourEntry;\n\n@Repository(\"storyHourEntryDAO\")\npublic class StoryHourEntryDAOHibernate extends GenericDAOHibernate<StoryHourEntry> implements\n        StoryHourEntryDAO {\n\n    public StoryHourEntryDAOHibernate() {\n        super(StoryHourEntry.class);\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\hibernate\\\\StoryRankDAOHibernate.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["StoryRankDAOHibernate"], "SCS_ConstructorDeclaration": ["StoryRankDAOHibernate"], "SCS_ClassReference": ["StoryRank", null, "StoryRank", "crit", "Restrictions", "crit", "Restrictions", "", null, "StoryRank", "crit", "Restrictions", "crit", "Order", "", "stories", null, "StoryRank", "filter", "Restrictions", "filter", "iterFilter", "Restrictions", "", "stories", null, "StoryRank", "filter", "Restrictions", "filter", "projectFilter", "Restrictions", ""], "MN": ["retrieveByBacklogAndStory", "retrieveRanksByBacklog", "getIterationRanksForStories", "getProjectRanksForStories"], "PN": ["backlog", "story", "backlog", "stories", "stories"], "SCS_VariableDeclaration": ["Criteria", "Criteria", "Criteria", "Criteria", "Criteria", "Criteria"], "SCS_VariableDeclarator": ["crit", "crit", "filter", "iterFilter", "filter", "projectFilter"], "SCS_MethodInvocation": ["createCriteria", "add", "eq", "add", "eq", "uniqueResult", "createCriteria", "add", "eq", "addOrder", "asc", "asList", "isEmpty", "createCriteria", "add", "in", "createCriteria", "add", "eq", "asCollection", "isEmpty", "createCriteria", "add", "in", "createCriteria", "add", "eq", "asCollection"], "SCS_MemberReference": ["backlog", "story", "crit", "backlog", "crit", "stories", "filter", "stories", "filter"], "CO": ["// Iteration crit", "// Project crit"], "CODE": "package fi.hut.soberit.agilefant.db.hibernate;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\n\nimport org.hibernate.Criteria;\nimport org.hibernate.criterion.Order;\nimport org.hibernate.criterion.Restrictions;\nimport org.springframework.stereotype.Repository;\n\nimport fi.hut.soberit.agilefant.db.StoryRankDAO;\nimport fi.hut.soberit.agilefant.model.Backlog;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.StoryRank;\n\n@Repository(\"storyRankDAO\")\npublic class StoryRankDAOHibernate extends GenericDAOHibernate<StoryRank>\n        implements StoryRankDAO {\n\n    protected StoryRankDAOHibernate() {\n        super(StoryRank.class);\n    }\n\n    public StoryRank retrieveByBacklogAndStory(Backlog backlog, Story story) {\n        Criteria crit = this.createCriteria(\n                StoryRank.class);\n        crit.add(Restrictions.eq(\"backlog\", backlog));\n        crit.add(Restrictions.eq(\"story\", story));\n        return uniqueResult(crit);\n    }\n\n    public List<StoryRank> retrieveRanksByBacklog(Backlog backlog) {\n        Criteria crit = this.createCriteria(\n                StoryRank.class);\n        crit.add(Restrictions.eq(\"backlog\", backlog));\n        crit.addOrder(Order.asc(\"rank\"));\n        return asList(crit);\n    }\n    \n    public Collection<StoryRank> getIterationRanksForStories(Collection<Story> stories) {\n        if(stories.isEmpty()) {\n            return new ArrayList<StoryRank>();\n        }\n        Criteria filter = this.createCriteria(StoryRank.class);\n        filter.add(Restrictions.in(\"story\", stories));\n        \n        // Iteration crit\n        Criteria iterFilter = filter.createCriteria(\"backlog\");\n        iterFilter.add(Restrictions.eq(\"class\", \"Iteration\"));\n        \n        return asCollection(filter);\n    }\n    \n    public Collection<StoryRank> getProjectRanksForStories(Collection<Story> stories) {\n        if(stories.isEmpty()) {\n            return new ArrayList<StoryRank>();\n        }\n        Criteria filter = this.createCriteria(StoryRank.class);\n        filter.add(Restrictions.in(\"story\", stories));\n        \n        // Project crit\n        Criteria projectFilter = filter.createCriteria(\"backlog\");\n        projectFilter.add(Restrictions.eq(\"class\", \"Project\"));\n        \n        return asCollection(filter);\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\hibernate\\\\StringEscapeFilter.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["StringEscapeFilter"], "AN": ["enabled"], "SCS_VariableDeclarator": ["enabled", "str"], "MN": ["filterDown"], "PN": ["ob"], "SCS_MemberReference": ["enabled", "ob", "ob", "ob", "ob", "ob", "str"], "SCS_VariableDeclaration": ["String"], "SCS_ClassReference": ["org.springframework.web.util.HtmlUtils"], "SCS_MethodInvocation": ["htmlEscape"], "CO": ["/**\n * UserTypeFilter to filter <'s and >'s to HTML ampersand codes.\n * \n * @author Turkka \u00c3\u201eij\u00c3\u00a4l\u00c3\u00a4\n * @see UserTypeFilter\n */", "/**\n     * Conversions to apply. Every other element is the conversion character,\n     * every other what to convert to.\n     */", "/*private String[] conversions = { \"<\", \"&lt;\", \">\", \"&gt;\"\n                                                                  , \"\u00c3\u00a4\",\n                                                                  \"&auml;\",\n                                                                  \"\u00c3\u00b6\",\n                                                                  \"&ouml;\",\n                                                                  \"\u00c3\u00a5\",\n                                                                  \"&aring;\",\n                                                                  \"\u00c3\u201e\",\n                                                                  \"&Auml;\",\n                                                                  \"\u00c3\u2013\",\n                                                                  \"&Ouml;\",\n                                                                  \"\u00c3\u2026\",\n                                                                  \"&Aring;\"\n                                                                 \n    };*/", "/**\n     * Handle converting single character in the string.\n     * \n     * @param str\n     *                string to convert\n     * @param from\n     *                character to replace\n     * @param to\n     *                string to replace the character with\n     * @return \"str\" with \"from\"-charaters replaced with \"to\"-strings\n     *\n    private String handleSingleCharacter(String str, char from, String to) {\n        String current = str;\n        String result = \"\";\n\n        int nextPos = current.indexOf(from);\n\n        while (nextPos != -1) {\n            result += current.substring(0, nextPos);\n\n            result += to;\n\n            if (nextPos + 1 <= current.length())\n                current = current.substring(nextPos + 1);\n            else\n                break;\n\n            nextPos = current.indexOf(from);\n        }\n\n        result += current;\n\n        return result;\n    }*/", "/**\n     * Filter downgoing data by applying the HTML ampersand codes.\n     */", "// This isn't what we wanted!", "/*\n         * String encoded; try { encoded = URLEncoder.encode(str,\n         * Charset.defaultCharset().name()); }\n         * catch(UnsupportedEncodingException e) { return ob; }\n         * \n         * return (Object)encoded;\n         */", "// go trough all the conversions, apply each", "// every other element is the conversion character,", "// every other conversion target", "/*\n         * for(int i = 0; i < conversions.length; i += 2) {\n         * \n         * char from = conversions[i].charAt(0); String to = conversions[i+1];\n         * \n         * str = handleSingleCharacter(str, from, to); }\n         * \n         * return str;\n         */"], "CODE": "package fi.hut.soberit.agilefant.db.hibernate;\n\n/**\n * UserTypeFilter to filter <'s and >'s to HTML ampersand codes.\n * \n * @author Turkka \u00c3\u201eij\u00c3\u00a4l\u00c3\u00a4\n * @see UserTypeFilter\n */\npublic class StringEscapeFilter extends UserTypeFilter {\n    private boolean enabled = false;\n\n    /**\n     * Conversions to apply. Every other element is the conversion character,\n     * every other what to convert to.\n     */\n    /*private String[] conversions = { \"<\", \"&lt;\", \">\", \"&gt;\"\n                                                                  , \"\u00c3\u00a4\",\n                                                                  \"&auml;\",\n                                                                  \"\u00c3\u00b6\",\n                                                                  \"&ouml;\",\n                                                                  \"\u00c3\u00a5\",\n                                                                  \"&aring;\",\n                                                                  \"\u00c3\u201e\",\n                                                                  \"&Auml;\",\n                                                                  \"\u00c3\u2013\",\n                                                                  \"&Ouml;\",\n                                                                  \"\u00c3\u2026\",\n                                                                  \"&Aring;\"\n                                                                 \n    };*/\n\n    /**\n     * Handle converting single character in the string.\n     * \n     * @param str\n     *                string to convert\n     * @param from\n     *                character to replace\n     * @param to\n     *                string to replace the character with\n     * @return \"str\" with \"from\"-charaters replaced with \"to\"-strings\n     *\n    private String handleSingleCharacter(String str, char from, String to) {\n        String current = str;\n        String result = \"\";\n\n        int nextPos = current.indexOf(from);\n\n        while (nextPos != -1) {\n            result += current.substring(0, nextPos);\n\n            result += to;\n\n            if (nextPos + 1 <= current.length())\n                current = current.substring(nextPos + 1);\n            else\n                break;\n\n            nextPos = current.indexOf(from);\n        }\n\n        result += current;\n\n        return result;\n    }*/\n\n    /**\n     * Filter downgoing data by applying the HTML ampersand codes.\n     */\n    protected Object filterDown(Object ob) {\n        if (!enabled) {\n            return ob;\n        }\n\n        if (ob == null)\n            return null;\n        if (!(ob instanceof String))\n            return ob;\n\n        String str = (String) ob;\n\n        // This isn't what we wanted!\n        /*\n         * String encoded; try { encoded = URLEncoder.encode(str,\n         * Charset.defaultCharset().name()); }\n         * catch(UnsupportedEncodingException e) { return ob; }\n         * \n         * return (Object)encoded;\n         */\n\n        // go trough all the conversions, apply each\n        // every other element is the conversion character,\n        // every other conversion target\n        /*\n         * for(int i = 0; i < conversions.length; i += 2) {\n         * \n         * char from = conversions[i].charAt(0); String to = conversions[i+1];\n         * \n         * str = handleSingleCharacter(str, from, to); }\n         * \n         * return str;\n         */\n\n        return org.springframework.web.util.HtmlUtils.htmlEscape(str);\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\hibernate\\\\StringTruncateFilter.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["StringTruncateFilter"], "AN": ["TRUNCATE_LENGTH"], "SCS_VariableDeclarator": ["TRUNCATE_LENGTH", "str"], "MN": ["filterDown"], "PN": ["ob"], "SCS_MemberReference": ["ob", "ob", "ob", "ob", "TRUNCATE_LENGTH", "str", "TRUNCATE_LENGTH", "str"], "SCS_VariableDeclaration": ["String"], "SCS_ClassReference": ["str", "str"], "SCS_MethodInvocation": ["length", "substring"], "CO": ["/**\n * UserTypeFilter to truncate all strings going downwards to the database.\n * Truncates to 255 characters.\n * \n * @author Turkka \u00c3\u201eij\u00c3\u00a4l\u00c3\u00a4\n * @see fi.hut.soberit.agilefant.db.hibernate.UserTypeFilter\n */", "// if length more than the limit, truncate"], "CODE": "package fi.hut.soberit.agilefant.db.hibernate;\n\n/**\n * UserTypeFilter to truncate all strings going downwards to the database.\n * Truncates to 255 characters.\n * \n * @author Turkka \u00c3\u201eij\u00c3\u00a4l\u00c3\u00a4\n * @see fi.hut.soberit.agilefant.db.hibernate.UserTypeFilter\n */\npublic class StringTruncateFilter extends UserTypeFilter {\n\n    private static final int TRUNCATE_LENGTH = 255;\n\n    protected Object filterDown(Object ob) {\n        if (ob == null)\n            return null;\n        if (!(ob instanceof String))\n            return ob;\n\n        String str = (String) ob;\n\n        // if length more than the limit, truncate\n        if (str.length() > TRUNCATE_LENGTH)\n            str = str.substring(0, TRUNCATE_LENGTH);\n\n        return str;\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\hibernate\\\\TaskDAOHibernate.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["TaskDAOHibernate"], "SCS_ConstructorDeclaration": ["TaskDAOHibernate"], "SCS_ClassReference": ["Task", null, "Task", "crit", null, "Restrictions", "user", "crit", "iteration", "IterationDAOHelpers", "crit", "Restrictions", "crit", "Restrictions", "crit", "", null, "Task", "crit", null, "Restrictions", "user", "crit", null, "iteration", "IterationDAOHelpers", "crit", "Restrictions", "crit", "", "taskIds", "Collections", null, "Task", "crit", "Restrictions", "crit", "Projections", "sums", "Projections", "sums", "Projections", "crit", "", "result", null, "Task", "crit", "Restrictions", "crit", "story", null, "Restrictions", "user", "IterationDAOHelpers", "story", "crit", "", null, "Task", "crit", null, "Restrictions", "user", "crit", "iteration", "IterationDAOHelpers", "crit", "Restrictions", "crit", "Restrictions", "crit", "", "tasks", null, "Task", "crit", null, "Restrictions", "user", "crit", "Restrictions", "crit", null, "storyIteration", "IterationDAOHelpers", "crit", "", "tasks", null, "Task", "crit", null, "Restrictions", "user", "crit", "iteration", "IterationDAOHelpers", "crit", "Restrictions", "crit", "Restrictions", "crit", "", "tasks", null, "Task", "crit", null, "Restrictions", "user", "crit", "Restrictions", "crit", "storyIteration", "storyIteration", "IterationDAOHelpers", "crit", "", "tasks", null, "Task", "crit", null, "Restrictions", "user", "crit", "Restrictions", "crit", "Restrictions", "crit", "storyBacklog", "Restrictions", "storyBacklog", "storyBacklog", "IterationDAOHelpers", "crit", "", "tasks", null, "Iteration", "iteration", null, null, "Restrictions", "user", "iteration", "stories", "Restrictions", "IterationDAOHelpers", "stories", "tasks", "Restrictions", "tasks", "Restrictions", "Projections", "effortLeftSum", "Projections", "effortLeftSum", "Projections", "effortLeftSum", "Projections", "iteration", "", "result", null, "Iteration", "iteration", null, null, "Restrictions", "user", "IterationDAOHelpers", "iteration", "tasks", "Restrictions", "tasks", "Restrictions", "Projections", "effortLeftSum", "Projections", "effortLeftSum", "Projections", "effortLeftSum", "Projections", "iteration", "", "result", null, "Task", "", "task", "Restrictions", "", null, "Task", "", "task", "Restrictions", "task", "Order", "task", "", null, "Task", "", "task", "Order", "task", "", "crit", "Restrictions", "iteration", "crit", "Restrictions", "story", null, "Task", "Restrictions", "Restrictions", "crit", "Restrictions", "crit", "Order", "crit", "", null, "Task", "crit", "Restrictions", "crit", "Order", "crit", ""], "MN": ["getIterationTasksWithEffortLeft", "getStoryTasksWithEffortLeft", "getNumOfResponsiblesByTask", "getStoryAssignedTasksWithEffortLeft", "getAllIterationAndStoryTasks", "getAllTasks", "getUnassignedStoryTasksWithEffortLeft", "getUnassignedIterationTasksWithEffortLeft", "getTasksWithRankBetween", "getNextTaskInRank", "getLastTaskInRank", "addParentRestriction", "searchByName", "searchByID"], "PN": ["user", "interval", "user", "interval", "taskIds", "user", "interval", "user", "interval", "user", "interval", "user", "interval", "user", "interval", "lower", "upper", "parentIteration", "parentStory", "rank", "iteration", "story", "story", "iteration", "crit", "iteration", "story", "name", "id"], "SCS_VariableDeclaration": ["Criteria", "Criteria", "Criteria", "Criteria", "Criteria", "ProjectionList", "List", "Map", "Object", "Criteria", "Criteria", "List", "Criteria", "Criteria", "List", "Criteria", "List", "Criteria", "Criteria", "List", "Criteria", "Criteria", "Criteria", "Criteria", "Criteria", "ProjectionList", "List", "List", "Object", "UnassignedLoadTO", "Criteria", "Criteria", "ProjectionList", "List", "List", "Object", "long", "int", "int", "UnassignedLoadTO", "Criteria", "Criteria", "Criteria", "Criteria", "Criterion", "Criterion", "Criteria"], "SCS_VariableDeclarator": ["crit", "iteration", "crit", "iteration", "crit", "sums", "rawData", "result", "row", "crit", "story", "tasks", "crit", "iteration", "dummy", "storyIteration", "tasks", "crit", "iteration", "dummy", "storyIteration", "storyBacklog", "iteration", "stories", "tasks", "effortLeftSum", "data", "result", "rowData", "row", "iteration", "tasks", "effortLeftSum", "data", "result", "rowData", "effortLeft", "iterationId", "availability", "row", "task", "task", "task", "crit", "nameCrit", "descriptionCrit", "crit"], "SCS_MethodInvocation": ["createCriteria", "createCriteria", "add", "idEq", "getId", "createCriteria", "setFetchMode", "addIterationIntervalStartLimit", "add", "isNull", "add", "gt", "setFetchMode", "asList", "createCriteria", "createCriteria", "add", "idEq", "getId", "createCriteria", "createCriteria", "setFetchMode", "addIterationIntervalStartLimit", "add", "gt", "setFetchMode", "asList", "size", "emptyMap", "createCriteria", "add", "in", "createAlias", "projectionList", "add", "groupProperty", "add", "count", "setProjection", "asList", "put", "createCriteria", "add", "isEmpty", "createCriteria", "createCriteria", "add", "idEq", "getId", "addIterationIntervalStartLimit", "createCriteria", "setFetchMode", "asList", "createCriteria", "createCriteria", "add", "idEq", "getId", "createCriteria", "setFetchMode", "addIterationIntervalStartLimit", "add", "isNull", "add", "ne", "setFetchMode", "asList", "addAll", "createCriteria", "createCriteria", "add", "idEq", "getId", "add", "ne", "createCriteria", "createCriteria", "setFetchMode", "addIterationIntervalStartLimit", "setFetchMode", "asList", "addAll", "createCriteria", "createCriteria", "add", "idEq", "getId", "createCriteria", "setFetchMode", "addIterationIntervalStartLimit", "add", "isNull", "add", "ne", "setFetchMode", "asList", "addAll", "createCriteria", "createCriteria", "add", "idEq", "getId", "add", "ne", "createCriteria", "setFetchMode", "createCriteria", "addIterationIntervalStartLimit", "setFetchMode", "asList", "addAll", "createCriteria", "createCriteria", "add", "idEq", "getId", "add", "ne", "add", "isNull", "createCriteria", "add", "isNull", "setFetchMode", "createCriteria", "addBacklogIntervalStartLimit", "setFetchMode", "asList", "addAll", "createCriteria", "createCriteria", "createCriteria", "add", "idEq", "getId", "createCriteria", "add", "isEmpty", "addIterationIntervalStartLimit", "createCriteria", "add", "isEmpty", "add", "isNotNull", "projectionList", "add", "sum", "add", "groupProperty", "add", "property", "setProjection", "asList", "add", "createCriteria", "createCriteria", "createCriteria", "add", "idEq", "getId", "addIterationIntervalStartLimit", "createCriteria", "add", "isEmpty", "add", "isNull", "projectionList", "add", "sum", "add", "groupProperty", "add", "property", "setProjection", "asList", "add", "createCriteria", "addParentRestriction", "add", "between", "asList", "createCriteria", "addParentRestriction", "add", "gt", "addOrder", "asc", "setMaxResults", "uniqueResult", "createCriteria", "addParentRestriction", "addOrder", "desc", "setMaxResults", "uniqueResult", "add", "eq", "getId", "add", "eq", "getId", "createCriteria", "like", "like", "add", "or", "addOrder", "asc", "setMaxResults", "asList", "createCriteria", "add", "eq", "addOrder", "asc", "setMaxResults", "asList"], "SCS_MemberReference": ["SELECT", "iteration", "interval", "ZERO", "SELECT", "crit", "SELECT", "iteration", "interval", "ZERO", "SELECT", "crit", "taskIds", "taskIds", "sums", "crit", "rawData", "row", "row", "result", "interval", "SELECT", "crit", "SELECT", "iteration", "interval", "DONE", "SELECT", "crit", "dummy", "crit", "DONE", "SELECT", "storyIteration", "interval", "SELECT", "dummy", "crit", "dummy", "tasks", "SELECT", "iteration", "interval", "DONE", "SELECT", "crit", "dummy", "crit", "DONE", "SELECT", "storyIteration", "storyIteration", "interval", "SELECT", "dummy", "crit", "dummy", "crit", "DONE", "SELECT", "storyBacklog", "storyBacklog", "interval", "SELECT", "dummy", "crit", "dummy", "tasks", "iteration", "interval", "effortLeftSum", "iteration", "data", "rowData", "rowData", "rowData", "row", "result", "iteration", "interval", "effortLeftSum", "iteration", "data", "rowData", "rowData", "rowData", "effortLeft", "rowData", "effortLeft", "iterationId", "availability", "row", "result", "task", "parentIteration", "parentStory", "lower", "upper", "task", "task", "iteration", "story", "rank", "task", "task", "iteration", "story", "task", "iteration", "story", "name", "ANYWHERE", "name", "ANYWHERE", "nameCrit", "descriptionCrit", "MAX_RESULTS_PER_TYPE", "crit", "id", "MAX_RESULTS_PER_TYPE", "crit"], "CO": ["/** {@inheritDoc} */", "/** {@inheritDoc} */", "/** {@inheritDoc} */", "/** {@inheritDoc} */"], "CODE": "package fi.hut.soberit.agilefant.db.hibernate;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\nimport org.hibernate.Criteria;\nimport org.hibernate.FetchMode;\nimport org.hibernate.Query;\nimport org.hibernate.criterion.Criterion;\nimport org.hibernate.criterion.MatchMode;\nimport org.hibernate.criterion.Order;\nimport org.hibernate.criterion.ProjectionList;\nimport org.hibernate.criterion.Projections;\nimport org.hibernate.criterion.Restrictions;\nimport org.joda.time.Interval;\nimport org.springframework.stereotype.Repository;\n\nimport fi.hut.soberit.agilefant.business.SearchBusiness;\nimport fi.hut.soberit.agilefant.db.TaskDAO;\nimport fi.hut.soberit.agilefant.model.ExactEstimate;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.StoryState;\nimport fi.hut.soberit.agilefant.model.Task;\nimport fi.hut.soberit.agilefant.model.TaskState;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.transfer.UnassignedLoadTO;\n\n@Repository(\"taskDAO\")\npublic class TaskDAOHibernate extends GenericDAOHibernate<Task> implements\n        TaskDAO {\n\n    public TaskDAOHibernate() {\n        super(Task.class);\n    }\n\n    public List<Task> getIterationTasksWithEffortLeft(User user,\n            Interval interval) {\n        Criteria crit = this.createCriteria(Task.class);\n        crit.createCriteria(\"responsibles\")\n                .add(Restrictions.idEq(user.getId()));\n        Criteria iteration = crit.createCriteria(\"iteration\");\n        iteration.setFetchMode(\"parent\", FetchMode.SELECT);\n        IterationDAOHelpers.addIterationIntervalStartLimit(iteration, interval);\n        crit.add(Restrictions.isNull(\"story\"));\n        crit.add(Restrictions.gt(\"effortLeft\", ExactEstimate.ZERO));\n        crit.setFetchMode(\"creator\", FetchMode.SELECT);\n        return asList(crit);\n    }\n\n    public List<Task> getStoryTasksWithEffortLeft(User user, Interval interval) {\n        Criteria crit = this.createCriteria(Task.class);\n        crit.createCriteria(\"responsibles\")\n                .add(Restrictions.idEq(user.getId()));\n       \n        Criteria iteration = crit.createCriteria(\"story\").createCriteria(\"iteration\");\n        iteration.setFetchMode(\"parent\",FetchMode.SELECT);\n        IterationDAOHelpers.addIterationIntervalStartLimit(iteration, interval);\n        crit.add(Restrictions.gt(\"effortLeft\", ExactEstimate.ZERO));\n        crit.setFetchMode(\"creator\", FetchMode.SELECT);\n        return asList(crit);\n    }\n\n    public Map<Integer, Integer> getNumOfResponsiblesByTask(Set<Integer> taskIds) {\n        if(taskIds == null || taskIds.size() == 0) {\n            return Collections.emptyMap();\n        }\n        Criteria crit = this.createCriteria(Task.class);\n        crit.add(Restrictions.in(\"id\", taskIds));\n        crit.createAlias(\"responsibles\", \"responsible\");\n        ProjectionList sums = Projections.projectionList();\n        sums.add(Projections.groupProperty(\"id\"));\n        sums.add(Projections.count(\"responsible.id\"));\n        \n        crit.setProjection(sums);\n        List<Object[]> rawData = asList(crit);\n        \n        Map<Integer, Integer> result = new HashMap<Integer, Integer>();\n        for(Object[] row : rawData) {\n            result.put((Integer)row[0], ((Long)row[1]).intValue());\n        }\n        return result;\n    }\n\n    public List<Task> getStoryAssignedTasksWithEffortLeft(User user,\n            Interval interval) {\n        Criteria crit = this.createCriteria(Task.class);\n        crit.add(Restrictions.isEmpty(\"responsibles\"));\n        Criteria story = crit.createCriteria(\"story\");\n        story.createCriteria(\"responsibles\").add(Restrictions.idEq(user.getId()));\n        IterationDAOHelpers.addIterationIntervalStartLimit(story.createCriteria(\"iteration\"), interval);\n        crit.setFetchMode(\"creator\", FetchMode.SELECT);\n        return asList(crit);\n    }\n\n    public List<Task> getAllIterationAndStoryTasks(User user, Interval interval) {\n        List<Task> tasks = new ArrayList<Task>();\n        \n        Criteria crit = this.createCriteria(Task.class);\n        crit.createCriteria(\"responsibles\")\n            .add(Restrictions.idEq(user.getId()));\n        \n        Criteria iteration = crit.createCriteria(\"iteration\");\n        iteration.setFetchMode(\"parent\", FetchMode.SELECT);\n        IterationDAOHelpers.addIterationIntervalStartLimit(iteration, interval);\n        crit.add(Restrictions.isNull(\"story\"));\n        crit.add(Restrictions.ne(\"state\", TaskState.DONE));\n        crit.setFetchMode(\"creator\", FetchMode.SELECT);\n\n        List<Task> dummy = asList(crit); \n        tasks.addAll(dummy);\n        \n        crit = this.createCriteria(Task.class);\n        crit.createCriteria(\"responsibles\")\n            .add(Restrictions.idEq(user.getId()));\n        crit.add(Restrictions.ne(\"state\", TaskState.DONE));\n\n        Criteria storyIteration = crit.createCriteria(\"story\").createCriteria(\"iteration\");\n        storyIteration.setFetchMode(\"parent\",FetchMode.SELECT);\n        IterationDAOHelpers.addIterationIntervalStartLimit(storyIteration, interval);\n        crit.setFetchMode(\"creator\", FetchMode.SELECT);\n        \n        dummy = asList(crit);\n        tasks.addAll(dummy);\n\n        return tasks;\n    }\n    \n    public List<Task> getAllTasks(User user, Interval interval) {\n        List<Task> tasks = new ArrayList<Task>();\n        \n        Criteria crit = this.createCriteria(Task.class);\n        crit.createCriteria(\"responsibles\")\n            .add(Restrictions.idEq(user.getId()));\n        \n        Criteria iteration = crit.createCriteria(\"iteration\");\n        iteration.setFetchMode(\"parent\", FetchMode.SELECT);\n        IterationDAOHelpers.addIterationIntervalStartLimit(iteration, interval);\n        crit.add(Restrictions.isNull(\"story\"));\n        crit.add(Restrictions.ne(\"state\", TaskState.DONE));\n        crit.setFetchMode(\"creator\", FetchMode.SELECT);\n\n        List<Task> dummy = asList(crit); \n        tasks.addAll(dummy);\n        \n        crit = this.createCriteria(Task.class);\n        crit.createCriteria(\"responsibles\")\n            .add(Restrictions.idEq(user.getId()));\n        crit.add(Restrictions.ne(\"state\", TaskState.DONE));\n\n        Criteria storyIteration = crit.createCriteria(\"story\");\n        storyIteration.setFetchMode(\"parent\",FetchMode.SELECT);\n        storyIteration = storyIteration.createCriteria(\"iteration\");\n        IterationDAOHelpers.addIterationIntervalStartLimit(storyIteration, interval);\n        crit.setFetchMode(\"creator\", FetchMode.SELECT);\n        \n        dummy = asList(crit);\n        tasks.addAll(dummy);\n        \n        crit = this.createCriteria(Task.class);\n        crit.createCriteria(\"responsibles\")\n            .add(Restrictions.idEq(user.getId()));\n        crit.add(Restrictions.ne(\"state\", TaskState.DONE));\n        crit.add(Restrictions.isNull(\"iteration\"));\n\n        Criteria storyBacklog = crit.createCriteria(\"story\");\n        storyBacklog.add(Restrictions.isNull(\"iteration\"));\n        storyBacklog.setFetchMode(\"parent\",FetchMode.SELECT);\n        storyBacklog = storyBacklog.createCriteria(\"backlog\");\n        IterationDAOHelpers.addBacklogIntervalStartLimit(storyBacklog, interval);\n        crit.setFetchMode(\"creator\", FetchMode.SELECT);\n        \n        dummy = asList(crit);\n        tasks.addAll(dummy);\n\n        return tasks;\n    }\n\n    public List<UnassignedLoadTO> getUnassignedStoryTasksWithEffortLeft(User user,\n            Interval interval) {\n        \n        Criteria iteration = this.createCriteria(Iteration.class,\"iter\");\n        iteration.createCriteria(\"assignments\",\"assigments\").createCriteria(\"user\").add(Restrictions.idEq(user.getId()));     \n        \n        Criteria stories = iteration.createCriteria(\"assignedStories\");\n        stories.add(Restrictions.isEmpty(\"responsibles\"));\n                \n        IterationDAOHelpers.addIterationIntervalStartLimit(iteration, interval);\n        \n        Criteria tasks = stories.createCriteria(\"tasks\",\"task\");\n        tasks.add(Restrictions.isEmpty(\"responsibles\"));\n        tasks.add(Restrictions.isNotNull(\"effortLeft\"));\n        \n        ProjectionList effortLeftSum = Projections.projectionList();\n        effortLeftSum.add(Projections.sum(\"task.effortLeft\"));\n        effortLeftSum.add(Projections.groupProperty(\"iter.id\"));\n        effortLeftSum.add(Projections.property(\"assigments.availability\"));\n        \n        iteration.setProjection(effortLeftSum);\n        \n        List<Object[]> data = asList(iteration);\n        List<UnassignedLoadTO> result = new ArrayList<UnassignedLoadTO>();\n        for(Object[] rowData : data) {             \n            UnassignedLoadTO row = new UnassignedLoadTO(new ExactEstimate((Long)rowData[0]),(Integer)rowData[1], ((Integer)rowData[2]).intValue());\n            \n            result.add(row);\n        }\n        \n        return result;\n    }\n\n    public List<UnassignedLoadTO> getUnassignedIterationTasksWithEffortLeft(User user,\n            Interval interval) {\n        Criteria iteration = this.createCriteria(Iteration.class,\"iter\");\n        iteration.createCriteria(\"assignments\",\"assigments\").createCriteria(\"user\").add(Restrictions.idEq(user.getId()));     \n                \n        IterationDAOHelpers.addIterationIntervalStartLimit(iteration, interval);\n        \n        Criteria tasks = iteration.createCriteria(\"tasks\",\"task\");\n        tasks.add(Restrictions.isEmpty(\"responsibles\"));\n        tasks.add(Restrictions.isNull(\"story\"));\n        \n        ProjectionList effortLeftSum = Projections.projectionList();\n        effortLeftSum.add(Projections.sum(\"task.effortLeft\"));\n        effortLeftSum.add(Projections.groupProperty(\"iter.id\"));\n        effortLeftSum.add(Projections.property(\"assigments.availability\"));\n        \n        iteration.setProjection(effortLeftSum);\n        \n        List<Object[]> data = asList(iteration);\n        List<UnassignedLoadTO> result = new ArrayList<UnassignedLoadTO>();\n        for(Object[] rowData : data) {\n            long effortLeft = 0l;\n            int iterationId = (Integer)rowData[1];\n            int availability = (Integer)rowData[2];\n            if(rowData[0] != null) {\n                effortLeft = (Long)rowData[0];\n            }\n            UnassignedLoadTO row = new UnassignedLoadTO(new ExactEstimate(effortLeft), iterationId, availability);\n            result.add(row);\n        }\n        \n        return result;\n    }\n    \n    /** {@inheritDoc} */\n    public Collection<Task> getTasksWithRankBetween(int lower, int upper,\n            Iteration parentIteration, Story parentStory) {\n        Criteria task = this.createCriteria(Task.class);\n        addParentRestriction(task, parentIteration, parentStory);\n        task.add(Restrictions.between(\"rank\", lower, upper));\n        return asList(task);\n    }\n    \n    /** {@inheritDoc} */\n    public Task getNextTaskInRank(int rank, Iteration iteration, Story story) {\n        Criteria task = this.createCriteria(Task.class);\n        addParentRestriction(task, iteration, story);\n        task.add(Restrictions.gt(\"rank\", rank));\n        task.addOrder(Order.asc(\"rank\"));\n        task.setMaxResults(1);\n        return uniqueResult(task);\n    }\n    \n    \n    /** {@inheritDoc} */\n    public Task getLastTaskInRank(Story story, Iteration iteration) {\n        Criteria task = this.createCriteria(Task.class);\n        \n        addParentRestriction(task, iteration, story);\n        \n        task.addOrder(Order.desc(\"rank\"));\n        task.setMaxResults(1);\n        return uniqueResult(task);\n    }\n    \n    private void addParentRestriction(Criteria crit, Iteration iteration, Story story) {\n        if (iteration != null) {\n            crit.add(Restrictions.eq(\"iteration.id\", iteration.getId()));\n        }\n        else if (story != null) {\n            crit.add(Restrictions.eq(\"story.id\", story.getId()));\n        }\n    }\n    \n    /** {@inheritDoc} */\n    public List<Task> searchByName(String name)\n    {\n        Criteria crit = this.createCriteria(Task.class);\n        Criterion nameCrit = Restrictions.like(\"name\", name, MatchMode.ANYWHERE);\n        Criterion descriptionCrit = Restrictions.like(\"description\", name, MatchMode.ANYWHERE);\n        crit.add(Restrictions.or(nameCrit, descriptionCrit));\n        crit.addOrder(Order.asc(\"name\"));\n        crit.setMaxResults(SearchBusiness.MAX_RESULTS_PER_TYPE);\n        return asList(crit);\n    }\n    \n    public List<Task> searchByID(Integer id) {\n        Criteria crit = this.createCriteria(Task.class);\n        crit.add(Restrictions.eq(\"id\", id));\n        crit.addOrder(Order.asc(\"name\"));\n        crit.setMaxResults(SearchBusiness.MAX_RESULTS_PER_TYPE);\n        return asList(crit);\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\hibernate\\\\TaskHourEntryDAOHibernate.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["TaskHourEntryDAOHibernate"], "SCS_ConstructorDeclaration": ["TaskHourEntryDAOHibernate"], "SCS_ClassReference": ["TaskHourEntry", null, null, "criteria", "Restrictions", null], "MN": ["retrieveByTask"], "PN": ["target"], "SCS_VariableDeclaration": ["Criteria"], "SCS_VariableDeclarator": ["criteria"], "SCS_MethodInvocation": ["createCriteria", "getPersistentClass", "add", "eq", "asList"], "SCS_MemberReference": ["target", "criteria"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.db.hibernate;\n\nimport java.util.List;\n\nimport org.hibernate.Criteria;\nimport org.hibernate.criterion.Restrictions;\nimport org.springframework.stereotype.Repository;\n\nimport fi.hut.soberit.agilefant.db.TaskHourEntryDAO;\nimport fi.hut.soberit.agilefant.model.Task;\nimport fi.hut.soberit.agilefant.model.TaskHourEntry;\n\n@Repository(\"taskHourEntryDAO\")\npublic class TaskHourEntryDAOHibernate extends GenericDAOHibernate<TaskHourEntry> implements\n        TaskHourEntryDAO {\n\n    public TaskHourEntryDAOHibernate() {\n        super(TaskHourEntry.class);\n    }\n    \n    public List<TaskHourEntry> retrieveByTask(Task target) {\n    \tCriteria criteria = this.createCriteria(this.getPersistentClass());\n    \tcriteria.add(Restrictions.eq(\"task\", target));\n    \treturn this.asList(criteria);\n    }\n\n}", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\hibernate\\\\TeamDAOHibernate.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["TeamDAOHibernate"], "SCS_ConstructorDeclaration": ["TeamDAOHibernate"], "SCS_ClassReference": ["Team", null, "Team", "crit", "Restrictions", ""], "MN": ["getByTeamName"], "PN": ["teamName"], "SCS_VariableDeclaration": ["Criteria"], "SCS_VariableDeclarator": ["crit"], "SCS_MethodInvocation": ["createCriteria", "add", "eq", "firstResult"], "SCS_MemberReference": ["teamName", "crit"], "CO": ["/** {@inheritDoc} */"], "CODE": "package fi.hut.soberit.agilefant.db.hibernate;\n\nimport org.hibernate.Criteria;\nimport org.hibernate.criterion.Restrictions;\nimport org.springframework.stereotype.Repository;\n\nimport fi.hut.soberit.agilefant.db.TeamDAO;\nimport fi.hut.soberit.agilefant.model.Team;\n\n@Repository(\"teamDAO\")\npublic class TeamDAOHibernate extends GenericDAOHibernate<Team> implements\n        TeamDAO {\n\n    public TeamDAOHibernate() {\n        super(Team.class);\n    }\n    \n    /** {@inheritDoc} */\n    public Team getByTeamName(String teamName) {\n        Criteria crit = this.createCriteria(Team.class);\n        crit.add(Restrictions.eq(\"name\", teamName));\n        return firstResult(crit);\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\hibernate\\\\TextUserType.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["TextUserType"], "AN": ["SQL_TYPES"], "SCS_VariableDeclarator": ["SQL_TYPES", "str", "t", "s", "str"], "SCS_MemberReference": ["CLOB", "SQL_TYPES", "value", "value", "str", "x", "y", "x", "y", "y", "original", "t", "names", "s", "value", "index", "LONGVARCHAR", "value", "index", "str", "value", "cached"], "MN": ["sqlTypes", "returnedClass", "isMutable", "deepCopy", "equals", "replace", "nullSafeGet", "nullSafeSet", "hashCode", "disassemble", "assemble"], "PN": ["value", "x", "y", "original", "target", "owner", "resultSet", "names", "session", "owner", "statement", "value", "index", "session", "x", "value", "cached", "owner"], "SCS_ClassReference": ["String", "x", "resultSet", "resultSet", "statement", "statement", "x"], "SCS_VariableDeclaration": ["String", "String", "String", "String"], "SCS_MethodInvocation": ["equals", "getString", "wasNull", "setNull", "setString", "hashCode"], "CO": ["/**\n * UserType, which saves strings as TEXTs.\n * <p>\n * Normally you wouldn't write UserTypes that do nothing special, you would use\n * Hibernate built-in types instead. This is for the filtering functionality\n * however: it enables a UserType to be at the bottom of the filtering\n * hierarchy.\n * \n * @author Turkka \u00c3\u201eij\u00c3\u00a4l\u00c3\u00a4\n * @see fi.hut.soberit.agilefant.db.hibernate.VarcharUserType\n * @see fi.hut.soberit.agilefant.db.hibernate.UserTypeFilter\n */"], "CODE": "package fi.hut.soberit.agilefant.db.hibernate;\n\nimport java.io.Serializable;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Types;\n\nimport org.hibernate.HibernateException;\nimport org.hibernate.engine.spi.SessionImplementor;\nimport org.hibernate.usertype.UserType;\n\n/**\n * UserType, which saves strings as TEXTs.\n * <p>\n * Normally you wouldn't write UserTypes that do nothing special, you would use\n * Hibernate built-in types instead. This is for the filtering functionality\n * however: it enables a UserType to be at the bottom of the filtering\n * hierarchy.\n * \n * @author Turkka \u00c3\u201eij\u00c3\u00a4l\u00c3\u00a4\n * @see fi.hut.soberit.agilefant.db.hibernate.VarcharUserType\n * @see fi.hut.soberit.agilefant.db.hibernate.UserTypeFilter\n */\npublic class TextUserType implements UserType {\n\n    private static final int[] SQL_TYPES = { Types.CLOB };\n\n    @Override\n    public int[] sqlTypes() {\n        return SQL_TYPES;\n    }\n\n    @Override\n    public Class<?> returnedClass() {\n        return String.class;\n    }\n\n    @Override\n    public boolean isMutable() {\n        return false;\n    }\n\n    @Override\n    public Object deepCopy(Object value) {\n        if (value == null)\n            return null;\n        String str = (String) value;\n        return new String(str);\n    }\n\n    @Override\n    public boolean equals(Object x, Object y) {\n        if (x == y)\n            return true;\n        if (x == null || y == null)\n            return false;\n        return x.equals(y);\n    }\n\n    @Override\n    public Object replace(Object original, Object target, Object owner) throws HibernateException {\n        String t = (String) original;\n        return new String(t);\n    }\n\n    @Override\n    public Object nullSafeGet(ResultSet resultSet, String[] names, SessionImplementor session, Object owner) throws HibernateException, SQLException {\n        String s = resultSet.getString(names[0]);\n\n        if (resultSet.wasNull())\n            return null;\n\n        return new String(s);\n    }\n\n    @Override\n    public void nullSafeSet(PreparedStatement statement, Object value, int index, SessionImplementor session) throws HibernateException, SQLException {\n        if (value == null) {\n            statement.setNull(index, Types.LONGVARCHAR);\n            return;\n        }\n\n        String str = (String) value;\n\n        statement.setString(index, str);\n    }\n\n    @Override\n    public int hashCode(Object x) throws HibernateException {\n        return x.hashCode();\n    }\n\n    @Override\n    public Serializable disassemble(Object value) throws HibernateException {\n        return (Serializable) value;\n    }\n\n    @Override\n    public Object assemble(Serializable cached, Object owner) throws HibernateException {\n        return cached;\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\hibernate\\\\TruncatedStringUserType.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["TruncatedStringUserType"], "AN": ["SQL_TYPES", "TRUNCATE_LENGTH"], "SCS_VariableDeclarator": ["SQL_TYPES", "TRUNCATE_LENGTH", "str", "t", "s", "str"], "SCS_MemberReference": ["VARCHAR", "SQL_TYPES", "value", "value", "str", "x", "y", "x", "y", "y", "original", "t", "names", "s", "value", "index", "VARCHAR", "value", "TRUNCATE_LENGTH", "str", "TRUNCATE_LENGTH", "index", "str", "value", "cached"], "MN": ["sqlTypes", "returnedClass", "isMutable", "deepCopy", "equals", "replace", "nullSafeGet", "nullSafeSet", "hashCode", "disassemble", "assemble"], "PN": ["value", "x", "y", "original", "target", "owner", "resultSet", "names", "session", "owner", "statement", "value", "index", "session", "x", "value", "cached", "owner"], "SCS_ClassReference": ["String", "x", "resultSet", "resultSet", "statement", "str", "str", "statement", "x"], "SCS_VariableDeclaration": ["String", "String", "String", "String"], "SCS_MethodInvocation": ["equals", "getString", "wasNull", "setNull", "length", "substring", "setString", "hashCode"], "CO": ["/**\n * Truncated string - user type.\n * <p>\n * Behaves like a normal string, other than it truncates everything going in the\n * database to 255 characters. Uses the VARCHAR - type.\n * <p>\n * This class has been replaced by UserTypeFilters.\n * \n * @see fi.hut.soberit.agilefant.db.hibernate.UserTypeFilter\n * @see fi.hut.soberit.agilefant.db.hibernate.StringTruncateFilter\n * @author Turkka \u00c3\u201eij\u00c3\u00a4l\u00c3\u00a4\n */", "// could this be some sort of a parameter?", "/**\n     * Get the sql types to use to save our truncated string object.\n     */", "/**\n     * Class of the type handled, the hibernate implementation uses this at\n     * least for nullSafeGet and set.\n     */", "/**\n     * Is mutable.\n     */", "/**\n     * Called during merge, should replace existing value (target) with a new\n     * value (original).\n     */", "/**\n     * Construct an object of our type from JDBC resultSet. This is the db\n     * \"deserialization\" method.\n     */", "/**\n     * Insert an object of our type into JDBC statement. This is the db\n     * \"serialization\" method.\n     */", "/**\n     * Make a cacheable serialization presentation of our class.\n     */", "/**\n     * Create an object from a cached representation.\n     */"], "CODE": "package fi.hut.soberit.agilefant.db.hibernate;\n\nimport java.io.Serializable;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Types;\n\nimport org.hibernate.HibernateException;\nimport org.hibernate.engine.spi.SessionImplementor;\nimport org.hibernate.usertype.UserType;\n\n/**\n * Truncated string - user type.\n * <p>\n * Behaves like a normal string, other than it truncates everything going in the\n * database to 255 characters. Uses the VARCHAR - type.\n * <p>\n * This class has been replaced by UserTypeFilters.\n * \n * @see fi.hut.soberit.agilefant.db.hibernate.UserTypeFilter\n * @see fi.hut.soberit.agilefant.db.hibernate.StringTruncateFilter\n * @author Turkka \u00c3\u201eij\u00c3\u00a4l\u00c3\u00a4\n */\npublic class TruncatedStringUserType implements UserType {\n\n    private static final int[] SQL_TYPES = { Types.VARCHAR };\n\n    // could this be some sort of a parameter?\n    private static final int TRUNCATE_LENGTH = 255;\n\n    /**\n     * Get the sql types to use to save our truncated string object.\n     */\n    @Override\n    public int[] sqlTypes() {\n        return SQL_TYPES;\n    }\n\n    /**\n     * Class of the type handled, the hibernate implementation uses this at\n     * least for nullSafeGet and set.\n     */\n    @Override\n    public Class<?> returnedClass() {\n        return String.class;\n    }\n\n    /**\n     * Is mutable.\n     */\n    @Override\n    public boolean isMutable() {\n        return true;\n    }\n\n    @Override\n    public Object deepCopy(Object value) {\n        if (value == null)\n            return null;\n        String str = (String) value;\n        return new String(str);\n    }\n\n    @Override\n    public boolean equals(Object x, Object y) {\n        if (x == y)\n            return true;\n        if (x == null || y == null)\n            return false;\n        return x.equals(y);\n    }\n\n    /**\n     * Called during merge, should replace existing value (target) with a new\n     * value (original).\n     */\n    @Override\n    public Object replace(Object original, Object target, Object owner) throws HibernateException {\n        String t = (String) original;\n        return new String(t);\n    }\n\n    /**\n     * Construct an object of our type from JDBC resultSet. This is the db\n     * \"deserialization\" method.\n     */\n    @Override\n    public Object nullSafeGet(ResultSet resultSet, String[] names, SessionImplementor session, Object owner) throws HibernateException, SQLException {\n        String s = resultSet.getString(names[0]);\n\n        if (resultSet.wasNull())\n            return null;\n\n        return new String(s);\n\n    }\n\n    /**\n     * Insert an object of our type into JDBC statement. This is the db\n     * \"serialization\" method.\n     */\n    @Override\n    public void nullSafeSet(PreparedStatement statement, Object value, int index, SessionImplementor session) throws HibernateException, SQLException {\n        if (value == null) {\n            statement.setNull(index, Types.VARCHAR);\n            return;\n        }\n\n        String str = (String) value;\n\n        if (str.length() > TRUNCATE_LENGTH)\n            str = str.substring(0, TRUNCATE_LENGTH);\n\n        statement.setString(index, str);\n    }\n\n    @Override\n    public int hashCode(Object x) throws HibernateException {\n        return x.hashCode();\n    }\n\n    /**\n     * Make a cacheable serialization presentation of our class.\n     */\n    @Override\n    public Serializable disassemble(Object value) throws HibernateException {\n        return (Serializable) value;\n    }\n\n    /**\n     * Create an object from a cached representation.\n     */\n    @Override\n    public Object assemble(Serializable cached, Object owner) throws HibernateException {\n        return cached;\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\hibernate\\\\UserDAOHibernate.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["UserDAOHibernate"], "SCS_ConstructorDeclaration": ["UserDAOHibernate"], "SCS_ClassReference": ["User", null, "User", "crit", "Restrictions", "", null, "User", "crit", "Restrictions", null, "", null, "User", "crit", "Restrictions", "", null, "User", "crit", "Restrictions", "Restrictions", "Restrictions", ""], "MN": ["getByLoginName", "getByLoginNameIgnoreCase", "listUsersByEnabledStatus", "searchByName"], "PN": ["loginName", "loginName", "enabled", "searchTerm"], "SCS_VariableDeclaration": ["Criteria", "Criteria", "Criteria", "Criteria"], "SCS_VariableDeclarator": ["crit", "crit", "crit", "crit"], "SCS_MethodInvocation": ["createCriteria", "add", "eq", "firstResult", "createCriteria", "add", "eq", "ignoreCase", "firstResult", "createCriteria", "add", "eq", "asList", "createCriteria", "add", "or", "like", "like", "asList"], "SCS_MemberReference": ["loginName", "crit", "loginName", "crit", "enabled", "crit", "searchTerm", "ANYWHERE", "searchTerm", "ANYWHERE", "crit"], "CO": ["/**\n * Hibernate implementation of UserDAO interface using GenericDAOHibernate.\n */", "/** {@inheritDoc} */", "/** {@inheritDoc} */", "/** {@inheritDoc} */"], "CODE": "package fi.hut.soberit.agilefant.db.hibernate;\n\nimport java.util.List;\n\nimport org.hibernate.Criteria;\nimport org.hibernate.criterion.MatchMode;\nimport org.hibernate.criterion.Restrictions;\nimport org.springframework.stereotype.Repository;\n\nimport fi.hut.soberit.agilefant.db.UserDAO;\nimport fi.hut.soberit.agilefant.model.User;\n\n/**\n * Hibernate implementation of UserDAO interface using GenericDAOHibernate.\n */\n@Repository(\"userDAO\")\npublic class UserDAOHibernate extends GenericDAOHibernate<User> implements\n        UserDAO {\n\n    public UserDAOHibernate() {\n        super(User.class);\n    }\n\n    /** {@inheritDoc} */\n    public User getByLoginName(String loginName) {\n        Criteria crit = this.createCriteria(User.class);\n        crit.add(Restrictions.eq(\"loginName\", loginName));\n        return firstResult(crit);\n    }\n\n    /** {@inheritDoc} */\n    public User getByLoginNameIgnoreCase(String loginName) {\n        Criteria crit = this.createCriteria(User.class);\n        crit.add(Restrictions.eq(\"loginName\", loginName).ignoreCase());\n        return firstResult(crit);\n    }\n\n    /** {@inheritDoc} */\n    public List<User> listUsersByEnabledStatus(boolean enabled) {\n        Criteria crit = this.createCriteria(User.class);\n        crit.add(Restrictions.eq(\"enabled\", enabled));\n        return asList(crit);\n    }\n\n    public List<User> searchByName(String searchTerm) {\n        Criteria crit = this.createCriteria(User.class);\n        crit.add(Restrictions.or(Restrictions.like(\"fullName\", searchTerm,\n                MatchMode.ANYWHERE), Restrictions.like(\"initials\", searchTerm,\n                MatchMode.ANYWHERE)));\n        return asList(crit);\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\hibernate\\\\UserTypeFilter.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["UserTypeFilter"], "AN": ["subUserType"], "SCS_VariableDeclarator": ["subUserType", "subTypes", "firstSpace", "currentType", "clazz", "classInstance", "newParameters", "paramUserType", "ob", "ob", "ob", "filteredValue", "ob"], "MN": ["setParameterValues", "filterUp", "filterDown", "sqlTypes", "returnedClass", "isMutable", "deepCopy", "equals", "replace", "nullSafeGet", "nullSafeSet", "hashCode", "disassemble", "assemble"], "PN": ["parameters", "ob", "ob", "value", "x", "y", "original", "target", "owner", "rs", "names", "session", "owner", "statement", "value", "index", "session", "x", "value", "cached", "owner"], "SCS_VariableDeclaration": ["String", "int", "String", "Class", "Object", "Properties", "ParameterizedType", "Object", "Object", "Object", "Object", "Object"], "SCS_ClassReference": ["parameters", "subTypes", "subTypes", "subTypes", "Class", "clazz", "newParameters", "newParameters", "paramUserType", "subUserType", "subUserType", "subUserType", "subUserType", "", "", "subUserType", "", "", "subUserType", "", "", "", "subUserType", "", "", "subUserType", "subUserType", "", "subUserType", "", "subUserType", ""], "SCS_MethodInvocation": ["getProperty", "indexOf", "substring", "substring", "forName", "newInstance", "setProperty", "remove", "setParameterValues", "sqlTypes", "returnedClass", "isMutable", "deepCopy", "filterDown", "filterUp", "equals", "filterDown", "filterDown", "replace", "filterDown", "filterDown", "filterUp", "nullSafeGet", "filterUp", "filterDown", "nullSafeSet", "hashCode", "filterDown", "disassemble", "filterDown", "assemble", "filterUp"], "SCS_MemberReference": ["subTypes", "firstSpace", "currentType", "subTypes", "subTypes", "currentType", "firstSpace", "subTypes", "firstSpace", "currentType", "classInstance", "subUserType", "classInstance", "classInstance", "parameters", "subTypes", "subTypes", "classInstance", "newParameters", "cnfe", "iae", "ie", "ob", "ob", "value", "ob", "x", "y", "original", "target", "owner", "ob", "rs", "names", "session", "owner", "ob", "value", "statement", "filteredValue", "index", "session", "x", "value", "cached", "owner", "ob"], "CO": ["/**\n * This is a filter system built on top of hibernate user types. This enables\n * modifying data incoming/outgoing from/to the database on the fly. It's\n * invisible for the entity bean user.\n * <p>\n * Technically, this is a UserType, which delegates all UserType functionality\n * to some other UserType, but modifying the data passing trough. Subclasses may\n * define the filtering functionality in methods filterDown and filterUp.\n * Chaining the filters is possible.\n * <p>\n * Using the type is as follows:\n * <p>\n * <code>\n * &#064;TypeDef(<br>\n * \t\tname=\"name_of_type\",<br>\n * \t    typeClass = your.filter.class,<br>\n * \t    parameters = { &#064;Parameter(name=\"subtypes\", value=\"next.filter another.filter actual.user.type.used\") }<br>\n * )</code>\n * </p>\n * <p>\n * So, parameter \"subtypes\" is a space separated list of first filters, and\n * lastly the actual user type used to serialize/deserialize the data into the\n * database. This way you can chain UserTypeFilter implementations.\n * <p>\n * With the TypeDef defined, one would apply the filtered type as follows:\n * <p>\n * <code>\n * &#064;Type(type=\"name_of_type\")\n * </code>\n * </p>\n * \n * @author Turkka \u00c3\u201eij\u00c3\u00a4l\u00c3\u00a4\n * @see fi.hut.soberit.agilefant.db.hibernate.StringTruncateFilter\n * @see fi.hut.soberit.agilefant.db.hibernate.StringEscapeFilter\n * @see fi.hut.soberit.agilefant.db.hibernate.TextUserType\n * @see fi.hut.soberit.agilefant.db.hibernate.VarcharUserType\n */", "/**\n     * UserType, to which delegate all actual functionality to.\n     */", "/**\n     * Receives the parameters.\n     */", "// separate the first token from the subtype list", "// find first space", "// if no space", "// there's only one token, this is the type name", "// no more subTypes", "// everything before the space is the type name", "// update subTypes to exclude the read token", "// get a Class instance for the type", "// create an instance of that class", "// if the SubType is parametrized", "// forward our parameters for it, only removing the first token", "// this enables chaining the filters", "// replace subtypes with new type list, with first type removed", "// remove the value totally, if there's no more subtypes", "/**\n     * Subclass implemented method, with modifies the data coming \"up\" in the\n     * UserType hierarchy, ie. from the database.\n     * \n     * @param ob\n     *            value to modify\n     * @return modified value\n     */", "// by default no action", "/**\n     * Subclass implemented method, with modifies the data going \"down\" in the\n     * UserType hierarchy, ie. to the database.\n     * \n     * @param ob\n     *            value to modify\n     * @return modified value\n     */", "// by default no action", "// \"UserType\" methods, which are implemented by delegating everything to", "// subUserType.", "// All data passed down to subUserType is filtered with FilterDown. All data", "// from", "// the subUserType is filtered with filterUp.", "// ///////////"], "CODE": "package fi.hut.soberit.agilefant.db.hibernate;\n\nimport java.io.Serializable;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.Properties;\n\nimport org.hibernate.HibernateException;\nimport org.hibernate.engine.spi.SessionImplementor;\nimport org.hibernate.usertype.ParameterizedType;\nimport org.hibernate.usertype.UserType;\n\n/**\n * This is a filter system built on top of hibernate user types. This enables\n * modifying data incoming/outgoing from/to the database on the fly. It's\n * invisible for the entity bean user.\n * <p>\n * Technically, this is a UserType, which delegates all UserType functionality\n * to some other UserType, but modifying the data passing trough. Subclasses may\n * define the filtering functionality in methods filterDown and filterUp.\n * Chaining the filters is possible.\n * <p>\n * Using the type is as follows:\n * <p>\n * <code>\n * &#064;TypeDef(<br>\n * \t\tname=\"name_of_type\",<br>\n * \t    typeClass = your.filter.class,<br>\n * \t    parameters = { &#064;Parameter(name=\"subtypes\", value=\"next.filter another.filter actual.user.type.used\") }<br>\n * )</code>\n * </p>\n * <p>\n * So, parameter \"subtypes\" is a space separated list of first filters, and\n * lastly the actual user type used to serialize/deserialize the data into the\n * database. This way you can chain UserTypeFilter implementations.\n * <p>\n * With the TypeDef defined, one would apply the filtered type as follows:\n * <p>\n * <code>\n * &#064;Type(type=\"name_of_type\")\n * </code>\n * </p>\n * \n * @author Turkka \u00c3\u201eij\u00c3\u00a4l\u00c3\u00a4\n * @see fi.hut.soberit.agilefant.db.hibernate.StringTruncateFilter\n * @see fi.hut.soberit.agilefant.db.hibernate.StringEscapeFilter\n * @see fi.hut.soberit.agilefant.db.hibernate.TextUserType\n * @see fi.hut.soberit.agilefant.db.hibernate.VarcharUserType\n */\npublic abstract class UserTypeFilter implements UserType, ParameterizedType {\n\n    /**\n     * UserType, to which delegate all actual functionality to.\n     */\n    UserType subUserType;\n\n    /**\n     * Receives the parameters.\n     */\n    @Override\n    public void setParameterValues(Properties parameters) {\n        String subTypes = parameters.getProperty(\"subtypes\");\n\n        if (subTypes == null)\n            throw new HibernateException(\"no subtypes defined for the filter\");\n\n        // separate the first token from the subtype list\n\n        // find first space\n        int firstSpace = subTypes.indexOf(' ');\n\n        String currentType;\n\n        // if no space\n        if (firstSpace == -1) {\n            // there's only one token, this is the type name\n            currentType = new String(subTypes);\n            // no more subTypes\n            subTypes = null;\n        } else {\n            // everything before the space is the type name\n            currentType = subTypes.substring(0, firstSpace);\n            // update subTypes to exclude the read token\n            subTypes = subTypes.substring(firstSpace + 1);\n        }\n\n        try {\n            // get a Class instance for the type\n            Class<?> clazz = Class.forName(currentType);\n\n            // create an instance of that class\n            Object classInstance = clazz.newInstance();\n\n            if (!(classInstance instanceof UserType))\n                throw new HibernateException(\"got a subtype class of invalid type: should be subclass of UserType\");\n\n            subUserType = (UserType) classInstance;\n            // if the SubType is parametrized\n            if (classInstance instanceof ParameterizedType) {\n\n                // forward our parameters for it, only removing the first token\n                // this enables chaining the filters\n\n                Properties newParameters = new Properties(parameters);\n\n                // replace subtypes with new type list, with first type removed\n                if (subTypes != null) {\n                    newParameters.setProperty(\"subtypes\", subTypes);\n                } else\n                    // remove the value totally, if there's no more subtypes\n                    newParameters.remove(\"subtypes\");\n\n                ParameterizedType paramUserType = (ParameterizedType) classInstance;\n                paramUserType.setParameterValues(newParameters);\n            }\n        } catch (ClassNotFoundException cnfe) {\n            throw new HibernateException(\"subtype not found\", cnfe);\n        } catch (IllegalAccessException iae) {\n            throw new HibernateException(\"invalid subtype\", iae);\n        } catch (InstantiationException ie) {\n            throw new HibernateException(\"invalid subtype\", ie);\n        }\n    }\n\n    /**\n     * Subclass implemented method, with modifies the data coming \"up\" in the\n     * UserType hierarchy, ie. from the database.\n     * \n     * @param ob\n     *            value to modify\n     * @return modified value\n     */\n    protected Object filterUp(Object ob) {\n        // by default no action\n        return ob;\n    }\n\n    /**\n     * Subclass implemented method, with modifies the data going \"down\" in the\n     * UserType hierarchy, ie. to the database.\n     * \n     * @param ob\n     *            value to modify\n     * @return modified value\n     */\n    protected Object filterDown(Object ob) {\n        // by default no action\n        return ob;\n    }\n\n    // \"UserType\" methods, which are implemented by delegating everything to\n    // subUserType.\n    // All data passed down to subUserType is filtered with FilterDown. All data\n    // from\n    // the subUserType is filtered with filterUp.\n    // ///////////\n\n    @Override\n    public int[] sqlTypes() {\n        return subUserType.sqlTypes();\n    }\n\n    @Override\n    public Class<?> returnedClass() {\n        return subUserType.returnedClass();\n    }\n\n    @Override\n    public boolean isMutable() {\n        return subUserType.isMutable();\n    }\n\n    @Override\n    public Object deepCopy(Object value) {\n        Object ob = subUserType.deepCopy(filterDown(value));\n        return filterUp(ob);\n    }\n\n    @Override\n    public boolean equals(Object x, Object y) {\n        return subUserType.equals(filterDown(x), filterDown(y));\n    }\n\n    @Override\n    public Object replace(Object original, Object target, Object owner) throws HibernateException {\n        Object ob = subUserType.replace(filterDown(original), filterDown(target), owner);\n        return filterUp(ob);\n    }\n\n    @Override\n    public Object nullSafeGet(ResultSet rs, String[] names, SessionImplementor session, Object owner) throws HibernateException, SQLException {\n        Object ob = subUserType.nullSafeGet(rs, names, session, owner);\n\n        return filterUp(ob);\n    }\n\n    @Override\n    public void nullSafeSet(PreparedStatement statement, Object value, int index, SessionImplementor session) throws HibernateException, SQLException {\n        Object filteredValue = filterDown(value);\n\n        subUserType.nullSafeSet(statement, filteredValue, index, session);\n    }\n\n    @Override\n    public int hashCode(Object x) throws HibernateException {\n        return subUserType.hashCode(filterDown(x));\n    }\n\n    @Override\n    public Serializable disassemble(Object value) throws HibernateException {\n        return subUserType.disassemble(filterDown(value));\n    }\n\n    @Override\n    public Object assemble(Serializable cached, Object owner) throws HibernateException {\n        Object ob = subUserType.assemble(cached, owner);\n        return filterUp(ob);\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\hibernate\\\\VarcharUserType.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["VarcharUserType"], "AN": ["SQL_TYPES"], "SCS_VariableDeclarator": ["SQL_TYPES", "str", "t", "s", "str"], "SCS_MemberReference": ["VARCHAR", "SQL_TYPES", "value", "value", "str", "x", "y", "x", "y", "y", "original", "t", "names", "s", "value", "index", "VARCHAR", "value", "index", "str", "value", "cached"], "MN": ["sqlTypes", "returnedClass", "isMutable", "deepCopy", "equals", "replace", "nullSafeGet", "nullSafeSet", "hashCode", "disassemble", "assemble"], "PN": ["value", "x", "y", "original", "target", "owner", "resultSet", "names", "session", "owner", "statement", "value", "index", "session", "x", "value", "cached", "owner"], "SCS_ClassReference": ["String", "x", "resultSet", "resultSet", "statement", "statement", "x"], "SCS_VariableDeclaration": ["String", "String", "String", "String"], "SCS_MethodInvocation": ["equals", "getString", "wasNull", "setNull", "setString", "hashCode"], "CO": ["/**\n * UserType, which saves strings as VARCHARs.\n * <p>\n * Normally you wouldn't write UserTypes that do nothing special, you would use\n * Hibernate built-in types instead. This is for the filtering functionality\n * however: it enables a UserType to be at the bottom of the filtering\n * hierarchy.\n * \n * @author Turkka \u00c3\u201eij\u00c3\u00a4l\u00c3\u00a4\n * @see fi.hut.soberit.agilefant.db.hibernate.TextUserType\n * @see fi.hut.soberit.agilefant.db.hibernate.UserTypeFilter\n */"], "CODE": "package fi.hut.soberit.agilefant.db.hibernate;\n\nimport java.io.Serializable;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Types;\n\nimport org.hibernate.HibernateException;\nimport org.hibernate.engine.spi.SessionImplementor;\nimport org.hibernate.usertype.UserType;\n\n/**\n * UserType, which saves strings as VARCHARs.\n * <p>\n * Normally you wouldn't write UserTypes that do nothing special, you would use\n * Hibernate built-in types instead. This is for the filtering functionality\n * however: it enables a UserType to be at the bottom of the filtering\n * hierarchy.\n * \n * @author Turkka \u00c3\u201eij\u00c3\u00a4l\u00c3\u00a4\n * @see fi.hut.soberit.agilefant.db.hibernate.TextUserType\n * @see fi.hut.soberit.agilefant.db.hibernate.UserTypeFilter\n */\npublic class VarcharUserType implements UserType {\n\n    private static final int[] SQL_TYPES = { Types.VARCHAR };\n\n    @Override\n    public int[] sqlTypes() {\n        return SQL_TYPES;\n    }\n\n    @Override\n    public Class<?> returnedClass() {\n        return String.class;\n    }\n\n    @Override\n    public boolean isMutable() {\n        return false;\n    }\n\n    @Override\n    public Object deepCopy(Object value) {\n        if (value == null)\n            return null;\n        String str = (String) value;\n        return new String(str);\n    }\n\n    @Override\n    public boolean equals(Object x, Object y) {\n        if (x == y)\n            return true;\n        if (x == null || y == null)\n            return false;\n        return x.equals(y);\n    }\n\n    @Override\n    public Object replace(Object original, Object target, Object owner) throws HibernateException {\n        String t = (String) original;\n        return new String(t);\n    }\n\n    @Override\n    public Object nullSafeGet(ResultSet resultSet, String[] names, SessionImplementor session, Object owner) throws HibernateException, SQLException {\n        String s = resultSet.getString(names[0]);\n\n        if (resultSet.wasNull())\n            return null;\n\n        return new String(s);\n    }\n\n    @Override\n    public void nullSafeSet(PreparedStatement statement, Object value, int index, SessionImplementor session) throws HibernateException, SQLException {\n        if (value == null) {\n            statement.setNull(index, Types.VARCHAR);\n            return;\n        }\n\n        String str = (String) value;\n\n        statement.setString(index, str);\n    }\n\n    @Override\n    public int hashCode(Object x) throws HibernateException {\n        return x.hashCode();\n    }\n\n    @Override\n    public Serializable disassemble(Object value) throws HibernateException {\n        return (Serializable) value;\n    }\n\n    @Override\n    public Object assemble(Serializable cached, Object owner) throws HibernateException {\n        return cached;\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\hibernate\\\\WhatsNextEntryDAOHibernate.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["WhatsNextEntryDAOHibernate"], "SCS_ConstructorDeclaration": ["WhatsNextEntryDAOHibernate"], "SCS_ClassReference": ["WhatsNextEntry", "crit", "returned", "Restrictions", null, "WhatsNextEntry", "entry", "Restrictions", "entry", "Order", "entry", "entry", "entry", "", "", null, "WhatsNextEntry", "entry", "Restrictions", "entry", "Restrictions", "entry", "entry", "", null, "WhatsNextEntry", "crit", "Restrictions", "crit", "Restrictions", "crit", "", null, "WhatsNextEntry", "crit", "Restrictions", "crit", "", "crit", "Order", "", null, "WhatsNextEntry", "crit", "Restrictions", "crit", "", "", "", "", null, null, "returned", "returnValue", "returnValue", "tasks"], "MN": ["filterDoneTasks", "getLastTaskInRank", "getTasksWithRankBetween", "getWhatsNextEntryFor", "getWhatsNextEntriesFor", "getAllWorkQueueEntriesFor", "removeAllByTask", "getTopmostWorkQueueEntries"], "PN": ["crit", "user", "lower", "upper", "user", "user", "task", "user", "task", "task"], "SCS_VariableDeclaration": ["Criteria", "Criteria", "Criteria", "Criteria", "Criteria", "Criteria", "WhatsNextEntry", "String", "Query", "List", "Map", "Object", "Object", "User", "Task", "List"], "SCS_VariableDeclarator": ["returned", "entry", "entry", "crit", "crit", "crit", "entry", "hqlQuery", "q", "returned", "returnValue", "o", "array", "user", "task", "tasks"], "SCS_MethodInvocation": ["createCriteria", "add", "ne", "createCriteria", "add", "eq", "addOrder", "desc", "setFetchMode", "setFetchMode", "setMaxResults", "filterDoneTasks", "uniqueResult", "createCriteria", "add", "eq", "add", "between", "setFetchMode", "setFetchMode", "asList", "createCriteria", "add", "eq", "add", "eq", "setMaxResults", "uniqueResult", "createCriteria", "add", "eq", "setFetchMode", "filterDoneTasks", "addOrder", "asc", "asList", "createCriteria", "add", "eq", "setFetchMode", "asList", "getAllWorkQueueEntriesFor", "remove", "getCurrentSession", "createQuery", "asList", "size", "get", "put", "add"], "SCS_MemberReference": ["DONE", "returned", "user", "SELECT", "JOIN", "entry", "entry", "user", "lower", "upper", "SELECT", "JOIN", "entry", "user", "task", "crit", "user", "JOIN", "crit", "crit", "task", "SELECT", "crit", "task", "entry", "hqlQuery", "q", "returned", "o", "array", "array", "user", "tasks", "tasks", "user", "tasks", "task", "returnValue"], "CO": ["// Filter out tasks that are done!", "// filterDoneTasks(crit);", "// needs to use this for cascading rules to work!"], "CODE": "package fi.hut.soberit.agilefant.db.hibernate;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.hibernate.Criteria;\nimport org.hibernate.FetchMode;\nimport org.hibernate.Query;\nimport org.hibernate.criterion.Order;\nimport org.hibernate.criterion.Restrictions;\nimport org.springframework.stereotype.Repository;\n\nimport fi.hut.soberit.agilefant.db.WhatsNextEntryDAO;\nimport fi.hut.soberit.agilefant.model.Task;\nimport fi.hut.soberit.agilefant.model.TaskState;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.model.WhatsNextEntry;\n\n@Repository(\"whatsNextEntryDAO\")\npublic class WhatsNextEntryDAOHibernate extends GenericDAOHibernate<WhatsNextEntry> implements\nWhatsNextEntryDAO {\n\n    public WhatsNextEntryDAOHibernate() {\n        super(WhatsNextEntry.class);\n    }\n\n    private Criteria filterDoneTasks(Criteria crit) {\n        Criteria returned = crit.createCriteria(\"task\");\n        returned.add(Restrictions.ne(\"state\", TaskState.DONE));\n        return returned;\n    }\n\n    public WhatsNextEntry getLastTaskInRank(User user) {\n        Criteria entry = this.createCriteria(WhatsNextEntry.class);\n\n        entry.add(Restrictions.eq(\"user\", user));\n        entry.addOrder(Order.desc(\"rank\"));\n        entry.setFetchMode(\"user\", FetchMode.SELECT);\n        entry.setFetchMode(\"task\", FetchMode.JOIN);\n        entry.setMaxResults(1);\n        filterDoneTasks(entry);\n\n        return uniqueResult(entry);\n    }\n\n    public Collection<WhatsNextEntry> getTasksWithRankBetween(int lower, int upper, User user) {\n        Criteria entry = this.createCriteria(WhatsNextEntry.class);\n        entry.add(Restrictions.eq(\"user\", user));\n        entry.add(Restrictions.between(\"rank\", lower, upper));\n        entry.setFetchMode(\"user\", FetchMode.SELECT);\n        entry.setFetchMode(\"task\", FetchMode.JOIN);\n        return asList(entry);\n    }\n\n    public WhatsNextEntry getWhatsNextEntryFor(User user, Task task) {\n        Criteria crit = this.createCriteria(WhatsNextEntry.class);\n        crit.add(Restrictions.eq(\"user\", user));\n        crit.add(Restrictions.eq(\"task\", task));\n\n        // Filter out tasks that are done!\n        // filterDoneTasks(crit);\n        crit.setMaxResults(1);\n        return uniqueResult(crit);\n    }\n\n    public Collection<WhatsNextEntry> getWhatsNextEntriesFor(User user) {\n        Criteria crit = this.createCriteria(WhatsNextEntry.class);\n        crit.add(Restrictions.eq(\"user\", user));\n        crit.setFetchMode(\"task\", FetchMode.JOIN);\n\n        filterDoneTasks(crit);\n\n        crit.addOrder(Order.asc(\"rank\"));\n        return asList(crit);\n    }\n    \n    public Collection<WhatsNextEntry> getAllWorkQueueEntriesFor(Task task) {\n        Criteria crit = this.createCriteria(WhatsNextEntry.class);\n        crit.add(Restrictions.eq(\"task\", task));\n        crit.setFetchMode(\"task\", FetchMode.SELECT);\n        return asList(crit);\n    }\n\n    public void removeAllByTask(Task task) {\n        // needs to use this for cascading rules to work!\n        for (WhatsNextEntry entry: getAllWorkQueueEntriesFor(task)) {\n            remove(entry);\n        };\n    }\n    \n    public Map<User, List<Task>> getTopmostWorkQueueEntries() {\n        String hqlQuery = \"SELECT user, entry.task \" +\n                          \"FROM User as user, WhatsNextEntry as entry \" +\n                          \"WHERE entry.user = user AND \" +\n                          \"entry.rank = (\" +\n                              \"SELECT min(e.rank) FROM WhatsNextEntry as e \"+\n                              \"WHERE e.user = user\" +\n                          \")\"; \n        \n        Query q = getCurrentSession().createQuery(hqlQuery);\n\n        List<?> returned = this.asList(q);\n        \n        Map<User, List<Task>> returnValue = new HashMap<User, List<Task>>(returned.size()); \n\n        for (Object o: returned) {\n            Object[] array = (Object[])o;\n            User user = (User)array[0];\n            Task task = (Task)array[1];\n\n            List<Task> tasks = returnValue.get(user);\n            if (tasks == null) {\n                tasks = new ArrayList<Task>();\n                returnValue.put(user, tasks);\n            }\n\n            tasks.add(task);\n        }        \n        return returnValue;\n    };\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\hibernate\\\\WhatsNextStoryEntryDAOHibernate.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["WhatsNextStoryEntryDAOHibernate"], "SCS_ConstructorDeclaration": ["WhatsNextStoryEntryDAOHibernate"], "SCS_ClassReference": ["WhatsNextStoryEntry", "crit", "returned", "Restrictions", null, "WhatsNextStoryEntry", "entry", "Restrictions", "entry", "Order", "entry", "entry", "entry", "", "", null, "WhatsNextStoryEntry", "entry", "Restrictions", "entry", "Restrictions", "entry", "entry", "", null, "WhatsNextStoryEntry", "crit", "Restrictions", "crit", "Restrictions", "crit", "", null, "WhatsNextStoryEntry", "crit", "Restrictions", "crit", "", "crit", "Order", "", null, "WhatsNextStoryEntry", "crit", "Restrictions", "crit", "", "", "", "", null, null, "returned", "returnValue", "returnValue", "stories"], "MN": ["filterDoneStories", "getLastStoryInRank", "getStoriesWithRankBetween", "getWhatsNextStoryEntryFor", "getWhatsNextStoryEntriesFor", "getAllWorkQueueEntriesFor", "removeAllByStory", "getTopmostWorkQueueEntries"], "PN": ["crit", "user", "lower", "upper", "user", "user", "story", "user", "story", "story"], "SCS_VariableDeclaration": ["Criteria", "Criteria", "Criteria", "Criteria", "Criteria", "Criteria", "WhatsNextStoryEntry", "String", "Query", "List", "Map", "Object", "Object", "User", "Story", "List"], "SCS_VariableDeclarator": ["returned", "entry", "entry", "crit", "crit", "crit", "entry", "hqlQuery", "q", "returned", "returnValue", "o", "array", "user", "story", "stories"], "SCS_MethodInvocation": ["createCriteria", "add", "ne", "createCriteria", "add", "eq", "addOrder", "desc", "setFetchMode", "setFetchMode", "setMaxResults", "filterDoneStories", "uniqueResult", "createCriteria", "add", "eq", "add", "between", "setFetchMode", "setFetchMode", "asList", "createCriteria", "add", "eq", "add", "eq", "setMaxResults", "uniqueResult", "createCriteria", "add", "eq", "setFetchMode", "filterDoneStories", "addOrder", "asc", "asList", "createCriteria", "add", "eq", "setFetchMode", "asList", "getAllWorkQueueEntriesFor", "remove", "getCurrentSession", "createQuery", "asList", "size", "get", "put", "add"], "SCS_MemberReference": ["DONE", "returned", "user", "SELECT", "JOIN", "entry", "entry", "user", "lower", "upper", "SELECT", "JOIN", "entry", "user", "story", "crit", "user", "JOIN", "crit", "crit", "story", "SELECT", "crit", "story", "entry", "hqlQuery", "q", "returned", "o", "array", "array", "user", "stories", "stories", "user", "stories", "story", "returnValue"], "CO": ["// Filter out stories that are done!", "// filterDoneStories(crit);", "// needs to use this for cascading rules to work!"], "CODE": "package fi.hut.soberit.agilefant.db.hibernate;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.hibernate.Criteria;\nimport org.hibernate.FetchMode;\nimport org.hibernate.Query;\nimport org.hibernate.criterion.Order;\nimport org.hibernate.criterion.Restrictions;\nimport org.springframework.stereotype.Repository;\n\nimport fi.hut.soberit.agilefant.db.WhatsNextStoryEntryDAO;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.StoryState;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.model.WhatsNextStoryEntry;\n\n@Repository(\"whatsNextStoryEntryDAO\")\npublic class WhatsNextStoryEntryDAOHibernate extends GenericDAOHibernate<WhatsNextStoryEntry> implements\nWhatsNextStoryEntryDAO {\n\n    public WhatsNextStoryEntryDAOHibernate() {\n        super(WhatsNextStoryEntry.class);\n    }\n\n    private Criteria filterDoneStories(Criteria crit) {\n        Criteria returned = crit.createCriteria(\"story\");\n        returned.add(Restrictions.ne(\"state\", StoryState.DONE));\n        return returned;\n    }\n\n    public WhatsNextStoryEntry getLastStoryInRank(User user) {\n        Criteria entry = this.createCriteria(WhatsNextStoryEntry.class);\n\n        entry.add(Restrictions.eq(\"user\", user));\n        entry.addOrder(Order.desc(\"rank\"));\n        entry.setFetchMode(\"user\", FetchMode.SELECT);\n        entry.setFetchMode(\"story\", FetchMode.JOIN);\n        entry.setMaxResults(1);\n        filterDoneStories(entry);\n\n        return uniqueResult(entry);\n    }\n\n    public Collection<WhatsNextStoryEntry> getStoriesWithRankBetween(int lower, int upper, User user) {\n        Criteria entry = this.createCriteria(WhatsNextStoryEntry.class);\n        entry.add(Restrictions.eq(\"user\", user));\n        entry.add(Restrictions.between(\"rank\", lower, upper));\n        entry.setFetchMode(\"user\", FetchMode.SELECT);\n        entry.setFetchMode(\"story\", FetchMode.JOIN);\n        return asList(entry);\n    }\n\n    public WhatsNextStoryEntry getWhatsNextStoryEntryFor(User user, Story story) {\n        Criteria crit = this.createCriteria(WhatsNextStoryEntry.class);\n        crit.add(Restrictions.eq(\"user\", user));\n        crit.add(Restrictions.eq(\"story\", story));\n\n        // Filter out stories that are done!\n        // filterDoneStories(crit);\n        crit.setMaxResults(1);\n        return uniqueResult(crit);\n    }\n\n    public Collection<WhatsNextStoryEntry> getWhatsNextStoryEntriesFor(User user) {\n        Criteria crit = this.createCriteria(WhatsNextStoryEntry.class);\n        crit.add(Restrictions.eq(\"user\", user));\n        crit.setFetchMode(\"story\", FetchMode.JOIN);\n\n        filterDoneStories(crit);\n\n        crit.addOrder(Order.asc(\"rank\"));\n        return asList(crit);\n    }\n    \n    public Collection<WhatsNextStoryEntry> getAllWorkQueueEntriesFor(Story story) {\n        Criteria crit = this.createCriteria(WhatsNextStoryEntry.class);\n        crit.add(Restrictions.eq(\"story\", story));\n        crit.setFetchMode(\"story\", FetchMode.SELECT);\n        return asList(crit);\n    }\n\n    public void removeAllByStory(Story story) {\n        // needs to use this for cascading rules to work!\n        for (WhatsNextStoryEntry entry: getAllWorkQueueEntriesFor(story)) {\n            remove(entry);\n        };\n    }\n    \n    public Map<User, List<Story>> getTopmostWorkQueueEntries() {\n        String hqlQuery = \"SELECT user, entry.story \" +\n                          \"FROM User as user, WhatsNextStoryEntry as entry \" +\n                          \"WHERE entry.user = user AND \" +\n                          \"entry.rank = (\" +\n                              \"SELECT min(e.rank) FROM WhatsNextStoryEntry as e \"+\n                              \"WHERE e.user = user\" +\n                          \")\"; \n        \n        Query q = getCurrentSession().createQuery(hqlQuery);\n\n        List<?> returned = this.asList(q);\n        \n        Map<User, List<Story>> returnValue = new HashMap<User, List<Story>>(returned.size()); \n\n        for (Object o: returned) {\n            Object[] array = (Object[])o;\n            User user = (User)array[0];\n            Story story = (Story)array[1];\n\n            List<Story> stories = returnValue.get(user);\n            if (stories == null) {\n                stories = new ArrayList<Story>();\n                returnValue.put(user, stories);\n            }\n\n            stories.add(story);\n        }        \n        return returnValue;\n    };\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\hibernate\\\\WidgetCollectionDAOHibernate.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["WidgetCollectionDAOHibernate"], "SCS_ConstructorDeclaration": ["WidgetCollectionDAOHibernate"], "SCS_ClassReference": ["WidgetCollection", null, "WidgetCollection", "collectionCriteria", "Order", ""], "MN": ["getCollections"], "PN": [], "SCS_VariableDeclaration": ["Criteria"], "SCS_VariableDeclarator": ["collectionCriteria"], "SCS_MethodInvocation": ["createCriteria", "addOrder", "asc", "asList"], "SCS_MemberReference": ["collectionCriteria"], "CO": ["/** {@inheritDoc} */"], "CODE": "package fi.hut.soberit.agilefant.db.hibernate;\n\n\nimport java.util.List;\n\nimport org.hibernate.Criteria;\nimport org.hibernate.criterion.Order;\nimport org.springframework.stereotype.Repository;\n\nimport fi.hut.soberit.agilefant.db.WidgetCollectionDAO;\nimport fi.hut.soberit.agilefant.model.WidgetCollection;\n\n@Repository(\"widgetCollectionDAO\")\npublic class WidgetCollectionDAOHibernate extends\n        GenericDAOHibernate<WidgetCollection> implements WidgetCollectionDAO {\n    \n    public WidgetCollectionDAOHibernate() {\n        super(WidgetCollection.class);\n    }\n    \n    /** {@inheritDoc} */\n    public List<WidgetCollection> getCollections() {\n        Criteria collectionCriteria = this.createCriteria(WidgetCollection.class);\n        collectionCriteria.addOrder(Order.asc(\"name\"));\n        return asList(collectionCriteria);\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\hibernate\\\\notification\\\\HibernateEventWiring.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["HibernateEventWiring"], "AN": ["sessionFactory", "listener"], "SCS_VariableDeclarator": ["sessionFactory", "listener", "registry"], "MN": ["registerListeners"], "PN": [], "SCS_MemberReference": ["listener", "sessionFactory", "listener", "POST_INSERT", "listener", "POST_UPDATE", "listener", "POST_DELETE"], "SCS_VariableDeclaration": ["EventListenerRegistry"], "SCS_ClassReference": ["registry", null, "registry", null, "registry", null], "SCS_MethodInvocation": ["getEventListenerGroup", "appendListener", "getEventListenerGroup", "appendListener", "getEventListenerGroup", "appendListener"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.db.hibernate.notification;\n\nimport javax.annotation.PostConstruct;\nimport org.hibernate.SessionFactory;\nimport org.hibernate.engine.spi.SessionFactoryImplementor;\nimport org.hibernate.event.service.spi.EventListenerRegistry;\nimport org.hibernate.event.spi.EventType;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class HibernateEventWiring {\n\n    @Autowired\n    private SessionFactory sessionFactory;\n\n    private NotificationEventListener listener;\n\n    @PostConstruct\n    public void registerListeners() {\n        listener = new NotificationEventListener();\n        EventListenerRegistry registry = ((SessionFactoryImplementor) sessionFactory).getServiceRegistry().getService(\n        EventListenerRegistry.class);\n        registry.getEventListenerGroup(EventType.POST_INSERT).appendListener(listener);\n        registry.getEventListenerGroup(EventType.POST_UPDATE).appendListener(listener);\n        registry.getEventListenerGroup(EventType.POST_DELETE).appendListener(listener);\n    }\n}", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\hibernate\\\\notification\\\\NotificationEventListener.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["NotificationEventListener"], "AN": ["notificationBusiness"], "SCS_VariableDeclarator": ["notificationBusiness", "notificationEvent", "notificationEvent", "applicationContext", "dirtyProperties"], "MN": ["onPostInsert", "onPostUpdate", "onPostDelete", "checkState", "checkIgnore"], "PN": ["postInsertEvent", "postUpdateEvent", "postDeleteEvent", "postUpdateEvent"], "SCS_ClassReference": ["", "postInsertEvent", "notificationBusiness", "", "", "postUpdateEvent", "notificationBusiness", "", "notificationBusiness", "postDeleteEvent", "ApplicationContextHolder", "applicationContext", "postUpdateEvent", "postUpdateEvent", "postUpdateEvent", null], "SCS_MethodInvocation": ["checkState", "getEntity", "handleNotificationEvent", "checkState", "checkIgnore", "getEntity", "handleNotificationEvent", "checkState", "handleNotificationEvent", "getEntity", "getApplicationContext", "getBean", "getEntity", "getDirtyProperties", "getPersister", "getPropertyNames"], "SCS_VariableDeclaration": ["NotificationEvent", "NotificationEvent", "ApplicationContext", "int"], "SCS_MemberReference": ["INSERT", "notificationEvent", "postUpdateEvent", "UPDATE", "notificationEvent", "DELETE", "notificationBusiness", "applicationContext", "notificationBusiness", "NOTIFICATION_BUSINESS_BEAN_NAME", "length", "dirtyProperties"], "CO": ["/**\n * Hibernate listener which listens to the common \"Database\" events and handle them\n * via {@link NotificationBusiness}.\n */", "// TODO: fill event properties", "// TODO: fill event properties", "//--------------------------------------------------- HELPER METHODS -----------------------------------------------"], "CODE": "package fi.hut.soberit.agilefant.db.hibernate.notification;\n\nimport org.hibernate.event.spi.PostDeleteEvent;\nimport org.hibernate.event.spi.PostDeleteEventListener;\nimport org.hibernate.event.spi.PostInsertEvent;\nimport org.hibernate.event.spi.PostInsertEventListener;\nimport org.hibernate.event.spi.PostUpdateEvent;\nimport org.hibernate.event.spi.PostUpdateEventListener;\nimport org.springframework.context.ApplicationContext;\n\nimport fi.hut.soberit.agilefant.business.NotificationBusiness;\nimport fi.hut.soberit.agilefant.business.impl.NotificationEmailSender;\nimport fi.hut.soberit.agilefant.core.ApplicationContextHolder;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.notification.NotificationEvent;\nimport fi.hut.soberit.agilefant.model.notification.NotificationEventType;\n\n\n/**\n * Hibernate listener which listens to the common \"Database\" events and handle them\n * via {@link NotificationBusiness}.\n */\npublic class NotificationEventListener implements PostInsertEventListener, PostUpdateEventListener, PostDeleteEventListener {\n\n    private NotificationBusiness notificationBusiness;\n\n    public void onPostInsert(PostInsertEvent postInsertEvent) {\n        checkState();\n        final NotificationEvent notificationEvent =\n                new NotificationEvent(postInsertEvent.getEntity(), NotificationEventType.INSERT);\n\n        // TODO: fill event properties\n\n        notificationBusiness.handleNotificationEvent(notificationEvent);\n    }\n\n    public void onPostUpdate(PostUpdateEvent postUpdateEvent) {\n        checkState();\n\n        if (checkIgnore(postUpdateEvent)) {\n            return;\n        }\n\n        final NotificationEvent notificationEvent =\n                new NotificationEvent(postUpdateEvent.getEntity(), NotificationEventType.UPDATE);\n\n        // TODO: fill event properties\n\n        notificationBusiness.handleNotificationEvent(notificationEvent);\n    }\n\n    public void onPostDelete(PostDeleteEvent postDeleteEvent) {\n        checkState();\n        notificationBusiness.handleNotificationEvent(\n                new NotificationEvent(postDeleteEvent.getEntity(), NotificationEventType.DELETE));\n    }\n\n    //--------------------------------------------------- HELPER METHODS -----------------------------------------------\n\n    private void checkState() {\n        if (notificationBusiness == null) {\n            final ApplicationContext applicationContext = ApplicationContextHolder.getApplicationContext();\n            if (applicationContext == null) {\n                throw new IllegalStateException(\"Cannot access Spring application context!\");\n            }\n\n            notificationBusiness = (NotificationBusiness) applicationContext.getBean(\n                    NotificationEmailSender.NOTIFICATION_BUSINESS_BEAN_NAME);\n        }\n    }\n\n    private boolean checkIgnore(PostUpdateEvent postUpdateEvent) {\n        if (postUpdateEvent.getEntity() instanceof Story) {\n            int[] dirtyProperties = postUpdateEvent.getDirtyProperties();\n            if (dirtyProperties.length == 1) {\n                if (postUpdateEvent.getPersister().getPropertyNames()[dirtyProperties[0]] == \"treeRank\") {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\history\\\\BacklogHistoryDAO.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["BacklogHistoryDAO"], "MN": ["retrieveAddedStories", "retrieveDeletedStories", "retrieveModifiedStories"], "PN": ["backlog", "backlog", "backlog"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.db.history;\n\nimport java.util.List;\n\nimport fi.hut.soberit.agilefant.model.Backlog;\nimport fi.hut.soberit.agilefant.transfer.AgilefantHistoryEntry;\n\npublic interface BacklogHistoryDAO extends GenericHistoryDAO<Backlog> {\n    public List<AgilefantHistoryEntry> retrieveAddedStories(Backlog backlog);\n    public List<AgilefantHistoryEntry> retrieveDeletedStories(Backlog backlog);\n    public List<AgilefantHistoryEntry> retrieveModifiedStories(Backlog backlog);\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\history\\\\GenericHistoryDAO.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["GenericHistoryDAO"], "MN": ["retrieveLatestChanges"], "PN": ["objectId", "numberOfChanges"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.db.history;\n\nimport java.util.List;\n\nimport fi.hut.soberit.agilefant.transfer.HistoryRowTO;\n\npublic interface GenericHistoryDAO<T> {\n    public List<HistoryRowTO> retrieveLatestChanges(int objectId, Integer numberOfChanges);\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\history\\\\StoryHistoryDAO.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["StoryHistoryDAO"], "MN": ["retrieveClosestRevision", "calculateAccessCounts"], "PN": ["storyId", "revisionId", "start", "end", "user"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.db.history;\n\nimport java.util.Map;\n\nimport org.joda.time.DateTime;\n\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.User;\n\npublic interface StoryHistoryDAO extends GenericHistoryDAO<Story> {\n    public Story retrieveClosestRevision(int storyId, int revisionId);\n    \n    public Map<Integer, Long> calculateAccessCounts(DateTime start, DateTime end, User user);\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\history\\\\TaskHistoryDAO.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["TaskHistoryDAO"], "MN": ["retrieveAllTaskRevisions"], "PN": ["iteration"], "CO": ["/**\n * Task History for an iteration\n * \n * @author aborici\n * \n */"], "CODE": "/**\n * Task History for an iteration\n * \n * @author aborici\n * \n */\n\npackage fi.hut.soberit.agilefant.db.history;\n\nimport java.util.List;\n\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.transfer.AgilefantHistoryEntry;\n\npublic interface TaskHistoryDAO extends GenericHistoryDAO<Iteration> {\n    public List<AgilefantHistoryEntry> retrieveAllTaskRevisions(Iteration iteration);\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\history\\\\impl\\\\AgilefantRevisionListener.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["AgilefantRevisionListener"], "MN": ["newRevision"], "PN": ["revisionEntity"], "SCS_VariableDeclaration": ["AgilefantRevisionEntity", "User"], "SCS_VariableDeclarator": ["entity", "user"], "SCS_MemberReference": ["revisionEntity", "user"], "SCS_ClassReference": ["SecurityUtil", "entity", "user", "entity", "user"], "SCS_MethodInvocation": ["getLoggedUser", "setUserName", "getFullName", "setUserId", "getId"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.db.history.impl;\n\nimport org.hibernate.envers.RevisionListener;\n\nimport fi.hut.soberit.agilefant.model.AgilefantRevisionEntity;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.security.SecurityUtil;\n\npublic class AgilefantRevisionListener implements RevisionListener {\n\n    public void newRevision(Object revisionEntity) {\n        AgilefantRevisionEntity entity = (AgilefantRevisionEntity)revisionEntity;\n        User user = SecurityUtil.getLoggedUser();\n        if(user != null) {\n            entity.setUserName(user.getFullName());\n            entity.setUserId(user.getId());\n        }\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\history\\\\impl\\\\BacklogHistoryDAOImpl.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["BacklogHistoryDAOImpl"], "SCS_ConstructorDeclaration": ["BacklogHistoryDAOImpl"], "SCS_ClassReference": ["Backlog", null, null, null, "StoryRank", "query", "AuditEntity", null, "backlog", "query", "AuditEntity", null, "query", "AuditEntity", "query", "AuditEntity", "query", "AuditEntity", "query", "AuditEntity", "query", "AuditEntity", "query", "AuditEntity", "query", "rev", "rev", "rev", "rev", "result", null, null, null, "StoryRank", "query", "AuditEntity", null, "backlog", "query", "AuditEntity", null, "query", "result", null, null, null, "StoryRank", "query", "AuditEntity", null, "backlog", "query", "AuditEntity", null, "query", "AuditEntity", "query", "AuditEntity", "query", "AuditEntity", "query", "AuditEntity", "query", "AuditEntity", "query", "AuditEntity", "query", "rev", "rev", "rev", "rev", "result"], "MN": ["retrieveDeletedStories", "retrieveAddedStories", "retrieveModifiedStories", "retrieveLatestChanges"], "PN": ["backlog", "backlog", "backlog", "objectId", "numberOfChanges"], "SCS_VariableDeclaration": ["AuditQuery", "List", "List", "Object", "Integer", "AgilefantRevisionEntity", "AuditQuery", "List", "List", "Object", "Story", "AuditQuery", "List", "List", "Object", "Integer", "AgilefantRevisionEntity"], "SCS_VariableDeclarator": ["query", "data", "result", "row", "storyId", "rev", "query", "data", "result", "row", "story", "query", "data", "result", "row", "storyId", "rev"], "SCS_MethodInvocation": ["getAuditReader", "createQuery", "forRevisionsOfEntity", "add", "property", "eq", "getId", "add", "revisionType", "eq", "addProjection", "revisionType", "addProjection", "property", "addProjection", "revisionNumber", "addProjection", "revisionProperty", "addProjection", "revisionProperty", "addProjection", "revisionProperty", "getResultList", "setId", "setTimestamp", "setUserId", "setUserName", "add", "getAuditReader", "createQuery", "forRevisionsOfEntity", "add", "property", "eq", "getId", "add", "revisionType", "eq", "getResultList", "add", "getAuditReader", "createQuery", "forRevisionsOfEntity", "add", "property", "eq", "getId", "add", "revisionType", "eq", "addProjection", "revisionType", "addProjection", "property", "addProjection", "revisionNumber", "addProjection", "revisionProperty", "addProjection", "revisionProperty", "addProjection", "revisionProperty", "getResultList", "setId", "setTimestamp", "setUserId", "setUserName", "add"], "SCS_MemberReference": ["DEL", "data", "row", "row", "row", "row", "row", "storyId", "row", "rev", "result", "ADD", "data", "row", "story", "row", "row", "result", "MOD", "data", "row", "row", "row", "row", "row", "storyId", "row", "rev", "result"], "CO": ["// TODO Auto-generated method stub"], "CODE": "package fi.hut.soberit.agilefant.db.history.impl;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.hibernate.envers.RevisionType;\nimport org.hibernate.envers.query.AuditEntity;\nimport org.hibernate.envers.query.AuditQuery;\nimport org.springframework.stereotype.Repository;\n\nimport fi.hut.soberit.agilefant.db.history.BacklogHistoryDAO;\nimport fi.hut.soberit.agilefant.model.AgilefantRevisionEntity;\nimport fi.hut.soberit.agilefant.model.Backlog;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.StoryRank;\nimport fi.hut.soberit.agilefant.transfer.AgilefantHistoryEntry;\nimport fi.hut.soberit.agilefant.transfer.HistoryRowTO;\n\n@Repository(\"backlogHistoryDAO\")\npublic class BacklogHistoryDAOImpl extends GenericHistoryDAOImpl<Backlog>\n        implements BacklogHistoryDAO {\n\n    public BacklogHistoryDAOImpl() {\n        super(Backlog.class);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public List<AgilefantHistoryEntry> retrieveDeletedStories(Backlog backlog) {\n        AuditQuery query = this.getAuditReader().createQuery()\n                .forRevisionsOfEntity(StoryRank.class, false, true);\n        query.add(AuditEntity.property(\"backlog_id\").eq(backlog.getId()));\n        query.add(AuditEntity.revisionType().eq(RevisionType.DEL));\n        query.addProjection(AuditEntity.revisionType());\n        query.addProjection(AuditEntity.property(\"story_id\"));\n        \n        query.addProjection(AuditEntity.revisionNumber());\n        query.addProjection(AuditEntity.revisionProperty(\"timestamp\"));\n        query.addProjection(AuditEntity.revisionProperty(\"userId\"));\n        query.addProjection(AuditEntity.revisionProperty(\"userName\"));\n\n        List<Object[]> data = query.getResultList();\n\n        List<AgilefantHistoryEntry> result = new ArrayList<AgilefantHistoryEntry>();\n        \n        for (Object[] row : data) {\n            Integer storyId = (Integer) row[1];\n            AgilefantRevisionEntity rev = new AgilefantRevisionEntity();\n            rev.setId((Integer)row[2]);\n            rev.setTimestamp((Long)row[3]);\n            rev.setUserId((Integer)row[4]);\n            rev.setUserName((String)row[5]);\n            result.add(new AgilefantHistoryEntry(storyId, (RevisionType)row[0], rev));\n        }\n        return result;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public List<AgilefantHistoryEntry> retrieveAddedStories(Backlog backlog) {\n        AuditQuery query = this.getAuditReader().createQuery()\n                .forRevisionsOfEntity(StoryRank.class, false, true);\n        query.add(AuditEntity.property(\"backlog_id\").eq(backlog.getId()));\n        query.add(AuditEntity.revisionType().eq(RevisionType.ADD));\n\n        List<Object[]> data = query.getResultList();\n\n        List<AgilefantHistoryEntry> result = new ArrayList<AgilefantHistoryEntry>();\n\n        for (Object[] row : data) {\n            Story story = ((StoryRank) row[0]).getStory();\n            result.add(new AgilefantHistoryEntry(story,\n                    (AgilefantRevisionEntity) row[1], (RevisionType) row[2]));\n        }\n        return result;\n    }\n\n    \n    @SuppressWarnings(\"unchecked\")\n    public List<AgilefantHistoryEntry> retrieveModifiedStories(Backlog backlog) {\n        AuditQuery query = this.getAuditReader().createQuery()\n                .forRevisionsOfEntity(StoryRank.class, false, true);\n        query.add(AuditEntity.property(\"backlog_id\").eq(backlog.getId()));\n        query.add(AuditEntity.revisionType().eq(RevisionType.MOD));\n        query.addProjection(AuditEntity.revisionType());\n        query.addProjection(AuditEntity.property(\"story_id\"));\n        \n        query.addProjection(AuditEntity.revisionNumber());\n        query.addProjection(AuditEntity.revisionProperty(\"timestamp\"));\n        query.addProjection(AuditEntity.revisionProperty(\"userId\"));\n        query.addProjection(AuditEntity.revisionProperty(\"userName\"));\n\n        List<Object[]> data = query.getResultList();\n\n        List<AgilefantHistoryEntry> result = new ArrayList<AgilefantHistoryEntry>();\n        \n        for (Object[] row : data) {\n            Integer storyId = (Integer) row[1];\n            AgilefantRevisionEntity rev = new AgilefantRevisionEntity();\n            rev.setId((Integer)row[2]);\n            rev.setTimestamp((Long)row[3]);\n            rev.setUserId((Integer)row[4]);\n            rev.setUserName((String)row[5]);\n            result.add(new AgilefantHistoryEntry(storyId, (RevisionType)row[0], rev));\n        }\n        return result;\n    }\n    \n    \n    public List<HistoryRowTO> retrieveLatestChanges(int objectId,\n            Integer numberOfChanges) {\n        // TODO Auto-generated method stub\n        return null;\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\history\\\\impl\\\\GenericHistoryDAOImpl.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["GenericHistoryDAOImpl"], "AN": ["clazz", "sessionFactory"], "SCS_VariableDeclarator": ["clazz", "sessionFactory", "query", "rows", "entries", "row"], "MN": ["setSessionFactory", "getAuditReader", "createQuery", "retrieveLatestChanges"], "PN": ["sessionFactory", "objectId", "numberOfChanges"], "SCS_MemberReference": ["sessionFactory", "sessionFactory", "clazz", "clazz", "sessionFactory", "clazz", "objectId", "numberOfChanges", "numberOfChanges", "rows", "row", "row", "entries"], "SCS_ConstructorDeclaration": ["GenericHistoryDAOImpl"], "SCS_ClassReference": ["AuditReaderFactory", null, null, null, null, null, "query", "AuditEntity", null, "query", "AuditEntity", null, "query", "query", "entries"], "SCS_MethodInvocation": ["get", "getCurrentSession", "getAuditReader", "createQuery", "forRevisionsOfEntity", "createQuery", "add", "id", "eq", "addOrder", "revisionNumber", "desc", "setMaxResults", "getResultList", "add"], "SCS_VariableDeclaration": ["AuditQuery", "List", "List", "Object"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.db.history.impl;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.hibernate.SessionFactory;\nimport org.hibernate.envers.AuditReader;\nimport org.hibernate.envers.AuditReaderFactory;\nimport org.hibernate.envers.query.AuditEntity;\nimport org.hibernate.envers.query.AuditQuery;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport fi.hut.soberit.agilefant.db.history.GenericHistoryDAO;\nimport fi.hut.soberit.agilefant.model.AgilefantRevisionEntity;\nimport fi.hut.soberit.agilefant.transfer.HistoryRowTO;\n\npublic abstract class GenericHistoryDAOImpl<T> implements GenericHistoryDAO<T> {\n    private Class<?> clazz;\n    private SessionFactory sessionFactory;\n\n    @Autowired\n    public void setSessionFactory(SessionFactory sessionFactory) {\n        this.sessionFactory = sessionFactory;\n    }\n\n    public GenericHistoryDAOImpl(Class<?> clazz) {\n        this.clazz = clazz;\n    }\n    \n    protected AuditReader getAuditReader() {\n        return AuditReaderFactory.get(this.sessionFactory\n                .getCurrentSession());\n    }\n\n    protected AuditQuery createQuery() {\n        return this.getAuditReader().createQuery().forRevisionsOfEntity(this.clazz,\n                false, true);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public List<HistoryRowTO> retrieveLatestChanges(int objectId, Integer numberOfChanges) {\n        AuditQuery query = this.createQuery();\n        query.add(AuditEntity.id().eq(objectId));\n        query.addOrder(AuditEntity.revisionNumber().desc());\n        if (numberOfChanges != null) {\n            query.setMaxResults(numberOfChanges);\n        }\n        List<Object[]> rows = query.getResultList();\n        List<HistoryRowTO> entries = new ArrayList<HistoryRowTO>();\n        for(Object[] row : rows) {\n            entries.add(new HistoryRowTO((AgilefantRevisionEntity)row[0], row[1]));\n        }\n        return entries;\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\history\\\\impl\\\\StoryHistoryDAOImpl.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["StoryHistoryDAOImpl"], "SCS_ConstructorDeclaration": ["StoryHistoryDAOImpl"], "SCS_ClassReference": ["Story", null, null, null, "Story", "query", "AuditEntity", null, "query", "query", null, null, null, "Story", "query", "AuditEntity", null, "query", "AuditEntity", null, "query", "query", null, null, null, "Story", "query", "AuditEntity", null, "user", "query", "AuditEntity", null, "start", "end", "query", "result", "row", "result", "row", "result", "row", "result", "row"], "MN": ["retrieveClosestRevision", "calculateAccessCounts"], "PN": ["storyId", "revisionId", "start", "end", "user"], "SCS_VariableDeclaration": ["AuditQuery", "AuditQuery", "List", "Map", "Story"], "SCS_VariableDeclarator": ["query", "query", "data", "result", "row"], "SCS_MethodInvocation": ["getAuditReader", "createQuery", "forRevisionsOfEntity", "add", "revisionNumber", "ge", "setMaxResults", "getSingleResult", "getAuditReader", "createQuery", "forRevisionsOfEntity", "add", "revisionNumber", "lt", "addOrder", "revisionProperty", "desc", "setMaxResults", "getSingleResult", "getAuditReader", "createQuery", "forRevisionsOfEntity", "add", "revisionProperty", "eq", "getId", "add", "revisionProperty", "between", "getMillis", "getMillis", "getResultList", "containsKey", "getId", "put", "getId", "put", "getId", "get", "getId"], "SCS_MemberReference": ["revisionId", "query", "revisionId", "data", "result"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.db.history.impl;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport javax.persistence.NoResultException;\n\nimport org.hibernate.envers.query.AuditEntity;\nimport org.hibernate.envers.query.AuditQuery;\nimport org.joda.time.DateTime;\nimport org.springframework.stereotype.Repository;\n\nimport fi.hut.soberit.agilefant.db.history.StoryHistoryDAO;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.User;\n\n@Repository(\"storyHistoryDAO\")\npublic class StoryHistoryDAOImpl extends GenericHistoryDAOImpl<Story> implements\n        StoryHistoryDAO {\n\n    public StoryHistoryDAOImpl() {\n        super(Story.class);\n    }\n\n    public Story retrieveClosestRevision(int storyId, int revisionId) {\n        AuditQuery query = this.getAuditReader().createQuery()\n                .forRevisionsOfEntity(Story.class, true, true);\n        query.add(AuditEntity.revisionNumber().ge(revisionId));\n        query.setMaxResults(1);\n        try {\n            return (Story) query.getSingleResult();\n        } catch (NoResultException nre) {\n\n        }\n        try {\n            query = this.getAuditReader().createQuery()\n                    .forRevisionsOfEntity(Story.class, true, true);\n            query.add(AuditEntity.revisionNumber().lt(revisionId));\n            query.addOrder(AuditEntity.revisionProperty(\"id\").desc());\n            query.setMaxResults(1);\n            return (Story) query.getSingleResult();\n        } catch (NoResultException nre) {\n            return null;\n        }\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public Map<Integer, Long> calculateAccessCounts(DateTime start,\n            DateTime end, User user) {\n\n        AuditQuery query = this.getAuditReader().createQuery()\n                .forRevisionsOfEntity(Story.class, true, false);\n        query.add(AuditEntity.revisionProperty(\"userId\").eq(user.getId()));\n        query.add(AuditEntity.revisionProperty(\"timestamp\").between(\n                start.getMillis(), end.getMillis()));\n        List<Story> data = query.getResultList();\n        Map<Integer, Long> result = new HashMap<Integer, Long>();\n        for (Story row : data) {\n            if (!result.containsKey(row.getId())) {\n                result.put(row.getId(), 0l);\n            }\n            result.put(row.getId(), result.get(row.getId()) + 1);\n        }\n        return result;\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\history\\\\impl\\\\TaskHistoryDAOImpl.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["TaskHistoryDAOImpl"], "AN": ["task"], "SCS_VariableDeclarator": ["task", "result", "query", "data", "row", "story", "st", "rev"], "SCS_ConstructorDeclaration": ["TaskHistoryDAOImpl"], "SCS_ClassReference": ["Iteration", null, null, null, "Task", "query", "AuditEntity", null, "iteration", "query", "AuditEntity", "query", "AuditEntity", "query", "AuditEntity", "query", "AuditEntity", "query", "AuditEntity", "query", "AuditEntity", "query", "AuditEntity", "query", "task", null, "iteration", "st", "task", "rev", "rev", "rev", "rev", "result"], "MN": ["retrieveAllTaskRevisions"], "PN": ["iteration"], "SCS_VariableDeclaration": ["List", "AuditQuery", "List", "Object", "Story", "Story", "AgilefantRevisionEntity"], "SCS_MethodInvocation": ["getAuditReader", "createQuery", "forRevisionsOfEntity", "add", "property", "eq", "getId", "addProjection", "revisionType", "addProjection", "property", "addProjection", "revisionNumber", "addProjection", "revisionProperty", "addProjection", "revisionProperty", "addProjection", "revisionProperty", "addProjection", "property", "getResultList", "setName", "toString", "getAssignedStories", "getId", "setStory", "setId", "setTimestamp", "setUserId", "setUserName", "add"], "SCS_MemberReference": ["data", "row", "row", "row", "story", "st", "story", "row", "row", "row", "row", "task", "rev", "row", "result"], "CO": ["/**\n * Implementation of TaskHistoryDAO interface\n * \n * @author arberborix\n * \n */", "/**\n     * Retrieves all records in table 'tasks_AUD' for the given iteration.\n     * \n     * @author aborici\n     */", "// generate query on tasks_AUD:", "//row[0]", "//row[1]", "// tasks by name revisions", "// the following come from 'agilefant_revisions' table:", "//row[2]", "//row[3]", "//row[4]", "//row[5]", "//row[6]", "// return result set:", "// construct task:"], "CODE": "/**\n * Implementation of TaskHistoryDAO interface\n * \n * @author arberborix\n * \n */\npackage fi.hut.soberit.agilefant.db.history.impl;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.hibernate.envers.RevisionType;\nimport org.hibernate.envers.query.AuditEntity;\nimport org.hibernate.envers.query.AuditQuery;\nimport org.springframework.stereotype.Repository;\n\nimport fi.hut.soberit.agilefant.db.history.TaskHistoryDAO;\nimport fi.hut.soberit.agilefant.model.AgilefantRevisionEntity;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.Task;\nimport fi.hut.soberit.agilefant.transfer.AgilefantHistoryEntry;\n\n@Repository(\"taskHistoryDAO\")\npublic class TaskHistoryDAOImpl extends GenericHistoryDAOImpl<Iteration> \n                                implements TaskHistoryDAO {\n\n    private Task task = new Task();\n    \n    public TaskHistoryDAOImpl() {\n        super(Iteration.class);\n    }\n\n    /**\n     * Retrieves all records in table 'tasks_AUD' for the given iteration.\n     * \n     * @author aborici\n     */\n    @SuppressWarnings(\"unchecked\")\n    public List<AgilefantHistoryEntry> retrieveAllTaskRevisions(\n            Iteration iteration) {\n        \n        List<AgilefantHistoryEntry> result = new ArrayList<AgilefantHistoryEntry>();\n        \n        // generate query on tasks_AUD:\n        AuditQuery query = this.getAuditReader().createQuery()\n                .forRevisionsOfEntity(Task.class, false, true);\n        query.add(AuditEntity.property(\"iteration_id\").eq(iteration.getId()));\n   \n      //row[0]\n        query.addProjection(AuditEntity.revisionType());\n      //row[1]\n        query.addProjection(AuditEntity.property(\"name\")); // tasks by name revisions\n        \n        // the following come from 'agilefant_revisions' table:\n      //row[2]\n        query.addProjection(AuditEntity.revisionNumber());\n      //row[3]\n        query.addProjection(AuditEntity.revisionProperty(\"timestamp\"));\n      //row[4]\n        query.addProjection(AuditEntity.revisionProperty(\"userId\"));\n      //row[5]\n        query.addProjection(AuditEntity.revisionProperty(\"userName\"));\n\n      //row[6]\n        query.addProjection(AuditEntity.property(\"story_id\"));\n      \n        List<Object[]> data = query.getResultList();\n\n        // return result set:\n        for (Object[] row : data) {\n            // construct task:\n            task.setName(row[1].toString());\n            \n            Story story = null;\n            for(Story st : iteration.getAssignedStories()){\n                if (row[6] == null) continue;\n                if (st.getId() == ((Story) row[6]).getId()) {\n                    story = st;\n                    break;\n                }\n                    \n            }\n            \n            task.setStory(story);\n           \n            \n            AgilefantRevisionEntity rev = new AgilefantRevisionEntity();\n            rev.setId((Integer)row[2]);\n            rev.setTimestamp((Long)row[3]);\n            rev.setUserId((Integer)row[4]);\n            rev.setUserName((String)row[5]);\n            \n            result.add(new AgilefantHistoryEntry(task, rev, (RevisionType) row[0]));\n        }\n        \n        return result;\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\exception\\\\ObjectNotFoundException.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["ObjectNotFoundException"], "AN": ["serialVersionUID", "i18nkey", "targetModel"], "SCS_VariableDeclarator": ["serialVersionUID", "i18nkey", "targetModel"], "SCS_ConstructorDeclaration": ["ObjectNotFoundException", "ObjectNotFoundException", "ObjectNotFoundException", "ObjectNotFoundException", "ObjectNotFoundException"], "SCS_MemberReference": ["msg", "msg", "targetModel", "targetModel", "targetModel", "targetModel", "msg", "i18nkey", "i18nkey", "i18nkey", "targetModel"], "MN": ["getI18nKey", "getTargetModel"], "PN": [], "CO": ["/**\n * Suggestion how exceptions could be handled.\n * TODO: \n * Design Exception architecture: \n * Decide for example, how we want to handle situations where\n * id's are passed to queries but no object is found for that id.\n * -> Now results a null pointer exception\n * \n * @author hhaataja, rstrom\n */"], "CODE": "package fi.hut.soberit.agilefant.exception;\n\n/**\n * Suggestion how exceptions could be handled.\n * TODO: \n * Design Exception architecture: \n * Decide for example, how we want to handle situations where\n * id's are passed to queries but no object is found for that id.\n * -> Now results a null pointer exception\n * \n * @author hhaataja, rstrom\n */\npublic class ObjectNotFoundException extends RuntimeException {\n\n    private static final long serialVersionUID = 4587925916379254562L;\n    \n    private String i18nkey;\n    \n    private Class<?> targetModel;\n\n    public ObjectNotFoundException(){\n        super();\n    }\n\n    public ObjectNotFoundException(String msg){\n        super(msg);\n    }\n    \n    public ObjectNotFoundException(String msg, Class<?> targetModel) {\n        super(msg);\n        this.targetModel = targetModel;\n    }\n    \n    public ObjectNotFoundException(Class<?> targetModel) {\n        this.targetModel = targetModel;\n    }\n    \n    public ObjectNotFoundException(String msg, String i18nkey){\n        super(msg);\n        this.i18nkey = i18nkey;\n    }\n    \n    public String getI18nKey() {\n        return this.i18nkey;\n    }\n\n    public Class<?> getTargetModel() {\n        return targetModel;\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\exception\\\\OperationNotPermittedException.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["OperationNotPermittedException"], "AN": ["serialVersionUID"], "SCS_VariableDeclarator": ["serialVersionUID"], "SCS_ConstructorDeclaration": ["OperationNotPermittedException", "OperationNotPermittedException"], "SCS_MemberReference": ["message"], "CO": ["/**\n * Used for disallowed controller operations.\n * @author rjokelai\n *\n */", "/**\n     * Create a new exception.\n     */", "/**\n     * Create a new exception with a message.\n     * @param message\n     */"], "CODE": "package fi.hut.soberit.agilefant.exception;\n\n/**\n * Used for disallowed controller operations.\n * @author rjokelai\n *\n */\npublic class OperationNotPermittedException extends RuntimeException {\n\n    private static final long serialVersionUID = 2583489006574217797L;\n\n    /**\n     * Create a new exception.\n     */\n    public OperationNotPermittedException() {\n        super();\n    }\n\n    /**\n     * Create a new exception with a message.\n     * @param message\n     */\n    public OperationNotPermittedException(String message) {\n        super(message);\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\exception\\\\ProductRankNotSupportedException.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["ProductRankNotSupportedException"], "AN": ["serialVersionUID"], "SCS_VariableDeclarator": ["serialVersionUID"], "CO": ["/**\n     * \n     */"], "CODE": "package fi.hut.soberit.agilefant.exception;\n\npublic class ProductRankNotSupportedException extends RuntimeException {\n\n    /**\n     * \n     */\n    private static final long serialVersionUID = 6061015090924913178L;\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\exception\\\\StoryTreeIntegrityViolationException.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["StoryTreeIntegrityViolationException"], "AN": ["serialVersionUID", "messages"], "SCS_VariableDeclarator": ["serialVersionUID", "messages", "ret", "message"], "SCS_ConstructorDeclaration": ["StoryTreeIntegrityViolationException"], "SCS_MemberReference": ["messages", "messages", "messages", "LINE_SEPARATOR", "messages"], "MN": ["getMessage", "getMessages"], "PN": [], "SCS_VariableDeclaration": ["StringBuilder", "StoryTreeIntegrityMessage"], "SCS_ClassReference": ["ret", "message", "ret", "ret", "ret"], "SCS_MethodInvocation": ["append", "getMessageName", "append", "append", "toString"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.exception;\n\nimport java.util.List;\n\nimport fi.hut.soberit.agilefant.util.StoryTreeIntegrityMessage;\n\npublic class StoryTreeIntegrityViolationException extends RuntimeException {\n\n    private static final long serialVersionUID = 2396029624894442253L;\n    private List<StoryTreeIntegrityMessage> messages;\n\n    public StoryTreeIntegrityViolationException(\n            List<StoryTreeIntegrityMessage> messages) {\n        this.messages = messages;\n    }\n\n    @Override\n    public String getMessage() {\n        StringBuilder ret = new StringBuilder();\n        for (StoryTreeIntegrityMessage message : this.messages) {\n            ret.append(message.getMessageName());\n            ret.append(' ');\n            ret.append((char)Character.LINE_SEPARATOR);\n        }\n        return ret.toString();\n    }\n\n    public List<StoryTreeIntegrityMessage> getMessages() {\n        return messages;\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\exportimport\\\\ExportImport.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["ExportImport", "ImportExportModule", "ExportableModel", "ExportableBacklog", "ExportableUser", "ExportableProduct", "ExportableProject", "ExportableIteration", "ExportableStory", "ExportableTask", "ExportableWidgetCollection", "ExportableAgilefantWidget", "VersionMismatchException", "ExportData"], "AN": ["objectMapper", "VERSION", "config", "version"], "SCS_VariableDeclarator": ["objectMapper", "VERSION", "config", "objectMapper", "importExportModule", "exportData", "objectWriter", "parser", "exportData", "organizationTO", "version"], "SCS_MemberReference": ["objectMapper", "importExportModule", "ALL", "NONE", "FIELD", "ANY", "objectMapper", "objectMapper", "config", "VERSION", "version", "out", "exportData", "out", "organizationTO", "e", "in", "parser", "version", "parser", "organizationTO", "e", "CLASS", "PROPERTY", "message"], "SCS_ClassReference": ["", "objectMapper", "objectMapper", "objectMapper", "objectMapper", null, null, null, null, "objectWriter", "objectWriter", null, null, null, null, null, "ExportData", null, null, null, "exportData.version", null, null, null, "OrganizationDumpTO", "context", "Backlog", "ExportableBacklog", "context", "User", "ExportableUser", "context", "Holiday", "ExportableModel", "context", "Product", "ExportableProduct", "context", "Project", "ExportableProject", "context", "Iteration", "ExportableIteration", "context", "Story", "ExportableStory", "context", "Task", "ExportableTask", "context", "Assignment", "ExportableModel", "context", "BacklogHourEntry", "ExportableModel", "context", "StoryHourEntry", "ExportableModel", "context", "TaskHourEntry", "ExportableModel", "context", "BacklogHistoryEntry", "ExportableModel", "context", "IterationHistoryEntry", "ExportableModel", "context", "Label", "ExportableModel", "context", "StoryAccess", "ExportableModel", "context", "StoryRank", "ExportableModel", "context", "Team", "ExportableModel", "context", "WhatsNextEntry", "ExportableModel", "context", "WhatsNextStoryEntry", "ExportableModel", "context", "WidgetCollection", "ExportableWidgetCollection", "context", "AgilefantWidget", "ExportableAgilefantWidget", "context", "Setting", "ExportableModel", "IntSequenceGenerator"], "SCS_MethodInvocation": ["initObjectMapper", "registerModule", "registerModule", "setVisibility", "setVisibility", "getString", "getVersion", "getObjectMapper", "writer", "writeValue", "writeValue", "getObjectMapper", "getFactory", "createParser", "getObjectMapper", "readValue", "getVersion", "substring", "equals", "substring", "getVersion", "getObjectMapper", "readValue", "setMixInAnnotations", "setMixInAnnotations", "setMixInAnnotations", "setMixInAnnotations", "setMixInAnnotations", "setMixInAnnotations", "setMixInAnnotations", "setMixInAnnotations", "setMixInAnnotations", "setMixInAnnotations", "setMixInAnnotations", "setMixInAnnotations", "setMixInAnnotations", "setMixInAnnotations", "setMixInAnnotations", "setMixInAnnotations", "setMixInAnnotations", "setMixInAnnotations", "setMixInAnnotations", "setMixInAnnotations", "setMixInAnnotations", "setMixInAnnotations", "setMixInAnnotations"], "MN": ["initObjectMapper", "getObjectMapper", "getVersion", "toJson", "fromJson", "setupModule", "getId", "getTeams", "getAssignments", "getStories", "getTasks", "getHolidays", "getHolidayAnomalies", "getTeams", "getProjects", "getIterations", "getChildren", "getStories", "getHourEntries", "getStoryRanks", "getBacklogHistoryEntries", "getChildren", "getStories", "getHourEntries", "getStoryRanks", "getAssignments", "getTasks", "getAssignments", "getHistoryEntries", "getAssignedStories", "getTeams", "getChildren", "getStories", "getHourEntries", "getStoryRanks", "getStoryAccesses", "getWhatsNextStoryEntries", "getTasks", "getHourEntries", "getChildren", "getStoryRanks", "getLabels", "getWhatsNextEntries", "getHourEntries", "getWidgets", "getObjectId"], "PN": ["out", "organizationTO", "in", "context"], "SCS_VariableDeclaration": ["ObjectMapper", "SimpleModule", "ExportData", "ObjectWriter", "JsonParser", "ExportData", "OrganizationDumpTO"], "SCS_ConstructorDeclaration": ["ImportExportModule", "VersionMismatchException"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.exportimport;\n\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.Set;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport com.fasterxml.jackson.annotation.JsonIdentityInfo;\nimport com.fasterxml.jackson.annotation.JsonIgnore;\nimport com.fasterxml.jackson.annotation.JsonTypeInfo;\nimport com.fasterxml.jackson.annotation.ObjectIdGenerators;\nimport com.fasterxml.jackson.annotation.PropertyAccessor;\nimport com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;\nimport com.fasterxml.jackson.core.JsonParser;\nimport com.fasterxml.jackson.core.Version;\nimport com.fasterxml.jackson.core.util.DefaultPrettyPrinter;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.ObjectWriter;\nimport com.fasterxml.jackson.databind.module.SimpleModule;\nimport com.fasterxml.jackson.datatype.joda.JodaModule;\nimport com.typesafe.config.Config;\n\nimport fi.hut.soberit.agilefant.business.ExportImportBusiness.OrganizationDumpTO;\nimport fi.hut.soberit.agilefant.model.AgilefantWidget;\nimport fi.hut.soberit.agilefant.model.Assignment;\nimport fi.hut.soberit.agilefant.model.Backlog;\nimport fi.hut.soberit.agilefant.model.BacklogHistoryEntry;\nimport fi.hut.soberit.agilefant.model.BacklogHourEntry;\nimport fi.hut.soberit.agilefant.model.Holiday;\nimport fi.hut.soberit.agilefant.model.HolidayAnomaly;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.IterationHistoryEntry;\nimport fi.hut.soberit.agilefant.model.Label;\nimport fi.hut.soberit.agilefant.model.Product;\nimport fi.hut.soberit.agilefant.model.Project;\nimport fi.hut.soberit.agilefant.model.Setting;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.StoryAccess;\nimport fi.hut.soberit.agilefant.model.StoryHourEntry;\nimport fi.hut.soberit.agilefant.model.StoryRank;\nimport fi.hut.soberit.agilefant.model.Task;\nimport fi.hut.soberit.agilefant.model.TaskHourEntry;\nimport fi.hut.soberit.agilefant.model.Team;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.model.WhatsNextEntry;\nimport fi.hut.soberit.agilefant.model.WhatsNextStoryEntry;\nimport fi.hut.soberit.agilefant.model.WidgetCollection;\n\n@Component\npublic class ExportImport {\n\n\tprivate static final ObjectMapper objectMapper;\n\n\tprivate static final String VERSION = \"agilefant.version\";\n\t\n\t@Autowired\n    private Config config;\n\t\n\tstatic {\n\t\tobjectMapper = initObjectMapper();\n\t}\n\t\n\tprivate static ObjectMapper initObjectMapper() {\n\t\tObjectMapper objectMapper = new ObjectMapper();\n    \tSimpleModule importExportModule = new ImportExportModule();\n    \t\n    \tobjectMapper.registerModule(importExportModule);\n    \tobjectMapper.registerModule(new JodaModule());\n\n    \tobjectMapper.setVisibility(PropertyAccessor.ALL, Visibility.NONE);\n    \tobjectMapper.setVisibility(PropertyAccessor.FIELD, Visibility.ANY);    \t\n\n    \treturn objectMapper;\n\t}\n\n\tprivate ObjectMapper getObjectMapper() {\n\t\treturn objectMapper;\n\t}\n\t\n\tprivate String getVersion() {\n\t\treturn this.config.getString(VERSION);\n\t}\n\t\n\tpublic void toJson(OutputStream out, OrganizationDumpTO organizationTO) {\n\t\ttry {\n\t\t\tExportData exportData = new ExportData();\n\t\t\texportData.version = this.getVersion();\n\t\t\tObjectWriter objectWriter = this.getObjectMapper().writer(new DefaultPrettyPrinter());\n\t\t\tobjectWriter.writeValue(out, exportData);\n\t\t\tobjectWriter.writeValue(out, organizationTO);\t\t\t\n\t\t} catch(Exception e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t}\n\t\n\tpublic OrganizationDumpTO fromJson(InputStream in) throws VersionMismatchException {\n\t\ttry {\n\t\t\tJsonParser parser = this.getObjectMapper().getFactory().createParser(in);\n\t    \tExportData exportData = this.getObjectMapper().readValue(parser, ExportData.class);\t\t\t\n\t\t\tif(!this.getVersion().substring(0, 3).equals(exportData.version.substring(0, 3))) {\n\t\t\t\tthrow new VersionMismatchException(\"Current application version is \" + this.getVersion() + \" while import version is \" + exportData.version);\n\t\t\t}\n\t    \tOrganizationDumpTO organizationTO = this.getObjectMapper().readValue(parser, OrganizationDumpTO.class);\n\t    \treturn organizationTO;\n\t\t} catch(Exception e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t}\n\t\n\t@SuppressWarnings(\"serial\")\n\tpublic static class ImportExportModule extends SimpleModule {\n\t\tpublic ImportExportModule() {\n\t\t\tsuper(\"ImportExport\", new Version(0,0,1,null,null,null));\t\t\t\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic void setupModule(SetupContext context) {\n\t\t\tcontext.setMixInAnnotations(Backlog.class, ExportableBacklog.class);\n\t\t\tcontext.setMixInAnnotations(User.class, ExportableUser.class);\n\t\t\tcontext.setMixInAnnotations(Holiday.class, ExportableModel.class);\n\t\t\tcontext.setMixInAnnotations(Product.class, ExportableProduct.class);\n\t\t\tcontext.setMixInAnnotations(Project.class, ExportableProject.class);\n\t\t\tcontext.setMixInAnnotations(Iteration.class, ExportableIteration.class);\n\t\t\tcontext.setMixInAnnotations(Story.class, ExportableStory.class);\n\t\t\tcontext.setMixInAnnotations(Task.class, ExportableTask.class);\n\t\t\tcontext.setMixInAnnotations(Assignment.class, ExportableModel.class);\n\t\t\tcontext.setMixInAnnotations(BacklogHourEntry.class, ExportableModel.class);\n\t\t\tcontext.setMixInAnnotations(StoryHourEntry.class, ExportableModel.class);\n\t\t\tcontext.setMixInAnnotations(TaskHourEntry.class, ExportableModel.class);\n\t\t\tcontext.setMixInAnnotations(BacklogHistoryEntry.class, ExportableModel.class);\n\t\t\tcontext.setMixInAnnotations(IterationHistoryEntry.class, ExportableModel.class);\n\t\t\tcontext.setMixInAnnotations(Label.class, ExportableModel.class);\n\t\t\tcontext.setMixInAnnotations(StoryAccess.class, ExportableModel.class);\n\t\t\tcontext.setMixInAnnotations(StoryRank.class, ExportableModel.class);\n\t\t\tcontext.setMixInAnnotations(Team.class, ExportableModel.class);\n\t\t\tcontext.setMixInAnnotations(WhatsNextEntry.class, ExportableModel.class);\n\t\t\tcontext.setMixInAnnotations(WhatsNextStoryEntry.class, ExportableModel.class);\n\t\t\tcontext.setMixInAnnotations(WidgetCollection.class, ExportableWidgetCollection.class);\n\t\t\tcontext.setMixInAnnotations(AgilefantWidget.class, ExportableAgilefantWidget.class);\n\t\t\tcontext.setMixInAnnotations(Setting.class, ExportableModel.class);\n\t\t\n\t\t}\n\t}\n\n\t@JsonIdentityInfo(generator=ObjectIdGenerators.IntSequenceGenerator.class, property=\"@id\")\n\tpublic interface ExportableModel {\n\t    @JsonIgnore\n\t    public int getId();\n\t}\n\t\n\t@JsonTypeInfo(use=JsonTypeInfo.Id.CLASS, include=JsonTypeInfo.As.PROPERTY, property=\"@class\")\n\tpublic interface ExportableBacklog extends ExportableModel {\n\t}\n\t\n\tpublic static abstract class ExportableUser extends User implements ExportableModel {\n\t\t@Override\n\t\t@JsonIgnore\n\t\tpublic abstract Collection<Team> getTeams();\n\n\t\t@Override\n\t\t@JsonIgnore\n\t\tpublic abstract Collection<Assignment> getAssignments();\n\t\t\n\t\t@Override\n\t\t@JsonIgnore\n\t\tpublic abstract Collection<Story> getStories();\n\n\t\t@Override\n\t\t@JsonIgnore\n\t\tpublic abstract Set<Task> getTasks();\n\n\t\t@Override\n\t\t@JsonIgnore\n\t\tpublic abstract Collection<Holiday> getHolidays();\n\n\t\t@Override\n\t\t@JsonIgnore\n\t\tpublic abstract Collection<HolidayAnomaly> getHolidayAnomalies();\n\t\t\n\t}\n\t\n\tpublic static abstract class ExportableProduct extends Product implements ExportableBacklog {\n\n\t\t@Override\n\t\t@JsonIgnore\n\t\tpublic abstract Collection<Team> getTeams();\n\n\t\t@Override\n\t\t@JsonIgnore\n\t\tpublic abstract Collection<Project> getProjects();\n\n\t\t@Override\n\t\t@JsonIgnore\n\t\tpublic abstract Collection<Iteration> getIterations();\n\n\t\t@Override\n\t\t@JsonIgnore\n\t\tpublic abstract Set<Backlog> getChildren();\n\n\t\t@Override\n\t\t@JsonIgnore\n\t\tpublic abstract Set<Story> getStories();\n\n\t\t@Override\n\t\t@JsonIgnore\n\t\tpublic abstract Set<BacklogHourEntry> getHourEntries();\n\n\t\t@Override\n\t\t@JsonIgnore\n\t\tpublic abstract Set<StoryRank> getStoryRanks();\n\t}\n\t\n\tpublic static abstract class ExportableProject extends Project implements ExportableBacklog {\n\t\t@Override\n\t\t@JsonIgnore\n\t\tpublic abstract Set<BacklogHistoryEntry> getBacklogHistoryEntries();\n\t\t\n\t\t@Override\n\t\t@JsonIgnore\n\t\tpublic abstract Set<Backlog> getChildren();\n\n\t\t@Override\n\t\t@JsonIgnore\n\t\tpublic abstract Set<Story> getStories();\n\n\t\t@Override\n\t\t@JsonIgnore\n\t\tpublic abstract Set<BacklogHourEntry> getHourEntries();\n\n\t\t@Override\n\t\t@JsonIgnore\n\t\tpublic abstract Set<StoryRank> getStoryRanks();\n\n\t\t@Override\n\t\t@JsonIgnore\n\t\tpublic abstract Set<Assignment> getAssignments();\n\t}\n\t\n\tpublic static abstract class ExportableIteration extends Iteration implements ExportableBacklog {\n\n\t\t@Override\n\t\t@JsonIgnore\n\t\tpublic abstract Set<Task> getTasks();\n\n\t\t@Override\n\t\t@JsonIgnore\n\t\tpublic abstract Set<Assignment> getAssignments();\n\n\t\t@Override\n\t\t@JsonIgnore\n\t\tpublic abstract Set<IterationHistoryEntry> getHistoryEntries();\n\n\t\t@Override\n\t\t@JsonIgnore\n\t\tpublic abstract Set<Story> getAssignedStories();\n\n\t\t@Override\n\t\t@JsonIgnore\n\t\tpublic abstract Collection<Team> getTeams();\n\t\t\n\t\t@Override\n\t\t@JsonIgnore\n\t\tpublic abstract Set<Backlog> getChildren();\n\n\t\t@Override\n\t\t@JsonIgnore\n\t\tpublic abstract Set<Story> getStories();\n\n\t\t@Override\n\t\t@JsonIgnore\n\t\tpublic abstract Set<BacklogHourEntry> getHourEntries();\n\n\t\t@Override\n\t\t@JsonIgnore\n\t\tpublic abstract Set<StoryRank> getStoryRanks();\n\t}\n\n\tpublic static abstract class ExportableStory extends Story implements ExportableModel {\n\t\t@Override\n\t\t@JsonIgnore\n\t\tpublic abstract Set<StoryAccess> getStoryAccesses();\n\n\t\t@Override\n\t\t@JsonIgnore\n\t\tpublic abstract Set<WhatsNextStoryEntry> getWhatsNextStoryEntries();\n\n\t\t@Override\n\t\t@JsonIgnore\n\t\tpublic abstract Set<Task> getTasks();\n\n\t\t@Override\n\t\t@JsonIgnore\n\t\tpublic abstract Set<StoryHourEntry> getHourEntries();\n\n\t\t@Override\n\t\t@JsonIgnore\n\t\tpublic abstract List<Story> getChildren();\n\n\t\t@Override\n\t\t@JsonIgnore\n\t\tpublic abstract Set<StoryRank> getStoryRanks();\n\n\t\t@Override\n\t\t@JsonIgnore\n\t\tpublic abstract Set<Label> getLabels();\n\t}\n\t\n\tpublic static abstract class ExportableTask extends Task implements ExportableModel {\n\n\t\t@Override\n\t\t@JsonIgnore\n\t\tpublic abstract Set<WhatsNextEntry> getWhatsNextEntries();\n\n\t\t@Override\n\t\t@JsonIgnore\n\t\tpublic abstract Set<TaskHourEntry> getHourEntries();\n\t}\n\t\n\tpublic static abstract class ExportableWidgetCollection extends WidgetCollection implements ExportableModel {\n\n\t\t@Override\n\t\t@JsonIgnore\n\t\tpublic abstract Collection<AgilefantWidget> getWidgets();\n\t}\n\n\tpublic static abstract class ExportableAgilefantWidget extends AgilefantWidget implements ExportableModel {\n\n\t\t@Override\n\t\t@JsonIgnore\n\t\tpublic abstract Integer getObjectId();\n\t\t\n\t}\n\t\n\t@SuppressWarnings(\"serial\")\n\tpublic static class VersionMismatchException extends Exception {\n\n\t\tpublic VersionMismatchException(String message) {\n\t\t\tsuper(message);\n\t\t}\n\t}\n\t\n\tpublic static class ExportData {\n\t\tpublic String version;\n\t}\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\exportimport\\\\XmlBackupper.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["XmlBackupper"], "AN": ["dbOutputStream"], "SCS_VariableDeclarator": ["dbOutputStream", "dbbackup"], "SCS_ConstructorDeclaration": ["XmlBackupper"], "SCS_MemberReference": ["dbOutputStream", "exportImportBusiness", "exportImport", "dbOutputStream", "dbOutputStream"], "MN": ["generateDBDumpStream", "getDbOutputStream"], "PN": ["exportImportBusiness", "exportImport"], "SCS_VariableDeclaration": ["XmlBackupStreamGenerator"], "SCS_ClassReference": ["dbbackup", "dbbackup", "dbbackup"], "SCS_MethodInvocation": ["generateZippedDbOutputStream", "getZippedDbOutputStream", "getZippedDbOutputStream"], "CO": ["/**\n * Provides a zipped database dump in an output stream\n */", "/**\n     * \n     */", "/**\n     * Calls Dbbackup to generate zipped stream Returns ByteArrayOutputStream\n     * that is zipped DBdump from exportImportBusiness or\n     * null if generating stream failed for some reason.\n     */", "/**\n     * Returns and output stream that contains the zipped dbdump\n     */"], "CODE": "package fi.hut.soberit.agilefant.exportimport;\n\nimport java.io.ByteArrayOutputStream;\nimport fi.hut.soberit.agilefant.business.ExportImportBusiness;\n\n/**\n * Provides a zipped database dump in an output stream\n */\npublic class XmlBackupper {\n\n    private ByteArrayOutputStream dbOutputStream;\n\n    /**\n     * \n     */\n    public XmlBackupper() {\n        dbOutputStream = new ByteArrayOutputStream();\n    }\n\n    /**\n     * Calls Dbbackup to generate zipped stream Returns ByteArrayOutputStream\n     * that is zipped DBdump from exportImportBusiness or\n     * null if generating stream failed for some reason.\n     */\n    public ByteArrayOutputStream generateDBDumpStream(ExportImportBusiness exportImportBusiness, ExportImport exportImport) throws Exception {\n        XmlBackupStreamGenerator dbbackup = new XmlBackupStreamGenerator();\n        dbbackup.generateZippedDbOutputStream(exportImportBusiness, exportImport);\n\n        this.dbOutputStream = dbbackup.getZippedDbOutputStream();\n        return dbbackup.getZippedDbOutputStream();\n    }\n\n    /**\n     * Returns and output stream that contains the zipped dbdump\n     */\n    public ByteArrayOutputStream getDbOutputStream() {\n        return this.dbOutputStream;\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\exportimport\\\\XmlBackupStreamGenerator.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["XmlBackupStreamGenerator"], "AN": ["zippedDbOutputStream"], "SCS_VariableDeclarator": ["zippedDbOutputStream", "out", "organizationTO", "outzip"], "SCS_ConstructorDeclaration": ["XmlBackupStreamGenerator"], "SCS_MemberReference": ["zippedDbOutputStream", "zippedDbOutputStream", "zippedDbOutputStream", "out", "organizationTO", "zippedDbOutputStream", "outzip"], "MN": ["getZippedDbOutputStream", "generateZippedDbOutputStream"], "PN": ["exportImportBusiness", "exportImport"], "SCS_VariableDeclaration": ["ByteArrayOutputStream", "OrganizationDumpTO", "ZipOutputStream"], "SCS_ClassReference": ["exportImportBusiness", "exportImport", "outzip", "out", "outzip", "outzip"], "SCS_MethodInvocation": ["exportOrganization", "toJson", "putNextEntry", "writeTo", "closeEntry", "close"], "CO": ["/**\n * Generates a zipped database dump using ExportImportUtil and provides it in a ByteArrayOutputStream for access.\n */", "/**\n     * Initializes the class for taking a xml dump\n     */", "/**\n     * Returns dumped database as zipped ByteArrayOutputStream. It's usually a good idea to call generate first\n     */"], "CODE": "package fi.hut.soberit.agilefant.exportimport;\n\nimport java.io.ByteArrayOutputStream;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipOutputStream;\nimport fi.hut.soberit.agilefant.business.ExportImportBusiness;\nimport fi.hut.soberit.agilefant.business.ExportImportBusiness.OrganizationDumpTO;\n\n/**\n * Generates a zipped database dump using ExportImportUtil and provides it in a ByteArrayOutputStream for access.\n */\npublic class XmlBackupStreamGenerator {\n\n    private ByteArrayOutputStream zippedDbOutputStream;\n\n    /**\n     * Initializes the class for taking a xml dump\n     */\n    public XmlBackupStreamGenerator() {\n        this.zippedDbOutputStream = new ByteArrayOutputStream();\n    }\n\n    /**\n     * Returns dumped database as zipped ByteArrayOutputStream. It's usually a good idea to call generate first\n     */\n    public ByteArrayOutputStream getZippedDbOutputStream() {\n        return this.zippedDbOutputStream;\n    }\n\n\n    public void generateZippedDbOutputStream(ExportImportBusiness exportImportBusiness, ExportImport exportImport) throws Exception {\n        zippedDbOutputStream = new ByteArrayOutputStream();\n        ByteArrayOutputStream out = new ByteArrayOutputStream();\n            \n        OrganizationDumpTO organizationTO = exportImportBusiness.exportOrganization();\n        exportImport.toJson(out, organizationTO);\n            \n        ZipOutputStream outzip = new ZipOutputStream(zippedDbOutputStream);\n        outzip.putNextEntry(new ZipEntry(\"fantbackup.json\"));\n        out.writeTo(outzip);\n        outzip.closeEntry();\n        outzip.close();\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\flyway\\\\V1_11__HashPasswordsWithBCrypt.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["V1_11__HashPasswordsWithBCrypt"], "AN": ["LOG"], "SCS_VariableDeclarator": ["LOG", "encoder", "readPasswords", "resultSet", "insertPassword", "count", "id", "password"], "SCS_ClassReference": ["LoggerFactory", "V1_11__HashPasswordsWithBCrypt", "connection", "readPasswords", "connection", "resultSet", "resultSet", "resultSet", "insertPassword", "encoder", "insertPassword", "insertPassword", "connection", "LOG", "LOG", "LOG"], "SCS_MethodInvocation": ["getLogger", "prepareStatement", "executeQuery", "prepareStatement", "next", "getInt", "getString", "setString", "encode", "setInt", "execute", "commit", "info", "error", "error"], "MN": ["migrate"], "PN": ["connection"], "SCS_VariableDeclaration": ["BCryptPasswordEncoder", "PreparedStatement", "ResultSet", "PreparedStatement", "int", "int", "String"], "SCS_MemberReference": ["id", "password", "password", "id", "count", "id", "id", "e"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.flyway;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\n\nimport com.googlecode.flyway.core.api.migration.jdbc.JdbcMigration;\n\npublic class V1_11__HashPasswordsWithBCrypt implements JdbcMigration {\n\n\tprivate static final Logger LOG = LoggerFactory.getLogger(V1_11__HashPasswordsWithBCrypt.class);\t\n\t\n\t@Override\n\tpublic void migrate(Connection connection) throws Exception {\n\n\t\ttry {\n\t\t\tBCryptPasswordEncoder encoder = new BCryptPasswordEncoder(10);\n\t\t\t\n\t\t\tPreparedStatement readPasswords = connection.prepareStatement(\"SELECT id, password FROM users\");\t\t\n\t\t\tResultSet resultSet = readPasswords.executeQuery();\n\n\t\t\tPreparedStatement insertPassword = connection.prepareStatement(\"UPDATE users SET passwd=? WHERE id=?\");\n\t\t\t\n\t\t\tint count = 0;\n\t\t\twhile(resultSet.next()) {\n\t\t\t\tint id = 0;\n\t\t\t\ttry {\n\t\t\t\t\tid = resultSet.getInt(\"id\");\n\t\t\t\t\tString password = resultSet.getString(\"password\");\n\n\t\t\t\t\tinsertPassword.setString(1, password==null ? null : encoder.encode(password));\n\t\t\t\t\tinsertPassword.setInt(2, id);\n\t\t\t\t\t\n\t\t\t\t\tinsertPassword.execute();\n\t\t\t\t\t\n\t\t\t\t\tif(count++ % 100 == 0) {\n\t\t\t\t\t\tconnection.commit();\n\t\t\t\t\t\tLOG.info(\"Converted password for user id \" + id);\n\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t} catch(Exception e) {\n\t\t\t\t\tLOG.error(\"Unable to convert password for user id \" + id);\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t} catch(Exception e) {\n\t\t\tLOG.error(\"Unable to convert passwords\");\n\t\t\tthrow e;\n\t\t}\n\t}\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\model\\\\AgilefantRevisionEntity.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["AgilefantRevisionEntity"], "SCS_ClassReference": ["AgilefantRevisionListener"], "SCS_MemberReference": ["NONE", "userName", "userName", "userName", "userId", "userId", "userId"], "AN": ["serialVersionUID", "userName", "userId"], "SCS_VariableDeclarator": ["serialVersionUID", "userName", "userId"], "MN": ["getUserName", "setUserName", "getUserId", "setUserId"], "PN": ["userName", "userId"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.model;\n\nimport javax.persistence.Entity;\nimport javax.persistence.Table;\nimport javax.xml.bind.annotation.XmlAccessType;\nimport javax.xml.bind.annotation.XmlAccessorType;\n\nimport org.hibernate.envers.DefaultRevisionEntity;\nimport org.hibernate.envers.RevisionEntity;\n\nimport fi.hut.soberit.agilefant.db.history.impl.AgilefantRevisionListener;\n\n@Entity  \n@RevisionEntity(AgilefantRevisionListener.class)\n@Table(name=\"agilefant_revisions\")\n@XmlAccessorType( XmlAccessType.NONE )\npublic class AgilefantRevisionEntity extends DefaultRevisionEntity {\n    \n    private static final long serialVersionUID = 5256226401100437772L;\n    \n    private String userName = \"\";\n    private int userId;\n\n    public String getUserName() {\n        return userName;\n    }\n\n    public void setUserName(String userName) {\n        this.userName = userName;\n    }\n\n    public int getUserId() {\n        return userId;\n    }\n\n    public void setUserId(int userId) {\n        this.userId = userId;\n    }\n    \n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\model\\\\AgilefantWidget.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["AgilefantWidget"], "SCS_MemberReference": ["NONE", "id", "id", "id", "type", "type", "type", "widgetCollection", "widgetCollection", "widgetCollection", "listNumber", "listNumber", "listNumber", "position", "position", "position", "objectId", "objectId", "objectId"], "AN": ["id", "type", "widgetCollection", "listNumber", "position", "objectId"], "SCS_VariableDeclarator": ["id", "type", "widgetCollection", "listNumber", "position", "objectId"], "MN": ["getId", "setId", "getType", "setType", "getWidgetCollection", "setWidgetCollection", "getListNumber", "setListNumber", "getPosition", "setPosition", "getObjectId", "setObjectId"], "PN": ["id", "type", "widgetCollection", "listNumber", "position", "objectId"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.model;\n\nimport javax.persistence.Column;\nimport javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.Id;\nimport javax.persistence.ManyToOne;\nimport javax.persistence.Table;\nimport javax.xml.bind.annotation.XmlAccessType;\nimport javax.xml.bind.annotation.XmlAccessorType;\n\n@Entity\n@Table(name = \"widgets\")\n@XmlAccessorType( XmlAccessType.NONE )\npublic class AgilefantWidget {\n        \n    @Id\n    @GeneratedValue\n    private int id;\n    \n    @Column(nullable = false)\n    private String type;\n    \n    @ManyToOne\n    private WidgetCollection widgetCollection;\n    \n    @Column\n    private Integer listNumber;\n    \n    @Column\n    private Integer position;\n    \n    @Column\n    private Integer objectId;\n    \n    public int getId() {\n        return id;\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    public String getType() {\n        return type;\n    }\n\n    public void setType(String type) {\n        this.type = type;\n    }\n\n    public WidgetCollection getWidgetCollection() {\n        return widgetCollection;\n    }\n\n    public void setWidgetCollection(WidgetCollection widgetCollection) {\n        this.widgetCollection = widgetCollection;\n    }\n\n    public Integer getListNumber() {\n        return listNumber;\n    }\n\n    public void setListNumber(Integer listNumber) {\n        this.listNumber = listNumber;\n    }\n\n    public Integer getPosition() {\n        return position;\n    }\n\n    public void setPosition(Integer position) {\n        this.position = position;\n    }\n\n\n    public Integer getObjectId() {\n        return objectId;\n    }\n\n\n    public void setObjectId(Integer objectId) {\n        this.objectId = objectId;\n    }\n    \n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\model\\\\Assignment.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["Assignment"], "SCS_MemberReference": ["NONE", "personalLoad", "personalLoad", "personalLoad", "user", "user", "backlog", "backlog", "backlog", "backlog", "backlog", "user", "user", "user", "AUTO", "id", "id", "id", "availability", "availability", "availability"], "AN": ["id", "backlog", "user", "personalLoad", "availability"], "SCS_VariableDeclarator": ["id", "backlog", "user", "personalLoad", "availability"], "MN": ["setPersonalLoad", "getPersonalLoad", "getBacklog", "setBacklog", "getUser", "setUser", "getId", "setId", "getAvailability", "setAvailability"], "PN": ["personalLoad", "backlog", "user", "id", "availability"], "SCS_ConstructorDeclaration": ["Assignment", "Assignment"], "CO": ["/**\n     * Deviation from project's default overhead.\n     */"], "CODE": "package fi.hut.soberit.agilefant.model;\n\nimport javax.persistence.AttributeOverride;\nimport javax.persistence.AttributeOverrides;\nimport javax.persistence.Column;\nimport javax.persistence.Embedded;\nimport javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.GenerationType;\nimport javax.persistence.Id;\nimport javax.persistence.ManyToOne;\nimport javax.persistence.Table;\nimport javax.xml.bind.annotation.XmlAccessType;\nimport javax.xml.bind.annotation.XmlAccessorType;\n\nimport org.hibernate.annotations.BatchSize;\nimport org.hibernate.envers.Audited;\n\nimport flexjson.JSON;\n\n@BatchSize(size=20)\n@Entity\n@Table(name = \"assignment\")\n@Audited\n@XmlAccessorType( XmlAccessType.NONE )\npublic class Assignment {\n     \n    private int id;\n    private Backlog backlog;\n    private User user;\n    private SignedExactEstimate personalLoad;\n    private int availability = 100;\n\n    /**\n     * Deviation from project's default overhead.\n     */\n    public void setPersonalLoad(SignedExactEstimate personalLoad) {\n        this.personalLoad = personalLoad;\n    }\n\n    @Embedded\n    @AttributeOverrides(@AttributeOverride(name = \"minorUnits\", column = @Column(name = \"delta_personal_load\")))\n    public SignedExactEstimate getPersonalLoad() {\n        return personalLoad;\n    }\n    \n    public Assignment() {\n    }\n\n    public Assignment(User user, Backlog backlog) {\n        this.user = user;\n        this.backlog = backlog;\n    }\n\n    @ManyToOne\n    @JSON(include = false)\n    public Backlog getBacklog() {\n        return backlog;\n    }\n\n    public void setBacklog(Backlog backlog) {\n        this.backlog = backlog;\n    }\n\n    @ManyToOne\n    @JSON(include = false)\n    public User getUser() {\n        return user;\n    }\n\n    public void setUser(User user) {\n        this.user = user;\n    }\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    public int getId() {\n        return id;\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    public int getAvailability() {\n        return availability;\n    }\n\n    public void setAvailability(int availability) {\n        this.availability = availability;\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\model\\\\Backlog.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["Backlog"], "SCS_MemberReference": ["SINGLE_TABLE", "STRING", "NONE", "AUTO", "id", "id", "id", "name", "name", "name", "description", "description", "description", "parent", "parent", "parent", "children", "children", "children", "stories", "stories", "stories", "hourEntries", "hourEntries", "hourEntries", "LAZY", "REMOVE", "storyRanks", "storyRanks", "storyRanks", "rootCandidate", "rootCandidate"], "AN": ["id", "name", "description", "parent", "children", "stories", "hourEntries", "storyRanks"], "SCS_VariableDeclarator": ["id", "name", "description", "parent", "children", "stories", "hourEntries", "storyRanks", "rootCandidate"], "MN": ["getId", "setId", "getName", "setName", "getDescription", "setDescription", "getParent", "isStandAlone", "setParent", "setChildren", "getChildren", "getStories", "setStories", "getHourEntries", "setHourEntries", "getStoryRanks", "setStoryRanks", "getRoot", "isProduct"], "PN": ["id", "name", "description", "parent", "children", "stories", "hourEntries", "storyRanks"], "SCS_ClassReference": ["StoryRank", "rootCandidate", "rootCandidate"], "SCS_VariableDeclaration": ["Backlog"], "SCS_MethodInvocation": ["getParent", "getParent"], "CO": ["/**\n * Abstract entity, a Hibernate entity bean, which represents a backlog.\n * <p>\n * All other entities providing backlog functionality inherit from this class.\n * Product, Project and Iteration are all backlogs.\n * <p>\n * Conceptually, a backlog is a work log, which can contain some stories,\n * which in turn can contain some tasks. An example hierarchy would be\n * <p>\n * backlog: \"iteration 3\" <br>\n * story : \"saving implemented\" <br>\n * task: \"implement saving .foo files\" <br>\n * <p>\n * Through Backlog, Stories are appendable as a child for the implementing\n * object.\n * \n * @see fi.hut.soberit.agilefant.model.Product\n * @see fi.hut.soberit.agilefant.model.Project\n * @see fi.hut.soberit.agilefant.model.Iteration\n * @see fi.hut.soberit.agilefant.model.Story\n * @see fi.hut.soberit.agilefant.model.Todo\n */", "// inheritance implemented in db using a single table", "// subclass types discriminated using string column", "/**\n     * Get the id of this object.\n     * <p>\n     * The id is unique among all Backlogs.\n     */", "// tag this field as the id", "// generate automatically", "/**\n     * Set the id of this object.\n     * <p>\n     * You shouldn't normally call this.\n     */", "/**\n     * Get the backlog's parent backlog.\n     * @return the parent backlog\n     */", "/**\n     * Set the backlog's parent backlog.\n     * @param parent the parent backlog\n     */", "/**\n     * Set the backlog's child backlogs.\n     * @param children\n     */", "/**\n     * Get the backlog's child backlogs.\n     * @return\n     */", "//    @XmlElementWrapper", "//    @XmlElement(name = \"backlog\")"], "CODE": "package fi.hut.soberit.agilefant.model;\n\nimport java.util.HashSet;\nimport java.util.Set;\n\nimport javax.persistence.CascadeType;\nimport javax.persistence.DiscriminatorColumn;\nimport javax.persistence.DiscriminatorType;\nimport javax.persistence.Entity;\nimport javax.persistence.FetchType;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.GenerationType;\nimport javax.persistence.Id;\nimport javax.persistence.Inheritance;\nimport javax.persistence.InheritanceType;\nimport javax.persistence.ManyToOne;\nimport javax.persistence.OneToMany;\nimport javax.persistence.Table;\nimport javax.persistence.Transient;\nimport javax.xml.bind.annotation.XmlAccessType;\nimport javax.xml.bind.annotation.XmlAccessorType;\nimport javax.xml.bind.annotation.XmlAttribute;\nimport javax.xml.bind.annotation.XmlElement;\nimport javax.xml.bind.annotation.XmlElementWrapper;\n\nimport org.hibernate.annotations.BatchSize;\nimport org.hibernate.annotations.Type;\nimport org.hibernate.envers.Audited;\nimport org.hibernate.envers.NotAudited;\n\nimport flexjson.JSON;\n\n/**\n * Abstract entity, a Hibernate entity bean, which represents a backlog.\n * <p>\n * All other entities providing backlog functionality inherit from this class.\n * Product, Project and Iteration are all backlogs.\n * <p>\n * Conceptually, a backlog is a work log, which can contain some stories,\n * which in turn can contain some tasks. An example hierarchy would be\n * <p>\n * backlog: \"iteration 3\" <br>\n * story : \"saving implemented\" <br>\n * task: \"implement saving .foo files\" <br>\n * <p>\n * Through Backlog, Stories are appendable as a child for the implementing\n * object.\n * \n * @see fi.hut.soberit.agilefant.model.Product\n * @see fi.hut.soberit.agilefant.model.Project\n * @see fi.hut.soberit.agilefant.model.Iteration\n * @see fi.hut.soberit.agilefant.model.Story\n * @see fi.hut.soberit.agilefant.model.Todo\n */\n@BatchSize(size=20)\n@Entity\n// inheritance implemented in db using a single table\n@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\n// subclass types discriminated using string column\n@DiscriminatorColumn(name = \"backlogtype\", discriminatorType = DiscriminatorType.STRING)\n@Table(name = \"backlogs\")\n@Audited\n@XmlAccessorType( XmlAccessType.NONE )\npublic abstract class Backlog implements TimesheetLoggable, NamedObject {\n\n    private int id;\n\n    private String name;\n\n    private String description;\n\n    private Backlog parent;\n    \n    private Set<Backlog> children = new HashSet<Backlog>();\n    \n    private Set<Story> stories = new HashSet<Story>();\n    \n    private Set<BacklogHourEntry> hourEntries = new HashSet<BacklogHourEntry>();\n    \n    private Set<StoryRank> storyRanks = new HashSet<StoryRank>();\n    \n    /**\n     * Get the id of this object.\n     * <p>\n     * The id is unique among all Backlogs.\n     */\n    // tag this field as the id\n    @Id\n    // generate automatically\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    @JSON\n    @XmlAttribute(name = \"objectId\")\n    public int getId() {\n        return id;\n    }\n\n    /**\n     * Set the id of this object.\n     * <p>\n     * You shouldn't normally call this.\n     */\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    @Type(type = \"escaped_truncated_varchar\")\n    @JSON\n    @XmlAttribute\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    @Type(type = \"escaped_text\")\n    @JSON\n    @XmlElement\n    public String getDescription() {\n        return description;\n    }\n\n    public void setDescription(String description) {\n        this.description = description;\n    }\n    \n    /**\n     * Get the backlog's parent backlog.\n     * @return the parent backlog\n     */\n    @JSON(include = false)\n    @ManyToOne\n    public Backlog getParent() {\n        return parent;\n    }\n\n    \n    @Transient\n    public abstract boolean isStandAlone();\n    \n    \n    /**\n     * Set the backlog's parent backlog.\n     * @param parent the parent backlog\n     */\n    public void setParent(Backlog parent) {\n        this.parent = parent;\n    }\n\n    /**\n     * Set the backlog's child backlogs.\n     * @param children\n     */\n    public void setChildren(Set<Backlog> children) {\n        this.children = children;\n    }\n\n    /**\n     * Get the backlog's child backlogs.\n     * @return\n     */\n    @OneToMany(mappedBy = \"parent\")\n    @NotAudited\n//    @XmlElementWrapper\n//    @XmlElement(name = \"backlog\")\n    public Set<Backlog> getChildren() {\n        return children;\n    }\n   \n    @OneToMany(mappedBy = \"backlog\")\n    @NotAudited\n    @XmlElementWrapper\n    @XmlElement(name = \"story\")\n    public Set<Story> getStories() {\n        return stories;\n    }\n    \n    public void setStories(Set<Story> stories) {\n        this.stories = stories;\n    }\n\n    @OneToMany(mappedBy=\"backlog\")\n    @NotAudited\n    public Set<BacklogHourEntry> getHourEntries() {\n        return hourEntries;\n    }\n\n    public void setHourEntries(Set<BacklogHourEntry> hourEntries) {\n        this.hourEntries = hourEntries;\n    }\n\n    @JSON(include=false)\n    @NotAudited\n    @OneToMany(fetch = FetchType.LAZY, mappedBy=\"backlog\", targetEntity=StoryRank.class, cascade=CascadeType.REMOVE)\n    public Set<StoryRank> getStoryRanks() {\n        return storyRanks;\n    }\n\n    public void setStoryRanks(Set<StoryRank> storyRanks) {\n        this.storyRanks = storyRanks;\n    }\n    \n    @Transient\n    public Backlog getRoot() {\n        Backlog rootCandidate = this;\n \n        while(rootCandidate.getParent() != null) {\n            rootCandidate = rootCandidate.getParent();\n        }\n        \n        return rootCandidate;\n    }\n\n    @Transient\n    public boolean isProduct() {\n        return false;\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\model\\\\BacklogHistoryEntry.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["BacklogHistoryEntry"], "SCS_MemberReference": ["NONE", "id", "id", "id", "project", "project", "project", "estimateSum", "estimateSum", "estimateSum", "doneSum", "doneSum", "doneSum", "branchMax", "branchMax", "branchMax", "timestamp", "timestamp", "timestamp", "rootSum", "rootSum", "rootSum"], "AN": ["id", "project", "branchMax", "estimateSum", "doneSum", "rootSum", "timestamp"], "SCS_VariableDeclarator": ["id", "project", "branchMax", "estimateSum", "doneSum", "rootSum", "timestamp"], "MN": ["getId", "setId", "getBacklog", "setBacklog", "getEstimateSum", "setEstimateSum", "getDoneSum", "setDoneSum", "getBranchMax", "setBranchMax", "getTimestamp", "setTimestamp", "getRootSum", "setRootSum"], "PN": ["id", "project", "estimateSum", "doneSum", "branchMax", "timestamp", "rootSum"], "CO": ["/**\n     * This class is used only to draw project burnups.\n     * If we allow general Backlogs then we would need to adjust\n     * other places to work properly (for example deletion to cascade).\n     * @return\n     */"], "CODE": "package fi.hut.soberit.agilefant.model;\n\nimport javax.persistence.Column;\nimport javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.Id;\nimport javax.persistence.ManyToOne;\nimport javax.persistence.Table;\nimport javax.xml.bind.annotation.XmlAccessType;\nimport javax.xml.bind.annotation.XmlAccessorType;\n\nimport org.hibernate.annotations.Parameter;\nimport org.hibernate.annotations.Type;\nimport org.joda.time.DateTime;\n\n@Entity\n@Table(name = \"history_backlogs\")\n@XmlAccessorType( XmlAccessType.NONE )\npublic class BacklogHistoryEntry {\n\n    private int id;\n\n    private Project project;\n    \n    private long branchMax;\n\n    private long estimateSum;\n\n    private long doneSum;\n    \n    private long rootSum;\n\n    private DateTime timestamp;\n\n    @Id\n    @GeneratedValue\n    public int getId() {\n        return id;\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    /**\n     * This class is used only to draw project burnups.\n     * If we allow general Backlogs then we would need to adjust\n     * other places to work properly (for example deletion to cascade).\n     * @return\n     */\n    @ManyToOne\n    public Project getBacklog() {\n        return project;\n    }\n\n    public void setBacklog(Project project) {\n        this.project = project;\n    }\n\n    public long getEstimateSum() {\n        return estimateSum;\n    }\n\n    public void setEstimateSum(long estimateSum) {\n        this.estimateSum = estimateSum;\n    }\n\n    public long getDoneSum() {\n        return doneSum;\n    }\n\n    public void setDoneSum(long doneSum) {\n        this.doneSum = doneSum;\n    }\n    \n    public long getBranchMax() {\n        return branchMax;\n    }\n    \n    public void setBranchMax(long branchMax) {\n        this.branchMax = branchMax;\n    }\n    \n    @Type(type = \"org.jadira.usertype.dateandtime.joda.PersistentDateTime\", parameters = @Parameter(name = \"databaseZone\", value = \"jvm\"))\n    public DateTime getTimestamp() {\n        return timestamp;\n    }\n\n    public void setTimestamp(DateTime timestamp) {\n        this.timestamp = timestamp;\n    }\n\n    @Column(nullable=false)\n    public long getRootSum() {\n        return rootSum;\n    }\n    \n    public void setRootSum(long rootSum) {\n        this.rootSum = rootSum;\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\model\\\\BacklogHourEntry.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["BacklogHourEntry"], "SCS_MemberReference": ["NONE", "backlog", "backlog", "backlog"], "AN": ["backlog"], "SCS_VariableDeclarator": ["backlog"], "MN": ["getBacklog", "setBacklog"], "PN": ["backlog"], "CO": ["/**\n * Hibernate entity bean which represents an hour entry owned by a backlog.\n * \n * Represents a job effort logged for a specific backlog.\n * \n * \n * @see fi.hut.soberit.agilefant.model.HourEntry\n * @author\n * \n */"], "CODE": "package fi.hut.soberit.agilefant.model;\n\nimport javax.persistence.Entity;\nimport javax.persistence.ManyToOne;\nimport javax.xml.bind.annotation.XmlAccessType;\nimport javax.xml.bind.annotation.XmlAccessorType;\n\nimport org.hibernate.annotations.BatchSize;\n\n/**\n * Hibernate entity bean which represents an hour entry owned by a backlog.\n * \n * Represents a job effort logged for a specific backlog.\n * \n * \n * @see fi.hut.soberit.agilefant.model.HourEntry\n * @author\n * \n */\n@Entity\n@BatchSize(size = 20)\n@XmlAccessorType( XmlAccessType.NONE )\npublic class BacklogHourEntry extends HourEntry {\n\n    private Backlog backlog;\n\n    @ManyToOne\n    public Backlog getBacklog() {\n        return backlog;\n    }\n\n    public void setBacklog(Backlog backlog) {\n        this.backlog = backlog;\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\model\\\\ExactDoubleEstimate.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["ExactDoubleEstimate"], "SCS_MemberReference": ["NONE", "minorUnits", "minorUnits", "minorUnits", "minorUnits", "US", "minorUnits", "otherMinorUnits", "thisMinorUnits", "otherMinorUnits", "thisMinorUnits", "minorUnits", "minorUnits", "minorUnits", "minorUnits", "minorUnits", "minorUnits", "minorUnits"], "SCS_ClassReference": ["XmlExactEstimateAdapter", "df", "Double", "df", null, "o", null, null, null, "String"], "AN": ["ZERO", "minorUnits"], "SCS_VariableDeclarator": ["ZERO", "minorUnits", "df", "thisMinorUnits", "otherMinorUnits"], "SCS_ConstructorDeclaration": ["ExactDoubleEstimate", "ExactDoubleEstimate"], "MN": ["setMinorUnits", "getMinorUnits", "compareTo", "doubleValue", "floatValue", "intValue", "longValue", "toString", "add"], "PN": ["minorUnits", "o", "minorUnits"], "SCS_VariableDeclaration": ["DecimalFormat", "double", "double"], "SCS_MethodInvocation": ["setDecimalFormatSymbols", "valueOf", "format", "getMinorUnits", "getMinorUnits", "floatValue", "intValue", "longValue", "valueOf"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.model;\n\nimport java.text.DecimalFormat;\nimport java.text.DecimalFormatSymbols;\nimport java.util.Locale;\n\nimport javax.persistence.Embeddable;\nimport javax.xml.bind.annotation.XmlAccessType;\nimport javax.xml.bind.annotation.XmlAccessorType;\nimport javax.xml.bind.annotation.XmlType;\nimport javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;\n\nimport fi.hut.soberit.agilefant.util.XmlExactEstimateAdapter;\n\n@SuppressWarnings(\"serial\")\n@Embeddable\n@XmlAccessorType( XmlAccessType.NONE )\n@XmlType\n@XmlJavaTypeAdapter(XmlExactEstimateAdapter.class)\npublic class ExactDoubleEstimate extends Number implements Comparable<ExactDoubleEstimate> {\n\n    public static final ExactDoubleEstimate ZERO = new ExactDoubleEstimate(0);\n    \n    private Double minorUnits;\n\n    public ExactDoubleEstimate() {\n    }\n\n    public ExactDoubleEstimate(double minorUnits) {\n        this.minorUnits = minorUnits;\n    }\n\n    public void setMinorUnits(Double minorUnits) {\n        this.minorUnits = minorUnits;\n    }\n\n    public Double getMinorUnits() {\n        DecimalFormat df = new DecimalFormat(\"#.0\");\n        df.setDecimalFormatSymbols(new DecimalFormatSymbols(Locale.US));\n        return Double.valueOf((df.format(minorUnits)));\n    }\n    \n    public int compareTo(ExactDoubleEstimate o) {\n        double thisMinorUnits = this.getMinorUnits();\n        double otherMinorUnits = o.getMinorUnits();\n        if (otherMinorUnits < thisMinorUnits) {\n            return -1;\n        }\n        else if (otherMinorUnits > thisMinorUnits) {\n            return 1;\n        }\n        return 0;\n    }\n\n    @Override\n    public double doubleValue() {\n        return this.minorUnits;\n    }\n\n    @Override\n    public float floatValue() {\n        return this.minorUnits.floatValue();\n    }\n\n    @Override\n    public int intValue() {\n        return this.minorUnits.intValue();\n    }\n\n    @Override\n    public long longValue() {\n        return this.minorUnits.longValue();\n    }\n    \n    public String toString() {\n        return String.valueOf(this.minorUnits);\n    }\n    \n    public void add(Double minorUnits) {\n        this.minorUnits += minorUnits;\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\model\\\\ExactEstimate.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["ExactEstimate"], "SCS_MemberReference": ["NONE", "minorUnits", "minorUnits", "minorUnits", "minorUnits", "minorUnits", "otherMinorUnits", "thisMinorUnits", "otherMinorUnits", "thisMinorUnits", "minorUnits", "minorUnits", "minorUnits", "minorUnits", "minorUnits", "minorUnits", "minorUnits"], "SCS_ClassReference": ["XmlExactEstimateAdapter", null, "o", "String"], "AN": ["ZERO", "minorUnits"], "SCS_VariableDeclarator": ["ZERO", "minorUnits", "thisMinorUnits", "otherMinorUnits"], "SCS_ConstructorDeclaration": ["ExactEstimate", "ExactEstimate"], "MN": ["setMinorUnits", "getMinorUnits", "compareTo", "doubleValue", "floatValue", "intValue", "longValue", "toString", "add"], "PN": ["minorUnits", "o", "minorUnits"], "SCS_VariableDeclaration": ["long", "long"], "SCS_MethodInvocation": ["getMinorUnits", "getMinorUnits", "valueOf"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.model;\n\nimport javax.persistence.Embeddable;\nimport javax.xml.bind.annotation.XmlAccessType;\nimport javax.xml.bind.annotation.XmlAccessorType;\nimport javax.xml.bind.annotation.XmlType;\nimport javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;\n\nimport com.fasterxml.jackson.annotation.JsonCreator;\n\nimport fi.hut.soberit.agilefant.util.XmlExactEstimateAdapter;\n\n@SuppressWarnings(\"serial\")\n@Embeddable\n@XmlAccessorType( XmlAccessType.NONE )\n@XmlType\n@XmlJavaTypeAdapter(XmlExactEstimateAdapter.class)\npublic class ExactEstimate extends Number implements Comparable<ExactEstimate> {\n\n    public static final ExactEstimate ZERO = new ExactEstimate(0);\n    \n    private Long minorUnits;\n\n    public ExactEstimate() {\n    }\n\n    @JsonCreator\n    public ExactEstimate(long minorUnits) {\n        this.minorUnits = minorUnits;\n    }\n\n    public void setMinorUnits(Long minorUnits) {\n        this.minorUnits = minorUnits;\n    }\n\n    public Long getMinorUnits() {\n        return minorUnits;\n    }\n    \n    public int compareTo(ExactEstimate o) {\n        long thisMinorUnits = this.getMinorUnits();\n        long otherMinorUnits = o.getMinorUnits();\n        if (otherMinorUnits < thisMinorUnits) {\n            return -1;\n        }\n        else if (otherMinorUnits > thisMinorUnits) {\n            return 1;\n        }\n        return 0;\n    }\n\n    @Override\n    public double doubleValue() {\n        return this.minorUnits;\n    }\n\n    @Override\n    public float floatValue() {\n        return this.minorUnits;\n    }\n\n    @Override\n    public int intValue() {\n        return ((Long)this.minorUnits).intValue();\n    }\n\n    @Override\n    public long longValue() {\n        return this.minorUnits;\n    }\n    \n    public String toString() {\n        return String.valueOf(this.minorUnits);\n    }\n    \n    public void add(Long minorUnits) {\n        this.minorUnits += minorUnits;\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\model\\\\Holiday.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["Holiday"], "SCS_MemberReference": ["NONE", "AUTO", "id", "id", "id", "user", "user", "user", "startDate", "startDate", "startDate", "endDate", "endDate", "endDate", "startDate", "endDate"], "AN": ["id", "user", "startDate", "endDate"], "SCS_VariableDeclarator": ["id", "user", "startDate", "endDate"], "MN": ["getId", "setId", "getUser", "setUser", "getStartDate", "setStartDate", "getEndDate", "setEndDate", "getInterval"], "PN": ["id", "user", "startDate", "endDate"], "SCS_ClassReference": [null, null], "SCS_MethodInvocation": ["getTime", "getTime"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.model;\n\nimport java.util.Date;\n\nimport javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.GenerationType;\nimport javax.persistence.Id;\nimport javax.persistence.ManyToOne;\nimport javax.persistence.Transient;\nimport javax.xml.bind.annotation.XmlAccessType;\nimport javax.xml.bind.annotation.XmlAccessorType;\n\nimport org.joda.time.Interval;\n\n@Entity\n@XmlAccessorType( XmlAccessType.NONE )\npublic class Holiday {\n    private int id;\n    private User user;\n    private Date startDate;\n    private Date endDate;\n\n    \n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    public int getId() {\n        return id;\n    }\n    public void setId(int id) {\n        this.id = id;\n    }\n    @ManyToOne\n    public User getUser() {\n        return user;\n    }\n    public void setUser(User user) {\n        this.user = user;\n    }\n    public Date getStartDate() {\n        return startDate;\n    }\n\n    public void setStartDate(Date startDate) {\n        this.startDate = startDate;\n    }\n\n    public Date getEndDate() {\n        return endDate;\n    }\n    public void setEndDate(Date endDate) {\n        this.endDate = endDate;\n    }\n    \n    @Transient\n    public Interval getInterval() {\n        return new Interval(this.startDate.getTime(),this.endDate.getTime());\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\model\\\\HolidayAnomaly.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["HolidayAnomaly"], "SCS_MemberReference": ["NONE", "AUTO", "id", "id", "id", "user", "user", "user", "date", "date", "date"], "AN": ["id", "user", "date"], "SCS_VariableDeclarator": ["id", "user", "date"], "MN": ["getId", "setId", "getUser", "setUser", "getDate", "setDate"], "PN": ["id", "user", "date"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.model;\n\nimport java.sql.Date;\n\nimport javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.GenerationType;\nimport javax.persistence.Id;\nimport javax.persistence.ManyToOne;\nimport javax.xml.bind.annotation.XmlAccessType;\nimport javax.xml.bind.annotation.XmlAccessorType;\n\n@Entity\n@XmlAccessorType( XmlAccessType.NONE )\npublic class HolidayAnomaly {\n    private int id;\n    private User user;\n    private Date date;\n    \n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    public int getId() {\n        return id;\n    }\n    public void setId(int id) {\n        this.id = id;\n    }\n    @ManyToOne\n    public User getUser() {\n        return user;\n    }\n    public void setUser(User user) {\n        this.user = user;\n    }\n    public Date getDate() {\n        return date;\n    }\n    public void setDate(Date date) {\n        this.date = date;\n    }\n    \n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\model\\\\HourEntry.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["HourEntry"], "SCS_MemberReference": ["SINGLE_TABLE", "NONE", "AUTO", "id", "id", "id", "user", "date", "date", "date", "user", "user", "description", "description", "description", "minutesSpent", "minutesSpent", "minutesSpent"], "AN": ["id", "date", "minutesSpent", "user", "description"], "SCS_VariableDeclarator": ["id", "date", "minutesSpent", "user", "description"], "SCS_ConstructorDeclaration": ["HourEntry", "HourEntry"], "SCS_ClassReference": [null, "other", null, "other", null, "other", null, "other", "XmlDateTimeAdapter"], "SCS_MethodInvocation": ["setDate", "getDate", "setDescription", "getDescription", "setMinutesSpent", "getMinutesSpent", "setUser", "getUser"], "MN": ["getId", "setId", "getUser", "getDate", "setDate", "setUser", "getDescription", "setDescription", "isBacklogEffortEntry", "isStoryEffortEntry", "getMinutesSpent", "setMinutesSpent"], "PN": ["id", "date", "user", "description", "minutesSpent"], "CO": ["/**\n * Hibernate entity bean which represents an hour entry.\n * \n * Conceptually, hour entry represents logged effort for a given user in given\n * date with given description. One entry can be associated with only one user.\n * Hour entry is the base information container for the timesheet functionality.\n * \n * This is a base class for all logged efforts and thus has no information\n * whatsoever of the parent object. Child classes for HourEntry add ownership\n * information. Class is not defined abstract as it us used as common logged\n * effort information container.\n * \n * @see fi.hut.soberit.agilefant.model.StoryHourEntry\n * @see fi.hut.soberit.agilefant.model.BacklogHourEntry\n * @author Pasi Pekkanen, Roni Tammisalo\n * \n */", "/**\n     * Get the id of this object.\n     * <p>\n     * The id is unique among all tasks.\n     */", "// tag this field as the id", "// generate automatically"], "CODE": "package fi.hut.soberit.agilefant.model;\n\nimport javax.persistence.Column;\nimport javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.GenerationType;\nimport javax.persistence.Id;\nimport javax.persistence.Inheritance;\nimport javax.persistence.InheritanceType;\nimport javax.persistence.ManyToOne;\nimport javax.persistence.Table;\nimport javax.persistence.Transient;\nimport javax.xml.bind.annotation.XmlAccessType;\nimport javax.xml.bind.annotation.XmlAccessorType;\nimport javax.xml.bind.annotation.XmlAttribute;\nimport javax.xml.bind.annotation.XmlElement;\nimport javax.xml.bind.annotation.XmlTransient;\nimport javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;\n\nimport org.hibernate.annotations.BatchSize;\nimport org.hibernate.annotations.Parameter;\nimport org.hibernate.annotations.Type;\nimport org.joda.time.DateTime;\n\nimport fi.hut.soberit.agilefant.util.XmlDateTimeAdapter;\n\n/**\n * Hibernate entity bean which represents an hour entry.\n * \n * Conceptually, hour entry represents logged effort for a given user in given\n * date with given description. One entry can be associated with only one user.\n * Hour entry is the base information container for the timesheet functionality.\n * \n * This is a base class for all logged efforts and thus has no information\n * whatsoever of the parent object. Child classes for HourEntry add ownership\n * information. Class is not defined abstract as it us used as common logged\n * effort information container.\n * \n * @see fi.hut.soberit.agilefant.model.StoryHourEntry\n * @see fi.hut.soberit.agilefant.model.BacklogHourEntry\n * @author Pasi Pekkanen, Roni Tammisalo\n * \n */\n@BatchSize(size = 20)\n@Entity\n@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\n@Table(name = \"hourentries\")\n@XmlAccessorType( XmlAccessType.NONE )\npublic class HourEntry {\n\n    private int id;\n\n    private DateTime date;\n\n    private long minutesSpent;\n\n    private User user;\n\n    private String description;\n\n    public HourEntry() { }\n    \n    public HourEntry(HourEntry other)\n    {\n        this.setDate(other.getDate());\n        this.setDescription(other.getDescription());\n        this.setMinutesSpent(other.getMinutesSpent());\n        this.setUser(other.getUser());\n    }\n    \n    /**\n     * Get the id of this object.\n     * <p>\n     * The id is unique among all tasks.\n     */\n    // tag this field as the id\n    @Id\n    // generate automatically\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    @XmlAttribute(name = \"objectId\")\n    public int getId() {\n        return this.id;\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n    \n    @ManyToOne(optional = false)\n    @XmlElement\n    public User getUser() {\n        return this.user;\n    }\n\n    @Type(type = \"org.jadira.usertype.dateandtime.joda.PersistentDateTime\", parameters = @Parameter(name = \"databaseZone\", value = \"jvm\"))\n    @XmlJavaTypeAdapter(XmlDateTimeAdapter.class)\n    @XmlAttribute\n    public DateTime getDate() {\n        return this.date;\n    }\n\n    public void setDate(DateTime date) {\n        this.date = date;\n    }\n\n    public void setUser(User user) {\n        this.user = user;\n    }\n    \n    @Type(type = \"escaped_text\")\n    @XmlElement\n    public String getDescription() {\n        return this.description;\n    }\n\n    public void setDescription(String description) {\n        this.description = description;\n    }\n\n    @Transient\n    @XmlTransient\n    public boolean isBacklogEffortEntry() {\n        return (this instanceof BacklogHourEntry);\n    }\n\n    @Transient\n    @XmlTransient\n    public boolean isStoryEffortEntry() {\n        return (this instanceof StoryHourEntry);\n    }\n\n    @Column(nullable = false)\n    @XmlAttribute\n    public long getMinutesSpent() {\n        return minutesSpent;\n    }\n\n    public void setMinutesSpent(long minutesSpent) {\n        this.minutesSpent = minutesSpent;\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\model\\\\Iteration.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["Iteration"], "SCS_MemberReference": ["NONE", "endDate", "endDate", "endDate", "startDate", "startDate", "startDate", "backlogSize", "backlogSize", "backlogSize", "tasks", "tasks", "tasks", "REMOVE", "assignments", "assignments", "assignments", "REMOVE", "historyEntries", "historyEntries", "historyEntries", "baselineLoad", "baselineLoad", "baselineLoad", "readonlyToken", "readonlyToken", "readonlyToken", "assignedStories", "assignedStories", "stories", "teams", "teams", "teams"], "AN": ["startDate", "endDate", "backlogSize", "assignments", "tasks", "historyEntries", "baselineLoad", "readonlyToken", "assignedStories", "teams"], "SCS_VariableDeclarator": ["startDate", "endDate", "backlogSize", "assignments", "tasks", "historyEntries", "baselineLoad", "readonlyToken", "assignedStories", "teams"], "MN": ["getEndDate", "setEndDate", "getStartDate", "setStartDate", "getBacklogSize", "setBacklogSize", "getTasks", "setTasks", "getAssignments", "setAssignments", "getHistoryEntries", "setHistoryEntries", "getBaselineLoad", "setBaselineLoad", "setReadonlyToken", "getReadonlyToken", "getAssignedStories", "setAssignedStories", "isStandAlone", "getTeams", "setTeams"], "PN": ["endDate", "startDate", "backlogSize", "tasks", "assignments", "historyEntries", "baselineLoad", "readonlyToken", "stories", "teams"], "SCS_ClassReference": ["XmlDateTimeAdapter", "XmlDateTimeAdapter", "XmlExactEstimateAdapter", "Assignment", "XmlExactEstimateAdapter", null, "Team"], "SCS_MethodInvocation": ["getParent"], "CO": ["/**\n * A Hibernate entity bean which represents an iteration.\n * <p>\n * Conceptually, an iteration is a type of a backlog. A iteration-backlog\n * represents work (stories, tasks) to be done during an iteration.\n * Iteration is a time period, a conceptual tool, used to divide and manage\n * work. It's usually a few weeks in length.\n * <p>\n * Since a project is a backlog, it can contain stories, which, in turn,\n * are smaller containers for work. An iteration is a part of a bigger work\n * container, the project.\n * <p>\n * An iteration is part of a project. Start- and ending dates can be defined, as\n * well as effort estimate.\n * \n * @see fi.hut.soberit.agilefant.model.Backlog\n * @see fi.hut.soberit.agilefant.model.Story\n * @see fi.hut.soberit.agilefant.model.Iteration\n */", "/**\n     * Get the iteration's teams\n     * \n     * return the teams\n     */", "/**\n     * Set the iterations's teams.\n     * \n     * @param teams the teams to be set\n     */"], "CODE": "package fi.hut.soberit.agilefant.model;\n\nimport java.util.Collection;\nimport java.util.HashSet;\nimport java.util.Set;\n\nimport javax.persistence.AttributeOverride;\nimport javax.persistence.AttributeOverrides;\nimport javax.persistence.Column;\nimport javax.persistence.Embedded;\nimport javax.persistence.Entity;\nimport javax.persistence.JoinColumn;\nimport javax.persistence.JoinTable;\nimport javax.persistence.ManyToMany;\nimport javax.persistence.OneToMany;\nimport javax.persistence.Transient;\nimport javax.xml.bind.annotation.XmlAccessType;\nimport javax.xml.bind.annotation.XmlAccessorType;\nimport javax.xml.bind.annotation.XmlAttribute;\nimport javax.xml.bind.annotation.XmlElement;\nimport javax.xml.bind.annotation.XmlElementWrapper;\nimport javax.xml.bind.annotation.XmlRootElement;\nimport javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;\n\nimport org.hibernate.annotations.BatchSize;\nimport org.hibernate.annotations.Parameter;\nimport org.hibernate.annotations.Type;\nimport org.hibernate.envers.Audited;\nimport org.hibernate.envers.NotAudited;\nimport org.joda.time.DateTime;\n\nimport fi.hut.soberit.agilefant.util.XmlDateTimeAdapter;\nimport fi.hut.soberit.agilefant.util.XmlExactEstimateAdapter;\nimport flexjson.JSON;\n\n/**\n * A Hibernate entity bean which represents an iteration.\n * <p>\n * Conceptually, an iteration is a type of a backlog. A iteration-backlog\n * represents work (stories, tasks) to be done during an iteration.\n * Iteration is a time period, a conceptual tool, used to divide and manage\n * work. It's usually a few weeks in length.\n * <p>\n * Since a project is a backlog, it can contain stories, which, in turn,\n * are smaller containers for work. An iteration is a part of a bigger work\n * container, the project.\n * <p>\n * An iteration is part of a project. Start- and ending dates can be defined, as\n * well as effort estimate.\n * \n * @see fi.hut.soberit.agilefant.model.Backlog\n * @see fi.hut.soberit.agilefant.model.Story\n * @see fi.hut.soberit.agilefant.model.Iteration\n */\n@Entity\n@BatchSize(size = 20)\n@Audited\n@XmlRootElement\n@XmlAccessorType( XmlAccessType.NONE )\npublic class Iteration extends Backlog implements Schedulable, TaskContainer {\n \n    private DateTime startDate;\n\n    private DateTime endDate;\n    \n    private ExactEstimate backlogSize = new ExactEstimate(0);\n    \n    private Set<Assignment> assignments = new HashSet<Assignment>();\n    \n    private Set<Task> tasks = new HashSet<Task>();\n\n    private Set<IterationHistoryEntry> historyEntries = new HashSet<IterationHistoryEntry>();\n    \n    private ExactEstimate baselineLoad = new ExactEstimate(0);\n    \n    private String readonlyToken;\n    \n    private Set<Story> assignedStories = new HashSet<Story>();\n    \n    private Collection<Team> teams = new HashSet<Team>();\n\n    @JSON\n    @Type(type = \"org.jadira.usertype.dateandtime.joda.PersistentDateTime\", parameters = @Parameter(name = \"databaseZone\", value = \"jvm\"))\n    @XmlAttribute\n    @XmlJavaTypeAdapter(XmlDateTimeAdapter.class)\n    public DateTime getEndDate() {\n        return endDate;\n    }\n    \n    public void setEndDate(DateTime endDate) {\n        this.endDate = endDate;\n    }\n\n    \n    @JSON\n    @Type(type = \"org.jadira.usertype.dateandtime.joda.PersistentDateTime\", parameters = @Parameter(name = \"databaseZone\", value = \"jvm\"))\n    @XmlAttribute\n    @XmlJavaTypeAdapter(XmlDateTimeAdapter.class)\n    public DateTime getStartDate() {\n        return startDate;\n    }\n    \n    public void setStartDate(DateTime startDate) {\n        this.startDate = startDate;\n    }\n\n\n    @JSON\n    @Embedded\n    @AttributeOverrides(@AttributeOverride(name = \"minorUnits\", column = @Column(name = \"backlogSize\")))\n    @XmlAttribute\n    @XmlJavaTypeAdapter(XmlExactEstimateAdapter.class)\n    public ExactEstimate getBacklogSize() {\n        return backlogSize;\n    }\n\n    public void setBacklogSize(ExactEstimate backlogSize) {\n        this.backlogSize = backlogSize;\n    }\n    \n    \n    @OneToMany(mappedBy = \"iteration\")\n    @JSON(include = false)\n    @NotAudited\n    @XmlElementWrapper\n    @XmlElement(name = \"task\")\n    public Set<Task> getTasks() {\n        return tasks;\n    }\n    \n    public void setTasks(Set<Task> tasks) {\n        this.tasks = tasks;\n    }\n    \n    @OneToMany(targetEntity = fi.hut.soberit.agilefant.model.Assignment.class,\n            mappedBy = \"backlog\", cascade = javax.persistence.CascadeType.REMOVE)\n    @JSON(include = false)\n    public Set<Assignment> getAssignments() {\n        return assignments;\n    }\n    \n    public void setAssignments(Set<Assignment> assignments) {\n        this.assignments = assignments;\n    }\n \n    @OneToMany(mappedBy = \"iteration\", cascade=javax.persistence.CascadeType.REMOVE)\n    @JSON(include = false)\n    @NotAudited\n    public Set<IterationHistoryEntry> getHistoryEntries() {\n        return historyEntries;\n    }\n\n    public void setHistoryEntries(Set<IterationHistoryEntry> historyEntries) {\n        this.historyEntries = historyEntries;\n    }\n    \n    @Embedded\n    @AttributeOverrides(@AttributeOverride(name = \"minorUnits\", column = @Column(name = \"baselineLoad\")))\n    @XmlAttribute\n    @XmlJavaTypeAdapter(XmlExactEstimateAdapter.class)\n    public ExactEstimate getBaselineLoad() {\n        return baselineLoad;\n    }\n\n    public void setBaselineLoad(ExactEstimate baselineLoad) {\n        this.baselineLoad = baselineLoad;\n    }\n    \n    public void setReadonlyToken(String readonlyToken) {\n        this.readonlyToken = readonlyToken;\n    }\n    \n    @Column(unique=true)\n    @JSON\n    @NotAudited\n    public String getReadonlyToken() {\n        return readonlyToken;\n    }\n    \n    @OneToMany(mappedBy = \"iteration\")\n    @NotAudited\n    @XmlElementWrapper\n    @XmlElement(name = \"story\")\n    public Set<Story> getAssignedStories() {\n        return assignedStories;\n    }\n    \n    public void setAssignedStories(Set<Story> stories) {\n        this.assignedStories = stories;\n    }\n\n    @Transient\n    @Override\n    public boolean isStandAlone() {\n        return this.getParent() == null;\n    }\n    \n    /**\n     * Get the iteration's teams\n     * \n     * return the teams\n     */\n    @ManyToMany(targetEntity = Team.class)\n    @JoinTable(name = \"team_iteration\", joinColumns = { @JoinColumn(name = \"Iteration_id\") }, inverseJoinColumns = { @JoinColumn(name = \"Team_id\") })\n    @BatchSize(size = 5)\n    @JSON(include = false)\n    @NotAudited\n    public Collection<Team> getTeams() {\n        return teams;\n    }\n    \n    /**\n     * Set the iterations's teams.\n     * \n     * @param teams the teams to be set\n     */\n    public void setTeams(Collection<Team> teams) {\n        this.teams = teams;\n    }\n    \n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\model\\\\IterationHistoryEntry.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["IterationHistoryEntry"], "SCS_MemberReference": ["NONE", "AUTO", "id", "id", "id", "iteration", "iteration", "iteration", "effortLeftSum", "effortLeftSum", "effortLeftSum", "originalEstimateSum", "originalEstimateSum", "originalEstimateSum", "deltaOriginalEstimate", "deltaOriginalEstimate", "deltaOriginalEstimate", "timestamp", "timestamp", "timestamp"], "AN": ["id", "iteration", "effortLeftSum", "originalEstimateSum", "deltaOriginalEstimate", "timestamp"], "SCS_VariableDeclarator": ["id", "iteration", "effortLeftSum", "originalEstimateSum", "deltaOriginalEstimate", "timestamp"], "MN": ["getId", "setId", "getIteration", "setIteration", "getEffortLeftSum", "setEffortLeftSum", "getOriginalEstimateSum", "setOriginalEstimateSum", "getDeltaOriginalEstimate", "setDeltaOriginalEstimate", "getTimestamp", "setTimestamp"], "PN": ["id", "iteration", "effortLeftSum", "originalEstimateSum", "deltaOriginalEstimate", "timestamp"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.model;\n\nimport javax.persistence.Column;\nimport javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.GenerationType;\nimport javax.persistence.Id;\nimport javax.persistence.ManyToOne;\nimport javax.persistence.Table;\nimport javax.persistence.UniqueConstraint;\nimport javax.xml.bind.annotation.XmlAccessType;\nimport javax.xml.bind.annotation.XmlAccessorType;\n\nimport org.hibernate.annotations.Type;\nimport org.joda.time.LocalDate;\n\n@Entity\n@Table(name = \"history_iterations\", uniqueConstraints = @UniqueConstraint(columnNames={\"iteration_id\",\"timestamp\"}))\n@XmlAccessorType( XmlAccessType.NONE )\npublic class IterationHistoryEntry {\n\n    private int id;\n\n    private Iteration iteration;\n\n    private long effortLeftSum;\n\n    private long originalEstimateSum;\n\n    private long deltaOriginalEstimate;\n\n    private LocalDate timestamp;\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    public int getId() {\n        return id;\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    @ManyToOne(optional = false)\n    public Iteration getIteration() {\n        return iteration;\n    }\n\n    public void setIteration(Iteration iteration) {\n        this.iteration = iteration;\n    }\n\n    public long getEffortLeftSum() {\n        return effortLeftSum;\n    }\n\n    public void setEffortLeftSum(long effortLeftSum) {\n        this.effortLeftSum = effortLeftSum;\n    }\n\n    public long getOriginalEstimateSum() {\n        return originalEstimateSum;\n    }\n\n    public void setOriginalEstimateSum(long originalEstimateSum) {\n        this.originalEstimateSum = originalEstimateSum;\n    }\n\n    public long getDeltaOriginalEstimate() {\n        return deltaOriginalEstimate;\n    }\n\n    public void setDeltaOriginalEstimate(long deltaOriginalEstimate) {\n        this.deltaOriginalEstimate = deltaOriginalEstimate;\n    }\n\n    @Type(type = \"org.jadira.usertype.dateandtime.joda.PersistentLocalDate\")\n    @Column(nullable = false)\n    public LocalDate getTimestamp() {\n        return timestamp;\n    }\n    \n    public void setTimestamp(LocalDate timestamp) {\n        this.timestamp = timestamp;\n    }\n\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\model\\\\Label.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["Label"], "SCS_MemberReference": ["NONE", "creator", "displayName", "id", "name", "story", "timestamp", "creator", "creator", "displayName", "displayName", "id", "id", "name", "ENGLISH", "story", "story", "timestamp", "timestamp"], "AN": ["serialVersionUID", "creator", "displayName", "id", "name", "story", "timestamp"], "SCS_VariableDeclarator": ["serialVersionUID", "creator", "displayName", "id", "name", "story", "timestamp"], "SCS_ConstructorDeclaration": ["Label", "Label"], "SCS_ClassReference": [null, "other", null, "other", null, "other", null, "other", null, "other", "name"], "SCS_MethodInvocation": ["setCreator", "getCreator", "setDisplayName", "getDisplayName", "setName", "getName", "setStory", "getStory", "setTimestamp", "getTimestamp", "toLowerCase"], "MN": ["getCreator", "getDisplayName", "getId", "getName", "getStory", "getTimestamp", "setCreator", "setDisplayName", "setId", "setName", "setStory", "setTimestamp"], "PN": ["creator", "displayName", "id", "name", "story", "timestamp"], "CO": ["/*\n     * Non-default setter!\n     */"], "CODE": "package fi.hut.soberit.agilefant.model;\n\nimport java.io.Serializable;\nimport java.util.Locale;\n\nimport javax.persistence.Column;\nimport javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.Id;\nimport javax.persistence.ManyToOne;\nimport javax.persistence.Table;\nimport javax.xml.bind.annotation.XmlAccessType;\nimport javax.xml.bind.annotation.XmlAccessorType;\nimport javax.xml.bind.annotation.XmlValue;\n\nimport org.hibernate.annotations.Index;\nimport org.hibernate.annotations.Parameter;\nimport org.hibernate.annotations.Type;\nimport org.joda.time.DateTime;\n\nimport flexjson.JSON;\n\n@Entity\n@Table(name = \"labels\")\n@XmlAccessorType( XmlAccessType.NONE )\npublic class Label implements NamedObject, Serializable {\n\n    private static final long serialVersionUID = 175091151639389468L;\n\n    public Label() { }\n    \n    public Label(Label other)\n    {\n        this.setCreator(other.getCreator());\n        this.setDisplayName(other.getDisplayName());\n        this.setName(other.getName());\n        this.setStory(other.getStory());\n        this.setTimestamp(other.getTimestamp());\n    }\n    \n    @ManyToOne\n    private User creator;\n\n    @Column(nullable = false)\n    private String displayName;\n\n    @Id\n    @GeneratedValue\n    private Integer id;\n\n    @Index(name = \"label_name\")\n    @Column(nullable = false)\n    private String name;\n\n    @ManyToOne\n    private Story story;\n\n    @Type(type = \"org.jadira.usertype.dateandtime.joda.PersistentDateTime\", parameters = @Parameter(name = \"databaseZone\", value = \"jvm\"))\n    private DateTime timestamp;\n\n    public User getCreator() {\n        return creator;\n    }\n\n    public String getDisplayName() {\n        return displayName;\n    }\n\n    public int getId() {\n        return id;\n    }\n\n    @XmlValue\n    public String getName() {\n        return name;\n    }\n\n    @JSON(include = false)\n    public Story getStory() {\n        return story;\n    }\n\n    public DateTime getTimestamp() {\n        return timestamp;\n    }\n\n    public void setCreator(User creator) {\n        this.creator = creator;\n    }\n\n    public void setDisplayName(String displayName) {\n        this.displayName = displayName;\n    }\n\n    public void setId(Integer id) {\n        this.id = id;\n    }\n\n    /*\n     * Non-default setter!\n     */\n    public void setName(String name) {\n        this.name = name.toLowerCase(Locale.ENGLISH);\n    }\n\n    public void setStory(Story story) {\n        this.story = story;\n    }\n\n    public void setTimestamp(DateTime timestamp) {\n        this.timestamp = timestamp;\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\model\\\\LabelContainer.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["LabelContainer"], "MN": ["getLabels"], "PN": [], "CO": [], "CODE": "package fi.hut.soberit.agilefant.model;\n\nimport java.util.Set;\n\npublic interface LabelContainer {\n    \n    public Set<Label> getLabels();\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\model\\\\Login.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["Login"], "SCS_MemberReference": ["NONE", "AUTO", "id", "id", "id", "user", "user", "user", "time", "time", "time"], "AN": ["id", "user", "time"], "SCS_VariableDeclarator": ["id", "user", "time"], "MN": ["getId", "setId", "getUser", "setUser", "getTime", "setTime"], "PN": ["id", "user", "time"], "SCS_ClassReference": ["XmlDateTimeAdapter"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.model;\n\nimport javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.GenerationType;\nimport javax.persistence.Id;\nimport javax.persistence.ManyToOne;\nimport javax.persistence.Table;\nimport javax.xml.bind.annotation.XmlAccessType;\nimport javax.xml.bind.annotation.XmlAccessorType;\nimport javax.xml.bind.annotation.XmlAttribute;\nimport javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;\n\nimport org.hibernate.annotations.BatchSize;\nimport org.hibernate.annotations.Parameter;\nimport org.hibernate.annotations.Type;\nimport org.joda.time.DateTime;\n\nimport fi.hut.soberit.agilefant.util.XmlDateTimeAdapter;\n\n@BatchSize(size = 20)\n@Entity\n@Table(name = \"logins\")\n@XmlAccessorType( XmlAccessType.NONE )\npublic class Login {\n    private int id;\n    private User user;\n    private DateTime time;\n    \n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    public int getId() {\n        return id;\n    }\n    public void setId(int id) {\n        this.id = id;\n    }\n    @ManyToOne\n    public User getUser() {\n        return user;\n    }\n    public void setUser(User user) {\n        this.user = user;\n    }\n    @Type(type = \"org.jadira.usertype.dateandtime.joda.PersistentDateTime\", parameters = @Parameter(name = \"databaseZone\", value = \"jvm\"))\n    @XmlJavaTypeAdapter(XmlDateTimeAdapter.class)\n    @XmlAttribute\n    public DateTime getTime() {\n        return time;\n    }\n    public void setTime(DateTime time) {\n        this.time = time;\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\model\\\\NamedObject.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["NamedObject"], "MN": ["getName", "getId"], "PN": [], "CO": [], "CODE": "package fi.hut.soberit.agilefant.model;\n\npublic interface NamedObject {\n    public String getName();\n    public int getId();\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\model\\\\package-info.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "SCS_ClassReference": ["StringTruncateFilter", "StringEscapeFilter", "StringEscapeFilter", "StringEscapeFilter"], "CN": [], "CO": ["/**\n * Data model package, consists of Hibernate entity beans that map the contents\n * of the database to the object oriented model.\n */", "/*\n * Package-level typedefs to avoid writing the long type definitions all the\n * time.\n */"], "CODE": "/**\n * Data model package, consists of Hibernate entity beans that map the contents\n * of the database to the object oriented model.\n */\n@TypeDefs(\n/*\n * Package-level typedefs to avoid writing the long type definitions all the\n * time.\n */\n{\n        @TypeDef(name = \"truncated_varchar\", typeClass = fi.hut.soberit.agilefant.db.hibernate.StringTruncateFilter.class, parameters = { @Parameter(name = \"subtypes\", value = \"fi.hut.soberit.agilefant.db.hibernate.VarcharUserType\") }),\n        @TypeDef(name = \"escaped_varchar\", typeClass = fi.hut.soberit.agilefant.db.hibernate.StringEscapeFilter.class, parameters = { @Parameter(name = \"subtypes\", value = \"fi.hut.soberit.agilefant.db.hibernate.VarcharUserType\") }),\n        @TypeDef(name = \"escaped_truncated_varchar\", typeClass = fi.hut.soberit.agilefant.db.hibernate.StringEscapeFilter.class, parameters = { @Parameter(name = \"subtypes\", value = \"fi.hut.soberit.agilefant.db.hibernate.StringTruncateFilter fi.hut.soberit.agilefant.db.hibernate.VarcharUserType\") }),\n        @TypeDef(name = \"escaped_text\", typeClass = fi.hut.soberit.agilefant.db.hibernate.StringEscapeFilter.class, parameters = { @Parameter(name = \"subtypes\", value = \"fi.hut.soberit.agilefant.db.hibernate.TextUserType\") }) })\npackage fi.hut.soberit.agilefant.model;\n\nimport org.hibernate.annotations.Parameter;\nimport org.hibernate.annotations.TypeDef;\nimport org.hibernate.annotations.TypeDefs;\n\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\model\\\\Product.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["Product"], "SCS_MemberReference": ["NONE", "teams", "teams", "teams", "bl", "bl", "projects", "bl", "bl", "iterations"], "AN": ["teams"], "SCS_VariableDeclarator": ["teams", "projects", "bl", "iterations", "bl"], "MN": ["getTeams", "setTeams", "getProjects", "getIterations", "isStandAlone", "isProduct"], "PN": ["teams"], "SCS_ClassReference": ["Team", null, "projects", null, "iterations"], "SCS_VariableDeclaration": ["List", "Backlog", "List", "Backlog"], "SCS_MethodInvocation": ["getChildren", "add", "getChildren", "add"], "CO": ["/**\n * Hibernate entity bean representing a product.\n * <p>\n * Conceptually, a product is a type of a backlog. A project-backlog represents\n * work (projects, iterations, stories) done / to be done for the\n * product.\n * <p>\n * A product contains projects, which are some partial outcomes of the product.\n * For example, different versions of the product or some documentation.\n * <p>\n * Product is at the top level of the hierarchy and thus is the biggest container\n * of work. Since a project is a backlog, it can contain stories, which,\n * in turn, are smaller containers for work.\n * <p>\n * An example product would be \"Acme WordProcessor\" or \"Agilefant 07\".\n * \n * @see fi.hut.soberit.agilefant.model.Project\n */", "/**\n     * Get the product's teams\n     * \n     * return the teams\n     */", "/**\n     * Set the team's products.\n     * \n     * @param products the products to be set\n     */"], "CODE": "package fi.hut.soberit.agilefant.model;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashSet;\nimport java.util.List;\n\nimport javax.persistence.Entity;\nimport javax.persistence.JoinColumn;\nimport javax.persistence.JoinTable;\nimport javax.persistence.ManyToMany;\nimport javax.persistence.Transient;\nimport javax.xml.bind.annotation.XmlAccessType;\nimport javax.xml.bind.annotation.XmlAccessorType;\nimport javax.xml.bind.annotation.XmlElement;\nimport javax.xml.bind.annotation.XmlElementWrapper;\nimport javax.xml.bind.annotation.XmlRootElement;\n\nimport org.hibernate.annotations.BatchSize;\nimport org.hibernate.envers.Audited;\nimport org.hibernate.envers.NotAudited;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport flexjson.JSON;\n\n/**\n * Hibernate entity bean representing a product.\n * <p>\n * Conceptually, a product is a type of a backlog. A project-backlog represents\n * work (projects, iterations, stories) done / to be done for the\n * product.\n * <p>\n * A product contains projects, which are some partial outcomes of the product.\n * For example, different versions of the product or some documentation.\n * <p>\n * Product is at the top level of the hierarchy and thus is the biggest container\n * of work. Since a project is a backlog, it can contain stories, which,\n * in turn, are smaller containers for work.\n * <p>\n * An example product would be \"Acme WordProcessor\" or \"Agilefant 07\".\n * \n * @see fi.hut.soberit.agilefant.model.Project\n */\n@Entity\n@BatchSize(size = 20)\n@Audited\n@XmlRootElement\n@XmlAccessorType( XmlAccessType.NONE )\npublic class Product extends Backlog {\n    \n    private Collection<Team> teams = new HashSet<Team>();\n    \n    /**\n     * Get the product's teams\n     * \n     * return the teams\n     */\n    @ManyToMany(targetEntity = Team.class)\n    @JoinTable(name = \"team_product\", joinColumns = { @JoinColumn(name = \"Product_id\") }, inverseJoinColumns = { @JoinColumn(name = \"Team_id\") })\n    @BatchSize(size = 5)\n    @JSON(include = false)\n    @NotAudited\n    public Collection<Team> getTeams() {\n        return teams;\n    }\n    \n    /**\n     * Set the team's products.\n     * \n     * @param products the products to be set\n     */\n    public void setTeams(Collection<Team> teams) {\n        this.teams = teams;\n    }\n    \n    @Transactional(readOnly=true)\n    @Transient\n    @XmlElement(name = \"projects\")\n    @XmlElementWrapper\n    public Collection<Project> getProjects() {\n        List<Project> projects = new ArrayList<Project>();\n        for(Backlog bl : this.getChildren()) {\n            if(bl instanceof Project) {\n                projects.add((Project)bl);\n            }\n        }\n        return projects;\n    }\n    \n    @Transactional(readOnly=true)\n    @Transient\n    public Collection<Iteration> getIterations() {\n        List<Iteration> iterations = new ArrayList<Iteration>();\n        for(Backlog bl : this.getChildren()) {\n            if(bl instanceof Iteration) {\n                iterations.add((Iteration)bl);\n            }\n        }\n        return iterations;    \n    }\n\n    @Transient\n    @Override\n    public boolean isStandAlone() {\n        return false;\n    }\n\n    @Transient\n    @Override\n    public boolean isProduct() {\n        return true;\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\model\\\\Project.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["Project"], "SCS_MemberReference": ["NONE", "GREEN", "endDate", "endDate", "endDate", "startDate", "startDate", "startDate", "rank", "rank", "rank", "ORDINAL", "status", "status", "status", "assignments", "assignments", "assignments", "backlogSize", "backlogSize", "backlogSize", "baselineLoad", "baselineLoad", "baselineLoad", "REMOVE", "backlogHistoryEntries", "backlogHistoryEntries", "backlogHistoryEntries"], "AN": ["endDate", "startDate", "rank", "status", "assignments", "backlogHistoryEntries", "baselineLoad", "backlogSize"], "SCS_VariableDeclarator": ["endDate", "startDate", "rank", "status", "assignments", "backlogHistoryEntries", "baselineLoad", "backlogSize"], "MN": ["setEndDate", "getEndDate", "setStartDate", "getStartDate", "getRank", "setRank", "getStatus", "setStatus", "getAssignments", "setAssignments", "getBacklogSize", "setBacklogSize", "getBaselineLoad", "setBaselineLoad", "getBacklogHistoryEntries", "setBacklogHistoryEntries", "isStandAlone"], "PN": ["endDate", "startDate", "rank", "status", "assignments", "backlogSize", "baselineLoad", "backlogHistoryEntries"], "SCS_ClassReference": ["XmlDateTimeAdapter", "XmlDateTimeAdapter", "Assignment"], "CO": ["/**\n * A Hibernate entity bean which represents a project.\n * <p>\n * Conceptually, a project is a type of a backlog. A project-backlog represents\n * work (iterations, stories) to be done towards some project outcome\n * (documents, code, plans, etc.).\n * <p>\n * A project is further divided up to smaller containers for work, the\n * iterations. Project also is a part of a bigger container, the product. Since\n * a project is a backlog, it can contain stories, which, in turn, are smaller\n * containers for work.\n * <p>\n * Example projects would be \"Acme KillerApp v1.3\" or \"User Documentation\".\n * <p>\n * A project is part of a product. It can contain iterations. It has an optional\n * starting and ending dates, as well as an owner. A project is also bound to\n * some activity type. It also carries information on effort estimations. A\n * project has a rank number, which corresponds to its priority. The rank number\n * doesn't describe the project's absolute rank order; the number must be\n * compared to all other project's ranks to find out rank order.\n * \n * @see fi.hut.soberit.agilefant.model.Backlog\n * @see fi.hut.soberit.agilefant.model.Story\n * @see fi.hut.soberit.agilefant.model.Iteration\n */", "/**\n     * Returns the status of the project.\n     * \n     * @return the status of the project.\n     */"], "CODE": "package fi.hut.soberit.agilefant.model;\n\nimport java.util.HashSet;\nimport java.util.Set;\n\nimport javax.persistence.AttributeOverride;\nimport javax.persistence.AttributeOverrides;\nimport javax.persistence.CascadeType;\nimport javax.persistence.Column;\nimport javax.persistence.Embedded;\nimport javax.persistence.Entity;\nimport javax.persistence.EnumType;\nimport javax.persistence.Enumerated;\nimport javax.persistence.OneToMany;\nimport javax.persistence.Transient;\nimport javax.xml.bind.annotation.XmlAccessType;\nimport javax.xml.bind.annotation.XmlAccessorType;\nimport javax.xml.bind.annotation.XmlAttribute;\nimport javax.xml.bind.annotation.XmlElement;\nimport javax.xml.bind.annotation.XmlRootElement;\nimport javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;\n\nimport org.hibernate.annotations.BatchSize;\nimport org.hibernate.annotations.Parameter;\nimport org.hibernate.annotations.Type;\nimport org.hibernate.envers.Audited;\nimport org.hibernate.envers.NotAudited;\nimport org.joda.time.DateTime;\n\nimport fi.hut.soberit.agilefant.util.XmlDateTimeAdapter;\nimport flexjson.JSON;\n\n/**\n * A Hibernate entity bean which represents a project.\n * <p>\n * Conceptually, a project is a type of a backlog. A project-backlog represents\n * work (iterations, stories) to be done towards some project outcome\n * (documents, code, plans, etc.).\n * <p>\n * A project is further divided up to smaller containers for work, the\n * iterations. Project also is a part of a bigger container, the product. Since\n * a project is a backlog, it can contain stories, which, in turn, are smaller\n * containers for work.\n * <p>\n * Example projects would be \"Acme KillerApp v1.3\" or \"User Documentation\".\n * <p>\n * A project is part of a product. It can contain iterations. It has an optional\n * starting and ending dates, as well as an owner. A project is also bound to\n * some activity type. It also carries information on effort estimations. A\n * project has a rank number, which corresponds to its priority. The rank number\n * doesn't describe the project's absolute rank order; the number must be\n * compared to all other project's ranks to find out rank order.\n * \n * @see fi.hut.soberit.agilefant.model.Backlog\n * @see fi.hut.soberit.agilefant.model.Story\n * @see fi.hut.soberit.agilefant.model.Iteration\n */\n@Entity\n@BatchSize(size = 20)\n@Audited\n@XmlAccessorType( XmlAccessType.NONE )\n@XmlRootElement\npublic class Project extends Backlog implements Schedulable, Rankable {\n\n    private DateTime endDate;\n\n    private DateTime startDate;\n\n    private Integer rank = 0;\n\n    private Status status = Status.GREEN;\n\n    private Set<Assignment> assignments = new HashSet<Assignment>();\n\n    private Set<BacklogHistoryEntry> backlogHistoryEntries = new HashSet<BacklogHistoryEntry>();\n\n    private ExactEstimate baselineLoad = new ExactEstimate(0);\n\n    private ExactEstimate backlogSize = new ExactEstimate(0);\n\n    public void setEndDate(DateTime endDate) {\n        this.endDate = endDate;\n    }\n    \n    @JSON\n    @Type(type = \"org.jadira.usertype.dateandtime.joda.PersistentDateTime\", parameters = @Parameter(name = \"databaseZone\", value = \"jvm\"))\n    @XmlJavaTypeAdapter(XmlDateTimeAdapter.class)\n    @XmlElement\n    public DateTime getEndDate() {\n        return endDate;\n    }\n\n    public void setStartDate(DateTime startDate) {\n        this.startDate = startDate;\n    }\n\n    @JSON\n    @Type(type = \"org.jadira.usertype.dateandtime.joda.PersistentDateTime\", parameters = @Parameter(name = \"databaseZone\", value = \"jvm\"))\n    @XmlJavaTypeAdapter(XmlDateTimeAdapter.class)\n    @XmlElement\n    public DateTime getStartDate() {\n        return startDate;\n    }\n\n    @Column(nullable = true)\n    @JSON\n    public Integer getRank() {\n        return rank;\n    }\n\n    public void setRank(Integer rank) {\n        this.rank = rank;\n    }\n\n    /**\n     * Returns the status of the project.\n     * \n     * @return the status of the project.\n     */\n    @Enumerated(EnumType.ORDINAL)\n    @JSON\n    @XmlAttribute\n    public Status getStatus() {\n        return status;\n    }\n\n    public void setStatus(Status status) {\n        this.status = status;\n    }\n\n    @OneToMany(targetEntity = fi.hut.soberit.agilefant.model.Assignment.class, mappedBy = \"backlog\")\n    @JSON(include = false)\n    @NotAudited\n    public Set<Assignment> getAssignments() {\n        return assignments;\n    }\n\n    public void setAssignments(Set<Assignment> assignments) {\n        this.assignments = assignments;\n    }\n\n    @JSON\n    @Embedded\n    @AttributeOverrides(@AttributeOverride(name = \"minorUnits\", column = @Column(name = \"backlogSize\")))\n    @XmlAttribute\n    public ExactEstimate getBacklogSize() {\n        return backlogSize;\n    }\n\n    public void setBacklogSize(ExactEstimate backlogSize) {\n        this.backlogSize = backlogSize;\n    }\n\n    @Embedded\n    @AttributeOverrides(@AttributeOverride(name = \"minorUnits\", column = @Column(name = \"baselineLoad\")))\n    @XmlAttribute\n    public ExactEstimate getBaselineLoad() {\n        return baselineLoad;\n    }\n\n    public void setBaselineLoad(ExactEstimate baselineLoad) {\n        this.baselineLoad = baselineLoad;\n    }\n\n    @OneToMany(mappedBy = \"backlog\", cascade = CascadeType.REMOVE)\n    @NotAudited\n    @JSON(include = false)\n    public Set<BacklogHistoryEntry> getBacklogHistoryEntries() {\n        return backlogHistoryEntries;\n    }\n\n    public void setBacklogHistoryEntries(\n            Set<BacklogHistoryEntry> backlogHistoryEntries) {\n        this.backlogHistoryEntries = backlogHistoryEntries;\n    }\n    \n    @Transient\n    @Override\n    public boolean isStandAlone() {\n        return false;\n    }\n\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\model\\\\Rankable.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["Rankable"], "MN": ["getRank", "setRank"], "PN": ["rank"], "CO": ["/**\n     * Get the Rankable's rank.\n     */", "/**\n     * Set the Rankable's new rank.\n     */"], "CODE": "package fi.hut.soberit.agilefant.model;\n\npublic interface Rankable {\n\n    /**\n     * Get the Rankable's rank.\n     */\n    public Integer getRank();\n    \n    /**\n     * Set the Rankable's new rank.\n     */\n    public void setRank(Integer rank);\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\model\\\\Schedulable.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["Schedulable"], "MN": ["getStartDate", "getEndDate"], "PN": [], "CO": [], "CODE": "package fi.hut.soberit.agilefant.model;\n\nimport org.joda.time.DateTime;\n\npublic interface Schedulable {\n    public DateTime getStartDate();\n    public DateTime getEndDate();\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\model\\\\Setting.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["Setting"], "SCS_MemberReference": ["NONE", "AUTO", "id", "id", "id", "name", "name", "name", "description", "description", "description", "value", "value", "value"], "AN": ["id", "name", "description", "value"], "SCS_VariableDeclarator": ["id", "name", "description", "value"], "MN": ["getId", "setId", "getName", "setName", "getDescription", "setDescription", "getValue", "setValue", "getParent", "getChildren", "hasChildren"], "PN": ["id", "name", "description", "value"], "CO": ["/**\n * Hibernate entity bean representing a Setting.\n * <p>\n * Settings are global options that can be used for instance to enable or disable\n * features in Agilefant. For example the whole hour reporting functionality can be\n * enabled or disabled using the Settings system.\n * </p>\n * <p>\n * Each setting includes a name, a description and a String-type value.\n * </p>\n * @warning The settings page is currently hard-coded. If you want to use the name or description\n *          fields of settings, you need to write the functionality to settings.jsp. \n * \n */", "/**\n     * Get the id of this object.\n     */", "// tag this field as the id", "// generate automatically", "/**\n     * Set the id of this object.\n     * <p>\n     * You shouldn't normally call this.\n     */"], "CODE": "package fi.hut.soberit.agilefant.model;\n\nimport java.util.Collection;\n\nimport javax.persistence.Column;\nimport javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.GenerationType;\nimport javax.persistence.Id;\nimport javax.persistence.Table;\nimport javax.persistence.Transient;\nimport javax.xml.bind.annotation.XmlAccessType;\nimport javax.xml.bind.annotation.XmlAccessorType;\n\nimport org.hibernate.annotations.BatchSize;\nimport org.hibernate.annotations.Type;\n\n/**\n * Hibernate entity bean representing a Setting.\n * <p>\n * Settings are global options that can be used for instance to enable or disable\n * features in Agilefant. For example the whole hour reporting functionality can be\n * enabled or disabled using the Settings system.\n * </p>\n * <p>\n * Each setting includes a name, a description and a String-type value.\n * </p>\n * @warning The settings page is currently hard-coded. If you want to use the name or description\n *          fields of settings, you need to write the functionality to settings.jsp. \n * \n */\n@BatchSize(size=20)\n@Entity\n@Table(name = \"settings\")\n@XmlAccessorType( XmlAccessType.NONE )\npublic class Setting {\n\n    private int id;\n    \n    private String name;\n    \n    private String description;\n    \n    private String value;\n    \n    /**\n     * Get the id of this object.\n     */\n    // tag this field as the id\n    @Id\n    // generate automatically\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    public int getId() {\n        return id;\n    }\n    \n    /**\n     * Set the id of this object.\n     * <p>\n     * You shouldn't normally call this.\n     */\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    @Type(type = \"escaped_truncated_varchar\")\n    @Column(unique = true, nullable = false)\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    @Type(type = \"escaped_truncated_varchar\")\n    public String getDescription() {\n        return description;\n    }\n    \n    public void setDescription(String description) {\n        this.description = description;\n    }\n    \n    @Type(type = \"escaped_truncated_varchar\")\n    public String getValue() {\n        return value;\n    }\n    \n    public void setValue(String value) {\n        this.value = value; \n    }\n    \n    @Transient\n    public Backlog getParent() {\n        return null;\n    }\n\n    @Transient\n    public Collection<Backlog> getChildren() {\n        return null;\n    }\n    \n    @Transient\n    public boolean hasChildren() {\n        return false;\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\model\\\\SignedExactEstimate.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["SignedExactEstimate"], "AN": ["ZERO", "minorUnits"], "SCS_VariableDeclarator": ["ZERO", "minorUnits", "thisMinorUnits", "otherMinorUnits"], "SCS_ConstructorDeclaration": ["SignedExactEstimate", "SignedExactEstimate"], "SCS_MemberReference": ["minorUnits", "minorUnits", "minorUnits", "minorUnits", "minorUnits", "otherMinorUnits", "thisMinorUnits", "otherMinorUnits", "thisMinorUnits", "minorUnits", "minorUnits", "minorUnits", "minorUnits", "minorUnits", "minorUnits", "addee"], "MN": ["setMinorUnits", "getMinorUnits", "compareTo", "doubleValue", "floatValue", "intValue", "longValue", "toString", "add"], "PN": ["minorUnits", "o", "addee"], "SCS_VariableDeclaration": ["long", "long"], "SCS_ClassReference": [null, "o", "String"], "SCS_MethodInvocation": ["getMinorUnits", "getMinorUnits", "valueOf"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.model;\n\nimport javax.persistence.Embeddable;\n\nimport com.fasterxml.jackson.annotation.JsonCreator;\n\n@SuppressWarnings(\"serial\")\n@Embeddable\npublic class SignedExactEstimate extends Number implements Comparable<SignedExactEstimate> {\n\n    public static final SignedExactEstimate ZERO = new SignedExactEstimate(0);\n    \n    private Long minorUnits;\n\n    public SignedExactEstimate() {\n    }\n\n    @JsonCreator\n    public SignedExactEstimate(long minorUnits) {\n        this.minorUnits = minorUnits;\n    }\n\n    public void setMinorUnits(Long minorUnits) {\n        this.minorUnits = minorUnits;\n    }\n\n    public Long getMinorUnits() {\n        return minorUnits;\n    }\n    \n    public int compareTo(SignedExactEstimate o) {\n        long thisMinorUnits = this.getMinorUnits();\n        long otherMinorUnits = o.getMinorUnits();\n        if (otherMinorUnits < thisMinorUnits) {\n            return -1;\n        }\n        else if (otherMinorUnits > thisMinorUnits) {\n            return 1;\n        }\n        return 0;\n    }\n\n    @Override\n    public double doubleValue() {\n        return this.minorUnits;\n    }\n\n    @Override\n    public float floatValue() {\n        return this.minorUnits;\n    }\n\n    @Override\n    public int intValue() {\n        return ((Long)this.minorUnits).intValue();\n    }\n\n    @Override\n    public long longValue() {\n        return this.minorUnits;\n    }\n    \n    public String toString() {\n        return String.valueOf(this.minorUnits);\n    }\n    \n    public void add(long addee) {\n        this.minorUnits += addee;\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\model\\\\StandAloneIteration.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["StandAloneIteration"], "SCS_MemberReference": ["NONE"], "CO": ["/**\n * \n * @see fi.hut.soberit.agilefant.model.Iteration\n * @see fi.hut.soberit.agilefant.model.Backlog\n * @see fi.hut.soberit.agilefant.model.Story\n * @see fi.hut.soberit.agilefant.model.StandAloneIteration\n */"], "CODE": "package fi.hut.soberit.agilefant.model;\n\nimport javax.persistence.Entity;\nimport javax.xml.bind.annotation.XmlAccessType;\nimport javax.xml.bind.annotation.XmlAccessorType;\nimport javax.xml.bind.annotation.XmlRootElement;\n\nimport org.hibernate.annotations.BatchSize;\nimport org.hibernate.envers.Audited;\n\n\n/**\n * \n * @see fi.hut.soberit.agilefant.model.Iteration\n * @see fi.hut.soberit.agilefant.model.Backlog\n * @see fi.hut.soberit.agilefant.model.Story\n * @see fi.hut.soberit.agilefant.model.StandAloneIteration\n */\n@Entity\n@BatchSize(size = 20)\n@Audited\n@XmlRootElement\n@XmlAccessorType( XmlAccessType.NONE )\npublic class StandAloneIteration extends Iteration implements Schedulable, TaskContainer {\n \n\n}", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\model\\\\Status.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["Status"], "MN": ["getOrdinal", "getName"], "PN": [], "SCS_ClassReference": [null, null], "SCS_MethodInvocation": ["ordinal", "name"], "CO": ["/**\n * A status enumeration, which represents the status of project.\n * \n */"], "CODE": "package fi.hut.soberit.agilefant.model;\n\nimport javax.xml.bind.annotation.XmlEnum;\nimport javax.xml.bind.annotation.XmlEnumValue;\n\n/**\n * A status enumeration, which represents the status of project.\n * \n */\n@XmlEnum\npublic enum Status {\n    @XmlEnumValue(\"GREEN\")      GREEN,\n    @XmlEnumValue(\"YELLOW\")     YELLOW,\n    @XmlEnumValue(\"RED\")        RED,\n    @XmlEnumValue(\"GREY\")       GREY,\n    @XmlEnumValue(\"BLACK\")      BLACK;\n\n    public int getOrdinal() {\n        return this.ordinal();\n    }\n\n    public String getName() {\n        return this.name();\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\model\\\\Story.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["Story"], "SCS_MemberReference": ["NONE", "NOT_STARTED", "AUTO", "id", "id", "id", "name", "name", "name", "description", "description", "description", "children", "children", "backlog", "backlog", "backlog", "backlog", "iteration", "iteration", "iteration", "state", "state", "state", "SUBSELECT", "responsibles", "responsibles", "responsibles", "LAZY", "REMOVE", "whatsNextStoryEntries", "whatsNextStoryEntries", "entries", "tasks", "tasks", "tasks", "storyPoints", "storyPoints", "storyPoints", "fullInfoStory", "fullInfoStory", "storyPoints", "fullInfoStory", "metrics", "fullInfoStory", "metrics", "estimatedPoints", "storyPoints", "estimatedPoints", "storyPoints", "estimatedPoints", "storyPoints", "storyPoints", "storyValue", "storyValue", "storyValue", "hourEntries", "hourEntries", "hourEntries", "JOIN", "parent", "parent", "parent", "SELECT", "children", "children", "children", "LAZY", "REMOVE", "storyRanks", "storyRanks", "storyRanks", "treeRank", "treeRank", "treeRank", "labels", "labels", "REMOVE", "labels", "REMOVE", "storyAccesses", "storyAccesses", "storyAccesses", "otherStory", "otherStory", "moveFinishedTasks", "moveFinishedTasks", "DONE", "IMPLEMENTED", "t", "otherStory", "newTask", "entry", "newEntry", "otherStory", "l", "newLabel", "otherStory", "childStory", "newChild", "we", "newEntry"], "AN": ["id", "name", "description", "backlog", "state", "treeRank", "parent", "iteration", "children", "labels", "responsibles", "tasks", "hourEntries", "storyRanks", "storyAccesses", "whatsNextStoryEntries", "storyPoints", "storyValue", "fullInfoStory"], "SCS_VariableDeclarator": ["id", "name", "description", "backlog", "state", "treeRank", "parent", "iteration", "children", "labels", "responsibles", "tasks", "hourEntries", "storyRanks", "storyAccesses", "whatsNextStoryEntries", "storyPoints", "storyValue", "fullInfoStory", "storyPoints", "impl", "metrics", "estimatedPoints", "t", "newTask", "entry", "newEntry", "l", "newLabel", "childStory", "newChild", "we", "newEntry"], "MN": ["getId", "setId", "getName", "setName", "getDescription", "setDescription", "hasChildren", "getBacklog", "setBacklog", "getIteration", "setIteration", "getState", "setState", "getResponsibles", "setResponsibles", "getWhatsNextStoryEntries", "setWhatsNextStoryEntries", "getTasks", "setTasks", "getStoryPoints", "setStoryPoints", "setFullInfoStory", "getHighestPoints", "getStoryValue", "setStoryValue", "getHourEntries", "setHourEntries", "getParent", "setParent", "getChildren", "setChildren", "getStoryRanks", "setStoryRanks", "getTreeRank", "setTreeRank", "setLabels", "getLabels", "getStoryAccesses", "setStoryAccesses", "copyStory"], "PN": ["id", "name", "description", "backlog", "iteration", "state", "responsibles", "entries", "tasks", "storyPoints", "fullInfoStory", "storyValue", "hourEntries", "parent", "children", "storyRanks", "treeRank", "labels", "storyAccesses", "otherStory", "moveFinishedTasks"], "SCS_ClassReference": [null, "User", "WhatsNextStoryEntry", "Task", "", "", "impl", "impl", "metrics", "metrics", null, "metrics", "StoryHourEntry", "Story", "StoryRank", "", "", null, "otherStory", null, "otherStory", null, "otherStory", null, "otherStory", null, "otherStory", null, "otherStory", null, "otherStory", null, "otherStory", "otherStory", "otherStory", null, null, "otherStory", "t", "t", "t", "t", "t", null, null, null, null, "otherStory", null, "entry", null, null, "entry", "otherStory", "l", null, null, "l", "otherStory", "newChild", null, null, "otherStory", null, null], "SCS_MethodInvocation": ["size", "getStoryPoints", "getStoryPoints", "calculateStoryTreeMetrics", "calculateStoryTreeMetrics", "getEstimatedPoints", "getEstimatedDonePoints", "hasChildren", "getEstimatedDonePoints", "copyStory", "copyStory", "setDescription", "getDescription", "setStoryValue", "getStoryValue", "setName", "getName", "setBacklog", "getBacklog", "setTreeRank", "getTreeRank", "setState", "getState", "setStoryPoints", "getStoryPoints", "setParent", "getParent", "getParent", "getParent", "getChildren", "add", "getTasks", "getState", "getState", "setStory", "setStory", "setStory", "getTasks", "add", "getResponsibles", "addAll", "getResponsibles", "getHourEntries", "setStory", "getHourEntries", "add", "setStory", "getLabels", "setStory", "getLabels", "add", "setStory", "getChildren", "setParent", "getChildren", "add", "getWhatsNextStoryEntries", "getWhatsNextStoryEntries", "add"], "SCS_VariableDeclaration": ["Integer", "StoryHierarchyBusinessImpl", "StoryTreeBranchMetrics", "long", "Task", "Task", "StoryHourEntry", "StoryHourEntry", "Label", "Label", "Story", "Story", "WhatsNextStoryEntry", "WhatsNextStoryEntry"], "SCS_ConstructorDeclaration": ["Story", "Story", "Story"], "CO": ["/**\n     * With standalone iterations, backlogs can only be products or \n     * projects; iterations must have an attribute of their own because\n     * projects could not know their progress otherwise\n     */", "/**\n     * Get the users responsible for this story item.\n     * @return Set of the responsible users\n     */", "/**\n     * Copying Constructor\n     * @author bradens\n     * @param otherStory\n     */", "// Copy the complex members: tasks, users, labels, parents", "// To make sure we set the tasks to the new story.", "// TODO @bradens find way to persist this task in this entity?  for now persisting it in the", "// StoryBusinessImpl.", "// To make sure we set the tasks to the new story.", "// set it back"], "CODE": "package fi.hut.soberit.agilefant.model;\n\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport javax.persistence.CascadeType;\nimport javax.persistence.Column;\nimport javax.persistence.Entity;\nimport javax.persistence.FetchType;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.GenerationType;\nimport javax.persistence.Id;\nimport javax.persistence.JoinColumn;\nimport javax.persistence.JoinTable;\nimport javax.persistence.ManyToMany;\nimport javax.persistence.ManyToOne;\nimport javax.persistence.OneToMany;\nimport javax.persistence.OrderBy;\nimport javax.persistence.Table;\nimport javax.persistence.Transient;\nimport javax.xml.bind.annotation.XmlAccessType;\nimport javax.xml.bind.annotation.XmlAccessorType;\nimport javax.xml.bind.annotation.XmlAttribute;\nimport javax.xml.bind.annotation.XmlElement;\nimport javax.xml.bind.annotation.XmlElementWrapper;\nimport javax.xml.bind.annotation.XmlRootElement;\n\nimport org.hibernate.annotations.BatchSize;\nimport org.hibernate.annotations.Fetch;\nimport org.hibernate.annotations.FetchMode;\nimport org.hibernate.annotations.Type;\nimport org.hibernate.envers.Audited;\nimport org.hibernate.envers.NotAudited;\n\nimport fi.hut.soberit.agilefant.business.impl.StoryHierarchyBusinessImpl;\nimport fi.hut.soberit.agilefant.transfer.StoryTreeBranchMetrics;\nimport flexjson.JSON;\n\n@Entity\n@Table(name = \"stories\")\n@Audited\n@XmlRootElement\n@XmlAccessorType( XmlAccessType.NONE )\npublic class Story implements TimesheetLoggable, LabelContainer, NamedObject, TaskContainer {\n    private int id;\n    private String name;\n    private String description;\n    private Backlog backlog;\n    private StoryState state = StoryState.NOT_STARTED;\n    private int treeRank = 0;\n    private Story parent;\n    private Iteration iteration;\n    private List<Story> children = new ArrayList<Story>();\n\n    private Set<Label> labels = new HashSet<Label>();\n\n    private Set<User> responsibles = new HashSet<User>();\n    private Set<Task> tasks = new HashSet<Task>();\n    private Set<StoryHourEntry> hourEntries = new HashSet<StoryHourEntry>();\n    private Set<StoryRank> storyRanks = new HashSet<StoryRank>();\n    private Set<StoryAccess> storyAccesses;\n    private Set<WhatsNextStoryEntry> whatsNextStoryEntries = new HashSet<WhatsNextStoryEntry>();\n\n    private Integer storyPoints;\n    private Integer storyValue;\n    \n    private Story fullInfoStory;\n    \n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    @XmlAttribute(name = \"objectId\")\n    public int getId() {\n        return id;\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    @Column(nullable = false)\n    @XmlAttribute\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    @Type(type = \"escaped_text\")\n    @XmlElement\n    public String getDescription() {\n        return description;\n    }\n\n    public void setDescription(String description) {\n        this.description = description;\n    }\n\n\n    public boolean hasChildren()\n    {\n        return this.children != null && this.children.size() > 0;\n    }\n\n    /**\n     * With standalone iterations, backlogs can only be products or \n     * projects; iterations must have an attribute of their own because\n     * projects could not know their progress otherwise\n     */\n    @ManyToOne(optional = true)\n    public Backlog getBacklog() {\n        return backlog;\n    }\n\n    public void setBacklog(Backlog backlog) {\n        if(backlog instanceof Iteration) {\n            throw new IllegalArgumentException(\"story backlog can't be an iteration\");\n        }\n        this.backlog = backlog;\n    }\n\n    @ManyToOne\n    public Iteration getIteration() {\n        return iteration;\n    }\n\n    public void setIteration(Iteration iteration) {\n        this.iteration = iteration;\n    }\n\n    @Column(nullable = false)\n    @XmlAttribute\n    public StoryState getState() {\n        return state;\n    }\n\n    public void setState(StoryState state) {\n        this.state = state;\n    }\n\n    /**\n     * Get the users responsible for this story item.\n     * @return Set of the responsible users\n     */\n    @ManyToMany(\n            targetEntity = fi.hut.soberit.agilefant.model.User.class\n    )\n    @JoinTable(\n            name = \"story_user\",\n            joinColumns={@JoinColumn(name = \"Story_id\")},\n            inverseJoinColumns={@JoinColumn(name = \"User_id\")}\n    )\n    @BatchSize(size=20)\n    @Fetch(FetchMode.SUBSELECT)\n    @XmlElementWrapper\n    @XmlElement(name = \"user\")\n    public Set<User> getResponsibles() {\n        return responsibles;\n    }\n\n    public void setResponsibles(Set<User> responsibles) {\n        this.responsibles = responsibles;\n    }\n    \n    @NotAudited\n    @OneToMany(\n            targetEntity = fi.hut.soberit.agilefant.model.WhatsNextStoryEntry.class,\n            fetch = FetchType.LAZY,\n            mappedBy = \"story\",\n            cascade = CascadeType.REMOVE\n    )\n    @JSON(include = false)\n    public Set<WhatsNextStoryEntry> getWhatsNextStoryEntries() {\n        return whatsNextStoryEntries;\n    }\n    \n    public void setWhatsNextStoryEntries(Set<WhatsNextStoryEntry> entries) {\n        this.whatsNextStoryEntries = entries;\n    }\n    \n    @OneToMany(targetEntity = fi.hut.soberit.agilefant.model.Task.class,\n            mappedBy = \"story\"\n    )\n    @NotAudited\n    @XmlElementWrapper\n    @XmlElement(name = \"task\")\n    public Set<Task> getTasks() {\n        return tasks;\n    }\n\n    public void setTasks(Set<Task> tasks) {\n        this.tasks = tasks;\n    }\n\n    @JSON\n    @XmlAttribute\n    public Integer getStoryPoints() {\n        return storyPoints;\n    }\n\n    public void setStoryPoints(Integer storyPoints) {\n        this.storyPoints = storyPoints;\n    }\n    \n    public void setFullInfoStory(Story fullInfoStory) {\n        this.fullInfoStory = fullInfoStory;\n    }\n    \n    @JSON\n    @XmlAttribute\n    @Transient\n    public String getHighestPoints() {\n    \tInteger storyPoints = 0;\n    \tif (getStoryPoints() != null) {\n    \t\tstoryPoints = getStoryPoints();\n    \t}\n    \tStoryHierarchyBusinessImpl impl = new StoryHierarchyBusinessImpl();\n    \tStoryTreeBranchMetrics metrics;\n    \tif (this.fullInfoStory != null) {\n    \t    metrics = impl.calculateStoryTreeMetrics(this.fullInfoStory);\n    \t} else {\n            metrics = impl.calculateStoryTreeMetrics(this);\n    \t}\n    \tlong estimatedPoints = metrics.getEstimatedPoints();\n    \tif (estimatedPoints > storyPoints) {\n    \t\treturn \"<span class='treeChildStoryPoints treeStoryPoints' title='Story child points'>\" + metrics.getEstimatedDonePoints() + \" / \" + estimatedPoints + \"</span>\";\n    \t} else if (storyPoints == 0) {\n    \t\treturn \"<span class='treeStoryPoints' title='Story points'> - </span>\";\n    \t} else if (this.hasChildren() && estimatedPoints > 0) {\n    \t\treturn \"<span class='treeStoryPoints' title='Story points'>\" + metrics.getEstimatedDonePoints() + \" / \" + storyPoints + \"</span>\";\n    \t} else {\n    \t\treturn \"<span class='treeStoryPoints' title='Story points'>\" + storyPoints + \"</span>\";\n    \t}\n    }\n    \n    @JSON\n    @XmlAttribute\n    public Integer getStoryValue() {\n        return storyValue;\n    }\n\n    public void setStoryValue(Integer storyValue) {\n        this.storyValue = storyValue;\n    }\n\n    @OneToMany(mappedBy = \"story\",\n            targetEntity = fi.hut.soberit.agilefant.model.StoryHourEntry.class )\n    @NotAudited\n    @XmlElementWrapper\n    @XmlElement(name = \"hourEntry\")\n    public Set<StoryHourEntry> getHourEntries() {\n        return hourEntries;\n    }\n    \n    public void setHourEntries(Set<StoryHourEntry> hourEntries) {\n        this.hourEntries = hourEntries;\n    }\n\n    @JSON\n    @ManyToOne\n    @Fetch(FetchMode.JOIN)\n    public Story getParent() {\n        return parent;\n    }\n\n    public void setParent(Story parent) {\n        this.parent = parent;\n    }\n\n    @JSON(include=false)\n    @OneToMany(mappedBy=\"parent\", targetEntity=fi.hut.soberit.agilefant.model.Story.class)\n    @Fetch(FetchMode.SELECT)\n    @OrderBy(\"treeRank\")\n    @NotAudited\n    @XmlElementWrapper\n    @XmlElement(name = \"story\")\n    public List<Story> getChildren() {\n        return children;\n    }\n\n    public void setChildren(List<Story> children) {\n        this.children = children;\n    }\n    \n    @JSON(include=false)\n    @NotAudited\n    @OneToMany(fetch = FetchType.LAZY, targetEntity=StoryRank.class, mappedBy=\"story\", cascade=CascadeType.REMOVE )\n    public Set<StoryRank> getStoryRanks() {\n        return storyRanks;\n    }\n\n    public void setStoryRanks(Set<StoryRank> storyRanks) {\n        this.storyRanks = storyRanks;\n    }\n\n    @Column(nullable = false, columnDefinition = \"int default 0\")\n    @JSON\n    public int getTreeRank() {\n        return treeRank;\n    }\n\n    public void setTreeRank(int treeRank) {\n        this.treeRank = treeRank;\n    }\n\n    public void setLabels(Set<Label> labels) {\n        this.labels = labels;\n    }\n\n    @OneToMany(mappedBy = \"story\", cascade = CascadeType.REMOVE)\n    @NotAudited\n    @JSON(include = false)\n    public Set<Label> getLabels() {\n        return labels;\n    }\n    \n    @OneToMany(mappedBy = \"story\", cascade = CascadeType.REMOVE, orphanRemoval=true)\n    @NotAudited\n    @JSON(include = false)\n    public Set<StoryAccess> getStoryAccesses() {\n        return this.storyAccesses;\n    }\n\n    public void setStoryAccesses(Set<StoryAccess> storyAccesses) {\n        this.storyAccesses = storyAccesses;\n    }\n    \n    public Story()\n    { }\n    \n    public Story(Story otherStory) {\n        copyStory(otherStory, false);\n    }\n    \n    public Story(Story otherStory, boolean moveFinishedTasks) {\n        copyStory(otherStory, moveFinishedTasks);\n    }\n    \n    /**\n     * Copying Constructor\n     * @author bradens\n     * @param otherStory\n     */\n    public void copyStory(Story otherStory, boolean moveFinishedTasks)\n    {\n        this.setDescription(otherStory.getDescription());\n        this.setStoryValue(otherStory.getStoryValue());\n        this.setName(otherStory.getName());\n        this.setBacklog(otherStory.getBacklog());\n        this.setTreeRank(otherStory.getTreeRank() - 1);\n        this.setState(otherStory.getState());\n        this.setStoryPoints(otherStory.getStoryPoints());\n        this.setParent(otherStory.getParent());\n        if (otherStory.getParent() != null)\n            otherStory.getParent().getChildren().add(this);\n        \n        // Copy the complex members: tasks, users, labels, parents\n        for (Task t : otherStory.getTasks())\n        {\n            if (moveFinishedTasks) {\n                if (t.getState() != TaskState.DONE && t.getState() != TaskState.IMPLEMENTED) {\n                    t.setStory(this); // To make sure we set the tasks to the new story.\n                }\n            } else {\n                // TODO @bradens find way to persist this task in this entity?  for now persisting it in the\n                // StoryBusinessImpl.\n                t.setStory(this); // To make sure we set the tasks to the new story.\n                Task newTask = new Task(t);\n                t.setStory(otherStory); // set it back\n                this.getTasks().add(newTask);\n            }\n        } \n        this.getResponsibles().addAll(otherStory.getResponsibles());\n        for (StoryHourEntry entry : this.getHourEntries())\n        {\n            entry.setStory(this);\n            StoryHourEntry newEntry = new StoryHourEntry(entry);\n            this.getHourEntries().add(newEntry);\n            entry.setStory(otherStory);\n        }\n        for (Label l : otherStory.getLabels())\n        {\n            l.setStory(this);\n            Label newLabel = new Label(l);\n            this.getLabels().add(newLabel);\n            l.setStory(otherStory);\n        }\n        for (Story childStory : otherStory.getChildren())\n        {\n            Story newChild = new Story(childStory);\n            newChild.setParent(this);\n            this.getChildren().add(newChild);\n        }\n        for (WhatsNextStoryEntry we : otherStory.getWhatsNextStoryEntries())\n        {\n            WhatsNextStoryEntry newEntry = new WhatsNextStoryEntry(we);\n            this.getWhatsNextStoryEntries().add(newEntry);\n        }\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\model\\\\StoryAccess.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["StoryAccess"], "SCS_MemberReference": ["NONE", "AUTO", "id", "id", "id", "story", "story", "story", "user", "user", "user", "date", "date", "date"], "AN": ["story", "user", "date", "id"], "SCS_VariableDeclarator": ["story", "user", "date", "id"], "MN": ["getId", "setId", "getStory", "setStory", "getUser", "setUser", "getDate", "setDate"], "PN": ["id", "story", "user", "date"], "SCS_ClassReference": ["XmlDateTimeAdapter"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.model;\n\nimport javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.GenerationType;\nimport javax.persistence.Id;\nimport javax.persistence.ManyToOne;\nimport javax.persistence.Table;\nimport javax.xml.bind.annotation.XmlAccessType;\nimport javax.xml.bind.annotation.XmlAccessorType;\nimport javax.xml.bind.annotation.XmlAttribute;\nimport javax.xml.bind.annotation.XmlRootElement;\nimport javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;\n\nimport org.hibernate.annotations.Parameter;\nimport org.hibernate.annotations.Type;\nimport org.joda.time.DateTime;\n\nimport fi.hut.soberit.agilefant.util.XmlDateTimeAdapter;\nimport flexjson.JSON;\n\n@Entity\n@Table(name = \"story_access\")\n@XmlRootElement\n@XmlAccessorType( XmlAccessType.NONE )\npublic class StoryAccess {\n    \n    private Story story;\n    private User user;\n    private DateTime date;\n    private int id;\n    \n    \n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    @XmlAttribute(name = \"objectId\")\n    public int getId() {\n        return id;\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n    \n    @ManyToOne(optional = false)\n    @JSON(include=false)\n    public Story getStory() {\n        return story;\n    }\n    \n    public void setStory(Story story) {\n        this.story = story;\n    }\n    \n    @ManyToOne(optional = false)\n    @JSON(include=false)\n    public User getUser() {\n        return user;\n    }\n    \n    public void setUser(User user) {\n        this.user = user;\n    }\n    \n    @JSON\n    @Type(type = \"org.jadira.usertype.dateandtime.joda.PersistentDateTime\", parameters = @Parameter(name = \"databaseZone\", value = \"jvm\"))\n    @XmlAttribute\n    @XmlJavaTypeAdapter(XmlDateTimeAdapter.class)\n    public DateTime getDate() {\n        return date;\n    }\n    public void setDate(DateTime date) {\n        this.date = date;\n    }   \n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\model\\\\StoryHourEntry.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["StoryHourEntry"], "SCS_MemberReference": ["NONE", "story", "story", "story"], "AN": ["story"], "SCS_VariableDeclarator": ["story"], "SCS_ConstructorDeclaration": ["StoryHourEntry", "StoryHourEntry"], "SCS_ClassReference": [null, "other"], "SCS_MethodInvocation": ["setStory", "getStory"], "MN": ["getStory", "setStory"], "PN": ["story"], "CO": ["/**\n * Hibernate entity bean which represents an hour entry owned by a story.\n * \n * Represents a job effort logged for a specific story.\n * \n * @see fi.hut.soberit.agilefant.model.HourEntry\n * @author User\n * \n */"], "CODE": "package fi.hut.soberit.agilefant.model;\n\nimport javax.persistence.Entity;\nimport javax.persistence.ManyToOne;\nimport javax.xml.bind.annotation.XmlAccessType;\nimport javax.xml.bind.annotation.XmlAccessorType;\n\nimport org.hibernate.annotations.BatchSize;\n\n/**\n * Hibernate entity bean which represents an hour entry owned by a story.\n * \n * Represents a job effort logged for a specific story.\n * \n * @see fi.hut.soberit.agilefant.model.HourEntry\n * @author User\n * \n */\n@Entity\n@BatchSize(size = 20)\n@XmlAccessorType( XmlAccessType.NONE )\npublic class StoryHourEntry extends HourEntry {\n\n    private Story story;\n\n    public StoryHourEntry() { }\n    \n    public StoryHourEntry(StoryHourEntry other)\n    {\n        this.setStory(other.getStory());\n    }\n    \n    @ManyToOne\n    public Story getStory() {\n        return story;\n    }\n\n    public void setStory(Story story) {\n        this.story = story;\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\model\\\\StoryRank.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["StoryRank"], "SCS_MemberReference": ["NONE", "id", "id", "id", "story", "story", "story", "backlog", "backlog", "backlog", "backlog", "rank", "rank", "rank"], "AN": ["id", "story", "backlog", "rank"], "SCS_VariableDeclarator": ["id", "story", "backlog", "rank"], "MN": ["getId", "setId", "getStory", "setStory", "getBacklog", "setBacklog", "getRank", "setRank"], "PN": ["id", "story", "backlog", "rank"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.model;\n\nimport javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.Id;\nimport javax.persistence.ManyToOne;\nimport javax.persistence.Table;\nimport javax.persistence.UniqueConstraint;\nimport javax.xml.bind.annotation.XmlAccessType;\nimport javax.xml.bind.annotation.XmlAccessorType;\n\nimport org.hibernate.envers.Audited;\n\nimport fi.hut.soberit.agilefant.exception.ProductRankNotSupportedException;\n\n@Entity\n@Audited\n@Table(name = \"storyrank\", uniqueConstraints = { @UniqueConstraint(columnNames = {\n        \"backlog_id\", \"story_id\" }) })\n@XmlAccessorType( XmlAccessType.NONE )        \npublic class StoryRank {\n\n    private int id;\n    private Story story;\n    private Backlog backlog;\n    private int rank;\n\n    @Id\n    @GeneratedValue\n    public int getId() {\n        return id;\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    @ManyToOne(optional = false)\n    public Story getStory() {\n        return story;\n    }\n\n    public void setStory(Story story) {\n        this.story = story;\n    }\n\n    @ManyToOne(optional = false)\n    public Backlog getBacklog() {\n        return backlog;\n    }\n\n    public void setBacklog(Backlog backlog) {\n        if(backlog instanceof Product) {\n            throw new ProductRankNotSupportedException();\n        }\n        this.backlog = backlog;\n    }\n    \n    public int getRank() {\n        return rank;\n    }\n\n    public void setRank(int rank) {\n        this.rank = rank;\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\model\\\\StoryState.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["StoryState"], "MN": ["getOrdinal", "getName"], "PN": [], "SCS_ClassReference": [null, null, "allValues", "allValues", "allValues", "allValues", "allValues", "allValues", "allValues", "Collections"], "SCS_MethodInvocation": ["ordinal", "name", "add", "add", "add", "add", "add", "add", "add", "unmodifiableSet"], "AN": ["valueSet"], "SCS_VariableDeclarator": ["valueSet", "allValues"], "SCS_VariableDeclaration": ["Set"], "SCS_MemberReference": ["NOT_STARTED", "STARTED", "PENDING", "BLOCKED", "IMPLEMENTED", "DONE", "DEFERRED", "valueSet", "allValues"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.model;\n\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.Set;\n\nimport javax.xml.bind.annotation.XmlEnum;\nimport javax.xml.bind.annotation.XmlEnumValue;\n\n@XmlEnum\npublic enum StoryState {\n\n    @XmlEnumValue(\"NOT_STARTED\") NOT_STARTED,\n    @XmlEnumValue(\"STARTED\")     STARTED,\n    @XmlEnumValue(\"PENDING\")     PENDING,\n    @XmlEnumValue(\"BLOCKED\")     BLOCKED,\n    @XmlEnumValue(\"IMPLEMENTED\") IMPLEMENTED,\n    @XmlEnumValue(\"DONE\")        DONE,\n    @XmlEnumValue(\"DEFERRED\")    DEFERRED;\n\n    public int getOrdinal() {\n        return this.ordinal();\n    }\n\n    public String getName() {\n        return this.name();\n    }\n\n    public static final Set<StoryState> valueSet;\n\n    static {\n        Set<StoryState> allValues = new HashSet<StoryState>();\n        allValues.add(NOT_STARTED);\n        allValues.add(STARTED);\n        allValues.add(PENDING);\n        allValues.add(BLOCKED);\n        allValues.add(IMPLEMENTED);\n        allValues.add(DONE);\n        allValues.add(DEFERRED);\n        valueSet = Collections.unmodifiableSet(allValues);\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\model\\\\Task.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["Task"], "SCS_MemberReference": ["NONE", "t", "he", "we", "newEntry", "AUTO", "id", "id", "id", "name", "name", "name", "description", "description", "description", "iteration", "iteration", "iteration", "story", "story", "story", "effortLeft", "effortLeft", "estimate", "originalEstimate", "originalEstimate", "originalEstimate", "ORDINAL", "state", "state", "state", "LAZY", "responsibles", "responsibles", "responsibles", "LAZY", "REMOVE", "whatsNextEntries", "whatsNextEntries", "entries", "hourEntries", "hourEntries", "hourEntries", "rank", "rank", "rank"], "AN": ["id", "name", "description", "iteration", "story", "state", "rank", "effortLeft", "originalEstimate", "responsibles", "hourEntries", "whatsNextEntries"], "SCS_VariableDeclarator": ["id", "name", "description", "iteration", "story", "state", "rank", "effortLeft", "originalEstimate", "responsibles", "hourEntries", "whatsNextEntries", "t", "he", "we", "newEntry"], "SCS_ConstructorDeclaration": ["Task", "Task"], "SCS_ClassReference": [null, "other", null, "other", null, "other", null, "other", null, "other", null, "other", null, "other", null, "other", null, null, "other", "other", null, null, "other", null, null, "User", "WhatsNextEntry"], "SCS_MethodInvocation": ["setDescription", "getDescription", "setEffortLeft", "getEffortLeft", "setIteration", "getIteration", "setName", "getName", "setOriginalEstimate", "getOriginalEstimate", "setRank", "getRank", "setState", "getState", "setStory", "getStory", "getResponsibles", "addAll", "getResponsibles", "getHourEntries", "getHourEntries", "add", "getWhatsNextEntries", "getWhatsNextEntries", "add"], "SCS_VariableDeclaration": ["TaskHourEntry", "TaskHourEntry", "WhatsNextEntry", "WhatsNextEntry"], "MN": ["getId", "setId", "getName", "setName", "getDescription", "setDescription", "getIteration", "setIteration", "getStory", "setStory", "getEffortLeft", "setEffortLeft", "getOriginalEstimate", "setOriginalEstimate", "getState", "setState", "getResponsibles", "setResponsibles", "getWhatsNextEntries", "setWhatsNextEntries", "getHourEntries", "setHourEntries", "getRank", "setRank"], "PN": ["id", "name", "description", "iteration", "story", "estimate", "originalEstimate", "state", "responsibles", "entries", "hourEntries", "rank"], "CO": ["/**\n * An entity bean representing a task.\n * \n * @author rjokelai\n * \n */", "// Complex members"], "CODE": "package fi.hut.soberit.agilefant.model;\n\nimport java.util.HashSet;\nimport java.util.Set;\n\nimport javax.persistence.AttributeOverride;\nimport javax.persistence.AttributeOverrides;\nimport javax.persistence.CascadeType;\nimport javax.persistence.Column;\nimport javax.persistence.Embedded;\nimport javax.persistence.Entity;\nimport javax.persistence.EnumType;\nimport javax.persistence.Enumerated;\nimport javax.persistence.FetchType;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.GenerationType;\nimport javax.persistence.Id;\nimport javax.persistence.JoinTable;\nimport javax.persistence.ManyToMany;\nimport javax.persistence.ManyToOne;\nimport javax.persistence.OneToMany;\nimport javax.persistence.OrderBy;\nimport javax.persistence.Table;\nimport javax.xml.bind.annotation.XmlAccessType;\nimport javax.xml.bind.annotation.XmlAccessorType;\nimport javax.xml.bind.annotation.XmlAttribute;\nimport javax.xml.bind.annotation.XmlElement;\nimport javax.xml.bind.annotation.XmlElementWrapper;\n\nimport org.hibernate.annotations.Type;\nimport org.hibernate.envers.Audited;\nimport org.hibernate.envers.NotAudited;\n\nimport flexjson.JSON;\n\n/**\n * An entity bean representing a task.\n * \n * @author rjokelai\n * \n */\n\n@Entity\n@Table(name = \"tasks\")\n@Audited\n@XmlAccessorType( XmlAccessType.NONE )\npublic class Task implements TimesheetLoggable, NamedObject, Rankable {\n\n    private int id;\n    private String name;\n    private String description;\n    private Iteration iteration;\n    private Story story;\n    \n    private TaskState state;\n    private Integer rank = 0;\n    \n    private ExactEstimate effortLeft;\n    private ExactEstimate originalEstimate;\n    private Set<User> responsibles = new HashSet<User>();\n    private Set<TaskHourEntry> hourEntries = new HashSet<TaskHourEntry>();\n    private Set<WhatsNextEntry> whatsNextEntries = new HashSet<WhatsNextEntry>();\n\n    public Task() { }\n    \n    public Task(Task other)\n    {\n        this.setDescription(other.getDescription());\n        this.setEffortLeft(other.getEffortLeft());\n        this.setIteration(other.getIteration());\n        this.setName(other.getName());\n        this.setOriginalEstimate(other.getOriginalEstimate());\n        this.setRank(other.getRank());\n        this.setState(other.getState());\n        this.setStory(other.getStory());\n        this.getResponsibles().addAll(other.getResponsibles());\n        \n        // Complex members\n        for (TaskHourEntry t : other.getHourEntries())\n        {\n            TaskHourEntry he = new TaskHourEntry(t);\n            this.getHourEntries().add(he);\n        }\n        for (WhatsNextEntry we : other.getWhatsNextEntries())\n        {\n            WhatsNextEntry newEntry = new WhatsNextEntry(we);\n            this.getWhatsNextEntries().add(newEntry);\n        }\n    }\n    \n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    @XmlAttribute(name = \"objectId\")\n    public int getId() {\n        return id;\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    @Type(type = \"escaped_truncated_varchar\")\n    @JSON\n    @XmlAttribute\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    @JSON\n    @Type(type = \"escaped_text\")\n    @XmlElement\n    public String getDescription() {\n        return description;\n    }\n\n    public void setDescription(String description) {\n        this.description = description;\n    }\n\n    @ManyToOne\n    @JSON(include = false)\n    public Iteration getIteration() {\n        return iteration;\n    }\n\n    public void setIteration(Iteration iteration) {\n        this.iteration = iteration;\n    }\n\n    @ManyToOne\n    @JSON(include = false)\n    public Story getStory() {\n        return story;\n    }\n\n    public void setStory(Story story) {\n        this.story = story;\n    }\n\n    @Embedded\n    @AttributeOverrides(@AttributeOverride(name = \"minorUnits\", column = @Column(name = \"effortleft\")))\n    @XmlAttribute\n    public ExactEstimate getEffortLeft() {\n        return effortLeft;\n    }\n\n    public void setEffortLeft(ExactEstimate estimate) {\n        this.effortLeft = estimate;\n    }\n    \n    @Embedded\n    @AttributeOverrides(@AttributeOverride(name = \"minorUnits\", column = @Column(name = \"originalestimate\")))\n    @XmlAttribute\n    public ExactEstimate getOriginalEstimate() {\n        return originalEstimate;\n    }\n\n    public void setOriginalEstimate(ExactEstimate originalEstimate) {\n        this.originalEstimate = originalEstimate;\n    }\n\n    @JSON\n    @Enumerated(EnumType.ORDINAL)\n    @Column(nullable = false)\n    @XmlAttribute\n    public TaskState getState() {\n        return state;\n    }\n\n    public void setState(TaskState state) {\n        this.state = state;\n    }\n\n    @ManyToMany(\n            targetEntity = fi.hut.soberit.agilefant.model.User.class,\n            fetch = FetchType.LAZY\n    )\n    @JoinTable(\n            name = \"task_user\"\n    )\n    @OrderBy(\"initials asc\")\n    @JSON(include = false)\n    @XmlElementWrapper(name=\"responsibles\")\n    @XmlElement(name=\"user\")\n    public Set<User> getResponsibles() {\n        return responsibles;\n    }\n    \n    public void setResponsibles(Set<User> responsibles) {\n        this.responsibles = responsibles;\n    }\n\n    @NotAudited\n    @OneToMany(\n            targetEntity = fi.hut.soberit.agilefant.model.WhatsNextEntry.class,\n            fetch = FetchType.LAZY,\n            mappedBy = \"task\",\n            cascade = CascadeType.REMOVE\n    )\n    @JSON(include = false)\n    public Set<WhatsNextEntry> getWhatsNextEntries() {\n        return whatsNextEntries;\n    }\n    \n    public void setWhatsNextEntries(Set<WhatsNextEntry> entries) {\n        this.whatsNextEntries = entries;\n    }\n\n    @OneToMany(mappedBy=\"task\")\n    @NotAudited\n    @XmlElementWrapper(name=\"hourEntries\")\n    @XmlElement(name=\"hourEntry\")\n    public Set<TaskHourEntry> getHourEntries() {\n        return hourEntries;\n    }\n    \n    public void setHourEntries(Set<TaskHourEntry> hourEntries) {\n        this.hourEntries = hourEntries;\n    }\n\n    @Column(nullable = false, columnDefinition = \"int default 0\")\n    @XmlAttribute\n    public Integer getRank() {\n        return rank;\n    }\n    \n    public void setRank(Integer rank) {\n        this.rank = rank;\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\model\\\\TaskContainer.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["TaskContainer"], "MN": ["getTasks", "setTasks", "getDescription", "getId"], "PN": ["tasks"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.model;\n\nimport java.util.Set;\n\npublic interface TaskContainer {\n    public Set<Task> getTasks();\n    public void setTasks(Set<Task> tasks);\n    public String getDescription();\n    public int getId();\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\model\\\\TaskHourEntry.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["TaskHourEntry"], "SCS_MemberReference": ["NONE", "task", "task", "task"], "AN": ["task"], "SCS_VariableDeclarator": ["task"], "SCS_ConstructorDeclaration": ["TaskHourEntry", "TaskHourEntry"], "SCS_ClassReference": [null, "other"], "SCS_MethodInvocation": ["setTask", "getTask"], "MN": ["setTask", "getTask"], "PN": ["task"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.model;\n\nimport javax.persistence.Entity;\nimport javax.persistence.ManyToOne;\nimport javax.xml.bind.annotation.XmlAccessType;\nimport javax.xml.bind.annotation.XmlAccessorType;\n\nimport org.hibernate.annotations.BatchSize;\n\nimport flexjson.JSON;\n\n@Entity\n@BatchSize(size = 20)\n@XmlAccessorType( XmlAccessType.NONE )\npublic class TaskHourEntry extends HourEntry {\n\n    private Task task;\n\n    public TaskHourEntry() { }\n    \n    public TaskHourEntry(TaskHourEntry other)\n    {\n        this.setTask(other.getTask());\n    }\n    \n    public void setTask(Task task) {\n        this.task = task;\n    }\n\n    @ManyToOne\n    @JSON(include = false)\n    public Task getTask() {\n        return task;\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\model\\\\TaskState.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["TaskState"], "MN": ["getOrdinal", "getName"], "PN": [], "SCS_ClassReference": [null, null], "SCS_MethodInvocation": ["ordinal", "name"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.model;\n\nimport javax.xml.bind.annotation.XmlEnum;\nimport javax.xml.bind.annotation.XmlEnumValue;\n\n@XmlEnum\npublic enum TaskState {\n\n    @XmlEnumValue(\"NOT_STARTED\") NOT_STARTED,\n    @XmlEnumValue(\"STARTED\")     STARTED,\n    @XmlEnumValue(\"PENDING\")     PENDING,\n    @XmlEnumValue(\"BLOCKED\")     BLOCKED,\n    @XmlEnumValue(\"IMPLEMENTED\") IMPLEMENTED,\n    @XmlEnumValue(\"DONE\")        DONE,\n    @XmlEnumValue(\"DEFERRED\")    DEFERRED;\n\n    public int getOrdinal() {\n        return this.ordinal();\n    }\n\n    public String getName() {\n        return this.name();\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\model\\\\Team.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["Team"], "SCS_MemberReference": ["NONE", "AUTO", "id", "id", "id", "name", "name", "name", "description", "description", "description", "users", "users", "users", "EAGER", "products", "products", "products", "EAGER", "iterations", "iterations", "iterations", "o"], "AN": ["id", "name", "description", "users", "products", "iterations"], "SCS_VariableDeclarator": ["id", "name", "description", "users", "products", "iterations"], "MN": ["getId", "setId", "getName", "setName", "getDescription", "setDescription", "getUsers", "setUsers", "getProducts", "setProducts", "getIterations", "setIterations", "compareTo", "getNumberOfUsers"], "PN": ["id", "name", "description", "users", "products", "iterations", "o"], "SCS_ClassReference": ["User", "Product", "Iteration", "", null, "o", "", null], "SCS_MethodInvocation": ["getName", "compareToIgnoreCase", "getName", "getUsers", "size"], "CO": ["/**\n * Hibernate entity bean representing a team consisting of multiple\n * <code>User</code>s.\n * \n * @see User\n * @author rjokelai\n * \n */", "/**\n     * Get the id of this object.\n     * <p>\n     * The id is unique among all users.\n     */", "/**\n     * Set the id.\n     * \n     * @param id\n     *            the id to set\n     */", "/**\n     * Get the name of the team.\n     * \n     * @return the name\n     */", "/**\n     * Set the name of the team.\n     * \n     * @param name\n     *            the name to set\n     */", "/**\n     * Get the team's description.\n     * \n     * @return the description\n     */", "/**\n     * Set the team's description.\n     * \n     * @param description\n     *            the description to set\n     */", "/**\n     * Get the team's users.\n     * \n     * @return the users\n     */", "/**\n     * Set the team's users.\n     * \n     * @param users\n     *            the users to set\n     */", "/**\n     * Get the team's products\n     * \n     * return the products\n     */", "/**\n     * Set the team's products.\n     * \n     * @param products the products to be set\n     */", "/**\n     * Get the team's iterations\n     * \n     * return the iterations\n     */", "/**\n     * Set the team's iterations.\n     * \n     * @param iterations the iterations to be set\n     */", "/**\n     * Compares the name of the team to an other team's name.\n     */"], "CODE": "package fi.hut.soberit.agilefant.model;\n\nimport java.util.Collection;\nimport java.util.HashSet;\nimport java.util.Set;\n\nimport javax.persistence.Column;\nimport javax.persistence.Entity;\nimport javax.persistence.FetchType;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.GenerationType;\nimport javax.persistence.Id;\nimport javax.persistence.JoinColumn;\nimport javax.persistence.JoinTable;\nimport javax.persistence.ManyToMany;\nimport javax.persistence.Table;\nimport javax.persistence.Transient;\nimport javax.xml.bind.annotation.XmlAccessType;\nimport javax.xml.bind.annotation.XmlAccessorType;\nimport javax.xml.bind.annotation.XmlAttribute;\n\nimport org.hibernate.annotations.BatchSize;\nimport org.hibernate.annotations.Type;\nimport org.hibernate.envers.Audited;\n\nimport flexjson.JSON;\n\n/**\n * Hibernate entity bean representing a team consisting of multiple\n * <code>User</code>s.\n * \n * @see User\n * @author rjokelai\n * \n */\n@BatchSize(size = 20)\n@Entity\n@Table(name = \"teams\")\n@Audited\n@XmlAccessorType( XmlAccessType.NONE )\npublic class Team implements Comparable<Team> {\n\n    private int id;\n\n    private String name;\n\n    private String description;\n\n    private Collection<User> users = new HashSet<User>();\n    \n    private Set<Product> products = new HashSet<Product>();\n    \n    private Set<Iteration> iterations = new HashSet<Iteration>();\n\n    /**\n     * Get the id of this object.\n     * <p>\n     * The id is unique among all users.\n     */\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    @JSON\n    @XmlAttribute(name = \"objectId\")\n    public int getId() {\n        return id;\n    }\n\n    /**\n     * Set the id.\n     * \n     * @param id\n     *            the id to set\n     */\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    /**\n     * Get the name of the team.\n     * \n     * @return the name\n     */\n    @Type(type = \"escaped_truncated_varchar\")\n    @Column(unique = true)\n    @JSON\n    public String getName() {\n        return name;\n    }\n\n    /**\n     * Set the name of the team.\n     * \n     * @param name\n     *            the name to set\n     */\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    /**\n     * Get the team's description.\n     * \n     * @return the description\n     */\n    @Type(type = \"escaped_text\")\n    @JSON\n    public String getDescription() {\n        return description;\n    }\n\n    /**\n     * Set the team's description.\n     * \n     * @param description\n     *            the description to set\n     */\n    public void setDescription(String description) {\n        this.description = description;\n    }\n\n    /**\n     * Get the team's users.\n     * \n     * @return the users\n     */\n    @ManyToMany(targetEntity = User.class)\n    @JoinTable(name = \"team_user\", joinColumns = { @JoinColumn(name = \"Team_id\") }, inverseJoinColumns = { @JoinColumn(name = \"User_id\") })\n    @BatchSize(size = 5)\n    @JSON(include = false)\n    public Collection<User> getUsers() {\n        return users;\n    }\n\n    /**\n     * Set the team's users.\n     * \n     * @param users\n     *            the users to set\n     */\n    public void setUsers(Collection<User> users) {\n        this.users = users;\n    }\n    \n    /**\n     * Get the team's products\n     * \n     * return the products\n     */\n    @ManyToMany(targetEntity = Product.class, fetch=FetchType.EAGER)\n    @JoinTable(name = \"team_product\", joinColumns = { @JoinColumn(name = \"Team_id\") }, inverseJoinColumns = { @JoinColumn(name = \"Product_id\") })\n    @BatchSize(size = 5)\n    @JSON(include = false)\n    public Set<Product> getProducts() {\n        return products;\n    }\n    \n    /**\n     * Set the team's products.\n     * \n     * @param products the products to be set\n     */\n    public void setProducts(Set<Product> products) {\n        this.products = products;\n    }\n    \n    /**\n     * Get the team's iterations\n     * \n     * return the iterations\n     */\n    @ManyToMany(targetEntity = Iteration.class, fetch=FetchType.EAGER)\n    @JoinTable(name = \"team_iteration\", joinColumns = { @JoinColumn(name = \"Team_id\") }, inverseJoinColumns = { @JoinColumn(name = \"Iteration_id\") })\n    @BatchSize(size = 5)\n    @JSON(include = false)\n    public Set<Iteration> getIterations() {\n        return iterations;\n    }\n    \n    /**\n     * Set the team's iterations.\n     * \n     * @param iterations the iterations to be set\n     */\n    public void setIterations(Set<Iteration> iterations) {\n        this.iterations = iterations;\n    }\n\n    /**\n     * Compares the name of the team to an other team's name.\n     */\n    @Transient\n    public int compareTo(Team o) {\n        if (o == null) {\n            return -1;\n        }\n        return getName().compareToIgnoreCase(o.getName());\n    }\n\n    @Transient\n    @JSON(include = false)\n    public int getNumberOfUsers() {\n        return getUsers().size();\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\model\\\\TimesheetLoggable.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["TimesheetLoggable"], "CO": ["/**\n * Interface for things that are timesheet loggable.\n * \n * @author Roni Tammisalo, Ville Rantamaula\n */"], "CODE": "package fi.hut.soberit.agilefant.model;\n\n/**\n * Interface for things that are timesheet loggable.\n * \n * @author Roni Tammisalo, Ville Rantamaula\n */\npublic interface TimesheetLoggable {\n    \n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\model\\\\User.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["User", "UserSettingType"], "SCS_MemberReference": ["NONE", "NONE", "ask", "AUTO", "id", "id", "id", "fullName", "fullName", "fullName", "loginName", "loginName", "loginName", "password", "password", "password", "loginName", "email", "email", "email", "initials", "initials", "initials", "EAGER", "SUBSELECT", "teams", "teams", "teams", "enabled", "enabled", "enabled", "admin", "admin", "admin", "assignments", "assignments", "assignments", "stories", "stories", "LAZY", "stories", "tasks", "tasks", "LAZY", "tasks", "weekEffort", "weekEffort", "weekEffort", "LAZY", "REMOVE", "holidays", "holidays", "holidays", "LAZY", "REMOVE", "holidayAnomalies", "holidayAnomalies", "holidayAnomalies", "autoassignToTasks", "autoassignToTasks", "autoassignToTasks", "autoassignToStories", "autoassignToStories", "autoassignToStories", "markStoryStarted", "markStoryStarted", "markStoryStarted", "recentItemsNumberOfWeeks", "recentItemsNumberOfWeeks", "recentItemsNumberOfWeeks"], "AN": ["id", "password", "loginName", "fullName", "email", "initials", "enabled", "admin", "teams", "assignments", "stories", "tasks", "weekEffort", "holidays", "holidayAnomalies", "recentItemsNumberOfWeeks", "autoassignToTasks", "autoassignToStories", "markStoryStarted"], "SCS_VariableDeclarator": ["id", "password", "loginName", "fullName", "email", "initials", "enabled", "admin", "teams", "assignments", "stories", "tasks", "weekEffort", "holidays", "holidayAnomalies", "recentItemsNumberOfWeeks", "autoassignToTasks", "autoassignToStories", "markStoryStarted"], "MN": ["getId", "setId", "getFullName", "setFullName", "getLoginName", "setLoginName", "getPassword", "setPassword", "getName", "getEmail", "setEmail", "getInitials", "setInitials", "getTeams", "setTeams", "isEnabled", "setEnabled", "isAdmin", "setAdmin", "getAssignments", "setAssignments", "setStories", "getStories", "setTasks", "getTasks", "setWeekEffort", "getWeekEffort", "getHolidays", "setHolidays", "getHolidayAnomalies", "setHolidayAnomalies", "isAutoassignToTasks", "setAutoassignToTasks", "isAutoassignToStories", "setAutoassignToStories", "getMarkStoryStarted", "setMarkStoryStarted", "getRecentItemsNumberOfWeeks", "setRecentItemsNumberOfWeeks"], "PN": ["id", "fullName", "loginName", "password", "email", "initials", "teams", "enabled", "admin", "assignments", "stories", "tasks", "weekEffort", "holidays", "holidayAnomalies", "autoassignToTasks", "autoassignToStories", "markStoryStarted", "recentItemsNumberOfWeeks"], "SCS_ClassReference": ["Team", "Story", "Task"], "CO": ["/**\n * Hibernate entity bean representing a user. User represents a person using the\n * webapp: it's more a thing of the implementation than anything conceptual.\n * <p>\n * The user carries information on username, password, full name and email. Also\n * there're different collections of items, where this user is assigned.\n */", "/*\n     * User-specific settings\n     */", "/**\n     * Get the id of this object.\n     * <p>\n     * The id is unique among all users.\n     */", "// tag this field as the id", "// generate automatically", "/**\n     * Set the id of this object.\n     * <p>\n     * You shouldn't normally call this.\n     */", "/** Get full name. */", "/** Set full name. */", "/** Get login name. */", "/** Set login name. */", "/** Get password. */", "/** Set password. */", "/** Get login name. */", "/**\n     * Get email addresses. Note that the field is validated to be a valid a\n     * email address: an exception is thrown on store, if it's invalid.\n     */", "/**\n     * Set email addresses. Note that the field is validated to be a valid a\n     * email address: an exception is thrown on store, if it's invalid.\n     */", "/**\n     * Get the user's initials.\n     * \n     * @return the initials\n     */", "/**\n     * Set the user's initials.\n     * \n     * @param initials\n     *            the initials to set\n     */", "/**\n     * Get the user's teams.\n     * \n     * @return the teams\n     */", "/**\n     * Set the user's teams.\n     * \n     * @param teams\n     */", "/**\n     * Check, if the user is disabled\n     * \n     * @return true, if user is disabled, false otherwise\n     */", "/**\n     * Set the user's enabled status.\n     * \n     * @param enabled\n     */", "/**\n     * Check, if the user is an admin\n     * \n     * @return true, if user is admin, false otherwise\n     */", "/**\n     * Set the user's admin status.\n     * \n     * @param admin\n     */", "/**\n     * Get the users assignments to backlogs.\n     * @return\n     */", "/** Get stories, of which the user is responsible. */", "/** Get tasks, of which the user is responsible. */"], "CODE": "package fi.hut.soberit.agilefant.model;\n\nimport java.util.Collection;\nimport java.util.HashSet;\nimport java.util.Set;\n\nimport javax.persistence.AttributeOverride;\nimport javax.persistence.AttributeOverrides;\nimport javax.persistence.CascadeType;\nimport javax.persistence.Column;\nimport javax.persistence.Embedded;\nimport javax.persistence.Entity;\nimport javax.persistence.FetchType;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.GenerationType;\nimport javax.persistence.Id;\nimport javax.persistence.JoinColumn;\nimport javax.persistence.JoinTable;\nimport javax.persistence.ManyToMany;\nimport javax.persistence.OneToMany;\nimport javax.persistence.Table;\nimport javax.persistence.Transient;\nimport javax.xml.bind.annotation.XmlAccessType;\nimport javax.xml.bind.annotation.XmlAccessorType;\nimport javax.xml.bind.annotation.XmlAttribute;\nimport javax.xml.bind.annotation.XmlRootElement;\n\nimport org.hibernate.annotations.BatchSize;\nimport org.hibernate.annotations.Fetch;\nimport org.hibernate.annotations.FetchMode;\nimport org.hibernate.annotations.Type;\nimport org.hibernate.envers.Audited;\nimport org.hibernate.envers.NotAudited;\n\nimport fi.hut.soberit.agilefant.db.hibernate.Email;\nimport flexjson.JSON;\n\n/**\n * Hibernate entity bean representing a user. User represents a person using the\n * webapp: it's more a thing of the implementation than anything conceptual.\n * <p>\n * The user carries information on username, password, full name and email. Also\n * there're different collections of items, where this user is assigned.\n */\n@BatchSize(size = 20)\n@Entity\n@Table(name = \"users\")\n@Audited\n@XmlRootElement(name = \"user\")\n@XmlAccessorType( XmlAccessType.NONE )\npublic class User implements NamedObject {\n\n    private int id;\n\n    private String password;\n    \n    private String loginName;\n\n    private String fullName;\n\n    private String email;\n\n    private String initials;\n\n    private boolean enabled = true;\n    \n    private boolean admin = true;\n\n    private Collection<Team> teams = new HashSet<Team>();\n\n    private Collection<Assignment> assignments = new HashSet<Assignment>();\n    \n    private Collection<Story> stories = new HashSet<Story>();\n    \n    private Set<Task> tasks = new HashSet<Task>();\n    \n    private ExactEstimate weekEffort = new ExactEstimate(0);\n    \n    private Collection<Holiday> holidays = new HashSet<Holiday>();\n    \n    private Collection<HolidayAnomaly> holidayAnomalies = new HashSet<HolidayAnomaly>();\n    \n    private int recentItemsNumberOfWeeks = 16;\n    \n    /*\n     * User-specific settings\n     */\n    @XmlAccessorType( XmlAccessType.NONE )\n    public enum UserSettingType { never, ask, always };\n    \n    private boolean autoassignToTasks = true;\n    private boolean autoassignToStories = true;\n    private UserSettingType markStoryStarted = UserSettingType.ask;\n    \n    \n    /**\n     * Get the id of this object.\n     * <p>\n     * The id is unique among all users.\n     */\n    // tag this field as the id\n    @Id\n    // generate automatically\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    @JSON\n    @XmlAttribute(name = \"objectId\")\n    public int getId() {\n        return id;\n    }\n\n    /**\n     * Set the id of this object.\n     * <p>\n     * You shouldn't normally call this.\n     */\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    /** Get full name. */\n    @Type(type = \"escaped_truncated_varchar\")\n    @JSON\n    @XmlAttribute\n    public String getFullName() {\n        return fullName;\n    }\n\n    /** Set full name. */\n    public void setFullName(String fullName) {\n        this.fullName = fullName;\n    }\n\n    /** Get login name. */\n    @Column(unique = true)\n    @Type(type = \"escaped_truncated_varchar\")\n    @JSON\n    public String getLoginName() {\n        return loginName;\n    }\n\n    /** Set login name. */\n    public void setLoginName(String loginName) {\n        this.loginName = loginName;\n    }\n\n    /** Get password. */\n    @Type(type = \"truncated_varchar\")\n    @JSON(include = false)\n    @NotAudited\n    @Column(name=\"passwd\")\n    public String getPassword() {\n        return password;\n    }\n\n    /** Set password. */\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    /** Get login name. */\n    @Transient\n    @JSON\n    public String getName() {\n        return this.loginName;\n    }\n\n    /**\n     * Get email addresses. Note that the field is validated to be a valid a\n     * email address: an exception is thrown on store, if it's invalid.\n     */\n    @Column(nullable = true)\n    @Email\n    @Type(type = \"truncated_varchar\")\n    @JSON\n    public String getEmail() {\n        return email;\n    }\n\n    /**\n     * Set email addresses. Note that the field is validated to be a valid a\n     * email address: an exception is thrown on store, if it's invalid.\n     */\n    public void setEmail(String email) {\n        this.email = email;\n    }\n\n    /**\n     * Get the user's initials.\n     * \n     * @return the initials\n     */\n    @JSON\n    @XmlAttribute\n    public String getInitials() {\n        return initials;\n    }\n\n    /**\n     * Set the user's initials.\n     * \n     * @param initials\n     *            the initials to set\n     */\n    public void setInitials(String initials) {\n        this.initials = initials;\n    }\n\n    /**\n     * Get the user's teams.\n     * \n     * @return the teams\n     */\n    @ManyToMany(targetEntity = Team.class, fetch=FetchType.EAGER)\n    @Fetch(FetchMode.SUBSELECT)\n    @JoinTable(name = \"team_user\", joinColumns = { @JoinColumn(name = \"User_id\") }, inverseJoinColumns = { @JoinColumn(name = \"Team_id\") })\n    @JSON(include = false)\n    @NotAudited\n    public Collection<Team> getTeams() {\n        return teams;\n    }\n\n    /**\n     * Set the user's teams.\n     * \n     * @param teams\n     */\n    public void setTeams(Collection<Team> teams) {\n        this.teams = teams;\n    }\n\n    /**\n     * Check, if the user is disabled\n     * \n     * @return true, if user is disabled, false otherwise\n     */\n    @JSON\n    @XmlAttribute\n    public boolean isEnabled() {\n        return enabled;\n    }\n\n    /**\n     * Set the user's enabled status.\n     * \n     * @param enabled\n     */\n    public void setEnabled(boolean enabled) {\n        this.enabled = enabled;\n    }\n    \n    /**\n     * Check, if the user is an admin\n     * \n     * @return true, if user is admin, false otherwise\n     */\n    @JSON\n    @NotAudited\n    @Column(columnDefinition = \"bit default 1\")\n    public boolean isAdmin() {\n        return admin;\n    }\n\n    /**\n     * Set the user's admin status.\n     * \n     * @param admin\n     */\n    public void setAdmin(boolean admin) {\n        this.admin = admin;\n    }\n\n    /**\n     * Get the users assignments to backlogs.\n     * @return\n     */\n    @OneToMany(mappedBy = \"user\")\n    @JSON(include = false)\n    @NotAudited\n    public Collection<Assignment> getAssignments() {\n        return assignments;\n    }\n\n    public void setAssignments(Collection<Assignment> assignments) {\n        this.assignments = assignments;\n    }\n\n    public void setStories(Collection<Story> stories) {\n        this.stories = stories;\n    }\n\n    /** Get stories, of which the user is responsible. */\n    @ManyToMany(mappedBy = \"responsibles\",\n            targetEntity = fi.hut.soberit.agilefant.model.Story.class,\n            fetch = FetchType.LAZY)\n    @NotAudited\n    public Collection<Story> getStories() {\n        return stories;\n    }\n    \n    public void setTasks(Set<Task> tasks) {\n        this.tasks = tasks;\n    }\n\n    /** Get tasks, of which the user is responsible. */\n    @ManyToMany(mappedBy = \"responsibles\",\n            targetEntity = fi.hut.soberit.agilefant.model.Task.class,\n            fetch = FetchType.LAZY)\n    @NotAudited\n    public Set<Task> getTasks() {\n        return tasks;\n    }\n    \n    public void setWeekEffort(ExactEstimate weekEffort) {\n        this.weekEffort = weekEffort;\n    }\n    \n    @Embedded\n    @AttributeOverrides(@AttributeOverride(name = \"minorUnits\", column = @Column(name = \"weekEffort\")))\n    public ExactEstimate getWeekEffort() {\n        return weekEffort;\n    }\n\n    @OneToMany(mappedBy=\"user\", fetch=FetchType.LAZY, cascade=CascadeType.REMOVE)\n    @NotAudited\n    public Collection<Holiday> getHolidays() {\n        return holidays;\n    }\n\n    public void setHolidays(Collection<Holiday> holidays) {\n        this.holidays = holidays;\n    }\n\n    @OneToMany(mappedBy=\"user\", fetch=FetchType.LAZY, cascade=CascadeType.REMOVE)\n    @NotAudited\n    public Collection<HolidayAnomaly> getHolidayAnomalies() {\n        return holidayAnomalies;\n    }\n\n    public void setHolidayAnomalies(Collection<HolidayAnomaly> holidayAnomalies) {\n        this.holidayAnomalies = holidayAnomalies;\n    }\n\n    @JSON\n    @NotAudited\n    @Column(columnDefinition = \"bit default 1\")\n    public boolean isAutoassignToTasks() {\n        return autoassignToTasks;\n    }\n\n    public void setAutoassignToTasks(boolean autoassignToTasks) {\n        this.autoassignToTasks = autoassignToTasks;\n    }\n\n    @JSON\n    @NotAudited\n    @Column(columnDefinition = \"bit default 1\")\n    public boolean isAutoassignToStories() {\n        return autoassignToStories;\n    }\n\n    public void setAutoassignToStories(boolean autoassignToStories) {\n        this.autoassignToStories = autoassignToStories;\n    }\n\n    @JSON\n    @NotAudited\n    @Column(columnDefinition = \"integer default 1\")\n    public UserSettingType getMarkStoryStarted() {\n        return markStoryStarted;\n    }\n\n    public void setMarkStoryStarted(UserSettingType markStoryStarted) {\n        this.markStoryStarted = markStoryStarted;\n    }\n\n    @JSON\n    @NotAudited\n    public int getRecentItemsNumberOfWeeks() {\n        return recentItemsNumberOfWeeks;\n    }\n\n    public void setRecentItemsNumberOfWeeks(int recentItemsNumberOfWeeks) {\n        this.recentItemsNumberOfWeeks = recentItemsNumberOfWeeks;\n    }\n\n    \n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\model\\\\WhatsNextEntry.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["WhatsNextEntry"], "SCS_MemberReference": ["NONE", "AUTO", "id", "id", "id", "user", "user", "user", "task", "task", "task", "rank", "rank", "rank"], "AN": ["id", "rank", "user", "task"], "SCS_VariableDeclarator": ["id", "rank", "user", "task"], "SCS_ConstructorDeclaration": ["WhatsNextEntry", "WhatsNextEntry"], "SCS_ClassReference": [null, "other", null, "other", null, "other"], "SCS_MethodInvocation": ["setRank", "getRank", "setTask", "getTask", "setUser", "getUser"], "MN": ["getId", "setId", "getUser", "setUser", "getTask", "setTask", "getRank", "setRank"], "PN": ["id", "user", "task", "rank"], "CO": ["/**\n * @author ahaapala\n */"], "CODE": "package fi.hut.soberit.agilefant.model;\n\n/**\n * @author ahaapala\n */\n\nimport javax.persistence.Column;\nimport javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.GenerationType;\nimport javax.persistence.Id;\nimport javax.persistence.ManyToOne;\nimport javax.persistence.Table;\nimport javax.persistence.UniqueConstraint;\nimport javax.xml.bind.annotation.XmlAccessType;\nimport javax.xml.bind.annotation.XmlAccessorType;\n\nimport flexjson.JSON;\n\n\n@Entity\n@Table(\n        name = \"whatsnextentry\",\n        uniqueConstraints={@UniqueConstraint(columnNames={\"task_id\", \"user_id\"})}\n)\n@XmlAccessorType( XmlAccessType.NONE )\npublic class WhatsNextEntry implements Rankable {\n    private int id;\n    private Integer rank = 0;\n    private User user;\n    private Task task;\n   \n    public WhatsNextEntry() { }\n    \n    public WhatsNextEntry(WhatsNextEntry other)\n    {\n        this.setRank(other.getRank());\n        this.setTask(other.getTask());\n        this.setUser(other.getUser());\n    }\n    \n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    public int getId() {\n        return id;\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    @ManyToOne()\n    @JSON(include = false)\n    public User getUser() {\n        return user;\n    }\n\n    public void setUser(User user) {\n        this.user = user;\n    }\n    \n    @ManyToOne\n    @JSON(include = false)\n    public Task getTask() {\n        return task;\n    }\n    \n    public void setTask(Task task) {\n        this.task = task;\n    }\n\n    @Column(nullable = false, columnDefinition = \"int default 0\")\n    public Integer getRank() {\n        return rank ;\n    }\n    \n    public void setRank(Integer rank) {\n        this.rank = rank;\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\model\\\\WhatsNextStoryEntry.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["WhatsNextStoryEntry"], "SCS_MemberReference": ["NONE", "AUTO", "id", "id", "id", "user", "user", "user", "story", "story", "story", "rank", "rank", "rank"], "AN": ["id", "rank", "user", "story"], "SCS_VariableDeclarator": ["id", "rank", "user", "story"], "SCS_ConstructorDeclaration": ["WhatsNextStoryEntry", "WhatsNextStoryEntry"], "SCS_ClassReference": [null, "other", null, "other", null, "other"], "SCS_MethodInvocation": ["setRank", "getRank", "setStory", "getStory", "setUser", "getUser"], "MN": ["getId", "setId", "getUser", "setUser", "getStory", "setStory", "getRank", "setRank"], "PN": ["id", "user", "story", "rank"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.model;\n\nimport javax.persistence.Column;\nimport javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.GenerationType;\nimport javax.persistence.Id;\nimport javax.persistence.ManyToOne;\nimport javax.persistence.Table;\nimport javax.persistence.UniqueConstraint;\nimport javax.xml.bind.annotation.XmlAccessType;\nimport javax.xml.bind.annotation.XmlAccessorType;\n\nimport flexjson.JSON;\n\n\n@Entity\n@Table(\n        name = \"whatsnextstoryentry\",\n        uniqueConstraints={@UniqueConstraint(columnNames={\"story_id\", \"user_id\"})}\n)\n@XmlAccessorType( XmlAccessType.NONE )\npublic class WhatsNextStoryEntry implements Rankable {\n    private int id;\n    private Integer rank = 0;\n    private User user;\n    private Story story;\n   \n    public WhatsNextStoryEntry() { }\n    \n    public WhatsNextStoryEntry(WhatsNextStoryEntry other)\n    {\n        this.setRank(other.getRank());\n        this.setStory(other.getStory());\n        this.setUser(other.getUser());\n    }\n    \n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    public int getId() {\n        return id;\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    @ManyToOne()\n    @JSON(include = false)\n    public User getUser() {\n        return user;\n    }\n\n    public void setUser(User user) {\n        this.user = user;\n    }\n    \n    @ManyToOne\n    @JSON(include = false)\n    public Story getStory() {\n        return story;\n    }\n    \n    public void setStory(Story story) {\n        this.story = story;\n    }\n\n    @Column(nullable = false, columnDefinition = \"int default 0\")\n    public Integer getRank() {\n        return rank ;\n    }\n    \n    public void setRank(Integer rank) {\n        this.rank = rank;\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\model\\\\WidgetCollection.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["WidgetCollection"], "SCS_MemberReference": ["NONE", "REMOVE", "id", "id", "id", "user", "user", "user", "name", "name", "name", "widgets", "widgets", "agilefantWidgets"], "AN": ["id", "user", "name", "widgets"], "SCS_VariableDeclarator": ["id", "user", "name", "widgets"], "SCS_ClassReference": ["AgilefantWidget"], "MN": ["getId", "setId", "getUser", "setUser", "getName", "setName", "getWidgets", "setWidgets"], "PN": ["id", "user", "name", "agilefantWidgets"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.model;\n\nimport java.util.Collection;\nimport java.util.HashSet;\n\nimport javax.persistence.CascadeType;\nimport javax.persistence.Column;\nimport javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.Id;\nimport javax.persistence.ManyToOne;\nimport javax.persistence.OneToMany;\nimport javax.persistence.Table;\nimport javax.xml.bind.annotation.XmlAccessType;\nimport javax.xml.bind.annotation.XmlAccessorType;\n\n@Entity\n@Table(name = \"widgetcollections\")\n@XmlAccessorType( XmlAccessType.NONE )\npublic class WidgetCollection {\n\n    @Id\n    @GeneratedValue\n    private int id;\n    \n    @ManyToOne\n    private User user;\n    \n    @Column(nullable = false)\n    private String name;\n    \n    @OneToMany(\n            cascade = CascadeType.REMOVE,\n            targetEntity = fi.hut.soberit.agilefant.model.AgilefantWidget.class,\n            mappedBy = \"widgetCollection\"\n    )\n    private Collection<AgilefantWidget> widgets = new HashSet<AgilefantWidget>();\n\n    public int getId() {\n        return id;\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    public User getUser() {\n        return user;\n    }\n\n    public void setUser(User user) {\n        this.user = user;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public Collection<AgilefantWidget> getWidgets() {\n        return widgets;\n    }\n\n    public void setWidgets(Collection<AgilefantWidget> agilefantWidgets) {\n        this.widgets = agilefantWidgets;\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\model\\\\notification\\\\NotificationConfiguration.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["NotificationConfiguration"], "AN": ["notificationAwareClass", "classPropertiesNames", "eventTypes"], "SCS_VariableDeclarator": ["notificationAwareClass", "classPropertiesNames", "eventTypes"], "SCS_ClassReference": ["Arrays", "Validate"], "SCS_MethodInvocation": ["asList", "notNull"], "SCS_MemberReference": ["INSERT", "UPDATE", "DELETE", "notificationAwareClass", "notificationAwareClass", "notificationAwareClass", "notificationAwareClass", "classPropertiesNames", "eventTypes", "classPropertiesNames", "classPropertiesNames", "eventTypes", "eventTypes"], "SCS_ConstructorDeclaration": ["NotificationConfiguration"], "MN": ["getNotificationAwareClass", "getClassPropertiesNames", "getEventTypes", "setClassPropertiesNames", "setEventTypes"], "PN": ["classPropertiesNames", "eventTypes"], "CO": ["/** Persistent (Hibernate) class which should be monitored for changes of properties' values*/", "/**\n     * List of all properties' names in {@code notificationAwareClass} which are supposed to be monitored for change\n     * and notifications are sent when any of these fields change.\n     * By default this list can be empty which means that any of {@code notificationAwareClass}'s property change triggers\n     * notification event.\n     */", "/** Types of events which should trigger notification event - by default any type of event triggers notification event. */"], "CODE": "package fi.hut.soberit.agilefant.model.notification;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport org.apache.commons.lang.Validate;\n\npublic class NotificationConfiguration {\n\n    /** Persistent (Hibernate) class which should be monitored for changes of properties' values*/\n    private Class notificationAwareClass;\n\n    /**\n     * List of all properties' names in {@code notificationAwareClass} which are supposed to be monitored for change\n     * and notifications are sent when any of these fields change.\n     * By default this list can be empty which means that any of {@code notificationAwareClass}'s property change triggers\n     * notification event.\n     */\n    private List<String> classPropertiesNames;\n\n    /** Types of events which should trigger notification event - by default any type of event triggers notification event. */\n    private List<NotificationEventType> eventTypes =\n            Arrays.asList(NotificationEventType.INSERT, NotificationEventType.UPDATE, NotificationEventType.DELETE);\n\n    public NotificationConfiguration(Class notificationAwareClass) {\n        Validate.notNull(notificationAwareClass, \"At least class for notification event must be specified!\");\n        this.notificationAwareClass = notificationAwareClass;\n    }\n\n    public Class getNotificationAwareClass() {\n        return notificationAwareClass;\n    }\n\n    public List<String> getClassPropertiesNames() {\n        return classPropertiesNames;\n    }\n\n    public List<NotificationEventType> getEventTypes() {\n        return eventTypes;\n    }\n\n\n    public void setClassPropertiesNames(List<String> classPropertiesNames) {\n        this.classPropertiesNames = classPropertiesNames;\n    }\n\n    public void setEventTypes(List<NotificationEventType> eventTypes) {\n        this.eventTypes = eventTypes;\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\model\\\\notification\\\\NotificationEvent.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["NotificationEvent"], "AN": ["entity", "entityProperties", "eventType"], "SCS_VariableDeclarator": ["entity", "entityProperties", "eventType"], "SCS_ConstructorDeclaration": ["NotificationEvent"], "SCS_ClassReference": ["Validate", "Collections"], "SCS_MethodInvocation": ["notNull", "unmodifiableMap"], "SCS_MemberReference": ["entity", "entity", "entity", "eventType", "eventType", "entity", "eventType", "entityProperties", "entityProperties", "entityProperties"], "MN": ["getEntity", "getEventType", "getEntityProperties", "setEntityProperties"], "PN": ["entityProperties"], "CO": ["/**\n * Class that encapsulates all information about notifications' aware event.\n */", "/**\n     * Map containing pairs [propertyName, propertyValue] for which property that is relevant to this notification event.\n     */"], "CODE": "package fi.hut.soberit.agilefant.model.notification;\n\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\nimport org.apache.commons.lang.Validate;\n\n/**\n * Class that encapsulates all information about notifications' aware event.\n */\npublic class NotificationEvent {\n\n    private Object entity;\n    /**\n     * Map containing pairs [propertyName, propertyValue] for which property that is relevant to this notification event.\n     */\n    private Map<String, Object> entityProperties = new HashMap<String, Object>();\n\n    private NotificationEventType eventType;\n\n    public NotificationEvent(Object entity, NotificationEventType eventType) {\n        Validate.notNull(entity, \"NotificationEvent's entity cannot be null!\");\n        this.entity = entity;\n        this.eventType = eventType;\n    }\n\n    public Object getEntity() {\n        return entity;\n    }\n\n    public NotificationEventType getEventType() {\n        return eventType;\n    }\n\n    public Map<String, Object> getEntityProperties() {\n        return entityProperties;\n    }\n\n    public void setEntityProperties(Map<String, Object> entityProperties) {\n        this.entityProperties = Collections.unmodifiableMap(entityProperties);\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\model\\\\notification\\\\NotificationEventType.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["NotificationEventType"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.model.notification;\n\npublic enum NotificationEventType {\n    INSERT,\n    UPDATE,\n    DELETE\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\readonly\\\\InvalidReadOnlyAccessException.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["InvalidReadOnlyAccessException"], "AN": ["serialVersionUID"], "SCS_VariableDeclarator": ["serialVersionUID"], "SCS_ConstructorDeclaration": ["InvalidReadOnlyAccessException"], "SCS_MemberReference": ["message"], "CO": ["/**\n * Exception thrown when there is a problem with read only access\n * \n * @author jkorri\n */"], "CODE": "package fi.hut.soberit.agilefant.readonly;\n\nimport org.springframework.security.core.AuthenticationException;\n\n/**\n * Exception thrown when there is a problem with read only access\n * \n * @author jkorri\n */\npublic class InvalidReadOnlyAccessException extends AuthenticationException {\n\n\tprivate static final long serialVersionUID = 4192566467511165809L;\n\n\tpublic InvalidReadOnlyAccessException(String message) {\n\t\tsuper(message);\n\t}\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\readonly\\\\ReadonlyFilter.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["ReadonlyFilter"], "AN": ["READONLYTOKEN_PARAM", "READONLY_ACTION_PATTERN", "iterationBusiness"], "SCS_VariableDeclarator": ["READONLYTOKEN_PARAM", "READONLY_ACTION_PATTERN", "iterationBusiness", "readonlyToken", "iterationExists", "actionIsReadOnly"], "MN": ["doFilter"], "PN": ["request", "response", "chain"], "SCS_VariableDeclaration": ["String", "boolean", "boolean"], "SCS_ClassReference": ["request", null, "chain"], "SCS_MethodInvocation": ["getParameter", "getIterationCountFromReadonlyToken", "doFilter"], "SCS_MemberReference": ["READONLYTOKEN_PARAM", "readonlyToken", "iterationBusiness", "readonlyToken", "request", "iterationExists", "actionIsReadOnly", "request", "response"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.readonly;\n\nimport java.io.IOException;\nimport javax.servlet.FilterChain;\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.ServletResponse;\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.transaction.annotation.Transactional;\nimport org.springframework.web.filter.GenericFilterBean;\n\nimport fi.hut.soberit.agilefant.business.IterationBusiness;\n\npublic class ReadonlyFilter extends GenericFilterBean {\n\n\tprivate static final String READONLYTOKEN_PARAM = \"readonlyToken\";\n\t\n\tprivate static final String READONLY_ACTION_PATTERN = \".*/RO[^/]*\\\\.action$\";\n\t\n\t@Autowired\n\tIterationBusiness iterationBusiness;\n\t\n    @Transactional(readOnly = true)\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n\t\tString readonlyToken = request.getParameter(READONLYTOKEN_PARAM);\n\t\t\n\t\tif(readonlyToken!=null) {\n\t\t\tboolean iterationExists = this.iterationBusiness.getIterationCountFromReadonlyToken(readonlyToken) > 0;\n\t\t\tboolean actionIsReadOnly = ((HttpServletRequest)request).getRequestURL().toString().matches(READONLY_ACTION_PATTERN);\n\t\t\tif(iterationExists && actionIsReadOnly) {\n\t\t\t\tchain.doFilter(request, response);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n        throw new InvalidReadOnlyAccessException(\"Invalid read only access\");\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\readonly\\\\TokenFilter.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["TokenFilter"], "AN": ["iterationBusiness", "GROUP", "tokenURLPattern"], "SCS_VariableDeclarator": ["iterationBusiness", "GROUP", "tokenURLPattern", "res", "req", "matcher", "token"], "SCS_ClassReference": ["Pattern", "tokenURLPattern", "req", null, "matcher", "matcher", null, "res", "req"], "SCS_MethodInvocation": ["compile", "matcher", "getRequestURL", "toString", "matches", "group", "getIterationCountFromReadonlyToken", "sendRedirect", "getContextPath"], "MN": ["doFilter"], "PN": ["request", "response", "chain"], "SCS_VariableDeclaration": ["HttpServletResponse", "HttpServletRequest", "Matcher", "String"], "SCS_MemberReference": ["response", "request", "GROUP", "iterationBusiness", "token", "token"], "CO": ["/**\n * Filter which redirects valid read only convenience urls to actual iteration\n *\n * @author jkorri\n */"], "CODE": "package fi.hut.soberit.agilefant.readonly;\n\nimport java.io.IOException;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nimport javax.servlet.FilterChain;\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.ServletResponse;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.filter.GenericFilterBean;\n\nimport fi.hut.soberit.agilefant.business.IterationBusiness;\n\n/**\n * Filter which redirects valid read only convenience urls to actual iteration\n *\n * @author jkorri\n */\n@Component(\"tokenFilter\")\npublic class TokenFilter extends GenericFilterBean {\n \n\t@Autowired\n\tIterationBusiness iterationBusiness;\n\t\n\tprivate static final int GROUP = 1;\n\n\tprivate static final Pattern tokenURLPattern = Pattern.compile(\"^.*/token/([0-9]+)$\");\n\t\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n        HttpServletResponse res = (HttpServletResponse) response;\n        HttpServletRequest req = (HttpServletRequest) request;\n                        \n        Matcher matcher = tokenURLPattern.matcher(req.getRequestURL().toString());\n        if(matcher.matches()) {\n        \tString token = matcher.group(GROUP);\n            if (this.iterationBusiness.getIterationCountFromReadonlyToken(token)>0) {\n                res.sendRedirect(req.getContextPath() + \"/ROIteration.action?readonlyToken=\" + token);\n                return;\n            }\n        }\n        \n        throw new InvalidReadOnlyAccessException(\"Invalid read only token\");\n    }    \n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\remote\\\\AuthenticationResource.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["AuthenticationResource"], "AN": ["userBusiness"], "SCS_VariableDeclarator": ["userBusiness", "user"], "MN": ["authenticate"], "PN": ["loginName", "password"], "SCS_MemberReference": ["APPLICATION_XML", "TEXT_XML", "userBusiness", "loginName", "password", "user", "SC_PRECONDITION_FAILED", "user"], "SCS_VariableDeclaration": ["User"], "SCS_ClassReference": [null, "Response", null, null], "SCS_MethodInvocation": ["retrieveByCredentials", "status", "entity", "build"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.remote;\n\nimport javax.annotation.security.RolesAllowed;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.ws.rs.FormParam;\nimport javax.ws.rs.POST;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.WebApplicationException;\nimport javax.ws.rs.core.MediaType;\nimport javax.ws.rs.core.Response;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.stereotype.Component;\n\nimport fi.hut.soberit.agilefant.business.UserBusiness;\nimport fi.hut.soberit.agilefant.model.User;\n\n@Component\n@Scope(\"prototype\")\n@RolesAllowed(\"agilefantremote\")\n@Path(\"/authenticate\")\npublic class AuthenticationResource {\n    @Autowired\n    private UserBusiness userBusiness;\n\n    @POST\n    @Produces( { MediaType.APPLICATION_XML, MediaType.TEXT_XML })\n    public User authenticate(@FormParam(\"username\") String loginName,\n            @FormParam(\"password\") String password) {\n        User user = this.userBusiness\n                .retrieveByCredentials(loginName, password);\n        if (user == null) {\n            throw new WebApplicationException(Response.status(\n                    HttpServletResponse.SC_PRECONDITION_FAILED).entity(\n                    \"Authentication failed\").build());\n        } \n        return user;\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\remote\\\\IterationResource.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["IterationResource"], "AN": ["iterationBusiness"], "SCS_VariableDeclarator": ["iterationBusiness"], "MN": ["get"], "PN": ["iterationId"], "SCS_MemberReference": ["APPLICATION_XML", "TEXT_XML", "iterationId"], "SCS_ClassReference": ["iterationBusiness"], "SCS_MethodInvocation": ["retrieveIterationOnlyLeafStories"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.remote;\n\nimport javax.annotation.security.RolesAllowed;\nimport javax.ws.rs.GET;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.PathParam;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.core.MediaType;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.stereotype.Component;\n\nimport fi.hut.soberit.agilefant.business.IterationBusiness;\nimport fi.hut.soberit.agilefant.transfer.IterationTO;\n\n@Path(\"/iteration/{iterationId}\")\n@Component\n@Scope(\"prototype\")\n@RolesAllowed(\"agilefantremote\")\npublic class IterationResource {\n\n    @Autowired\n    private IterationBusiness iterationBusiness;\n\n    @GET\n    @Produces({MediaType.APPLICATION_XML,MediaType.TEXT_XML})\n    public IterationTO get(@PathParam(\"iterationId\") Integer iterationId) {\n        return iterationBusiness.retrieveIterationOnlyLeafStories(iterationId);\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\remote\\\\ProductResource.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["ProductResource"], "AN": ["productBusiness"], "SCS_VariableDeclarator": ["productBusiness", "coll", "p", "products", "coll", "prod"], "MN": ["get", "getProjects", "getAll"], "PN": ["productId", "productId"], "SCS_MemberReference": ["APPLICATION_XML", "TEXT_XML", "productId", "APPLICATION_XML", "TEXT_XML", "productId", "p", "coll", "APPLICATION_XML", "TEXT_XML", "products", "prod", "coll"], "SCS_ClassReference": ["productBusiness", "productBusiness", "productBusiness", "coll", null, "productBusiness", "coll", null], "SCS_MethodInvocation": ["retrieve", "retrieveProjects", "retrieve", "getBacklogs", "add", "retrieveAllOrderByName", "getBacklogs", "add"], "SCS_VariableDeclaration": ["BacklogInfoCollectionTO", "ProjectTO", "Collection", "BacklogInfoCollectionTO", "Product"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.remote;\n\nimport java.util.Collection;\n\nimport javax.annotation.security.RolesAllowed;\nimport javax.ws.rs.GET;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.PathParam;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.core.MediaType;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.stereotype.Component;\n\nimport fi.hut.soberit.agilefant.business.ProductBusiness;\nimport fi.hut.soberit.agilefant.model.Product;\nimport fi.hut.soberit.agilefant.transfer.BacklogInfoCollectionTO;\nimport fi.hut.soberit.agilefant.transfer.BacklogInfoTO;\nimport fi.hut.soberit.agilefant.transfer.ProjectTO;\n\n@Path(\"/product\")\n@Component\n@Scope(\"prototype\")\n@RolesAllowed(\"agilefantremote\")\npublic class ProductResource {\n\n    @Autowired\n    private ProductBusiness productBusiness;\n\n    @GET\n    @Path(\"/{productId}\")\n    @Produces({MediaType.APPLICATION_XML,MediaType.TEXT_XML})\n    public Product get(@PathParam(\"productId\") Integer productId) {\n        return productBusiness.retrieve(productId);\n    }\n    \n    @GET\n    @Path(\"/{productId}/projects\")\n    @Produces({MediaType.APPLICATION_XML,MediaType.TEXT_XML})\n    public BacklogInfoCollectionTO getProjects(@PathParam(\"productId\") Integer productId) {\n        BacklogInfoCollectionTO coll = new BacklogInfoCollectionTO();\n        for (ProjectTO p : productBusiness.retrieveProjects(productBusiness.retrieve(productId))) {\n            coll.getBacklogs().add(new BacklogInfoTO(p));\n        }\n        return coll;\n    }\n    \n    @GET\n    @Path(\"/list\")\n    @Produces({MediaType.APPLICATION_XML,MediaType.TEXT_XML})\n    public BacklogInfoCollectionTO getAll() {\n        Collection<Product> products = productBusiness.retrieveAllOrderByName();\n        BacklogInfoCollectionTO coll = new BacklogInfoCollectionTO(); \n        for (Product prod : products) {\n            coll.getBacklogs().add(new BacklogInfoTO(prod));\n        }\n        return coll;\n    }\n\n    \n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\remote\\\\ProjectResource.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["ProjectResource"], "AN": ["projectBusiness"], "SCS_VariableDeclarator": ["projectBusiness", "coll", "iter", "projects", "coll", "prod"], "MN": ["get", "getProjects", "getAll"], "PN": ["projectId", "projectId"], "SCS_MemberReference": ["APPLICATION_XML", "TEXT_XML", "projectId", "APPLICATION_XML", "TEXT_XML", "projectId", "iter", "coll", "APPLICATION_XML", "TEXT_XML", "projects", "prod", "coll"], "SCS_ClassReference": ["projectBusiness", "projectBusiness", "coll", null, "projectBusiness", "coll", null], "SCS_MethodInvocation": ["getProjectData", "retrieveProjectIterations", "getBacklogs", "add", "retrieveAll", "getBacklogs", "add"], "SCS_VariableDeclaration": ["BacklogInfoCollectionTO", "IterationTO", "Collection", "BacklogInfoCollectionTO", "Project"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.remote;\n\nimport java.util.Collection;\n\nimport javax.annotation.security.RolesAllowed;\nimport javax.ws.rs.GET;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.PathParam;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.core.MediaType;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.stereotype.Component;\n\nimport fi.hut.soberit.agilefant.business.ProjectBusiness;\nimport fi.hut.soberit.agilefant.model.Project;\nimport fi.hut.soberit.agilefant.transfer.BacklogInfoCollectionTO;\nimport fi.hut.soberit.agilefant.transfer.BacklogInfoTO;\nimport fi.hut.soberit.agilefant.transfer.IterationTO;\nimport fi.hut.soberit.agilefant.transfer.ProjectTO;\n\n@Path(\"/project\")\n@Component\n@Scope(\"prototype\")\n@RolesAllowed(\"agilefantremote\")\npublic class ProjectResource {\n\n    @Autowired\n    private ProjectBusiness projectBusiness;\n\n    @GET\n    @Path(\"/{projectId}\")\n    @Produces({MediaType.APPLICATION_XML,MediaType.TEXT_XML})\n    public ProjectTO get(@PathParam(\"projectId\") Integer projectId) {\n        return projectBusiness.getProjectData(projectId);\n    }\n    \n    @GET\n    @Path(\"/{projectId}/iterations\")\n    @Produces({MediaType.APPLICATION_XML,MediaType.TEXT_XML})\n    public BacklogInfoCollectionTO getProjects(@PathParam(\"projectId\") Integer projectId) {\n        BacklogInfoCollectionTO coll = new BacklogInfoCollectionTO();\n        for (IterationTO iter : projectBusiness.retrieveProjectIterations(projectId)) {\n            coll.getBacklogs().add(new BacklogInfoTO(iter));\n        }\n        return coll;\n    }\n    \n    @GET\n    @Path(\"/list\")\n    @Produces({MediaType.APPLICATION_XML,MediaType.TEXT_XML})\n    public BacklogInfoCollectionTO getAll() {\n        Collection<Project> projects = projectBusiness.retrieveAll();\n        BacklogInfoCollectionTO coll = new BacklogInfoCollectionTO(); \n        for (Project prod : projects) {\n            coll.getBacklogs().add(new BacklogInfoTO(prod));\n        }\n        return coll;\n    }\n    \n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\remote\\\\StoryResource.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["StoryResource"], "AN": ["storyBusiness"], "SCS_VariableDeclarator": ["storyBusiness"], "MN": ["get"], "PN": ["storyId"], "SCS_MemberReference": ["APPLICATION_XML", "TEXT_XML", "storyId"], "SCS_ClassReference": ["storyBusiness"], "SCS_MethodInvocation": ["retrieve"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.remote;\n\nimport javax.annotation.security.RolesAllowed;\nimport javax.ws.rs.GET;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.PathParam;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.core.MediaType;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.stereotype.Component;\n\nimport fi.hut.soberit.agilefant.business.StoryBusiness;\nimport fi.hut.soberit.agilefant.model.Story;\n\n@Path(\"/story/{storyId}\")\n@Component\n@Scope(\"prototype\")\n@RolesAllowed(\"agilefantremote\")\npublic class StoryResource {\n\n    @Autowired\n    private StoryBusiness storyBusiness;\n\n    @GET\n    @Produces({MediaType.APPLICATION_XML,MediaType.TEXT_XML})\n    public Story get(@PathParam(\"storyId\") Integer storyId) {\n        return storyBusiness.retrieve(storyId);\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\remote\\\\TimesheetResource.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["TimesheetResource"], "AN": ["timesheetBusiness"], "SCS_VariableDeclarator": ["timesheetBusiness", "endDate", "startDate", "fmt", "rootNodes", "effortSum", "report"], "MN": ["get"], "PN": ["userIds", "backlogIds", "startDateStr", "endDateStr"], "SCS_MemberReference": ["APPLICATION_XML", "TEXT_XML", "endDateStr", "endDate", "endDateStr", "startDateStr", "startDate", "startDateStr", "timesheetBusiness", "backlogIds", "startDate", "endDate", "userIds", "timesheetBusiness", "rootNodes", "rootNodes", "effortSum", "report"], "SCS_VariableDeclaration": ["DateTime", "DateTimeFormatter", "List", "long", "TimesheetReportTO"], "SCS_ClassReference": ["DateTimeFormat", "fmt", "fmt", null, null, "report", "report"], "SCS_MethodInvocation": ["forPattern", "parseDateTime", "parseDateTime", "getRootNodes", "getRootNodeSum", "setProductNodes", "setTotalEffortSum"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.remote;\n\nimport java.util.List;\nimport java.util.Set;\n\nimport javax.annotation.security.RolesAllowed;\nimport javax.ws.rs.GET;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.QueryParam;\nimport javax.ws.rs.core.MediaType;\n\nimport org.joda.time.DateTime;\nimport org.joda.time.format.DateTimeFormat;\nimport org.joda.time.format.DateTimeFormatter;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.stereotype.Component;\n\nimport fi.hut.soberit.agilefant.business.TimesheetBusiness;\nimport fi.hut.soberit.agilefant.transfer.BacklogTimesheetNode;\nimport fi.hut.soberit.agilefant.transfer.TimesheetReportTO;\n\n@Component\n@Scope(\"prototype\")\n@RolesAllowed(\"agilefantremote\")\n@Path(\"/timesheets\")\npublic class TimesheetResource {\n    @Autowired\n    private TimesheetBusiness timesheetBusiness;\n\n    @GET\n    @Produces({MediaType.APPLICATION_XML,MediaType.TEXT_XML})\n    public TimesheetReportTO get(\n            @QueryParam(\"userIds\") Set<Integer> userIds,\n            @QueryParam(\"backlogIds\") Set<Integer> backlogIds,\n            @QueryParam(\"startDate\") String startDateStr,\n            @QueryParam(\"endDate\") String endDateStr) {\n        DateTime endDate = null, startDate = null;\n        DateTimeFormatter fmt = DateTimeFormat.forPattern(\"yyyy-MM-dd HH:mm\");\n        if (endDateStr != null) {\n            endDate = fmt.parseDateTime(endDateStr);\n        }\n        if (startDateStr != null) {\n            startDate = fmt.parseDateTime(startDateStr);\n        }\n        List<BacklogTimesheetNode> rootNodes = this.timesheetBusiness\n                .getRootNodes(backlogIds, startDate, endDate, null, userIds);\n        long effortSum = this.timesheetBusiness.getRootNodeSum(rootNodes);\n        TimesheetReportTO report = new TimesheetReportTO();\n        report.setProductNodes(rootNodes);\n        report.setTotalEffortSum(effortSum);\n        return report;\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\security\\\\AgilefantUserDetails.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["AgilefantUserDetails"], "AN": ["serialVersionUID", "username", "password", "enabled", "userId", "admin"], "SCS_VariableDeclarator": ["serialVersionUID", "username", "password", "enabled", "userId", "admin"], "SCS_ConstructorDeclaration": ["AgilefantUserDetails"], "SCS_MemberReference": ["username", "password", "userId", "enabled", "admin", "admin", "password", "username", "enabled", "admin", "userId"], "SCS_ClassReference": ["user", "user", "user", "user", "user", "ImmutableList", "ImmutableList"], "SCS_MethodInvocation": ["getLoginName", "getPassword", "getId", "isEnabled", "isAdmin", "of", "of"], "MN": ["getAuthorities", "getPassword", "getUsername", "isAccountNonExpired", "isAccountNonLocked", "isCredentialsNonExpired", "isEnabled", "isAdmin", "getUserId"], "PN": [], "CO": ["/**\n * Spring Security UserDetails-implementation.\n * <p>\n * This is the \"glue\" between our system and spring security authentication. Basically, we\n * provide these on request trough AgilefantUserDetailsService.\n * <p>\n * TODO: Should the user object be re-requested every time when \"getUser\" is\n * called due to Hibernate session issues? If so, how do we obtain UserDAO here?\n * \n * @see AgilefantUserDetailsService\n * @author Turkka \u00c3\u201eij\u00c3\u00a4l\u00c3\u00a4\n */", "// I have no idea what's the proper thing to put here", "/**\n     * Provide password.\n     */", "/**\n     * Provide username.\n     */", "/**\n     * Extra functionality to provide userId for callers.\n     */"], "CODE": "package fi.hut.soberit.agilefant.security;\n\nimport java.util.Collection;\n\nimport org.springframework.security.core.GrantedAuthority;\nimport org.springframework.security.core.authority.SimpleGrantedAuthority;\nimport org.springframework.security.core.userdetails.UserDetails;\n\nimport com.google.common.collect.ImmutableList;\n\nimport fi.hut.soberit.agilefant.model.User;\n\n/**\n * Spring Security UserDetails-implementation.\n * <p>\n * This is the \"glue\" between our system and spring security authentication. Basically, we\n * provide these on request trough AgilefantUserDetailsService.\n * <p>\n * TODO: Should the user object be re-requested every time when \"getUser\" is\n * called due to Hibernate session issues? If so, how do we obtain UserDAO here?\n * \n * @see AgilefantUserDetailsService\n * @author Turkka \u00c3\u201eij\u00c3\u00a4l\u00c3\u00a4\n */\npublic class AgilefantUserDetails implements UserDetails {\n\n    private static final long serialVersionUID = 1262586472763367026L;\n\n    private String username;\n\n    private String password;\n    \n    private boolean enabled;\n\n    private int userId;\n    \n    private boolean admin;\n\n    public AgilefantUserDetails(User user) {\n        username = user.getLoginName();\n        password = user.getPassword();\n        userId = user.getId();\n        enabled = user.isEnabled();\n        admin = user.isAdmin();\n    }\n    \n    public Collection<? extends GrantedAuthority> getAuthorities() {\n        // I have no idea what's the proper thing to put here\n        if(admin){\n            return ImmutableList.of(new SimpleGrantedAuthority(\"USER\"), new SimpleGrantedAuthority(\"ADMIN\"));\n        } else {\n            return ImmutableList.of(new SimpleGrantedAuthority(\"USER\"));\n        }\n    }\n\n    /**\n     * Provide password.\n     */\n    public String getPassword() {\n        return password;\n    }\n\n    /**\n     * Provide username.\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    public boolean isAccountNonExpired() {\n        return true;\n    }\n\n    public boolean isAccountNonLocked() {\n        return true;\n    }\n\n    public boolean isCredentialsNonExpired() {\n        return true;\n    }\n\n    public boolean isEnabled() {\n        return enabled;\n    }\n    \n    public boolean isAdmin() {\n        return admin;\n    }\n\n    /**\n     * Extra functionality to provide userId for callers.\n     */\n    public int getUserId() {\n        return userId;\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\security\\\\AgilefantUserDetailsService.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["AgilefantUserDetailsService", "AgilefantDataAccessException"], "AN": ["serialVersionUID", "userBusiness"], "SCS_VariableDeclarator": ["serialVersionUID", "userBusiness", "user"], "SCS_ConstructorDeclaration": ["AgilefantDataAccessException"], "SCS_MemberReference": ["msg", "userBusiness", "userBusiness", "userBusiness", "userName", "user", "userName", "user"], "MN": ["setUserBusiness", "loadUserByUsername"], "PN": ["userBusiness", "userName"], "SCS_VariableDeclaration": ["User"], "SCS_ClassReference": ["userBusiness"], "SCS_MethodInvocation": ["retrieveByLoginName"], "CO": ["/**\n * Spring Security UserDetailsService-implementation.\n * <p>\n * This is the \"glue\" between our system and authentication. Basically, we\n * provide AgilefantUserDetails-objects on request.\n * \n * @see AgilefantUserDetails\n * @author Turkka \u00c3\u201eij\u00c3\u00a4l\u00c3\u00a4\n */", "/**\n     * API method to provide UserDetails-object for given username. Returns\n     * AgilefantUserDetails - instances.\n     */", "// try getting user by given username", "// no user found, throw exception", "// success, return UserDetails-instance"], "CODE": "package fi.hut.soberit.agilefant.security;\n\nimport org.springframework.dao.DataAccessException;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.core.userdetails.UsernameNotFoundException;\n\nimport fi.hut.soberit.agilefant.business.UserBusiness;\nimport fi.hut.soberit.agilefant.model.User;\n\n/**\n * Spring Security UserDetailsService-implementation.\n * <p>\n * This is the \"glue\" between our system and authentication. Basically, we\n * provide AgilefantUserDetails-objects on request.\n * \n * @see AgilefantUserDetails\n * @author Turkka \u00c3\u201eij\u00c3\u00a4l\u00c3\u00a4\n */\npublic class AgilefantUserDetailsService implements UserDetailsService {\n\n    private static class AgilefantDataAccessException extends\n            DataAccessException {\n\n        private static final long serialVersionUID = -4433098907957189538L;\n\n        AgilefantDataAccessException(String msg) {\n            super(msg);\n        }\n    }\n\n    private UserBusiness userBusiness;\n\n    public void setUserBusiness(UserBusiness userBusiness) {\n        this.userBusiness = userBusiness;\n    }\n\n    /**\n     * API method to provide UserDetails-object for given username. Returns\n     * AgilefantUserDetails - instances.\n     */\n    public UserDetails loadUserByUsername(String userName)\n            throws UsernameNotFoundException, DataAccessException {\n        if (userBusiness == null)\n            throw new AgilefantDataAccessException(\"userBusiness was null\");\n\n        // try getting user by given username\n        User user = userBusiness.retrieveByLoginName(userName);\n\n        // no user found, throw exception\n        if (user == null)\n            throw new UsernameNotFoundException(\"no such user: \" + userName);\n\n        // success, return UserDetails-instance\n        return new AgilefantUserDetails(user);\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\security\\\\package-info.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": [], "CO": ["/**\n * This package contains security utilities and \"glue\" between \n * Agilefant-system and Spring Security System that is used for\n * authentication.\n */"], "CODE": "/**\n * This package contains security utilities and \"glue\" between \n * Agilefant-system and Spring Security System that is used for\n * authentication.\n */\npackage fi.hut.soberit.agilefant.security;", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\security\\\\RemoteServicesFilter.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["RemoteServicesFilter"], "MN": ["doFilter"], "PN": ["request", "response", "chain"], "SCS_VariableDeclaration": ["InitialContext", "Context", "Boolean"], "SCS_VariableDeclarator": ["ictx", "environment", "remoteServicesEnabled"], "SCS_MemberReference": ["ictx", "environment", "remoteServicesEnabled", "remoteServicesEnabled", "request", "response"], "SCS_ClassReference": ["ictx", "environment", "chain"], "SCS_MethodInvocation": ["lookup", "lookup", "doFilter"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.security;\n\nimport java.io.IOException;\n\nimport javax.naming.Context;\nimport javax.naming.InitialContext;\nimport javax.naming.NamingException;\nimport javax.servlet.FilterChain;\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.ServletResponse;\n\nimport org.springframework.web.filter.GenericFilterBean;\n\npublic class RemoteServicesFilter extends GenericFilterBean {\n\n    public void doFilter(ServletRequest request, ServletResponse response,\n            FilterChain chain) throws IOException, ServletException {\n      InitialContext ictx;\n      Context environment;\n      Boolean remoteServicesEnabled = false;\n      try {\n          ictx = new InitialContext();\n          environment = (Context)ictx.lookup(\"java:comp/env\");\n          remoteServicesEnabled = (Boolean)environment.lookup(\"remoteEnabled\");\n      } catch (NamingException e) {\n          throw new ServletException(\"Remote services not enabled\");\n      }\n      if (!remoteServicesEnabled) {\n          throw new ServletException(\"Remote services not enabled\");\n      }\n      \n      chain.doFilter(request, response);\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\security\\\\RestrictActionPathFilter.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["RestrictActionPathFilter"], "AN": ["STRUTS_ACTION_PATTERN"], "SCS_VariableDeclarator": ["STRUTS_ACTION_PATTERN"], "MN": ["doFilter"], "PN": ["request", "response", "chain"], "SCS_MemberReference": ["request", "request", "response"], "SCS_ClassReference": ["chain"], "SCS_MethodInvocation": ["doFilter"], "CO": ["/**\n * Filter that denies requests coming to struts that are not / or /ajax/ path\n * \n * @author vsseppa\n */"], "CODE": "package fi.hut.soberit.agilefant.security;\n\nimport java.io.IOException;\n\nimport javax.servlet.FilterChain;\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.ServletResponse;\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.springframework.security.access.AccessDeniedException;\nimport org.springframework.web.filter.GenericFilterBean;\n\n/**\n * Filter that denies requests coming to struts that are not / or /ajax/ path\n * \n * @author vsseppa\n */\npublic class RestrictActionPathFilter extends GenericFilterBean {\n\t\n\tprivate static final String STRUTS_ACTION_PATTERN = \"^(/ajax(/widgets)?)?/[^/]*.action$\";\n\t\n\t@Override\n\tpublic void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n\t\tif(!((HttpServletRequest)request).getServletPath().matches(STRUTS_ACTION_PATTERN)) {\n\t\t\tthrow new AccessDeniedException(\"Invalid struts path\");\n\t\t}\n\t\tchain.doFilter(request, response);\n\t}\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\security\\\\SecurityUtil.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["SecurityUtil"], "AN": ["threadLocalUser"], "SCS_VariableDeclarator": ["threadLocalUser", "ud", "userBusiness", "user", "context", "authentication"], "MN": ["initialValue", "getLoggedUserId", "setLoggedUser", "clearLoggedUser", "getLoggedUser", "logoutCurrentUser"], "PN": ["user"], "SCS_ConstructorDeclaration": ["SecurityUtil"], "SCS_ClassReference": ["SecurityContextHolder", null, "SecurityContextHolder", null, null, "ud", "ApplicationContextHolder", null, "UserBusiness", "userBusiness", "user", "threadLocalUser", "threadLocalUser", "threadLocalUser", "SecurityContextHolder", "context", "authentication"], "SCS_MethodInvocation": ["getContext", "getAuthentication", "getContext", "getAuthentication", "getPrincipal", "getUserId", "getApplicationContext", "getBean", "retrieveByLoginName", "getId", "set", "remove", "get", "getContext", "getAuthentication", "setAuthenticated"], "SCS_VariableDeclaration": ["AgilefantUserDetails", "UserBusiness", "User", "SecurityContext", "Authentication"], "SCS_MemberReference": ["ud", "user", "context", "authentication"], "CO": ["/**\n * Some security-related utilities.\n * \n * @author Turkka \u00c3\u201eij\u00c3\u00a4l\u00c3\u00a4\n */", "/** A thread local variable to save the user object in during the request. */", "/**\n     * Get id for the currently logged user. It's always valid to call this, as\n     * opposed to setLoggedUser, which is valid only during a web request.\n     * \n     * @return logged user id\n     * @throws IllegalStateException\n     *                 when there's no user logged\n     */", "/**\n     * Set the currently logged-in user (for the current thread/request).\n     * <p>\n     * The purpose is to store the user-object during a single WWW-request. This\n     * is achieved by saving the object in a thread local variable. (is this\n     * ok/valid?)\n     * <p>\n     * You shouldn't normally call this function.\n     * \n     * @see RefreshUserInterceptor\n     * @see getLoggedUser\n     * @param user\n     *                currently logged user\n     */", "/**\n     * Get currently logged-in user (for the current thread/request) as set by\n     * setLoggedUser.\n     * <p>\n     * <b>Currently only valid for struts-stuff.</b> ... since\n     * RefreshUserInterceptor ensures proper user is set.\n     * \n     * @see RefreshUserInterceptor\n     * @see setLoggedUser\n     * @return User object for the user who's logged in, or null if no user.\n     */"], "CODE": "package fi.hut.soberit.agilefant.security;\n\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\n\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.context.SecurityContext;\nimport org.springframework.security.core.context.SecurityContextHolder;\n\nimport fi.hut.soberit.agilefant.business.UserBusiness;\nimport fi.hut.soberit.agilefant.core.ApplicationContextHolder;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.web.RefreshUserInterceptor;\n\n/**\n * Some security-related utilities.\n * \n * @author Turkka \u00c3\u201eij\u00c3\u00a4l\u00c3\u00a4\n */\npublic class SecurityUtil {\n\n    /** A thread local variable to save the user object in during the request. */\n    private static ThreadLocal<User> threadLocalUser = new ThreadLocal<User>() {\n        protected synchronized User initialValue() {\n            return null;\n        }\n    };\n\n    private SecurityUtil() {\n    }\n\n    /**\n     * Get id for the currently logged user. It's always valid to call this, as\n     * opposed to setLoggedUser, which is valid only during a web request.\n     * \n     * @return logged user id\n     * @throws IllegalStateException\n     *                 when there's no user logged\n     */\n    public static int getLoggedUserId() throws IllegalStateException {\n        if (SecurityContextHolder.getContext().getAuthentication() == null)\n            throw new IllegalStateException(\"no logged user\");\n\n        try{\n            AgilefantUserDetails ud = (AgilefantUserDetails) SecurityContextHolder.getContext().getAuthentication().getPrincipal();\n\n            if (ud == null)\n                throw new IllegalStateException(\"no logged user\");\n            \n            return ud.getUserId();\n        } catch(ClassCastException cce){\n            UserBusiness userBusiness = ApplicationContextHolder.getApplicationContext().getBean(UserBusiness.class);\n            User user = userBusiness.retrieveByLoginName(\"readonly\");\n            return user.getId();\n        }\n    }\n\n    /**\n     * Set the currently logged-in user (for the current thread/request).\n     * <p>\n     * The purpose is to store the user-object during a single WWW-request. This\n     * is achieved by saving the object in a thread local variable. (is this\n     * ok/valid?)\n     * <p>\n     * You shouldn't normally call this function.\n     * \n     * @see RefreshUserInterceptor\n     * @see getLoggedUser\n     * @param user\n     *                currently logged user\n     */\n    public static void setLoggedUser(User user) {\n        threadLocalUser.set(user);\n    }\n\n    public static void clearLoggedUser() {\n        threadLocalUser.remove();\n    }\n\n    /**\n     * Get currently logged-in user (for the current thread/request) as set by\n     * setLoggedUser.\n     * <p>\n     * <b>Currently only valid for struts-stuff.</b> ... since\n     * RefreshUserInterceptor ensures proper user is set.\n     * \n     * @see RefreshUserInterceptor\n     * @see setLoggedUser\n     * @return User object for the user who's logged in, or null if no user.\n     */\n    public static User getLoggedUser() {\n        return threadLocalUser.get();\n    }\n    \n    public static void logoutCurrentUser() {\n        SecurityContext context = SecurityContextHolder.getContext();\n        if (context == null) return;\n        Authentication authentication = context.getAuthentication();\n        if (authentication == null) return;\n        authentication.setAuthenticated(false);\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\security\\\\SetupUserFilter.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["SetupUserFilter"], "AN": ["userBusiness"], "SCS_VariableDeclarator": ["userBusiness", "principal", "user"], "MN": ["doFilter"], "PN": ["request", "response", "chain"], "SCS_VariableDeclaration": ["Object", "User"], "SCS_ClassReference": ["SecurityContextHolder", null, null, null, "userBusiness", "SecurityUtil", "chain", "SecurityUtil"], "SCS_MethodInvocation": ["getContext", "getAuthentication", "getPrincipal", "retrieve", "retrieveByLoginName", "setLoggedUser", "doFilter", "setLoggedUser"], "SCS_MemberReference": ["principal", "user", "userBusiness", "principal", "user", "user", "request", "response"], "CO": ["/**\n * Filter sets current User for the duration of the request\n * \n * @author jkorri\n */"], "CODE": "package fi.hut.soberit.agilefant.security;\n\nimport java.io.IOException;\n\nimport javax.servlet.FilterChain;\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.ServletResponse;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.stereotype.Component;\nimport org.springframework.transaction.annotation.Transactional;\nimport org.springframework.web.filter.GenericFilterBean;\n\nimport fi.hut.soberit.agilefant.business.UserBusiness;\nimport fi.hut.soberit.agilefant.model.User;\n\n/**\n * Filter sets current User for the duration of the request\n * \n * @author jkorri\n */\n@Component(\"setupUserFilter\")\npublic class SetupUserFilter extends GenericFilterBean {\n\n\t@Autowired\n\tUserBusiness userBusiness;\n\t\n\t@Override\n\tpublic void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n\t\tObject principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();\t\t\n\n\t\tUser user;\n\t\tif(principal instanceof AgilefantUserDetails) {\n\t\t\tuser = this.userBusiness.retrieve(((AgilefantUserDetails)principal).getUserId());\n\t\t} else {\n            user = userBusiness.retrieveByLoginName(\"readonly\");\n\t\t}\n\t\t\n    \ttry {\n    \t\tSecurityUtil.setLoggedUser(user);\n    \t\tchain.doFilter(request, response);\n    \t} finally {\n    \t\tSecurityUtil.setLoggedUser(null);\n    \t}\n\t}\t\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\security\\\\WrappingMD5PasswordEncoder.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["WrappingMD5PasswordEncoder"], "AN": ["encoder"], "SCS_VariableDeclarator": ["encoder"], "MN": ["setPasswordEncoder", "encode", "matches"], "PN": ["encoder", "rawPassword", "rawPassword", "encodedPassword"], "SCS_MemberReference": ["encoder", "encoder", "encoder", "encoder", "encodedPassword"], "SCS_ClassReference": [null, "DigestUtils", "rawPassword", null, "DigestUtils", "rawPassword"], "SCS_MethodInvocation": ["encode", "md5Hex", "toString", "matches", "md5Hex", "toString"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.security;\n\nimport org.apache.commons.codec.digest.DigestUtils;\nimport org.springframework.security.crypto.password.PasswordEncoder;\n\npublic class WrappingMD5PasswordEncoder implements PasswordEncoder {\n\n\tprivate PasswordEncoder encoder;\n\t\n\tpublic void setPasswordEncoder(PasswordEncoder encoder) {\n\t\tthis.encoder = encoder;\n\t}\n\t\n\t@Override\n\tpublic String encode(CharSequence rawPassword) {\n\t\treturn this.encoder.encode(DigestUtils.md5Hex(rawPassword.toString()));\n\t}\n\n\t@Override\n\tpublic boolean matches(CharSequence rawPassword, String encodedPassword) {\n\t\treturn this.encoder.matches(DigestUtils.md5Hex(rawPassword.toString()), encodedPassword);\n\t}\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\transfer\\\\AgilefantHistoryEntry.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["AgilefantHistoryEntry"], "AN": ["object", "revision", "revisionType", "objectId"], "SCS_VariableDeclarator": ["object", "revision", "revisionType", "objectId"], "SCS_ConstructorDeclaration": ["AgilefantHistoryEntry", "AgilefantHistoryEntry"], "SCS_MemberReference": ["objectId", "objectId", "revisionType", "revisionType", "revision", "revision", "object", "object", "revision", "revision", "revisionType", "revisionType", "objectId", "object", "revision", "revisionType", "objectId", "object", "object", "revision"], "SCS_ClassReference": ["object", null], "SCS_MethodInvocation": ["getId", "getRevisionDate"], "MN": ["getObject", "getRevision", "getRevisionType", "getObjectId", "setObject", "getRevisionDate"], "PN": ["object"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.transfer;\n\nimport org.hibernate.envers.RevisionType;\nimport org.joda.time.DateTime;\n\nimport fi.hut.soberit.agilefant.model.AgilefantRevisionEntity;\nimport fi.hut.soberit.agilefant.model.NamedObject;\n\npublic class AgilefantHistoryEntry {\n    private NamedObject object;\n    private AgilefantRevisionEntity revision;\n    private RevisionType revisionType;\n    private int objectId;\n    \n    public AgilefantHistoryEntry(int objectId, RevisionType revisionType, AgilefantRevisionEntity revision) {\n        this.objectId = objectId;\n        this.revisionType = revisionType;\n        this.revision = revision;\n    }\n    \n    public AgilefantHistoryEntry(NamedObject object, AgilefantRevisionEntity revision, RevisionType revisionType) {\n        this.object = object;\n        this.revision = revision;\n        this.revisionType = revisionType;\n        this.objectId = object.getId();\n    }\n    \n    public NamedObject getObject() {\n        return object;\n    }\n\n    public AgilefantRevisionEntity getRevision() {\n        return revision;\n    }\n\n    public RevisionType getRevisionType() {\n        return revisionType;\n    }\n\n    public int getObjectId() {\n        return objectId;\n    }\n\n    public void setObject(NamedObject object) {\n        this.object = object;\n    }\n    \n    public DateTime getRevisionDate() {\n        return new DateTime(this.revision.getRevisionDate());\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\transfer\\\\AssignedWorkTO.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["AssignedWorkTO"], "AN": ["stories", "tasksWithoutStory"], "SCS_VariableDeclarator": ["stories", "tasksWithoutStory"], "MN": ["setStories", "getStories", "setTasksWithoutStory", "getTasksWithoutStory"], "PN": ["stories", "tasksWithoutStory"], "SCS_MemberReference": ["stories", "stories", "stories", "tasksWithoutStory", "tasksWithoutStory", "tasksWithoutStory"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.transfer;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport fi.hut.soberit.agilefant.model.Task;\nimport flexjson.JSON;\n\npublic class AssignedWorkTO {\n    private List<StoryTO> stories           = new ArrayList<StoryTO>();\n    private List<Task>  tasksWithoutStory = new ArrayList<Task>();\n\n    public void setStories(List<StoryTO> stories) {\n        this.stories = stories;\n    }\n\n    @JSON(include=true)\n    public List<StoryTO> getStories() {\n        return stories;\n    }\n\n    public void setTasksWithoutStory(List<Task> tasksWithoutStory) {\n        this.tasksWithoutStory = tasksWithoutStory;\n    }\n\n    @JSON(include=true)\n    public List<Task> getTasksWithoutStory() {\n        return tasksWithoutStory;\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\transfer\\\\AssignmentTO.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["AssignmentTO"], "AN": ["assignedLoad", "unassignedLoad", "availableWorktime", "totalLoad", "baselineLoad", "unassigned", "loadPercentage"], "SCS_VariableDeclarator": ["assignedLoad", "unassignedLoad", "availableWorktime", "totalLoad", "baselineLoad", "unassigned", "loadPercentage"], "SCS_ConstructorDeclaration": ["AssignmentTO", "AssignmentTO"], "SCS_ClassReference": ["BeanCopier"], "SCS_MethodInvocation": ["copy"], "SCS_MemberReference": ["assignment", "assignedLoad", "assignedLoad", "assignedLoad", "unassignedLoad", "unassignedLoad", "unassignedLoad", "totalLoad", "availableWorktime", "availableWorktime", "availableWorktime", "loadPercentage", "loadPercentage", "loadPercentage", "totalLoad", "totalLoad", "unassigned", "unassigned", "unassigned", "baselineLoad", "baselineLoad", "baselineLoad"], "MN": ["getAssignedLoad", "setAssignedLoad", "getUnassignedLoad", "setUnassignedLoad", "getTotalLoad", "getAvailableWorktime", "setAvailableWorktime", "getLoadPercentage", "setLoadPercentage", "setTotalLoad", "isUnassigned", "setUnassigned", "getBaselineLoad", "setBaselineLoad"], "PN": ["assignedLoad", "unassignedLoad", "availableWorktime", "loadPercentage", "totalLoad", "unassigned", "baselineLoad"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.transfer;\n\nimport fi.hut.soberit.agilefant.model.Assignment;\nimport fi.hut.soberit.agilefant.model.ExactEstimate;\nimport fi.hut.soberit.agilefant.model.SignedExactEstimate;\nimport fi.hut.soberit.agilefant.util.BeanCopier;\nimport flexjson.JSON;\n\npublic class AssignmentTO extends Assignment {\n\n    private ExactEstimate assignedLoad = new ExactEstimate(0);\n    private ExactEstimate unassignedLoad = new ExactEstimate(0);\n    private ExactEstimate availableWorktime = new ExactEstimate(0);\n    private SignedExactEstimate totalLoad = new SignedExactEstimate(0);\n    private SignedExactEstimate baselineLoad = new SignedExactEstimate(0);\n    private boolean unassigned = false;\n    private int loadPercentage = 0;\n\n    public AssignmentTO() {};\n    public AssignmentTO(Assignment assignment) {\n        BeanCopier.copy(assignment, this);\n    }\n\n    @JSON\n    public ExactEstimate getAssignedLoad() {\n        return assignedLoad;\n    }\n\n    public void setAssignedLoad(ExactEstimate assignedLoad) {\n        this.assignedLoad = assignedLoad;\n    }\n\n    @JSON\n    public ExactEstimate getUnassignedLoad() {\n        return unassignedLoad;\n    }\n\n    public void setUnassignedLoad(ExactEstimate unassignedLoad) {\n        this.unassignedLoad = unassignedLoad;\n    }\n\n    @JSON\n    public SignedExactEstimate getTotalLoad() {\n        return this.totalLoad;\n    }\n\n    @JSON\n    public ExactEstimate getAvailableWorktime() {\n        return availableWorktime;\n    }\n\n    public void setAvailableWorktime(ExactEstimate availableWorktime) {\n        this.availableWorktime = availableWorktime;\n    }\n\n    @JSON\n    public int getLoadPercentage() {\n        return loadPercentage;\n    }\n\n    public void setLoadPercentage(int loadPercentage) {\n        this.loadPercentage = loadPercentage;\n    }\n\n    public void setTotalLoad(SignedExactEstimate totalLoad) {\n        this.totalLoad = totalLoad;\n    }\n\n    @JSON\n    public boolean isUnassigned() {\n        return unassigned;\n    }\n\n    public void setUnassigned(boolean unassigned) {\n        this.unassigned = unassigned;\n    }\n    \n    @JSON\n    public SignedExactEstimate getBaselineLoad() {\n        return baselineLoad;\n    }\n\n    public void setBaselineLoad(SignedExactEstimate baselineLoad) {\n        this.baselineLoad = baselineLoad;\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\transfer\\\\AutocompleteDataNode.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["AutocompleteDataNode"], "AN": ["name", "matchedString", "id", "idList", "baseClassName", "enabled", "originalObject"], "SCS_VariableDeclarator": ["name", "matchedString", "id", "idList", "baseClassName", "enabled", "originalObject"], "SCS_ConstructorDeclaration": ["AutocompleteDataNode", "AutocompleteDataNode", "AutocompleteDataNode"], "SCS_MemberReference": ["baseClassName", "id", "name", "baseClass", "id", "name", "idList", "baseClass", "id", "name", "enabled", "enabled", "name", "name", "name", "id", "id", "id", "idList", "idList", "idList", "baseClassName", "enabled", "enabled", "enabled", "originalObject", "originalObject", "originalObject", "matchedString", "matchedString", "matchedString"], "SCS_ClassReference": ["baseClass", null, null, null], "SCS_MethodInvocation": ["getCanonicalName", "setId", "setName", "setIdList"], "MN": ["getName", "setName", "getId", "setId", "getIdList", "setIdList", "getBaseClassName", "isEnabled", "setEnabled", "getOriginalObject", "setOriginalObject", "setMatchedString", "getMatchedString"], "PN": ["name", "id", "idList", "enabled", "originalObject", "matchedString"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.transfer;\n\nimport java.util.Set;\n\nimport flexjson.JSON;\n\npublic class AutocompleteDataNode {\n    private String name = \"\";\n    private String matchedString = \"\";\n    private Integer id = 0;\n    private Set<Integer> idList = null;\n    private String baseClassName;\n    private boolean enabled = true;\n    private Object originalObject;\n    \n    public AutocompleteDataNode(Class<?> baseClass, Integer id, String name) {\n        this.baseClassName = baseClass.getCanonicalName(); \n        this.setId(id);\n        this.setName(name);\n    }\n    \n    public AutocompleteDataNode(Class<?> baseClass, Integer id, String name, Set<Integer> idList) {\n        this(baseClass, id, name);\n        this.setIdList(idList);\n    }\n    public AutocompleteDataNode(Class<?> baseClass, Integer id, String name, boolean enabled) {\n        this(baseClass, id, name);\n        this.enabled = enabled;\n    }\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n    public Integer getId() {\n        return id;\n    }\n    public void setId(Integer id) {\n        this.id = id;\n    }\n    @JSON(include=true)\n    public Set<Integer> getIdList() {\n        return idList;\n    }\n    public void setIdList(Set<Integer> idList) {\n        this.idList = idList;\n    }\n\n    public String getBaseClassName() {\n        return baseClassName;\n    }\n\n    public boolean isEnabled() {\n        return enabled;\n    }\n\n    public void setEnabled(boolean enabled) {\n        this.enabled = enabled;\n    }\n\n    public Object getOriginalObject() {\n        return originalObject;\n    }\n\n    public void setOriginalObject(Object originalObject) {\n        this.originalObject = originalObject;\n    }\n\n    public void setMatchedString(String matchedString) {\n        this.matchedString = matchedString;\n    }\n\n    @JSON\n    public String getMatchedString() {\n        return matchedString;\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\transfer\\\\BacklogInfoCollectionTO.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["BacklogInfoCollectionTO"], "AN": ["backlogs"], "SCS_VariableDeclarator": ["backlogs"], "MN": ["getBacklogs", "setBacklogs"], "PN": ["backlogs"], "SCS_MemberReference": ["backlogs", "backlogs", "backlogs"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.transfer;\n\nimport java.util.Collection;\nimport java.util.HashSet;\n\nimport javax.xml.bind.annotation.XmlElement;\nimport javax.xml.bind.annotation.XmlRootElement;\n\n@XmlRootElement(name = \"backlogs\")\npublic class BacklogInfoCollectionTO {\n\n    private Collection<BacklogInfoTO> backlogs = new HashSet<BacklogInfoTO>();\n\n    @XmlElement(name = \"backlog\")\n    public Collection<BacklogInfoTO> getBacklogs() {\n        return backlogs;\n    }\n\n    public void setBacklogs(Collection<BacklogInfoTO> backlogs) {\n        this.backlogs = backlogs;\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\transfer\\\\BacklogInfoTO.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["BacklogInfoTO", "BacklogType"], "AN": ["id", "name", "type"], "SCS_VariableDeclarator": ["id", "name", "type"], "SCS_ConstructorDeclaration": ["BacklogInfoTO", "BacklogInfoTO"], "SCS_MemberReference": ["id", "name", "type", "backlog", "backlog", "product", "backlog", "project", "iteration", "id", "name", "type"], "SCS_ClassReference": ["backlog", "backlog", ""], "SCS_MethodInvocation": ["getId", "getName", "getBacklogType"], "MN": ["getBacklogType", "getId", "getName", "getType"], "PN": ["backlog"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.transfer;\n\nimport javax.xml.bind.annotation.XmlAttribute;\n\nimport fi.hut.soberit.agilefant.model.Backlog;\nimport fi.hut.soberit.agilefant.model.Product;\nimport fi.hut.soberit.agilefant.model.Project;\n\npublic class BacklogInfoTO {\n\n    enum BacklogType { product, project, iteration };\n    \n    private int id;\n    private String name;\n    private BacklogType type;\n    \n    public BacklogInfoTO() {}\n    public BacklogInfoTO(Backlog backlog) {\n        this.id = backlog.getId();\n        this.name = backlog.getName();\n        this.type = getBacklogType(backlog); \n    }\n    \n    private BacklogType getBacklogType(Backlog backlog) {\n        if (backlog instanceof Product) {\n            return BacklogType.product;\n        } else if (backlog instanceof Project) {\n            return BacklogType.project;\n        }\n        return BacklogType.iteration;\n    }\n\n    @XmlAttribute(name = \"objectId\")\n    public int getId() {\n        return id;\n    }\n\n    @XmlAttribute\n    public String getName() {\n        return name;\n    }\n\n    @XmlAttribute\n    public BacklogType getType() {\n        return type;\n    }\n\n}", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\transfer\\\\BacklogLoadContainer.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["BacklogLoadContainer"], "AN": ["totalBaselineLoad", "totalFutureLoad"], "SCS_VariableDeclarator": ["totalBaselineLoad", "totalFutureLoad"], "MN": ["getTotalBaselineLoad", "setTotalBaselineLoad", "getTotalFutureLoad", "setTotalFutureLoad", "getBacklog", "getTotalLoad"], "PN": ["totalBaselineLoad", "totalFutureLoad"], "SCS_MemberReference": ["totalBaselineLoad", "totalBaselineLoad", "totalBaselineLoad", "totalFutureLoad", "totalFutureLoad", "totalFutureLoad"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.transfer;\n\nimport fi.hut.soberit.agilefant.model.Backlog;\nimport flexjson.JSON;\n\n\npublic abstract class BacklogLoadContainer {\n\n    private long totalBaselineLoad = 0L;\n    private long totalFutureLoad = 0L;\n\n\n    public long getTotalBaselineLoad() {\n        return totalBaselineLoad;\n    }\n\n    public void setTotalBaselineLoad(long totalBaselineLoad) {\n        this.totalBaselineLoad = totalBaselineLoad;\n    }\n\n    public long getTotalFutureLoad() {\n        return totalFutureLoad;\n    }\n\n    public void setTotalFutureLoad(long totalFutureLoad) {\n        this.totalFutureLoad = totalFutureLoad;\n    }\n    \n    @JSON\n    public abstract Backlog getBacklog();\n    \n    @JSON\n    public abstract long getTotalLoad();\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\transfer\\\\BacklogTimesheetNode.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["BacklogTimesheetNode"], "SCS_MemberReference": ["NONE", "backlog", "backlog", "childBacklogs", "childStories", "childTasks", "children", "taskEffortSum", "storyEffortSum", "backlogEffortSum", "childTasks", "taskEffortSum", "childStories", "storyEffortSum", "childBacklogs", "backlogEffortSum", "effortSum", "taskEffortSum", "storyEffortSum", "backlogEffortSum", "effortSum", "backlog", "childBacklogs", "childStories", "childTasks", "backlog", "childStories", "childStories", "storyNode", "childTasks", "taskNode", "childBacklogs", "backlogNode", "childTasks", "childBacklogs", "taskEffortSum", "storyEffortSum", "backlogEffortSum"], "AN": ["childBacklogs", "childStories", "childTasks", "taskEffortSum", "storyEffortSum", "backlogEffortSum", "backlog"], "SCS_VariableDeclarator": ["childBacklogs", "childStories", "childTasks", "taskEffortSum", "storyEffortSum", "backlogEffortSum", "backlog", "children", "node", "node", "node"], "SCS_ConstructorDeclaration": ["BacklogTimesheetNode", "BacklogTimesheetNode"], "MN": ["getChildren", "calculateEffortSum", "getName", "getHasChildren", "getId", "getBacklog", "getStoryNodes", "addChild", "addChild", "addChild", "getTaskNodes", "getBacklogNodes", "getTaskEffortSum", "getStoryEffortSum", "getBacklogEffortSum", "getHourEntries"], "PN": ["storyNode", "taskNode", "backlogNode"], "SCS_VariableDeclaration": ["List", "TaskTimesheetNode", "StoryTimesheetNode", "BacklogTimesheetNode"], "SCS_ClassReference": ["children", "children", "children", "node", "node", "node", null, null, null, null, null, "backlog", null, null, null, "BacklogHourEntry"], "SCS_MethodInvocation": ["addAll", "addAll", "addAll", "calculateEffortSum", "calculateEffortSum", "calculateEffortSum", "getOwnEffortSpentSum", "getName", "size", "size", "size", "getId", "add", "add", "add"], "CO": ["/**\n * A class representing a backlog node in the timesheet tree.\n * Holds other backlogs and stories      (separately) as its children.\n * With its superclass it calculates the effort spent for this backlog and its children.\n *  \n * @author Pasi Pekkanen, Vesa Piril\u00c3\u00a4\n *\n */"], "CODE": "package fi.hut.soberit.agilefant.transfer;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport javax.xml.bind.annotation.XmlAccessType;\nimport javax.xml.bind.annotation.XmlAccessorType;\nimport javax.xml.bind.annotation.XmlAttribute;\nimport javax.xml.bind.annotation.XmlElement;\nimport javax.xml.bind.annotation.XmlElementWrapper;\nimport javax.xml.bind.annotation.XmlTransient;\nimport javax.xml.bind.annotation.XmlType;\n\nimport fi.hut.soberit.agilefant.model.Backlog;\nimport fi.hut.soberit.agilefant.model.BacklogHourEntry;\nimport fi.hut.soberit.agilefant.model.HourEntry;\nimport fi.hut.soberit.agilefant.util.TimesheetNode;\n\n/**\n * A class representing a backlog node in the timesheet tree.\n * Holds other backlogs and stories      (separately) as its children.\n * With its superclass it calculates the effort spent for this backlog and its children.\n *  \n * @author Pasi Pekkanen, Vesa Piril\u00c3\u00a4\n *\n */\n@XmlType\n@XmlAccessorType( XmlAccessType.NONE )\npublic class BacklogTimesheetNode extends TimesheetNode {\n    List<BacklogTimesheetNode> childBacklogs = new ArrayList<BacklogTimesheetNode>();\n    List<StoryTimesheetNode> childStories = new ArrayList<StoryTimesheetNode>();\n    List<TaskTimesheetNode> childTasks = new ArrayList<TaskTimesheetNode>();\n    \n    private long taskEffortSum;\n    private long storyEffortSum;\n    private long backlogEffortSum;\n    \n    Backlog backlog;\n    \n    public BacklogTimesheetNode() {}\n    \n    public BacklogTimesheetNode(Backlog backlog) {\n        super();\n        this.backlog = backlog;\n    }\n    @Override\n    public List<? extends TimesheetNode> getChildren() {\n        List<TimesheetNode> children = new ArrayList<TimesheetNode>();\n        children.addAll(this.childBacklogs);\n        children.addAll(this.childStories);\n        children.addAll(this.childTasks);\n        return children;\n    }\n    \n    @Override\n    public long calculateEffortSum() {\n        taskEffortSum  = 0l;\n        storyEffortSum = 0l;\n        backlogEffortSum = 0l;\n        for(TaskTimesheetNode node : this.childTasks) {\n            taskEffortSum += node.calculateEffortSum();\n        }\n        \n        for(StoryTimesheetNode node : this.childStories) {\n            storyEffortSum += node.calculateEffortSum();\n        }\n        \n        for(BacklogTimesheetNode node : this.childBacklogs) {\n            backlogEffortSum += node.calculateEffortSum();\n        }\n        effortSum = taskEffortSum + storyEffortSum + backlogEffortSum + this.getOwnEffortSpentSum();\n        return effortSum;\n    }\n    \n    @Override\n    @XmlAttribute(name=\"backlogName\")\n    public String getName() {\n        return this.backlog.getName();\n    }\n    @Override\n    public boolean getHasChildren() {\n        return (this.childBacklogs.size() > 0 || this.childStories.size() > 0 || this.childTasks.size() > 0);\n    }\n    @Override\n    @XmlAttribute(name=\"backlogId\")\n    public int getId() {\n        return backlog.getId();\n    }\n    \n    @XmlTransient\n    public Backlog getBacklog() {\n        return this.backlog;\n    }\n    \n    @XmlElementWrapper(name=\"storyNodes\")\n    @XmlElement(name=\"storyNode\")\n    public List<StoryTimesheetNode> getStoryNodes() {\n        return this.childStories;\n    }\n    public void addChild(StoryTimesheetNode storyNode) {\n        this.childStories.add(storyNode);\n    }\n    \n    public void addChild(TaskTimesheetNode taskNode) {\n        this.childTasks.add(taskNode);\n    }\n    public void addChild(BacklogTimesheetNode backlogNode) {\n        this.childBacklogs.add(backlogNode);\n    }\n    @XmlElementWrapper(name=\"taskNodes\")\n    @XmlElement(name=\"taskNode\")\n    public List<TaskTimesheetNode> getTaskNodes() {\n        return this.childTasks;\n    }\n    @XmlElementWrapper(name=\"backlogNodes\")\n    @XmlElement(name=\"backlogNode\")\n    public List<BacklogTimesheetNode> getBacklogNodes() {\n        return this.childBacklogs;\n    }\n    public long getTaskEffortSum() {\n        return taskEffortSum;\n    }\n    public long getStoryEffortSum() {\n        return storyEffortSum;\n    }\n    public long getBacklogEffortSum() {\n        return backlogEffortSum;\n    }\n    \n    @XmlElementWrapper(name=\"hourEntries\")\n    @XmlElement(name=\"hourEntry\", type=BacklogHourEntry.class)\n    @Override\n    public List<HourEntry> getHourEntries() {\n        return super.getHourEntries();\n    }\n\n}", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\transfer\\\\BacklogType.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["BacklogType"], "MN": ["forBacklog"], "PN": ["backlog"], "SCS_MemberReference": ["backlog", "PRODUCT", "backlog", "PROJECT", "backlog", "ITERATION"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.transfer;\n\nimport fi.hut.soberit.agilefant.model.Backlog;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.Product;\nimport fi.hut.soberit.agilefant.model.Project;\n\npublic enum BacklogType {\n    PRODUCT, \n    PROJECT, \n    ITERATION;\n    \n    \n    public static BacklogType forBacklog(Backlog backlog) {\n        if (backlog instanceof Product) {\n            return PRODUCT;\n        \n        } else if (backlog instanceof Project) {\n            return PROJECT;\n            \n        } else if (backlog instanceof Iteration) {\n            return ITERATION;\n            \n        }\n        return null;\n    }\n    \n    \n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\transfer\\\\ComputedLoadData.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["ComputedLoadData"], "AN": ["loadContainers", "holidays", "startDate", "endDate"], "SCS_VariableDeclarator": ["loadContainers", "holidays", "startDate", "endDate"], "MN": ["getLoadContainers", "setLoadContainers", "getHolidays", "setHolidays", "getStartDate", "setStartDate", "getEndDate", "setEndDate"], "PN": ["loadContainers", "holidays", "startDate", "endDate"], "SCS_MemberReference": ["loadContainers", "loadContainers", "loadContainers", "holidays", "holidays", "holidays", "startDate", "startDate", "startDate", "endDate", "endDate", "endDate"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.transfer;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.joda.time.DateTime;\n\nimport fi.hut.soberit.agilefant.model.Holiday;\nimport flexjson.JSON;\n\npublic class ComputedLoadData {\n    private List<IntervalLoadContainer> loadContainers = new ArrayList<IntervalLoadContainer>();\n    private List<Holiday> holidays = new ArrayList<Holiday>();\n    private DateTime startDate;\n    private DateTime endDate;\n    \n    \n    @JSON\n    public List<IntervalLoadContainer> getLoadContainers() {\n        return loadContainers;\n    }\n    public void setLoadContainers(List<IntervalLoadContainer> loadContainers) {\n        this.loadContainers = loadContainers;\n    }\n    @JSON\n    public List<Holiday> getHolidays() {\n        return holidays;\n    }\n    public void setHolidays(List<Holiday> holidays) {\n        this.holidays = holidays;\n    }\n    @JSON\n    public DateTime getStartDate() {\n        return startDate;\n    }\n    public void setStartDate(DateTime startDate) {\n        this.startDate = startDate;\n    }\n    @JSON\n    public DateTime getEndDate() {\n        return endDate;\n    }\n    public void setEndDate(DateTime endDate) {\n        this.endDate = endDate;\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\transfer\\\\DailySpentEffort.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["DailySpentEffort"], "AN": ["spentEffort", "day"], "SCS_VariableDeclarator": ["spentEffort", "day"], "MN": ["getSpentEffort", "setSpentEffort", "getDay", "setDay", "getDate", "getMonth", "getYear", "getDayOfYear"], "PN": ["spentEffort", "day"], "SCS_MemberReference": ["spentEffort", "spentEffort", "spentEffort", "day", "day", "day"], "SCS_ClassReference": ["day", "day", "day", "day"], "SCS_MethodInvocation": ["getDayOfMonth", "getMonthOfYear", "getYear", "getDayOfYear"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.transfer;\n\nimport org.joda.time.DateTime;\n\npublic class DailySpentEffort {\n    private Long spentEffort = null;\n    private DateTime day;\n    public Long getSpentEffort() {\n        return spentEffort;\n    }\n    public void setSpentEffort(Long spentEffort) {\n        this.spentEffort = spentEffort;\n    }\n    public DateTime getDay() {\n        return day;\n    }\n    public void setDay(DateTime day) {\n        this.day = day;\n    }\n    public int getDate() {\n        return day.getDayOfMonth();\n    }\n    public int getMonth() {\n        return day.getMonthOfYear();\n    }\n    public int getYear() {\n        return day.getYear();\n    }\n    \n    public int getDayOfYear() {\n        return day.getDayOfYear();\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\transfer\\\\DailyUserSpentEffortTO.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["DailyUserSpentEffortTO"], "AN": ["assignedEffort", "unassignedEffort", "totalEffort", "date"], "SCS_VariableDeclarator": ["assignedEffort", "unassignedEffort", "totalEffort", "date"], "MN": ["getAssignedEffort", "setAssignedEffort", "getUnassignedEffort", "setUnassignedEffort", "getDate", "setDate", "getTotalEffort", "setTotalEffort"], "PN": ["assignedEffort", "unassignedEffort", "date", "effort"], "SCS_MemberReference": ["assignedEffort", "assignedEffort", "assignedEffort", "unassignedEffort", "unassignedEffort", "unassignedEffort", "date", "date", "date", "totalEffort", "totalEffort", "effort"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.transfer;\n\nimport org.joda.time.DateTime;\n\nimport flexjson.JSON;\n\npublic class DailyUserSpentEffortTO {\n    private long assignedEffort;\n    private long unassignedEffort;\n    private long totalEffort;\n    private DateTime date;\n    \n    @JSON\n    public long getAssignedEffort() {\n        return assignedEffort;\n    }\n    \n    public void setAssignedEffort(long assignedEffort) {\n        this.assignedEffort = assignedEffort;\n    }\n    \n    @JSON\n    public long getUnassignedEffort() {\n        return unassignedEffort;\n    }\n    \n    public void setUnassignedEffort(long unassignedEffort) {\n        this.unassignedEffort = unassignedEffort;\n    }\n    \n    @JSON\n    public DateTime getDate() {\n        return date;\n    }\n    \n    public void setDate(DateTime date) {\n        this.date = date;\n    }\n    \n    @JSON\n    public long getTotalEffort() {\n        return this.totalEffort;\n    }\n    \n    public void setTotalEffort(long effort) {\n        this.totalEffort = effort;\n    }\n    \n    \n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\transfer\\\\DailyWorkTaskTO.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["DailyWorkTaskTO"], "AN": ["workQueueRank"], "SCS_VariableDeclarator": ["workQueueRank"], "SCS_ConstructorDeclaration": ["DailyWorkTaskTO", "DailyWorkTaskTO", "DailyWorkTaskTO"], "SCS_MemberReference": ["task", "task", "workQueueRank", "workQueueRank", "workQueueRank", "workQueueRank", "workQueueRank"], "MN": ["getWorkQueueRank", "setWorkQueueRank"], "PN": ["workQueueRank"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.transfer;\n\nimport fi.hut.soberit.agilefant.model.Task;\n\npublic class DailyWorkTaskTO extends TaskTO {\n    private int workQueueRank;\n    \n    public DailyWorkTaskTO() {};\n    public DailyWorkTaskTO(Task task) {\n        super(task);\n    }\n    \n    public DailyWorkTaskTO(Task task, int workQueueRank) {\n        super(task);\n        this.workQueueRank = workQueueRank;\n    }\n    \n    public int getWorkQueueRank() {\n        return workQueueRank;\n    }\n\n    public void setWorkQueueRank(int workQueueRank) {\n        this.workQueueRank = workQueueRank;\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\transfer\\\\HistoryRowTO.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["HistoryRowTO"], "AN": ["revision", "model"], "SCS_VariableDeclarator": ["revision", "model"], "SCS_ConstructorDeclaration": ["HistoryRowTO", "HistoryRowTO"], "SCS_MemberReference": ["revision", "revision", "model", "model", "revision", "revision", "revision", "model", "model", "model"], "MN": ["getRevision", "setRevision", "getModel", "setModel"], "PN": ["revision", "model"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.transfer;\n\nimport fi.hut.soberit.agilefant.model.AgilefantRevisionEntity;\n\npublic class HistoryRowTO {\n    AgilefantRevisionEntity revision;\n    Object model;\n    \n    public HistoryRowTO() {};\n    public HistoryRowTO(AgilefantRevisionEntity revision, Object model) {\n        this.revision = revision;\n        this.model = model;\n    }\n\n    public AgilefantRevisionEntity getRevision() {\n        return revision;\n    }\n    \n    public void setRevision(AgilefantRevisionEntity revision) {\n        this.revision = revision;\n    }\n\n    public Object getModel() {\n        return model;\n    }\n\n    public void setModel(Object model) {\n        this.model = model;\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\transfer\\\\HourEntryDelta.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["HourEntryDelta"], "SCS_MemberReference": ["NONE", "delta", "delta", "delta"], "AN": ["delta"], "SCS_VariableDeclarator": ["delta"], "MN": ["getDelta", "setDelta"], "PN": ["delta"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.transfer;\n\nimport javax.xml.bind.annotation.XmlAccessType;\nimport javax.xml.bind.annotation.XmlAccessorType;\nimport javax.xml.bind.annotation.XmlAttribute;\nimport javax.xml.bind.annotation.XmlType;\n\nimport flexjson.JSON;\n\n@XmlType\n@XmlAccessorType( XmlAccessType.NONE )\npublic class HourEntryDelta {\n\n    private long delta;\n\n    @JSON\n    @XmlAttribute\n    public long getDelta() {\n        return delta;\n    }\n\n    public void setDelta(long delta) {\n        this.delta = delta;\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\transfer\\\\IntervalLoadContainer.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["IntervalLoadContainer"], "AN": ["interval", "detailedLoad", "assignedLoad", "baselineLoad", "unassignedLoad", "workHours", "futureLoad"], "SCS_VariableDeclarator": ["interval", "detailedLoad", "assignedLoad", "baselineLoad", "unassignedLoad", "workHours", "futureLoad"], "MN": ["getAssignedLoad", "setAssignedLoad", "getTotalLoad", "getWorkHours", "setWorkHours", "getInterval", "setInterval", "getBaselineLoad", "setBaselineLoad", "getUnassignedLoad", "setUnassignedLoad", "getStart", "getEnd", "getFutureLoad", "setFutureLoad", "getDetailedLoad", "setDetailedLoad"], "PN": ["assignedLoad", "workHours", "interval", "basellineLoad", "unassignedLoad", "futureLoad", "detailedLoad"], "SCS_MemberReference": ["assignedLoad", "assignedLoad", "assignedLoad", "assignedLoad", "baselineLoad", "unassignedLoad", "futureLoad", "workHours", "workHours", "workHours", "interval", "interval", "interval", "baselineLoad", "baselineLoad", "basellineLoad", "unassignedLoad", "unassignedLoad", "unassignedLoad", "interval", "interval", "futureLoad", "futureLoad", "futureLoad", "detailedLoad", "detailedLoad", "detailedLoad"], "SCS_ClassReference": [null, null, null, null], "SCS_MethodInvocation": ["getStart", "toDate", "getEnd", "toDate"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.transfer;\n\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\n\nimport org.joda.time.Interval;\n\nimport flexjson.JSON;\n\n\npublic class IntervalLoadContainer {\n    private Interval interval;\n    private List<BacklogLoadContainer> detailedLoad = new ArrayList<BacklogLoadContainer>();\n    private long assignedLoad = 0L;\n    private long baselineLoad = 0L;\n    private long unassignedLoad = 0L;\n    private long workHours = 0L;\n    private long futureLoad = 0L;\n\n    public long getAssignedLoad() {\n        return assignedLoad;\n    }\n    public void setAssignedLoad(long assignedLoad) {\n        this.assignedLoad = assignedLoad;\n    }\n    public long getTotalLoad() {\n        return assignedLoad + baselineLoad + unassignedLoad + futureLoad;\n    }\n    public long getWorkHours() {\n        return workHours;\n    }\n    public void setWorkHours(long workHours) {\n        this.workHours = workHours;\n    }\n    @JSON(include=false)\n    public Interval getInterval() {\n        return interval;\n    }\n\n    public void setInterval(Interval interval) {\n        this.interval = interval;\n    }\n    public long getBaselineLoad() {\n        return baselineLoad;\n    }\n    public void setBaselineLoad(long basellineLoad) {\n        this.baselineLoad = basellineLoad;\n    }\n    public long getUnassignedLoad() {\n        return unassignedLoad;\n    }\n    public void setUnassignedLoad(long unassignedLoad) {\n        this.unassignedLoad = unassignedLoad;\n    }\n    public Date getStart() {\n        return this.interval.getStart().toDate();\n    }\n    public Date getEnd() {\n        return this.interval.getEnd().toDate();\n    }\n    public long getFutureLoad() {\n        return futureLoad;\n    }\n    public void setFutureLoad(long futureLoad) {\n        this.futureLoad = futureLoad;\n    }\n    @JSON\n    public List<BacklogLoadContainer> getDetailedLoad() {\n        return detailedLoad;\n    }\n    public void setDetailedLoad(List<BacklogLoadContainer> detailedLoad) {\n        this.detailedLoad = detailedLoad;\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\transfer\\\\IterationLoadContainer.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["IterationLoadContainer"], "AN": ["iteration", "totalAssignedLoad", "totalUnassignedLoad"], "SCS_VariableDeclarator": ["iteration", "totalAssignedLoad", "totalUnassignedLoad"], "MN": ["getIteration", "setIteration", "getTotalAssignedLoad", "setTotalAssignedLoad", "getTotalUnassignedLoad", "setTotalUnassignedLoad", "getBacklog", "getTotalLoad"], "PN": ["iteration", "totalAssignedLoad", "totalUnassignedLoad"], "SCS_MemberReference": ["iteration", "iteration", "iteration", "totalAssignedLoad", "totalAssignedLoad", "totalAssignedLoad", "totalUnassignedLoad", "totalUnassignedLoad", "totalUnassignedLoad", "iteration", "totalAssignedLoad", "totalUnassignedLoad"], "SCS_ClassReference": [null, null], "SCS_MethodInvocation": ["getTotalBaselineLoad", "getTotalFutureLoad"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.transfer;\n\nimport fi.hut.soberit.agilefant.model.Backlog;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport flexjson.JSON;\n\npublic class IterationLoadContainer extends BacklogLoadContainer {\n    private Iteration iteration;\n    private long totalAssignedLoad = 0L;\n    private long totalUnassignedLoad = 0L;\n\n    @JSON(include=false)\n    public Iteration getIteration() {\n        return iteration;\n    }\n\n    public void setIteration(Iteration iteration) {\n        this.iteration = iteration;\n    }\n\n    public long getTotalAssignedLoad() {\n        return totalAssignedLoad;\n    }\n\n    public void setTotalAssignedLoad(long totalAssignedLoad) {\n        this.totalAssignedLoad = totalAssignedLoad;\n    }\n\n    public long getTotalUnassignedLoad() {\n        return totalUnassignedLoad;\n    }\n\n    public void setTotalUnassignedLoad(long totalUnassignedLoad) {\n        this.totalUnassignedLoad = totalUnassignedLoad;\n    }\n\n    @Override\n    public Backlog getBacklog() {\n        return this.iteration;\n    }\n    @Override\n    public long getTotalLoad() {\n        return this.totalAssignedLoad + this.totalUnassignedLoad + this.getTotalBaselineLoad() + this.getTotalFutureLoad();\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\transfer\\\\IterationMetrics.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["IterationMetrics"], "AN": ["effortLeft", "originalEstimate", "spentEffort", "storyPoints", "doneStoryPoints", "plannedSize", "completedTasks", "totalTasks", "percentDoneTasks", "percentSpentEffort", "completedStories", "totalStories", "percentDoneStories", "completedValue", "totalValue", "percentCompletedValue", "backlogOngoing", "dailyVelocity", "daysLeftPercentage", "doneStoryPointsPercentage", "completedEffortPercentage", "daysLeft", "totalDays", "variance"], "SCS_VariableDeclarator": ["effortLeft", "originalEstimate", "spentEffort", "storyPoints", "doneStoryPoints", "plannedSize", "completedTasks", "totalTasks", "percentDoneTasks", "percentSpentEffort", "completedStories", "totalStories", "percentDoneStories", "completedValue", "totalValue", "percentCompletedValue", "backlogOngoing", "dailyVelocity", "daysLeftPercentage", "doneStoryPointsPercentage", "completedEffortPercentage", "daysLeft", "totalDays", "variance"], "MN": ["getPercentDoneTasks", "setPercentDoneTasks", "isBacklogOngoing", "setBacklogOngoing", "setEffortLeft", "getEffortLeft", "setOriginalEstimate", "getOriginalEstimate", "setSpentEffort", "getSpentEffort", "setStoryPoints", "getStoryPoints", "setCompletedTasks", "getCompletedTasks", "setTotalTasks", "getTotalTasks", "setCompletedStories", "getCompletedStories", "setTotalStories", "getTotalStories", "setPercentDoneStories", "getPercentDoneStories", "setPercentSpentEffort", "getPercentSpentEffort", "getDailyVelocity", "setDailyVelocity", "getDaysLeft", "setDaysLeft", "getTotalDays", "setTotalDays", "getVariance", "setVariance", "getDoneStoryPoints", "setDoneStoryPoints", "getDaysLeftPercentage", "setDaysLeftPercentage", "getDoneStoryPointsPercentage", "setDoneStoryPointsPercentage", "getCompletedEffortPercentage", "setCompletedEffortPercentage", "getCompletedValue", "setCompletedValue", "getPercentCompletedValue", "setPercentCompletedValue", "getTotalValue", "setTotalValue", "getPlannedSize", "setPlannedSize"], "PN": ["percentDone", "backlogOngoing", "effortLeft", "originalEstimate", "spentEffort", "storyPoints", "completedTasks", "totalTasks", "completedStories", "totalStories", "percentDoneStories", "percentEffortSpent", "dailyVelocity", "daysLeft", "totalDays", "variance", "doneStoryPoints", "daysLeftPercentage", "doneStoryPointsPercentage", "completedEffortPercentage", "completedValue", "percentCompletedValue", "totalValue", "plannedSize"], "SCS_MemberReference": ["percentDoneTasks", "percentDoneTasks", "percentDone", "backlogOngoing", "backlogOngoing", "backlogOngoing", "effortLeft", "effortLeft", "effortLeft", "originalEstimate", "originalEstimate", "originalEstimate", "spentEffort", "spentEffort", "spentEffort", "storyPoints", "storyPoints", "storyPoints", "completedTasks", "completedTasks", "completedTasks", "totalTasks", "totalTasks", "totalTasks", "completedStories", "completedStories", "completedStories", "totalStories", "totalStories", "totalStories", "percentDoneStories", "percentDoneStories", "percentDoneStories", "percentSpentEffort", "percentEffortSpent", "percentSpentEffort", "dailyVelocity", "dailyVelocity", "dailyVelocity", "daysLeft", "daysLeft", "daysLeft", "totalDays", "totalDays", "totalDays", "variance", "variance", "variance", "doneStoryPoints", "doneStoryPoints", "doneStoryPoints", "daysLeftPercentage", "daysLeftPercentage", "daysLeftPercentage", "doneStoryPointsPercentage", "doneStoryPointsPercentage", "doneStoryPointsPercentage", "completedEffortPercentage", "completedEffortPercentage", "completedEffortPercentage", "completedValue", "completedValue", "completedValue", "percentCompletedValue", "percentCompletedValue", "percentCompletedValue", "totalValue", "totalValue", "totalValue", "plannedSize", "plannedSize", "plannedSize"], "CO": ["/*\n     * Autogenerated list of getters and setters\n     */"], "CODE": "package fi.hut.soberit.agilefant.transfer;\n\nimport fi.hut.soberit.agilefant.model.ExactDoubleEstimate;\nimport fi.hut.soberit.agilefant.model.ExactEstimate;\n\npublic class IterationMetrics {\n    private ExactEstimate effortLeft = new ExactEstimate(0);\n    private ExactEstimate originalEstimate = new ExactEstimate(0);\n    private ExactEstimate spentEffort = new ExactEstimate(0);\n    private Integer storyPoints = new Integer(0);\n    private Integer doneStoryPoints = new Integer(0);\n    \n    private ExactEstimate plannedSize = new ExactEstimate(0);\n    \n    private Integer completedTasks = new Integer(0);\n    private Integer totalTasks = new Integer(0);\n    private Integer percentDoneTasks = new Integer(0);\n    private Integer percentSpentEffort = new Integer(0);\n    \n    private Integer completedStories = new Integer(0);\n    private Integer totalStories = new Integer(0);\n    private Integer percentDoneStories = new Integer(0);\n    \n    private Integer completedValue = new Integer(0);\n    private Integer totalValue = new Integer(0);\n    private Integer percentCompletedValue = new Integer(0);\n    \n    \n    private boolean backlogOngoing = true;\n    private ExactDoubleEstimate dailyVelocity = new ExactDoubleEstimate(0);\n    \n    private int daysLeftPercentage = 0;\n    private int doneStoryPointsPercentage = 0;\n    private int completedEffortPercentage = 0;\n    \n    private int daysLeft = 0;\n             \n    private int totalDays = 0;\n    \n    private Integer variance = 0;\n    \n    /*\n     * Autogenerated list of getters and setters\n     */\n    \n    public Integer getPercentDoneTasks() {\n        return percentDoneTasks;\n    }\n    public void setPercentDoneTasks(Integer percentDone) {\n        this.percentDoneTasks = percentDone;\n    }\n    public boolean isBacklogOngoing() {\n        return backlogOngoing;\n    }\n    public void setBacklogOngoing(boolean backlogOngoing) {\n        this.backlogOngoing = backlogOngoing;\n    }\n    public void setEffortLeft(ExactEstimate effortLeft) {\n        this.effortLeft = effortLeft;\n    }\n    public ExactEstimate getEffortLeft() {\n        return effortLeft;\n    }\n    public void setOriginalEstimate(ExactEstimate originalEstimate) {\n        this.originalEstimate = originalEstimate;\n    }\n    public ExactEstimate getOriginalEstimate() {\n        return originalEstimate;\n    }\n    public void setSpentEffort(ExactEstimate spentEffort) {\n        this.spentEffort = spentEffort;\n    }\n    public ExactEstimate getSpentEffort() {\n        return spentEffort;\n    }\n    public void setStoryPoints(Integer storyPoints) {\n        this.storyPoints = storyPoints;\n    }\n    public Integer getStoryPoints() {\n        return storyPoints;\n    }\n    public void setCompletedTasks(Integer completedTasks) {\n        this.completedTasks = completedTasks;\n    }\n    public Integer getCompletedTasks() {\n        return completedTasks;\n    }\n    public void setTotalTasks(Integer totalTasks) {\n        this.totalTasks = totalTasks;\n    }\n    public Integer getTotalTasks() {\n        return totalTasks;\n    }\n    public void setCompletedStories(Integer completedStories) {\n        this.completedStories = completedStories;\n    }\n    public Integer getCompletedStories() {\n        return completedStories;\n    }\n    public void setTotalStories(Integer totalStories) {\n        this.totalStories = totalStories;\n    }\n    public Integer getTotalStories() {\n        return totalStories;\n    }\n    public void setPercentDoneStories(Integer percentDoneStories) {\n        this.percentDoneStories = percentDoneStories;\n    }\n    public Integer getPercentDoneStories() {\n        return percentDoneStories;\n    }\n    public void setPercentSpentEffort(Integer percentEffortSpent) {\n        this.percentSpentEffort = percentEffortSpent;\n    }\n    public Integer getPercentSpentEffort() {\n        return percentSpentEffort;\n    }\n\n    public ExactDoubleEstimate getDailyVelocity() {\n        return dailyVelocity;\n    }\n    public void setDailyVelocity(ExactDoubleEstimate dailyVelocity) {\n        this.dailyVelocity = dailyVelocity;\n    }\n\n    public int getDaysLeft() {\n        return daysLeft;\n    }\n\n    public void setDaysLeft(int daysLeft) {\n        this.daysLeft = daysLeft;\n    }\n\n    public int getTotalDays() {\n        return totalDays;\n    }\n\n    public void setTotalDays(int totalDays) {\n        this.totalDays = totalDays;\n    }\n\n    public Integer getVariance() {\n        return variance;\n    }\n\n    public void setVariance(Integer variance) {\n        this.variance = variance;\n    }\n\n    public Integer getDoneStoryPoints() {\n        return doneStoryPoints;\n    }\n\n    public void setDoneStoryPoints(Integer doneStoryPoints) {\n        this.doneStoryPoints = doneStoryPoints;\n    }\n    public int getDaysLeftPercentage() {\n        return daysLeftPercentage;\n    }\n    public void setDaysLeftPercentage(int daysLeftPercentage) {\n        this.daysLeftPercentage = daysLeftPercentage;\n    }\n    public int getDoneStoryPointsPercentage() {\n        return doneStoryPointsPercentage;\n    }\n    public void setDoneStoryPointsPercentage(int doneStoryPointsPercentage) {\n        this.doneStoryPointsPercentage = doneStoryPointsPercentage;\n    }\n    public int getCompletedEffortPercentage() {\n        return completedEffortPercentage;\n    }\n    public void setCompletedEffortPercentage(int completedEffortPercentage) {\n        this.completedEffortPercentage = completedEffortPercentage;\n    }\n    public int getCompletedValue() {\n        return this.completedValue;\n    }\n    public void setCompletedValue(int completedValue) {\n        this.completedValue = completedValue;\n    }\n    public int getPercentCompletedValue() {\n        return percentCompletedValue;\n    }\n    public void setPercentCompletedValue(int percentCompletedValue) {\n        this.percentCompletedValue = percentCompletedValue;\n    }\n    public int getTotalValue() {\n        return this.totalValue;\n    }\n    public void setTotalValue(int totalValue) {\n        this.totalValue = totalValue;\n    }\n    public ExactEstimate getPlannedSize() {\n        return this.plannedSize;\n    }\n    public void setPlannedSize(ExactEstimate plannedSize) {\n        this.plannedSize = plannedSize;\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\transfer\\\\IterationTO.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["IterationTO"], "SCS_MemberReference": ["NONE", "iter", "scheduleStatus", "scheduleStatus", "scheduleStatus", "rankedStories", "rankedStories", "rankedStories", "assignees", "assignees", "assignees", "rankedStories", "rankedStories", "leafStories", "iterationMetrics", "iterationMetrics", "iterationMetrics"], "AN": ["iterationMetrics", "scheduleStatus", "rankedStories", "assignees"], "SCS_VariableDeclarator": ["iterationMetrics", "scheduleStatus", "rankedStories", "assignees"], "SCS_ConstructorDeclaration": ["IterationTO", "IterationTO"], "SCS_ClassReference": ["BeanCopier"], "SCS_MethodInvocation": ["copy"], "MN": ["setScheduleStatus", "getScheduleStatus", "getRankedStories", "setRankedStories", "getAssignees", "setAssignees", "getLeafStories", "setLeafStories", "getIterationMetrics", "setIterationMetrics"], "PN": ["scheduleStatus", "rankedStories", "assignees", "leafStories", "iterationMetrics"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.transfer;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Set;\n\nimport javax.xml.bind.annotation.XmlAccessType;\nimport javax.xml.bind.annotation.XmlAccessorType;\nimport javax.xml.bind.annotation.XmlElement;\nimport javax.xml.bind.annotation.XmlElementWrapper;\nimport javax.xml.bind.annotation.XmlRootElement;\n\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.util.BeanCopier;\n\n@XmlRootElement(name=\"iterationto\")\n@XmlAccessorType( XmlAccessType.NONE )\npublic class IterationTO extends Iteration implements LeafStoryContainer, Scheduled {\n    \n    private IterationMetrics iterationMetrics;\n\n    private ScheduleStatus scheduleStatus;\n    \n    private List<StoryTO> rankedStories = new ArrayList<StoryTO>();\n    \n    private Set<User> assignees;\n    \n    public IterationTO() {}\n    \n    public IterationTO(Iteration iter) {\n        BeanCopier.copy(iter, this);\n    }\n\n    public void setScheduleStatus(ScheduleStatus scheduleStatus) {\n        this.scheduleStatus = scheduleStatus;\n    }\n\n    public ScheduleStatus getScheduleStatus() {\n        return scheduleStatus;\n    }\n\n    public List<StoryTO> getRankedStories() {\n        return rankedStories;\n    }\n\n    public void setRankedStories(List<StoryTO> rankedStories) {\n        this.rankedStories = rankedStories;\n    }\n\n    @XmlElementWrapper(name = \"assignees\")\n    @XmlElement(name = \"user\")\n    public Set<User> getAssignees() {\n        return assignees;\n    }\n\n    public void setAssignees(Set<User> assignees) {\n        this.assignees = assignees;\n    }\n\n    @XmlElementWrapper(name=\"leafStories\")\n    @XmlElement(name=\"story\")\n    public List<StoryTO> getLeafStories() {\n        return this.rankedStories;\n    }\n\n    public void setLeafStories(List<StoryTO> leafStories) {\n        this.rankedStories = leafStories;\n        \n    }\n\n    public IterationMetrics getIterationMetrics() {\n        return iterationMetrics;\n    }\n\n    public void setIterationMetrics(IterationMetrics iterationMetrics) {\n        this.iterationMetrics = iterationMetrics;\n    }    \n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\transfer\\\\LeafStoryContainer.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["LeafStoryContainer"], "MN": ["getLeafStories", "setLeafStories"], "PN": ["leafStories"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.transfer;\n\nimport java.util.List;\n\npublic interface LeafStoryContainer {\n    public List<StoryTO> getLeafStories();\n    public void setLeafStories(List<StoryTO> leafStories);\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\transfer\\\\MenuDataNode.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["MenuDataNode"], "AN": ["id", "title", "scheduleStatus", "expand", "icon", "type", "children"], "SCS_VariableDeclarator": ["id", "title", "scheduleStatus", "expand", "icon", "type", "children"], "SCS_MemberReference": ["ONGOING", "id", "id", "id", "title", "title", "title", "children", "children", "children", "icon", "icon", "icon", "scheduleStatus", "scheduleStatus", "scheduleStatus", "expand", "expand", "expand", "type", "type", "type"], "MN": ["setId", "getId", "setTitle", "getTitle", "setChildren", "getChildren", "setIcon", "isIcon", "setScheduleStatus", "getScheduleStatus", "isExpand", "setExpand", "getAddClass", "setType"], "PN": ["id", "title", "children", "icon", "scheduleStatus", "expand", "type"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.transfer;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport flexjson.JSON;\n\npublic class MenuDataNode {\n    \n    private int id;\n    private String title;\n    private ScheduleStatus scheduleStatus = ScheduleStatus.ONGOING;\n    private boolean expand = false;\n    private boolean icon = false;\n    private BacklogType type;\n    \n    private List<MenuDataNode> children = new ArrayList<MenuDataNode>();\n    \n    \n    public void setId(int id) {\n        this.id = id;\n    }\n\n    @JSON\n    public int getId() {\n        return id;\n    }\n\n    public void setTitle(String title) {\n        this.title = title;\n    }\n\n    @JSON\n    public String getTitle() {\n        return title;\n    }\n\n    public void setChildren(List<MenuDataNode> children) {\n        this.children = children;\n    }\n\n    @JSON\n    public List<MenuDataNode> getChildren() {\n        return children;\n    }\n\n    public void setIcon(boolean icon) {\n        this.icon = icon;\n    }\n\n    @JSON\n    public boolean isIcon() {\n        return icon;\n    }\n\n    public void setScheduleStatus(ScheduleStatus scheduleStatus) {\n        this.scheduleStatus = scheduleStatus;\n    }\n\n    @JSON\n    public ScheduleStatus getScheduleStatus() {\n        return scheduleStatus;\n    }\n    \n    @JSON\n    public boolean isExpand() {\n        return expand;\n    }\n    \n    public void setExpand(boolean expand) {\n        this.expand = expand;\n    }\n    \n    @JSON\n    public BacklogType getAddClass()\n    {\n        return this.type;\n    }\n    \n    public void setType(BacklogType type)\n    {\n        this.type = type;\n    }\n    \n    \n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\transfer\\\\MoveStoryNode.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["MoveStoryNode"], "AN": ["story", "newBacklog", "message", "children", "containsChanges", "changed"], "SCS_VariableDeclarator": ["story", "newBacklog", "message", "children", "containsChanges", "changed"], "MN": ["getStory", "setStory", "getNewBacklog", "setNewBacklog", "getMessage", "setMessage", "getChildren", "setChildren", "isContainsChanges", "setContainsChanges", "isChanged", "setChanged"], "PN": ["story", "newBacklog", "message", "children", "containsChanges", "changed"], "SCS_MemberReference": ["story", "story", "story", "newBacklog", "newBacklog", "newBacklog", "message", "message", "message", "children", "children", "children", "containsChanges", "containsChanges", "containsChanges", "changed", "changed", "changed"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.transfer;\n\nimport java.util.List;\n\nimport fi.hut.soberit.agilefant.model.Backlog;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.util.StoryTreeIntegrityMessage;\n\npublic class MoveStoryNode {\n    private Story story;\n    private Backlog newBacklog;\n    private StoryTreeIntegrityMessage message;\n    private List<MoveStoryNode> children;\n    private boolean containsChanges;\n    private boolean changed;\n    \n    \n    \n    public Story getStory() {\n        return story;\n    }\n    public void setStory(Story story) {\n        this.story = story;\n    }\n    public Backlog getNewBacklog() {\n        return newBacklog;\n    }\n    public void setNewBacklog(Backlog newBacklog) {\n        this.newBacklog = newBacklog;\n    }\n    public StoryTreeIntegrityMessage getMessage() {\n        return message;\n    }\n    public void setMessage(StoryTreeIntegrityMessage message) {\n        this.message = message;\n    }\n    public List<MoveStoryNode> getChildren() {\n        return children;\n    }\n    public void setChildren(List<MoveStoryNode> children) {\n        this.children = children;\n    }\n    public boolean isContainsChanges() {\n        return containsChanges;\n    }\n    public void setContainsChanges(boolean containsChanges) {\n        this.containsChanges = containsChanges;\n    }\n    public boolean isChanged() {\n        return changed;\n    }\n    public void setChanged(boolean changed) {\n        this.changed = changed;\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\transfer\\\\package-info.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": [], "CO": [], "CODE": "package fi.hut.soberit.agilefant.transfer;\n\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\transfer\\\\PortfolioTO.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["PortfolioTO"], "AN": ["rankedProjects", "unrankedProjects", "timeSpanInDays"], "SCS_VariableDeclarator": ["rankedProjects", "unrankedProjects", "timeSpanInDays"], "SCS_ClassReference": ["Collections", "Collections"], "SCS_MethodInvocation": ["emptyList", "emptySet"], "MN": ["getRankedProjects", "setRankedProjects", "getUnrankedProjects", "setUnrankedProjects", "setTimeSpanInDays", "getTimeSpanInDays"], "PN": ["rankedProjects", "unrankedProjects", "timeSpanInDays"], "SCS_MemberReference": ["rankedProjects", "rankedProjects", "rankedProjects", "unrankedProjects", "unrankedProjects", "unrankedProjects", "timeSpanInDays", "timeSpanInDays", "timeSpanInDays"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.transfer;\n\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.List;\n\nimport fi.hut.soberit.agilefant.model.Project;\n\npublic class PortfolioTO {\n\n    private List<Project> rankedProjects = Collections.emptyList();\n    private Collection<Project> unrankedProjects = Collections.emptySet();\n    private Integer timeSpanInDays = 0;\n\n    public List<Project> getRankedProjects() {\n    \treturn this.rankedProjects;\n    }\n\n    public void setRankedProjects(List<Project> rankedProjects) {\n        this.rankedProjects = rankedProjects;\n    }\n\n    public Collection<Project> getUnrankedProjects() {\n    \treturn this.unrankedProjects;\n    }\n    \n    public void setUnrankedProjects(Collection<Project> unrankedProjects) {\n        this.unrankedProjects = unrankedProjects;\n    }\n\n    public void setTimeSpanInDays(Integer timeSpanInDays) {\n        this.timeSpanInDays = timeSpanInDays;\n    }\n\n    public Integer getTimeSpanInDays() {\n        return timeSpanInDays;\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\transfer\\\\ProductTO.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["ProductTO"], "AN": ["leafStories", "childProjects", "standaloneIterations"], "SCS_VariableDeclarator": ["leafStories", "childProjects", "standaloneIterations", "loggedUser", "myStandaloneIterations", "iteration", "myTeam", "iterationAdded", "teamIteration"], "SCS_ConstructorDeclaration": ["ProductTO", "ProductTO"], "SCS_ClassReference": ["BeanCopier", "", "loggedUser", "loggedUser", "myTeam", "teamIteration", "iteration", "myStandaloneIterations", "SecurityUtil"], "SCS_MethodInvocation": ["copy", "getLoggedInUser", "isAdmin", "getTeams", "getIterations", "getId", "getId", "add", "getLoggedUser"], "SCS_MemberReference": ["product", "leafStories", "leafStories", "leafStories", "childProjects", "childProjects", "childProjects", "standaloneIterations", "standaloneIterations", "standaloneIterations", "iteration", "iterationAdded", "iterationAdded", "myStandaloneIterations", "standaloneIterations", "standaloneIterations"], "MN": ["getLeafStories", "setLeafStories", "getChildProjects", "setChildProjects", "getStandaloneIterations", "getMyStandaloneIterations", "getLoggedInUser", "setStandaloneIterations"], "PN": ["leafStories", "childProjects", "standaloneIterations"], "SCS_VariableDeclaration": ["User", "List", "IterationTO", "Team", "Boolean", "Iteration"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.transfer;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.Product;\nimport fi.hut.soberit.agilefant.model.Team;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.security.SecurityUtil;\nimport fi.hut.soberit.agilefant.util.BeanCopier;\n\npublic class ProductTO extends Product implements LeafStoryContainer {\n\n    private List<StoryTO> leafStories = new ArrayList<StoryTO>();\n    private List<ProjectTO> childProjects = new ArrayList<ProjectTO>();\n    \n    private List<IterationTO> standaloneIterations = new ArrayList<IterationTO>();\n    \n    public ProductTO() {};\n    public ProductTO(Product product) {\n        BeanCopier.copy(product, this);\n    }\n    public List<StoryTO> getLeafStories() {\n        return leafStories;\n    }\n    public void setLeafStories(List<StoryTO> leafStories) {\n        this.leafStories = leafStories;\n    }\n    public List<ProjectTO> getChildProjects() {\n        return childProjects;\n    }\n    public void setChildProjects(List<ProjectTO> childProjects) {\n        this.childProjects = childProjects;\n    }\n    public List<IterationTO> getStandaloneIterations() {\n        return standaloneIterations;\n    }\n    public List<IterationTO> getMyStandaloneIterations() {\n        User loggedUser = getLoggedInUser();\n        if (loggedUser.isAdmin()) {\n            return standaloneIterations;\n        }\n        List<IterationTO> myStandaloneIterations = new ArrayList<IterationTO>();\n        for (IterationTO iteration: standaloneIterations) {\n            for (Team myTeam: loggedUser.getTeams()) {\n                Boolean iterationAdded = false;\n                for (Iteration teamIteration: myTeam.getIterations()) {\n                    if (teamIteration.getId() == iteration.getId()) {\n                        myStandaloneIterations.add(iteration);\n                        iterationAdded = true;\n                        break;\n                    }\n                }                \n                if (iterationAdded) {\n                    break;\n                }\n            }\n        }\n        return myStandaloneIterations;\n    }\n    private User getLoggedInUser() {\n        return SecurityUtil.getLoggedUser();\n    }\n    public void setStandaloneIterations(List<IterationTO> standaloneIterations) {\n        this.standaloneIterations = standaloneIterations;\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\transfer\\\\ProjectDataContainer.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["ProjectDataContainer"], "AN": ["stories"], "SCS_VariableDeclarator": ["stories"], "MN": ["getStories", "setStories"], "PN": ["stories"], "SCS_MemberReference": ["stories", "stories", "stories"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.transfer;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport fi.hut.soberit.agilefant.model.Story;\nimport flexjson.JSON;\n\npublic class ProjectDataContainer {\n\n    private List<Story> stories = new ArrayList<Story>();\n    \n    @JSON(include=true)\n    public List<Story> getStories() {\n        return stories;\n    }\n    public void setStories(List<Story> stories) {\n        this.stories = stories;\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\transfer\\\\ProjectLoadContainer.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["ProjectLoadContainer"], "AN": ["project"], "SCS_VariableDeclarator": ["project"], "MN": ["getProject", "setProject", "getBacklog", "getTotalLoad"], "PN": ["project"], "SCS_MemberReference": ["project", "project", "project", "project"], "SCS_ClassReference": [null, null], "SCS_MethodInvocation": ["getTotalBaselineLoad", "getTotalFutureLoad"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.transfer;\n\nimport fi.hut.soberit.agilefant.model.Backlog;\nimport fi.hut.soberit.agilefant.model.Project;\nimport flexjson.JSON;\n\npublic class ProjectLoadContainer extends BacklogLoadContainer {\n    private Project project;\n\n    @JSON(include=false)\n    public Project getProject() {\n        return project;\n    }\n\n    public void setProject(Project project) {\n        this.project = project;\n    }\n\n    @Override\n    public Backlog getBacklog() {\n        return this.project;\n    }\n\n    @Override\n    public long getTotalLoad() {\n        return this.getTotalBaselineLoad() + this.getTotalFutureLoad();\n    }\n    \n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\transfer\\\\ProjectMetrics.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["ProjectMetrics"], "AN": ["storyPoints", "completedStoryPoints", "storyPointsCompletedPercentage", "numberOfStories", "numberOfDoneStories", "completedStoriesPercentage", "daysLeft", "totalDays", "daysLeftPercentage", "effortSpent", "originalEstimate", "plannedSize", "effortSpentPercentage", "totalValue", "completedValue", "valuePercentage"], "SCS_VariableDeclarator": ["storyPoints", "completedStoryPoints", "storyPointsCompletedPercentage", "numberOfStories", "numberOfDoneStories", "completedStoriesPercentage", "daysLeft", "totalDays", "daysLeftPercentage", "effortSpent", "originalEstimate", "plannedSize", "effortSpentPercentage", "totalValue", "completedValue", "valuePercentage"], "MN": ["setStoryPoints", "getStoryPoints", "getCompletedStoryPoints", "setCompletedStoryPoints", "getStoryPointsCompletedPercentage", "setStoryPointsCompletedPercentage", "getNumberOfStories", "setNumberOfStories", "getNumberOfDoneStories", "setNumberOfDoneStories", "getDaysLeft", "setDaysLeft", "getTotalDays", "setTotalDays", "getDaysLeftPercentage", "setDaysLeftPercentage", "getCompletedStoriesPercentage", "setCompletedStoriesPercentage", "setEffortSpent", "getEffortSpent", "setEfforSpentPercentage", "getEffortSpentPercentage", "setOriginalEstimate", "getOriginalEstimate", "getTotalValue", "setTotalValue", "getCompletedValue", "setCompletedValue", "getValuePercentage", "setValuePercentage", "getPlannedSize", "setPlannedSize"], "PN": ["storyPoints", "completedStoryPoints", "storyPointsCompletedPercentage", "numberOfStories", "numberOfDoneStories", "daysLeft", "totalDays", "daysLeftPercentage", "completedStoriesPercentage", "effortSpent", "effortSpentPercentage", "originalEstimate", "totalValue", "completedValue", "valuePercentage", "plannedSize"], "SCS_MemberReference": ["storyPoints", "storyPoints", "storyPoints", "completedStoryPoints", "completedStoryPoints", "completedStoryPoints", "storyPointsCompletedPercentage", "storyPointsCompletedPercentage", "storyPointsCompletedPercentage", "numberOfStories", "numberOfStories", "numberOfStories", "numberOfDoneStories", "numberOfDoneStories", "numberOfDoneStories", "daysLeft", "daysLeft", "daysLeft", "totalDays", "totalDays", "totalDays", "daysLeftPercentage", "daysLeftPercentage", "daysLeftPercentage", "completedStoriesPercentage", "completedStoriesPercentage", "completedStoriesPercentage", "effortSpent", "effortSpent", "effortSpent", "effortSpentPercentage", "effortSpentPercentage", "effortSpentPercentage", "originalEstimate", "originalEstimate", "originalEstimate", "totalValue", "totalValue", "totalValue", "completedValue", "completedValue", "completedValue", "valuePercentage", "valuePercentage", "valuePercentage", "plannedSize", "plannedSize", "plannedSize"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.transfer;\n\nimport fi.hut.soberit.agilefant.model.ExactEstimate;\n\npublic class ProjectMetrics {\n\n    private int storyPoints = 0;\n    private int completedStoryPoints = 0;\n    private int storyPointsCompletedPercentage = 0;\n    private int numberOfStories = 0;\n    private int numberOfDoneStories = 0;\n    private int completedStoriesPercentage = 0;\n    private int daysLeft = 0;\n    private int totalDays = 0;\n    private int daysLeftPercentage = 0;\n    private ExactEstimate effortSpent = new ExactEstimate(0);\n    private ExactEstimate originalEstimate = new ExactEstimate(0);\n    private ExactEstimate plannedSize = new ExactEstimate(0);\n    private int effortSpentPercentage = 0;\n    private int totalValue = 0;\n    private int completedValue = 0;\n    private int valuePercentage = 0;\n\n    public void setStoryPoints(int storyPoints) {\n        this.storyPoints = storyPoints;\n    }\n\n    public int getStoryPoints() {\n        return storyPoints;\n    }\n\n    public int getCompletedStoryPoints() {\n        return completedStoryPoints;\n    }\n\n    public void setCompletedStoryPoints(int completedStoryPoints) {\n        this.completedStoryPoints = completedStoryPoints;\n    }\n\n    public int getStoryPointsCompletedPercentage() {\n        return storyPointsCompletedPercentage;\n    }\n\n    public void setStoryPointsCompletedPercentage(int storyPointsCompletedPercentage) {\n        this.storyPointsCompletedPercentage = storyPointsCompletedPercentage;\n    }\n\n    public int getNumberOfStories() {\n        return numberOfStories;\n    }\n\n    public void setNumberOfStories(int numberOfStories) {\n        this.numberOfStories = numberOfStories;\n    }\n\n    public int getNumberOfDoneStories() {\n        return numberOfDoneStories;\n    }\n\n    public void setNumberOfDoneStories(int numberOfDoneStories) {\n        this.numberOfDoneStories = numberOfDoneStories;\n    }\n\n    public int getDaysLeft() {\n        return daysLeft;\n    }\n\n    public void setDaysLeft(int daysLeft) {\n        this.daysLeft = daysLeft;\n    }\n\n    public int getTotalDays() {\n        return totalDays;\n    }\n\n    public void setTotalDays(int totalDays) {\n        this.totalDays = totalDays;\n    }\n\n    public int getDaysLeftPercentage() {\n        return daysLeftPercentage;\n    }\n\n    public void setDaysLeftPercentage(int daysLeftPercentage) {\n        this.daysLeftPercentage = daysLeftPercentage;\n    }\n\n    public int getCompletedStoriesPercentage() {\n        return completedStoriesPercentage;\n    }\n\n    public void setCompletedStoriesPercentage(int completedStoriesPercentage) {\n        this.completedStoriesPercentage = completedStoriesPercentage;\n    }\n    \n    public void setEffortSpent(ExactEstimate effortSpent) {\n        this.effortSpent = effortSpent;\n    }\n    \n    public ExactEstimate getEffortSpent() {\n        return effortSpent;\n    }\n    \n    public void setEfforSpentPercentage(int effortSpentPercentage) {\n        this.effortSpentPercentage = effortSpentPercentage;\n    }\n    \n    public int getEffortSpentPercentage() {\n        return this.effortSpentPercentage;\n    }\n    \n    public void setOriginalEstimate(ExactEstimate originalEstimate) {\n        this.originalEstimate = originalEstimate;\n    }\n    \n    public ExactEstimate getOriginalEstimate() {\n        return originalEstimate;\n    }\n    \n    public int getTotalValue() {\n        return totalValue;\n    }\n    \n    public void setTotalValue(int totalValue) {\n        this.totalValue = totalValue;\n    }\n    \n    public int getCompletedValue() {\n        return completedValue;\n    }\n    \n    public void setCompletedValue(int completedValue) {\n        this.completedValue = completedValue;\n    }\n    \n    public int getValuePercentage() {\n        return valuePercentage;\n    }\n    \n    public void setValuePercentage(int valuePercentage) {\n        this.valuePercentage = valuePercentage;\n    }\n    \n    public ExactEstimate getPlannedSize() {\n        return this.plannedSize;\n    }\n    \n    public void setPlannedSize(ExactEstimate plannedSize) {\n        this.plannedSize = plannedSize;\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\transfer\\\\ProjectTO.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["ProjectTO"], "SCS_MemberReference": ["NONE", "project", "scheduleStatus", "scheduleStatus", "scheduleStatus", "leafStories", "leafStories", "leafStories", "assignees", "assignees", "assignees", "iterations", "iterations", "iterations"], "AN": ["scheduleStatus", "leafStories", "iterations", "assignees"], "SCS_VariableDeclarator": ["scheduleStatus", "leafStories", "iterations", "assignees"], "SCS_ConstructorDeclaration": ["ProjectTO", "ProjectTO"], "SCS_ClassReference": ["BeanCopier"], "SCS_MethodInvocation": ["copy"], "MN": ["setScheduleStatus", "getScheduleStatus", "getLeafStories", "setLeafStories", "getAssignees", "setAssignees", "getChildIterations", "setChildIterations"], "PN": ["scheduleStatus", "leafStories", "assignees", "iterations"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.transfer;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Set;\n\nimport javax.xml.bind.annotation.XmlAccessType;\nimport javax.xml.bind.annotation.XmlAccessorType;\nimport javax.xml.bind.annotation.XmlElement;\nimport javax.xml.bind.annotation.XmlElementWrapper;\nimport javax.xml.bind.annotation.XmlRootElement;\n\nimport fi.hut.soberit.agilefant.model.Project;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.util.BeanCopier;\nimport flexjson.JSON;\n\n@XmlRootElement(name = \"projectto\")\n@XmlAccessorType(XmlAccessType.NONE)\npublic class ProjectTO extends Project implements LeafStoryContainer, Scheduled {\n\n    private ScheduleStatus scheduleStatus;\n    \n    private List<StoryTO> leafStories = new ArrayList<StoryTO>(); \n    \n    private List<IterationTO> iterations = new ArrayList<IterationTO>();\n    \n    private Set<User> assignees;\n\n    public ProjectTO() {};\n    public ProjectTO(Project project) {\n        BeanCopier.copy(project, this);\n    }\n    \n    public void setScheduleStatus(ScheduleStatus scheduleStatus) {\n        this.scheduleStatus = scheduleStatus;\n    }\n\n    public ScheduleStatus getScheduleStatus() {\n        return scheduleStatus;\n    }\n\n    @JSON\n    public List<StoryTO> getLeafStories() {\n        return leafStories;\n    }\n\n    public void setLeafStories(List<StoryTO> leafStories) {\n        this.leafStories = leafStories;\n    }\n\n    @XmlElement(name = \"user\")\n    @XmlElementWrapper(name = \"assignees\")\n    public Set<User> getAssignees() {\n        return assignees;\n    }\n\n    public void setAssignees(Set<User> assignees) {\n        this.assignees = assignees;\n    }\n\n    @XmlElement(name = \"iteration\")\n    @XmlElementWrapper(name = \"iterations\")\n    public List<IterationTO> getChildIterations() {\n        return iterations;\n    }\n\n    public void setChildIterations(List<IterationTO> iterations) {\n        this.iterations = iterations;\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\transfer\\\\Scheduled.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["Scheduled"], "MN": ["getScheduleStatus"], "PN": [], "CO": [], "CODE": "package fi.hut.soberit.agilefant.transfer;\n\nimport fi.hut.soberit.agilefant.model.Schedulable;\n\npublic interface Scheduled extends Schedulable {\n    public ScheduleStatus getScheduleStatus();\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\transfer\\\\ScheduleStatus.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["ScheduleStatus"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.transfer;\n\npublic enum ScheduleStatus {\n    PAST, ONGOING, FUTURE\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\transfer\\\\SearchResultRow.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["SearchResultRow"], "AN": ["label", "value", "originalObject"], "SCS_VariableDeclarator": ["label", "value", "originalObject"], "SCS_ConstructorDeclaration": ["SearchResultRow", "SearchResultRow"], "SCS_MemberReference": ["label", "label", "value", "originalObject", "original", "label", "label", "label", "originalObject", "originalObject", "originalObject", "value", "value", "value"], "SCS_ClassReference": ["original"], "SCS_MethodInvocation": ["getId"], "MN": ["getLabel", "setLabel", "getOriginalObject", "setOriginalObject", "getValue", "setValue"], "PN": ["label", "originalObject", "value"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.transfer;\n\nimport fi.hut.soberit.agilefant.model.NamedObject;\n\npublic class SearchResultRow {\n    private String label;\n    private int value;\n    \n    private NamedObject originalObject;\n    \n    public SearchResultRow() {\n    \n    }\n    \n    public SearchResultRow(String label, NamedObject original) {\n        this.label = label;\n        this.value = original.getId();\n        this.originalObject = original;\n    }\n    public String getLabel() {\n        return label;\n    }\n    public void setLabel(String label) {\n        this.label = label;\n    }\n    public NamedObject getOriginalObject() {\n        return originalObject;\n    }\n    public void setOriginalObject(NamedObject originalObject) {\n        this.originalObject = originalObject;\n    }\n\n    public int getValue() {\n        return value;\n    }\n\n    public void setValue(int value) {\n        this.value = value;\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\transfer\\\\StoryAccessCloudTO.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["StoryAccessCloudTO"], "AN": ["story", "count"], "SCS_VariableDeclarator": ["story", "count"], "SCS_ConstructorDeclaration": ["StoryAccessCloudTO"], "SCS_MemberReference": ["story", "story", "count", "count", "story", "story", "story", "count", "count", "count"], "MN": ["getStory", "setStory", "getCount", "setCount"], "PN": ["story", "count"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.transfer;\n\nimport fi.hut.soberit.agilefant.model.Story;\nimport flexjson.JSON;\n\npublic class StoryAccessCloudTO {\n    private Story story;\n    private long count;\n    \n    public StoryAccessCloudTO(Story story, long count) {\n        this.story = story;\n        this.count = count;\n    }\n    \n    @JSON\n    public Story getStory() {\n        return story;\n    }\n    public void setStory(Story story) {\n        this.story = story;\n    }\n    @JSON\n    public long getCount() {\n        return count;\n    }\n    public void setCount(long count) {\n        this.count = count;\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\transfer\\\\StoryTimesheetNode.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["StoryTimesheetNode"], "SCS_MemberReference": ["NONE", "taskEffortSum", "childTasks", "taskEffortSum", "effortSum", "taskEffortSum", "effortSum", "story", "story", "childTasks", "childTasks", "story", "childTasks", "childTasks", "node", "story", "taskEffortSum"], "AN": ["story", "taskEffortSum", "childTasks"], "SCS_VariableDeclarator": ["story", "taskEffortSum", "childTasks", "node"], "MN": ["calculateEffortSum", "getChildren", "getTaskNodes", "getName", "getHasChildren", "getId", "addChild", "getStory", "getTaskEffortSum", "getHourEntries"], "PN": ["node"], "SCS_VariableDeclaration": ["TaskTimesheetNode"], "SCS_ClassReference": ["node", null, null, null, "story", null, "StoryHourEntry"], "SCS_MethodInvocation": ["calculateEffortSum", "getOwnEffortSpentSum", "getName", "size", "getId", "add"], "SCS_ConstructorDeclaration": ["StoryTimesheetNode", "StoryTimesheetNode"], "CO": ["/**\n * A class representing a backlog item node in the timesheet tree.\n * Fetches the hour entries associated with this backlog item.\n * \n * @author Pasi Pekkanen, Vesa Piril\u00c3\u00a4\n *\n */"], "CODE": "package fi.hut.soberit.agilefant.transfer;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport javax.xml.bind.annotation.XmlAccessType;\nimport javax.xml.bind.annotation.XmlAccessorType;\nimport javax.xml.bind.annotation.XmlAttribute;\nimport javax.xml.bind.annotation.XmlElement;\nimport javax.xml.bind.annotation.XmlElementWrapper;\nimport javax.xml.bind.annotation.XmlType;\n\nimport fi.hut.soberit.agilefant.model.HourEntry;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.StoryHourEntry;\nimport fi.hut.soberit.agilefant.util.TimesheetNode;\n\n/**\n * A class representing a backlog item node in the timesheet tree.\n * Fetches the hour entries associated with this backlog item.\n * \n * @author Pasi Pekkanen, Vesa Piril\u00c3\u00a4\n *\n */\n@XmlType\n@XmlAccessorType( XmlAccessType.NONE )\npublic class StoryTimesheetNode extends TimesheetNode {\n    private Story story;\n    private long taskEffortSum;\n    \n    List<TaskTimesheetNode> childTasks = new ArrayList<TaskTimesheetNode>();\n    \n    @Override\n    public long calculateEffortSum() {\n        taskEffortSum  = 0l;\n        for(TaskTimesheetNode node : this.childTasks) {\n            taskEffortSum += node.calculateEffortSum();\n        }\n        effortSum = taskEffortSum + this.getOwnEffortSpentSum();\n        return effortSum;\n    }\n    \n    public StoryTimesheetNode() {}\n    \n    public StoryTimesheetNode(Story story) {\n        super();\n        this.story = story;\n    }\n\n    @Override\n    public List<? extends TimesheetNode> getChildren() {\n        return this.childTasks;\n    }\n\n    @XmlElementWrapper(name=\"taskNodes\")\n    @XmlElement(name=\"taskNode\")\n    public List<TaskTimesheetNode> getTaskNodes() {\n        return this.childTasks;\n    }\n    \n    @Override\n    @XmlAttribute(name=\"storyName\")\n    public String getName() {\n        return this.story.getName();\n    }\n\n    @Override\n    public boolean getHasChildren() {\n        return this.childTasks.size() != 0;\n    }\n    @Override\n    @XmlAttribute(name=\"storyId\")\n    public int getId() {\n        return story.getId();\n    }\n    \n    public void addChild(TaskTimesheetNode node) {\n        this.childTasks.add(node);\n    }\n\n    public Story getStory() {\n        return this.story;\n    }\n\n    public long getTaskEffortSum() {\n        return taskEffortSum;\n    }\n    \n    @XmlElementWrapper(name=\"hourEntries\")\n    @XmlElement(name=\"hourEntry\", type=StoryHourEntry.class)\n    @Override\n    public List<HourEntry> getHourEntries() {\n        return super.getHourEntries();\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\transfer\\\\StoryTO.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["StoryTO"], "SCS_MemberReference": ["NONE", "story", "workQueueRank", "workQueueRank", "story", "metrics", "metrics", "metrics", "rank", "rank", "rank", "returned", "effortSpent", "effortSpent", "effortSpent", "workQueueRank", "workQueueRank", "workQueueRank"], "AN": ["metrics", "rank", "effortSpent", "workQueueRank"], "SCS_VariableDeclarator": ["metrics", "rank", "effortSpent", "workQueueRank", "returned", "e"], "SCS_ConstructorDeclaration": ["StoryTO", "StoryTO", "StoryTO"], "SCS_ClassReference": ["BeanCopier", "BeanCopier", "", "returned", "e"], "SCS_MethodInvocation": ["copy", "copy", "getWhatsNextStoryEntries", "add", "getUser"], "MN": ["setMetrics", "getMetrics", "getRank", "setRank", "getWorkingOnStory", "getEffortSpent", "setEffortSpent", "getWorkQueueRank", "setWorkQueueRank"], "PN": ["metrics", "rank", "effortSpent", "workQueueRank"], "SCS_VariableDeclaration": ["ArrayList", "WhatsNextStoryEntry"], "CO": ["// Additional fields", "// Context-specific rank", "// Helper fields"], "CODE": "package fi.hut.soberit.agilefant.transfer;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\n\nimport javax.xml.bind.annotation.XmlAccessType;\nimport javax.xml.bind.annotation.XmlAccessorType;\nimport javax.xml.bind.annotation.XmlAttribute;\nimport javax.xml.bind.annotation.XmlType;\n\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.model.WhatsNextStoryEntry;\nimport fi.hut.soberit.agilefant.util.BeanCopier;\nimport fi.hut.soberit.agilefant.util.StoryMetrics;\nimport flexjson.JSON;\n\n@XmlType\n@XmlAccessorType( XmlAccessType.NONE )\npublic class StoryTO extends Story {\n\n    // Additional fields\n    private StoryMetrics metrics;\n    // Context-specific rank\n    private Integer rank;\n    // Helper fields\n    private long effortSpent;    \n    private Integer workQueueRank;\n\n    public StoryTO() {}\n    \n    public StoryTO(Story story, int workQueueRank) {\n        BeanCopier.copy(story, this);\n        this.workQueueRank = workQueueRank;\n    }\n    \n    public StoryTO(Story story) {\n        BeanCopier.copy(story, this);\n    }\n\n    public void setMetrics(StoryMetrics metrics) {\n        this.metrics = metrics;\n    }\n\n    public StoryMetrics getMetrics() {\n        return metrics;\n    }\n\n    @JSON\n    @XmlAttribute\n    public Integer getRank() {\n        return rank;\n    }\n\n    public void setRank(Integer rank) {\n        this.rank = rank;\n    }\n    \n    @JSON(include=false)\n    public Collection<User> getWorkingOnStory() {\n        ArrayList<User> returned = new ArrayList<User>();\n        for (WhatsNextStoryEntry e: getWhatsNextStoryEntries()) {\n            returned.add(e.getUser());\n        }\n        \n        return returned;\n    }\n    \n    @JSON(include = true)\n    public long getEffortSpent() {\n        return effortSpent;\n    }\n\n    public void setEffortSpent(long effortSpent) {\n        this.effortSpent = effortSpent;\n    }\n    \n    @JSON\n    @XmlAttribute\n    public Integer getWorkQueueRank() {\n        return workQueueRank;\n    }\n\n    public void setWorkQueueRank(Integer workQueueRank) {\n        this.workQueueRank = workQueueRank;\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\transfer\\\\StoryTreeBranchMetrics.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["StoryTreeBranchMetrics"], "AN": ["doneLeafPoints", "leafPoints", "estimatedDonePoints", "estimatedPoints", "spentEffort", "effortLeft"], "SCS_VariableDeclarator": ["doneLeafPoints", "leafPoints", "estimatedDonePoints", "estimatedPoints", "spentEffort", "effortLeft"], "MN": ["getDoneLeafPoints", "getLeafPoints", "getEstimatedDonePoints", "getEstimatedPoints", "getSpentEffort", "getEffortLeft"], "PN": [], "SCS_MemberReference": ["doneLeafPoints", "leafPoints", "estimatedDonePoints", "estimatedPoints", "spentEffort", "effortLeft"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.transfer;\n\npublic class StoryTreeBranchMetrics {\n    public long doneLeafPoints = 0;\n    public long leafPoints = 0;\n    public long estimatedDonePoints = 0;\n    public long estimatedPoints = 0;\n    public long spentEffort = 0;\n    public long effortLeft = 0;\n\n\n\tpublic long getDoneLeafPoints() {\n        return doneLeafPoints;\n    }\n    public long getLeafPoints() {\n        return leafPoints;\n    }\n    public long getEstimatedDonePoints() {\n        return estimatedDonePoints;\n    }\n    public long getEstimatedPoints() {\n        return estimatedPoints;\n    }\n    public long getSpentEffort() {\n\t\treturn spentEffort;\n\t}\n\tpublic long getEffortLeft() {\n\t\treturn effortLeft;\n\t}\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\transfer\\\\TaskTimesheetNode.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["TaskTimesheetNode"], "SCS_MemberReference": ["NONE", "task", "task", "task", "task"], "AN": ["task"], "SCS_VariableDeclarator": ["task"], "SCS_ConstructorDeclaration": ["TaskTimesheetNode", "TaskTimesheetNode"], "MN": ["getChildren", "getName", "getHasChildren", "getId", "getTask", "getHourEntries"], "PN": [], "SCS_ClassReference": ["Collections", null, "task", "TaskHourEntry"], "SCS_MethodInvocation": ["emptyList", "getName", "getId"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.transfer;\n\nimport java.util.Collections;\nimport java.util.List;\n\nimport javax.xml.bind.annotation.XmlAccessType;\nimport javax.xml.bind.annotation.XmlAccessorType;\nimport javax.xml.bind.annotation.XmlAttribute;\nimport javax.xml.bind.annotation.XmlElement;\nimport javax.xml.bind.annotation.XmlElementWrapper;\nimport javax.xml.bind.annotation.XmlType;\n\nimport fi.hut.soberit.agilefant.model.HourEntry;\nimport fi.hut.soberit.agilefant.model.Task;\nimport fi.hut.soberit.agilefant.model.TaskHourEntry;\nimport fi.hut.soberit.agilefant.util.TimesheetNode;\n\n@XmlType\n@XmlAccessorType( XmlAccessType.NONE )\npublic class TaskTimesheetNode extends TimesheetNode {\n    Task task;\n\n\n    public TaskTimesheetNode() { }\n    \n    public TaskTimesheetNode(Task task) {\n        super();\n        this.task = task;\n    }\n    @Override\n    public List<? extends TimesheetNode> getChildren() {\n        return Collections.emptyList();\n    }\n\n    @Override\n    @XmlAttribute(name=\"taskName\")\n    public String getName() {\n        return this.task.getName();\n    }\n\n    @Override\n    public boolean getHasChildren() {\n        return false;\n    }\n    @Override\n    @XmlAttribute(name = \"taskId\")\n    public int getId() {\n        return task.getId();\n    }\n    \n    public Task getTask() {\n        return this.task;\n    }\n    \n    @XmlElementWrapper(name=\"hourEntries\")\n    @XmlElement(name=\"hourEntry\", type=TaskHourEntry.class)\n    @Override\n    public List<HourEntry> getHourEntries() {\n        return super.getHourEntries();\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\transfer\\\\TaskTO.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["TaskTO"], "AN": ["effortSpent"], "SCS_VariableDeclarator": ["effortSpent", "returned", "e"], "SCS_ConstructorDeclaration": ["TaskTO", "TaskTO"], "SCS_ClassReference": ["BeanCopier", "", "returned", "e"], "SCS_MethodInvocation": ["copy", "getWhatsNextEntries", "add", "getUser"], "SCS_MemberReference": ["task", "effortSpent", "effortSpent", "effortSpent", "returned"], "MN": ["getEffortSpent", "setEffortSpent", "getWorkingOnTask"], "PN": ["effortSpent"], "SCS_VariableDeclaration": ["ArrayList", "WhatsNextEntry"], "CO": ["// Helper fields"], "CODE": "package fi.hut.soberit.agilefant.transfer;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\n\nimport fi.hut.soberit.agilefant.model.Task;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.model.WhatsNextEntry;\nimport fi.hut.soberit.agilefant.util.BeanCopier;\nimport flexjson.JSON;\n\npublic class TaskTO extends Task {\n   \n    // Helper fields\n    private long effortSpent;    \n\n    public TaskTO() {};\n    public TaskTO(Task task) {\n        BeanCopier.copy(task, this);\n    }\n    \n    @JSON(include = true)\n    public long getEffortSpent() {\n        return effortSpent;\n    }\n\n    public void setEffortSpent(long effortSpent) {\n        this.effortSpent = effortSpent;\n    }\n    \n    @JSON(include=false)\n    public Collection<User> getWorkingOnTask() {\n        ArrayList<User> returned = new ArrayList<User>();\n        for (WhatsNextEntry e: getWhatsNextEntries()) {\n            returned.add(e.getUser());\n        }\n        \n        return returned;\n    }\n}\n\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\transfer\\\\TimesheetReportTO.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["TimesheetReportTO"], "SCS_MemberReference": ["NONE", "productNodes", "productNodes", "productNodes", "totalEffortSum", "totalEffortSum", "totalEffortSum"], "AN": ["productNodes", "totalEffortSum"], "SCS_VariableDeclarator": ["productNodes", "totalEffortSum"], "MN": ["getProductNodes", "setProductNodes", "getTotalEffortSum", "setTotalEffortSum"], "PN": ["productNodes", "totalEffortSum"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.transfer;\n\nimport java.util.List;\n\nimport javax.xml.bind.annotation.XmlAccessType;\nimport javax.xml.bind.annotation.XmlAccessorType;\nimport javax.xml.bind.annotation.XmlAttribute;\nimport javax.xml.bind.annotation.XmlElement;\nimport javax.xml.bind.annotation.XmlElementWrapper;\nimport javax.xml.bind.annotation.XmlRootElement;\n\n@XmlRootElement(name=\"timesheetReport\")\n@XmlAccessorType( XmlAccessType.NONE )\npublic class TimesheetReportTO {\n\n    private List<BacklogTimesheetNode> productNodes;\n\n    private long totalEffortSum;\n    \n    @XmlElementWrapper(name=\"products\")\n    @XmlElement(name=\"backlogNode\")\n    public List<BacklogTimesheetNode> getProductNodes() {\n        return productNodes;\n    }\n    public void setProductNodes(List<BacklogTimesheetNode> productNodes) {\n        this.productNodes = productNodes;\n    }\n    @XmlAttribute\n    public long getTotalEffortSum() {\n        return totalEffortSum;\n    }\n    public void setTotalEffortSum(long totalEffortSum) {\n        this.totalEffortSum = totalEffortSum;\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\transfer\\\\UnassignedLoadTO.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["UnassignedLoadTO"], "AN": ["effortLeft", "iterationId", "iteration", "availabilitySum", "availability"], "SCS_VariableDeclarator": ["effortLeft", "iterationId", "iteration", "availabilitySum", "availability"], "SCS_ConstructorDeclaration": ["UnassignedLoadTO", "UnassignedLoadTO"], "SCS_MemberReference": ["availability", "userAvailability", "effortLeft", "effortLeft", "iterationId", "iterationId"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.transfer;\n\nimport fi.hut.soberit.agilefant.model.ExactEstimate;\nimport fi.hut.soberit.agilefant.model.Iteration;\n\npublic class UnassignedLoadTO {\n    public ExactEstimate effortLeft;\n    public int iterationId;\n    public Iteration iteration;\n    public int availabilitySum;\n    public int availability;\n    \n    public UnassignedLoadTO() {};\n    public UnassignedLoadTO(ExactEstimate effortLeft, int iterationId, int userAvailability) {\n        this.availability = userAvailability;\n        this.effortLeft = effortLeft;\n        this.iterationId = iterationId;\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\transfer\\\\UserLoadLimits.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["UserLoadLimits"], "AN": ["dailyLoadLow", "dailyLoadMedium", "dailyLoadHigh", "dailyLoadCritical", "dailyLoadMaximum"], "SCS_VariableDeclarator": ["dailyLoadLow", "dailyLoadMedium", "dailyLoadHigh", "dailyLoadCritical", "dailyLoadMaximum"], "MN": ["getDailyLoadLow", "setDailyLoadLow", "getDailyLoadMedium", "setDailyLoadMedium", "getDailyLoadHigh", "setDailyLoadHigh", "getDailyLoadCritical", "setDailyLoadCritical", "getDailyLoadMaximum", "setDailyLoadMaximum"], "PN": ["dailyLoadLow", "dailyLoadMedium", "dailyLoadHigh", "dailyLoadCritical", "dailyLoadMaximum"], "SCS_MemberReference": ["dailyLoadLow", "dailyLoadLow", "dailyLoadLow", "dailyLoadMedium", "dailyLoadMedium", "dailyLoadMedium", "dailyLoadHigh", "dailyLoadHigh", "dailyLoadHigh", "dailyLoadCritical", "dailyLoadCritical", "dailyLoadCritical", "dailyLoadMaximum", "dailyLoadMaximum", "dailyLoadMaximum"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.transfer;\n\npublic class UserLoadLimits {\n    private double dailyLoadLow = 0;\n\n    private double dailyLoadMedium = 0;\n\n    private double dailyLoadHigh = 0;\n\n    private double dailyLoadCritical = 0;\n\n    private double dailyLoadMaximum = 0;\n\n    public double getDailyLoadLow() {\n        return dailyLoadLow;\n    }\n\n    public void setDailyLoadLow(double dailyLoadLow) {\n        this.dailyLoadLow = dailyLoadLow;\n    }\n\n    public double getDailyLoadMedium() {\n        return dailyLoadMedium;\n    }\n\n    public void setDailyLoadMedium(double dailyLoadMedium) {\n        this.dailyLoadMedium = dailyLoadMedium;\n    }\n\n    public double getDailyLoadHigh() {\n        return dailyLoadHigh;\n    }\n\n    public void setDailyLoadHigh(double dailyLoadHigh) {\n        this.dailyLoadHigh = dailyLoadHigh;\n    }\n\n    public double getDailyLoadCritical() {\n        return dailyLoadCritical;\n    }\n\n    public void setDailyLoadCritical(double dailyLoadCritical) {\n        this.dailyLoadCritical = dailyLoadCritical;\n    }\n\n    public double getDailyLoadMaximum() {\n        return dailyLoadMaximum;\n    }\n\n    public void setDailyLoadMaximum(double dailyLoadMaximum) {\n        this.dailyLoadMaximum = dailyLoadMaximum;\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\util\\\\AgilefantBuild.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["AgilefantBuild", "GitInformation"], "AN": ["BUILD", "VERSION_PREFIX", "TIMESTAMP_PREFIX", "version", "buildTimestamp", "gitInformation", "releaseMode", "branch", "describe", "commitId", "buildUserName", "buildUserEmail", "buildTime", "commitUserName", "commitUserEmail", "commitMessageShort", "commitMessageFull", "commitTime", "EMPTY"], "SCS_VariableDeclarator": ["BUILD", "VERSION_PREFIX", "TIMESTAMP_PREFIX", "version", "buildTimestamp", "gitInformation", "releaseMode", "version", "buildTimestamp", "gitInformation", "format", "line", "value", "gitProperties", "properties", "input", "releaseMode", "dateFormatter", "branch", "describe", "commitId", "buildUserName", "buildUserEmail", "buildTime", "commitUserName", "commitUserEmail", "commitMessageShort", "commitMessageFull", "commitTime", "EMPTY"], "SCS_MemberReference": ["EMPTY", "version", "version", "buildTimestamp", "buildTimestamp", "gitInformation", "gitInformation", "releaseMode", "releaseMode", "BUILD", "EMPTY", "manifest", "UTF_8", "VERSION_PREFIX", "version", "TIMESTAMP_PREFIX", "buildTimestamp", "value", "gitProperties", "input", "input", "gitInformation", "properties", "input", "buildTimestamp", "buildTimestamp", "buildTimestamp", "BUILD", "dateFormatter", "buildTimestamp", "gitInformation", "releaseMode", "branch", "branch", "describe", "describe", "commitId", "commitId", "buildUserName", "buildUserName", "buildUserEmail", "buildUserEmail", "buildTime", "buildTime", "commitUserName", "commitUserName", "commitUserEmail", "commitUserEmail", "commitMessageShort", "commitMessageShort", "commitMessageFull", "commitMessageFull", "commitTime", "commitTime"], "SCS_ConstructorDeclaration": ["AgilefantBuild", "GitInformation", "GitInformation"], "MN": ["getBuild", "initialize"], "PN": ["manifest"], "SCS_VariableDeclaration": ["String", "Instant", "GitInformation", "DateTimeFormatter", "String", "String", "URL", "Properties", "InputStream", "boolean", "DateTimeFormatter"], "SCS_ClassReference": ["DateTimeFormat", "Resources", "line", "line", "VERSION_PREFIX", "line", "line", "TIMESTAMP_PREFIX", "format", null, "AgilefantBuild", null, null, "gitProperties", "properties", "IOUtils", null, "ISODateTimeFormat", null, null, null, null, "version", "buildTimestamp", "String", "properties", "String", "properties", "String", "properties", "String", "properties", "String", "properties", "String", "properties", "String", "properties", "String", "properties", "String", "properties", "String", "properties", "String", "properties"], "SCS_MethodInvocation": ["forPattern", "readLines", "startsWith", "substring", "length", "startsWith", "substring", "length", "parseDateTime", "toInstant", "getClassLoader", "getResource", "openStream", "load", "closeQuietly", "append", "basicDate", "appendLiteral", "appendHourOfDay", "appendMinuteOfHour", "toFormatter", "replaceFirst", "toString", "valueOf", "get", "valueOf", "get", "valueOf", "get", "valueOf", "get", "valueOf", "get", "valueOf", "get", "valueOf", "get", "valueOf", "get", "valueOf", "get", "valueOf", "get", "valueOf", "get"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.util;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.URL;\nimport java.util.Properties;\n\nimport org.apache.commons.io.IOUtils;\nimport org.joda.time.Instant;\nimport org.joda.time.format.DateTimeFormat;\nimport org.joda.time.format.DateTimeFormatter;\nimport org.joda.time.format.DateTimeFormatterBuilder;\nimport org.joda.time.format.ISODateTimeFormat;\n\nimport com.google.common.base.Charsets;\nimport com.google.common.io.Resources;\n\npublic final class AgilefantBuild {\n\n    private static volatile AgilefantBuild BUILD = new AgilefantBuild(\"x.x.x\", new Instant(), GitInformation.EMPTY, false);\n\n    private final static String VERSION_PREFIX = \"Implementation-Version: \";\n    private final static String TIMESTAMP_PREFIX = \"Agilefant-Build: \";\n\n    public final String version;\n    public final Instant buildTimestamp;\n    public final GitInformation gitInformation;\n    public final boolean releaseMode;\n\n    private AgilefantBuild(String version, Instant buildTimestamp, GitInformation gitInformation, boolean releaseMode) {\n        this.version = version;\n        this.buildTimestamp = buildTimestamp;\n        this.gitInformation = gitInformation;\n        this.releaseMode = releaseMode;\n    }\n\n    public static AgilefantBuild getBuild() {\n        return BUILD;\n    }\n\n    static void initialize(URL manifest) throws IOException {\n        String version = \"x.x.x-SNAPSHOT\";\n        Instant buildTimestamp = null;\n        GitInformation gitInformation = GitInformation.EMPTY;\n\n        DateTimeFormatter format = DateTimeFormat.forPattern(\"yyyyMMdd-HHmm\");\n        for (String line : Resources.readLines(manifest, Charsets.UTF_8)) {\n            if (line.startsWith(VERSION_PREFIX)) {\n                version = line.substring(VERSION_PREFIX.length());\n            } else if (line.startsWith(TIMESTAMP_PREFIX)) {\n                String value = line.substring(TIMESTAMP_PREFIX.length());\n                try {\n                    buildTimestamp = format.parseDateTime(value).toInstant();\n                } catch (IllegalArgumentException e) {\n                }\n            }\n        }\n\n        URL gitProperties = AgilefantBuild.class.getClassLoader().getResource(\"git.properties\");\n        if (gitProperties != null) {\n            Properties properties = new Properties();\n            InputStream input = null;\n            try {\n                input = gitProperties.openStream();\n                properties.load(input);\n\n                gitInformation = new GitInformation(properties);\n            } finally {\n                IOUtils.closeQuietly(input);\n            }\n        }\n\n        boolean releaseMode = buildTimestamp != null;\n        if (buildTimestamp == null)\n            buildTimestamp = new Instant();\n\n        DateTimeFormatter dateFormatter = new DateTimeFormatterBuilder().append(ISODateTimeFormat.basicDate()).appendLiteral('-').appendHourOfDay(2)\n                .appendMinuteOfHour(2).toFormatter();\n\n        BUILD = new AgilefantBuild(version.replaceFirst(\"SNAPSHOT\", buildTimestamp.toString(dateFormatter)), buildTimestamp, gitInformation, releaseMode);\n    }\n\n    public static class GitInformation {\n        public final String branch;\n        public final String describe;\n        public final String commitId;\n        public final String buildUserName;\n        public final String buildUserEmail;\n        public final String buildTime;\n        public final String commitUserName;\n        public final String commitUserEmail;\n        public final String commitMessageShort;\n        public final String commitMessageFull;\n        public final String commitTime;\n\n        public static final GitInformation EMPTY = new GitInformation(\"?\", \"?\", \"?\", \"?\", \"?\", \"?\", \"?\", \"?\", \"?\", \"?\", \"?\");\n\n        public GitInformation(String branch, String describe, String commitId, String buildUserName, String buildUserEmail, String buildTime,\n                String commitUserName, String commitUserEmail, String commitMessageShort, String commitMessageFull, String commitTime) {\n            this.branch = branch;\n            this.describe = describe;\n            this.commitId = commitId;\n            this.buildUserName = buildUserName;\n            this.buildUserEmail = buildUserEmail;\n            this.buildTime = buildTime;\n            this.commitUserName = commitUserName;\n            this.commitUserEmail = commitUserEmail;\n            this.commitMessageShort = commitMessageShort;\n            this.commitMessageFull = commitMessageFull;\n            this.commitTime = commitTime;\n        }\n\n        public GitInformation(Properties properties) {\n            this(String.valueOf(properties.get(\"git.branch\")), String.valueOf(properties.get(\"git.commit.id.describe\")), String.valueOf(properties\n                    .get(\"git.commit.id\")), String.valueOf(properties.get(\"git.build.user.name\")), String.valueOf(properties.get(\"git.build.user.email\")),\n                    String.valueOf(properties.get(\"git.build.time\")), String.valueOf(properties.get(\"git.commit.user.name\")), String.valueOf(properties\n                            .get(\"git.commit.user.email\")), String.valueOf(properties.get(\"git.commit.message.short\")), String.valueOf(properties\n                            .get(\"git.commit.message.full\")), String.valueOf(properties.get(\"git.commit.time\")));\n        }\n    }\n\n}", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\util\\\\AgilefantBuildInitializer.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["AgilefantBuildInitializer"], "MN": ["contextInitialized", "contextDestroyed"], "PN": ["sce", "sce"], "SCS_ClassReference": ["AgilefantBuild", "sce", null, "sce", null], "SCS_MethodInvocation": ["initialize", "getServletContext", "getResource", "getServletContext", "log"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.util;\n\nimport javax.servlet.ServletContextEvent;\nimport javax.servlet.ServletContextListener;\n\npublic class AgilefantBuildInitializer implements ServletContextListener {\n\n    @Override\n    public void contextInitialized(ServletContextEvent sce) {\n        try {\n            AgilefantBuild.initialize(sce.getServletContext().getResource(\"META-INF/MANIFEST.MF\"));\n        } catch (Exception e) {\n            sce.getServletContext().log(\"Failed to fetch agilefant build information\");\n        }\n    }\n\n    @Override\n    public void contextDestroyed(ServletContextEvent sce) {\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\util\\\\BacklogConverter.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["BacklogConverter"], "AN": ["backlogBusiness"], "SCS_VariableDeclarator": ["backlogBusiness", "id"], "MN": ["convertFromString", "convertToString", "setBacklogBusiness"], "PN": ["context", "values", "toClass", "context", "o", "backlogBusiness"], "SCS_VariableDeclaration": ["int"], "SCS_ClassReference": ["Integer", "backlogBusiness", "o"], "SCS_MethodInvocation": ["parseInt", "retrieve", "toString"], "SCS_MemberReference": ["values", "id", "o", "backlogBusiness", "backlogBusiness"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.util;\n\nimport java.util.Map;\n\nimport org.apache.struts2.util.StrutsTypeConverter;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport fi.hut.soberit.agilefant.business.BacklogBusiness;\n\npublic class BacklogConverter extends StrutsTypeConverter {\n    @Autowired\n    private BacklogBusiness backlogBusiness;\n\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public Object convertFromString(Map context, String[] values, Class toClass) {\n        int id = Integer.parseInt(values[0]);\n        return backlogBusiness.retrieve(id);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public String convertToString(Map context, Object o) {\n        if (o == null)\n            return null;\n        return o.toString();\n    }\n\n    public void setBacklogBusiness(BacklogBusiness backlogBusiness) {\n        this.backlogBusiness = backlogBusiness;\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\util\\\\BeanCopier.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["BeanCopier"], "AN": ["CACHE"], "SCS_VariableDeclarator": ["CACHE", "descriptors", "builder", "sourceInfo", "descriptor", "readDescriptors", "writeDescriptors", "name", "read", "write", "readMethod", "writeMethod", "value"], "MN": ["getDescriptors", "copy"], "PN": ["clazz", "source", "destination"], "SCS_VariableDeclaration": ["ImmutableMap", "ImmutableMap", "BeanInfo", "PropertyDescriptor", "Map", "Map", "String", "PropertyDescriptor", "PropertyDescriptor", "Method", "Method", "Object"], "SCS_ClassReference": ["CACHE", "ImmutableMap", "Introspector", "clazz", "sourceInfo", null, "descriptor", "builder", "descriptor", "builder", "CACHE", "", "source", "", "destination", "readDescriptors", "readDescriptors", "writeDescriptors", "read", "write", "readMethod", "writeMethod", "String", "source", null, "destination", null], "SCS_MethodInvocation": ["get", "builder", "getBeanInfo", "getName", "getPropertyDescriptors", "equals", "getName", "put", "getName", "build", "putIfAbsent", "getDescriptors", "getClass", "getDescriptors", "getClass", "keySet", "get", "get", "getReadMethod", "getWriteMethod", "invoke", "invoke", "format", "getClass", "getName", "getClass", "getName"], "SCS_MemberReference": ["clazz", "descriptors", "descriptors", "sourceInfo", "clazz", "descriptor", "descriptors", "clazz", "descriptors", "descriptors", "name", "name", "read", "write", "readMethod", "writeMethod", "source", "destination", "value", "name", "name", "e"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.util;\n\nimport java.beans.BeanInfo;\nimport java.beans.IntrospectionException;\nimport java.beans.Introspector;\nimport java.beans.PropertyDescriptor;\nimport java.lang.reflect.Method;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\n\nimport com.google.common.collect.ImmutableMap;\n\npublic class BeanCopier {\n\n    private static final ConcurrentMap<Class<?>, ImmutableMap<String, PropertyDescriptor>> CACHE = new ConcurrentHashMap<Class<?>, ImmutableMap<String, PropertyDescriptor>>();\n\n    private static Map<String, PropertyDescriptor> getDescriptors(Class<?> clazz) {\n        ImmutableMap<String, PropertyDescriptor> descriptors = CACHE.get(clazz);\n        if (descriptors != null)\n            return descriptors;\n\n        ImmutableMap.Builder<String, PropertyDescriptor> builder = ImmutableMap.builder();\n        BeanInfo sourceInfo;\n        try {\n            sourceInfo = Introspector.getBeanInfo(clazz);\n        } catch (IntrospectionException e) {\n            throw new RuntimeException(\"Failed to introspect bean properties of \" + clazz.getName());\n        }\n\n        for (PropertyDescriptor descriptor : sourceInfo.getPropertyDescriptors()) {\n            if (!\"class\".equals(descriptor.getName()))\n                builder.put(descriptor.getName(), descriptor);\n        }\n        descriptors = builder.build();\n        CACHE.putIfAbsent(clazz, descriptors);\n        return descriptors;\n    }\n\n    public static <T extends Object> void copy(T source, T destination) {\n        Map<String, PropertyDescriptor> readDescriptors = getDescriptors(source.getClass());\n        Map<String, PropertyDescriptor> writeDescriptors = getDescriptors(destination.getClass());\n\n        for (String name : readDescriptors.keySet()) {\n            PropertyDescriptor read = readDescriptors.get(name);\n            PropertyDescriptor write = writeDescriptors.get(name);\n            if (read == null || write == null)\n                continue;\n\n            Method readMethod = read.getReadMethod();\n            Method writeMethod = write.getWriteMethod();\n            if (readMethod == null || writeMethod == null)\n                continue;\n\n            try {\n                Object value = readMethod.invoke(source);\n                writeMethod.invoke(destination, value);\n            } catch (Exception e) {\n                throw new RuntimeException(String.format(\"Failed to copy bean property %s.%s to %s.%s\", source.getClass().getName(), name, destination\n                        .getClass().getName(), name), e);\n            }\n        }\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\util\\\\ChildHandlingChoice.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["ChildHandlingChoice"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.util;\n\npublic enum ChildHandlingChoice {\n    MOVE, DELETE\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\util\\\\CustomXYStepRenderer.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["CustomXYStepRenderer", "Graphics2DWrapper"], "AN": ["serialVersionUID", "stepPaint", "stepStroke", "wrapped"], "SCS_VariableDeclarator": ["serialVersionUID", "stepPaint", "stepStroke", "wrapped", "line", "stroke", "paint"], "MN": ["setStepPaint", "setStepStroke", "addRenderingHints", "clearRect", "clip", "clipRect", "copyArea", "create", "create", "dispose", "draw", "draw3DRect", "drawArc", "drawBytes", "drawChars", "drawGlyphVector", "drawImage", "drawImage", "drawImage", "drawImage", "drawImage", "drawImage", "drawImage", "drawImage", "drawLine", "drawOval", "drawPolygon", "drawPolygon", "drawPolyline", "drawRect", "drawRenderableImage", "drawRenderedImage", "drawRoundRect", "drawString", "drawString", "drawString", "drawString", "equals", "fill", "fill3DRect", "fillArc", "fillOval", "fillPolygon", "fillPolygon", "fillRect", "fillRoundRect", "finalize", "getBackground", "getClip", "getClipBounds", "getClipBounds", "getClipRect", "getColor", "getComposite", "getDeviceConfiguration", "getFont", "getFontMetrics", "getFontMetrics", "getFontRenderContext", "getPaint", "getRenderingHint", "getRenderingHints", "getStroke", "getTransform", "hashCode", "hit", "hitClip", "rotate", "rotate", "scale", "setBackground", "setClip", "setClip", "setColor", "setComposite", "setFont", "setPaint", "setPaintMode", "setRenderingHint", "setRenderingHints", "setStroke", "setTransform", "setXORMode", "shear", "toString", "transform", "translate", "translate", "wrap", "drawItem"], "PN": ["stepPaint", "stepStroke", "hints", "x", "y", "width", "height", "s", "x", "y", "width", "height", "x", "y", "width", "height", "dx", "dy", "x", "y", "width", "height", "s", "x", "y", "width", "height", "raised", "x", "y", "width", "height", "startAngle", "arcAngle", "data", "offset", "length", "x", "y", "data", "offset", "length", "x", "y", "g", "x", "y", "img", "op", "x", "y", "img", "xform", "obs", "img", "x", "y", "bgcolor", "observer", "img", "x", "y", "observer", "img", "x", "y", "width", "height", "bgcolor", "observer", "img", "x", "y", "width", "height", "observer", "img", "dx1", "dy1", "dx2", "dy2", "sx1", "sy1", "sx2", "sy2", "bgcolor", "observer", "img", "dx1", "dy1", "dx2", "dy2", "sx1", "sy1", "sx2", "sy2", "observer", "x1", "y1", "x2", "y2", "x", "y", "width", "height", "points", "points2", "points3", "p", "points", "points2", "points3", "x", "y", "width", "height", "img", "xform", "img", "xform", "x", "y", "width", "height", "arcWidth", "arcHeight", "iterator", "x", "y", "iterator", "x", "y", "str", "x", "y", "str", "x", "y", "obj", "s", "x", "y", "width", "height", "raised", "x", "y", "width", "height", "startAngle", "arcAngle", "x", "y", "width", "height", "points", "points2", "points3", "p", "x", "y", "width", "height", "x", "y", "width", "height", "arcWidth", "arcHeight", "r", "f", "hintKey", "rect", "s", "onStroke", "x", "y", "width", "height", "theta", "x", "y", "theta", "sx", "sy", "color", "x", "y", "width", "height", "clip", "c", "comp", "font", "paint", "hintKey", "hintValue", "hints", "s", "Tx", "c1", "shx", "shy", "Tx", "tx", "ty", "x", "y", "wrapped", "g2", "state", "dataArea", "info", "plot", "domainAxis", "rangeAxis", "dataset", "series", "item", "crosshairState", "pass"], "SCS_MemberReference": ["stepPaint", "stepPaint", "stepStroke", "stepStroke", "wrapped", "wrapped", "hints", "x", "y", "width", "height", "s", "x", "y", "width", "height", "x", "y", "width", "height", "dx", "dy", "x", "y", "width", "height", "s", "s", "stepStroke", "stepStroke", "stepPaint", "stepPaint", "s", "stroke", "paint", "s", "x", "y", "width", "height", "raised", "x", "y", "width", "height", "startAngle", "arcAngle", "data", "offset", "length", "x", "y", "data", "offset", "length", "x", "y", "g", "x", "y", "img", "op", "x", "y", "img", "xform", "obs", "img", "x", "y", "bgcolor", "observer", "img", "x", "y", "observer", "img", "x", "y", "width", "height", "bgcolor", "observer", "img", "x", "y", "width", "height", "observer", "img", "dx1", "dy1", "dx2", "dy2", "sx1", "sy1", "sx2", "sy2", "bgcolor", "observer", "img", "dx1", "dy1", "dx2", "dy2", "sx1", "sy1", "sx2", "sy2", "observer", "x1", "y1", "x2", "y2", "x", "y", "width", "height", "points", "points2", "points3", "p", "points", "points2", "points3", "x", "y", "width", "height", "img", "xform", "img", "xform", "x", "y", "width", "height", "arcWidth", "arcHeight", "iterator", "x", "y", "iterator", "x", "y", "str", "x", "y", "str", "x", "y", "obj", "s", "x", "y", "width", "height", "raised", "x", "y", "width", "height", "startAngle", "arcAngle", "x", "y", "width", "height", "points", "points2", "points3", "p", "x", "y", "width", "height", "x", "y", "width", "height", "arcWidth", "arcHeight", "r", "f", "hintKey", "rect", "s", "onStroke", "x", "y", "width", "height", "theta", "x", "y", "theta", "sx", "sy", "color", "x", "y", "width", "height", "clip", "c", "comp", "font", "paint", "hintKey", "hintValue", "hints", "s", "Tx", "c1", "shx", "shy", "Tx", "tx", "ty", "x", "y", "wrapped", "g2", "state", "dataArea", "info", "plot", "domainAxis", "rangeAxis", "dataset", "series", "item", "crosshairState", "pass"], "SCS_ConstructorDeclaration": ["Graphics2DWrapper"], "SCS_ClassReference": ["wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "line", "line", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", "wrapped", ""], "SCS_MethodInvocation": ["addRenderingHints", "clearRect", "clip", "clipRect", "copyArea", "create", "create", "dispose", "getX1", "getX2", "getStroke", "getPaint", "setStroke", "setPaint", "draw", "setStroke", "setPaint", "draw", "draw3DRect", "drawArc", "drawBytes", "drawChars", "drawGlyphVector", "drawImage", "drawImage", "drawImage", "drawImage", "drawImage", "drawImage", "drawImage", "drawImage", "drawLine", "drawOval", "drawPolygon", "drawPolygon", "drawPolyline", "drawRect", "drawRenderableImage", "drawRenderedImage", "drawRoundRect", "drawString", "drawString", "drawString", "drawString", "equals", "fill", "fill3DRect", "fillArc", "fillOval", "fillPolygon", "fillPolygon", "fillRect", "fillRoundRect", "finalize", "getBackground", "getClip", "getClipBounds", "getClipBounds", "getClipRect", "getColor", "getComposite", "getDeviceConfiguration", "getFont", "getFontMetrics", "getFontMetrics", "getFontRenderContext", "getPaint", "getRenderingHint", "getRenderingHints", "getStroke", "getTransform", "hashCode", "hit", "hitClip", "rotate", "rotate", "scale", "setBackground", "setClip", "setClip", "setColor", "setComposite", "setFont", "setPaint", "setPaintMode", "setRenderingHint", "setRenderingHints", "setStroke", "setTransform", "setXORMode", "shear", "toString", "transform", "translate", "translate", "wrap"], "SCS_VariableDeclaration": ["Line2D", "Stroke", "Paint"], "CO": ["/**\n * A custom XYStepRenderer that supports separate style for steps on the range\n * axis.\n * \n * For example, it can be used to style vertical steps as dashed lines\n * \n * @author jtjavana\n * \n */", "// All methods except draw(Shape s) are delegated to the wrapped Graphics2D", "// We are drawing a vertical line, so let's add some custom style!"], "CODE": "package fi.hut.soberit.agilefant.util;\n\nimport java.awt.Color;\nimport java.awt.Composite;\nimport java.awt.Font;\nimport java.awt.FontMetrics;\nimport java.awt.Graphics;\nimport java.awt.Graphics2D;\nimport java.awt.GraphicsConfiguration;\nimport java.awt.Image;\nimport java.awt.Paint;\nimport java.awt.Polygon;\nimport java.awt.Rectangle;\nimport java.awt.RenderingHints;\nimport java.awt.Shape;\nimport java.awt.Stroke;\nimport java.awt.RenderingHints.Key;\nimport java.awt.font.FontRenderContext;\nimport java.awt.font.GlyphVector;\nimport java.awt.geom.AffineTransform;\nimport java.awt.geom.Line2D;\nimport java.awt.geom.Rectangle2D;\nimport java.awt.image.BufferedImage;\nimport java.awt.image.BufferedImageOp;\nimport java.awt.image.ImageObserver;\nimport java.awt.image.RenderedImage;\nimport java.awt.image.renderable.RenderableImage;\nimport java.text.AttributedCharacterIterator;\nimport java.util.Map;\n\nimport org.jfree.chart.axis.ValueAxis;\nimport org.jfree.chart.plot.CrosshairState;\nimport org.jfree.chart.plot.PlotRenderingInfo;\nimport org.jfree.chart.plot.XYPlot;\nimport org.jfree.chart.renderer.xy.XYItemRendererState;\nimport org.jfree.chart.renderer.xy.XYStepRenderer;\nimport org.jfree.data.xy.XYDataset;\n\n/**\n * A custom XYStepRenderer that supports separate style for steps on the range\n * axis.\n * \n * For example, it can be used to style vertical steps as dashed lines\n * \n * @author jtjavana\n * \n */\npublic class CustomXYStepRenderer extends XYStepRenderer {\n\n    private static final long serialVersionUID = -1913038208340040789L;\n\n    private Paint stepPaint;\n\n    private Stroke stepStroke;\n\n    public void setStepPaint(Paint stepPaint) {\n        this.stepPaint = stepPaint;\n    }\n\n    public void setStepStroke(Stroke stepStroke) {\n        this.stepStroke = stepStroke;\n    }\n\n    // All methods except draw(Shape s) are delegated to the wrapped Graphics2D\n    class Graphics2DWrapper extends Graphics2D {\n\n        private Graphics2D wrapped;\n\n        public Graphics2DWrapper(Graphics2D wrapped) {\n            this.wrapped = wrapped;\n        }\n\n        public void addRenderingHints(Map<?, ?> hints) {\n            wrapped.addRenderingHints(hints);\n        }\n\n        public void clearRect(int x, int y, int width, int height) {\n            wrapped.clearRect(x, y, width, height);\n        }\n\n        public void clip(Shape s) {\n            wrapped.clip(s);\n        }\n\n        public void clipRect(int x, int y, int width, int height) {\n            wrapped.clipRect(x, y, width, height);\n        }\n\n        public void copyArea(int x, int y, int width, int height, int dx, int dy) {\n            wrapped.copyArea(x, y, width, height, dx, dy);\n        }\n\n        public Graphics create() {\n            return wrapped.create();\n        }\n\n        public Graphics create(int x, int y, int width, int height) {\n            return wrapped.create(x, y, width, height);\n        }\n\n        public void dispose() {\n            wrapped.dispose();\n        }\n\n        public void draw(Shape s) {\n            if (s instanceof Line2D) {\n                Line2D line = (Line2D) s;\n                if (line.getX1() == line.getX2()) {\n                    // We are drawing a vertical line, so let's add some custom style!\n                    Stroke stroke = wrapped.getStroke();\n                    Paint paint = wrapped.getPaint();\n                    if (stepStroke != null) {\n                        wrapped.setStroke(stepStroke);\n                    }\n                    if (stepPaint != null) {\n                        wrapped.setPaint(stepPaint);\n                    }\n                    wrapped.draw(s);\n                    wrapped.setStroke(stroke);\n                    wrapped.setPaint(paint);\n                    return;\n                }\n            }\n            wrapped.draw(s);\n        }\n\n        public void draw3DRect(int x, int y, int width, int height,\n                boolean raised) {\n            wrapped.draw3DRect(x, y, width, height, raised);\n        }\n\n        public void drawArc(int x, int y, int width, int height,\n                int startAngle, int arcAngle) {\n            wrapped.drawArc(x, y, width, height, startAngle, arcAngle);\n        }\n\n        public void drawBytes(byte[] data, int offset, int length, int x, int y) {\n            wrapped.drawBytes(data, offset, length, x, y);\n        }\n\n        public void drawChars(char[] data, int offset, int length, int x, int y) {\n            wrapped.drawChars(data, offset, length, x, y);\n        }\n\n        public void drawGlyphVector(GlyphVector g, float x, float y) {\n            wrapped.drawGlyphVector(g, x, y);\n        }\n\n        public void drawImage(BufferedImage img, BufferedImageOp op, int x,\n                int y) {\n            wrapped.drawImage(img, op, x, y);\n        }\n\n        public boolean drawImage(Image img, AffineTransform xform,\n                ImageObserver obs) {\n            return wrapped.drawImage(img, xform, obs);\n        }\n\n        public boolean drawImage(Image img, int x, int y, Color bgcolor,\n                ImageObserver observer) {\n            return wrapped.drawImage(img, x, y, bgcolor, observer);\n        }\n\n        public boolean drawImage(Image img, int x, int y, ImageObserver observer) {\n            return wrapped.drawImage(img, x, y, observer);\n        }\n\n        public boolean drawImage(Image img, int x, int y, int width,\n                int height, Color bgcolor, ImageObserver observer) {\n            return wrapped.drawImage(img, x, y, width, height, bgcolor,\n                    observer);\n        }\n\n        public boolean drawImage(Image img, int x, int y, int width,\n                int height, ImageObserver observer) {\n            return wrapped.drawImage(img, x, y, width, height, observer);\n        }\n\n        public boolean drawImage(Image img, int dx1, int dy1, int dx2, int dy2,\n                int sx1, int sy1, int sx2, int sy2, Color bgcolor,\n                ImageObserver observer) {\n            return wrapped.drawImage(img, dx1, dy1, dx2, dy2, sx1, sy1, sx2,\n                    sy2, bgcolor, observer);\n        }\n\n        public boolean drawImage(Image img, int dx1, int dy1, int dx2, int dy2,\n                int sx1, int sy1, int sx2, int sy2, ImageObserver observer) {\n            return wrapped.drawImage(img, dx1, dy1, dx2, dy2, sx1, sy1, sx2,\n                    sy2, observer);\n        }\n\n        public void drawLine(int x1, int y1, int x2, int y2) {\n            wrapped.drawLine(x1, y1, x2, y2);\n        }\n\n        public void drawOval(int x, int y, int width, int height) {\n            wrapped.drawOval(x, y, width, height);\n        }\n\n        public void drawPolygon(int[] points, int[] points2, int points3) {\n            wrapped.drawPolygon(points, points2, points3);\n        }\n\n        public void drawPolygon(Polygon p) {\n            wrapped.drawPolygon(p);\n        }\n\n        public void drawPolyline(int[] points, int[] points2, int points3) {\n            wrapped.drawPolyline(points, points2, points3);\n        }\n\n        public void drawRect(int x, int y, int width, int height) {\n            wrapped.drawRect(x, y, width, height);\n        }\n\n        public void drawRenderableImage(RenderableImage img,\n                AffineTransform xform) {\n            wrapped.drawRenderableImage(img, xform);\n        }\n\n        public void drawRenderedImage(RenderedImage img, AffineTransform xform) {\n            wrapped.drawRenderedImage(img, xform);\n        }\n\n        public void drawRoundRect(int x, int y, int width, int height,\n                int arcWidth, int arcHeight) {\n            wrapped.drawRoundRect(x, y, width, height, arcWidth, arcHeight);\n        }\n\n        public void drawString(AttributedCharacterIterator iterator, float x,\n                float y) {\n            wrapped.drawString(iterator, x, y);\n        }\n\n        public void drawString(AttributedCharacterIterator iterator, int x,\n                int y) {\n            wrapped.drawString(iterator, x, y);\n        }\n\n        public void drawString(String str, float x, float y) {\n            wrapped.drawString(str, x, y);\n        }\n\n        public void drawString(String str, int x, int y) {\n            wrapped.drawString(str, x, y);\n        }\n\n        public boolean equals(Object obj) {\n            return wrapped.equals(obj);\n        }\n\n        public void fill(Shape s) {\n            wrapped.fill(s);\n        }\n\n        public void fill3DRect(int x, int y, int width, int height,\n                boolean raised) {\n            wrapped.fill3DRect(x, y, width, height, raised);\n        }\n\n        public void fillArc(int x, int y, int width, int height,\n                int startAngle, int arcAngle) {\n            wrapped.fillArc(x, y, width, height, startAngle, arcAngle);\n        }\n\n        public void fillOval(int x, int y, int width, int height) {\n            wrapped.fillOval(x, y, width, height);\n        }\n\n        public void fillPolygon(int[] points, int[] points2, int points3) {\n            wrapped.fillPolygon(points, points2, points3);\n        }\n\n        public void fillPolygon(Polygon p) {\n            wrapped.fillPolygon(p);\n        }\n\n        public void fillRect(int x, int y, int width, int height) {\n            wrapped.fillRect(x, y, width, height);\n        }\n\n        public void fillRoundRect(int x, int y, int width, int height,\n                int arcWidth, int arcHeight) {\n            wrapped.fillRoundRect(x, y, width, height, arcWidth, arcHeight);\n        }\n\n        public void finalize() {\n            wrapped.finalize();\n        }\n\n        public Color getBackground() {\n            return wrapped.getBackground();\n        }\n\n        public Shape getClip() {\n            return wrapped.getClip();\n        }\n\n        public Rectangle getClipBounds() {\n            return wrapped.getClipBounds();\n        }\n\n        public Rectangle getClipBounds(Rectangle r) {\n            return wrapped.getClipBounds(r);\n        }\n\n        @SuppressWarnings(\"deprecation\")\n        public Rectangle getClipRect() {\n            return wrapped.getClipRect();\n        }\n\n        public Color getColor() {\n            return wrapped.getColor();\n        }\n\n        public Composite getComposite() {\n            return wrapped.getComposite();\n        }\n\n        public GraphicsConfiguration getDeviceConfiguration() {\n            return wrapped.getDeviceConfiguration();\n        }\n\n        public Font getFont() {\n            return wrapped.getFont();\n        }\n\n        public FontMetrics getFontMetrics() {\n            return wrapped.getFontMetrics();\n        }\n\n        public FontMetrics getFontMetrics(Font f) {\n            return wrapped.getFontMetrics(f);\n        }\n\n        public FontRenderContext getFontRenderContext() {\n            return wrapped.getFontRenderContext();\n        }\n\n        public Paint getPaint() {\n            return wrapped.getPaint();\n        }\n\n        public Object getRenderingHint(Key hintKey) {\n            return wrapped.getRenderingHint(hintKey);\n        }\n\n        public RenderingHints getRenderingHints() {\n            return wrapped.getRenderingHints();\n        }\n\n        public Stroke getStroke() {\n            return wrapped.getStroke();\n        }\n\n        public AffineTransform getTransform() {\n            return wrapped.getTransform();\n        }\n\n        public int hashCode() {\n            return wrapped.hashCode();\n        }\n\n        public boolean hit(Rectangle rect, Shape s, boolean onStroke) {\n            return wrapped.hit(rect, s, onStroke);\n        }\n\n        public boolean hitClip(int x, int y, int width, int height) {\n            return wrapped.hitClip(x, y, width, height);\n        }\n\n        public void rotate(double theta, double x, double y) {\n            wrapped.rotate(theta, x, y);\n        }\n\n        public void rotate(double theta) {\n            wrapped.rotate(theta);\n        }\n\n        public void scale(double sx, double sy) {\n            wrapped.scale(sx, sy);\n        }\n\n        public void setBackground(Color color) {\n            wrapped.setBackground(color);\n        }\n\n        public void setClip(int x, int y, int width, int height) {\n            wrapped.setClip(x, y, width, height);\n        }\n\n        public void setClip(Shape clip) {\n            wrapped.setClip(clip);\n        }\n\n        public void setColor(Color c) {\n            wrapped.setColor(c);\n        }\n\n        public void setComposite(Composite comp) {\n            wrapped.setComposite(comp);\n        }\n\n        public void setFont(Font font) {\n            wrapped.setFont(font);\n        }\n\n        public void setPaint(Paint paint) {\n            wrapped.setPaint(paint);\n        }\n\n        public void setPaintMode() {\n            wrapped.setPaintMode();\n        }\n\n        public void setRenderingHint(Key hintKey, Object hintValue) {\n            wrapped.setRenderingHint(hintKey, hintValue);\n        }\n\n        public void setRenderingHints(Map<?, ?> hints) {\n            wrapped.setRenderingHints(hints);\n        }\n\n        public void setStroke(Stroke s) {\n            wrapped.setStroke(s);\n        }\n\n        public void setTransform(AffineTransform Tx) {\n            wrapped.setTransform(Tx);\n        }\n\n        public void setXORMode(Color c1) {\n            wrapped.setXORMode(c1);\n        }\n\n        public void shear(double shx, double shy) {\n            wrapped.shear(shx, shy);\n        }\n\n        public String toString() {\n            return wrapped.toString();\n        }\n\n        public void transform(AffineTransform Tx) {\n            wrapped.transform(Tx);\n        }\n\n        public void translate(double tx, double ty) {\n            wrapped.translate(tx, ty);\n        }\n\n        public void translate(int x, int y) {\n            wrapped.translate(x, y);\n        }\n\n    }\n\n    protected Graphics2D wrap(Graphics2D wrapped) {\n        return new Graphics2DWrapper(wrapped);\n    }\n\n    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, PlotRenderingInfo info, XYPlot plot,\n            ValueAxis domainAxis, ValueAxis rangeAxis, XYDataset dataset,\n            int series, int item, CrosshairState crosshairState, int pass) {\n        super.drawItem(wrap(g2), state, dataArea, info, plot, domainAxis,\n                rangeAxis, dataset, series, item, crosshairState, pass);\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\util\\\\DateTimeConverter.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["DateTimeConverter"], "AN": ["textProvider", "numberFormat"], "SCS_VariableDeclarator": ["textProvider", "numberFormat", "pattern", "value", "longValue", "returned", "df", "date", "df"], "SCS_ClassReference": [null, "textProvider", "value", "Long", null, "df", "e", null, "df", "ActionContext", null], "SCS_MethodInvocation": ["getClass", "getText", "matches", "valueOf", "getDateFormat", "parse", "getMessage", "getDateFormat", "format", "getContext", "getLocale"], "MN": ["getDateFormat", "convertFromString", "convertToString", "getLocale"], "PN": ["context", "values", "toClass", "context", "o"], "SCS_VariableDeclaration": ["String", "String", "long", "DateTime", "DateFormat", "Date", "DateFormat"], "SCS_MemberReference": ["pattern", "values", "numberFormat", "value", "longValue", "returned", "value", "o", "o", "date"], "CO": ["// return DateFormat.getDateInstance(DateFormat.SHORT,", "// ActionContext.getContext().getLocale());"], "CODE": "package fi.hut.soberit.agilefant.util;\n\nimport java.text.DateFormat;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.Locale;\nimport java.util.Map;\n\nimport org.apache.struts2.util.StrutsTypeConverter;\nimport org.joda.time.DateTime;\n\nimport com.opensymphony.xwork2.ActionContext;\nimport com.opensymphony.xwork2.LocaleProvider;\nimport com.opensymphony.xwork2.TextProvider;\nimport com.opensymphony.xwork2.TextProviderSupport;\nimport com.opensymphony.xwork2.conversion.TypeConversionException;\n\npublic class DateTimeConverter extends StrutsTypeConverter implements\nLocaleProvider {\n\n    private TextProvider textProvider = new TextProviderSupport(\n            this.getClass(), this);\n    \n    private static String numberFormat = \"^\\\\d+$\";\n\n    protected DateFormat getDateFormat() {\n        String pattern = textProvider.getText(\"struts.shortDateTime.format\");\n        return new SimpleDateFormat(pattern);\n        // return DateFormat.getDateInstance(DateFormat.SHORT,\n        // ActionContext.getContext().getLocale());\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public Object convertFromString(Map context, String[] values, Class toClass) {\n        String value = values[0];\n\n        if (value.matches(numberFormat)) {\n            long longValue = Long.valueOf(value);\n            DateTime returned = new DateTime(longValue);\n            return returned;\n        }\n        else {\n            DateFormat df = this.getDateFormat();\n            \n            try {\n                return new DateTime(df.parse(value));\n            } catch (ParseException e) {\n                throw new TypeConversionException(e.getMessage());\n            }\n        }\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public String convertToString(Map context, Object o) {\n        if (o == null) {\n            return null;\n        }\n\n        Date date = ((DateTime) o).toDate();\n\n        DateFormat df = this.getDateFormat();\n\n        return df.format(date);\n    }\n\n    public Locale getLocale() {\n        return ActionContext.getContext().getLocale();\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\util\\\\DateTimeUtils.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["DateTimeUtils"], "MN": ["roundToNearestMidnight"], "PN": ["date"], "SCS_MemberReference": ["date"], "SCS_ClassReference": ["date", null, null], "SCS_MethodInvocation": ["plusHours", "toDateMidnight", "toDateTime"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.util;\n\nimport org.joda.time.DateTime;\n\npublic class DateTimeUtils {\n\n    public static DateTime roundToNearestMidnight(DateTime date) {\n        if (date == null) return null;\n        return date.plusHours(12).toDateMidnight().toDateTime();\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\util\\\\DbConnectionInfo.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["DbConnectionInfo"], "AN": ["url", "hostname", "databaseName", "password", "username"], "SCS_VariableDeclarator": ["url", "hostname", "databaseName", "password", "username", "username", "password", "jdbc", "metaData", "databaseName", "url", "cleanURI", "uri", "hostname"], "MN": ["create", "doInConnection", "toString"], "PN": ["config", "dataSource", "con"], "SCS_VariableDeclaration": ["String", "String", "JdbcTemplate", "DatabaseMetaData", "String", "String", "String", "URI", "String"], "SCS_ClassReference": ["config", "config", "jdbc", "con", "con", "metaData", "url", "URI", "uri"], "SCS_MethodInvocation": ["getString", "getString", "execute", "getMetaData", "getCatalog", "getURL", "substring", "create", "getHost"], "SCS_MemberReference": ["dataSource", "cleanURI", "url", "hostname", "databaseName", "password", "username", "url", "url", "hostname", "hostname", "databaseName", "databaseName", "password", "password", "username", "username", "url", "hostname", "databaseName", "password", "username"], "SCS_ConstructorDeclaration": ["DbConnectionInfo"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.util;\n\nimport java.net.URI;\nimport java.sql.Connection;\nimport java.sql.DatabaseMetaData;\nimport java.sql.SQLException;\n\nimport javax.sql.DataSource;\n\nimport org.springframework.dao.DataAccessException;\nimport org.springframework.jdbc.core.ConnectionCallback;\nimport org.springframework.jdbc.core.JdbcTemplate;\n\nimport com.typesafe.config.Config;\n\npublic class DbConnectionInfo {\n    public final String url;\n    public final String hostname;\n    public final String databaseName;\n    public final String password;\n    public final String username;\n\n    public static DbConnectionInfo create(Config config, DataSource dataSource) {\n        final String username = config.getString(\"agilefant.database.username\");\n        final String password = config.getString(\"agilefant.database.password\");\n\n        JdbcTemplate jdbc = new JdbcTemplate(dataSource);\n        return jdbc.execute(new ConnectionCallback<DbConnectionInfo>() {\n            @Override\n            public DbConnectionInfo doInConnection(Connection con) throws SQLException, DataAccessException {\n                DatabaseMetaData metaData = con.getMetaData();\n\n                String databaseName = con.getCatalog();\n                String url = metaData.getURL();\n\n                String cleanURI = url.substring(5);\n                URI uri = URI.create(cleanURI);\n                String hostname = uri.getHost();\n\n                return new DbConnectionInfo(url, hostname, databaseName, password, username);\n            }\n        });\n    }\n\n    public DbConnectionInfo(String url, String hostname, String databaseName, String password, String username) {\n        this.url = url;\n        this.hostname = hostname;\n        this.databaseName = databaseName;\n        this.password = password;\n        this.username = username;\n    }\n\n    @Override\n    public String toString() {\n        return \"DbConnectionInfo [url=\" + url + \", hostname=\" + hostname + \", databaseName=\" + databaseName + \", password=\" + password + \", username=\"\n                + username + \"]\";\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\util\\\\EnumConverter.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["EnumConverter"], "MN": ["convertFromString", "convertToString"], "PN": ["context", "values", "toClass", "context", "o"], "SCS_ClassReference": ["Enum", "o"], "SCS_MethodInvocation": ["valueOf", "toString"], "SCS_MemberReference": ["toClass", "values", "o"], "CO": ["/**\n * Generic converter used to convert all enumerations.\n */"], "CODE": "package fi.hut.soberit.agilefant.util;\n\nimport java.util.Map;\n\nimport org.apache.struts2.util.StrutsTypeConverter;\n\n/**\n * Generic converter used to convert all enumerations.\n */\npublic class EnumConverter extends StrutsTypeConverter {\n\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public Object convertFromString(Map context, String[] values, Class toClass) {\n        return Enum.valueOf(toClass, values[0]);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public String convertToString(Map context, Object o) {\n        return (o == null) ? null : o.toString();\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\util\\\\ExactEstimateConverter.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["ExactEstimateConverter"], "MN": ["convertFromString", "convertToString"], "PN": ["context", "values", "toClass", "context", "o"], "SCS_MemberReference": ["values", "values", "o", "o", "o"], "SCS_ClassReference": [null, "ExactEstimateUtils", "ExactEstimateUtils", "o"], "SCS_MethodInvocation": ["length", "convertFromString", "convertToString", "toString"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.util;\n\nimport java.util.Map;\n\nimport org.apache.struts2.util.StrutsTypeConverter;\n\nimport fi.hut.soberit.agilefant.model.ExactEstimate;\n\npublic class ExactEstimateConverter extends StrutsTypeConverter {\n\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public Object convertFromString(Map context, String[] values, Class toClass) {\n        if (values[0].length() == 0) {\n            return null;\n        }\n        return ExactEstimateUtils.convertFromString(values[0]);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public String convertToString(Map context, Object o) {\n        if (o == null)\n            return null;\n        if (o instanceof ExactEstimate)\n            return ExactEstimateUtils.convertToString((ExactEstimate) o);\n        return o.toString();\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\util\\\\ExactEstimateUtils.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["ExactEstimateUtils"], "AN": ["parser"], "SCS_VariableDeclarator": ["parser"], "MN": ["convertToString", "convertToString", "convertFromString", "convertSignedFromString", "extractMajorUnits"], "PN": ["estimate", "estimate", "string", "string", "estimate"], "SCS_MemberReference": ["estimate", "estimate", "string", "string", "string", "string", "estimate"], "SCS_ClassReference": ["parser", "estimate", "parser", "estimate", "parser", "parser", "parser", "estimate"], "SCS_MethodInvocation": ["convertToString", "getMinorUnits", "convertToString", "getMinorUnits", "convertFromString", "convertSignedFromString", "toMajorUnits", "getMinorUnits"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.util;\n\nimport fi.hut.soberit.agilefant.model.ExactEstimate;\nimport fi.hut.soberit.agilefant.model.SignedExactEstimate;\n\npublic class ExactEstimateUtils {\n\n    private static MinorUnitsParser parser = new MinorUnitsParser(\"h\", \"min\", 60);\n    \n    public static String convertToString(ExactEstimate estimate) {\n        if (estimate == null) return \"\";\n        return parser.convertToString(estimate.getMinorUnits());\n    }\n    \n    public static String convertToString(SignedExactEstimate estimate) {\n        if (estimate == null) return \"\";\n        return parser.convertToString(estimate.getMinorUnits());\n    }\n\n    public static ExactEstimate convertFromString(String string) {\n        if (string == null) return new ExactEstimate();\n        return new ExactEstimate(parser.convertFromString(string));\n    }\n    \n    public static SignedExactEstimate convertSignedFromString(String string) {\n        if (string == null) return new SignedExactEstimate();\n        return new SignedExactEstimate(parser.convertSignedFromString(string));\n    }\n    \n    public static double extractMajorUnits(ExactEstimate estimate) {\n        if (estimate == null) return 0.0;\n        return parser.toMajorUnits(estimate.getMinorUnits());\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\util\\\\HourEntryHandlingChoice.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["HourEntryHandlingChoice"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.util;\n\npublic enum HourEntryHandlingChoice {\n    MOVE, DELETE\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\util\\\\MinorUnitsParser.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["MinorUnitsParser"], "AN": ["minorUnit", "majorUnit", "PARSER_PATTERN", "NUMERIC_PATTERN", "minorsPerMajor"], "SCS_VariableDeclarator": ["minorUnit", "majorUnit", "PARSER_PATTERN", "NUMERIC_PATTERN", "minorsPerMajor", "majors", "minors", "builder", "minors", "parsedMajors", "parsedMajorsDecimals", "parsedMinors", "isNegative", "numericMatcher", "matcher", "minors"], "SCS_ConstructorDeclaration": ["MinorUnitsParser"], "SCS_MemberReference": ["minorUnit", "minorUnit", "majorUnit", "majorUnit", "minorsPerMajor", "minorsPerMajor", "PARSER_PATTERN", "majorUnit", "minorUnit", "NUMERIC_PATTERN", "majorUnit", "minorsUnits", "minorsPerMajor", "minorsUnits", "minorsPerMajor", "majors", "majors", "majorUnit", "minors", "minors", "minorUnit", "string", "minors", "minors", "string", "string", "parsedMajors", "parsedMajorsDecimals", "parsedMinors", "string", "parsedMajors", "parsedMajorsDecimals", "parsedMinors", "e", "parsedMinors", "parsedMajors", "parsedMajorsDecimals", "isNegative", "parsedMajors", "parsedMajors", "parsedMajorsDecimals", "parsedMajorsDecimals", "parsedMinors", "parsedMinors", "parsedMinors", "parsedMajors", "minorsPerMajor", "minors", "minors", "parsedMajorsDecimals", "minorsPerMajor", "isNegative", "minors", "minors", "string", "string", "string", "minorUnits", "minorsPerMajor"], "SCS_ClassReference": ["Pattern", "Pattern", "builder", "builder", "builder", "builder", "builder", "builder", null, null, "NUMERIC_PATTERN", "numericMatcher", "", "numericMatcher", "", "numericMatcher", "PARSER_PATTERN", "matcher", "", "matcher", "", "matcher", "", "matcher", "Math", "Math", "Math", "string", "Double", "string", "string", "Integer"], "SCS_MethodInvocation": ["compile", "compile", "append", "append", "append", "append", "append", "toString", "convert", "convert", "matcher", "matches", "parseIntSafely", "group", "parseDoubleSafely", "group", "matcher", "matches", "parseIntSafely", "group", "parseDoubleSafely", "group", "parseIntSafely", "group", "abs", "abs", "abs", "length", "parseDouble", "replace", "length", "parseInt"], "MN": ["convertToString", "convertFromString", "convertSignedFromString", "convert", "parseDoubleSafely", "parseIntSafely", "toMajorUnits"], "PN": ["minorsUnits", "string", "string", "string", "string", "string", "minorUnits"], "SCS_VariableDeclaration": ["long", "long", "StringBuilder", "long", "int", "double", "int", "boolean", "Matcher", "Matcher", "long"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.util;\n\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class MinorUnitsParser {\n\n    private final String minorUnit;\n    private final String majorUnit;\n\n    private final Pattern PARSER_PATTERN;\n    private final Pattern NUMERIC_PATTERN;\n\n    private int minorsPerMajor;\n\n    public MinorUnitsParser(String majorUnit, String minorUnit,\n            int minorsPerMajor) {\n        this.minorUnit = minorUnit;\n        this.majorUnit = majorUnit;\n        this.minorsPerMajor = minorsPerMajor;\n        this.PARSER_PATTERN = Pattern.compile(\"\\\\s*((-?\\\\d+)([.,]\\\\d+)?\"\n                + majorUnit + \")?\\\\s*((-?\\\\d+)\" + minorUnit + \")?\\\\s*\");\n        \n        this.NUMERIC_PATTERN =\n            Pattern.compile(\"^\\\\s*(-?\\\\d+)([.,]\\\\d+)?(\" + majorUnit + \")?\\\\s*$\");\n    }\n\n    public String convertToString(long minorsUnits) {\n        long majors = minorsUnits / minorsPerMajor;\n        long minors = minorsUnits % minorsPerMajor;\n        StringBuilder builder = new StringBuilder();\n        if (majors > 0) {\n            builder.append(majors);\n            builder.append(majorUnit);\n            builder.append(' ');\n        }\n        if (minors > 0) {\n            builder.append(minors);\n            builder.append(minorUnit);\n        }\n        return builder.toString();\n    }\n\n    public long convertFromString(String string) {\n        long minors = this.convert(string);\n        if(minors < 0L) {\n            throw new IllegalArgumentException(\"Value can not be negative.\");\n        }\n        return minors;\n    }\n    \n    public long convertSignedFromString(String string) {\n        return this.convert(string);\n    }\n    private long convert(String string) {\n        int parsedMajors;\n        double parsedMajorsDecimals;\n        int parsedMinors;\n        boolean isNegative = false;\n        \n        Matcher numericMatcher = NUMERIC_PATTERN.matcher(string);\n        if (numericMatcher.matches()) {\n            parsedMajors = parseIntSafely(numericMatcher.group(1));\n            parsedMajorsDecimals = parseDoubleSafely(numericMatcher.group(2));\n            parsedMinors = 0;\n        }\n        else {\n            Matcher matcher = PARSER_PATTERN.matcher(string);\n            try {\n                matcher.matches();\n                parsedMajors = parseIntSafely(matcher.group(2));\n                parsedMajorsDecimals = parseDoubleSafely(matcher.group(3));\n                parsedMinors = parseIntSafely(matcher.group(5));\n            } catch (Exception e) {\n                throw new IllegalArgumentException(\"Invalid input\", e);\n            }\n        }\n\n        if(parsedMinors < 0 || parsedMajors < 0 || parsedMajorsDecimals < 0) {\n            isNegative = true;\n            parsedMajors = Math.abs(parsedMajors);\n            parsedMajorsDecimals = Math.abs(parsedMajorsDecimals);\n            parsedMinors = Math.abs(parsedMinors);\n        }\n        \n        long minors = parsedMinors + parsedMajors * minorsPerMajor;\n        minors = minors + (long) (parsedMajorsDecimals * minorsPerMajor);\n        if(isNegative) {\n            minors *= -1L;\n        }\n        return minors;\n    }\n\n    private static double parseDoubleSafely(String string) {\n        if (string == null || string.length() == 0)\n            return 0.0;\n        return Double.parseDouble(string.replace(',', '.'));\n    }\n\n    private static int parseIntSafely(String string) {\n        if (string == null || string.length() == 0)\n            return 0;\n        return Integer.parseInt(string);\n    }\n    \n    public double toMajorUnits(long minorUnits) {\n        return (double)minorUnits / (double)minorsPerMajor;\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\util\\\\MyAssignmentsMenuBuilder.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["MyAssignmentsMenuBuilder"], "AN": ["nodes", "projectIds", "standaloneIds", "iterationIds"], "SCS_VariableDeclarator": ["nodes", "projectIds", "standaloneIds", "iterationIds", "node", "node", "nodePos", "standalone", "standaloneId", "oldPos", "nodePos", "currentIndex", "node", "currentIndex", "projectIndex", "projectNode", "projectNode", "node", "currentIndex", "node", "iterationNode", "node"], "MN": ["constructNode", "constructNode", "insertNode", "insertNode", "ensureNode", "ensureNode", "insert", "insert", "insert", "getNodes"], "PN": ["backlog", "story", "project", "node", "iteration", "node", "parentNode", "project", "iteration", "iteration", "project", "story"], "SCS_VariableDeclaration": ["MenuDataNode", "MenuDataNode", "Integer", "Map", "Integer", "Integer", "Integer", "Integer", "MenuDataNode", "Integer", "Integer", "MenuDataNode", "MenuDataNode", "MenuDataNode", "Integer", "MenuDataNode", "MenuDataNode", "MenuDataNode"], "SCS_ClassReference": ["node", "backlog", "node", "backlog", "node", "story", null, "node", "story", "projectIds", "projectIds", "project", "nodes", "standaloneIds", "standalone", "standalone", "standaloneIds", "iteration", "nodes", "standaloneIds", "iteration", "nodes", "iterationIds", "iteration", "parentNode", null, "parentNode", null, "projectIds", "project", "nodes", "", "node", "", "iteration", "iterationIds", "iteration", "projectIds", "iteration", null, "nodes", "projectNode", null, "", "iteration", "", "", "standaloneIds", "iteration", "nodes", "", "node", "", "", "", "", "story", "", "iterationNode", null], "SCS_MethodInvocation": ["setId", "getId", "setTitle", "getName", "setId", "getIteration", "getId", "setTitle", "getName", "size", "put", "getId", "add", "entrySet", "getKey", "getValue", "put", "getParent", "size", "put", "getId", "add", "put", "getId", "getChildren", "size", "getChildren", "add", "get", "getId", "get", "constructNode", "setExpand", "insertNode", "getParent", "get", "getId", "get", "getParent", "getId", "get", "getChildren", "get", "ensureNode", "getParent", "constructNode", "insertNode", "get", "getId", "get", "constructNode", "setExpand", "insertNode", "ensureNode", "ensureNode", "ensureNode", "getIteration", "constructNode", "getChildren", "add"], "SCS_MemberReference": ["node", "node", "nodePos", "nodePos", "node", "standaloneId", "oldPos", "nodePos", "nodePos", "node", "node", "currentIndex", "currentIndex", "project", "project", "node", "node", "currentIndex", "projectIndex", "currentIndex", "iteration", "iteration", "node", "projectNode", "node", "currentIndex", "currentIndex", "iteration", "iteration", "node", "node", "iteration", "project", "story", "node", "nodes"], "CO": ["// adds project node to list", "// add to projectIds (ID of project, location of node in list)", "// update position of standalone iterations", "// adds iteration node to list", "// standalone iteration", "// add to standaloneIds (ID of iteration, location of node in list)", "// non-standalone", "// add to iterationIds (ID of iteration, location of node under its parent (e.g. fifth child, first child))", "// returns node if it exists, creates it if doesn't", "// returns node if it exists, creates it if doesn't", "// non-standalone iteration", "// check to see if node exists.", "// if node doesn't exist, create it.", "// standalone iteration", "// check to see if node exists", "// if node doesn't exist, create it."], "CODE": "package fi.hut.soberit.agilefant.util;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport fi.hut.soberit.agilefant.model.Backlog;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.Project;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.transfer.MenuDataNode;\n\npublic class MyAssignmentsMenuBuilder {\n\n    private List<MenuDataNode> nodes = new ArrayList<MenuDataNode>();\n    \n    private Map<Integer, Integer> projectIds = new HashMap<Integer, Integer>();\n    private Map<Integer, Integer> standaloneIds = new HashMap<Integer, Integer>();\n    \n    private Map<Integer, Integer> iterationIds = new HashMap<Integer, Integer>();\n    \n    private MenuDataNode constructNode(Backlog backlog) {\n        MenuDataNode node = new MenuDataNode();\n        node.setId(backlog.getId());\n        node.setTitle(backlog.getName());\n        return node;\n    }\n    \n    private MenuDataNode constructNode(Story story) {\n        MenuDataNode node = new MenuDataNode();\n        node.setId(story.getIteration().getId());\n        node.setTitle(story.getName());\n        return node;\n    }\n    \n    private void insertNode(Project project, MenuDataNode node) { // adds project node to list\n        Integer nodePos = projectIds.size();\n        // add to projectIds (ID of project, location of node in list)\n        projectIds.put(project.getId(), nodePos);\n        nodes.add(nodePos, node);\n        \n        // update position of standalone iterations\n        for (Map.Entry<Integer, Integer> standalone : standaloneIds.entrySet()) {\n            Integer standaloneId = standalone.getKey();\n            Integer oldPos = standalone.getValue();\n            standaloneIds.put(standaloneId, oldPos + 1);\n        }\n    }\n    \n    private void insertNode(Iteration iteration, MenuDataNode node, MenuDataNode parentNode) { // adds iteration node to list\n        if (iteration.getParent() == null) { // standalone iteration\n            Integer nodePos = nodes.size();\n            // add to standaloneIds (ID of iteration, location of node in list)\n            standaloneIds.put(iteration.getId(), nodePos);\n            nodes.add(nodePos, node);\n        } else { // non-standalone\n            // add to iterationIds (ID of iteration, location of node under its parent (e.g. fifth child, first child))\n            iterationIds.put(iteration.getId(), parentNode.getChildren().size());\n            parentNode.getChildren().add(node);\n        }\n    }\n    \n    private MenuDataNode ensureNode(Project project) { // returns node if it exists, creates it if doesn't\n        Integer currentIndex = projectIds.get(project.getId());\n        if (currentIndex != null) {\n            return nodes.get(currentIndex);\n        }\n        MenuDataNode node = constructNode(project);\n        node.setExpand(true);\n        insertNode(project, node);\n        return node;\n    }\n    \n    private MenuDataNode ensureNode(Iteration iteration) { // returns node if it exists, creates it if doesn't\n        if (iteration.getParent() != null){ // non-standalone iteration\n            // check to see if node exists.\n            Integer currentIndex = iterationIds.get(iteration.getId());\n            if (currentIndex != null) {\n                Integer projectIndex = projectIds.get(iteration.getParent().getId());\n                MenuDataNode projectNode = nodes.get(projectIndex);\n                return projectNode.getChildren().get(currentIndex);\n            }\n            \n            // if node doesn't exist, create it.\n            MenuDataNode projectNode = ensureNode((Project) iteration.getParent());\n            MenuDataNode node = constructNode(iteration);\n            insertNode(iteration, node, projectNode);\n            return node;\n        } else {\n            // standalone iteration\n            // check to see if node exists\n            Integer currentIndex = standaloneIds.get(iteration.getId());\n            if (currentIndex != null) {\n                return nodes.get(currentIndex);\n            }\n            \n            // if node doesn't exist, create it.\n            MenuDataNode node = constructNode(iteration);\n            node.setExpand(true);\n            insertNode(iteration, node, null);\n            return node;\n        }        \n    }\n    \n    public void insert(Iteration iteration) {\n        ensureNode(iteration);\n    }\n    \n    public void insert(Project project) {\n        ensureNode(project);\n    }\n    \n    public void insert(Story story) {\n        MenuDataNode iterationNode = ensureNode(story.getIteration());\n        MenuDataNode node = constructNode(story);\n        iterationNode.getChildren().add(node);\n    }\n    \n    public List<MenuDataNode> getNodes() {\n        return nodes;\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\util\\\\NamedObjectComparator.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["NamedObjectComparator"], "MN": ["compare"], "PN": ["arg0", "arg1"], "SCS_MemberReference": ["arg0", "arg1", "arg0", "arg1"], "SCS_ClassReference": ["arg0", null, "arg1"], "SCS_MethodInvocation": ["getName", "compareTo", "getName"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.util;\n\nimport java.util.Comparator;\n\nimport fi.hut.soberit.agilefant.model.NamedObject;\n\npublic class NamedObjectComparator implements Comparator<NamedObject> {\n    \n    public int compare(NamedObject arg0, NamedObject arg1) {\n        if(arg0 == null && arg1 == null) {\n            return 0;\n        }\n        if(arg0 == null) {\n            return -1;\n        }\n        if(arg1 == null) {\n            return 1;\n        }\n        return arg0.getName().compareTo(arg1.getName());\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\util\\\\OnlyDateConverter.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["OnlyDateConverter"], "AN": ["textProvider"], "SCS_VariableDeclarator": ["textProvider", "value", "df", "date", "df", "pattern"], "SCS_ClassReference": [null, "ActionContext", null, null, "df", "e", null, "df", "textProvider"], "SCS_MethodInvocation": ["getClass", "getContext", "getLocale", "getDateFormat", "parse", "getMessage", "getDateFormat", "format", "getText"], "MN": ["getLocale", "convertFromString", "convertToString", "getDateFormat"], "PN": ["context", "values", "toClass", "context", "o"], "SCS_VariableDeclaration": ["String", "DateFormat", "Date", "DateFormat", "String"], "SCS_MemberReference": ["values", "value", "o", "o", "date", "pattern"], "CO": ["/**\n * Converts dates. Uses Struts' i18n and key struts.date.format for finding\n * pattern. This allows different patterns to be used for different locales.\n */", "// return DateFormat.getDateInstance(DateFormat.SHORT,", "// ActionContext.getContext().getLocale());"], "CODE": "package fi.hut.soberit.agilefant.util;\n\nimport java.text.DateFormat;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.Locale;\nimport java.util.Map;\n\nimport org.apache.struts2.util.StrutsTypeConverter;\n\nimport com.opensymphony.xwork2.ActionContext;\nimport com.opensymphony.xwork2.LocaleProvider;\nimport com.opensymphony.xwork2.TextProvider;\nimport com.opensymphony.xwork2.TextProviderSupport;\nimport com.opensymphony.xwork2.conversion.TypeConversionException;\n\n/**\n * Converts dates. Uses Struts' i18n and key struts.date.format for finding\n * pattern. This allows different patterns to be used for different locales.\n */\npublic class OnlyDateConverter extends StrutsTypeConverter implements\n        LocaleProvider {\n\n    private TextProvider textProvider = new TextProviderSupport(\n            this.getClass(), this);\n\n    public Locale getLocale() {\n        return ActionContext.getContext().getLocale();\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public Object convertFromString(Map context, String[] values, Class toClass) {\n        String value = values[0];\n\n        DateFormat df = this.getDateFormat();\n\n        try {\n            return df.parse(value);\n        } catch (ParseException e) {\n            throw new TypeConversionException(e.getMessage());\n        }\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public String convertToString(Map context, Object o) {\n        if (o == null) {\n            return null;\n        }\n\n        Date date = (Date) o;\n\n        DateFormat df = this.getDateFormat();\n\n        return df.format(date);\n    }\n\n    protected DateFormat getDateFormat() {\n        String pattern = textProvider.getText(\"struts.date.format\");\n        return new SimpleDateFormat(pattern);\n        // return DateFormat.getDateInstance(DateFormat.SHORT,\n        // ActionContext.getContext().getLocale());\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\util\\\\package-info.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": [], "CO": ["/**\n * This package contains miscellaneous utility classes. \n */"], "CODE": "/**\n * This package contains miscellaneous utility classes. \n */\npackage fi.hut.soberit.agilefant.util;", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\util\\\\Pair.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["Pair"], "AN": ["EMPTY", "first", "second"], "SCS_VariableDeclarator": ["EMPTY", "first", "second", "prime", "result", "other", "builder"], "SCS_ClassReference": ["", "first", "second", "first", "second", "builder", "builder", "builder", "first", "builder", "builder", "builder", "second", "builder", "builder"], "SCS_MethodInvocation": ["create", "hashCode", "hashCode", "equals", "equals", "append", "append", "append", "toString", "append", "append", "append", "toString", "append", "toString"], "SCS_ConstructorDeclaration": ["Pair"], "SCS_MemberReference": ["first", "first", "second", "second", "first", "second", "result", "prime", "result", "first", "result", "prime", "result", "second", "result", "obj", "obj", "obj", "obj", "first", "first", "first", "second", "second", "second", "first", "second", "first", "second"], "MN": ["getFirst", "getSecond", "hashCode", "equals", "toString", "create"], "PN": ["obj", "first", "second"], "SCS_VariableDeclaration": ["int", "int", "Pair", "StringBuilder"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.util;\n\npublic class Pair<First, Second> {\n\n    public static final Pair<?, ?> EMPTY = create(null, null);\n\n    public final First first;\n\n    public final Second second;\n\n    public Pair(First first, Second second) {\n        this.first = first;\n        this.second = second;\n    }\n\n    public First getFirst() {\n        return first;\n    }\n\n    public Second getSecond() {\n        return second;\n    }\n\n    @Override\n    public int hashCode() {\n        final int prime = 31;\n        int result = 1;\n        result = prime * result + ((first == null) ? 0 : first.hashCode());\n        result = prime * result + ((second == null) ? 0 : second.hashCode());\n        return result;\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj)\n            return true;\n        if (obj == null)\n            return false;\n        if (!(obj instanceof Pair<?, ?>))\n            return false;\n        Pair<?, ?> other = (Pair<?, ?>) obj;\n        if (first == null) {\n            if (other.first != null)\n                return false;\n        } else if (!first.equals(other.first))\n            return false;\n        if (second == null) {\n            if (other.second != null)\n                return false;\n        } else if (!second.equals(other.second))\n            return false;\n        return true;\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder builder = new StringBuilder();\n        builder.append(\"{[\");\n        if (first == null) {\n            builder.append(\"null\");\n        } else {\n            builder.append(first.toString());\n        }\n        builder.append(\"], [\");\n        if (second == null) {\n            builder.append(\"null\");\n        } else {\n            builder.append(second.toString());\n        }\n        builder.append(\"]}\");\n        return builder.toString();\n    }\n\n    public static <First, Second> Pair<First, Second> create(First first,\n            Second second) {\n        return new Pair<First, Second>(first, second);\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\util\\\\ProjectBurnupData.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["ProjectBurnupData", "Entry"], "AN": ["entries", "doneSum", "estimateSum", "branchMax", "timestamp"], "SCS_VariableDeclarator": ["entries", "doneSum", "estimateSum", "branchMax", "timestamp", "builder", "entries", "rawEntry"], "SCS_ConstructorDeclaration": ["ProjectBurnupData", "Entry"], "SCS_MemberReference": ["entries", "entries", "timestamp", "timestamp", "estimateSum", "estimateSum", "branchMax", "branchMax", "doneSum", "doneSum", "estimateSum", "doneSum", "branchMax", "entries", "rawData", "rawEntry", "rawEntry", "rawEntry", "rawEntry", "entries"], "MN": ["toString", "iterator", "createFromRawData"], "PN": ["rawData"], "SCS_VariableDeclaration": ["StringBuilder", "List", "Object"], "SCS_ClassReference": ["builder", "builder", "timestamp", "builder", "builder", "builder", "builder", "builder", "builder", "builder", "builder", "Collections", null, "rawData", "entries"], "SCS_MethodInvocation": ["append", "append", "toString", "append", "append", "append", "append", "append", "append", "append", "toString", "unmodifiableList", "iterator", "size", "add"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.util;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.List;\n\nimport org.joda.time.DateTime;\n\npublic class ProjectBurnupData implements Iterable<ProjectBurnupData.Entry> {\n\n    private final List<ProjectBurnupData.Entry> entries;\n\n    public ProjectBurnupData(List<ProjectBurnupData.Entry> entries) {\n        this.entries = entries;\n    }\n\n    public static class Entry {\n\n        public final long doneSum;\n        public final long estimateSum;\n        public final long branchMax;\n        public final DateTime timestamp;\n\n        public Entry(DateTime timestamp, long estimateSum, long doneSum, long branchMax) {\n            this.timestamp = timestamp;\n            this.estimateSum = estimateSum;\n            this.branchMax = branchMax;\n            this.doneSum = doneSum;\n        }\n\n        @Override\n        public String toString() {\n            StringBuilder builder = new StringBuilder();\n            builder.append('[');\n            builder.append(timestamp.toString());\n            builder.append(\"]: \");\n            builder.append(estimateSum);\n            builder.append(\" planned, \");\n            builder.append(doneSum);\n            builder.append(\" done, \");\n            builder.append(branchMax);\n            builder.append(\" done.\");\n            return builder.toString();\n        }\n\n    }\n\n    public Iterator<Entry> iterator() {\n        return Collections.unmodifiableList(entries).iterator();\n    }\n\n    public static ProjectBurnupData createFromRawData(List<Object[]> rawData) {\n        List<ProjectBurnupData.Entry> entries = new ArrayList<ProjectBurnupData.Entry>(\n                rawData.size());\n        for (Object[] rawEntry : rawData) {\n            entries.add(new Entry((DateTime) rawEntry[0],\n                    (Long) rawEntry[1], (Long) rawEntry[2], (Long) rawEntry[3]));\n        }\n        return new ProjectBurnupData(entries);\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\util\\\\SignedExactEstimateConverter.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["SignedExactEstimateConverter"], "MN": ["convertFromString", "convertToString"], "PN": ["context", "values", "toClass", "context", "o"], "SCS_MemberReference": ["values", "values", "o", "o", "o"], "SCS_ClassReference": [null, "ExactEstimateUtils", "ExactEstimateUtils", "o"], "SCS_MethodInvocation": ["length", "convertSignedFromString", "convertToString", "toString"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.util;\n\nimport java.util.Map;\n\nimport org.apache.struts2.util.StrutsTypeConverter;\n\nimport fi.hut.soberit.agilefant.model.SignedExactEstimate;\n\npublic class SignedExactEstimateConverter extends StrutsTypeConverter {\n\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public Object convertFromString(Map context, String[] values, Class toClass) {\n        if (values[0].length() == 0) {\n            return null;\n        }\n        return ExactEstimateUtils.convertSignedFromString(values[0]);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public String convertToString(Map context, Object o) {\n        if (o == null)\n            return null;\n        if (o instanceof SignedExactEstimate)\n            return ExactEstimateUtils.convertToString((SignedExactEstimate) o);\n        return o.toString();\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\util\\\\StoryComparator.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["StoryComparator"], "MN": ["compare"], "PN": ["story1", "story2"], "SCS_MemberReference": ["story1", "story2", "DONE", "DONE", "DONE", "DONE"], "SCS_ClassReference": ["story1", "story2", "story1", "story2", "story1", null, "story2"], "SCS_MethodInvocation": ["getState", "getState", "getState", "getState", "getName", "compareTo", "getName"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.util;\n\nimport java.util.Comparator;\n\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.StoryState;\n\npublic class StoryComparator implements Comparator<Story> {\n\n    public int compare(Story story1, Story story2) {\n        if (story1 == null) {\n            return -1;\n        }\n        if (story2 == null) {\n            return 1;\n        }\n\n        if (story1.getState() == StoryState.DONE\n                && story2.getState() != StoryState.DONE) {\n            return 1;\n        } else if (story1.getState() != StoryState.DONE\n                && story2.getState() == StoryState.DONE) {\n            return -1;\n        } else {\n            return story1.getName().compareTo(story2.getName());\n        }\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\util\\\\StoryFilters.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["StoryFilters"], "AN": ["states", "name"], "SCS_VariableDeclarator": ["states", "name", "prime", "result", "other"], "SCS_ConstructorDeclaration": ["StoryFilters", "StoryFilters"], "SCS_MemberReference": ["name", "states", "name", "name", "states", "states", "result", "prime", "result", "name", "result", "prime", "result", "states", "result", "obj", "obj", "obj", "name", "name", "name", "states", "states", "states"], "MN": ["hashCode", "equals"], "PN": ["obj"], "SCS_VariableDeclaration": ["int", "int", "StoryFilters"], "SCS_ClassReference": ["name", "states", "", "obj", "name", "states"], "SCS_MethodInvocation": ["hashCode", "hashCode", "getClass", "getClass", "equals", "equals"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.util;\n\nimport java.util.HashSet;\nimport java.util.Set;\n\nimport fi.hut.soberit.agilefant.model.StoryState;\n\npublic class StoryFilters {\n\n    public final Set<StoryState> states;\n    public final String name;\n\n    public StoryFilters() {\n        this.name = null;\n        this.states = new HashSet<StoryState>();\n    }\n    \n    public StoryFilters(String name, Set<StoryState> states) {\n        this.name = name;\n        this.states = states;\n    }\n\n    @Override\n    public int hashCode() {\n        final int prime = 31;\n        int result = 1;\n        result = prime * result + ((name == null) ? 0 : name.hashCode());\n        result = prime * result + ((states == null) ? 0 : states.hashCode());\n        return result;\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj)\n            return true;\n        if (obj == null)\n            return false;\n        if (getClass() != obj.getClass())\n            return false;\n        StoryFilters other = (StoryFilters) obj;\n        if (name == null) {\n            if (other.name != null)\n                return false;\n        } else if (!name.equals(other.name))\n            return false;\n        if (states == null) {\n            if (other.states != null)\n                return false;\n        } else if (!states.equals(other.states))\n            return false;\n        return true;\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\util\\\\StoryHierarchyIntegrityViolationType.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["StoryHierarchyIntegrityViolationType"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.util;\n\npublic enum StoryHierarchyIntegrityViolationType {\n    CHILD_IN_WRONG_BRANCH, MOVE_TO_ITERATION_HAS_CHILDREN, PARENT_DEEPER_IN_HIERARCHY, \n    PARENT_IN_WRONG_BRANCH, TARGET_PARENT_IN_WRONG_BRANCH, PARENT_IN_WRONG_PRODUCT,\n    TARGET_PARENT_DEEPER_IN_HIERARCHY, \n    TARGET_PARENT_IN_ITERATION\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\util\\\\StoryMetrics.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["StoryMetrics"], "AN": ["effortLeft", "effortSpent", "originalEstimate"], "SCS_VariableDeclarator": ["effortLeft", "effortSpent", "originalEstimate"], "MN": ["getEffortLeft", "setEffortLeft", "getEffortSpent", "setEffortSpent", "getOriginalEstimate", "setOriginalEstimate"], "PN": ["effortLeft", "effortSpent", "originalEstimate"], "SCS_MemberReference": ["effortLeft", "effortLeft", "effortLeft", "effortSpent", "effortSpent", "effortSpent", "originalEstimate", "originalEstimate", "originalEstimate"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.util;\n\npublic class StoryMetrics {\n\n    private long effortLeft;\n    private long effortSpent;\n    private long originalEstimate;\n\n    public long getEffortLeft() {\n        return effortLeft;\n    }\n\n    public void setEffortLeft(long effortLeft) {\n        this.effortLeft = effortLeft;\n    }\n\n    public long getEffortSpent() {\n        return effortSpent;\n    }\n\n    public void setEffortSpent(long effortSpent) {\n        this.effortSpent = effortSpent;\n    }\n\n    public long getOriginalEstimate() {\n        return originalEstimate;\n    }\n\n    public void setOriginalEstimate(long originalEstimate) {\n        this.originalEstimate = originalEstimate;\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\util\\\\StoryTreeIntegrityMessage.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["StoryTreeIntegrityMessage"], "AN": ["source", "target", "message"], "SCS_VariableDeclarator": ["source", "target", "message"], "SCS_ConstructorDeclaration": ["StoryTreeIntegrityMessage"], "SCS_MemberReference": ["source", "source", "target", "target", "message", "message", "message", "source", "message", "target"], "MN": ["getMessageName", "getSource", "getMessage", "getTarget"], "PN": [], "SCS_ClassReference": ["StoryTreeIntegrityUtils"], "SCS_MethodInvocation": ["StoryHierarchyViolationToI18n"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.util;\n\nimport fi.hut.soberit.agilefant.model.Story;\n\npublic class StoryTreeIntegrityMessage {\n\n    private Story source;\n    private Story target;\n    private StoryHierarchyIntegrityViolationType message;\n\n    public StoryTreeIntegrityMessage(Story source, Story target,\n            StoryHierarchyIntegrityViolationType message) {\n        this.source = source;\n        this.target = target;\n        this.message = message;\n    }\n\n    public String getMessageName() {\n        return StoryTreeIntegrityUtils.StoryHierarchyViolationToI18n(message);\n    }\n    \n    public Story getSource() {\n        return source;\n    }\n\n    public StoryHierarchyIntegrityViolationType getMessage() {\n        return message;\n    }\n\n    public Story getTarget() {\n        return target;\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\util\\\\StoryTreeIntegrityUtils.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["StoryTreeIntegrityUtils"], "AN": ["violationEnumToString", "fatalViolations"], "SCS_VariableDeclarator": ["violationEnumToString", "fatalViolations", "i18n", "fatals", "stim"], "SCS_ClassReference": ["", "Collections", "Arrays", "i18n", "i18n", "i18n", "i18n", "i18n", "i18n", "i18n", "i18n", "Collections", "StoryTreeIntegrityUtils.violationEnumToString", "StoryTreeIntegrityUtils.fatalViolations", "StoryTreeIntegrityUtils", "stim", "fatals", "fatals", "messages", "messages"], "SCS_MethodInvocation": ["initMap", "unmodifiableSet", "asList", "put", "put", "put", "put", "put", "put", "put", "put", "unmodifiableMap", "get", "contains", "isFatalViolation", "getMessage", "add", "size", "clear", "addAll"], "SCS_MemberReference": ["TARGET_PARENT_IN_ITERATION", "MOVE_TO_ITERATION_HAS_CHILDREN", "TARGET_PARENT_DEEPER_IN_HIERARCHY", "TARGET_PARENT_IN_ITERATION", "CHILD_IN_WRONG_BRANCH", "MOVE_TO_ITERATION_HAS_CHILDREN", "PARENT_DEEPER_IN_HIERARCHY", "PARENT_IN_WRONG_BRANCH", "PARENT_IN_WRONG_PRODUCT", "TARGET_PARENT_DEEPER_IN_HIERARCHY", "TARGET_PARENT_IN_ITERATION", "TARGET_PARENT_IN_WRONG_BRANCH", "i18n", "violation", "violation", "messages", "stim", "fatals"], "MN": ["initMap", "StoryHierarchyViolationToI18n", "isFatalViolation", "getFatalMessages"], "PN": ["violation", "violation", "messages"], "SCS_VariableDeclaration": ["Map", "List", "StoryTreeIntegrityMessage"], "CO": ["/**\n     * Get the fatal messages according to StoryTreeIntegrityUtils.fatalViolations.\n     * <p>\n     * Will overwrite the messages if fatals exist.\n     * @param messages list of integrity messages\n     * @return True, if fatals are found. False otherwise.\n     */"], "CODE": "package fi.hut.soberit.agilefant.util;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\npublic class StoryTreeIntegrityUtils {\n    private static Map<StoryHierarchyIntegrityViolationType, String> violationEnumToString = initMap();\n    \n    private static Set<StoryHierarchyIntegrityViolationType> fatalViolations = Collections\n            .unmodifiableSet(new HashSet<StoryHierarchyIntegrityViolationType>(\n                    Arrays.asList(StoryHierarchyIntegrityViolationType.TARGET_PARENT_IN_ITERATION,\n                            StoryHierarchyIntegrityViolationType.MOVE_TO_ITERATION_HAS_CHILDREN,\n                            StoryHierarchyIntegrityViolationType.TARGET_PARENT_DEEPER_IN_HIERARCHY,\n                            StoryHierarchyIntegrityViolationType.TARGET_PARENT_IN_ITERATION)));\n    \n    private static Map<StoryHierarchyIntegrityViolationType, String> initMap() {\n        Map<StoryHierarchyIntegrityViolationType, String> i18n = new HashMap<StoryHierarchyIntegrityViolationType, String>();\n        i18n.put(StoryHierarchyIntegrityViolationType.CHILD_IN_WRONG_BRANCH, \"story.constraint.childInWrongBranch\");\n        i18n.put(StoryHierarchyIntegrityViolationType.MOVE_TO_ITERATION_HAS_CHILDREN, \"story.constraint.moveToIterationHasChildren\");\n        i18n.put(StoryHierarchyIntegrityViolationType.PARENT_DEEPER_IN_HIERARCHY, \"story.constraint.parentDeeperInHierarchy\");\n        i18n.put(StoryHierarchyIntegrityViolationType.PARENT_IN_WRONG_BRANCH, \"story.constraint.parentInWrongBranch\");\n        i18n.put(StoryHierarchyIntegrityViolationType.PARENT_IN_WRONG_PRODUCT, \"story.constraint.parentInWrongProduct\");\n        i18n.put(StoryHierarchyIntegrityViolationType.TARGET_PARENT_DEEPER_IN_HIERARCHY, \"story.constraint.targetParentDeeperInHierarchy\");\n        i18n.put(StoryHierarchyIntegrityViolationType.TARGET_PARENT_IN_ITERATION, \"story.constraint.targetParentInIteration\");\n        i18n.put(StoryHierarchyIntegrityViolationType.TARGET_PARENT_IN_WRONG_BRANCH, \"story.constraint.targetParentInWrongBranch\");\n        \n        return Collections.unmodifiableMap(i18n);\n    }\n    \n    public static String StoryHierarchyViolationToI18n(StoryHierarchyIntegrityViolationType violation) {\n        return StoryTreeIntegrityUtils.violationEnumToString.get(violation);\n    }\n    \n    public static boolean isFatalViolation(StoryHierarchyIntegrityViolationType violation) {\n        return StoryTreeIntegrityUtils.fatalViolations.contains(violation);\n    }\n    \n    /**\n     * Get the fatal messages according to StoryTreeIntegrityUtils.fatalViolations.\n     * <p>\n     * Will overwrite the messages if fatals exist.\n     * @param messages list of integrity messages\n     * @return True, if fatals are found. False otherwise.\n     */\n    public static boolean getFatalMessages(List<StoryTreeIntegrityMessage> messages) {\n        List<StoryTreeIntegrityMessage> fatals = new ArrayList<StoryTreeIntegrityMessage>();\n        for (StoryTreeIntegrityMessage stim : messages) {\n            if (StoryTreeIntegrityUtils.isFatalViolation(stim.getMessage())) {\n                fatals.add(stim);\n            }\n        }\n        if (fatals.size() > 0) {\n            messages.clear();\n            messages.addAll(fatals);\n            return true;\n        }\n        return false;\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\util\\\\TaskHandlingChoice.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["TaskHandlingChoice"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.util;\n\npublic enum TaskHandlingChoice {\n    MOVE, DELETE\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\util\\\\TimesheetData.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["TimesheetData"], "AN": ["backlogNodes", "storyNodes", "taskNode"], "SCS_VariableDeclarator": ["backlogNodes", "storyNodes", "taskNode", "backlogId", "node", "storyId", "node", "taskId", "node"], "SCS_ConstructorDeclaration": ["TimesheetData"], "SCS_MemberReference": ["backlogNodes", "storyNodes", "taskNode", "backlogNodes", "backlogId", "backlogNodes", "backlogId", "node", "backlogNodes", "backlogId", "entry", "storyNodes", "storyId", "storyNodes", "storyId", "node", "storyNodes", "storyId", "entry", "taskNode", "taskId", "taskNode", "taskId", "node", "taskNode", "taskId", "entry", "backlogNodes", "node", "storyNodes", "node", "taskNode", "node", "backlogNodes", "backlogId", "storyNodes", "storyId", "taskNode", "taskId", "backlogNodes", "storyNodes", "taskNode"], "MN": ["addEntry", "addEntry", "addEntry", "addNode", "addNode", "addNode", "getBacklogNode", "getStoryNode", "getTaskNode", "getBacklogNodes", "getStoryNodes", "getTaskNodes"], "PN": ["entry", "entry", "entry", "node", "node", "node", "backlogId", "storyId", "taskId"], "SCS_VariableDeclaration": ["int", "BacklogTimesheetNode", "int", "StoryTimesheetNode", "int", "TaskTimesheetNode"], "SCS_ClassReference": ["entry", null, null, "entry", null, null, null, "entry", null, null, "entry", null, null, null, "entry", null, null, "entry", null, null, null, null, "node", null, "node", null, "node", null, null, null, null, null, null], "SCS_MethodInvocation": ["getBacklog", "getId", "get", "getBacklog", "put", "get", "addHourEntry", "getStory", "getId", "get", "getStory", "put", "get", "addHourEntry", "getTask", "getId", "get", "getTask", "put", "get", "addHourEntry", "put", "getId", "put", "getId", "put", "getId", "get", "get", "get", "values", "values", "values"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.util;\n\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport fi.hut.soberit.agilefant.model.BacklogHourEntry;\nimport fi.hut.soberit.agilefant.model.StoryHourEntry;\nimport fi.hut.soberit.agilefant.model.TaskHourEntry;\nimport fi.hut.soberit.agilefant.transfer.BacklogTimesheetNode;\nimport fi.hut.soberit.agilefant.transfer.StoryTimesheetNode;\nimport fi.hut.soberit.agilefant.transfer.TaskTimesheetNode;\n\npublic class TimesheetData {\n    private Map<Integer, BacklogTimesheetNode> backlogNodes;\n    private Map<Integer, StoryTimesheetNode> storyNodes;\n    private Map<Integer, TaskTimesheetNode> taskNode;\n    \n    public TimesheetData() {\n        this.backlogNodes = new HashMap<Integer, BacklogTimesheetNode>();\n        this.storyNodes = new HashMap<Integer, StoryTimesheetNode>();\n        this.taskNode = new HashMap<Integer, TaskTimesheetNode>();\n    }\n\n    public void addEntry(BacklogHourEntry entry) {\n        int backlogId = entry.getBacklog().getId();\n        if(this.backlogNodes.get(backlogId) == null) {\n            BacklogTimesheetNode node = new BacklogTimesheetNode(entry.getBacklog());\n            this.backlogNodes.put(backlogId, node);\n        }\n        this.backlogNodes.get(backlogId).addHourEntry(entry);\n    }\n    public void addEntry(StoryHourEntry entry) {\n        int storyId = entry.getStory().getId();\n        if(this.storyNodes.get(storyId) == null) {\n            StoryTimesheetNode node = new StoryTimesheetNode(entry.getStory());\n            this.storyNodes.put(storyId, node);\n        }\n        this.storyNodes.get(storyId).addHourEntry(entry);\n\n    }\n    public void addEntry(TaskHourEntry entry) {\n        int taskId = entry.getTask().getId();\n        if(this.taskNode.get(taskId) == null) {\n            TaskTimesheetNode node = new TaskTimesheetNode(entry.getTask());\n            this.taskNode.put(taskId, node);\n        }\n        this.taskNode.get(taskId).addHourEntry(entry);\n    }\n    \n    public void addNode(BacklogTimesheetNode node) {\n        this.backlogNodes.put(node.getId(), node);\n    }\n    \n    public void addNode(StoryTimesheetNode node) {\n        this.storyNodes.put(node.getId(), node);\n    }\n    \n    public void addNode(TaskTimesheetNode node) {\n        this.taskNode.put(node.getId(), node);\n    }\n    public BacklogTimesheetNode getBacklogNode(int backlogId) {\n        return this.backlogNodes.get(backlogId);\n    }\n    public StoryTimesheetNode getStoryNode(int storyId) {\n        return this.storyNodes.get(storyId);\n    }\n    public TaskTimesheetNode getTaskNode(int taskId) {\n        return this.taskNode.get(taskId);\n    }\n    \n    public Collection<BacklogTimesheetNode> getBacklogNodes() {\n        return this.backlogNodes.values();\n    }\n    public Collection<StoryTimesheetNode> getStoryNodes() {\n        return this.storyNodes.values();\n    }\n    public Collection<TaskTimesheetNode> getTaskNodes() {\n        return this.taskNode.values();\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\util\\\\TimesheetExportRowData.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["TimesheetExportRowData"], "AN": ["entry", "story", "task", "iteration", "project", "product", "timeZone", "serverTimeZone"], "SCS_VariableDeclarator": ["entry", "story", "task", "iteration", "project", "product", "timeZone", "serverTimeZone"], "SCS_ClassReference": [null, "entry", null, null, null, null, null, null, null, null, "entry", "entry", null, null, null, "parent", "parent", "parent", null, "parent", null, null, null, null, "timeZone", null, "serverTimeZone", null, null], "SCS_MethodInvocation": ["getZone", "getTask", "getStory", "getStory", "getIteration", "setBacklogs", "getBacklog", "setBacklogs", "getIteration", "setBacklogs", "getBacklog", "getStory", "getIteration", "setBacklogs", "getBacklog", "isStandAlone", "getParent", "getParent", "getParent", "getParent", "getUser", "getDescription", "getDate", "plusMillis", "getOffset", "minusMillis", "getOffset", "getDate", "getMinutesSpent"], "SCS_ConstructorDeclaration": ["TimesheetExportRowData", "TimesheetExportRowData", "TimesheetExportRowData"], "SCS_MemberReference": ["entry", "entry", "task", "task", "story", "task", "iteration", "story", "story", "task", "entry", "entry", "entry", "entry", "story", "iteration", "story", "story", "parent", "iteration", "parent", "project", "product", "parent", "project", "parent", "product", "product", "parent", "entry", "entry", "timeZone", "entry", "entry", "timeZone", "timeZone", "timeZone", "entry", "task", "story", "iteration", "project", "product"], "MN": ["setBacklogs", "getUser", "getDescription", "getDate", "getTimeZone", "setTimeZone", "getEffort", "getTask", "getStory", "getIteration", "getProject", "getProduct"], "PN": ["parent", "timeZone"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.util;\n\nimport org.joda.time.DateTime;\nimport org.joda.time.DateTimeZone;\n\nimport fi.hut.soberit.agilefant.model.Backlog;\nimport fi.hut.soberit.agilefant.model.BacklogHourEntry;\nimport fi.hut.soberit.agilefant.model.HourEntry;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.Product;\nimport fi.hut.soberit.agilefant.model.Project;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.StoryHourEntry;\nimport fi.hut.soberit.agilefant.model.Task;\nimport fi.hut.soberit.agilefant.model.TaskHourEntry;\nimport fi.hut.soberit.agilefant.model.User;\n\npublic class TimesheetExportRowData {\n    private HourEntry entry;\n    private Story story = null;\n    private Task task = null;\n    private Iteration iteration = null;\n    private Project project = null;\n    private Product product = null;\n    private DateTimeZone timeZone;\n    private DateTimeZone serverTimeZone = new DateTime().getZone();\n    \n    public TimesheetExportRowData(TaskHourEntry entry) {\n        this.entry = entry;\n        this.task = entry.getTask();\n        if(this.task.getStory() != null) {\n            this.story = this.task.getStory();\n            this.iteration = this.story.getIteration();\n            this.setBacklogs(this.story.getBacklog());\n        } else {\n            this.setBacklogs(this.task.getIteration());\n        }\n    }\n    public TimesheetExportRowData(BacklogHourEntry entry) {\n        this.entry = entry;\n        this.setBacklogs(entry.getBacklog());\n    }\n    public TimesheetExportRowData(StoryHourEntry entry) {\n        this.entry = entry;\n        this.story = entry.getStory();\n        this.iteration = this.story.getIteration();\n        this.setBacklogs(this.story.getBacklog());\n    }\n    private void setBacklogs(Backlog parent) {\n        if(parent instanceof Iteration) {\n            this.iteration = (Iteration)parent;\n            if (parent.isStandAlone())\n                return;\n            this.project = (Project)parent.getParent();\n            this.product = (Product)parent.getParent().getParent();\n        } else if(parent instanceof Project) {\n            this.project = (Project)parent;\n            this.product = (Product)parent.getParent();\n        } else {\n            this.product = (Product)parent;\n        }\n    }\n    public User getUser() {\n        return this.entry.getUser();\n    }\n    public String getDescription() {\n        return this.entry.getDescription();\n    }\n    public DateTime getDate() {\n        if (timeZone != null) {\n            return this.entry.getDate().plusMillis(timeZone.getOffset(0)).minusMillis(serverTimeZone.getOffset(0));\n        } else {\n            return this.entry.getDate();\n        }\n    }\n    public DateTimeZone getTimeZone() {\n        return timeZone;\n    }\n    public void setTimeZone(DateTimeZone timeZone) {\n        this.timeZone = timeZone;\n    }\n    public long getEffort() {\n        return this.entry.getMinutesSpent();\n    }\n    public Task getTask() {\n        return this.task;\n    }\n    public Story getStory() {\n        return this.story;\n    }\n    public Iteration getIteration() {\n        return this.iteration;\n    }\n    public Project getProject() {\n        return this.project;\n    }\n    public Product getProduct() {\n        return this.product;\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\util\\\\TimesheetExportRowDataComparator.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["TimesheetExportRowDataComparator"], "AN": ["innerComparator"], "SCS_VariableDeclarator": ["innerComparator", "subCompare"], "SCS_ConstructorDeclaration": ["TimesheetExportRowDataComparator"], "SCS_MemberReference": ["innerComparator", "arg0", "arg1", "arg0", "arg1", "subCompare", "subCompare", "subCompare", "subCompare", "subCompare", "subCompare", "subCompare", "subCompare", "subCompare", "subCompare", "subCompare", "subCompare"], "MN": ["compare"], "PN": ["arg0", "arg1"], "SCS_VariableDeclaration": ["int"], "SCS_ClassReference": ["innerComparator", "arg0", "arg1", "innerComparator", "arg0", "arg1", "innerComparator", "arg0", "arg1", "innerComparator", "arg0", "arg1", "innerComparator", "arg0", "arg1"], "SCS_MethodInvocation": ["compare", "getProduct", "getProduct", "compare", "getProject", "getProject", "compare", "getIteration", "getIteration", "compare", "getStory", "getStory", "compare", "getTask", "getTask"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.util;\n\nimport java.util.Comparator;\n\npublic class TimesheetExportRowDataComparator implements Comparator<TimesheetExportRowData> {\n\n    private NamedObjectComparator innerComparator;\n    \n    public TimesheetExportRowDataComparator() {\n        innerComparator = new NamedObjectComparator();\n    }\n    public int compare(TimesheetExportRowData arg0, TimesheetExportRowData arg1) {\n        if(arg0 == null && arg1 == null) {\n            return 0;\n        }\n        if(arg0 == null) {\n            return -1;\n        }\n        if(arg1 == null) {\n            return 1;\n        }\n        int subCompare = 0;\n        subCompare = innerComparator.compare(arg0.getProduct(), arg1.getProduct());\n        if(subCompare != 0) {\n            return subCompare;\n        }\n        subCompare = innerComparator.compare(arg0.getProject(), arg1.getProject());\n        if(subCompare != 0) {\n            return subCompare;\n        }\n        subCompare = innerComparator.compare(arg0.getIteration(), arg1.getIteration());\n        if(subCompare != 0) {\n            return subCompare;\n        }\n        subCompare = innerComparator.compare(arg0.getStory(), arg1.getStory());\n        if(subCompare != 0) {\n            return subCompare;\n        }\n        return innerComparator.compare(arg0.getTask(), arg1.getTask());\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\util\\\\TimesheetNode.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["TimesheetNode"], "SCS_MemberReference": ["NONE", "effortSum", "hourEntries", "effortSum", "effortSum", "effortSum", "effortSum", "hourEntries", "entry", "hourEntries", "hourEntries", "sum", "sum"], "AN": ["hourEntries", "effortSum"], "SCS_VariableDeclarator": ["hourEntries", "effortSum", "entry", "node", "sum", "entry"], "SCS_ConstructorDeclaration": ["TimesheetNode"], "MN": ["calculateEffortSum", "getEffortSum", "getHasChildren", "getChildren", "getName", "getId", "addHourEntry", "getHourEntries", "getOwnEffortSpentSum"], "PN": ["entry"], "SCS_VariableDeclaration": ["HourEntry", "TimesheetNode", "long", "HourEntry"], "SCS_ClassReference": ["entry", null, "node", null, "entry"], "SCS_MethodInvocation": ["getMinutesSpent", "getChildren", "calculateEffortSum", "add", "getMinutesSpent"], "CO": ["/**\n * TimesheetNode is the superclass for nodes in the tree that represents a time sheet.\n * In addition to holding child nodes, it calculates the cumulative spent effort\n * in each branch.\n *   \n * @author Pasi Pekkanen, Vesa Piril\u00c3\u00a4\n *\n */"], "CODE": "package fi.hut.soberit.agilefant.util;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport javax.xml.bind.annotation.XmlAccessType;\nimport javax.xml.bind.annotation.XmlAccessorType;\nimport javax.xml.bind.annotation.XmlAttribute;\nimport javax.xml.bind.annotation.XmlTransient;\nimport javax.xml.bind.annotation.XmlType;\n\nimport fi.hut.soberit.agilefant.model.HourEntry;\n\n/**\n * TimesheetNode is the superclass for nodes in the tree that represents a time sheet.\n * In addition to holding child nodes, it calculates the cumulative spent effort\n * in each branch.\n *   \n * @author Pasi Pekkanen, Vesa Piril\u00c3\u00a4\n *\n */\n\n@XmlType\n@XmlAccessorType( XmlAccessType.NONE )\npublic abstract class TimesheetNode {\n    List<HourEntry> hourEntries = new ArrayList<HourEntry>();\n    protected long effortSum = 0;\n    \n    public TimesheetNode() {\n        \n    }\n    \n    public long calculateEffortSum() {\n        effortSum = 0l;\n        for(HourEntry entry : this.hourEntries) {\n            effortSum += entry.getMinutesSpent();\n        }\n        for(TimesheetNode node : this.getChildren()) {\n            effortSum += node.calculateEffortSum();\n        }\n        return effortSum;\n    }\n    @XmlAttribute(name=\"effortSum\",required=true)\n    public long getEffortSum() {\n        return this.effortSum;\n    }\n    public abstract boolean getHasChildren();\n    \n    public abstract List<? extends TimesheetNode> getChildren();\n    public abstract String getName();\n    public abstract int getId();\n    \n    public void addHourEntry(HourEntry entry) {\n        this.hourEntries.add(entry);\n    }\n    \n    public List<HourEntry> getHourEntries() {\n        return this.hourEntries;\n    }\n    @XmlTransient\n    public long getOwnEffortSpentSum() {\n        long sum = 0;\n        for(HourEntry entry : this.hourEntries) {\n            sum += entry.getMinutesSpent();\n        }\n        return sum;\n    }\n}", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\util\\\\TokenGenerator.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["TokenGenerator"], "AN": ["iterationBusiness"], "SCS_VariableDeclarator": ["iterationBusiness", "r", "token", "count", "r"], "MN": ["generateReadonlyToken", "generateReadonlyToken"], "PN": ["token"], "SCS_VariableDeclaration": ["SecureRandom", "String", "int", "SecureRandom"], "SCS_ClassReference": [null, "", "iterationBusiness", null, "iterationBusiness"], "SCS_MethodInvocation": ["toString", "generateReadonlyToken", "getIterationCountFromReadonlyToken", "toString", "getIterationCountFromReadonlyToken"], "SCS_MemberReference": ["r", "token", "token", "count", "token", "r", "count", "token", "token"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.util;\n\nimport java.math.BigInteger;\nimport java.security.SecureRandom;\nimport java.util.HashSet;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport fi.hut.soberit.agilefant.business.IterationBusiness;\n\n@Component\npublic class TokenGenerator {\n\n    @Autowired\n    private IterationBusiness iterationBusiness;\n\n    public String generateReadonlyToken()\n    {\n        SecureRandom r = new SecureRandom();\n        String token = new BigInteger(130, r).toString();\n        return generateReadonlyToken(token);\n    }\n\n    public String generateReadonlyToken(String token)\n    {\n        int count = iterationBusiness.getIterationCountFromReadonlyToken(token);\n        while(count > 0){\n            SecureRandom r = new SecureRandom();\n            token = new BigInteger(130, r).toString();\n            count = iterationBusiness.getIterationCountFromReadonlyToken(token);\n        }\n        \n        return token;\n    }\t\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\util\\\\TransactionLoggerAspect.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["TransactionLoggerAspect", "TxCounter"], "AN": ["log", "txCache", "txCounter"], "SCS_VariableDeclarator": ["log", "txCache", "txCounter", "td", "ts", "ts", "tdRef", "td", "ts", "tdRef", "td"], "SCS_ClassReference": ["LoggerFactory", null, "Collections", null, null, null, null, null, null, "pjp", "pjp", "txCounter", "log", "log", "ts", "td", "td", "td", "txCache", "pjp", "txCache", "tdRef", "log", "log", "ts", "td", "txCounter", "txCache", "pjp", "pjp", "txCache", "tdRef", "log", "log", "ts", "td", "txCounter", "txCache", "pjp"], "SCS_MethodInvocation": ["getLogger", "getClass", "synchronizedMap", "get", "toString", "set", "get", "set", "get", "getArgs", "proceed", "increment", "isDebugEnabled", "debug", "isNewTransaction", "getName", "isReadOnly", "getIsolationLevel", "put", "getArgs", "get", "get", "isDebugEnabled", "debug", "isNewTransaction", "getName", "decrement", "remove", "proceed", "getArgs", "get", "get", "isDebugEnabled", "debug", "isNewTransaction", "getName", "decrement", "remove", "proceed"], "MN": ["toString", "initialValue", "increment", "decrement", "getTransaction", "commit", "rollback"], "PN": ["pjp", "pjp", "pjp"], "SCS_VariableDeclaration": ["TransactionDefinition", "TransactionStatus", "TransactionStatus", "WeakReference", "TransactionDefinition", "TransactionStatus", "WeakReference", "TransactionDefinition"], "SCS_MemberReference": ["txCounter", "ts", "td", "ts", "ts", "tdRef", "td", "txCounter", "ts", "ts", "tdRef", "td", "txCounter", "ts"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.util;\n\nimport java.lang.ref.WeakReference;\nimport java.util.Collections;\nimport java.util.Map;\nimport java.util.WeakHashMap;\n\nimport org.aspectj.lang.ProceedingJoinPoint;\nimport org.aspectj.lang.annotation.Around;\nimport org.aspectj.lang.annotation.Aspect;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.transaction.TransactionDefinition;\nimport org.springframework.transaction.TransactionStatus;\n\n@Aspect\npublic class TransactionLoggerAspect {\n\n    private final Logger log = LoggerFactory.getLogger(this.getClass());\n\n    private final Map<TransactionStatus, WeakReference<TransactionDefinition>> txCache = Collections\n            .synchronizedMap(new WeakHashMap<TransactionStatus, WeakReference<TransactionDefinition>>());\n\n    private final TxCounter txCounter = new TxCounter();\n\n    class TxCounter extends ThreadLocal<Integer> {\n\n        public String toString() {\n            return this.get().toString();\n        }\n\n        public Integer initialValue() {\n            return 0;\n        }\n\n        public void increment() {\n            this.set(this.get() + 1);\n        }\n\n        public void decrement() {\n            this.set(this.get() - 1);\n        }\n\n    }\n\n    @Around(\"bean(transactionManager) && execution(public * getTransaction(..))\")\n    public Object getTransaction(ProceedingJoinPoint pjp) throws Throwable {\n        TransactionDefinition td = (TransactionDefinition) pjp.getArgs()[0];\n        TransactionStatus ts = (TransactionStatus) pjp.proceed();\n        txCounter.increment();\n        if (log.isDebugEnabled()) {\n            log.debug(\"getTransaction(#\" + txCounter + \", new = \"\n                    + ts.isNewTransaction() + \", name = \" + td.getName()\n                    + \", readOnly = \" + td.isReadOnly() + \", isolation = \"\n                    + td.getIsolationLevel() + \")\");\n        }\n        txCache.put(ts, new WeakReference<TransactionDefinition>(td));\n        return ts;\n    }\n\n    @Around(\"bean(transactionManager) && execution(public * commit(..))\")\n    public Object commit(ProceedingJoinPoint pjp) throws Throwable {\n        TransactionStatus ts = (TransactionStatus) pjp.getArgs()[0];\n        WeakReference<TransactionDefinition> tdRef = txCache.get(ts);\n        TransactionDefinition td = (tdRef == null) ? null : tdRef.get();\n        if (log.isDebugEnabled() && td != null) {\n            log.debug(\"commit(#\" + txCounter + \", new = \"\n                    + ts.isNewTransaction() + \", name = \" + td.getName() + \")\");\n        }\n        txCounter.decrement();\n        txCache.remove(ts);\n        return pjp.proceed();\n    }\n\n    @Around(\"bean(transactionManager) && execution(public * rollback(..))\")\n    public Object rollback(ProceedingJoinPoint pjp) throws Throwable {\n        TransactionStatus ts = (TransactionStatus) pjp.getArgs()[0];\n        WeakReference<TransactionDefinition> tdRef = txCache.get(ts);\n        TransactionDefinition td = (tdRef == null) ? null : tdRef.get();\n        if (log.isDebugEnabled() && td != null) {\n            log.debug(\"rollback(#\" + txCounter + \", new = \"\n                    + ts.isNewTransaction() + \", name = \" + td.getName() + \")\");\n        }\n        txCounter.decrement();\n        txCache.remove(ts);\n        return pjp.proceed();\n    }\n\n}", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\util\\\\Triple.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["Triple"], "AN": ["EMPTY", "first", "second", "third"], "SCS_VariableDeclarator": ["EMPTY", "first", "second", "third", "prime", "result", "other", "builder"], "SCS_ClassReference": ["", "first", "second", "third", "first", "second", "third", "builder", "builder", "builder", "first", "builder", "builder", "builder", "second", "builder", "builder", "builder", "third", "builder", "builder"], "SCS_MethodInvocation": ["create", "hashCode", "hashCode", "hashCode", "equals", "equals", "equals", "append", "append", "append", "toString", "append", "append", "append", "toString", "append", "append", "append", "toString", "append", "toString"], "SCS_ConstructorDeclaration": ["Triple"], "SCS_MemberReference": ["first", "first", "second", "second", "third", "third", "first", "second", "third", "result", "prime", "result", "first", "result", "prime", "result", "second", "result", "prime", "result", "third", "result", "obj", "obj", "obj", "obj", "first", "first", "first", "second", "second", "second", "third", "third", "third", "first", "second", "third", "first", "second", "third"], "MN": ["getFirst", "getSecond", "getThird", "hashCode", "equals", "toString", "create"], "PN": ["obj", "first", "second", "third"], "SCS_VariableDeclaration": ["int", "int", "Triple", "StringBuilder"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.util;\n\npublic class Triple<First, Second, Third> {\n\n    public static final Triple<?, ?, ?> EMPTY = create(null, null, null);\n\n    public final First first;\n\n    public final Second second;\n    \n    public final Third third;\n\n    public Triple(First first, Second second, Third third) {\n        this.first = first;\n        this.second = second;\n        this.third = third;\n    }\n\n    public First getFirst() {\n        return first;\n    }\n\n    public Second getSecond() {\n        return second;\n    }\n    \n    public Third getThird() {\n        return third;\n    }\n\n    @Override\n    public int hashCode() {\n        final int prime = 31;\n        int result = 1;\n        result = prime * result + ((first == null) ? 0 : first.hashCode());\n        result = prime * result + ((second == null) ? 0 : second.hashCode());\n        result = prime * result + ((third == null) ? 0 : third.hashCode());\n        return result;\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj)\n            return true;\n        if (obj == null)\n            return false;\n        if (!(obj instanceof Triple<?, ?, ?>))\n            return false;\n        Triple<?, ?, ?> other = (Triple<?, ?, ?>) obj;\n        if (first == null) {\n            if (other.first != null)\n                return false;\n        } else if (!first.equals(other.first))\n            return false;\n        if (second == null) {\n            if (other.second != null)\n                return false;\n        } else if (!second.equals(other.second))\n            return false;\n        if (third == null) {\n            if (other.third != null)\n                return false;\n        }else if (!third.equals(other.third))\n            return false;\n        return true;\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder builder = new StringBuilder();\n        builder.append(\"{[\");\n        if (first == null) {\n            builder.append(\"null\");\n        } else {\n            builder.append(first.toString());\n        }\n        builder.append(\"], [\");\n        if (second == null) {\n            builder.append(\"null\");\n        } else {\n            builder.append(second.toString());\n        }\n        builder.append(\"], [\");\n        if (third == null) {\n            builder.append(\"null\");\n        } else {\n            builder.append(third.toString());\n        }\n        builder.append(\"]}\");\n        return builder.toString();\n    }\n\n    public static <First, Second, Third> Triple<First, Second, Third> create(First first,\n            Second second, Third third) {\n        return new Triple<First, Second, Third>(first, second, third);\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\util\\\\UserConverter.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["UserConverter"], "AN": ["userBusiness"], "SCS_VariableDeclarator": ["userBusiness", "id"], "MN": ["convertFromString", "convertToString", "setUserBusiness"], "PN": ["context", "values", "toClass", "context", "o", "userBusiness"], "SCS_MemberReference": ["values", "values", "id", "o", "userBusiness", "userBusiness"], "SCS_ClassReference": [null, "Integer", "userBusiness", "o"], "SCS_MethodInvocation": ["equalsIgnoreCase", "parseInt", "retrieve", "toString"], "SCS_VariableDeclaration": ["int"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.util;\n\nimport java.util.Map;\n\nimport org.apache.struts2.util.StrutsTypeConverter;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport fi.hut.soberit.agilefant.business.UserBusiness;\n\npublic class UserConverter extends StrutsTypeConverter {\n    @Autowired\n    private UserBusiness userBusiness;\n\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public Object convertFromString(Map context, String[] values, Class toClass) {\n        if (values[0].equalsIgnoreCase(\"null\")) {\n            return null;\n        }\n        int id = Integer.parseInt(values[0]);\n        return userBusiness.retrieve(id);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public String convertToString(Map context, Object o) {\n        if (o == null)\n            return null;\n        return o.toString();\n    }\n\n    public void setUserBusiness(UserBusiness userBusiness) {\n        this.userBusiness = userBusiness;\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\util\\\\XmlDateTimeAdapter.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["XmlDateTimeAdapter"], "MN": ["marshal", "unmarshal"], "PN": ["v", "v"], "SCS_MemberReference": ["v", "v", "v"], "SCS_ClassReference": ["v"], "SCS_MethodInvocation": ["toGregorianCalendar"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.util;\n\nimport java.util.Calendar;\n\nimport javax.xml.bind.annotation.adapters.XmlAdapter;\n\nimport org.joda.time.DateTime;\n\npublic class XmlDateTimeAdapter extends XmlAdapter<Calendar, DateTime> {\n\n    @Override\n    public Calendar marshal(DateTime v) throws Exception {\n        if(v == null) {\n            return null;\n        }\n        return v.toGregorianCalendar();\n    }\n\n    @Override\n    public DateTime unmarshal(Calendar v) throws Exception {\n        if(v == null) {\n            return null;\n        }\n        return new DateTime(v);\n    }\n\n\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\util\\\\XmlExactEstimateAdapter.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["XmlExactEstimateAdapter"], "MN": ["marshal", "unmarshal"], "PN": ["v", "v"], "SCS_MemberReference": ["v", "v"], "SCS_ClassReference": ["v"], "SCS_MethodInvocation": ["getMinorUnits"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.util;\n\nimport javax.xml.bind.annotation.adapters.XmlAdapter;\n\nimport fi.hut.soberit.agilefant.model.ExactEstimate;\n\npublic class XmlExactEstimateAdapter extends XmlAdapter<Long, ExactEstimate> {\n\n    @Override\n    public Long marshal(ExactEstimate v) throws Exception {\n        if(v == null) {\n            return null;\n        }\n        return v.getMinorUnits();\n    }\n\n    @Override\n    public ExactEstimate unmarshal(Long v) throws Exception {\n        return new ExactEstimate(v);\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\AccessAction.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["AccessAction"], "AN": ["serialVersionUID"], "SCS_VariableDeclarator": ["serialVersionUID"], "MN": ["create", "delete", "retrieve", "retrieveAll", "store", "initializePrefetchedData"], "PN": ["objectId"], "SCS_MemberReference": ["SUCCESS", "SUCCESS", "SUCCESS", "SUCCESS", "SUCCESS"], "CO": ["/**\n     * Create a new team to product relationship.\n     */", "/**\n     * Delete an existing team to product relationship.\n     */", "/**\n     * Edit a team to product relationship.\n     */", "/**\n     * Store the team to product relationship.\n     */"], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.stereotype.Component;\n\nimport com.opensymphony.xwork2.Action;\nimport com.opensymphony.xwork2.ActionSupport;\n\n@Component(\"accessAction\")\n@Scope(\"prototype\")\npublic class AccessAction extends ActionSupport implements CRUDAction, Prefetching {\n\n    private static final long serialVersionUID = -3334278151418035144L;\n\n    /**\n     * Create a new team to product relationship.\n     */\n    public String create() {\n        \n        return Action.SUCCESS;\n    }\n\n    /**\n     * Delete an existing team to product relationship.\n     */\n    public String delete() {\n\n        return Action.SUCCESS;\n    }\n\n    /**\n     * Edit a team to product relationship.\n     */\n    public String retrieve() {\n        \n        return Action.SUCCESS;\n    }\n    \n    public String retrieveAll() {\n\n        return Action.SUCCESS;\n    }\n\n    /**\n     * Store the team to product relationship.\n     */\n    public String store() {\n\n        return Action.SUCCESS;\n    }\n\n\n\n    public void initializePrefetchedData(int objectId) {\n\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\AjaxExceptionHandler.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["AjaxExceptionHandler"], "AN": ["serialVersionUID", "exception", "errorMessage", "trace", "genericExceptionResult", "constraintViolationResult", "illegalArgumentResult", "objectNotFoundResult", "typesToi18n"], "SCS_VariableDeclarator": ["serialVersionUID", "exception", "errorMessage", "trace", "genericExceptionResult", "constraintViolationResult", "illegalArgumentResult", "objectNotFoundResult", "typesToi18n", "stackTrace", "pw"], "SCS_ClassReference": ["", "Story", "", "Task", "", "Iteration", "", "Project", "", "Product", "", "Backlog", "", "User", "", "Team", "", "HourEntry", "", "Assignment", "", "BacklogHistoryEntry", "", "BacklogHourEntry", "", "Holiday", null, "", "exception", "onfe", null, "onfe", null, "typesToi18n", "onfe", null, "typesToi18n", "onfe", null, "exception", "stackTrace"], "SCS_MethodInvocation": ["put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "handleObjectNotFoundException", "traceToString", "getMessage", "getI18nKey", "getText", "getI18nKey", "onfeToI18nString", "containsKey", "getTargetModel", "getText", "get", "getTargetModel", "getText", "printStackTrace", "toString"], "MN": ["handle", "handleObjectNotFoundException", "onfeToI18nString", "traceToString", "setException", "getException", "getErrorMessage", "getTrace"], "PN": ["onfe", "onfe", "exception", "exception"], "SCS_MemberReference": ["exception", "exception", "trace", "exception", "errorMessage", "genericExceptionResult", "errorMessage", "errorMessage", "onfe", "objectNotFoundResult", "stackTrace", "pw", "exception", "exception", "exception", "errorMessage", "trace"], "SCS_VariableDeclaration": ["StringWriter", "PrintWriter"], "CO": ["// Exception results", "// AUTOGENERATED"], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport java.io.PrintWriter;\nimport java.io.StringWriter;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.stereotype.Component;\n\nimport com.opensymphony.xwork2.ActionSupport;\n\nimport fi.hut.soberit.agilefant.exception.ObjectNotFoundException;\nimport fi.hut.soberit.agilefant.model.Assignment;\nimport fi.hut.soberit.agilefant.model.Backlog;\nimport fi.hut.soberit.agilefant.model.BacklogHistoryEntry;\nimport fi.hut.soberit.agilefant.model.BacklogHourEntry;\nimport fi.hut.soberit.agilefant.model.Holiday;\nimport fi.hut.soberit.agilefant.model.HourEntry;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.Product;\nimport fi.hut.soberit.agilefant.model.Project;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.Task;\nimport fi.hut.soberit.agilefant.model.Team;\nimport fi.hut.soberit.agilefant.model.User;\nimport flexjson.JSON;\n\n\n@SuppressWarnings(\"serial\")\n@Component(\"ajaxExceptionHandler\")\n@Scope(\"prototype\")\npublic class AjaxExceptionHandler extends ActionSupport {\n\n    private static final long serialVersionUID = -3087595845171961874L;\n\n    private Exception exception;\n    \n    private String errorMessage;\n    \n    private String trace;\n    \n    // Exception results\n    public static final String genericExceptionResult      = \"genericException\";\n    public static final String constraintViolationResult   = \"conflict\";\n    public static final String illegalArgumentResult       = \"input\";\n    public static final String objectNotFoundResult        = \"objectNotFound\";\n    public static final Map<Class<?>, String> typesToi18n = new HashMap<Class<?>, String>() {{\n        put(Story.class, \"story.notFound\");\n        put(Task.class, \"task.notFound\");\n        put(Iteration.class, \"iteration.notFound\");\n        put(Project.class, \"project.notFound\");\n        put(Product.class, \"product.notFound\");\n        put(Backlog.class, \"backlog.notFound\");\n        put(User.class, \"user.notFound\");\n        put(Team.class, \"team.notFound\");\n        put(HourEntry.class, \"hourEntry.notFound\");\n        put(Assignment.class, \"assigment.notFound\");\n        put(BacklogHistoryEntry.class, \"backlogHistoryEntry.notFound\");\n        put(BacklogHourEntry.class, \"backlogHourEntry.notFound\");\n        put(Holiday.class, \"holiday.notFound\");\n    }};\n  \n    \n\n    public String handle() {\n        if (exception instanceof ObjectNotFoundException) {\n            return this.handleObjectNotFoundException((ObjectNotFoundException)exception);\n        }\n        trace = traceToString(exception);\n        errorMessage = exception.getMessage();\n        return genericExceptionResult;\n    }\n    \n    public String handleObjectNotFoundException(ObjectNotFoundException onfe) {\n        if(onfe.getI18nKey() != null) {\n            this.errorMessage = this.getText(onfe.getI18nKey());\n        } else {\n            this.errorMessage = this.onfeToI18nString(onfe);\n        }\n        return objectNotFoundResult;\n    }\n    \n    private String onfeToI18nString(ObjectNotFoundException onfe) {\n        if(typesToi18n.containsKey(onfe.getTargetModel())) {\n            return this.getText(typesToi18n.get(onfe.getTargetModel()));\n        } else {\n            return this.getText(\"unknown.notFound\");\n        }\n    }\n    \n    private String traceToString(Exception exception) {\n        StringWriter stackTrace = new StringWriter();\n        PrintWriter pw = new PrintWriter(stackTrace);\n        exception.printStackTrace(pw);\n        return stackTrace.toString();\n    }\n\n    // AUTOGENERATED\n    \n    public void setException(Exception exception) {\n        this.exception = exception;\n    }\n\n    public Exception getException() {\n        return exception;\n    }\n    \n    @JSON\n    public String getErrorMessage() {\n        return errorMessage;\n    }\n\n    @JSON\n    public String getTrace() {\n        return trace;\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\AssignmentAction.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["AssignmentAction"], "AN": ["serialVersionUID", "assignment", "assignmentId", "assignmentBusiness"], "SCS_VariableDeclarator": ["serialVersionUID", "assignment", "assignmentId", "assignmentBusiness"], "MN": ["modify", "delete", "initializePrefetchedData", "getAssignment", "setAssignment", "setAssignmentBusiness", "getAssignmentId", "setAssignmentId"], "PN": ["objectId", "assignment", "assignmentBusiness", "assignmentId"], "SCS_MemberReference": ["assignment", "assignmentBusiness", "assignmentId", "SUCCESS", "assignmentBusiness", "assignmentId", "SUCCESS", "assignment", "assignmentBusiness", "objectId", "assignment", "assignment", "assignment", "assignmentBusiness", "assignmentBusiness", "assignmentId", "assignmentId", "assignmentId"], "SCS_ClassReference": [null, "assignment", "assignment", null, null], "SCS_MethodInvocation": ["store", "getPersonalLoad", "getAvailability", "delete", "retrieve"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.stereotype.Component;\n\nimport com.opensymphony.xwork2.Action;\nimport com.opensymphony.xwork2.ActionSupport;\n\nimport fi.hut.soberit.agilefant.annotations.PrefetchId;\nimport fi.hut.soberit.agilefant.business.AssignmentBusiness;\nimport fi.hut.soberit.agilefant.model.Assignment;\n\n@Component(\"assignmentAction\")\n@Scope(\"prototype\")\npublic class AssignmentAction extends ActionSupport implements Prefetching {\n\n    private static final long serialVersionUID = 484323193355552426L;\n    private Assignment assignment = new Assignment();\n    @PrefetchId\n    private int assignmentId = 0;\n\n    @Autowired\n    private AssignmentBusiness assignmentBusiness;\n\n    public String modify() {\n        this.assignment = this.assignmentBusiness.store(assignmentId,\n                assignment.getPersonalLoad(), assignment.getAvailability());\n        return Action.SUCCESS;\n    }\n\n    public String delete() {\n        this.assignmentBusiness.delete(assignmentId);\n        return Action.SUCCESS;\n    }\n\n    public void initializePrefetchedData(int objectId) {\n        assignment = this.assignmentBusiness.retrieve(objectId);\n    }\n\n    public Assignment getAssignment() {\n        return assignment;\n    }\n\n    public void setAssignment(Assignment assignment) {\n        this.assignment = assignment;\n    }\n\n    public void setAssignmentBusiness(AssignmentBusiness assignmentBusiness) {\n        this.assignmentBusiness = assignmentBusiness;\n    }\n\n    public int getAssignmentId() {\n        return assignmentId;\n    }\n\n    public void setAssignmentId(int assignmentId) {\n        this.assignmentId = assignmentId;\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\AuthorizationInterceptor.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["AuthorizationInterceptor"], "AN": ["serialVersionUID", "backlogBusiness", "iterationBusiness", "authorizationBusiness", "readonlyId"], "SCS_VariableDeclarator": ["serialVersionUID", "backlogBusiness", "iterationBusiness", "authorizationBusiness", "readonlyId", "action", "accessDenied", "currentUser", "readonlyAction", "id", "isAdmin", "user"], "MN": ["destroy", "init", "intercept", "checkAccess"], "PN": ["invocation", "backlogId"], "SCS_VariableDeclaration": ["Object", "boolean", "User", "ROIterationAction", "int", "boolean", "User"], "SCS_ClassReference": ["invocation", "SecurityUtil", "currentUser", null, "currentUser", null, "readonlyAction", null, "invocation", "currentUser", null, "invocation", "", "", "", "", "", "", "", "SecurityUtil", "currentUser", "invocation", "invocation", "invocation", "SecurityUtil", null], "SCS_MethodInvocation": ["getAction", "getLoggedUser", "getLoginName", "equals", "getLoginName", "equals", "getIteration", "getId", "invoke", "getLoginName", "equals", "invoke", "checkAccess", "checkAccess", "checkAccess", "checkAccess", "checkAccess", "checkAccess", "checkAccess", "getLoggedUser", "isAdmin", "invoke", "invoke", "invoke", "getLoggedUser", "isBacklogAccessible"], "SCS_MemberReference": ["action", "action", "action", "action", "action", "action", "action", "readonlyId", "action", "action", "action", "action", "action", "id", "action", "action", "id", "action", "action", "id", "action", "action", "action", "id", "action", "id", "readonlyId", "action", "accessDenied", "action", "action", "accessDenied", "action", "action", "accessDenied", "action", "action", "accessDenied", "action", "action", "accessDenied", "action", "action", "action", "accessDenied", "action", "accessDenied", "action", "currentUser", "isAdmin", "action", "action", "action", "accessDenied", "authorizationBusiness", "backlogId", "user"], "CO": ["//check read only user permissions", "// Store readonly id when ROIterationAction is called.", "// Used for verification below.", "// Readonly user is calling other actions, make sure the id's match.", "//id is always 0, so not set properly, so just set to readonlyid instead", "//matrix authorizations", "//admin authorizations", "//admin has access to any actions", "// check from the backlogId if the associated product is accessible for the current user    "], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport com.opensymphony.xwork2.ActionInvocation;\nimport com.opensymphony.xwork2.interceptor.Interceptor;\n\nimport fi.hut.soberit.agilefant.business.AuthorizationBusiness;\nimport fi.hut.soberit.agilefant.business.BacklogBusiness;\nimport fi.hut.soberit.agilefant.business.IterationBusiness;\nimport fi.hut.soberit.agilefant.exception.ObjectNotFoundException;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.security.SecurityUtil;\n\n@Component(\"authorizationInterceptor\")\npublic class AuthorizationInterceptor implements Interceptor {\n\n\tprivate static final long serialVersionUID = 540485098014612613L;\n\n\t@Autowired\n    private BacklogBusiness backlogBusiness;\n    \n    @Autowired\n    private IterationBusiness iterationBusiness;\n   \n    @Autowired\n    private AuthorizationBusiness authorizationBusiness;\n    \n    @Override\n    public void destroy() {}\n\n    @Override\n    public void init() {}\n    \n    private static int readonlyId = -1;\n\n    @Override\n    public String intercept(ActionInvocation invocation) throws Exception {\n        Object action = invocation.getAction();\n        \n        boolean accessDenied = false;\n        \n        //check read only user permissions\n        User currentUser = SecurityUtil.getLoggedUser();\n        if(!(action instanceof ROIterationAction \n                || action instanceof ChartAction\n                || action instanceof IterationAction\n                || action instanceof IterationHistoryAction\n                || action instanceof StoryAction) \n                && currentUser.getLoginName().equals(\"readonly\")){\n            \n            return \"login\";\n        } else if (action instanceof ROIterationAction && currentUser.getLoginName().equals(\"readonly\")) {\n            // Store readonly id when ROIterationAction is called.\n            // Used for verification below.\n            \n            ROIterationAction readonlyAction = (ROIterationAction) action; \n            readonlyId = readonlyAction.getIteration().getId();\n            \n            return invocation.invoke();\n        } else if((action instanceof ChartAction\n                || action instanceof IterationAction\n                || action instanceof IterationHistoryAction\n                || action instanceof StoryAction)\n                && currentUser.getLoginName().equals(\"readonly\")){\n            \n            // Readonly user is calling other actions, make sure the id's match.\n            \n            int id = -1;\n            \n            if(action instanceof IterationAction){\n                id = ((IterationAction) action).getIterationId();\n            } else if(action instanceof IterationHistoryAction){\n                id = ((IterationHistoryAction) action).getIterationId();\n            } else if(action instanceof StoryAction){\n                id = ((StoryAction) action).getIterationId();\n            } else if(action instanceof ChartAction){\n                //id is always 0, so not set properly, so just set to readonlyid instead\n                ((ChartAction) action).setBacklogId(readonlyId);     \n                id = ((ChartAction) action).getBacklogId();\n            }\n            \n            if(id != readonlyId){\n                return \"noauth\";\n            } else {\n                return invocation.invoke();\n            }\n        }\n        try {\n        \t//matrix authorizations\n            if (action instanceof BacklogAction){\n                accessDenied = !checkAccess(((BacklogAction) action).getBacklogId()); \n            } else if (action instanceof ProductAction) {\n                accessDenied = !checkAccess(((ProductAction) action).getProductId());  \n            } else if (action instanceof ProjectAction) {\n                accessDenied = !checkAccess(((ProjectAction) action).getProjectId());      \n            } else if (action instanceof IterationAction) {\n                accessDenied = !checkAccess(((IterationAction) action).getIterationId());\n            } else if (action instanceof StoryAction) {\n                accessDenied = !checkAccess(((StoryAction)action).getIterationId());\n            } else if (action instanceof TaskAction) {\n                if(((TaskAction)action).getTask().getIteration() != null){\n                    accessDenied = !checkAccess(((TaskAction)action).getTask().getIteration().getId());\n                } else {\n                    accessDenied = !checkAccess(((TaskAction)action).getParentStory().getIteration().getId());\n                }\n            }\n            \n            else {\n                //admin authorizations\n                currentUser = SecurityUtil.getLoggedUser();\n                boolean isAdmin = currentUser.isAdmin();\n                \n                if(isAdmin){\n                    //admin has access to any actions\n                    return invocation.invoke();\n                } else {\n                    if(action instanceof AccessAction || \n                       action instanceof DatabaseExportAction ||\n                       action instanceof SettingAction){\n                             return \"notadmin\";\n                    } else {\n                        return invocation.invoke();\n                    }\n                }\n            }\n        } catch (ObjectNotFoundException e) {\n        \treturn \"notfound\";\n        }\n        \n        \n        if (accessDenied) return \"noauth\";\n            return invocation.invoke();\n    }\n\n    // check from the backlogId if the associated product is accessible for the current user    \n    private boolean checkAccess(int backlogId){\n        User user = SecurityUtil.getLoggedUser();\n        return this.authorizationBusiness.isBacklogAccessible(backlogId, user);\n    }\n}", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\AutocompleteAction.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["AutocompleteAction"], "AN": ["serialVersionUID", "autocompleteData", "backlogId", "transferObjectBusiness"], "SCS_VariableDeclarator": ["serialVersionUID", "autocompleteData", "backlogId", "transferObjectBusiness"], "MN": ["userTeamData", "teamData", "backlogData", "backlogAndIterationData", "productData", "projectData", "currentIterationData", "setTransferObjectBusiness", "getAutocompleteData", "setBacklogId"], "PN": ["transferObjectBusiness", "backlogId"], "SCS_MemberReference": ["autocompleteData", "autocompleteData", "SUCCESS", "autocompleteData", "SUCCESS", "autocompleteData", "backlogId", "SUCCESS", "autocompleteData", "backlogId", "SUCCESS", "autocompleteData", "SUCCESS", "autocompleteData", "SUCCESS", "autocompleteData", "SUCCESS", "transferObjectBusiness", "transferObjectBusiness", "autocompleteData", "backlogId", "backlogId"], "SCS_ClassReference": ["autocompleteData", "transferObjectBusiness", "autocompleteData", "transferObjectBusiness", "Collections", "transferObjectBusiness", "transferObjectBusiness", "transferObjectBusiness", "transferObjectBusiness", "transferObjectBusiness", "transferObjectBusiness"], "SCS_MethodInvocation": ["addAll", "constructUserAutocompleteData", "addAll", "constructTeamAutocompleteData", "sort", "constructTeamAutocompleteData", "constructBacklogAutocompleteData", "constructBacklogAndIterationAutocompleteData", "constructProductAutocompleteData", "constructProjectAutocompleteData", "constructCurrentIterationAutocompleteData"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.support.PropertyComparator;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.stereotype.Component;\n\nimport com.opensymphony.xwork2.Action;\nimport com.opensymphony.xwork2.ActionSupport;\n\nimport fi.hut.soberit.agilefant.business.TransferObjectBusiness;\nimport fi.hut.soberit.agilefant.transfer.AutocompleteDataNode;\n\n@Component(\"autocompleteAction\")\n@Scope(\"prototype\")\npublic class AutocompleteAction extends ActionSupport {\n\n    private static final long serialVersionUID = 7282682342820966296L;\n    \n    private List<AutocompleteDataNode> autocompleteData = null;\n    \n    private Integer backlogId;\n    \n    @Autowired\n    private TransferObjectBusiness transferObjectBusiness;\n    \n    @SuppressWarnings(\"unchecked\")\n    public String userTeamData() {\n        autocompleteData = new ArrayList<AutocompleteDataNode>();\n        autocompleteData.addAll(transferObjectBusiness.constructUserAutocompleteData());\n        autocompleteData.addAll(transferObjectBusiness.constructTeamAutocompleteData(true));\n        \n        Collections.sort(autocompleteData, new PropertyComparator(\"name\", true, true));\n        \n        return Action.SUCCESS;\n    }\n    \n    public String teamData() {\n        autocompleteData = transferObjectBusiness.constructTeamAutocompleteData(false);\n        return Action.SUCCESS;\n    }\n    \n    public String backlogData() {\n        autocompleteData = transferObjectBusiness.constructBacklogAutocompleteData(backlogId);\n        return Action.SUCCESS;\n    }\n    \n    public String backlogAndIterationData() {\n        autocompleteData = transferObjectBusiness.constructBacklogAndIterationAutocompleteData(backlogId);\n        return Action.SUCCESS;\n    }\n    \n    public String productData() {\n        autocompleteData = transferObjectBusiness.constructProductAutocompleteData();\n        return Action.SUCCESS;\n    }\n    \n    public String projectData() {\n        autocompleteData = transferObjectBusiness.constructProjectAutocompleteData();\n        return Action.SUCCESS;\n    }\n\n    public String currentIterationData() {\n        autocompleteData = transferObjectBusiness.constructCurrentIterationAutocompleteData();\n        return Action.SUCCESS;\n    }\n\n    public void setTransferObjectBusiness(\n            TransferObjectBusiness transferObjectBusiness) {\n        this.transferObjectBusiness = transferObjectBusiness;\n    }\n\n    public List<AutocompleteDataNode> getAutocompleteData() {\n        return autocompleteData;\n    }\n\n    public void setBacklogId(Integer backlogId) {\n        this.backlogId = backlogId;\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\BacklogAction.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["BacklogAction"], "AN": ["serialVersionUID", "backlogId", "userIds", "backlog", "stories", "backlogs", "backlogBusiness", "iterationBusiness", "authorizationBusiness"], "SCS_VariableDeclarator": ["serialVersionUID", "backlogId", "userIds", "backlog", "stories", "backlogs", "backlogBusiness", "iterationBusiness", "authorizationBusiness", "canditateBacklogs", "iter", "backlog"], "MN": ["retrieve", "retrieveStories", "addAssignees", "retrieveSubBacklogs", "resolveResult", "setBacklogBusiness", "getUserIds", "setUserIds", "getBacklog", "getBacklogId", "setBacklogId", "getStories", "getBacklogs"], "PN": ["backlogBusiness", "userIds", "backlogId"], "SCS_MemberReference": ["backlog", "backlogId", "SUCCESS", "backlog", "backlogId", "stories", "SUCCESS", "backlogBusiness", "backlogId", "userIds", "backlog", "backlogBusiness", "backlogId", "SUCCESS", "backlogId", "authorizationBusiness", "backlog", "backlog", "backlogId", "backlogs", "backlog", "SUCCESS", "backlog", "backlogId", "backlog", "backlog", "backlog", "backlogBusiness", "backlogBusiness", "userIds", "userIds", "userIds", "backlog", "backlogId", "backlogId", "backlogId", "stories", "backlogs"], "SCS_ClassReference": ["backlogBusiness", "backlogBusiness", "backlog", null, null, "backlogBusiness", "canditateBacklogs", "iter", "iter", null, "backlog", "SecurityUtil", "backlogs", "backlogBusiness", "backlogBusiness", "backlogBusiness"], "SCS_MethodInvocation": ["retrieve", "retrieve", "getStories", "addAssignees", "retrieve", "retrieveAllStandAloneIterations", "iterator", "hasNext", "next", "isBacklogAccessible", "getId", "getLoggedUser", "add", "retrieveIfExists", "getChildBacklogs", "retrieveIfExists"], "SCS_VariableDeclaration": ["Collection", "Iterator", "Backlog"], "CO": ["/**\n     * Gets all sub backlogs or all products if backlog not found.\n     * @return\n     */", "// Check team access for standalone iterations."], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Set;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.stereotype.Component;\n\nimport com.opensymphony.xwork2.Action;\nimport com.opensymphony.xwork2.ActionSupport;\n\nimport fi.hut.soberit.agilefant.business.AuthorizationBusiness;\nimport fi.hut.soberit.agilefant.business.BacklogBusiness;\nimport fi.hut.soberit.agilefant.business.IterationBusiness;\nimport fi.hut.soberit.agilefant.model.Backlog;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.Product;\nimport fi.hut.soberit.agilefant.model.Project;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.Team;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.security.SecurityUtil;\n\n@Component(\"backlogAction\")\n@Scope(\"prototype\")\npublic class BacklogAction extends ActionSupport {\n    private static final long serialVersionUID = 8061288993804046816L;\n\n    private int backlogId;\n\n    private Set<Integer> userIds = new HashSet<Integer>();\n\n    private Backlog backlog;\n    \n    private Collection<Story> stories = new ArrayList<Story>();\n    \n    private Collection<Backlog> backlogs = new ArrayList<Backlog>(); \n\n    @Autowired\n    private BacklogBusiness backlogBusiness;\n\n    @Autowired\n    private IterationBusiness iterationBusiness;\n    \n    @Autowired\n    private AuthorizationBusiness authorizationBusiness;\n    \n    public String retrieve() {\n        backlog = backlogBusiness.retrieve(backlogId);\n        return Action.SUCCESS;\n    }\n    \n    public String retrieveStories() {\n        backlog = backlogBusiness.retrieve(backlogId);\n        stories = backlog.getStories();\n        return Action.SUCCESS;\n    }\n    \n    public String addAssignees() {\n        this.backlogBusiness.addAssignees(backlogId, userIds);\n        this.backlog = this.backlogBusiness.retrieve(backlogId);\n        return Action.SUCCESS;\n    }\n    \n    /**\n     * Gets all sub backlogs or all products if backlog not found.\n     * @return\n     */\n    public String retrieveSubBacklogs() {\n        if (backlogId == 0) {\n            Collection<Backlog> canditateBacklogs = backlogBusiness.retrieveAllStandAloneIterations();\n            \n            // Check team access for standalone iterations.\n            for (Iterator<Backlog> iter = canditateBacklogs.iterator(); iter.hasNext();) {\n                Backlog backlog = iter.next();\n                if (this.authorizationBusiness.isBacklogAccessible(backlog.getId(), SecurityUtil.getLoggedUser())) {\n                    backlogs.add(backlog);\n                }\n            }\n        }\n        else {\n            backlog = backlogBusiness.retrieveIfExists(backlogId);\n            backlogs = backlogBusiness.getChildBacklogs(backlog);\n        }\n        return Action.SUCCESS;\n    }\n\n\n    public String resolveResult() {\n        backlog = backlogBusiness.retrieveIfExists(backlogId);\n        if (backlog instanceof Product) {\n            return \"product\";\n        }\n        else if (backlog instanceof Project) {\n            return \"project\";\n        }\n        else if (backlog instanceof Iteration) {\n            return \"iteration\";\n        }\n        return \"selectBacklog\";\n    }\n    \n    \n    public void setBacklogBusiness(BacklogBusiness backlogBusiness) {\n        this.backlogBusiness = backlogBusiness;\n    }\n\n    public Set<Integer> getUserIds() {\n        return userIds;\n    }\n\n    public void setUserIds(Set<Integer> userIds) {\n        this.userIds = userIds;\n    }\n    \n    public Backlog getBacklog() {\n        return backlog;\n    }\n\n    public int getBacklogId() {\n        return backlogId;\n    }\n\n    public void setBacklogId(int backlogId) {\n        this.backlogId = backlogId;\n    }\n    \n    public Collection<Story> getStories() {\n        return stories;\n    }\n\n    public Collection<Backlog> getBacklogs() {\n        return backlogs;\n    }    \n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\ChartAction.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["ChartAction"], "AN": ["serialVersionUID", "iterationBurndownBusiness", "projectBurnupBusiness", "iterationBusiness", "projectBusiness", "backlogId", "readonlyToken", "result", "customBdWidth", "customBdHeight", "timeZoneOffset"], "SCS_VariableDeclarator": ["serialVersionUID", "iterationBurndownBusiness", "projectBurnupBusiness", "iterationBusiness", "projectBusiness", "backlogId", "readonlyToken", "result", "customBdWidth", "customBdHeight", "timeZoneOffset", "iteration", "iteration", "project", "project", "iteration", "iteration", "iteration", "iteration"], "MN": ["setIterationBurndownBusiness", "setIterationBusiness", "setProjectBurnupBusiness", "setCustomBdWidth", "setCustomBdHeight", "getIterationBurndown", "getIterationBurndownByToken", "getProjectBurnup", "getSmallProjectBurnup", "getSmallIterationBurndown", "getSmallIterationBurndownByToken", "getCustomIterationBurndown", "getCustomIterationBurndownByToken", "getInputStream", "getBacklogId", "setBacklogId", "setReadonlyToken", "setTimeZoneOffset", "getResult"], "PN": ["iterationBurndownBusiness", "iterationBusiness", "projectBurnupBusiness", "largeBdWidth", "largeBdHeight", "backlogId", "readonlyToken", "timeZoneOffset"], "SCS_MemberReference": ["iterationBurndownBusiness", "iterationBurndownBusiness", "iterationBusiness", "iterationBusiness", "projectBurnupBusiness", "projectBurnupBusiness", "customBdWidth", "largeBdWidth", "customBdHeight", "largeBdHeight", "backlogId", "result", "iteration", "timeZoneOffset", "SUCCESS", "readonlyToken", "result", "iteration", "timeZoneOffset", "SUCCESS", "backlogId", "result", "project", "SUCCESS", "backlogId", "result", "project", "SUCCESS", "backlogId", "result", "iteration", "timeZoneOffset", "SUCCESS", "readonlyToken", "result", "iteration", "timeZoneOffset", "SUCCESS", "backlogId", "result", "iteration", "customBdWidth", "customBdHeight", "timeZoneOffset", "SUCCESS", "readonlyToken", "result", "iteration", "customBdWidth", "customBdHeight", "timeZoneOffset", "SUCCESS", "result", "backlogId", "backlogId", "backlogId", "readonlyToken", "readonlyToken", "timeZoneOffset", "timeZoneOffset", "result"], "SCS_VariableDeclaration": ["Iteration", "Iteration", "Project", "Project", "Iteration", "Iteration", "Iteration", "Iteration"], "SCS_ClassReference": ["iterationBusiness", "iterationBurndownBusiness", "iterationBusiness", "iterationBurndownBusiness", "projectBusiness", "projectBurnupBusiness", "projectBusiness", "projectBurnupBusiness", "iterationBusiness", "iterationBurndownBusiness", "iterationBusiness", "iterationBurndownBusiness", "iterationBusiness", "iterationBurndownBusiness", "iterationBusiness", "iterationBurndownBusiness"], "SCS_MethodInvocation": ["retrieve", "getIterationBurndown", "retreiveIterationByReadonlyToken", "getIterationBurndown", "retrieve", "getBurnup", "retrieve", "getSmallBurnup", "retrieve", "getSmallIterationBurndown", "retreiveIterationByReadonlyToken", "getSmallIterationBurndown", "retrieve", "getCustomIterationBurndown", "retreiveIterationByReadonlyToken", "getCustomIterationBurndown"], "CO": ["/* AUTOGENERATED */"], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.InputStream;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.stereotype.Component;\n\nimport com.opensymphony.xwork2.Action;\nimport com.opensymphony.xwork2.ActionSupport;\n\nimport fi.hut.soberit.agilefant.business.IterationBurndownBusiness;\nimport fi.hut.soberit.agilefant.business.IterationBusiness;\nimport fi.hut.soberit.agilefant.business.ProjectBurnupBusiness;\nimport fi.hut.soberit.agilefant.business.ProjectBusiness;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.Project;\n\n@Component(\"chartAction\")\n@Scope(\"prototype\")\npublic class ChartAction extends ActionSupport {\n\n    private static final long serialVersionUID = -2860355939047563512L;\n    \n    @Autowired\n    private IterationBurndownBusiness iterationBurndownBusiness;\n    @Autowired\n    private ProjectBurnupBusiness projectBurnupBusiness;\n    @Autowired\n    private IterationBusiness iterationBusiness;\n    @Autowired\n    private ProjectBusiness projectBusiness;\n    \n    private int backlogId;\n    \n    private String readonlyToken;\n    \n    private byte[] result;\n    \n    private Integer customBdWidth = 1024;\n    \n    private Integer customBdHeight = 768;\n    \n    private Integer timeZoneOffset = 0;\n    \n    public void setIterationBurndownBusiness(\n            IterationBurndownBusiness iterationBurndownBusiness) {\n        this.iterationBurndownBusiness = iterationBurndownBusiness;\n    }\n    \n    public void setIterationBusiness(IterationBusiness iterationBusiness) {\n        this.iterationBusiness = iterationBusiness;\n    }\n    \n    public void setProjectBurnupBusiness(\n            ProjectBurnupBusiness projectBurnupBusiness) {\n        this.projectBurnupBusiness = projectBurnupBusiness;\n    }\n    \n    public void setCustomBdWidth(Integer largeBdWidth) {\n        this.customBdWidth = largeBdWidth;\n    }\n\n    public void setCustomBdHeight(Integer largeBdHeight) {\n        this.customBdHeight = largeBdHeight;\n    }\n\n    public String getIterationBurndown() {\n        Iteration iteration = iterationBusiness.retrieve(backlogId);\n        result = iterationBurndownBusiness.getIterationBurndown(iteration, timeZoneOffset);\n        return Action.SUCCESS;\n    }\n    \n    public String getIterationBurndownByToken() {\n        Iteration iteration = iterationBusiness.retreiveIterationByReadonlyToken(readonlyToken);\n        result = iterationBurndownBusiness.getIterationBurndown(iteration, timeZoneOffset);\n        return Action.SUCCESS;\n    }\n    \n    public String getProjectBurnup() {\n        Project project = projectBusiness.retrieve(backlogId);\n        result = projectBurnupBusiness.getBurnup(project);\n        return Action.SUCCESS;\n    }\n    \n    public String getSmallProjectBurnup() {\n        Project project = projectBusiness.retrieve(backlogId);\n        result = projectBurnupBusiness.getSmallBurnup(project);\n        return Action.SUCCESS;\n    }\n\n    public String getSmallIterationBurndown() {\n        Iteration iteration = iterationBusiness.retrieve(backlogId);\n        result = iterationBurndownBusiness.getSmallIterationBurndown(iteration, timeZoneOffset);\n        return Action.SUCCESS;\n    }\n    \n    public String getSmallIterationBurndownByToken() {\n        Iteration iteration = iterationBusiness.retreiveIterationByReadonlyToken(readonlyToken);\n        result = iterationBurndownBusiness.getSmallIterationBurndown(iteration, timeZoneOffset);\n        return Action.SUCCESS;\n    }\n                  \n    public String getCustomIterationBurndown() {\n        Iteration iteration = iterationBusiness.retrieve(backlogId);\n        result = iterationBurndownBusiness.getCustomIterationBurndown(iteration, customBdWidth, customBdHeight, timeZoneOffset);\n        return Action.SUCCESS;\n    }\n    \n    public String getCustomIterationBurndownByToken() {\n        Iteration iteration = iterationBusiness.retreiveIterationByReadonlyToken(readonlyToken);\n        result = iterationBurndownBusiness.getCustomIterationBurndown(iteration, customBdWidth, customBdHeight, timeZoneOffset);\n        return Action.SUCCESS;\n    }\n  \n    public InputStream getInputStream() {\n        return new ByteArrayInputStream(result);\n    }\n    \n    public int getBacklogId() {\n        return backlogId;\n    }\n    \n    /* AUTOGENERATED */\n    \n    public void setBacklogId(int backlogId) {\n        this.backlogId = backlogId;\n    }\n    \n    public void setReadonlyToken(String readonlyToken) {\n        this.readonlyToken = readonlyToken;\n    }\n    \n    public void setTimeZoneOffset(Integer timeZoneOffset){\n        this.timeZoneOffset = timeZoneOffset;\n    }\n\n    public byte[] getResult() {\n        return result;\n    }    \n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\ContextAware.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["ContextAware"], "AN": ["CONTEXT_OBJECT_ID_AFFIX", "CONTEXT_NAME"], "SCS_VariableDeclarator": ["CONTEXT_OBJECT_ID_AFFIX", "CONTEXT_NAME"], "MN": ["getContextName", "getContextObjectId"], "PN": [], "CO": ["/**\n * \n */"], "CODE": "package fi.hut.soberit.agilefant.web;\n\n/**\n * \n */\npublic interface ContextAware {\n    public static final String CONTEXT_OBJECT_ID_AFFIX = \"contextViewId_\";\n    public static final String CONTEXT_NAME = \"contextView_lastContext\";\n    \n    public String getContextName();\n    public int getContextObjectId();\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\ContextViewAction.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["ContextViewAction"], "AN": ["serialVersionUID", "contextName", "contextObjectId", "session"], "SCS_VariableDeclarator": ["serialVersionUID", "contextName", "contextObjectId", "session"], "MN": ["execute", "setSession", "getContextName", "setContextName", "getContextObjectId"], "PN": ["session", "contextName"], "SCS_MemberReference": ["contextName", "contextName", "CONTEXT_NAME", "contextName", "contextObjectId", "CONTEXT_OBJECT_ID_AFFIX", "contextName", "contextObjectId", "contextName", "contextName", "session", "session", "contextName", "contextName", "contextName", "contextObjectId"], "SCS_ClassReference": ["session", "session"], "SCS_MethodInvocation": ["get", "get"], "CO": ["/**\n * This actions acts as a dispatcher for different context based views. Basic\n * idea of context is that once some context is activated, it can be accessed\n * again by simply executing this action. Caller of action doesn't need to be\n * aware of the current context.\n * \n * Context also supports some \"context object\". Basically this is a stored id\n * which will be passed as a parameter to resulting action.\n * \n * Context view uses following rules: 1) If context is found, result name is\n * \"success_<contextName>\" 2) If context is not found, result is \"success\" (aka\n * default view) 3) If context name is passed, current sontext is changed to\n * that context and value is stored to session. 4) If context object id is\n * passed, its value is stored to session. 5) If context is changed (new context !=\n * current context) old object id is removed\n * \n * All parameters can also be accessed via session using constants defined in\n * this class.\n */"], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport java.util.Map;\n\nimport org.apache.struts2.interceptor.SessionAware;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.stereotype.Component;\n\nimport com.opensymphony.xwork2.ActionSupport;\n\n/**\n * This actions acts as a dispatcher for different context based views. Basic\n * idea of context is that once some context is activated, it can be accessed\n * again by simply executing this action. Caller of action doesn't need to be\n * aware of the current context.\n * \n * Context also supports some \"context object\". Basically this is a stored id\n * which will be passed as a parameter to resulting action.\n * \n * Context view uses following rules: 1) If context is found, result name is\n * \"success_<contextName>\" 2) If context is not found, result is \"success\" (aka\n * default view) 3) If context name is passed, current sontext is changed to\n * that context and value is stored to session. 4) If context object id is\n * passed, its value is stored to session. 5) If context is changed (new context !=\n * current context) old object id is removed\n * \n * All parameters can also be accessed via session using constants defined in\n * this class.\n */\n\n@Component(\"contextViewAction\")\n@Scope(\"prototype\")\npublic class ContextViewAction extends ActionSupport implements SessionAware {\n\n    private static final long serialVersionUID = 1992243588151483793L;\n\n    private String contextName;\n    private Integer contextObjectId;\n\n    @SuppressWarnings(\"unchecked\")\n    private Map session;\n\n    public String execute() {\n        if (contextName == null) {\n            contextName = (String)session.get(ContextAware.CONTEXT_NAME);\n            if (contextName == null) {\n                return \"success_noContext\";\n            }\n        }\n        contextObjectId = (Integer)session.get(ContextAware.CONTEXT_OBJECT_ID_AFFIX + contextName);\n\n        if (contextObjectId == null) {\n          return \"success_\" + contextName;\n        } else {\n          return \"success_id_\" + contextName;\n        }\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public void setSession(Map session) {\n        this.session = session;\n    }\n\n    public String getContextName() {\n        return contextName;\n    }\n\n    public void setContextName(String contextName) {\n        this.contextName = contextName;\n    }\n\n    public Integer getContextObjectId() {\n        return contextObjectId;\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\CRUDAction.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["CRUDAction"], "MN": ["create", "delete", "store", "retrieve"], "PN": [], "CO": ["/**\n * An interface which should be implemented by actions which contain basic CRUD\n * operations. Using this class guarantees the same naming convention for\n * methods. Classes implementing CRUDAction should have also getter and setter\n * for xxxId. (eg. for UserAction handling User-objects should have getUserId()\n * and setUserId()\n * \n * @author khel\n */", "//    /** Return value to indicate ajax success. */", "//    public static final String AJAX_SUCCESS = \"ajax_success\";", "//    /** Return value to indicate ajax error. */", "//    public static final String AJAX_ERROR = \"ajax_error\";", "//    /** Return value to indicate that the ajax request was not allowed.", "//     * This is used for example when trying to delete tasks having hour entries.", "//     */", "//    public static final String AJAX_FORBIDDEN = \"ajax_forbidden\";", "/**\n     * Creates an object that can be manipulated and stored.\n     * \n     * @return Result of the action. (See com.opensymphony.xwork.Action)\n     */", "/**\n     * Deletes an object.\n     * \n     * @return Result of the action. (See com.opensymphony.xwork.Action)\n     */", "/**\n     * Stores the object.\n     * \n     * @return Result of the action. (See com.opensymphony.xwork.Action)\n     */", "/**\n     * Fetches the object.\n     * \n     * @return Result of the action. (See com.opensymphony.xwork.Action)\n     */"], "CODE": "package fi.hut.soberit.agilefant.web;\n\n/**\n * An interface which should be implemented by actions which contain basic CRUD\n * operations. Using this class guarantees the same naming convention for\n * methods. Classes implementing CRUDAction should have also getter and setter\n * for xxxId. (eg. for UserAction handling User-objects should have getUserId()\n * and setUserId()\n * \n * @author khel\n */\npublic interface CRUDAction {\n//    /** Return value to indicate ajax success. */\n//    public static final String AJAX_SUCCESS = \"ajax_success\";\n//    /** Return value to indicate ajax error. */\n//    public static final String AJAX_ERROR = \"ajax_error\";\n//    /** Return value to indicate that the ajax request was not allowed.\n//     * This is used for example when trying to delete tasks having hour entries.\n//     */\n//    public static final String AJAX_FORBIDDEN = \"ajax_forbidden\";\n\n    /**\n     * Creates an object that can be manipulated and stored.\n     * \n     * @return Result of the action. (See com.opensymphony.xwork.Action)\n     */\n    public String create();\n\n    /**\n     * Deletes an object.\n     * \n     * @return Result of the action. (See com.opensymphony.xwork.Action)\n     */\n    public String delete();\n\n    /**\n     * Stores the object.\n     * \n     * @return Result of the action. (See com.opensymphony.xwork.Action)\n     */\n    public String store();\n\n    /**\n     * Fetches the object.\n     * \n     * @return Result of the action. (See com.opensymphony.xwork.Action)\n     */\n    public String retrieve();\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\DailyWorkAction.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["DailyWorkAction"], "AN": ["serialVersionUID", "dailyWorkBusiness", "userBusiness", "taskBusiness", "storyBusiness", "transferObjectBusiness", "teamBusiness", "userId", "user", "enabledUsers", "queuedTasks", "stories", "tasksWithoutStory", "taskId", "rankUnderId", "task", "storyId", "storyRankUnderId", "story"], "SCS_VariableDeclarator": ["serialVersionUID", "dailyWorkBusiness", "userBusiness", "taskBusiness", "storyBusiness", "transferObjectBusiness", "teamBusiness", "userId", "user", "enabledUsers", "queuedTasks", "stories", "tasksWithoutStory", "taskId", "rankUnderId", "task", "storyId", "storyRankUnderId", "story", "user", "loggedUser", "teamUsers", "storedUserId", "assignedWork", "rankedStories", "unrankedStories", "unrankedNumber", "storyTO", "rank", "assignedWork", "rankedStory", "assignedWork", "thisUser", "task", "thisUser", "task", "user", "task", "user", "story", "storyRankUnder", "assignedWork", "rankedStories", "unrankedStories", "storyRankUnderIdRank", "storyTO", "storyTO", "rank", "user", "story", "dailyWorkUserId", "sessionUser"], "MN": ["containsUser", "execute", "retrieve", "retrieveStories", "retrieveWorkQueue", "retrieveAssignedStories", "getStoryRank", "retrieveAssignedTasks", "deleteFromWorkQueue", "addToWorkQueue", "rankQueueTaskAndMoveUnder", "rankMyStoryAndMoveUnder", "addToWhatsNext", "getDefaultUser", "getStoredDailyWorkUserId", "getLoggedInUserId", "getLoggedInUser", "getUserId", "setUserId", "getQueuedTasks", "getUser", "getEnabledUsers", "setTaskId", "setRankUnderId", "getTask", "setTask", "setStoryId", "setStoryRankUnderId", "getStory", "setStory", "setUserBusiness", "setDailyWorkBusiness", "setTaskBusiness", "setTransferObjectBusiness", "getStories", "getTasksWithoutStory"], "PN": ["users", "userId", "assignedWork", "storyTO", "rankedStories", "id", "userId", "taskId", "rankUnderId", "task", "storyId", "storyRankUnderId", "story", "userBusiness", "dailyWorkBusiness", "taskBusiness", "transferObjectBusiness"], "SCS_VariableDeclaration": ["User", "User", "Collection", "int", "AssignedWorkTO", "Collection", "Collection", "int", "StoryTO", "Integer", "AssignedWorkTO", "StoryTO", "AssignedWorkTO", "User", "Task", "User", "Task", "User", "Task", "User", "Story", "Story", "AssignedWorkTO", "Collection", "Collection", "Integer", "StoryTO", "StoryTO", "Integer", "User", "Story", "int", "Object"], "SCS_MemberReference": ["users", "userId", "userId", "userId", "teamBusiness", "teamUsers", "userId", "teamUsers", "storedUserId", "userId", "storedUserId", "userId", "teamUsers", "user", "userBusiness", "userId", "enabledUsers", "SUCCESS", "user", "userBusiness", "userId", "queuedTasks", "user", "user", "tasksWithoutStory", "assignedWork", "SUCCESS", "user", "stories", "unrankedStories", "storyTO", "rankedStories", "rank", "rank", "unrankedNumber", "unrankedNumber", "rank", "stories", "storyTO", "user", "userBusiness", "userId", "queuedTasks", "user", "SUCCESS", "user", "userBusiness", "userId", "user", "assignedWork", "SUCCESS", "rankedStories", "user", "userBusiness", "userId", "user", "tasksWithoutStory", "SUCCESS", "taskId", "thisUser", "task", "task", "SUCCESS", "taskId", "thisUser", "task", "task", "SUCCESS", "taskId", "user", "task", "rankUnderId", "SUCCESS", "storyId", "storyRankUnderId", "storyRankUnder", "user", "user", "unrankedStories", "storyRankUnderId", "storyRankUnderIdRank", "storyTO", "rankedStories", "storyRankUnderIdRank", "unrankedStories", "storyTO", "rankedStories", "rank", "storyId", "storyRankUnderId", "user", "story", "storyRankUnderId", "SUCCESS", "id", "user", "story", "userId", "userId", "userId", "sessionUser", "dailyWorkUserId", "sessionUser", "dailyWorkUserId", "userId", "userId", "userId", "queuedTasks", "user", "enabledUsers", "taskId", "taskId", "rankUnderId", "rankUnderId", "task", "task", "task", "storyId", "storyId", "storyRankUnderId", "storyRankUnderId", "story", "story", "story", "userBusiness", "userBusiness", "dailyWorkBusiness", "dailyWorkBusiness", "taskBusiness", "taskBusiness", "transferObjectBusiness", "transferObjectBusiness", "stories", "tasksWithoutStory"], "SCS_ClassReference": ["user", "", "loggedUser", "loggedUser", "enabledUsers", "userBusiness", null, "loggedUser", null, "", null, "loggedUser", "enabledUsers", null, "Collections", null, "dailyWorkBusiness", "dailyWorkBusiness", "assignedWork", "", "dailyWorkBusiness", "assignedWork", "", "storyTO", null, null, "dailyWorkBusiness", null, "dailyWorkBusiness", "", "rankedStory", "storyTO", "rankedStory", null, "dailyWorkBusiness", "assignedWork", "", "taskBusiness", "dailyWorkBusiness", null, "transferObjectBusiness", "", "taskBusiness", "dailyWorkBusiness", null, "transferObjectBusiness", "", "taskBusiness", "dailyWorkBusiness", "taskBusiness", "", "storyBusiness", "storyBusiness", "dailyWorkBusiness", "dailyWorkBusiness", "assignedWork", "storyTO", "", "", "storyTO", "", "storyTO", "storyTO", "dailyWorkBusiness", "storyBusiness", "", "storyBusiness", "dailyWorkBusiness", "", "userBusiness", "ActionContext", "ActionContext", null, "ActionContext", null, null, "SecurityUtil", "SecurityUtil"], "SCS_MethodInvocation": ["getId", "getLoggedInUser", "getId", "isAdmin", "addAll", "getEnabledUsers", "getUsersInSameTeams", "getId", "containsUser", "getStoredDailyWorkUserId", "containsUser", "getId", "addAll", "retrieve", "sort", "retrieve", "getQueuedTasksForUser", "getAssignedWorkFor", "getTasksWithoutStory", "retrieveStories", "getQueuedStoriesForUser", "getStories", "getStoryRank", "setWorkQueueRank", "add", "retrieve", "getQueuedTasksForUser", "retrieve", "getAssignedWorkFor", "retrieveStories", "getId", "getId", "getWorkQueueRank", "retrieve", "getAssignedWorkFor", "getTasksWithoutStory", "getDefaultUser", "retrieve", "removeFromWhatsNext", "setTask", "constructTaskTO", "getDefaultUser", "retrieve", "addToWhatsNext", "setTask", "constructTaskTO", "getDefaultUser", "retrieve", "rankUnderTaskOnWhatsNext", "retrieveIfExists", "getDefaultUser", "retrieve", "retrieveIfExists", "getAssignedWorkFor", "getQueuedStoriesForUser", "getStories", "getId", "getStoryRank", "getStoryRank", "getId", "addToWhatsNext", "getId", "getId", "rankUnderStoryOnWhatsNext", "retrieveIfExists", "getDefaultUser", "retrieve", "addToWhatsNext", "getLoggedInUserId", "retrieve", "getContext", "getContext", "getSession", "getContext", "getSession", "get", "getLoggedUserId", "getLoggedUser"], "CO": ["/* \n         * Non-admin user can watch his/her own daily work and also of other users who belong to a same team\n         * Admin has priviledge to view daily works of all users.\n         * This also prevent non-admin to try url-hack other user's daily work who do not belong to his/her team. \n         * Non-admin user trying to see daily work of someone not in his/her team -> userId = 0\n         */", "// verify that logged in user shares a team with the supplied user", "// update list of users used in the dropdown", "/**\n     * Retrieve for JSON data.\n     * @return\n     */", "/*\n         * Get the user id from session variables. This enables the Daily Work\n         * page to remember the selected user.\n         */"], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.support.PropertyComparator;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.stereotype.Component;\n\nimport com.opensymphony.xwork2.Action;\nimport com.opensymphony.xwork2.ActionContext;\nimport com.opensymphony.xwork2.ActionSupport;\n\nimport fi.hut.soberit.agilefant.business.DailyWorkBusiness;\nimport fi.hut.soberit.agilefant.business.StoryBusiness;\nimport fi.hut.soberit.agilefant.business.TaskBusiness;\nimport fi.hut.soberit.agilefant.business.TeamBusiness;\nimport fi.hut.soberit.agilefant.business.TransferObjectBusiness;\nimport fi.hut.soberit.agilefant.business.UserBusiness;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.Task;\nimport fi.hut.soberit.agilefant.model.Team;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.security.SecurityUtil;\nimport fi.hut.soberit.agilefant.transfer.AssignedWorkTO;\nimport fi.hut.soberit.agilefant.transfer.DailyWorkTaskTO;\nimport fi.hut.soberit.agilefant.transfer.StoryTO;\n\n@Component(\"dailyWorkAction\")\n@Scope(\"prototype\")\npublic class DailyWorkAction extends ActionSupport {\n    private static final long serialVersionUID = -1891256847796843738L;\n    \n    @Autowired\n    private DailyWorkBusiness dailyWorkBusiness;\n    \n    @Autowired\n    private UserBusiness userBusiness;\n\n    @Autowired\n    private TaskBusiness taskBusiness;\n    \n    @Autowired\n    private StoryBusiness storyBusiness;\n\n    @Autowired\n    private TransferObjectBusiness transferObjectBusiness;\n    \n    @Autowired\n    private TeamBusiness teamBusiness;\n\n    private int  userId;\n    private User user; \n\n    private List<User> enabledUsers                 = new ArrayList<User>();\n    private Collection<DailyWorkTaskTO> queuedTasks = new ArrayList<DailyWorkTaskTO>();\n    private Collection<StoryTO> stories = new ArrayList<StoryTO>();\n    private Collection<Task> tasksWithoutStory = new ArrayList<Task>();\n\n    private int  taskId;\n    private int  rankUnderId;\n    private Task task;\n    \n    private int storyId;\n\n\n    private int storyRankUnderId;\n\n\n    private Story story;\n\n\n    private boolean containsUser(Collection<User> users, int userId) {\n    \tfor(User user : users) {\n    \t\tif(user.getId()==userId) {\n    \t\t\treturn true;\n    \t\t}\n    \t}\n    \treturn false;\n    }\n    \n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public String execute() {\n        /* \n         * Non-admin user can watch his/her own daily work and also of other users who belong to a same team\n         * Admin has priviledge to view daily works of all users.\n         * This also prevent non-admin to try url-hack other user's daily work who do not belong to his/her team. \n         * Non-admin user trying to see daily work of someone not in his/her team -> userId = 0\n         */\n        User loggedUser = getLoggedInUser();\n        \n        if(this.userId==0) {\n        \tthis.userId = loggedUser.getId();\n        }\n\n        if(loggedUser.isAdmin()) {\n            enabledUsers.addAll(userBusiness.getEnabledUsers());        \t\n        } else {\n        \t// verify that logged in user shares a team with the supplied user\n            Collection<User> teamUsers = this.teamBusiness.getUsersInSameTeams(loggedUser.getId());\n        \tif(!this.containsUser(teamUsers, userId)) {\n        \t\tint storedUserId = getStoredDailyWorkUserId();\n        \t\tif(this.containsUser(teamUsers, storedUserId)) {\n                    this.userId = storedUserId;        \t\t\t\n        \t\t} else {\n        \t\t\tthis.userId = loggedUser.getId();\n        \t\t}\n        \t}\n        \t\n        \t// update list of users used in the dropdown\n            enabledUsers.addAll(teamUsers);        \t\n        }\n        \n        user = this.userBusiness.retrieve(userId);\n\n        Collections.sort(enabledUsers, new PropertyComparator(\"fullName\", true, true));\n        \n        return Action.SUCCESS;\n    }\n    /**\n     * Retrieve for JSON data.\n     * @return\n     */\n    public String retrieve() {\n        user = this.userBusiness.retrieve(userId);\n        queuedTasks = dailyWorkBusiness.getQueuedTasksForUser(user);\n        AssignedWorkTO assignedWork = dailyWorkBusiness.getAssignedWorkFor(user);\n        this.tasksWithoutStory = assignedWork.getTasksWithoutStory();\n        \n        retrieveStories(assignedWork);\n        \n        return Action.SUCCESS;\n    }\n    \n    private void retrieveStories(AssignedWorkTO assignedWork) {\n        Collection<StoryTO> rankedStories = dailyWorkBusiness.getQueuedStoriesForUser(user);\n        Collection<StoryTO> unrankedStories = assignedWork.getStories();\n        this.stories = new ArrayList<StoryTO>();\n        int unrankedNumber = 10000;\n        for (StoryTO storyTO: unrankedStories) {\n            Integer rank = getStoryRank(storyTO, rankedStories);\n            if (rank == null) {\n                rank = unrankedNumber;\n                unrankedNumber++;\n            }\n            storyTO.setWorkQueueRank(rank);\n            this.stories.add(storyTO);\n        }\n    }\n    \n    public String retrieveWorkQueue() {\n        user = this.userBusiness.retrieve(userId);\n        queuedTasks = dailyWorkBusiness.getQueuedTasksForUser(user);\n       \n        return Action.SUCCESS;\n    }\n    \n    public String retrieveAssignedStories() {\n        user = this.userBusiness.retrieve(userId);\n        AssignedWorkTO assignedWork = dailyWorkBusiness.getAssignedWorkFor(user);\n        retrieveStories(assignedWork);\n        \n        return Action.SUCCESS;\n    }\n    \n    private Integer getStoryRank(StoryTO storyTO, Collection<StoryTO> rankedStories) {\n        for (StoryTO rankedStory: rankedStories) {\n            if (rankedStory.getId() == storyTO.getId()) {\n                return rankedStory.getWorkQueueRank();\n            }\n        }\n        return null;\n    }\n    \n    public String retrieveAssignedTasks() {\n        user = this.userBusiness.retrieve(userId);\n        AssignedWorkTO assignedWork = dailyWorkBusiness.getAssignedWorkFor(user);\n        this.tasksWithoutStory = assignedWork.getTasksWithoutStory();\n        \n        return Action.SUCCESS;\n    }\n\n    public String deleteFromWorkQueue() {\n        User thisUser = getDefaultUser();\n        Task task = taskBusiness.retrieve(taskId);\n        \n        dailyWorkBusiness.removeFromWhatsNext(thisUser, task);\n        \n        this.setTask(transferObjectBusiness.constructTaskTO(task));\n        return Action.SUCCESS;\n    }\n    \n    public String addToWorkQueue() {\n        User thisUser = getDefaultUser();\n        Task task = taskBusiness.retrieve(taskId);\n\n        dailyWorkBusiness.addToWhatsNext(thisUser, task);\n        \n        this.setTask(transferObjectBusiness.constructTaskTO(task));\n        return Action.SUCCESS;\n    }\n    \n    public String rankQueueTaskAndMoveUnder() {\n        User user = getDefaultUser();\n        Task task = taskBusiness.retrieve(taskId);\n        \n        dailyWorkBusiness.rankUnderTaskOnWhatsNext(user, task, taskBusiness.retrieveIfExists(rankUnderId));\n        \n        return Action.SUCCESS;\n    }\n    \n    public String rankMyStoryAndMoveUnder() {\n        User user = getDefaultUser();\n        Story story = storyBusiness.retrieve(storyId);\n\n        Story storyRankUnder = storyBusiness.retrieveIfExists(storyRankUnderId);\n        if (storyRankUnder != null) {\n            AssignedWorkTO assignedWork = dailyWorkBusiness.getAssignedWorkFor(user);\n            Collection<StoryTO> rankedStories = dailyWorkBusiness.getQueuedStoriesForUser(user);\n            Collection<StoryTO> unrankedStories = assignedWork.getStories();\n            Integer storyRankUnderIdRank = null;\n            for (StoryTO storyTO: unrankedStories) {\n                if (storyTO.getId() == storyRankUnderId) {\n                    storyRankUnderIdRank = getStoryRank(storyTO, rankedStories);\n                }\n            }\n            if (storyRankUnderIdRank == null) {\n                for (StoryTO storyTO: unrankedStories) {\n                    Integer rank = getStoryRank(storyTO, rankedStories);\n                    if (rank == null && storyTO.getId() != storyId) {\n                        addToWhatsNext(storyTO.getId());\n                    }\n                    \n                    if (storyTO.getId() == storyRankUnderId) {\n                        break;\n                    }\n                }\n            }\n        }\n        \n        dailyWorkBusiness.rankUnderStoryOnWhatsNext(user, story, storyBusiness.retrieveIfExists(storyRankUnderId));\n        \n        return Action.SUCCESS;\n    }\n    \n    private void addToWhatsNext(int id) {\n        User user = getDefaultUser();\n        Story story = storyBusiness.retrieve(id);\n        \n        dailyWorkBusiness.addToWhatsNext(user, story);\n    }\n    \n    protected User getDefaultUser() {\n        if (userId == 0) {\n            userId = getLoggedInUserId();\n        }\n        \n        return userBusiness.retrieve(userId);\n    }\n    \n    protected int getStoredDailyWorkUserId() {\n        /*\n         * Get the user id from session variables. This enables the Daily Work\n         * page to remember the selected user.\n         */\n        int dailyWorkUserId = 0;\n        if (ActionContext.getContext() != null\n                && ActionContext.getContext().getSession() != null) {\n            Object sessionUser = ActionContext.getContext().getSession().get(\n                    \"dailyWorkUserId\");\n\n            if (sessionUser != null) {\n                dailyWorkUserId = (Integer) sessionUser;\n            }\n        }\n        \n        return dailyWorkUserId;\n    }\n    \n    protected int getLoggedInUserId() {\n        return SecurityUtil.getLoggedUserId();\n    }\n    \n    protected User getLoggedInUser() {\n        return SecurityUtil.getLoggedUser();\n    }\n\n    public int getUserId() {\n        return userId;\n    }\n\n    public void setUserId(int userId) {\n        this.userId = userId;\n    }\n\n    public Collection<DailyWorkTaskTO> getQueuedTasks() {\n        return queuedTasks;\n    }\n    \n    public User getUser() {\n        return user;\n    }\n    \n    public Collection<User> getEnabledUsers() {\n        return enabledUsers;\n    }\n\n    public void setTaskId(int taskId) {\n        this.taskId = taskId; \n    }\n    \n    public void setRankUnderId(int rankUnderId) {\n        this.rankUnderId = rankUnderId;\n    }\n\n    public Task getTask() {\n        return task;\n    }\n\n    public void setTask(Task task) {\n        this.task = task;\n    }\n    \n    public void setStoryId(int storyId) {\n        this.storyId = storyId;\n    }\n    \n    public void setStoryRankUnderId(int storyRankUnderId) {\n        this.storyRankUnderId = storyRankUnderId;\n    }\n    \n    public Story getStory() {\n        return story;\n    }\n    \n    public void setStory(Story story) {\n        this.story = story;\n    }\n\n    public void setUserBusiness(UserBusiness userBusiness) {\n        this.userBusiness = userBusiness;\n    }\n\n    public void setDailyWorkBusiness(DailyWorkBusiness dailyWorkBusiness) {\n        this.dailyWorkBusiness = dailyWorkBusiness;\n    }\n\n    public void setTaskBusiness(TaskBusiness taskBusiness) {\n        this.taskBusiness = taskBusiness;\n    }\n\n    public void setTransferObjectBusiness(TransferObjectBusiness transferObjectBusiness) {\n        this.transferObjectBusiness = transferObjectBusiness;\n    }\n\n    public Collection<StoryTO> getStories() {\n        return stories;\n    }\n\n    public Collection<Task> getTasksWithoutStory() {\n        return tasksWithoutStory;\n    }\n}", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\DatabaseExportAction.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["DatabaseExportAction"], "AN": ["serialVersionUID", "takeDbBackup", "databaseStream", "errorStacktrace", "exportImportBusiness", "exportImport", "productBusiness", "iterationBusiness", "userBusiness", "config", "fileUpload"], "SCS_VariableDeclarator": ["serialVersionUID", "takeDbBackup", "databaseStream", "errorStacktrace", "exportImportBusiness", "exportImport", "productBusiness", "iterationBusiness", "userBusiness", "config", "fileUpload", "inputStream", "zipInputStream", "organizationTO"], "MN": ["getFileUpload", "setFileUpload", "execute", "display", "edit", "generateDatabaseExport", "databaseImport", "getDatabaseStream", "setDatabaseStream", "getErrorStacktrace", "getDatabaseHasExistingData", "getImportEnabled"], "PN": ["fileUpload", "databaseStream"], "SCS_MemberReference": ["fileUpload", "fileUpload", "fileUpload", "SUCCESS", "NONE", "takeDbBackup", "SUCCESS", "takeDbBackup", "databaseStream", "exportImportBusiness", "exportImport", "SUCCESS", "errorStacktrace", "e", "ERROR", "fileUpload", "NONE", "fileUpload", "inputStream", "zipInputStream", "organizationTO", "SUCCESS", "errorStacktrace", "errorStacktrace", "e", "ERROR", "databaseStream", "databaseStream", "databaseStream", "errorStacktrace", "config"], "SCS_ClassReference": ["takeDbBackup", "Throwables", "zipInputStream", "exportImport", "exportImportBusiness", "e", "e", "Throwables", null, "productBusiness", "iterationBusiness", "userBusiness", null], "SCS_MethodInvocation": ["generateDBDumpStream", "getStackTraceAsString", "getNextEntry", "fromJson", "importOrganization", "getCause", "getMessage", "getStackTraceAsString", "toByteArray", "countAll", "countAll", "countAll", "getBoolean"], "SCS_VariableDeclaration": ["InputStream", "ZipInputStream", "OrganizationDumpTO"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.InputStream;\nimport java.util.zip.ZipInputStream;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.stereotype.Component;\n\nimport com.google.common.base.Throwables;\nimport com.opensymphony.xwork2.Action;\nimport com.opensymphony.xwork2.ActionSupport;\nimport com.typesafe.config.Config;\n\nimport fi.hut.soberit.agilefant.business.ExportImportBusiness;\nimport fi.hut.soberit.agilefant.business.ExportImportBusiness.OrganizationDumpTO;\nimport fi.hut.soberit.agilefant.business.IterationBusiness;\nimport fi.hut.soberit.agilefant.business.ProductBusiness;\nimport fi.hut.soberit.agilefant.business.UserBusiness;\nimport fi.hut.soberit.agilefant.exportimport.ExportImport;\nimport fi.hut.soberit.agilefant.exportimport.XmlBackupper;\nimport fi.hut.soberit.agilefant.exportimport.ExportImport.VersionMismatchException;\n\n@Component(\"dbExportAction\")\n@Scope(\"prototype\")\npublic class DatabaseExportAction extends ActionSupport {\n\n    private static final long serialVersionUID = -1639488740106383276L;\n\n    private XmlBackupper takeDbBackup;\n    private ByteArrayOutputStream databaseStream;\n    private String errorStacktrace;\n    @Autowired\n    private ExportImportBusiness exportImportBusiness;\n    @Autowired\n    private ExportImport exportImport;\n    \n    @Autowired\n    private ProductBusiness productBusiness;\n    \n    @Autowired\n    private IterationBusiness iterationBusiness;\n    \n    @Autowired\n    private UserBusiness userBusiness;\n    \n    @Autowired\n    private Config config;\n    \n    private File fileUpload;\n\n    public File getFileUpload() {\n        return fileUpload;\n    }\n\n    public void setFileUpload(File fileUpload) {\n        this.fileUpload = fileUpload;\n    }\n\n    public String execute() throws Exception{\n        return SUCCESS;\n    }\n    \n    public String display() {\n        return NONE;\n    }\n\n    public String edit() {\n        this.takeDbBackup = new XmlBackupper();\n\n        return Action.SUCCESS;\n    }\n\n    public String generateDatabaseExport() {\n        try {\n            this.takeDbBackup = new XmlBackupper();\n            this.databaseStream = takeDbBackup.generateDBDumpStream(exportImportBusiness, exportImport);\n            \n            return Action.SUCCESS;\n        } catch (Exception e) {\n        \terrorStacktrace = Throwables.getStackTraceAsString(e);\n            return Action.ERROR;\n        }\n    }\n    \n    public String databaseImport() {\n        try {\n            if (fileUpload == null) {\n                return Action.NONE;\n            }\n            InputStream inputStream = new FileInputStream(fileUpload);\n            ZipInputStream zipInputStream = new ZipInputStream(inputStream);\n            zipInputStream.getNextEntry();\n            OrganizationDumpTO organizationTO = exportImport.fromJson(zipInputStream);\n            exportImportBusiness.importOrganization(organizationTO);\n            return Action.SUCCESS;\n        } catch (Exception e) {\n            if (e.getCause() instanceof VersionMismatchException) {\n                errorStacktrace = e.getMessage();\n            } else {\n                errorStacktrace = Throwables.getStackTraceAsString(e);\n            }\n            return Action.ERROR;\n        }\n    }\n\n    public InputStream getDatabaseStream() {\n        return new ByteArrayInputStream(this.databaseStream.toByteArray());\n    }\n\n    public void setDatabaseStream(ByteArrayOutputStream databaseStream) {\n        this.databaseStream = databaseStream;\n    }\n    \n    public String getErrorStacktrace() {\n    \treturn errorStacktrace;\n    }\n    \n    public Boolean getDatabaseHasExistingData() {\n    \tif (productBusiness.countAll() > 0 || iterationBusiness.countAll() > 0 || userBusiness.countAll() > 2) {\n    \t\treturn true;\n    \t}\n    \treturn false;\n    }\n    \n    public Boolean getImportEnabled() {\n    \treturn this.config.getBoolean(\"agilefant.import.enabled\");\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\ExceptionHandler.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["ExceptionHandler"], "AN": ["serialVersionUID", "exception", "trace", "msg", "dbException"], "SCS_VariableDeclarator": ["serialVersionUID", "exception", "trace", "msg", "dbException", "stackTrace", "pw"], "MN": ["handleException", "handleDbException", "getException", "setException", "getMsg", "getTrace", "isDbException"], "PN": ["exception"], "SCS_MemberReference": ["msg", "stackTrace", "pw", "trace", "trace", "SUCCESS", "dbException", "SUCCESS", "exception", "exception", "exception", "msg", "trace", "dbException"], "SCS_ClassReference": ["exception", "exception", "stackTrace"], "SCS_MethodInvocation": ["getMessage", "printStackTrace", "toString"], "SCS_VariableDeclaration": ["StringWriter", "PrintWriter"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport java.io.PrintWriter;\nimport java.io.StringWriter;\n\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.stereotype.Component;\n\nimport com.opensymphony.xwork2.Action;\nimport com.opensymphony.xwork2.ActionSupport;\n\n@Component(\"exceptionHandler\")\n@Scope(\"prototype\")\npublic class ExceptionHandler extends ActionSupport {\n\n    private static final long serialVersionUID = 8739605249663386007L;\n\n    private Exception exception;\n\n    private String trace = \"\";\n\n    private String msg = \"\";\n\n    private boolean dbException = false;\n\n    public String handleException() {\n        try {\n            msg = exception.getMessage();\n            StringWriter stackTrace = new StringWriter();\n            PrintWriter pw = new PrintWriter(stackTrace);\n            exception.printStackTrace(pw);\n            trace = stackTrace.toString();\n        } catch(Exception e) {\n            trace = \"Unknown exception.\";\n        }\n        return Action.SUCCESS;\n    }\n\n    public String handleDbException() {\n        dbException = true;\n        return Action.SUCCESS;\n    }\n\n    public Exception getException() {\n        return exception;\n    }\n\n    public void setException(Exception exception) {\n        this.exception = exception;\n    }\n\n    public String getMsg() {\n        return msg;\n    }\n\n    public String getTrace() {\n        return trace;\n    }\n\n    public boolean isDbException() {\n        return dbException;\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\ExportIterationAction.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["ExportIterationAction"], "AN": ["iterationData", "exportFileName", "iterationId", "exportIterationBusiness"], "SCS_VariableDeclarator": ["iterationData", "exportFileName", "iterationId", "exportIterationBusiness", "now", "exportable"], "MN": ["execute", "getIterationId", "setIterationId", "getIterationData", "getExportFileName"], "PN": ["iterationId"], "SCS_VariableDeclaration": ["DateTime", "Workbook"], "SCS_MemberReference": ["exportFileName", "iterationId", "iterationData", "iterationId", "iterationData", "ERROR", "SUCCESS", "iterationId", "iterationId", "iterationId", "exportFileName"], "SCS_ClassReference": ["now", "exportIterationBusiness", "exportable", "iterationData"], "SCS_MethodInvocation": ["toString", "exportIteration", "write", "toByteArray"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\n\nimport org.apache.poi.ss.usermodel.Workbook;\nimport org.joda.time.DateTime;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.stereotype.Component;\n\nimport com.opensymphony.xwork2.Action;\n\nimport fi.hut.soberit.agilefant.business.ExportIterationBusiness;\n\n@Scope(\"prototype\")\n@Component(\"exportIterationAction\")\npublic class ExportIterationAction implements Action {\n    private ByteArrayOutputStream iterationData;\n    private String exportFileName;\n    private int iterationId;\n    @Autowired\n    private ExportIterationBusiness exportIterationBusiness;\n\n    public String execute() {\n        DateTime now = new DateTime();\n        exportFileName = \"Agilefant_Iteration_\" + iterationId + \"_\"\n                + now.toString(\"yyyyMMDDHHmm\");\n        iterationData = new ByteArrayOutputStream();\n        Workbook exportable = exportIterationBusiness\n                .exportIteration(iterationId);\n        try {\n            exportable.write(iterationData);\n        } catch (IOException e) {\n            return Action.ERROR;\n        }\n        return Action.SUCCESS;\n    }\n\n    public int getIterationId() {\n        return iterationId;\n    }\n\n    public void setIterationId(int iterationId) {\n        this.iterationId = iterationId;\n    }\n\n    public InputStream getIterationData() {\n        return new ByteArrayInputStream(iterationData.toByteArray());\n    }\n\n    public String getExportFileName() {\n        return exportFileName;\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\FileUploadAction.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["FileUploadAction"], "AN": ["fileUpload", "fileUploadContentType", "fileUploadFileName"], "SCS_VariableDeclarator": ["fileUpload", "fileUploadContentType", "fileUploadFileName"], "MN": ["getFileUploadContentType", "setFileUploadContentType", "getFileUploadFileName", "setFileUploadFileName", "getFileUpload", "setFileUpload", "execute", "display"], "PN": ["fileUploadContentType", "fileUploadFileName", "fileUpload"], "SCS_MemberReference": ["fileUploadContentType", "fileUploadContentType", "fileUploadContentType", "fileUploadFileName", "fileUploadFileName", "fileUploadFileName", "fileUpload", "fileUpload", "fileUpload", "SUCCESS", "NONE"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport java.io.File;\n\nimport com.opensymphony.xwork2.ActionSupport;\n\npublic class FileUploadAction extends ActionSupport{\n\n    private File fileUpload;\n    private String fileUploadContentType;\n    private String fileUploadFileName;\n\n    public String getFileUploadContentType() {\n        return fileUploadContentType;\n    }\n\n    public void setFileUploadContentType(String fileUploadContentType) {\n        this.fileUploadContentType = fileUploadContentType;\n    }\n\n    public String getFileUploadFileName() {\n        return fileUploadFileName;\n    }\n\n    public void setFileUploadFileName(String fileUploadFileName) {\n        this.fileUploadFileName = fileUploadFileName;\n    }\n\n    public File getFileUpload() {\n        return fileUpload;\n    }\n\n    public void setFileUpload(File fileUpload) {\n        this.fileUpload = fileUpload;\n    }\n\n    public String execute() throws Exception{\n        \n        return SUCCESS;\n        \n    }\n    \n    public String display() {\n        return NONE;\n    }\n    \n}", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\HolidayAction.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["HolidayAction"], "AN": ["serialVersionUID", "userHolidays", "holiday", "holidayId", "userId", "holidayBusiness", "userBusiness"], "SCS_VariableDeclarator": ["serialVersionUID", "userHolidays", "holiday", "holidayId", "userId", "holidayBusiness", "userBusiness", "user"], "MN": ["initializePrefetchedData", "store", "retrieve", "futureUserHolidays", "getUserHolidays", "setUserHolidays", "getHoliday", "setHoliday", "getHolidayId", "setHolidayId", "setUserId"], "PN": ["objectId", "userHolidays", "holiday", "holidayId", "userId"], "SCS_MemberReference": ["holiday", "holidayBusiness", "objectId", "holidayBusiness", "holiday", "SUCCESS", "holiday", "holidayBusiness", "holidayId", "SUCCESS", "userBusiness", "userId", "userHolidays", "holidayBusiness", "user", "SUCCESS", "userHolidays", "userHolidays", "userHolidays", "holiday", "holiday", "holiday", "holidayId", "holidayId", "holidayId", "userId", "userId"], "SCS_ClassReference": [null, null, null, null, null], "SCS_MethodInvocation": ["retrieveDetached", "store", "retrieve", "retrieve", "retrieveFutureHolidaysByUser"], "SCS_VariableDeclaration": ["User"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.stereotype.Component;\n\nimport com.opensymphony.xwork2.Action;\nimport com.opensymphony.xwork2.ActionSupport;\n\nimport fi.hut.soberit.agilefant.business.HolidayBusiness;\nimport fi.hut.soberit.agilefant.business.UserBusiness;\nimport fi.hut.soberit.agilefant.model.Holiday;\nimport fi.hut.soberit.agilefant.model.User;\n\n@Component(\"holidayAction\")\n@Scope(\"prototype\")\npublic class HolidayAction extends ActionSupport implements Prefetching {\n\n    private static final long serialVersionUID = -4798675617849645091L;\n    private List<Holiday> userHolidays = new ArrayList<Holiday>();\n    private Holiday holiday = new Holiday();\n    private int holidayId = 0;\n    private int userId = 0;\n\n    @Autowired\n    private HolidayBusiness holidayBusiness;\n    @Autowired\n    private UserBusiness userBusiness;\n\n    public void initializePrefetchedData(int objectId) {\n        this.holiday = this.holidayBusiness.retrieveDetached(objectId);\n    }\n\n    public String store() {\n        this.holidayBusiness.store(this.holiday);\n        return Action.SUCCESS;\n    }\n\n    public String retrieve() {\n        this.holiday = this.holidayBusiness.retrieve(this.holidayId);\n        return Action.SUCCESS;\n    }\n\n    public String futureUserHolidays() {\n        User user = this.userBusiness.retrieve(this.userId);\n        this.userHolidays = this.holidayBusiness\n                .retrieveFutureHolidaysByUser(user);\n        return Action.SUCCESS;\n    }\n\n    public List<Holiday> getUserHolidays() {\n        return userHolidays;\n    }\n\n    public void setUserHolidays(List<Holiday> userHolidays) {\n        this.userHolidays = userHolidays;\n    }\n\n    public Holiday getHoliday() {\n        return holiday;\n    }\n\n    public void setHoliday(Holiday holiday) {\n        this.holiday = holiday;\n    }\n\n    public int getHolidayId() {\n        return holidayId;\n    }\n\n    public void setHolidayId(int holidayId) {\n        this.holidayId = holidayId;\n    }\n\n    public void setUserId(int userId) {\n        this.userId = userId;\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\HourEntryAction.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["HourEntryAction"], "AN": ["serialVersionUID", "hourEntryId", "parentObjectId", "hourEntry", "hourEntryBusiness", "userIds", "limited", "hourEntries", "delta"], "SCS_VariableDeclarator": ["serialVersionUID", "hourEntryId", "parentObjectId", "hourEntry", "hourEntryBusiness", "userIds", "limited", "hourEntries", "delta", "deltaMinutes"], "MN": ["retrieveTaskHourEntries", "retrieveStoryHourEntries", "retrieveBacklogHourEntries", "retrieveLatestHourEntryDelta", "create", "delete", "retrieve", "store", "logStoryEffort", "logTaskEffort", "logBacklogEffort", "getHourEntryId", "isLimited", "setHourEntryId", "getHourEntry", "setHourEntry", "setHourEntryBusiness", "getUserIds", "setUserIds", "setParentObjectId", "setLimited", "getHourEntries", "initializePrefetchedData", "getDelta"], "PN": ["hourEntryId", "hourEntry", "hourEntryBusiness", "userIds", "parentObjectId", "limited", "objectId"], "SCS_MemberReference": ["hourEntries", "parentObjectId", "limited", "SUCCESS", "hourEntries", "parentObjectId", "limited", "SUCCESS", "hourEntries", "parentObjectId", "limited", "SUCCESS", "delta", "deltaMinutes", "deltaMinutes", "delta", "deltaMinutes", "SUCCESS", "hourEntryId", "hourEntry", "SUCCESS", "hourEntry", "hourEntryId", "hourEntryId", "SUCCESS", "hourEntry", "hourEntryId", "SUCCESS", "hourEntry", "SUCCESS", "hourEntryBusiness", "parentObjectId", "hourEntry", "userIds", "SUCCESS", "hourEntryBusiness", "parentObjectId", "hourEntry", "userIds", "SUCCESS", "hourEntryBusiness", "parentObjectId", "hourEntry", "userIds", "SUCCESS", "hourEntryId", "limited", "hourEntryId", "hourEntryId", "hourEntry", "hourEntry", "hourEntry", "hourEntryBusiness", "hourEntryBusiness", "userIds", "userIds", "userIds", "parentObjectId", "parentObjectId", "limited", "limited", "hourEntries", "hourEntry", "objectId", "delta"], "SCS_ClassReference": ["hourEntryBusiness", "hourEntryBusiness", "hourEntryBusiness", "hourEntryBusiness", "SecurityUtil", null, "hourEntry", "hourEntryBusiness", "hourEntryBusiness", "hourEntryBusiness", "hourEntryBusiness", null, null, null, "hourEntryBusiness"], "SCS_MethodInvocation": ["retrieveTaskHourEntries", "retrieveStoryHourEntries", "retrieveBacklogHourEntries", "retrieveLatestHourEntryDelta", "getLoggedUserId", "setDelta", "setDate", "retrieve", "delete", "retrieve", "store", "logStoryEffort", "logTaskEffort", "logBacklogEffort", "retrieve"], "SCS_VariableDeclaration": ["long"], "CO": ["/**\n     * {@inheritDoc}\n     */", "/**\n     * {@inheritDoc}\n     */", "/**\n     * {@inheritDoc}\n     */", "/**\n     * {@inheritDoc} \n     */"], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport org.joda.time.DateTime;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.stereotype.Component;\n\nimport com.opensymphony.xwork2.Action;\nimport com.opensymphony.xwork2.ActionSupport;\n\nimport fi.hut.soberit.agilefant.annotations.PrefetchId;\nimport fi.hut.soberit.agilefant.business.HourEntryBusiness;\nimport fi.hut.soberit.agilefant.model.HourEntry;\nimport fi.hut.soberit.agilefant.security.SecurityUtil;\nimport fi.hut.soberit.agilefant.transfer.HourEntryDelta;\n\n@Component(\"hourEntryAction\")\n@Scope(\"prototype\")\npublic class HourEntryAction extends ActionSupport implements CRUDAction, Prefetching {\n    private static final long serialVersionUID = -3817350069919875136L;\n\n    @PrefetchId\n    private int hourEntryId;\n    private int parentObjectId;\n    private HourEntry hourEntry;\n    @Autowired\n    private HourEntryBusiness hourEntryBusiness;\n    private Set<Integer> userIds = new HashSet<Integer>();\n    private boolean limited;\n    \n    private List<HourEntry> hourEntries = new ArrayList<HourEntry>();\n    \n    private HourEntryDelta delta;\n   \n    public String retrieveTaskHourEntries() {\n        this.hourEntries = hourEntryBusiness.retrieveTaskHourEntries(parentObjectId, limited);\n        return Action.SUCCESS;\n    }\n    public String retrieveStoryHourEntries() {\n        this.hourEntries = hourEntryBusiness.retrieveStoryHourEntries(parentObjectId, limited);\n        return Action.SUCCESS;\n    }\n    public String retrieveBacklogHourEntries() {\n        this.hourEntries = hourEntryBusiness.retrieveBacklogHourEntries(parentObjectId, limited);\n        return Action.SUCCESS;\n    }\n    \n    public String retrieveLatestHourEntryDelta() {\n        this.delta = new HourEntryDelta();\n        long deltaMinutes = hourEntryBusiness.retrieveLatestHourEntryDelta(SecurityUtil.getLoggedUserId());\n        if (deltaMinutes > 0 && deltaMinutes <= 480) {\n            this.delta.setDelta(deltaMinutes);\n        }\n        return Action.SUCCESS;\n    }\n    \n    /**\n     * {@inheritDoc}\n     */\n    public String create() {\n        hourEntryId = 0;\n        hourEntry = new HourEntry();\n        hourEntry.setDate(new DateTime());\n        return Action.SUCCESS;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public String delete() {\n        hourEntry = hourEntryBusiness.retrieve(hourEntryId);\n        hourEntryBusiness.delete(hourEntryId);\n        return Action.SUCCESS;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public String retrieve() {\n        hourEntry = hourEntryBusiness.retrieve(hourEntryId);\n        return Action.SUCCESS;\n    }\n\n    /**\n     * {@inheritDoc} \n     */\n    public String store() {\n        hourEntryBusiness.store(hourEntry);\n        return Action.SUCCESS;\n    }\n    \n    public String logStoryEffort() {\n        this.hourEntryBusiness.logStoryEffort(this.parentObjectId,\n                this.hourEntry, this.userIds);\n        return Action.SUCCESS;\n    }\n    \n    public String logTaskEffort() {\n        this.hourEntryBusiness.logTaskEffort(this.parentObjectId, this.hourEntry, this.userIds);\n        return Action.SUCCESS;\n    }\n\n    public String logBacklogEffort() {\n        this.hourEntryBusiness.logBacklogEffort(this.parentObjectId, this.hourEntry, this.userIds);\n        return Action.SUCCESS;\n    }\n\n    public int getHourEntryId() {\n        return hourEntryId;\n    }\n    public boolean isLimited() {\n        return this.limited;\n    }\n\n    public void setHourEntryId(int hourEntryId) {\n        this.hourEntryId = hourEntryId;\n    }\n\n    public HourEntry getHourEntry() {\n        return hourEntry;\n    }\n\n    public void setHourEntry(HourEntry hourEntry) {\n        this.hourEntry = hourEntry;\n    }\n\n    public void setHourEntryBusiness(HourEntryBusiness hourEntryBusiness) {\n        this.hourEntryBusiness = hourEntryBusiness;\n    }\n\n    public Set<Integer> getUserIds() {\n        return userIds;\n    }\n\n    public void setUserIds(Set<Integer> userIds) {\n        this.userIds = userIds;\n    }\n\n    public void setParentObjectId(int parentObjectId) {\n        this.parentObjectId = parentObjectId;\n    }\n    \n    public void setLimited (boolean limited) {\n        this.limited = limited;\n    }\n    \n    public List<HourEntry> getHourEntries() {\n        return hourEntries;\n    }\n    public void initializePrefetchedData(int objectId) {\n        this.hourEntry = hourEntryBusiness.retrieve(objectId);\n    }\n    \n    public HourEntryDelta getDelta() {\n        return delta;\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\IterationAction.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["IterationAction"], "AN": ["serialVersionUID", "iterationId", "readonlyToken", "iteration", "parentBacklog", "parentBacklogId", "iterationMetrics", "assignments", "assigneeIds", "assigneesChanged", "confirmationString", "iterations", "teamIds", "stories", "teamsChanged", "iterationBusiness", "tokenGenerator", "storyBusiness"], "SCS_VariableDeclarator": ["serialVersionUID", "iterationId", "readonlyToken", "iteration", "parentBacklog", "parentBacklogId", "iterationMetrics", "assignments", "assigneeIds", "assigneesChanged", "confirmationString", "iterations", "teamIds", "stories", "teamsChanged", "iterationBusiness", "tokenGenerator", "storyBusiness", "teams", "teams", "assignees", "teams"], "MN": ["create", "retrieve", "fetchIterationData", "retrieveIterationMetrics", "delete", "iterationRowMetrics", "iterationAssignments", "iterationMetrics", "iterationMetricsByToken", "createReadonlyToken", "clearReadonlyToken", "setReadonlyTokenForJsp", "store", "retrieveAllSA", "getContextName", "getContextObjectId", "initializePrefetchedData", "getIterationId", "setIterationId", "getStories", "getReadonlyToken", "setReadonlyToken", "getIteration", "setIteration", "getParentBacklogId", "setParentBacklogId", "setIterationBusiness", "setStoryBusiness", "getIterationMetrics", "getParentBacklog", "getAssignments", "getAssigneeIds", "setAssigneeIds", "setConfirmationString", "isAssigneesChanged", "setAssigneesChanged", "setTeamsChanged", "getTeamIds", "setTeamIds", "getIterations", "setIterations"], "PN": ["objectId", "iterationId", "readonlyToken", "iteration", "parentBacklogId", "iterationBusiness", "storyBusiness", "assigneeIds", "confirmationString", "assigneesChanged", "teamsChanged", "teamIds", "iterations"], "SCS_MemberReference": ["iterationId", "iteration", "stories", "SUCCESS", "iteration", "iterationId", "parentBacklog", "stories", "iteration", "iterationMetrics", "iteration", "SUCCESS", "iterationId", "iteration", "iterationId", "SUCCESS", "iteration", "iterationId", "iterationMetrics", "iteration", "SUCCESS", "parentBacklog", "iterationId", "iterationId", "parentBacklog", "ERROR", "iteration", "iterationBusiness", "iterationId", "iterationMetrics", "iteration", "SUCCESS", "iteration", "iterationId", "assignments", "iteration", "SUCCESS", "iteration", "iterationId", "iterationMetrics", "iteration", "SUCCESS", "iteration", "readonlyToken", "iterationMetrics", "iteration", "SUCCESS", "iteration", "iterationId", "teamsChanged", "teams", "teamIds", "iterationBusiness", "iterationId", "parentBacklogId", "iteration", "assigneeIds", "teams", "readonlyToken", "SUCCESS", "iteration", "iterationId", "teamsChanged", "teams", "teamIds", "iterationBusiness", "iterationId", "parentBacklogId", "iteration", "assigneeIds", "teams", "readonlyToken", "SUCCESS", "iteration", "iterationId", "readonlyToken", "SUCCESS", "assigneesChanged", "assignees", "assigneeIds", "teamsChanged", "teams", "teamIds", "parentBacklogId", "iteration", "iterationBusiness", "iterationId", "iteration", "assignees", "teams", "iteration", "iterationBusiness", "iterationId", "parentBacklogId", "iteration", "assignees", "teams", "SUCCESS", "iterations", "SUCCESS", "iterationId", "iteration", "iterationBusiness", "objectId", "iterationId", "iterationId", "iterationId", "stories", "readonlyToken", "readonlyToken", "readonlyToken", "iteration", "iteration", "iteration", "parentBacklogId", "parentBacklogId", "parentBacklogId", "iterationBusiness", "iterationBusiness", "storyBusiness", "storyBusiness", "iterationMetrics", "parentBacklog", "assignments", "assigneeIds", "assigneeIds", "assigneeIds", "confirmationString", "confirmationString", "assigneesChanged", "assigneesChanged", "assigneesChanged", "teamsChanged", "teamsChanged", "teamIds", "teamIds", "teamIds", "iterations", "iterations", "iterations"], "SCS_ClassReference": ["iteration", "iteration", "iterationBusiness", "iteration", "storyBusiness", "iterationBusiness", "iterationBusiness", "iterationBusiness", "iterationBusiness", "iterationBusiness", "confirmationString", "iterationBusiness", null, "iterationBusiness", null, "iterationBusiness", "iterationBusiness", "iterationBusiness", "iterationBusiness", "iterationBusiness", "iterationBusiness", "iterationBusiness", "iterationBusiness", "iteration", "tokenGenerator", null, "iteration", "iterationBusiness", "iteration", null, "iteration", "iterationBusiness", "iteration", null, null, "iterationBusiness", null], "SCS_MethodInvocation": ["setStartDate", "setEndDate", "retrieve", "getParent", "retrieveStoriesInIteration", "getIterationMetrics", "retrieve", "getIterationContents", "getIterationContents", "getIterationMetrics", "equalsIgnoreCase", "retrieve", "getParent", "deleteAndUpdateHistory", "retrieve", "getIterationMetrics", "retrieve", "calculateAssignedLoadPerAssignee", "retrieve", "getIterationMetrics", "retreiveIterationByReadonlyToken", "getIterationMetrics", "retrieve", "setReadonlyToken", "generateReadonlyToken", "store", "getReadonlyToken", "retrieve", "setReadonlyToken", "store", "getReadonlyToken", "retrieve", "getReadonlyToken", "storeStandAlone", "store", "retrieveAllStandAloneIterations", "retrieve"], "SCS_VariableDeclaration": ["Set", "Set", "Set", "Set"], "CO": ["// Load metrics data", "/*\n    @Validations(\n            requiredFields = {@RequiredFieldValidator(type=ValidatorType.SIMPLE, fieldName=\"iteration.name\", key=\"iteration.missingName\"),\n                    @RequiredFieldValidator(type=ValidatorType.SIMPLE, fieldName=\"iteration.startDate\", key=\"iteration.missingStartDate\"),\n                    @RequiredFieldValidator(type=ValidatorType.SIMPLE, fieldName=\"iteration.endDate\", key=\"iteration.missingEndDate\")},\n            expressions = {@ExpressionValidator(expression = \"iteration.startDate < iteration.endDate\", key=\"iteration.startBeforeEnd\")}\n    )\n    */", "// store stand alone iteration which has no parent"], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport org.joda.time.DateTime;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.stereotype.Component;\n\nimport com.opensymphony.xwork2.Action;\n\nimport fi.hut.soberit.agilefant.annotations.PrefetchId;\nimport fi.hut.soberit.agilefant.business.IterationBusiness;\nimport fi.hut.soberit.agilefant.business.StoryBusiness;\nimport fi.hut.soberit.agilefant.model.Backlog;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.transfer.AssignmentTO;\nimport fi.hut.soberit.agilefant.transfer.IterationMetrics;\nimport fi.hut.soberit.agilefant.util.TokenGenerator;\n\n@Component(\"iterationAction\")\n@Scope(\"prototype\")\npublic class IterationAction implements CRUDAction, Prefetching, ContextAware {\n\n    private static final long serialVersionUID = -448825368336871703L;\n\n    @PrefetchId\n    private int iterationId;\n    \n    private String readonlyToken;\n\n    private Iteration iteration;\n\n    private Backlog parentBacklog;\n\n    private int parentBacklogId;\n\n    private IterationMetrics iterationMetrics;\n        \n    private Set<AssignmentTO> assignments;\n    \n    private Set<Integer> assigneeIds = new HashSet<Integer>();\n    \n    private boolean assigneesChanged = false;\n\n    private String confirmationString;\n    \n    private Collection<Iteration> iterations = new ArrayList<Iteration>();\n    \n    private Set<Integer> teamIds = new HashSet<Integer>();\n    \n    private List<Story> stories;\n    \n    private boolean teamsChanged;\n    \n    @Autowired\n    private IterationBusiness iterationBusiness;\n    \n    @Autowired\n    private TokenGenerator tokenGenerator;\n    \n    @Autowired \n    StoryBusiness storyBusiness;\n\n    public String create() {\n        iterationId = 0;\n        iteration = new Iteration();\n        stories = new ArrayList<Story>();\n        iteration.setStartDate(new DateTime());\n        iteration.setEndDate(new DateTime());\n        return Action.SUCCESS;\n    }\n\n    public String retrieve() {\n        iteration = iterationBusiness.retrieve(iterationId);\n        parentBacklog = iteration.getParent();\n        stories = storyBusiness.retrieveStoriesInIteration(iteration);\n        // Load metrics data\n        iterationMetrics = iterationBusiness.getIterationMetrics(iteration);\n        return Action.SUCCESS;\n    }\n    \n    public String fetchIterationData() {\n        iterationBusiness.retrieve(iterationId);\n        iteration = iterationBusiness.getIterationContents(iterationId);\n        return Action.SUCCESS;\n    }\n    \n    public String retrieveIterationMetrics() {\n        iteration = iterationBusiness.getIterationContents(iterationId);\n        iterationMetrics = iterationBusiness.getIterationMetrics(iteration);\n        return Action.SUCCESS;\n    }\n\n    public String delete() {\n        if(confirmationString.equalsIgnoreCase(\"yes\")) {\n            parentBacklog = iterationBusiness.retrieve(iterationId).getParent();\n            iterationBusiness.deleteAndUpdateHistory(iterationId);\n            if(parentBacklog != null) {\n              return \"redirect-parent\";\n            } else {\n              return \"redirect-login-context\";\n            }\n        } else {\n            return Action.ERROR;\n        }\n    }\n\n    public String iterationRowMetrics() {\n        iteration = this.iterationBusiness.retrieve(iterationId);\n        iterationMetrics = iterationBusiness.getIterationMetrics(iteration);\n        return Action.SUCCESS;\n    }\n    \n    public String iterationAssignments() {\n        iteration = iterationBusiness.retrieve(iterationId);\n        assignments = iterationBusiness.calculateAssignedLoadPerAssignee(iteration);\n        return Action.SUCCESS;\n    }\n    \n    public String iterationMetrics() {\n        iteration = iterationBusiness.retrieve(iterationId);\n        iterationMetrics = iterationBusiness.getIterationMetrics(iteration);\n        return Action.SUCCESS;\n    }\n    \n    public String iterationMetricsByToken() {\n        iteration = iterationBusiness.retreiveIterationByReadonlyToken(readonlyToken);\n        iterationMetrics = iterationBusiness.getIterationMetrics(iteration);\n        return Action.SUCCESS;\n    }\n    \n    public String createReadonlyToken() {\n        iteration = iterationBusiness.retrieve(iterationId);\n        iteration.setReadonlyToken(tokenGenerator.generateReadonlyToken());\n        \n        Set<Integer> teams = null;\n        if (teamsChanged) {\n            teams = teamIds;\n        }\n        \n        this.iterationBusiness.store(iterationId, parentBacklogId, iteration, assigneeIds, teams);\n        \n        this.readonlyToken = iteration.getReadonlyToken();\n\n        return Action.SUCCESS;\n    }\n    \n    public String clearReadonlyToken() {\n        iteration = iterationBusiness.retrieve(iterationId);\n        iteration.setReadonlyToken(null);\n        \n        Set<Integer> teams = null;\n        if (teamsChanged) {\n            teams = teamIds;\n        }\n        \n        this.iterationBusiness.store(iterationId, parentBacklogId, iteration, assigneeIds, teams);\n        \n        this.readonlyToken = iteration.getReadonlyToken();\n\n        return Action.SUCCESS;\n    }\n    \n    public String setReadonlyTokenForJsp() {\n        iteration = iterationBusiness.retrieve(iterationId);\n        this.readonlyToken = iteration.getReadonlyToken();\n        \n        return Action.SUCCESS;\n    }\n    \n    /*\n    @Validations(\n            requiredFields = {@RequiredFieldValidator(type=ValidatorType.SIMPLE, fieldName=\"iteration.name\", key=\"iteration.missingName\"),\n                    @RequiredFieldValidator(type=ValidatorType.SIMPLE, fieldName=\"iteration.startDate\", key=\"iteration.missingStartDate\"),\n                    @RequiredFieldValidator(type=ValidatorType.SIMPLE, fieldName=\"iteration.endDate\", key=\"iteration.missingEndDate\")},\n            expressions = {@ExpressionValidator(expression = \"iteration.startDate < iteration.endDate\", key=\"iteration.startBeforeEnd\")}\n    )\n    */\n    public String store() {\n        Set<Integer> assignees = null;\n        if(this.assigneesChanged) {\n            assignees = this.assigneeIds;\n        }\n        \n        Set<Integer> teams = null;\n        if (teamsChanged) {\n            teams = teamIds;\n        }\n        \n        // store stand alone iteration which has no parent\n        if (parentBacklogId == 0) {\n            iteration = this.iterationBusiness.storeStandAlone(iterationId, iteration, assignees, teams);        \n        } else {\n            iteration = this.iterationBusiness.store(iterationId, parentBacklogId, iteration, assignees, teams);\n            \n        }\n        \n        return Action.SUCCESS;\n    }\n    \n    public String retrieveAllSA() {\n        this.iterations = iterationBusiness.retrieveAllStandAloneIterations();\n        return Action.SUCCESS;\n    }\n    \n    public String getContextName() {\n        return \"backlog\";\n    }\n    \n    public int getContextObjectId() {\n        return iterationId;\n    }\n    \n    public void initializePrefetchedData(int objectId) {\n        this.iteration = this.iterationBusiness.retrieve(objectId);\n    }\n    \n    public int getIterationId() {\n        return iterationId;\n    }\n\n    public void setIterationId(int iterationId) {\n        this.iterationId = iterationId;\n    }\n    \n    public List<Story> getStories() {\n        return stories;\n    }\n    \n    public String getReadonlyToken() {\n        return readonlyToken;\n    }\n    \n    public void setReadonlyToken(String readonlyToken) {\n        this.readonlyToken = readonlyToken;\n    }\n\n    public Iteration getIteration() {\n        return iteration;\n    }\n\n    public void setIteration(Iteration iteration) {\n        this.iteration = iteration;\n    }\n\n    public int getParentBacklogId() {\n        return parentBacklogId;\n    }\n\n    public void setParentBacklogId(int parentBacklogId) {\n        this.parentBacklogId = parentBacklogId;\n    }\n\n    public void setIterationBusiness(IterationBusiness iterationBusiness) {\n        this.iterationBusiness = iterationBusiness;\n    }\n    \n    public void setStoryBusiness(StoryBusiness storyBusiness) {\n        this.storyBusiness = storyBusiness;\n    }\n\n    public IterationMetrics getIterationMetrics() {\n        return iterationMetrics;\n    }\n\n    public Backlog getParentBacklog() {\n        return parentBacklog;\n    }\n\n    public Set<AssignmentTO> getAssignments() {\n        return assignments;\n    }\n\n    public Set<Integer> getAssigneeIds() {\n        return assigneeIds;\n    }\n\n    public void setAssigneeIds(Set<Integer> assigneeIds) {\n        this.assigneeIds = assigneeIds;\n    }\n    \n    public void setConfirmationString(String confirmationString) {\n        this.confirmationString = confirmationString;\n    }\n\n    public boolean isAssigneesChanged() {\n        return assigneesChanged;\n    }\n\n    public void setAssigneesChanged(boolean assigneesChanged) {\n        this.assigneesChanged = assigneesChanged;\n    }\n    \n    public void setTeamsChanged(boolean teamsChanged) {\n        this.teamsChanged = teamsChanged;\n    }\n\n    public Set<Integer> getTeamIds() {\n        return teamIds;\n    }\n\n    public void setTeamIds(Set<Integer> teamIds) {\n        this.teamIds = teamIds;\n    }\n    \n    public Collection<Iteration> getIterations() {\n        return iterations;\n    }\n\n    public void setIterations(Collection<Iteration> iterations) {\n        this.iterations = iterations;\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\IterationHistoryAction.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["IterationHistoryAction"], "AN": ["serialVersionUID", "iterationBusiness", "storyHistory", "taskHistory", "mingledHistory", "iterationId", "readonlyToken"], "SCS_VariableDeclarator": ["serialVersionUID", "iterationBusiness", "storyHistory", "taskHistory", "mingledHistory", "iterationId", "readonlyToken", "iteration", "iteration"], "MN": ["execute", "executeByToken", "getStoryHistory", "getTaskHistory", "getMingledHistory", "getIterationId", "setIterationId", "getReadonlyToken", "setReadonlyToken"], "PN": ["iterationId", "readonlyToken"], "SCS_VariableDeclaration": ["Iteration", "Iteration"], "SCS_MemberReference": ["iterationBusiness", "iterationId", "storyHistory", "iterationBusiness", "iteration", "taskHistory", "iterationBusiness", "iteration", "mingledHistory", "iterationBusiness", "iteration", "SUCCESS", "iterationBusiness", "readonlyToken", "storyHistory", "iterationBusiness", "iteration", "taskHistory", "iterationBusiness", "iteration", "mingledHistory", "iterationBusiness", "iteration", "SUCCESS", "storyHistory", "taskHistory", "mingledHistory", "iterationId", "iterationId", "iterationId", "readonlyToken", "readonlyToken", "readonlyToken"], "SCS_ClassReference": [null, null, null, null, null, null, null, null], "SCS_MethodInvocation": ["retrieve", "retrieveChangesInIterationStories", "retrieveChangesInIterationTasks", "renderSortedTaskAndStoryRevisions", "retreiveIterationByReadonlyToken", "retrieveChangesInIterationStories", "retrieveChangesInIterationTasks", "renderSortedTaskAndStoryRevisions"], "CO": ["/**\n * Class extended to include Task History feature\n * \n * @author aborici\n * \n */"], "CODE": "package fi.hut.soberit.agilefant.web;\n\n/**\n * Class extended to include Task History feature\n * \n * @author aborici\n * \n */\nimport java.util.List;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.stereotype.Component;\n\nimport com.opensymphony.xwork2.ActionSupport;\n\nimport fi.hut.soberit.agilefant.business.IterationBusiness;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.transfer.AgilefantHistoryEntry;\n\n@Component(\"iterationHistoryAction\")\n@Scope(\"prototype\")\npublic class IterationHistoryAction extends ActionSupport {\n    private static final long serialVersionUID = -5381754026574773970L;\n    \n    @Autowired\n    private IterationBusiness iterationBusiness;\n    \n    private List<AgilefantHistoryEntry> storyHistory;\n    private List<AgilefantHistoryEntry> taskHistory;\n    private List<AgilefantHistoryEntry> mingledHistory;\n    \n    private int iterationId;\n    \n    private String readonlyToken;\n\n    \n    @Override\n    public String execute() {\n        Iteration iteration = this.iterationBusiness.retrieve(iterationId);\n        storyHistory = this.iterationBusiness.retrieveChangesInIterationStories(iteration);\n        taskHistory = this.iterationBusiness.retrieveChangesInIterationTasks(iteration);\n        mingledHistory = this.iterationBusiness.renderSortedTaskAndStoryRevisions(iteration);\n\n        return SUCCESS;\n    }\n    \n    public String executeByToken() {\n        Iteration iteration = this.iterationBusiness.retreiveIterationByReadonlyToken(readonlyToken);\n        storyHistory = this.iterationBusiness.retrieveChangesInIterationStories(iteration);\n        taskHistory = this.iterationBusiness.retrieveChangesInIterationTasks(iteration);\n        mingledHistory = this.iterationBusiness.renderSortedTaskAndStoryRevisions(iteration);\n\n        return SUCCESS;\n    }\n    \n    public List<AgilefantHistoryEntry> getStoryHistory() {\n        return storyHistory;\n    }\n\n    public List<AgilefantHistoryEntry> getTaskHistory() {\n        return taskHistory;\n    }\n    \n    public List<AgilefantHistoryEntry> getMingledHistory() {\n        return mingledHistory;\n    }\n    \n    public int getIterationId() {\n        return iterationId;\n    }\n\n    public void setIterationId(int iterationId) {\n        this.iterationId = iterationId;\n    }\n    \n    public String getReadonlyToken() {\n        return readonlyToken;\n    }\n    \n    public void setReadonlyToken(String readonlyToken) {\n        this.readonlyToken = readonlyToken;\n    }\n    \n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\LabelAction.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["LabelAction"], "AN": ["serialVersionUID", "labelId", "labelName", "labels", "storyId", "labelNames", "labelBusiness"], "SCS_VariableDeclarator": ["serialVersionUID", "labelId", "labelName", "labels", "storyId", "labelNames", "labelBusiness"], "MN": ["delete", "lookupLabels", "addStoryLabels", "setLabelBusiness", "setLabelId", "getLabelId", "setLabelNames", "getLabels", "getLabelNames", "setLabelName", "getLabelName", "setStoryId"], "PN": ["labelBusiness", "labelId", "labelNames", "labelName", "storyId"], "SCS_ClassReference": ["labelBusiness", "", "labelBusiness", "labelBusiness"], "SCS_MethodInvocation": ["delete", "getLabelId", "lookupLabelsLike", "createStoryLabels"], "SCS_MemberReference": ["SUCCESS", "labels", "labelName", "SUCCESS", "labelNames", "storyId", "SUCCESS", "labelBusiness", "labelBusiness", "labelId", "labelId", "labelId", "labelNames", "labelNames", "labels", "labelNames", "labelName", "labelName", "labelName", "storyId", "storyId"], "CO": ["// AUTOGENERATED"], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.stereotype.Component;\n\nimport com.opensymphony.xwork2.Action;\nimport com.opensymphony.xwork2.ActionSupport;\n\nimport fi.hut.soberit.agilefant.business.LabelBusiness;\nimport fi.hut.soberit.agilefant.model.Label;\n\n@Component(\"labelAction\")\n@Scope(\"prototype\")\npublic class LabelAction extends ActionSupport {\n\n    private static final long serialVersionUID = 2732120227422713963L;\n\n    private Integer labelId;\n\n    private String labelName;\n\n    private List<Label> labels = new ArrayList<Label>();\n\n    private Integer storyId;\n    \n    private List<String> labelNames;\n    \n    @Autowired\n    private LabelBusiness labelBusiness;\n\n    public String delete() {\n        labelBusiness.delete(getLabelId());\n        return Action.SUCCESS;\n    }\n\n    public String lookupLabels() {\n        labels = labelBusiness.lookupLabelsLike(labelName);\n        return Action.SUCCESS;\n    }\n\n    public String addStoryLabels() {\n        labelBusiness.createStoryLabels(labelNames, storyId);\n        return Action.SUCCESS;\n    }\n    \n    // AUTOGENERATED\n\n    public void setLabelBusiness(LabelBusiness labelBusiness) {\n        this.labelBusiness = labelBusiness;\n    }\n\n    public void setLabelId(Integer labelId) {\n        this.labelId = labelId;\n    }\n\n    public Integer getLabelId() {\n        return labelId;\n    }\n\n\n    public void setLabelNames(List<String> labelNames) {\n        this.labelNames = labelNames;\n    }\n\n    public List<Label> getLabels() {\n        return labels;\n    }\n\n    public List<String> getLabelNames() {\n        return labelNames;\n    }\n\n\n    public void setLabelName(String labelName) {\n        this.labelName = labelName;\n    }\n\n    public String getLabelName() {\n        return labelName;\n    }\n    \n    public void setStoryId(Integer storyId) {\n        this.storyId = storyId;\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\LoginContextAction.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["LoginContextAction"], "AN": ["serialVersionUID", "settingBusiness", "backlogBusiness", "userBusiness", "loginBusiness"], "SCS_VariableDeclarator": ["serialVersionUID", "settingBusiness", "backlogBusiness", "userBusiness", "loginBusiness", "loggedUser", "now", "login"], "MN": ["execute", "saveLoginInformation", "getLoggedInUser"], "PN": [], "SCS_ClassReference": ["", "loginBusiness", "", "settingBusiness", "", "login", "login", "loginBusiness", "SecurityUtil"], "SCS_MethodInvocation": ["saveLoginInformation", "retrieveLoginCountByUser", "getLoggedInUser", "isDailyWork", "getLoggedInUser", "setUser", "setTime", "store", "getLoggedUser"], "SCS_VariableDeclaration": ["User", "DateTime", "Login"], "SCS_MemberReference": ["loggedUser", "now", "login"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.web;\n\n\nimport org.joda.time.DateTime;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.stereotype.Component;\n\nimport com.opensymphony.xwork2.ActionSupport;\n\nimport fi.hut.soberit.agilefant.business.BacklogBusiness;\nimport fi.hut.soberit.agilefant.business.LoginBusiness;\nimport fi.hut.soberit.agilefant.business.SettingBusiness;\nimport fi.hut.soberit.agilefant.business.UserBusiness;\nimport fi.hut.soberit.agilefant.model.Login;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.security.SecurityUtil;\n\n@Component(\"loginContextAction\")\n@Scope(\"prototype\")\npublic class LoginContextAction extends ActionSupport {\n\n    private static final long serialVersionUID = -477483113446767662L;\n\n    @Autowired\n    private SettingBusiness settingBusiness;\n    \n    @Autowired\n    private BacklogBusiness backlogBusiness;\n    \n    @Autowired\n    private UserBusiness userBusiness;\n    \n    @Autowired\n    private LoginBusiness loginBusiness;\n    \n\n    @Override\n    public String execute(){\n        saveLoginInformation();\n        \n        if (loginBusiness.retrieveLoginCountByUser(getLoggedInUser()) < 2) {\n            return \"help\";\n        }\n        else if (settingBusiness.isDailyWork()) {\n            return \"dailyWork\";\n        }\n        else {\n            return \"selectBacklog\";\n        }\n    }\n    \n    private void saveLoginInformation() {\n        User loggedUser = getLoggedInUser();\n        DateTime now = new DateTime();\n        Login login = new Login();\n        login.setUser(loggedUser);\n        login.setTime(now);\n        \n        loginBusiness.store(login);\n    }\n    \n    private User getLoggedInUser() {\n        return SecurityUtil.getLoggedUser();\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\MenuAction.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["MenuAction"], "AN": ["serialVersionUID", "menuBusiness", "menuData", "assignmentData"], "SCS_VariableDeclarator": ["serialVersionUID", "menuBusiness", "menuData", "assignmentData"], "MN": ["constructBacklogMenuData", "constructAssignmentData", "getMenuData", "setMenuBusiness", "getAssignmentData"], "PN": ["menuBusiness"], "SCS_MemberReference": ["menuData", "SUCCESS", "assignmentData", "SUCCESS", "menuData", "menuBusiness", "menuBusiness", "assignmentData"], "SCS_ClassReference": ["menuBusiness", "menuBusiness", "SecurityUtil"], "SCS_MethodInvocation": ["constructBacklogMenuData", "constructMyAssignmentsData", "getLoggedUser"], "CO": ["/**\n * The action class for populating the lefthand menu.\n * \n * @author rjokelai\n */"], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport java.util.List;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.stereotype.Component;\n\nimport com.opensymphony.xwork2.Action;\nimport com.opensymphony.xwork2.ActionSupport;\n\nimport fi.hut.soberit.agilefant.business.MenuBusiness;\nimport fi.hut.soberit.agilefant.security.SecurityUtil;\nimport fi.hut.soberit.agilefant.transfer.MenuDataNode;\n\n/**\n * The action class for populating the lefthand menu.\n * \n * @author rjokelai\n */\n@Component(\"menuAction\")\n@Scope(\"prototype\")\npublic class MenuAction extends ActionSupport {\n\n    private static final long serialVersionUID = -4817943410890249969L;\n\n    @Autowired\n    private MenuBusiness menuBusiness;\n    \n    private List<MenuDataNode> menuData;\n    private List<MenuDataNode> assignmentData;    \n    \n    public String constructBacklogMenuData() {\n        menuData = menuBusiness.constructBacklogMenuData();\n        return Action.SUCCESS;\n    }\n    \n    public String constructAssignmentData() {\n        assignmentData = menuBusiness.constructMyAssignmentsData(SecurityUtil.getLoggedUser());\n        return Action.SUCCESS;\n    }\n\n    public List<MenuDataNode> getMenuData() {\n        return menuData;\n    }\n\n    public void setMenuBusiness(MenuBusiness menuBusiness) {\n        this.menuBusiness = menuBusiness;\n    }\n    \n    public List<MenuDataNode> getAssignmentData() {\n        return assignmentData;\n    }\n    \n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\MultipleStoryAction.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["MultipleStoryAction"], "AN": ["labelNames", "state", "storyIds", "storyBatchBusiness"], "SCS_VariableDeclarator": ["labelNames", "state", "storyIds", "storyBatchBusiness"], "MN": ["updateMultipleStories", "getState", "setState", "getStoryIds", "setStoryIds", "getLabelNames", "setLabelNames"], "PN": ["state", "storyIds", "labelNames"], "SCS_ClassReference": ["storyBatchBusiness"], "SCS_MethodInvocation": ["modifyMultiple"], "SCS_MemberReference": ["storyIds", "state", "labelNames", "SUCCESS", "state", "state", "state", "storyIds", "storyIds", "storyIds", "labelNames", "labelNames", "labelNames"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.stereotype.Component;\n\nimport com.opensymphony.xwork2.Action;\n\nimport fi.hut.soberit.agilefant.business.StoryBatchBusiness;\nimport fi.hut.soberit.agilefant.model.StoryState;\n\n@Scope(\"prototype\")\n@Component(\"multipleStoryAction\")\npublic class MultipleStoryAction {\n    \n    private List<String> labelNames = new ArrayList<String>();\n    private StoryState state = null;\n    private Set<Integer> storyIds = new HashSet<Integer>();\n    \n    @Autowired\n    private StoryBatchBusiness storyBatchBusiness;\n    \n    \n    public String updateMultipleStories() {\n        storyBatchBusiness.modifyMultiple(storyIds, state, labelNames);\n        return Action.SUCCESS;\n    }\n\n    \n    public StoryState getState() {\n        return state;\n    }\n\n    public void setState(StoryState state) {\n        this.state = state;\n    }\n\n    public Set<Integer> getStoryIds() {\n        return storyIds;\n    }\n\n    public void setStoryIds(Set<Integer> storyIds) {\n        this.storyIds = storyIds;\n    }\n\n    public List<String> getLabelNames() {\n        return labelNames;\n    }\n\n    public void setLabelNames(List<String> labelNames) {\n        this.labelNames = labelNames;\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\PasswordAction.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["PasswordAction"], "AN": ["serialVersionUID", "passwordBusiness", "userBusiness", "name", "email"], "SCS_VariableDeclarator": ["serialVersionUID", "passwordBusiness", "userBusiness", "name", "email", "user", "user_email"], "MN": ["generate", "getName", "setName", "getEmail", "setEmail", "setPasswordBusiness", "setUserBusiness"], "PN": ["name", "email", "passwordBusiness", "userBusiness"], "SCS_VariableDeclaration": ["User", "String"], "SCS_ClassReference": ["userBusiness", "user", "user_email", "passwordBusiness", "user", "", "user"], "SCS_MethodInvocation": ["retrieveByLoginName", "getEmail", "equalsIgnoreCase", "generateAndMailPassword", "getId", "addActionMessage", "getEmail"], "SCS_MemberReference": ["name", "user", "ERROR", "user_email", "email", "ERROR", "SUCCESS", "name", "name", "name", "email", "email", "email", "passwordBusiness", "passwordBusiness", "userBusiness", "userBusiness"], "CO": ["/**\n * Action for generating & mailing new passwords to <code>Users</code> who\n * have lost theirs.\n * \n * @author Teemu Ilmonen\n * \n */", "/**\n     * Generates a new password for an <code>User</code>\n     * \n     * @return\n     */", "// User not found."], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.stereotype.Component;\n\nimport com.opensymphony.xwork2.Action;\nimport com.opensymphony.xwork2.ActionSupport;\n\nimport fi.hut.soberit.agilefant.business.PasswordBusiness;\nimport fi.hut.soberit.agilefant.business.UserBusiness;\nimport fi.hut.soberit.agilefant.model.User;\n\n/**\n * Action for generating & mailing new passwords to <code>Users</code> who\n * have lost theirs.\n * \n * @author Teemu Ilmonen\n * \n */\n@Component(\"passwordAction\")\n@Scope(\"prototype\")\npublic class PasswordAction extends ActionSupport {\n    private static final long serialVersionUID = -5808987058415748396L;\n\n    @Autowired\n    private PasswordBusiness passwordBusiness;\n\n    @Autowired\n    private UserBusiness userBusiness;\n\n    private String name;\n\n    private String email;\n\n    /**\n     * Generates a new password for an <code>User</code>\n     * \n     * @return\n     */\n    public String generate() {\n        User user = userBusiness.retrieveByLoginName(name);\n        if (user == null) {\n            return Action.ERROR; // User not found.\n        }\n        else {\n            String user_email = user.getEmail();\n            if (user_email == null || !user_email.equalsIgnoreCase(email)) {\n                return Action.ERROR;\n            }\n        }\n\n        passwordBusiness.generateAndMailPassword(user.getId());\n        addActionMessage(\"A new password has been sent to: \" + user.getEmail()\n                + \".\");\n        return Action.SUCCESS;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        this.email = email;\n    }\n\n    public void setPasswordBusiness(PasswordBusiness passwordBusiness) {\n        this.passwordBusiness = passwordBusiness;\n    }\n\n    public void setUserBusiness(UserBusiness userBusiness) {\n        this.userBusiness = userBusiness;\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\PortletAction.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["PortletAction"], "AN": ["serialVersionUID", "collectionId", "objectId", "collection", "contents", "widgetGrid", "collections", "agilefantWidgetBusiness", "widgetCollectionBusiness"], "SCS_VariableDeclarator": ["serialVersionUID", "collectionId", "objectId", "collection", "contents", "widgetGrid", "collections", "agilefantWidgetBusiness", "widgetCollectionBusiness", "currentUser"], "MN": ["retrieve", "store", "create", "delete", "initializePrefetchedData", "getContextName", "getContextObjectId", "getContents", "setContents", "getWidgetGrid", "getViewId", "setViewId", "getCollectionId", "setCollectionId", "getCollection", "setCollection", "getObjectId", "setObjectId", "getCollections", "getDeleteAccess"], "PN": ["objectId", "contents", "viewId", "collectionId", "collection", "objectId"], "SCS_MemberReference": ["collectionId", "SUCCESS", "collections", "contents", "collectionId", "widgetGrid", "contents", "SUCCESS", "collection", "SUCCESS", "collection", "collectionId", "SUCCESS", "collectionId", "SUCCESS", "collection", "objectId", "collectionId", "contents", "contents", "contents", "widgetGrid", "collectionId", "collectionId", "viewId", "collectionId", "collectionId", "collectionId", "collection", "collection", "collection", "objectId", "objectId", "objectId", "collections"], "SCS_ClassReference": ["widgetCollectionBusiness", "widgetCollectionBusiness", "agilefantWidgetBusiness", "widgetCollectionBusiness", "widgetCollectionBusiness", "collection", "widgetCollectionBusiness", "widgetCollectionBusiness", "SecurityUtil", "currentUser"], "SCS_MethodInvocation": ["getCollections", "retrieve", "generateWidgetGrid", "store", "createPortfolio", "getId", "delete", "retrieveDetached", "getLoggedUser", "isAdmin"], "SCS_VariableDeclaration": ["User"], "CO": ["/*\n     * AUTOGENERATED LIST OF SETTERS AND GETTERS\n     */"], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.stereotype.Component;\n\nimport com.opensymphony.xwork2.Action;\nimport com.opensymphony.xwork2.ActionSupport;\n\nimport fi.hut.soberit.agilefant.annotations.PrefetchId;\nimport fi.hut.soberit.agilefant.business.AgilefantWidgetBusiness;\nimport fi.hut.soberit.agilefant.business.WidgetCollectionBusiness;\nimport fi.hut.soberit.agilefant.model.AgilefantWidget;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.model.WidgetCollection;\nimport fi.hut.soberit.agilefant.security.SecurityUtil;\n\n@Component(\"portletAction\")\n@Scope(\"prototype\")\npublic class PortletAction extends ActionSupport implements CRUDAction, ContextAware, Prefetching {\n\n    private static final long serialVersionUID = -999270161618784027L;\n\n    @PrefetchId\n    private int collectionId = 0;\n    \n    private int objectId = 0;\n    \n    private WidgetCollection collection;\n    \n    private WidgetCollection contents;\n    private List<List<AgilefantWidget>> widgetGrid = new ArrayList<List<AgilefantWidget>>();\n\n    private List<WidgetCollection> collections = new ArrayList<WidgetCollection>();\n    \n    @Autowired\n    private AgilefantWidgetBusiness agilefantWidgetBusiness;\n    \n    @Autowired\n    private WidgetCollectionBusiness widgetCollectionBusiness;\n    \n    public String retrieve() {\n        if (collectionId == 0) {\n            return Action.SUCCESS + \"_projectPortfolio\";\n        }\n        collections = widgetCollectionBusiness.getCollections();\n        contents = widgetCollectionBusiness.retrieve(collectionId); \n        widgetGrid = agilefantWidgetBusiness.generateWidgetGrid(contents, 2);\n        return Action.SUCCESS;\n    }\n    \n    public String store() {\n        widgetCollectionBusiness.store(collection);\n        return Action.SUCCESS;\n    }\n    \n    public String create() {\n        collection = widgetCollectionBusiness.createPortfolio();\n        collectionId = collection.getId();\n        return Action.SUCCESS;\n    }\n\n    public String delete() {\n        widgetCollectionBusiness.delete(collectionId);\n        return Action.SUCCESS;\n    }\n    \n\n    public void initializePrefetchedData(int objectId) {\n        collection = widgetCollectionBusiness.retrieveDetached(objectId);\n    }\n    \n    \n    /*\n     * AUTOGENERATED LIST OF SETTERS AND GETTERS\n     */\n    \n    public String getContextName() {\n        return \"portfolio\";\n    }\n    public int getContextObjectId() {\n        return collectionId;\n    }\n    \n    public WidgetCollection getContents() {\n        return contents;\n    }\n\n    public void setContents(WidgetCollection contents) {\n        this.contents = contents;\n    }\n\n    public List<List<AgilefantWidget>> getWidgetGrid() {\n        return widgetGrid;\n    }\n    \n    public int getViewId() {\n        return collectionId;\n    }\n    \n    public void setViewId(int viewId) {\n        this.collectionId = viewId;\n    }\n\n    public int getCollectionId() {\n        return collectionId;\n    }\n\n    public void setCollectionId(int collectionId) {\n        this.collectionId = collectionId;\n    }\n\n    public WidgetCollection getCollection() {\n        return collection;\n    }\n\n    public void setCollection(WidgetCollection collection) {\n        this.collection = collection;\n    }\n\n    public int getObjectId() {\n        return objectId;\n    }\n\n    public void setObjectId(int objectId) {\n        this.objectId = objectId;\n    }\n\n    public List<WidgetCollection> getCollections() {\n        return collections;\n    }\n    \n    public boolean getDeleteAccess() {\n        User currentUser = SecurityUtil.getLoggedUser();\n        return currentUser.isAdmin();\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\Prefetching.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["Prefetching"], "MN": ["initializePrefetchedData"], "PN": ["objectId"], "CO": ["/**\n     * This method should pre-fetch the data\n     */"], "CODE": "package fi.hut.soberit.agilefant.web;\n\npublic interface Prefetching {\n\n    /**\n     * This method should pre-fetch the data\n     */\n    public void initializePrefetchedData(int objectId);\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\PrefetchInterceptor.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["PrefetchInterceptor"], "AN": ["serialVersionUID"], "SCS_VariableDeclarator": ["serialVersionUID", "action", "context", "params", "id", "idFieldName", "idObj", "idStr", "actionFields", "field"], "MN": ["intercept", "resolveIdFieldName"], "PN": ["invocation", "targetAction"], "SCS_ClassReference": ["invocation", "invocation", "invocation", "context", null, "params", "Integer", "action", "invocation", "targetAction", null, "field", "PrefetchId", "field"], "SCS_MethodInvocation": ["getAction", "getAction", "getInvocationContext", "getParameters", "resolveIdFieldName", "get", "parseInt", "initializePrefetchedData", "invoke", "getClass", "getDeclaredFields", "isAnnotationPresent", "getName"], "SCS_VariableDeclaration": ["Prefetching", "ActionContext", "Map", "int", "String", "Object", "String", "Field", "Field"], "SCS_MemberReference": ["action", "idFieldName", "idObj", "id", "idStr", "id", "actionFields"], "CO": ["/**\n * Interceptor, which initializes object data before setting the data from ajax\n * request.\n * \n * Note: this interceptor must be placed before the parameters interceptor in the \n * interceptor stack or the parameter values will be overwritten by the pre-fetch data!\n * \n * <p>\n * Used for single field editing.\n * \n * @author rjokelai\n */"], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport java.lang.reflect.Field;\nimport java.util.Map;\n\nimport org.springframework.stereotype.Component;\n\nimport com.opensymphony.xwork2.ActionContext;\nimport com.opensymphony.xwork2.ActionInvocation;\nimport com.opensymphony.xwork2.interceptor.AbstractInterceptor;\n\nimport fi.hut.soberit.agilefant.annotations.PrefetchId;\n\n/**\n * Interceptor, which initializes object data before setting the data from ajax\n * request.\n * \n * Note: this interceptor must be placed before the parameters interceptor in the \n * interceptor stack or the parameter values will be overwritten by the pre-fetch data!\n * \n * <p>\n * Used for single field editing.\n * \n * @author rjokelai\n */\n@Component(\"prefetchInterceptor\")\npublic class PrefetchInterceptor extends AbstractInterceptor {\n\n    private static final long serialVersionUID = 1668784370092320107L;\n\n    public String intercept(ActionInvocation invocation) throws Exception {\n        if (invocation.getAction() instanceof Prefetching) {\n            Prefetching action = ((Prefetching) invocation.getAction());\n\n            ActionContext context = invocation.getInvocationContext();\n            Map<String, Object> params = context.getParameters();\n            int id = 0;\n\n            try {\n                String idFieldName = this.resolveIdFieldName(action);\n                Object idObj = params.get(idFieldName);\n                String[] idStr = (String[]) idObj;\n                id = Integer.parseInt(idStr[0]);\n            } catch (Exception e) {\n                throw new IllegalArgumentException();\n            }\n\n            action.initializePrefetchedData(id);\n        }\n        return invocation.invoke();\n    }\n\n    private String resolveIdFieldName(Prefetching targetAction)\n            throws NoSuchFieldException {\n        Field[] actionFields = targetAction.getClass().getDeclaredFields();\n        for (Field field : actionFields) {\n            if (field.isAnnotationPresent(PrefetchId.class)) {\n                return field.getName();\n            }\n        }\n        throw new NoSuchFieldException();\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\ProductAction.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["ProductAction"], "AN": ["serialVersionUID", "productBusiness", "iterationBusiness", "backlogBusiness", "storyBusiness", "authorizationBusiness", "productId", "product", "products", "childBacklogs", "stories", "scheduleStart", "scheduleEnd", "teamIds", "teamsChanged"], "SCS_VariableDeclarator": ["serialVersionUID", "productBusiness", "iterationBusiness", "backlogBusiness", "storyBusiness", "authorizationBusiness", "productId", "product", "products", "childBacklogs", "stories", "scheduleStart", "scheduleEnd", "teamIds", "teamsChanged", "schedule", "product", "teams"], "MN": ["create", "delete", "retrieve", "retrieveLeafStories", "store", "retrieveAll", "retrieveAllTimeSheets", "retrieveProjects", "initializePrefetchedData", "getContextName", "getContextObjectId", "getProduct", "setProduct", "getProductId", "setProductId", "getProducts", "setProducts", "setProductBusiness", "setStoryBusiness", "getStories", "getChildBacklogs", "getScheduleStart", "getScheduleEnd", "setTeamsChanged", "getTeamIds", "setTeamIds"], "PN": ["objectId", "product", "productId", "products", "productBusiness", "storyBusiness", "teamsChanged", "teamIds"], "SCS_MemberReference": ["productId", "product", "stories", "SUCCESS", "productId", "SUCCESS", "product", "productId", "stories", "product", "product", "scheduleEnd", "second", "scheduleStart", "first", "SUCCESS", "productId", "product", "product", "SUCCESS", "teamsChanged", "teams", "teamIds", "product", "productBusiness", "productId", "product", "teams", "productId", "product", "SUCCESS", "products", "SUCCESS", "products", "SUCCESS", "product", "productBusiness", "productId", "childBacklogs", "productBusiness", "product", "SUCCESS", "product", "objectId", "productId", "product", "product", "product", "productId", "productId", "productId", "products", "products", "products", "productBusiness", "productBusiness", "storyBusiness", "storyBusiness", "stories", "childBacklogs", "scheduleStart", "scheduleEnd", "teamsChanged", "teamsChanged", "teamIds", "teamIds", "teamIds"], "SCS_ClassReference": ["productBusiness", "productBusiness", "storyBusiness", "productBusiness", "DateTimeUtils", "DateTimeUtils", "productBusiness", "productBusiness", null, null, "productBusiness", "productBusiness", null, null, "productBusiness"], "SCS_MethodInvocation": ["delete", "retrieve", "retrieveStoriesInBacklog", "calculateProductSchedule", "roundToNearestMidnight", "roundToNearestMidnight", "retrieve", "retrieveLeafStoriesOnly", "store", "getId", "retrieveAll", "storeAllTimeSheets", "retrieve", "retrieveProjects", "retrieve"], "SCS_VariableDeclaration": ["Pair", "Product", "Set"], "CO": ["// Round the dates"], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.Iterator;\n\nimport org.joda.time.DateTime;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.stereotype.Component;\n\nimport com.opensymphony.xwork2.Action;\n\nimport fi.hut.soberit.agilefant.annotations.PrefetchId;\nimport fi.hut.soberit.agilefant.business.AuthorizationBusiness;\nimport fi.hut.soberit.agilefant.business.BacklogBusiness;\nimport fi.hut.soberit.agilefant.business.IterationBusiness;\nimport fi.hut.soberit.agilefant.business.ProductBusiness;\nimport fi.hut.soberit.agilefant.business.StoryBusiness;\nimport fi.hut.soberit.agilefant.model.Product;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.security.SecurityUtil;\nimport fi.hut.soberit.agilefant.transfer.ProjectTO;\nimport fi.hut.soberit.agilefant.util.DateTimeUtils;\nimport fi.hut.soberit.agilefant.util.Pair;\n\n@Component(\"productAction\")\n@Scope(\"prototype\")\npublic class ProductAction implements CRUDAction, Prefetching, ContextAware {\n\n    private static final long serialVersionUID = 1834399750050895118L;\n\n    @Autowired\n    private ProductBusiness productBusiness;\n    \n    @Autowired \n    IterationBusiness iterationBusiness;\n    \n    @Autowired \n    BacklogBusiness backlogBusiness;\n    \n    @Autowired \n    StoryBusiness storyBusiness;\n    \n    @Autowired\n    AuthorizationBusiness authorizationBusiness;\n    \n    @PrefetchId\n    private int productId;\n\n    private Product product = new Product();\n\n    private Collection<Product> products = new ArrayList<Product>();\n    \n    private List<ProjectTO> childBacklogs = new ArrayList<ProjectTO>();\n    \n    private List<Story> stories = new ArrayList<Story>();\n    \n    private DateTime scheduleStart;\n    private DateTime scheduleEnd;\n    \n    private Set<Integer> teamIds = new HashSet<Integer>();\n    \n    private boolean teamsChanged;\n\n    public String create() {\n        productId = 0;\n        product = new Product();\n        stories = new ArrayList<Story>();\n        return Action.SUCCESS;\n    }\n\n    public String delete() {\n        productBusiness.delete(productId);\n        return Action.SUCCESS;\n    }\n\n    public String retrieve() {\n        product = productBusiness.retrieve(productId);\n        stories = storyBusiness.retrieveStoriesInBacklog(product);\n        Pair<DateTime, DateTime> schedule = productBusiness.calculateProductSchedule(product);\n        // Round the dates\n        this.scheduleEnd = DateTimeUtils.roundToNearestMidnight(schedule.second);\n        this.scheduleStart = DateTimeUtils.roundToNearestMidnight(schedule.first);\n        return Action.SUCCESS;\n    }\n    \n    public String retrieveLeafStories() {\n        Product product = productBusiness.retrieve(productId);\n        this.product = productBusiness.retrieveLeafStoriesOnly(product);\n        return Action.SUCCESS;\n    }\n\n    public String store() {\n        Set<Integer> teams = null;\n        if (teamsChanged) {\n            teams = teamIds;\n        }\n        \n        this.product = this.productBusiness.store(productId, product, teams);\n        this.productId = this.product.getId();\n        return Action.SUCCESS;\n    }\n\n    public String retrieveAll() {\n        products = productBusiness.retrieveAll();\n        return Action.SUCCESS;\n    }\n    \n    public String retrieveAllTimeSheets() {\n    \tproductBusiness.storeAllTimeSheets(products);\n        return Action.SUCCESS;    \n    }\n    \n    public String retrieveProjects() {\n        this.product = this.productBusiness.retrieve(productId);\n        this.childBacklogs = this.productBusiness.retrieveProjects(product);\n        return Action.SUCCESS;\n    }\n    public void initializePrefetchedData(int objectId) {\n       product = productBusiness.retrieve(objectId);\n    }\n    \n    public String getContextName() {\n        return \"backlog\";\n    }\n    \n    public int getContextObjectId() {\n        return productId;\n    }\n    \n\n    public Product getProduct() {\n        return product;\n    }\n\n    public void setProduct(Product product) {\n        this.product = product;\n    }\n\n    public int getProductId() {\n        return productId;\n    }\n\n    public void setProductId(int productId) {\n        this.productId = productId;\n    }\n\n    public Collection<Product> getProducts() {\n        return products;\n    }\n\n    public void setProducts(Collection<Product> products) {\n        this.products = products;\n    }\n\n    public void setProductBusiness(ProductBusiness productBusiness) {\n        this.productBusiness = productBusiness;\n    }\n    \n    public void setStoryBusiness(StoryBusiness storyBusiness) {\n        this.storyBusiness = storyBusiness;\n    }\n\n    public List<Story> getStories() {\n        return stories;\n    }\n\n    public List<ProjectTO> getChildBacklogs() {\n        return childBacklogs;\n    }\n\n    public DateTime getScheduleStart() {\n        return scheduleStart;\n    }\n\n    public DateTime getScheduleEnd() {\n        return scheduleEnd;\n    }\n    \n    public void setTeamsChanged(boolean teamsChanged) {\n        this.teamsChanged = teamsChanged;\n    }\n\n    public Set<Integer> getTeamIds() {\n        return teamIds;\n    }\n\n    public void setTeamIds(Set<Integer> teamIds) {\n        this.teamIds = teamIds;\n    }\n        \n}", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\ProjectAction.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["ProjectAction"], "AN": ["serialVersionUID", "projectId", "productId", "rankUnderId", "rankOverId", "project", "projectMetrics", "totalSpentEffort", "stories", "leafStories", "assigneeIds", "assigneesChanged", "confirmationString", "iterations", "projectBusiness", "storyBusiness", "iterationBusiness"], "SCS_VariableDeclarator": ["serialVersionUID", "projectId", "productId", "rankUnderId", "rankOverId", "project", "projectMetrics", "totalSpentEffort", "stories", "leafStories", "assigneeIds", "assigneesChanged", "confirmationString", "iterations", "projectBusiness", "storyBusiness", "iterationBusiness", "iteration", "iterationMetrics", "assignees"], "MN": ["iterationList", "rankProject", "rankOverProject", "unrankProject", "projectMetrics", "projectTotalSpentEffort", "projectData", "create", "retrieve", "store", "delete", "initializePrefetchedData", "moveToRanked", "getContextName", "getContextObjectId", "getProject", "setProject", "setProjectBusiness", "setStoryBusiness", "getProjectMetrics", "getProjectId", "setProjectId", "getStories", "getLeafStories", "getRankUnderId", "setRankUnderId", "getAssigneeIds", "setAssigneeIds", "setAssigneesChanged", "isAssigneesChanged", "setRankOverId", "getRankOverId", "setConfirmationString", "getProductId", "setProductId", "getIterations", "setIterations", "getTotalSpentEffort", "setTotalSpentEffort"], "PN": ["objectId", "project", "projectBusiness", "storyBusiness", "projectId", "rankUnderId", "assigneeIds", "assigneesChanged", "rankOverId", "confirmationString", "productId", "iterations", "totalSpentEffort"], "SCS_MemberReference": ["iterations", "projectId", "iterations", "iteration", "iterationMetrics", "SUCCESS", "project", "projectId", "rankUnderId", "SUCCESS", "project", "projectId", "rankOverId", "SUCCESS", "projectId", "SUCCESS", "project", "projectId", "projectMetrics", "project", "SUCCESS", "project", "projectId", "totalSpentEffort", "project", "SUCCESS", "project", "projectId", "SUCCESS", "project", "stories", "leafStories", "iterations", "SUCCESS", "project", "projectBusiness", "projectId", "stories", "project", "leafStories", "projectId", "iterations", "projectId", "SUCCESS", "assigneesChanged", "assignees", "assigneeIds", "project", "projectBusiness", "projectId", "productId", "project", "assignees", "SUCCESS", "productId", "projectId", "projectId", "SUCCESS", "ERROR", "project", "projectBusiness", "objectId", "projectBusiness", "projectId", "SUCCESS", "projectId", "project", "project", "project", "projectBusiness", "projectBusiness", "storyBusiness", "storyBusiness", "projectMetrics", "projectId", "projectId", "projectId", "stories", "leafStories", "rankUnderId", "rankUnderId", "rankUnderId", "assigneeIds", "assigneeIds", "assigneeIds", "assigneesChanged", "assigneesChanged", "assigneesChanged", "rankOverId", "rankOverId", "rankOverId", "confirmationString", "confirmationString", "productId", "productId", "productId", "iterations", "iterations", "iterations", "totalSpentEffort", "totalSpentEffort", "totalSpentEffort"], "SCS_ClassReference": ["projectBusiness", "iterationBusiness", "iteration", "projectBusiness", "projectBusiness", "projectBusiness", "projectBusiness", "projectBusiness", "projectBusiness", "projectBusiness", "projectBusiness", "project", "project", null, "storyBusiness", "projectBusiness", "projectBusiness", null, "confirmationString", "projectBusiness", null, null, "projectBusiness", null, null], "SCS_MethodInvocation": ["retrieveProjectIterations", "getIterationMetrics", "setIterationMetrics", "rankUnderProject", "rankOverProject", "unrankProject", "retrieve", "getProjectMetrics", "retrieve", "getProjectTotalSpentEffort", "getProjectData", "setStartDate", "setEndDate", "retrieve", "retrieveStoriesInBacklog", "retrieveLeafStories", "retrieveProjectIterations", "store", "equalsIgnoreCase", "retrieve", "getParent", "getId", "delete", "retrieve", "moveToRanked"], "SCS_VariableDeclaration": ["IterationTO", "IterationMetrics", "Set"], "CO": ["//GETTERS AND SETTERS"], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport org.joda.time.DateTime;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.stereotype.Component;\n\nimport com.opensymphony.xwork2.Action;\n\nimport fi.hut.soberit.agilefant.annotations.PrefetchId;\nimport fi.hut.soberit.agilefant.business.IterationBusiness;\nimport fi.hut.soberit.agilefant.business.ProjectBusiness;\nimport fi.hut.soberit.agilefant.business.StoryBusiness;\nimport fi.hut.soberit.agilefant.model.ExactEstimate;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.Project;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.transfer.IterationMetrics;\nimport fi.hut.soberit.agilefant.transfer.IterationTO;\nimport fi.hut.soberit.agilefant.transfer.ProjectMetrics;\nimport fi.hut.soberit.agilefant.transfer.ProjectTO;\nimport fi.hut.soberit.agilefant.transfer.StoryTO;\nimport fi.hut.soberit.agilefant.util.StoryFilters;\n\n@Component(\"projectAction\")\n@Scope(\"prototype\")\npublic class ProjectAction implements CRUDAction, Prefetching, ContextAware {\n    \n    private static final long serialVersionUID = -4636900464606739866L;\n\n    @PrefetchId\n    private int projectId;\n    \n    private Integer productId = null;\n\n    private Integer rankUnderId = null;\n    \n    private Integer rankOverId = null;\n\n    private Project project;\n    \n    private ProjectMetrics projectMetrics;\n    \n    private long totalSpentEffort;\n    \n    private List<Story> stories;\n    \n    private List<StoryTO> leafStories;\n\n    private Set<Integer> assigneeIds = new HashSet<Integer>();\n    \n    private boolean assigneesChanged = false;\n    \n    private String confirmationString;\n    \n    private List<IterationTO> iterations;\n    \n    @Autowired\n    private ProjectBusiness projectBusiness;\n    \n    @Autowired \n    StoryBusiness storyBusiness;\n    \n    @Autowired \n    IterationBusiness iterationBusiness;\n    \n    public String iterationList() {\n        iterations = projectBusiness.retrieveProjectIterations(projectId);\n        for (IterationTO iteration : iterations) {\n        \tIterationMetrics iterationMetrics = iterationBusiness.getIterationMetrics(iteration);\n        \titeration.setIterationMetrics(iterationMetrics);\n        }\n        return Action.SUCCESS;\n    }\n    \n    public String rankProject() {\n        project = projectBusiness.rankUnderProject(projectId, rankUnderId);\n        return Action.SUCCESS;\n    }\n    \n    public String rankOverProject() {\n        project = projectBusiness.rankOverProject(projectId, rankOverId);\n        return Action.SUCCESS;\n    }\n    \n    public String unrankProject() {\n        projectBusiness.unrankProject(projectId);\n        return Action.SUCCESS;\n    }\n    \n    public String projectMetrics() {\n        project = projectBusiness.retrieve(projectId);\n        projectMetrics = projectBusiness.getProjectMetrics(project);\n        return Action.SUCCESS;\n    }\n    \n    public String projectTotalSpentEffort() {\n        project = projectBusiness.retrieve(projectId);\n        this.totalSpentEffort = projectBusiness.getProjectTotalSpentEffort(project);\n        return Action.SUCCESS;\n    }\n    \n    public String projectData() {\n        project = projectBusiness.getProjectData(projectId);\n        return Action.SUCCESS;\n    }\n    \n    public String create() {\n        project = new Project();\n        project.setStartDate(new DateTime());\n        project.setEndDate(new DateTime());\n        stories = new ArrayList<Story>();\n        leafStories = new ArrayList<StoryTO>();\n        iterations = new ArrayList<IterationTO>();\n        return Action.SUCCESS;\n    }\n\n    public String retrieve() {\n        project = this.projectBusiness.retrieve(projectId);\n        stories = storyBusiness.retrieveStoriesInBacklog(project);\n        leafStories = projectBusiness.retrieveLeafStories(projectId, new StoryFilters());\n        iterations = projectBusiness.retrieveProjectIterations(projectId);\n        return Action.SUCCESS;\n    }\n    \n    public String store() {\n       Set<Integer> assignees = null;\n       if (assigneesChanged) {\n           assignees = assigneeIds;\n       }\n       project = this.projectBusiness.store(projectId, productId, project, assignees);\n       return Action.SUCCESS;\n    }\n    \n    public String delete() {\n        if(confirmationString.equalsIgnoreCase(\"yes\")) {\n            productId = projectBusiness.retrieve(projectId).getParent().getId();\n            projectBusiness.delete(projectId);\n            return Action.SUCCESS;\n        } else {\n            return Action.ERROR;\n        }\n    }\n\n    public void initializePrefetchedData(int objectId) {\n        this.project = this.projectBusiness.retrieve(objectId);        \n    }\n    \n    public String moveToRanked() {\n        this.projectBusiness.moveToRanked(projectId);\n        return Action.SUCCESS;\n    }\n    \n    public String getContextName() {\n        return \"backlog\";\n    }\n    \n    public int getContextObjectId() {\n        return projectId;\n    }\n    \n    \n    //GETTERS AND SETTERS\n    \n    public Project getProject() {\n        return project;\n    }\n\n    public void setProject(Project project) {\n        this.project = project;\n    }\n\t\n    public void setProjectBusiness(ProjectBusiness projectBusiness) {\n        this.projectBusiness = projectBusiness;\n    }\n    \n    public void setStoryBusiness(StoryBusiness storyBusiness) {\n        this.storyBusiness = storyBusiness;\n    }\n\n    public ProjectMetrics getProjectMetrics() {\n        return projectMetrics;\n    }\n\n    public int getProjectId() {\n        return projectId;\n    }\n\n    public void setProjectId(int projectId) {\n        this.projectId = projectId;\n    }\n\n    public List<Story> getStories() {\n        return stories;\n    }\n    \n    public List<StoryTO> getLeafStories() {\n        return leafStories;\n    }\n    \n    public Integer getRankUnderId() {\n        return rankUnderId;\n    }\n    public void setRankUnderId(Integer rankUnderId) {\n        this.rankUnderId = rankUnderId;\n    }\n    public Set<Integer> getAssigneeIds() {\n        return assigneeIds;\n    }\n    \n    public void setAssigneeIds(Set<Integer> assigneeIds) {\n        this.assigneeIds = assigneeIds;\n    }\n    \n    public void setAssigneesChanged(boolean assigneesChanged) {\n        this.assigneesChanged = assigneesChanged;\n    }\n    \n    public boolean isAssigneesChanged() {\n        return assigneesChanged;\n    }\n    \n    public void setRankOverId(Integer rankOverId) {\n        this.rankOverId = rankOverId;\n    }\n    public Integer getRankOverId() {\n        return rankOverId;\n    }\n   \n    public void setConfirmationString(String confirmationString) {\n        this.confirmationString = confirmationString;\n    }\n\n    public int getProductId() {\n        return productId;\n    }\n\n    public void setProductId(int productId) {\n        this.productId = productId;\n    }\n\n    public List<IterationTO> getIterations() {\n        return iterations;\n    }\n\n    public void setIterations(List<IterationTO> iterations) {\n        this.iterations = iterations;\n    }\n\n\tpublic long getTotalSpentEffort() {\n\t\treturn totalSpentEffort;\n\t}\n\n\tpublic void setTotalSpentEffort(long totalSpentEffort) {\n\t\tthis.totalSpentEffort = totalSpentEffort;\n\t}\n    \n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\ProjectPortfolioAction.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["ProjectPortfolioAction"], "AN": ["portfolioBusiness", "widgetCollectionBusiness", "collections", "portfolioData"], "SCS_VariableDeclarator": ["portfolioBusiness", "widgetCollectionBusiness", "collections", "portfolioData"], "MN": ["retrieve", "portfolioData", "getPortfolioData", "setPortfolioBusiness", "getContextName", "getContextObjectId", "getCollections"], "PN": ["portfolioBusiness"], "SCS_MemberReference": ["collections", "SUCCESS", "portfolioData", "SUCCESS", "portfolioData", "portfolioBusiness", "portfolioBusiness", "collections"], "SCS_ClassReference": ["widgetCollectionBusiness", "portfolioBusiness"], "SCS_MethodInvocation": ["getCollections", "getPortfolioData"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport java.util.List;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.stereotype.Component;\n\nimport com.opensymphony.xwork2.Action;\n\nimport fi.hut.soberit.agilefant.business.PortfolioBusiness;\nimport fi.hut.soberit.agilefant.business.WidgetCollectionBusiness;\nimport fi.hut.soberit.agilefant.model.WidgetCollection;\nimport fi.hut.soberit.agilefant.transfer.PortfolioTO;\n\n@Component(\"projectPortfolioAction\")\n@Scope(\"prototype\")\npublic class ProjectPortfolioAction implements ContextAware{\n\n    @Autowired\n    private PortfolioBusiness portfolioBusiness;\n\n    @Autowired\n    private WidgetCollectionBusiness widgetCollectionBusiness;\n    \n    private List<WidgetCollection> collections;\n    \n    private PortfolioTO portfolioData = new PortfolioTO();\n\n    public String retrieve() {\n        collections = widgetCollectionBusiness.getCollections();\n        return Action.SUCCESS;\n    }\n\n    public String portfolioData() {\n        portfolioData = portfolioBusiness.getPortfolioData();\n        return Action.SUCCESS;\n    }\n\n    public PortfolioTO getPortfolioData() {\n        return portfolioData;\n    }\n\n    public void setPortfolioBusiness(PortfolioBusiness portfolioBusiness) {\n        this.portfolioBusiness = portfolioBusiness;\n    }\n\n    public String getContextName() {\n        return \"portfolio\";\n    }\n\n    public int getContextObjectId() {\n        return 0;\n    }\n\n    public List<WidgetCollection> getCollections() {\n        return collections;\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\ReferenceIDAction.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["ReferenceIDAction"], "AN": ["serialVersionUID", "searchBusiness", "hash", "backlogId", "q"], "SCS_VariableDeclarator": ["serialVersionUID", "searchBusiness", "hash", "backlogId", "q", "res", "backlog", "task", "taskStory", "res", "backlog", "task", "taskStory"], "MN": ["execute", "execute1", "getHash", "getBacklogId", "setQ"], "PN": ["q"], "SCS_VariableDeclaration": ["NamedObject", "Backlog", "Task", "Story", "NamedObject", "Backlog", "Task", "Story"], "SCS_MemberReference": ["searchBusiness", "q", "res", "ERROR", "hash", "res", "backlog", "res", "backlogId", "res", "res", "backlog", "res", "backlogId", "backlog", "res", "backlogId", "res", "res", "taskStory", "backlog", "backlogId", "backlog", "backlogId", "backlog", "backlogId", "backlog", "backlog", "backlog", "ERROR", "searchBusiness", "q", "res", "ERROR", "hash", "res", "backlog", "res", "backlogId", "res", "res", "backlog", "res", "backlogId", "backlog", "res", "backlogId", "res", "res", "taskStory", "backlog", "backlogId", "backlog", "backlogId", "backlog", "backlogId", "backlog", "backlog", "backlog", "ERROR", "hash", "backlogId", "q", "q"], "SCS_ClassReference": [null, "res", null, "res", "backlog", "backlog", "backlog", "task", "taskStory", "taskStory", "backlog", "taskStory", "backlog", "task", "task", "backlog", null, "res", null, "res", "backlog", "backlog", "backlog", "task", "taskStory", "taskStory", "backlog", "taskStory", "backlog", "task", "task", "backlog"], "SCS_MethodInvocation": ["searchByReference", "getClass", "getCanonicalName", "getId", "getId", "getId", "getId", "getStory", "getIteration", "getIteration", "getId", "getBacklog", "getId", "getIteration", "getIteration", "getId", "searchByReference", "getClass", "getCanonicalName", "getId", "getId", "getId", "getId", "getStory", "getBacklog", "getBacklog", "getId", "getIteration", "getId", "getIteration", "getIteration", "getId"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.web;\n\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.stereotype.Component;\n\nimport com.opensymphony.xwork2.Action;\nimport com.opensymphony.xwork2.ActionSupport;\n\nimport fi.hut.soberit.agilefant.business.SearchBusiness;\nimport fi.hut.soberit.agilefant.business.StoryAccessBusiness;\nimport fi.hut.soberit.agilefant.model.Backlog;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.NamedObject;\nimport fi.hut.soberit.agilefant.model.Product;\nimport fi.hut.soberit.agilefant.model.Project;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.Task;\n\n@Component(\"referenceIDAction\")\n@Scope(\"prototype\")\npublic class ReferenceIDAction extends ActionSupport {\n    private static final long serialVersionUID = 6149968990623932750L;\n\n    @Autowired\n    private SearchBusiness searchBusiness;\n    \n    private String hash;\n    \n    private int backlogId;\n    \n    private String q;\n    \n    @Override\n    public String execute() {\n        NamedObject res = this.searchBusiness.searchByReference(q);\n        if(res == null) {\n            return Action.ERROR;\n        }\n        \n        hash = res.getClass().getCanonicalName() + \"_\" + res.getId();\n        Backlog backlog = null;\n        \n        if(res instanceof Backlog) {\n            backlog = (Backlog)res;\n            backlogId = backlog.getId();\n        } \n        \n        if(res instanceof Story) {\n            if (((Story)res).getIteration() != null) {\n                backlog = ((Story)res).getIteration();\n                backlogId = backlog.getId();\n            } else {\n                backlog = ((Story)res).getBacklog();\n                backlogId = backlog.getId();\n                }\n            }\n        \n        if(res instanceof Task) {\n        \tTask task = (Task)res;\n        \tStory taskStory = task.getStory();\n        \tif (taskStory != null) {\n        \t\tif (taskStory.getIteration() != null) {\n                    backlog = taskStory.getIteration();\n                    backlogId = backlog.getId();\n                } else {\n                    backlog = taskStory.getBacklog();\n                    backlogId = backlog.getId();\n                }\n            } else if (task.getIteration() != null) {\n            \tbacklog = task.getIteration();\n                backlogId = backlog.getId();\n            }\n        }\n        \n        if(backlog instanceof Iteration) {\n            return \"iteration\";\n        } else if(backlog instanceof Project) {\n            return \"project\";\n        } else if(backlog instanceof Product) {\n            return \"product\";\n        } \n        \n        return Action.ERROR;\n    }\n    \n    public String execute1() {\n        NamedObject res = this.searchBusiness.searchByReference(q);\n        if(res == null) {\n            return Action.ERROR;\n        }\n        \n        hash = res.getClass().getCanonicalName() + \"_\" + res.getId();\n        Backlog backlog = null;\n        \n        if(res instanceof Backlog) {\n            backlog = (Backlog)res;\n            backlogId = backlog.getId();\n        } \n        \n        if(res instanceof Story) {\n            if (((Story)res).getBacklog() != null) {\n                backlog = ((Story)res).getBacklog();\n                backlogId = backlog.getId();\n            } else {\n                backlog = ((Story)res).getIteration();\n                backlogId = backlog.getId();\n                }\n            }\n        \n        if(res instanceof Task) {\n        \tTask task = (Task)res;\n        \tStory taskStory = task.getStory();\n        \tif (taskStory != null) {\n        \t\tif (taskStory.getBacklog() != null) {\n                    backlog = taskStory.getBacklog();\n                    backlogId = backlog.getId();\n                } else {\n                    backlog = taskStory.getIteration();\n                    backlogId = backlog.getId();\n                    }\n            } else if (task.getIteration() != null) {\n        \t\tbacklog = task.getIteration();\n                backlogId = backlog.getId();\n        \t}\n        }\n        \n        if(backlog instanceof Iteration) {\n            return \"iteration\";\n        } else if(backlog instanceof Project) {\n            return \"project\";\n        } else if(backlog instanceof Product) {\n            return \"product\";\n        } \n        \n        return Action.ERROR;\n    }\n\n    public String getHash() {\n        return hash;\n    }\n\n    public int getBacklogId() {\n        return backlogId;\n    }\n\n    public void setQ(String q) {\n        this.q = q;\n    }\n}\n\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\RefreshUserInterceptor.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["RefreshUserInterceptor"], "AN": ["serialVersionUID", "userBusiness"], "SCS_VariableDeclarator": ["serialVersionUID", "userBusiness", "user", "userId"], "MN": ["destroy", "init", "intercept", "getLoggedInUser", "setUserBusiness"], "PN": ["invocation", "userBusiness"], "SCS_VariableDeclaration": ["User", "int"], "SCS_ClassReference": ["", "invocation", null, "invocation", null, null, "invocation", "SecurityUtil", "userBusiness"], "SCS_MethodInvocation": ["getLoggedInUser", "getStack", "set", "getStack", "set", "serialize", "invoke", "getLoggedUserId", "retrieve"], "SCS_MemberReference": ["user", "user", "userId", "userBusiness", "userBusiness"], "CO": ["/**\n * Interceptor, which ensures proper user-id is set during each request. Ie.\n * makes getLoggedUser - calls valid for struts stuff.\n */", "//push current user to the value stack"], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.stereotype.Component;\n\nimport com.opensymphony.xwork2.ActionInvocation;\nimport com.opensymphony.xwork2.interceptor.Interceptor;\n\nimport fi.hut.soberit.agilefant.business.UserBusiness;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.security.SecurityUtil;\nimport flexjson.JSONSerializer;\n\n/**\n * Interceptor, which ensures proper user-id is set during each request. Ie.\n * makes getLoggedUser - calls valid for struts stuff.\n */\n@Component(\"refreshUserInterceptor\")\n@Scope(\"prototype\")\npublic class RefreshUserInterceptor implements Interceptor {\n\n    private static final long serialVersionUID = 1668784370092320107L;\n\n    @Autowired\n    private UserBusiness userBusiness;\n\n    public void destroy() {\n    }\n\n    public void init() {\n    }\n    \n    public String intercept(ActionInvocation invocation) throws Exception {\n        User user = getLoggedInUser();\n\n        //push current user to the value stack\n        invocation.getStack().set(\"currentUser\", user);\n        invocation.getStack().set(\"currentUserJson\", new JSONSerializer().serialize(user));\n\n        return invocation.invoke();\n    }\n    \n    private User getLoggedInUser() {\n        int userId = SecurityUtil.getLoggedUserId();\n        return userBusiness.retrieve(userId);\n    }\n    \n    public void setUserBusiness(UserBusiness userBusiness) {\n        this.userBusiness = userBusiness;\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\ResolveSearchResultAction.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["ResolveSearchResultAction"], "AN": ["serialVersionUID", "storyBusiness", "taskBusiness", "targetClassName", "targetObjectId", "targetBacklogId"], "SCS_VariableDeclarator": ["serialVersionUID", "storyBusiness", "taskBusiness", "targetClassName", "targetObjectId", "targetBacklogId", "story", "i", "task"], "MN": ["execute", "resolveStoryContainer", "resolveTaskContainer", "setTargetObjectId", "setTargetClassName", "getTargetBacklogId", "getHash"], "PN": ["targetObjectId", "targetClassName"], "SCS_ClassReference": ["Story", null, null, "", "Iteration", null, null, "Project", null, null, "Product", null, null, "Task", null, null, "", null, "story", "i", "story", "story", null, "story", null, null, "task", "task", null, "task", null, null, "task", "task", null, "task", null, null, "task", null, "task", null, "task", null], "SCS_MethodInvocation": ["getCanonicalName", "equals", "resolveStoryContainer", "getCanonicalName", "equals", "getCanonicalName", "equals", "getCanonicalName", "equals", "getCanonicalName", "equals", "resolveTaskContainer", "retrieve", "getIteration", "getId", "getBacklog", "getBacklog", "getId", "getBacklog", "getId", "retrieve", "getStory", "getStory", "getIteration", "getStory", "getIteration", "getId", "getStory", "getStory", "getBacklog", "getStory", "getBacklog", "getId", "getStory", "getBacklog", "getStory", "getBacklog", "getIteration", "getId"], "SCS_MemberReference": ["targetClassName", "targetClassName", "targetBacklogId", "targetObjectId", "targetClassName", "targetBacklogId", "targetObjectId", "targetClassName", "targetBacklogId", "targetObjectId", "targetClassName", "ERROR", "storyBusiness", "targetObjectId", "i", "targetBacklogId", "targetBacklogId", "targetBacklogId", "taskBusiness", "targetObjectId", "targetBacklogId", "targetBacklogId", "targetBacklogId", "targetObjectId", "targetObjectId", "targetClassName", "targetClassName", "targetBacklogId", "targetClassName", "targetObjectId"], "SCS_VariableDeclaration": ["Story", "Iteration", "Task"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.stereotype.Component;\n\nimport com.opensymphony.xwork2.ActionSupport;\n\nimport fi.hut.soberit.agilefant.business.StoryBusiness;\nimport fi.hut.soberit.agilefant.business.TaskBusiness;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.Product;\nimport fi.hut.soberit.agilefant.model.Project;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.Task;\n\n\n@Component(\"resolveSearchResultAction\")\n@Scope(\"prototype\")\npublic class ResolveSearchResultAction extends ActionSupport {\n    private static final long serialVersionUID = -3551952340761514545L;\n    \n    @Autowired\n    private StoryBusiness storyBusiness;\n    @Autowired\n    private TaskBusiness taskBusiness;\n    \n    private String targetClassName = \"\";\n    private int targetObjectId = 0;\n    private int targetBacklogId;\n\n    @Override\n    public String execute() {\n        if(Story.class.getCanonicalName().equals(this.targetClassName)) {\n            return resolveStoryContainer();\n        } else if(Iteration.class.getCanonicalName().equals(this.targetClassName)) {\n            this.targetBacklogId = this.targetObjectId;\n            return \"iteration\";\n        } else if(Project.class.getCanonicalName().equals(this.targetClassName)) {\n            this.targetBacklogId = this.targetObjectId;\n            return \"project\";\n        } else if(Product.class.getCanonicalName().equals(this.targetClassName)) {\n            this.targetBacklogId = this.targetObjectId;\n            return \"product\";\n        } else if(Task.class.getCanonicalName().equals(this.targetClassName)) {\n            return resolveTaskContainer();\n        } else {\n            return ERROR;\n        }\n    }\n\n    private String resolveStoryContainer() {\n        Story story = this.storyBusiness.retrieve(targetObjectId);\n        Iteration i = story.getIteration();\n        if(i != null) {\n            this.targetBacklogId = i.getId();\n            return \"iteration\";\n        } else if(story.getBacklog() instanceof Project) {\n            this.targetBacklogId = story.getBacklog().getId();\n            return \"project\";\n        } else {\n            this.targetBacklogId = story.getBacklog().getId();\n            return \"product\";\n        }\n    }\n    \n    private String resolveTaskContainer() {\n        Task task = this.taskBusiness.retrieve(targetObjectId);\n        if(task.getStory() != null && task.getStory().getIteration() != null) {\n            this.targetBacklogId = task.getStory().getIteration().getId();\n            return \"iteration\";\n        }\n        else if(task.getStory() != null && task.getStory().getBacklog() != null) {\n            this.targetBacklogId = task.getStory().getBacklog().getId();\n            if(task.getStory().getBacklog() instanceof Iteration) {\n                return \"iteration\";\n            } else if(task.getStory().getBacklog() instanceof Project) {\n                return \"project\";\n            } else {\n                return \"product\";\n            }\n        }\n        else {\n            this.targetBacklogId = task.getIteration().getId();\n            return \"iteration\";\n        }\n    }\n\n    public void setTargetObjectId(int targetObjectId) {\n        this.targetObjectId = targetObjectId;\n    }\n\n    public void setTargetClassName(String targetClassName) {\n        this.targetClassName = targetClassName;\n    }\n\n    public int getTargetBacklogId() {\n        return targetBacklogId;\n    }\n    \n    public String getHash() {\n        return targetClassName + \"_\" + targetObjectId;\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\ROIterationAction.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["ROIterationAction"], "AN": ["serialVersionUID", "readonlyToken", "iteration", "iterationMetrics", "iterationBusiness"], "SCS_VariableDeclarator": ["serialVersionUID", "readonlyToken", "iteration", "iterationMetrics", "iterationBusiness"], "MN": ["fetchROIterationData", "execute", "create", "delete", "retrieve", "retrieveAll", "store", "initializePrefetchedData", "setReadonlyToken", "getReadonlyToken", "getIteration", "setIteration", "setIterationBusiness", "getIterationMetrics", "setIterationByToken"], "PN": ["objectId", "readonlyToken", "iteration", "iterationBusiness", "token"], "SCS_MemberReference": ["iteration", "readonlyToken", "iteration", "LOGIN", "iteration", "SUCCESS", "iteration", "readonlyToken", "SUCCESS", "SUCCESS", "SUCCESS", "SUCCESS", "SUCCESS", "SUCCESS", "readonlyToken", "readonlyToken", "readonlyToken", "readonlyToken", "iteration", "iteration", "iteration", "iterationBusiness", "iterationBusiness", "iterationMetrics", "iteration", "iterationBusiness", "token"], "SCS_ClassReference": ["iterationBusiness", "iterationBusiness", "iteration", "iterationBusiness", "iteration", "iterationBusiness", "", null], "SCS_MethodInvocation": ["retreiveIterationByReadonlyToken", "retrieve", "getId", "getIterationContents", "getId", "retreiveIterationByReadonlyToken", "setIterationByToken", "retreiveIterationByReadonlyToken"], "CO": ["//TODO FINNUCKS: This doesn't redirect to the login", "/**\n     * Create a new read only iteration object\n     */", "/**\n     * Delete an existing read only iteration object\n     */", "/**\n     * Edit a read only iteration object (Doesn't do anything)\n     */", "/**\n     * Store the read only iteration object (Doesn't do anything)\n     */"], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.stereotype.Component;\n\nimport com.opensymphony.xwork2.Action;\nimport com.opensymphony.xwork2.ActionSupport;\n\nimport fi.hut.soberit.agilefant.business.IterationBusiness;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.transfer.IterationMetrics;\n\n@Component(\"ROIterationAction\")\n@Scope(\"prototype\")\npublic class ROIterationAction extends ActionSupport implements CRUDAction, Prefetching {\n\n    private static final long serialVersionUID = -3334278151418035144L;\n    \n    private String readonlyToken;\n    \n    private Iteration iteration;\n    \n    private IterationMetrics iterationMetrics;\n    \n    @Autowired\n    private IterationBusiness iterationBusiness;\n    \n    public String fetchROIterationData() {\n        iteration = iterationBusiness.retreiveIterationByReadonlyToken(readonlyToken);\n        \n        if(iteration != null) {\n            iterationBusiness.retrieve(iteration.getId());\n        } else {\n        \t//TODO FINNUCKS: This doesn't redirect to the login\n            return Action.LOGIN;\n        }\n        \n        iteration = iterationBusiness.getIterationContents(iteration.getId());\n        return Action.SUCCESS;\n    }\n    \n    @Override\n    public String execute() {\n        iteration = iterationBusiness.retreiveIterationByReadonlyToken(readonlyToken);\n        \n        return Action.SUCCESS;\n    }\n\n    /**\n     * Create a new read only iteration object\n     */\n    public String create() {\n        \n        return Action.SUCCESS;\n    }\n\n    /**\n     * Delete an existing read only iteration object\n     */\n    public String delete() {\n\n        return Action.SUCCESS;\n    }\n\n    /**\n     * Edit a read only iteration object (Doesn't do anything)\n     */\n    public String retrieve() {\n        \n        return Action.SUCCESS;\n    }\n    \n    public String retrieveAll() {\n\n        return Action.SUCCESS;\n    }\n\n    /**\n     * Store the read only iteration object (Doesn't do anything)\n     */\n    public String store() {\n\n        return Action.SUCCESS;\n    }\n\n    public void initializePrefetchedData(int objectId) {\n\n    }\n    \n    public void setReadonlyToken(String readonlyToken) {\n        this.readonlyToken = readonlyToken;\n        setIterationByToken(readonlyToken);\n    }\n    \n    public String getReadonlyToken() {\n        return readonlyToken;\n    }\n    \n    public Iteration getIteration() {\n        return iteration;\n    }\n\n    public void setIteration(Iteration iteration) {\n        this.iteration = iteration;\n    }\n    \n    public void setIterationBusiness(IterationBusiness iterationBusiness) {\n        this.iterationBusiness = iterationBusiness;\n    }\n\n    public IterationMetrics getIterationMetrics() {\n        return iterationMetrics;\n    }\n    \n    private void setIterationByToken(String token) {\n        iteration =  this.iterationBusiness.retreiveIterationByReadonlyToken(token);\n    }\n}", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\SearchAction.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["SearchAction"], "AN": ["serialVersionUID", "searchBusiness", "results", "term"], "SCS_VariableDeclarator": ["serialVersionUID", "searchBusiness", "results", "term"], "MN": ["execute", "searchIterations", "searchProjects", "searchStories", "searchUsers", "searchTasks", "getResults", "setTerm"], "PN": ["term"], "SCS_MemberReference": ["results", "searchBusiness", "term", "SUCCESS", "results", "searchBusiness", "term", "SUCCESS", "results", "searchBusiness", "term", "SUCCESS", "results", "searchBusiness", "term", "SUCCESS", "results", "searchBusiness", "term", "SUCCESS", "results", "searchBusiness", "term", "SUCCESS", "results", "term", "term"], "SCS_ClassReference": [null, null, null, null, null, null], "SCS_MethodInvocation": ["searchStoriesAndBacklog", "searchIterations", "searchProjects", "searchStories", "searchUsers", "searchTasks"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport java.util.List;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.stereotype.Component;\n\nimport com.opensymphony.xwork2.Action;\nimport com.opensymphony.xwork2.ActionSupport;\n\nimport fi.hut.soberit.agilefant.business.SearchBusiness;\nimport fi.hut.soberit.agilefant.transfer.SearchResultRow;\n\n@Component(\"searchAction\")\n@Scope(\"prototype\")\npublic class SearchAction extends ActionSupport {\n    private static final long serialVersionUID = -2601570890557218624L;\n    @Autowired\n    private SearchBusiness searchBusiness;\n    \n    private List<SearchResultRow> results;\n    \n    private String term;\n    \n    @Override\n    public String execute() {\n        results = this.searchBusiness.searchStoriesAndBacklog(term);\n        return Action.SUCCESS;\n    }\n    \n    public String searchIterations() {\n        results = this.searchBusiness.searchIterations(term);\n        return Action.SUCCESS;\n    }\n    \n    public String searchProjects() {\n        results = this.searchBusiness.searchProjects(term);\n        return Action.SUCCESS;\n    }\n    \n    public String searchStories() {\n        results = this.searchBusiness.searchStories(term);\n        return Action.SUCCESS;\n    }\n    \n    public String searchUsers() {\n        results = this.searchBusiness.searchUsers(term);\n        return Action.SUCCESS;\n    }\n    \n    public String searchTasks() {\n        results = this.searchBusiness.searchTasks(term);\n        return Action.SUCCESS;\n    }\n\n    public List<SearchResultRow> getResults() {\n        return results;\n    }\n\n    public void setTerm(String term) {\n        this.term = term;\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\SecurityInterceptor.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["SecurityInterceptor"], "AN": ["serialVersionUID", "backlogBusiness", "iterationBusiness", "storyBusiness", "taskBusiness", "userBusiness", "authorizationBusiness"], "SCS_VariableDeclarator": ["serialVersionUID", "backlogBusiness", "iterationBusiness", "storyBusiness", "taskBusiness", "userBusiness", "authorizationBusiness", "req", "actionName", "loggedUser", "user", "admin", "readOnly", "access", "params", "attemptAdmin", "id", "params", "attemptAdmin", "attemptTeam", "id", "params", "attemptToCreateNonAdmin", "myTeamIds", "team", "teamIds", "newUserTeamIds", "teamId", "params", "storyId", "story", "params", "id", "taskId", "task", "storyId", "story", "attemptTeam"], "MN": ["destroy", "init", "intercept"], "PN": ["invocation"], "SCS_VariableDeclaration": ["HttpServletRequest", "String", "User", "User", "boolean", "boolean", "boolean", "Map", "boolean", "int", "Map", "boolean", "boolean", "int", "Map", "boolean", "Set", "Team", "String", "Set", "String", "Map", "int", "Story", "Map", "int", "int", "Task", "int", "Story", "boolean"], "SCS_ClassReference": ["ServletActionContext", "ServletActionContext", null, "SecurityUtil", "userBusiness", "loggedUser", "user", "user", null, "actionName", "actionName", "actionName", "actionName", "actionName", "actionName", "actionName", "actionName", "actionName", "req", "params", "Integer", "params", "user", "actionName", "req", "params", "params", "params", "Integer", "params", "user", "actionName", "req", "params", "params", "params", "user", "myTeamIds", "team", "params", "newUserTeamIds", "myTeamIds", "actionName", "actionName", "actionName", "actionName", "actionName", "actionName", "req", null, "req", "Integer", "params", "storyBusiness", "story", null, "story", null, "story", null, "story", null, "req", "params", "Integer", "params", "params", "Integer", "params", "params", "Integer", "params", "params", "Integer", "params", "params", "Integer", "params", "taskBusiness", "task", "task", null, "task", null, "task", null, null, "task", null, null, "params", "Integer", "params", "storyBusiness", "story", "story", null, "story", null, "params", "actionName", "params", null, "invocation"], "SCS_MethodInvocation": ["getRequest", "getActionMapping", "getName", "getLoggedUser", "retrieve", "getId", "isAdmin", "getName", "equals", "equals", "equals", "equals", "equals", "equals", "equals", "equals", "equals", "equals", "getParameterMap", "containsKey", "parseInt", "get", "getId", "equals", "getParameterMap", "containsKey", "containsKey", "containsKey", "parseInt", "get", "getId", "equals", "getParameterMap", "containsKey", "get", "containsKey", "getTeams", "add", "getId", "get", "add", "containsAll", "equals", "equals", "equals", "equals", "equals", "equals", "getParameterMap", "containsKey", "getParameterMap", "parseInt", "get", "retrieve", "getIteration", "isBacklogAccessible", "getIteration", "getId", "getBacklog", "isBacklogAccessible", "getBacklog", "getId", "getParameterMap", "containsKey", "parseInt", "get", "containsKey", "parseInt", "get", "containsKey", "parseInt", "get", "containsKey", "parseInt", "get", "containsKey", "parseInt", "get", "retrieve", "getIteration", "getIteration", "getId", "getStory", "getIteration", "getStory", "getIteration", "getId", "getStory", "getBacklog", "getId", "containsKey", "parseInt", "get", "retrieve", "getIteration", "getIteration", "getId", "getBacklog", "getId", "containsKey", "equals", "size", "isBacklogAccessible", "invoke"], "SCS_MemberReference": ["admin", "access", "readOnly", "access", "access", "id", "attemptAdmin", "access", "id", "attemptAdmin", "attemptTeam", "access", "attemptToCreateNonAdmin", "teamIds", "teamId", "newUserTeamIds", "access", "access", "access", "access", "storyId", "access", "authorizationBusiness", "user", "access", "access", "authorizationBusiness", "user", "id", "id", "id", "id", "taskId", "id", "id", "id", "storyId", "id", "id", "attemptTeam", "id", "id", "access", "authorizationBusiness", "id", "user", "access", "access"], "CO": ["//System.out.println(\"URL: \" + ServletActionContext.getRequest().getRequestURL().toString());", "// SecurityUtil.getLoggedUser() can't get all needed information of user -> should retrieve by making new user.", "//if admin, everything is fine", "//check read only operations", "//these are admin-only operations", "//check if ID is of current user, and what is being stored", "//can't set user.admin or team", "//check not setting user.admin", "// Non admins can create only other non admin users", "// Non admins can only add new users to their teams", "//access matrix operations", "// these are operations available to everyone", "// Default case: Try to find a backlog id of some kind to check.", "// story in project/product w/a iteration", "// Operations without ids must be allowed"], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport java.util.HashSet;\nimport java.util.Map;\nimport java.util.Set;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.apache.struts2.ServletActionContext;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport com.opensymphony.xwork2.ActionInvocation;\nimport com.opensymphony.xwork2.interceptor.Interceptor;\n\nimport fi.hut.soberit.agilefant.business.AuthorizationBusiness;\nimport fi.hut.soberit.agilefant.business.BacklogBusiness;\nimport fi.hut.soberit.agilefant.business.IterationBusiness;\nimport fi.hut.soberit.agilefant.business.StoryBusiness;\nimport fi.hut.soberit.agilefant.business.TaskBusiness;\nimport fi.hut.soberit.agilefant.business.UserBusiness;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.Task;\nimport fi.hut.soberit.agilefant.model.Team;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.security.SecurityUtil;\n\n@Component(\"securityInterceptor\")\npublic class SecurityInterceptor implements Interceptor {\n\n\tprivate static final long serialVersionUID = -7924331771689956188L;\n\n\t@Autowired\n    private BacklogBusiness backlogBusiness;\n    \n    @Autowired\n    private IterationBusiness iterationBusiness;\n\n    @Autowired\n    private StoryBusiness storyBusiness;\n    \n    @Autowired\n    private TaskBusiness taskBusiness;\n    \n    @Autowired\n    private UserBusiness userBusiness;\n    \n    @Autowired\n    private AuthorizationBusiness authorizationBusiness;\n    \n    @Override\n    public void destroy() {\n    }\n\n    @Override\n    public void init() {\n    }\n\n    @Override\n    public String intercept(ActionInvocation invocation) throws Exception {\n        //System.out.println(\"URL: \" + ServletActionContext.getRequest().getRequestURL().toString());\n        HttpServletRequest req = ServletActionContext.getRequest();\n        String actionName = ServletActionContext.getActionMapping().getName();\n        \n        User loggedUser = SecurityUtil.getLoggedUser(); // SecurityUtil.getLoggedUser() can't get all needed information of user -> should retrieve by making new user.\n        User user = userBusiness.retrieve(loggedUser.getId());\n        \n        boolean admin = user.isAdmin();\n        boolean readOnly = user.getName().equals(\"readonly\");\n        boolean access = false;\n        \n        if(admin){\n            //if admin, everything is fine\n            access = true;\n        } else if(readOnly){\n            //check read only operations\n            if(actionName.equals(\"ROIterationHistoryByToken\") \n                    || actionName.equals(\"ROIterationMetricsByToken\")\n                    || actionName.equals((\"ROIterationData\"))){\n                access = true;\n            }\n        } else {\n            if(actionName.equals(\"createTeam\")\n                    || actionName.equals(\"deleteTeam\")\n                    || actionName.equals(\"deleteTeamForm\")\n                    || actionName.equals(\"storeTeam\")\n                    || actionName.equals(\"storeNewTeam\")){\n                \n                //these are admin-only operations\n                access = false;\n            \n            } else if(actionName.equals(\"storeUserAndRedirect\")) {\n                Map params = req.getParameterMap();\n                boolean attemptAdmin = params.containsKey(\"user.admin\");\n                int id = Integer.parseInt(((String[]) params.get(\"userId\"))[0]);\n                if(id == user.getId() && !attemptAdmin){\n                    access = true;\n                }\n            } else if(actionName.equals(\"storeUser\")){\n            \n                //check if ID is of current user, and what is being stored\n                //can't set user.admin or team\n                Map params = req.getParameterMap();\n                boolean attemptAdmin = params.containsKey(\"user.admin\");\n                boolean attemptTeam = params.containsKey(\"teamsChanged\") || params.containsKey(\"teamIds\");\n                int id = Integer.parseInt(((String[]) params.get(\"userId\"))[0]);\n\n                if(id == user.getId() && !attemptAdmin && !attemptTeam){\n                    //check not setting user.admin\n                    access = true;\n                }\n            } else if(actionName.equals(\"storeNewUser\")) {\n                Map params = req.getParameterMap();\n                boolean attemptToCreateNonAdmin = params.containsKey(\"user.admin\") && ((String[]) params.get(\"user.admin\"))[0].equals(\"false\");\n                // Non admins can create only other non admin users\n                if(attemptToCreateNonAdmin) {\n                    // Non admins can only add new users to their teams\n                    if (params.containsKey(\"teamIds\")) {\n                        Set<String> myTeamIds = new HashSet<String>();\n                        for (Team team: user.getTeams()) {\n                            myTeamIds.add(\"\"+team.getId());\n                        }\n                        String[] teamIds = (String[])params.get(\"teamIds\");\n                        Set<String> newUserTeamIds = new HashSet<String>();\n                        for (String teamId: teamIds) {\n                            newUserTeamIds.add(teamId);\n                        }\n                        if (myTeamIds.containsAll(newUserTeamIds)) {\n                            access = true;\n                        }\n                    } else {\n                        access = true;\n                    }\n                }\n            } else if(actionName.equals(\"retrieveAllProducts\")\n                    || actionName.equals(\"retrieveAllSAIterations\")){\n                //access matrix operations\n                access = false;\n            } else if(actionName.equals(\"storeNewIteration\")\n                    || actionName.equals(\"storeNewProduct\")) {\n                // these are operations available to everyone\n                access = true;\n            } else if ((actionName.equals(\"retrieveBranchMetrics\") || actionName.equals(\"getStoryHierarchy\")) && req.getParameterMap().containsKey(\"storyId\")) {\n                Map params = req.getParameterMap();\n                int storyId = Integer.parseInt(((String[]) params.get(\"storyId\"))[0]);\n                Story story = storyBusiness.retrieve(storyId);\n                if (story.getIteration() != null) {\n                    access = this.authorizationBusiness.isBacklogAccessible(story.getIteration().getId(), user);\n\n                }\n                if (!access && story.getBacklog() != null) {\n                    access = this.authorizationBusiness.isBacklogAccessible(story.getBacklog().getId(), user);\n                }\n            } else {\n                // Default case: Try to find a backlog id of some kind to check.\n                \n                Map params = req.getParameterMap();\n                int id = -1;\n                if(params.containsKey(\"iterationId\"))\n                    id = Integer.parseInt(((String[]) params.get(\"iterationId\"))[0]);\n                else if (params.containsKey(\"backlogId\"))\n                    id = Integer.parseInt(((String[]) params.get(\"backlogId\"))[0]);\n                else if (params.containsKey(\"productId\"))\n                    id = Integer.parseInt(((String[]) params.get(\"productId\"))[0]);\n                else if (params.containsKey(\"projectId\"))\n                    id = Integer.parseInt(((String[]) params.get(\"projectId\"))[0]);\n                else if (params.containsKey(\"taskId\")){\n                    int taskId = Integer.parseInt(((String[]) params.get(\"taskId\"))[0]);\n                    Task task = taskBusiness.retrieve(taskId);\n                    if(task.getIteration() != null)\n                        id = task.getIteration().getId();\n                    else if (task.getStory().getIteration() != null)\n                        id = task.getStory().getIteration().getId();\n                    else \n                        id = task.getStory().getBacklog().getId(); // story in project/product w/a iteration\n                } else if (params.containsKey(\"storyId\")){\n                    int storyId = Integer.parseInt(((String[]) params.get(\"storyId\"))[0]);\n                    Story story = storyBusiness.retrieve(storyId);\n                    if (story.getIteration() != null) {\n                        id = story.getIteration().getId();\n                    } else {\n                        id = story.getBacklog().getId();\n                    }\n                }\n                \n                boolean attemptTeam = params.containsKey(\"teamsChanged\");\n                if(!attemptTeam){\n                \tif (id != -1 && !(id == 0 && actionName.equals(\"retrieveSubBacklogs\") && params.size() == 1))\n                        access = this.authorizationBusiness.isBacklogAccessible(id, user);\n                    else\n                        // Operations without ids must be allowed\n                        access = true;\n                }\n            }\n        }\n                \n        if(access)\n            return invocation.invoke();\n        else\n            return \"noauth\";\n    }\n}\n\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\SettingAction.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["SettingAction"], "AN": ["serialVersionUID", "rangeLow", "rangeHigh", "optimalLow", "optimalHigh", "criticalLow", "hourReportingEnabled", "dailyWorkEnabled", "devPortfolioEnabled", "labelsInStoryList", "weekendsInBurndown", "storyTreeFieldOrder", "branchMetricsType", "settingBusiness"], "SCS_VariableDeclarator": ["serialVersionUID", "rangeLow", "rangeHigh", "optimalLow", "optimalHigh", "criticalLow", "hourReportingEnabled", "dailyWorkEnabled", "devPortfolioEnabled", "labelsInStoryList", "weekendsInBurndown", "storyTreeFieldOrder", "branchMetricsType", "settingBusiness"], "MN": ["edit", "storeSettings", "initilizeEmptyLoadMeterValues", "validateLoadMeterValues", "getRangeLow", "setRangeLow", "getRangeHigh", "setRangeHigh", "getOptimalLow", "setOptimalLow", "getOptimalHigh", "setOptimalHigh", "getCriticalLow", "setCriticalLow", "isHourReportingEnabled", "setHourReportingEnabled", "isDailyWorkEnabled", "setDailyWorkEnabled", "isDevPortfolioEnabled", "setDevPortfolioEnabled", "setSettingBusiness", "getStoryTreeFieldOrder", "setStoryTreeFieldOrder", "getBranchMetricsType", "setBranchMetricsType", "isLabelsInStoryList", "setLabelsInStoryList", "isWeekendsInBurndown", "setWeekendsInBurndown"], "PN": ["rangeLow", "rangeHigh", "optimalLow", "optimalHigh", "criticalLow", "hourReportingEnabled", "dailyWorkEnabled", "devPortfolioEnabled", "settingBusiness", "storyTreeFieldOrder", "branchMetricsType", "labelsInStoryList", "weekendsInBurndown"], "SCS_MemberReference": ["criticalLow", "settingBusiness", "optimalHigh", "settingBusiness", "optimalLow", "settingBusiness", "rangeHigh", "settingBusiness", "rangeLow", "settingBusiness", "hourReportingEnabled", "settingBusiness", "devPortfolioEnabled", "settingBusiness", "dailyWorkEnabled", "settingBusiness", "storyTreeFieldOrder", "settingBusiness", "branchMetricsType", "settingBusiness", "labelsInStoryList", "settingBusiness", "weekendsInBurndown", "settingBusiness", "SUCCESS", "ERROR", "rangeLow", "rangeHigh", "optimalLow", "optimalHigh", "criticalLow", "hourReportingEnabled", "devPortfolioEnabled", "dailyWorkEnabled", "storyTreeFieldOrder", "branchMetricsType", "labelsInStoryList", "weekendsInBurndown", "SUCCESS", "rangeLow", "rangeLow", "DEFAULT_RANGE_LOW", "rangeHigh", "rangeHigh", "DEFAULT_RANGE_HIGH", "optimalLow", "optimalLow", "DEFAULT_OPTIMAL_LOW", "optimalHigh", "optimalHigh", "DEFAULT_OPTIMAL_HIGH", "criticalLow", "criticalLow", "DEFAULT_CRITICAL_LOW", "optimalLow", "rangeLow", "optimalHigh", "optimalLow", "criticalLow", "optimalHigh", "rangeHigh", "criticalLow", "rangeLow", "rangeLow", "rangeLow", "rangeHigh", "rangeHigh", "rangeHigh", "optimalLow", "optimalLow", "optimalLow", "optimalHigh", "optimalHigh", "optimalHigh", "criticalLow", "criticalLow", "criticalLow", "hourReportingEnabled", "hourReportingEnabled", "hourReportingEnabled", "dailyWorkEnabled", "dailyWorkEnabled", "dailyWorkEnabled", "devPortfolioEnabled", "devPortfolioEnabled", "devPortfolioEnabled", "settingBusiness", "settingBusiness", "storyTreeFieldOrder", "storyTreeFieldOrder", "storyTreeFieldOrder", "branchMetricsType", "branchMetricsType", "branchMetricsType", "labelsInStoryList", "labelsInStoryList", "labelsInStoryList", "weekendsInBurndown", "weekendsInBurndown", "weekendsInBurndown"], "SCS_ClassReference": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, "settingBusiness", "settingBusiness", "settingBusiness", "settingBusiness", "settingBusiness", "settingBusiness", "settingBusiness", "settingBusiness", "settingBusiness", "settingBusiness", "settingBusiness", "settingBusiness", null, null, null, null, null, null, null, null], "SCS_MethodInvocation": ["getCriticalLow", "getOptimalHigh", "getOptimalLow", "getRangeHigh", "getRangeLow", "isHourReportingEnabled", "isDevPortfolio", "isDailyWork", "getStoryTreeFieldOrder", "getBranchMetricsType", "isLabelsInStoryList", "isWeekendsInBurndown", "initilizeEmptyLoadMeterValues", "validateLoadMeterValues", "setRangeLow", "setRangeHigh", "setOptimalLow", "setOptimalHigh", "setCriticalLow", "setHourReporting", "setDevPortfolio", "setDailyWork", "setStoryTreeFieldOrder", "setBranchMetricsType", "setLabelsInStoryList", "setWeekendsInBurndown", "addActionError", "getText", "addActionError", "getText", "addActionError", "getText", "addActionError", "getText"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.stereotype.Component;\n\nimport com.opensymphony.xwork2.Action;\nimport com.opensymphony.xwork2.ActionSupport;\n\nimport fi.hut.soberit.agilefant.business.SettingBusiness;\n\n@Component(\"settingAction\")\n@Scope(\"prototype\")\npublic class SettingAction extends ActionSupport {\n    \n    private static final long serialVersionUID = 6404856922329136680L;\n    private int rangeLow = -1;\n    private int rangeHigh = -1;\n    private int optimalLow = -1;\n    private int optimalHigh = -1;\n    private int criticalLow = -1;\n    private boolean hourReportingEnabled = false;\n    private boolean dailyWorkEnabled = false;\n    private boolean devPortfolioEnabled = false;\n    private boolean labelsInStoryList = false;\n    private boolean weekendsInBurndown = false;\n    private String storyTreeFieldOrder;\n    private SettingBusiness.BranchMetricsType branchMetricsType;\n    \n    @Autowired\n    private SettingBusiness settingBusiness;\n    \n    public String edit()  {        \n        this.criticalLow = this.settingBusiness.getCriticalLow();\n        this.optimalHigh = this.settingBusiness.getOptimalHigh();\n        this.optimalLow = this.settingBusiness.getOptimalLow();\n        this.rangeHigh = this.settingBusiness.getRangeHigh();\n        this.rangeLow = this.settingBusiness.getRangeLow();\n        this.hourReportingEnabled = this.settingBusiness.isHourReportingEnabled();\n        this.devPortfolioEnabled = this.settingBusiness.isDevPortfolio();\n        this.dailyWorkEnabled = this.settingBusiness.isDailyWork();\n        this.storyTreeFieldOrder = this.settingBusiness.getStoryTreeFieldOrder();\n        this.branchMetricsType = this.settingBusiness.getBranchMetricsType();\n        this.labelsInStoryList = this.settingBusiness.isLabelsInStoryList();\n        this.weekendsInBurndown = this.settingBusiness.isWeekendsInBurndown();\n        return Action.SUCCESS;\n    }\n    \n    public String storeSettings() {\n        this.initilizeEmptyLoadMeterValues();\n        if (!this.validateLoadMeterValues()) {\n            return Action.ERROR;\n        }\n        settingBusiness.setRangeLow(rangeLow);\n        settingBusiness.setRangeHigh(rangeHigh);\n        settingBusiness.setOptimalLow(optimalLow);\n        settingBusiness.setOptimalHigh(optimalHigh);\n        settingBusiness.setCriticalLow(criticalLow);\n        settingBusiness.setHourReporting(hourReportingEnabled);\n        settingBusiness.setDevPortfolio(devPortfolioEnabled);\n        settingBusiness.setDailyWork(dailyWorkEnabled);\n        settingBusiness.setStoryTreeFieldOrder(storyTreeFieldOrder);\n        settingBusiness.setBranchMetricsType(branchMetricsType);\n        settingBusiness.setLabelsInStoryList(labelsInStoryList);\n        settingBusiness.setWeekendsInBurndown(weekendsInBurndown);\n        return Action.SUCCESS;\n    }\n    \n    public void initilizeEmptyLoadMeterValues() {\n        if(rangeLow < 0) {\n            rangeLow = SettingBusiness.DEFAULT_RANGE_LOW;\n        }\n        if(rangeHigh < 0) {\n            rangeHigh = SettingBusiness.DEFAULT_RANGE_HIGH;\n        }\n        if(optimalLow < 0) {\n            optimalLow = SettingBusiness.DEFAULT_OPTIMAL_LOW;\n        }\n        if(optimalHigh < 0) {\n            optimalHigh = SettingBusiness.DEFAULT_OPTIMAL_HIGH;\n        }\n        if(criticalLow < 0) {\n            criticalLow = SettingBusiness.DEFAULT_CRITICAL_LOW;\n        }\n    }\n    \n    public boolean validateLoadMeterValues() {\n        if(optimalLow <= rangeLow) {\n            this.addActionError(this.getText(\"settings.rangeLowErr\"));\n            return false;\n        }\n        if(optimalHigh <= optimalLow) {\n            this.addActionError(this.getText(\"settings.optimalLowErr\"));\n            return false;\n        }\n        if(criticalLow <= optimalHigh) {\n            this.addActionError(this.getText(\"settings.optimalHighErr\"));\n            return false;\n        }\n        if(rangeHigh <= criticalLow) {\n            this.addActionError(this.getText(\"settings.criticalErr\"));\n            return false;\n        }\n        return true;\n    }\n\n    public int getRangeLow() {\n        return rangeLow;\n    }\n\n    public void setRangeLow(int rangeLow) {\n        this.rangeLow = rangeLow;\n    }\n\n    public int getRangeHigh() {\n        return rangeHigh;\n    }\n\n    public void setRangeHigh(int rangeHigh) {\n        this.rangeHigh = rangeHigh;\n    }\n\n    public int getOptimalLow() {\n        return optimalLow;\n    }\n\n    public void setOptimalLow(int optimalLow) {\n        this.optimalLow = optimalLow;\n    }\n\n    public int getOptimalHigh() {\n        return optimalHigh;\n    }\n\n    public void setOptimalHigh(int optimalHigh) {\n        this.optimalHigh = optimalHigh;\n    }\n\n    public int getCriticalLow() {\n        return criticalLow;\n    }\n\n    public void setCriticalLow(int criticalLow) {\n        this.criticalLow = criticalLow;\n    }\n\n    public boolean isHourReportingEnabled() {\n        return hourReportingEnabled;\n    }\n\n    public void setHourReportingEnabled(boolean hourReportingEnabled) {\n        this.hourReportingEnabled = hourReportingEnabled;\n    }\n\n    public boolean isDailyWorkEnabled() {\n        return dailyWorkEnabled;\n    }\n\n    public void setDailyWorkEnabled(boolean dailyWorkEnabled) {\n        this.dailyWorkEnabled = dailyWorkEnabled;\n    }\n\n    public boolean isDevPortfolioEnabled() {\n        return devPortfolioEnabled;\n    }\n\n    public void setDevPortfolioEnabled(boolean devPortfolioEnabled) {\n        this.devPortfolioEnabled = devPortfolioEnabled;\n    }\n\n    public void setSettingBusiness(SettingBusiness settingBusiness) {\n        this.settingBusiness = settingBusiness;\n    }\n\n    public String getStoryTreeFieldOrder() {\n        return storyTreeFieldOrder;\n    }\n\n    public void setStoryTreeFieldOrder(String storyTreeFieldOrder) {\n        this.storyTreeFieldOrder = storyTreeFieldOrder;\n    }\n\n    public SettingBusiness.BranchMetricsType getBranchMetricsType() {\n        return branchMetricsType;\n    }\n\n    public void setBranchMetricsType(\n            SettingBusiness.BranchMetricsType branchMetricsType) {\n        this.branchMetricsType = branchMetricsType;\n    }\n\n    public boolean isLabelsInStoryList() {\n        return labelsInStoryList;\n    }\n\n    public void setLabelsInStoryList(boolean labelsInStoryList) {\n        this.labelsInStoryList = labelsInStoryList;\n    }\n\n    public boolean isWeekendsInBurndown() {\n        return weekendsInBurndown;\n    }\n\n    public void setWeekendsInBurndown(boolean weekendsInBurndown) {\n        this.weekendsInBurndown = weekendsInBurndown;\n    }\n    \n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\SettingsInterceptor.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["SettingsInterceptor"], "AN": ["serialVersionUID", "settingBusiness"], "SCS_VariableDeclarator": ["serialVersionUID", "settingBusiness"], "MN": ["intercept", "setSettingBusiness"], "PN": ["invocation", "settingBusiness"], "SCS_ClassReference": ["invocation", null, "invocation"], "SCS_MethodInvocation": ["getStack", "set", "invoke"], "SCS_MemberReference": ["settingBusiness", "settingBusiness", "settingBusiness"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport com.opensymphony.xwork2.ActionInvocation;\nimport com.opensymphony.xwork2.interceptor.AbstractInterceptor;\n\nimport fi.hut.soberit.agilefant.business.SettingBusiness;\n\n\n@Component(\"settingsInterceptor\")\npublic class SettingsInterceptor extends AbstractInterceptor {\n\n    private static final long serialVersionUID = -8858944388573607020L;\n\n    @Autowired\n    private SettingBusiness settingBusiness;\n\n    @Override\n    public String intercept(ActionInvocation invocation) throws Exception {\n        invocation.getStack().set(\"settings\", settingBusiness);\n        return invocation.invoke();\n    }\n\n    public void setSettingBusiness(SettingBusiness settingBusiness) {\n        this.settingBusiness = settingBusiness;\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\SpentEffortAction.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["SpentEffortAction"], "AN": ["serialVersionUID", "WEEKS_IN_WEEK_SELECTION", "week", "year", "day", "currentWeek", "currentYear", "hourEntryBusiness", "userId", "weekEffort", "prevWeek", "nextWeek", "dailyEffort", "weeks", "effortEntries", "userTimeZone", "serverTimeZone"], "SCS_VariableDeclarator": ["serialVersionUID", "WEEKS_IN_WEEK_SELECTION", "week", "year", "day", "currentWeek", "currentYear", "hourEntryBusiness", "userId", "weekEffort", "prevWeek", "nextWeek", "dailyEffort", "weeks", "effortEntries", "userTimeZone", "serverTimeZone", "iteratorDate", "i", "selectedTime", "selectedDate", "currentDay", "tmpDate"], "SCS_ClassReference": [null, null, "middle", null, "iteratorDate", null, "iteratorDate", "selectedTime", "selectedTime", "selectedTime", "selectedTime", "selectedTime", "selectedTime", "selectedTime", "selectedTime", "selectedDate", null, "selectedDate", null, null, null, null, "currentDay", "", "", null, "currentDay", "", "", "tmpDate", "tmpDate", null, "tmpDate", null, "", ""], "SCS_MethodInvocation": ["getZone", "clear", "minusWeeks", "add", "toDateTime", "toLocalDate", "addWeeks", "getWeekOfWeekyear", "getWeekyear", "getWeekOfWeekyear", "getYear", "setWeekyear", "setWeekOfWeekyear", "setDayOfWeek", "toDateTime", "minusWeeks", "toLocalDate", "plusWeeks", "toLocalDate", "getSelectedDate", "initializeWeekSelection", "getDailySpentEffortByWeek", "toLocalDate", "getUserHourTimeZone", "getUserMinuteTimeZone", "calculateWeekSum", "toLocalDate", "getUserHourTimeZone", "getUserMinuteTimeZone", "setYear", "setDayOfYear", "getEntriesByUserAndDay", "toDateTime", "toLocalDate", "getUserHourTimeZone", "getUserMinuteTimeZone"], "MN": ["initializeWeekSelection", "getSelectedDate", "getDaySumsByWeek", "getUserHourTimeZone", "getUserMinuteTimeZone", "getHourEntriesByUserAndDay", "getDailyEffort", "setDailyEffort", "setWeek", "getWeek", "setYear", "getYear", "getEffortEntries", "setEffortEntries", "setDay", "getWeeks", "setWeeks", "setHourEntryBusiness", "getUserId", "setUserId", "getCurrentWeek", "getCurrentYear", "getWeekEffort", "getPrevWeek", "getNextWeek", "getUserTimeZone", "setUserTimeZone", "getServerTimeZone", "setServerTimeZone"], "PN": ["middle", "dailyEffort", "week", "year", "effortEntries", "day", "weeks", "hourEntryBusiness", "userId", "userTimeZoneOffset", "serverTimeZone"], "SCS_MemberReference": ["weeks", "WEEKS_IN_WEEK_SELECTION", "i", "WEEKS_IN_WEEK_SELECTION", "i", "weeks", "currentWeek", "currentYear", "week", "year", "week", "year", "year", "week", "MONDAY", "prevWeek", "nextWeek", "selectedDate", "currentDay", "dailyEffort", "hourEntryBusiness", "userId", "serverTimeZone", "weekEffort", "hourEntryBusiness", "userId", "serverTimeZone", "SUCCESS", "userTimeZone", "userTimeZone", "userTimeZone", "year", "day", "effortEntries", "hourEntryBusiness", "userId", "serverTimeZone", "SUCCESS", "dailyEffort", "dailyEffort", "dailyEffort", "week", "week", "week", "year", "year", "year", "effortEntries", "effortEntries", "effortEntries", "day", "day", "weeks", "weeks", "weeks", "hourEntryBusiness", "hourEntryBusiness", "userId", "userId", "userId", "currentWeek", "currentYear", "weekEffort", "prevWeek", "nextWeek", "userTimeZone", "userTimeZone", "userTimeZoneOffset", "serverTimeZone", "serverTimeZone", "serverTimeZone"], "SCS_VariableDeclaration": ["MutableDateTime", "int", "MutableDateTime", "DateTime", "DateTime", "MutableDateTime"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.joda.time.DateTime;\nimport org.joda.time.DateTimeConstants;\nimport org.joda.time.DateTimeZone;\nimport org.joda.time.LocalDate;\nimport org.joda.time.MutableDateTime;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.stereotype.Component;\n\nimport com.opensymphony.xwork2.Action;\nimport com.opensymphony.xwork2.ActionSupport;\nimport fi.hut.soberit.agilefant.business.HourEntryBusiness;\nimport fi.hut.soberit.agilefant.model.HourEntry;\nimport fi.hut.soberit.agilefant.transfer.DailySpentEffort;\n\n@Component(\"spentEffortAction\")\n@Scope(\"prototype\")\npublic class SpentEffortAction extends ActionSupport {\n\n    private static final long serialVersionUID = -8867256217181600965L;\n    public static final int WEEKS_IN_WEEK_SELECTION = 21;\n    private int week = -1;\n    private int year = 0;\n    private int day = 1;\n    private int currentWeek = 0;\n    private int currentYear = 0;\n    @Autowired\n    private HourEntryBusiness hourEntryBusiness;\n    private int userId;\n    private long weekEffort = 0;\n    private LocalDate prevWeek;\n    private LocalDate nextWeek;\n    \n    private List<DailySpentEffort> dailyEffort;\n    private List<LocalDate> weeks = new ArrayList<LocalDate>();\n    private List<HourEntry> effortEntries;\n    private double userTimeZone;\n    DateTimeZone serverTimeZone = new DateTime().getZone();\n    \n    public void initializeWeekSelection(DateTime middle) {\n        this.weeks.clear();\n        MutableDateTime iteratorDate = new MutableDateTime(middle.minusWeeks(WEEKS_IN_WEEK_SELECTION/2));\n        for(int i = 0; i < WEEKS_IN_WEEK_SELECTION; i++) {\n            this.weeks.add(iteratorDate.toDateTime().toLocalDate());\n            iteratorDate.addWeeks(1);\n        }\n    }\n\n\tpublic DateTime getSelectedDate() {\n        MutableDateTime selectedTime = new MutableDateTime();\n        this.currentWeek = selectedTime.getWeekOfWeekyear();\n        this.currentYear = selectedTime.getWeekyear();\n        if(this.week == 0 || this.year == 0) {\n            this.week = selectedTime.getWeekOfWeekyear();\n            this.year = selectedTime.getYear();\n        } else {\n            selectedTime.setWeekyear(this.year);\n            selectedTime.setWeekOfWeekyear(this.week);\n        }\n        selectedTime.setDayOfWeek(DateTimeConstants.MONDAY);\n        DateTime selectedDate = selectedTime.toDateTime();\n        this.prevWeek = selectedDate.minusWeeks(1).toLocalDate();\n        this.nextWeek = selectedDate.plusWeeks(1).toLocalDate();\n        return selectedDate;\n    }\n    \n    public String getDaySumsByWeek() { \n        DateTime currentDay = this.getSelectedDate();\n        this.initializeWeekSelection(currentDay);\n        this.dailyEffort = this.hourEntryBusiness.getDailySpentEffortByWeek(currentDay.toLocalDate(), userId, getUserHourTimeZone(), getUserMinuteTimeZone(), serverTimeZone);\n        this.weekEffort = this.hourEntryBusiness.calculateWeekSum(currentDay.toLocalDate(), userId,  getUserHourTimeZone(), getUserMinuteTimeZone(), serverTimeZone);\n        return Action.SUCCESS;\n    }\n\n    public int getUserHourTimeZone()\n    {\n        return (int)userTimeZone - 12;\n    }\n    \n    public int getUserMinuteTimeZone()\n    {\n        return (int)((userTimeZone - (int)userTimeZone) * 60);\n    }\n    \n    public String getHourEntriesByUserAndDay() {  \n        MutableDateTime tmpDate = new MutableDateTime();\n        tmpDate.setYear(this.year);\n        tmpDate.setDayOfYear(this.day);\n        this.effortEntries = this.hourEntryBusiness.getEntriesByUserAndDay(tmpDate.toDateTime().toLocalDate(), userId, getUserHourTimeZone(), getUserMinuteTimeZone(), serverTimeZone);\n        return SUCCESS;\n    }\n    \n    public List<DailySpentEffort> getDailyEffort() {\n        return dailyEffort;\n    }\n\n    public void setDailyEffort(List<DailySpentEffort> dailyEffort) {\n        this.dailyEffort = dailyEffort;\n    }\n\n    public void setWeek(int week) {\n        this.week = week;\n    }\n\n    public int getWeek() {\n        return this.week;\n    }\n    \n    public void setYear(int year) {\n        this.year = year;\n    }\n    public int getYear() {\n        return this.year;\n    }\n\n    public List<HourEntry> getEffortEntries() {\n        return effortEntries;\n    }\n\n    public void setEffortEntries(List<HourEntry> effortEntries) {\n        this.effortEntries = effortEntries;\n    }\n\n    public void setDay(int day) {\n        this.day = day;\n    }\n\n    public List<LocalDate> getWeeks() {\n        return weeks;\n    }\n\n    public void setWeeks(List<LocalDate> weeks) {\n        this.weeks = weeks;\n    }\n\n    public void setHourEntryBusiness(HourEntryBusiness hourEntryBusiness) {\n        this.hourEntryBusiness = hourEntryBusiness;\n    }\n\n    public int getUserId() {\n        return userId;\n    }\n\n    public void setUserId(int userId) {\n        this.userId = userId;\n    }\n\n    public int getCurrentWeek() {\n        return currentWeek;\n    }\n\n    public int getCurrentYear() {\n        return currentYear;\n    }\n\n    public long getWeekEffort() {\n        return weekEffort;\n    }\n\n    public LocalDate getPrevWeek() {\n        return prevWeek;\n    }\n\n    public LocalDate getNextWeek() {\n        return nextWeek;\n    }\n    \n    public double getUserTimeZone() {\n        return userTimeZone;\n    }\n    \n    public void setUserTimeZone(double userTimeZoneOffset)\n    {\n        this.userTimeZone = userTimeZoneOffset;\n    }\n    \n    public DateTimeZone getServerTimeZone() {\n\t\treturn serverTimeZone;\n\t}\n\n\tpublic void setServerTimeZone(DateTimeZone serverTimeZone) {\n\t\tthis.serverTimeZone = serverTimeZone;\n\t}\n   \n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\StoryAccessAction.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["StoryAccessAction"], "AN": ["serialVersionUID", "storyId", "userId", "entries", "storyAccessBusiness"], "SCS_VariableDeclarator": ["serialVersionUID", "storyId", "userId", "entries", "storyAccessBusiness", "weeks", "weeks"], "MN": ["addAccessEntry", "calculateAccesses", "calculateEditAccesses", "setStoryId", "setUserId", "getEntries"], "PN": ["storyId", "userId"], "SCS_MemberReference": ["storyAccessBusiness", "storyId", "SUCCESS", "entries", "storyAccessBusiness", "weeks", "userId", "SUCCESS", "entries", "storyAccessBusiness", "weeks", "userId", "SUCCESS", "storyId", "storyId", "userId", "userId", "entries"], "SCS_ClassReference": [null, "SecurityUtil", null, null, null, "SecurityUtil", null, null, null], "SCS_MethodInvocation": ["addAccessEntry", "getLoggedUser", "getRecentItemsNumberOfWeeks", "calculateOccurences", "minusWeeks", "getLoggedUser", "getRecentItemsNumberOfWeeks", "calculateEditOccurences", "minusWeeks"], "SCS_VariableDeclaration": ["int", "int"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport java.util.List;\n\nimport org.joda.time.DateTime;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.stereotype.Component;\n\nimport com.opensymphony.xwork2.Action;\nimport com.opensymphony.xwork2.ActionSupport;\n\nimport fi.hut.soberit.agilefant.business.StoryAccessBusiness;\nimport fi.hut.soberit.agilefant.security.SecurityUtil;\nimport fi.hut.soberit.agilefant.transfer.StoryAccessCloudTO;\n\n@Component(\"storyAccessAction\")\n@Scope(\"prototype\")\npublic class StoryAccessAction extends ActionSupport {\n\n    private static final long serialVersionUID = 5288474092729204648L;\n\n    private int storyId = -1;\n\n    private int userId;\n\n    private List<StoryAccessCloudTO> entries;\n\n    @Autowired\n    private StoryAccessBusiness storyAccessBusiness;\n\n    public String addAccessEntry() {\n        this.storyAccessBusiness.addAccessEntry(storyId);\n        return Action.SUCCESS;\n    }\n\n    public String calculateAccesses() {\n        int weeks = SecurityUtil.getLoggedUser().getRecentItemsNumberOfWeeks();\n        entries = this.storyAccessBusiness.calculateOccurences(\n                new DateTime().minusWeeks(weeks), new DateTime(), userId, 20);\n        return Action.SUCCESS;\n    }\n    \n    public String calculateEditAccesses() {\n        int weeks = SecurityUtil.getLoggedUser().getRecentItemsNumberOfWeeks();\n        entries = this.storyAccessBusiness.calculateEditOccurences(\n                new DateTime().minusWeeks(weeks), new DateTime(), userId, 20);\n        return Action.SUCCESS;\n    }\n\n    public void setStoryId(int storyId) {\n        this.storyId = storyId;\n    }\n\n    public void setUserId(int userId) {\n        this.userId = userId;\n    }\n\n    public List<StoryAccessCloudTO> getEntries() {\n        return entries;\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\StoryAction.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["StoryAction"], "AN": ["serialVersionUID", "backlogId", "storyId", "targetStoryId", "state", "iteration", "priority", "story", "backlog", "userIds", "usersChanged", "storyListContext", "metrics", "storyHistory", "tasksToDone", "labelNames", "storyBusiness", "storyRankBusiness", "backlogBusiness", "taskHourEntryHandlingChoice", "storyHourEntryHandlingChoice", "taskHandlingChoice", "childHandlingChoice"], "SCS_VariableDeclarator": ["serialVersionUID", "backlogId", "storyId", "targetStoryId", "state", "iteration", "priority", "story", "backlog", "userIds", "usersChanged", "storyListContext", "metrics", "storyHistory", "tasksToDone", "labelNames", "storyBusiness", "storyRankBusiness", "backlogBusiness", "taskHourEntryHandlingChoice", "storyHourEntryHandlingChoice", "taskHandlingChoice", "childHandlingChoice", "rank", "users", "upper", "backlog", "lower", "backlog"], "MN": ["execute", "create", "copyStorySibling", "extractUnfinishedStorySibling", "delete", "retrieve", "deleteStoryForm", "store", "moveStoryAway", "safeMoveSingleStory", "moveStoryAndChildren", "rankStoryUnder", "rankStoryOver", "rankStoryToTop", "rankStoryToBottom", "createStoryUnder", "createStorySibling", "initializePrefetchedData", "getBacklog", "setBacklog", "getBacklogId", "setBacklogId", "getStory", "setStory", "getStoryName", "setStoryName", "getState", "setState", "getUserIds", "setUserIds", "getStoryId", "setStoryId", "setIteration", "getIterationId", "setPriority", "getPriority", "getStoryListContext", "setStoryListContext", "setStoryBusiness", "getMetrics", "setUsersChanged", "getStoryHistory", "setBacklogBusiness", "setTargetStoryId", "setTaskHandlingChoice", "setTaskHourEntryHandlingChoice", "setStoryHourEntryHandlingChoice", "getStoryHourEntryHandlingChoice", "getTaskHandlingChoice", "getTaskHourEntryHandlingChoice", "setTasksToDone", "setChildHandlingChoice", "getLabelNames", "setLabelNames"], "PN": ["objectId", "backlog", "backlogId", "story", "storyName", "state", "userIds", "storyId", "iterationId", "priority", "storyListContext", "storyBusiness", "usersChanged", "backlogBusiness", "targetStoryId", "taskHandlingChoice", "taskHourEntryHandlingChoice", "storyHourEntryHandlingChoice", "tasksToDone", "childHandlingChoice", "labelNames"], "SCS_MemberReference": ["story", "story", "storyBusiness", "story", "backlogId", "iteration", "userIds", "labelNames", "story", "story", "story", "rank", "story", "SUCCESS", "story", "storyId", "story", "SUCCESS", "story", "storyId", "story", "SUCCESS", "storyId", "taskHandlingChoice", "storyHourEntryHandlingChoice", "taskHourEntryHandlingChoice", "childHandlingChoice", "SUCCESS", "story", "storyId", "SUCCESS", "story", "storyId", "SUCCESS", "usersChanged", "users", "userIds", "story", "storyId", "story", "iteration", "iteration", "users", "tasksToDone", "tasksToDone", "SUCCESS", "SUCCESS", "story", "storyId", "backlog", "backlogId", "story", "backlog", "SUCCESS", "story", "storyId", "backlog", "backlogId", "story", "backlog", "SUCCESS", "story", "storyId", "backlog", "backlogId", "story", "backlog", "SUCCESS", "story", "storyId", "targetStoryId", "backlogId", "story", "story", "upper", "backlog", "SUCCESS", "story", "storyId", "targetStoryId", "backlogId", "story", "story", "lower", "backlog", "SUCCESS", "story", "storyId", "backlog", "backlogId", "story", "story", "backlog", "SUCCESS", "story", "storyId", "backlog", "backlogId", "story", "story", "backlog", "SUCCESS", "story", "storyId", "backlogId", "story", "userIds", "labelNames", "SUCCESS", "story", "storyId", "backlogId", "story", "userIds", "labelNames", "SUCCESS", "story", "objectId", "backlog", "backlog", "backlog", "backlogId", "backlogId", "backlogId", "story", "story", "story", "storyId", "storyName", "state", "state", "state", "userIds", "userIds", "userIds", "storyId", "storyId", "storyId", "iteration", "iterationId", "iteration", "priority", "priority", "priority", "storyListContext", "storyListContext", "storyListContext", "storyBusiness", "storyBusiness", "metrics", "usersChanged", "usersChanged", "storyHistory", "backlogBusiness", "backlogBusiness", "targetStoryId", "targetStoryId", "taskHandlingChoice", "taskHandlingChoice", "taskHourEntryHandlingChoice", "taskHourEntryHandlingChoice", "storyHourEntryHandlingChoice", "storyHourEntryHandlingChoice", "storyHourEntryHandlingChoice", "taskHandlingChoice", "taskHourEntryHandlingChoice", "tasksToDone", "tasksToDone", "childHandlingChoice", "childHandlingChoice", "labelNames", "labelNames", "labelNames"], "SCS_ClassReference": [null, "storyRankBusiness", "story", "storyBusiness", "storyBusiness", "storyBusiness", "storyBusiness", "storyBusiness", "storyBusiness", "storyBusiness", "backlogBusiness", "storyBusiness", "storyBusiness", "backlogBusiness", "storyBusiness", "storyBusiness", "backlogBusiness", "storyBusiness", "storyBusiness", "storyBusiness", "backlogBusiness", "storyBusiness", "storyBusiness", "storyBusiness", "backlogBusiness", "storyBusiness", "storyBusiness", "backlogBusiness", "storyBusiness", "storyBusiness", "backlogBusiness", "storyBusiness", "storyBusiness", "storyBusiness", "storyBusiness", "story", "story", "story"], "SCS_MethodInvocation": ["create", "getRankByBacklog", "getBacklog", "copyStorySibling", "extractUnfinishedStorySibling", "deleteAndUpdateHistory", "retrieveStoryWithMetrics", "retrieve", "store", "retrieve", "retrieve", "moveStoryAway", "retrieve", "retrieve", "moveSingleStoryToBacklog", "retrieve", "retrieve", "moveStoryAndChildren", "retrieve", "retrieveIfExists", "retrieveIfExists", "rankStoryUnder", "retrieve", "retrieveIfExists", "retrieveIfExists", "rankStoryOver", "retrieve", "retrieve", "rankStoryToTop", "retrieve", "retrieve", "rankStoryToBottom", "createStoryUnder", "createStorySibling", "retrieveDetached", "getId", "getName", "setName"], "SCS_VariableDeclaration": ["StoryRank", "Set", "Story", "Backlog", "Story", "Backlog"], "CO": ["// CRUD", "/**\n     * Creates a new deep copy of a given story and places it\n     * as a sibling.\n     * @author braden\n     * \n     * @return Successful action.\n     */", "/**\n     * Creates a new copy of a given story and\n     * moves the unfinished tasks to the new story\n     * \n     * @return Successful action.\n     */", "//story = this.toTransferObject(story);", "// OTHER FUNCTIONS", "// PREFETCHING", "// AUTOGENERATED"], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.stereotype.Component;\n\nimport com.opensymphony.xwork2.Action;\nimport com.opensymphony.xwork2.ActionSupport;\n\nimport fi.hut.soberit.agilefant.annotations.PrefetchId;\nimport fi.hut.soberit.agilefant.business.BacklogBusiness;\nimport fi.hut.soberit.agilefant.business.StoryBusiness;\nimport fi.hut.soberit.agilefant.business.StoryRankBusiness;\nimport fi.hut.soberit.agilefant.model.Backlog;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.StoryRank;\nimport fi.hut.soberit.agilefant.model.StoryState;\nimport fi.hut.soberit.agilefant.transfer.HistoryRowTO;\nimport fi.hut.soberit.agilefant.transfer.StoryTO;\nimport fi.hut.soberit.agilefant.util.ChildHandlingChoice;\nimport fi.hut.soberit.agilefant.util.HourEntryHandlingChoice;\nimport fi.hut.soberit.agilefant.util.StoryMetrics;\nimport fi.hut.soberit.agilefant.util.TaskHandlingChoice;\n\n@Component(\"storyAction\")\n@Scope(\"prototype\")\npublic class StoryAction extends ActionSupport implements CRUDAction, Prefetching {\n\n    private static final long serialVersionUID = -4289013472775815522L;\n\n    private int backlogId = 0;\n\n    @PrefetchId\n    private Integer storyId;\n    \n    private Integer targetStoryId;\n\n    private StoryState state;\n    \n    private int iteration;\n\n    private int priority;\n\n    private Story story;\n\n    private Backlog backlog;\n\n    private Set<Integer> userIds = new HashSet<Integer>();\n    \n    private boolean usersChanged = false;\n        \n    private String storyListContext;\n    \n    private StoryMetrics metrics;\n        \n    private List<HistoryRowTO> storyHistory;\n    \n    private boolean tasksToDone = false;\n    \n    private List<String> labelNames;\n\n    \n\n    @Autowired\n    private StoryBusiness storyBusiness;\n    \n    @Autowired\n    private StoryRankBusiness storyRankBusiness;\n    \n    @Autowired\n    private BacklogBusiness backlogBusiness;\n    \n    private HourEntryHandlingChoice taskHourEntryHandlingChoice;\n    private HourEntryHandlingChoice storyHourEntryHandlingChoice;\n    private TaskHandlingChoice taskHandlingChoice;\n    private ChildHandlingChoice childHandlingChoice;\n\n\n    @Override\n    public String execute() throws Exception {\n        story = new Story();\n        return super.execute();\n    }\n    \n    // CRUD\n    \n    public String create() {\n        story = this.storyBusiness.create(story, backlogId, iteration, userIds, labelNames);\n        StoryRank rank = storyRankBusiness.getRankByBacklog(story, story.getBacklog());\n        \n        story = new StoryTO(story);\n        if (rank != null) ((StoryTO)story).setRank(rank.getRank());\n        \n        return Action.SUCCESS;\n    }\n    \n    /**\n     * Creates a new deep copy of a given story and places it\n     * as a sibling.\n     * @author braden\n     * \n     * @return Successful action.\n     */\n    public String copyStorySibling() {\n        story = storyBusiness.copyStorySibling(storyId, story);\n        return Action.SUCCESS;\n    }\n    \n    /**\n     * Creates a new copy of a given story and\n     * moves the unfinished tasks to the new story\n     * \n     * @return Successful action.\n     */\n    public String extractUnfinishedStorySibling() {\n        story = storyBusiness.extractUnfinishedStorySibling(storyId, story);\n        return Action.SUCCESS;\n    }\n\n    public String delete() {\n        storyBusiness.deleteAndUpdateHistory(storyId, taskHandlingChoice, storyHourEntryHandlingChoice, taskHourEntryHandlingChoice, childHandlingChoice);\n        return Action.SUCCESS;\n    }\n\n    public String retrieve() {\n        story = storyBusiness.retrieveStoryWithMetrics(storyId);\n        //story = this.toTransferObject(story);\n        return Action.SUCCESS;\n    }\n\n    public String deleteStoryForm() {\n        story = storyBusiness.retrieve(storyId);\n        return Action.SUCCESS;\n    }\n    \n    public String store() {\n        Set<Integer> users = null;\n        if (usersChanged) {\n            users = this.userIds;\n        }\n        story = storyBusiness.store(storyId, story, iteration!=0?iteration:null, users, tasksToDone);\n        if (tasksToDone) {\n            return Action.SUCCESS + \"_withTasks\";\n        }\n        return Action.SUCCESS;\n    }\n    \n    \n    // OTHER FUNCTIONS\n    \n    public String moveStoryAway() {\n        story = storyBusiness.retrieve(storyId);\n        backlog = backlogBusiness.retrieve(backlogId);\n        storyBusiness.moveStoryAway(story, backlog);\n        return Action.SUCCESS;\n    }\n    \n    public String safeMoveSingleStory() {\n        story = storyBusiness.retrieve(storyId);\n        backlog = backlogBusiness.retrieve(backlogId);\n        storyBusiness.moveSingleStoryToBacklog(story, backlog);\n        return Action.SUCCESS;\n    }\n    \n    public String moveStoryAndChildren() {\n        story = storyBusiness.retrieve(storyId);\n        backlog = backlogBusiness.retrieve(backlogId);\n        storyBusiness.moveStoryAndChildren(story, backlog);\n        return Action.SUCCESS;\n    }\n    \n    public String rankStoryUnder() {\n        story = storyBusiness.retrieve(storyId);\n        Story upper = storyBusiness.retrieveIfExists(targetStoryId);\n        Backlog backlog = backlogBusiness.retrieveIfExists(backlogId);\n        story = storyBusiness.rankStoryUnder(story, upper, backlog);\n        return Action.SUCCESS;\n    }\n    \n    public String rankStoryOver() {\n        story = storyBusiness.retrieve(storyId);\n        Story lower = storyBusiness.retrieveIfExists(targetStoryId);\n        Backlog backlog = backlogBusiness.retrieveIfExists(backlogId);\n        story = storyBusiness.rankStoryOver(story, lower, backlog);\n        return Action.SUCCESS;\n    }\n    \n    public String rankStoryToTop() {\n        story = storyBusiness.retrieve(storyId);\n        backlog = backlogBusiness.retrieve(backlogId);\n        story = storyBusiness.rankStoryToTop(story, backlog);\n        return Action.SUCCESS;\n    }\n    \n    public String rankStoryToBottom() {\n        story = storyBusiness.retrieve(storyId);\n        backlog = backlogBusiness.retrieve(backlogId);\n        story = storyBusiness.rankStoryToBottom(story, backlog);\n        return Action.SUCCESS;\n    }\n    \n    public String createStoryUnder() {\n        story = storyBusiness.createStoryUnder(storyId, backlogId, story, userIds, labelNames);\n        return Action.SUCCESS;\n    }\n    \n    public String createStorySibling() {\n        story = storyBusiness.createStorySibling(storyId, backlogId, story, userIds, labelNames);\n        return Action.SUCCESS;\n    }\n\n    // PREFETCHING\n    \n    public void initializePrefetchedData(int objectId) {\n        story = storyBusiness.retrieveDetached(objectId);\n    }\n    \n    \n    // AUTOGENERATED\n    \n    public Backlog getBacklog() {\n        return backlog;\n    }\n\n    public void setBacklog(Backlog backlog) {\n        this.backlog = backlog;\n    }\n\n    public int getBacklogId() {\n        return backlogId;\n    }\n\n    public void setBacklogId(int backlogId) {\n        this.backlogId = backlogId;\n    }\n\n    public Story getStory() {\n        return story;\n    }\n\n    public void setStory(Story story) {\n        this.story = story;\n        this.storyId = story.getId();\n    }\n   \n    public String getStoryName() {\n        return story.getName();\n    }\n\n    public void setStoryName(String storyName) {\n        story.setName(storyName);\n    }\n\n    public StoryState getState() {\n        return state;\n    }\n\n    public void setState(StoryState state) {\n        this.state = state;\n    }\n\n    public Set<Integer> getUserIds() {\n        return userIds;\n    }\n\n    public void setUserIds(Set<Integer> userIds) {\n        this.userIds = userIds;\n    }\n\n    public Integer getStoryId() {\n        return storyId;\n    }\n\n    public void setStoryId(Integer storyId) {\n        this.storyId = storyId;\n    }\n\n    public void setIteration(int iterationId) {\n        this.iteration = iterationId;\n    }\n    \n    public int getIterationId() {\n        return iteration;\n    }\n    \n    public void setPriority(Integer priority) {\n        this.priority = priority;\n    }\n\n    public Integer getPriority() {\n        return priority;\n    }\n    \n    public String getStoryListContext() {\n        return storyListContext;\n    }\n\n    public void setStoryListContext(String storyListContext) {\n        this.storyListContext = storyListContext;\n    }\n    \n    public void setStoryBusiness(StoryBusiness storyBusiness) {\n        this.storyBusiness = storyBusiness;\n    }\n\n    public StoryMetrics getMetrics() {\n        return metrics;\n    }\n\n    public void setUsersChanged(boolean usersChanged) {\n        this.usersChanged = usersChanged;\n    }\n\n    public List<HistoryRowTO> getStoryHistory() {\n        return storyHistory;\n    }\n\n    public void setBacklogBusiness(BacklogBusiness backlogBusiness) {\n        this.backlogBusiness = backlogBusiness;\n    }\n\n    public void setTargetStoryId(Integer targetStoryId) {\n        this.targetStoryId = targetStoryId;\n    }\n    public void setTaskHandlingChoice(TaskHandlingChoice taskHandlingChoice) {\n        this.taskHandlingChoice = taskHandlingChoice;\n    }\n    public void setTaskHourEntryHandlingChoice(\n            HourEntryHandlingChoice taskHourEntryHandlingChoice) {\n        this.taskHourEntryHandlingChoice = taskHourEntryHandlingChoice;\n    }\n    public void setStoryHourEntryHandlingChoice(\n            HourEntryHandlingChoice storyHourEntryHandlingChoice) {\n        this.storyHourEntryHandlingChoice = storyHourEntryHandlingChoice;\n    }\n    public HourEntryHandlingChoice getStoryHourEntryHandlingChoice() {\n        return storyHourEntryHandlingChoice;\n    }\n    public TaskHandlingChoice getTaskHandlingChoice() {\n        return taskHandlingChoice;\n    }\n    public HourEntryHandlingChoice getTaskHourEntryHandlingChoice() {\n        return taskHourEntryHandlingChoice;\n    }\n    public void setTasksToDone(boolean tasksToDone) {\n        this.tasksToDone = tasksToDone;\n    }\n\n    public void setChildHandlingChoice(ChildHandlingChoice childHandlingChoice) {\n        this.childHandlingChoice = childHandlingChoice;\n    }\n\n    public List<String> getLabelNames() {\n        return labelNames;\n    }\n\n    public void setLabelNames(List<String> labelNames) {\n        this.labelNames = labelNames;\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\StoryHierarchyAction.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["StoryHierarchyAction"], "AN": ["serialVersionUID", "storyBusiness", "storyHierarchyBusiness", "stories", "storyFilters", "storyId", "storyIds", "projectId", "productId", "story", "topmostStory", "referenceStoryId", "hierarchy", "integrityErrors", "branchMetrics"], "SCS_VariableDeclarator": ["serialVersionUID", "storyBusiness", "storyHierarchyBusiness", "stories", "storyFilters", "storyId", "storyIds", "projectId", "productId", "story", "topmostStory", "referenceStoryId", "hierarchy", "integrityErrors", "branchMetrics", "reference", "i", "s", "reference", "i", "s", "reference", "i", "s", "target", "reference", "target", "reference", "target", "reference", "messages", "stim", "message", "story", "fullInfoStory", "fullInfoStoryMap", "story", "fullInfoStory", "fullInfoStoryMap", "fullInfoStory", "story", "fullInfoStory"], "MN": ["recurseHierarchyAsList", "moveMultipleBefore", "moveMultipleUnder", "moveMultipleAfter", "moveStoryUnder", "moveStoryAfter", "moveStoryBefore", "parseIntegrityErrors", "retrieveBranchMetrics", "retrieveProductRootStories", "retrieveProjectRootStories", "initHashMap", "setStoriesInformation", "setStoryId", "setStoryIds", "getHierarchy", "setStoryBusiness", "getStory", "setReferenceStoryId", "setStoryHierarchyBusiness", "getStories", "setProductId", "setProjectId", "getStoryFilters", "setStoryFilters", "getTopmostStory", "getIntegrityErrors", "getBranchMetrics"], "PN": ["stive", "fullInfoStories", "fullInfoStoryMap", "stories", "fullInfoStoryMap", "storyId", "storyIds", "storyBusiness", "parentId", "storyHierarchyBusiness", "productId", "projectId", "storyFilters"], "SCS_MemberReference": ["story", "storyId", "topmostStory", "story", "SUCCESS", "storyBusiness", "referenceStoryId", "storyIds", "storyBusiness", "i", "storyHierarchyBusiness", "s", "reference", "stive", "ERROR", "SUCCESS", "storyBusiness", "referenceStoryId", "storyIds", "storyBusiness", "i", "storyHierarchyBusiness", "s", "reference", "stive", "ERROR", "SUCCESS", "storyBusiness", "referenceStoryId", "storyIds", "storyBusiness", "i", "storyHierarchyBusiness", "s", "reference", "stive", "ERROR", "SUCCESS", "storyBusiness", "storyId", "storyBusiness", "referenceStoryId", "storyHierarchyBusiness", "target", "reference", "stive", "ERROR", "SUCCESS", "storyBusiness", "storyId", "storyBusiness", "referenceStoryId", "storyHierarchyBusiness", "target", "reference", "stive", "ERROR", "SUCCESS", "storyBusiness", "storyId", "storyBusiness", "referenceStoryId", "storyHierarchyBusiness", "target", "reference", "stive", "ERROR", "SUCCESS", "messages", "messages", "message", "message", "story", "storyBusiness", "storyId", "branchMetrics", "storyHierarchyBusiness", "story", "SUCCESS", "stories", "productId", "storyFilters", "stories", "storyBusiness", "fullInfoStory", "fullInfoStoryMap", "fullInfoStoryMap", "SUCCESS", "stories", "projectId", "storyFilters", "stories", "storyBusiness", "fullInfoStory", "fullInfoStoryMap", "fullInfoStoryMap", "SUCCESS", "fullInfoStories", "fullInfoStory", "fullInfoStoryMap", "stories", "fullInfoStory", "fullInfoStoryMap", "storyId", "storyId", "storyIds", "storyIds", "hierarchy", "storyBusiness", "storyBusiness", "story", "referenceStoryId", "parentId", "storyHierarchyBusiness", "storyHierarchyBusiness", "stories", "productId", "productId", "projectId", "projectId", "storyFilters", "storyFilters", "storyFilters", "topmostStory", "integrityErrors", "branchMetrics"], "SCS_ClassReference": ["storyBusiness", "storyHierarchyBusiness", null, null, null, "", null, null, null, "", null, null, null, "", null, null, null, "", null, null, null, "", null, null, null, "", "stive", "StoryTreeIntegrityUtils", null, "stim", "stim", "stim", null, "stim", null, null, "integrityErrors", null, null, "storyHierarchyBusiness", null, "story", "story", "", "fullInfoStory", "", "story", "storyHierarchyBusiness", null, "story", "story", "", "fullInfoStory", "", "story", "fullInfoStoryMap", "fullInfoStory", "", "fullInfoStory", "fullInfoStoryMap", "story", "story", "", "story"], "SCS_MethodInvocation": ["retrieve", "recurseHierarchy", "retrieve", "retrieve", "moveBefore", "parseIntegrityErrors", "retrieve", "retrieve", "moveUnder", "parseIntegrityErrors", "retrieve", "retrieve", "moveAfter", "parseIntegrityErrors", "retrieve", "retrieve", "moveUnder", "parseIntegrityErrors", "retrieve", "retrieve", "moveAfter", "parseIntegrityErrors", "retrieve", "retrieve", "moveBefore", "parseIntegrityErrors", "getMessages", "getFatalMessages", "getText", "getMessageName", "getTarget", "getTarget", "getName", "getTarget", "getBacklog", "getName", "add", "retrieve", "calculateStoryTreeMetrics", "retrieveProductRootStories", "retrieve", "getId", "setFullInfoStory", "initHashMap", "getChildren", "setStoriesInformation", "getChildren", "retrieveProjectRootStories", "retrieve", "getId", "setFullInfoStory", "initHashMap", "getChildren", "setStoriesInformation", "getChildren", "put", "getId", "initHashMap", "getChildren", "get", "getId", "setFullInfoStory", "setStoriesInformation", "getChildren"], "SCS_VariableDeclaration": ["Story", "int", "Story", "Story", "int", "Story", "Story", "int", "Story", "Story", "Story", "Story", "Story", "Story", "Story", "List", "StoryTreeIntegrityMessage", "String", "Story", "Story", "HashMap", "Story", "Story", "HashMap", "Story", "Story", "Story"], "CO": ["// Check for fatal messages", "// Build the string", "/*\n     * SETTERS AND GETTERS\n     */"], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.stereotype.Component;\n\nimport com.opensymphony.xwork2.Action;\nimport com.opensymphony.xwork2.ActionSupport;\n\nimport fi.hut.soberit.agilefant.business.StoryBusiness;\nimport fi.hut.soberit.agilefant.business.StoryHierarchyBusiness;\nimport fi.hut.soberit.agilefant.exception.StoryTreeIntegrityViolationException;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.transfer.StoryTreeBranchMetrics;\nimport fi.hut.soberit.agilefant.util.StoryFilters;\nimport fi.hut.soberit.agilefant.util.StoryTreeIntegrityMessage;\nimport fi.hut.soberit.agilefant.util.StoryTreeIntegrityUtils;\n\n@Component(\"storyHierarchyAction\")\n@Scope(\"prototype\")\npublic class StoryHierarchyAction extends ActionSupport {\n    private static final long serialVersionUID = 2599224272717369900L;\n\n    @Autowired\n    private StoryBusiness storyBusiness;\n    \n    @Autowired\n    private StoryHierarchyBusiness storyHierarchyBusiness;\n        \n    private List<Story> stories;\n    private StoryFilters storyFilters = new StoryFilters();\n    private Integer storyId;\n    private Integer[] storyIds;\n    private Integer projectId;\n    private Integer productId;\n    private Story story;\n    private Story topmostStory;\n    private Integer referenceStoryId;\n\n    private List<Story> hierarchy = new ArrayList<Story>();\n    \n    private List<String> integrityErrors = new ArrayList<String>(); \n    \n    private StoryTreeBranchMetrics branchMetrics;\n\n    public String recurseHierarchyAsList() {\n        story = storyBusiness.retrieve(storyId);\n        topmostStory = storyHierarchyBusiness.recurseHierarchy(story);\n        return Action.SUCCESS;\n    }\n    \n    public String moveMultipleBefore() {\n        Story reference = this.storyBusiness.retrieve(referenceStoryId);\n        try {\n            for (int i : storyIds)\n            {\n                Story s = this.storyBusiness.retrieve(i);\n                this.storyHierarchyBusiness.moveBefore(s, reference);\n            }\n        } catch (StoryTreeIntegrityViolationException stive) {\n            parseIntegrityErrors(stive);\n            return Action.ERROR;\n        }\n        return Action.SUCCESS;\n    }\n    \n    public String moveMultipleUnder() {\n        Story reference = this.storyBusiness.retrieve(referenceStoryId);\n        try {\n            for (int i : storyIds)\n            {\n                Story s = this.storyBusiness.retrieve(i);\n                this.storyHierarchyBusiness.moveUnder(s, reference);\n            }\n        } catch (StoryTreeIntegrityViolationException stive) {\n            parseIntegrityErrors(stive);\n            return Action.ERROR;\n        }\n        return Action.SUCCESS;\n    }\n    \n    public String moveMultipleAfter() {\n        Story reference = this.storyBusiness.retrieve(referenceStoryId);\n        try {\n            for (int i : storyIds)\n            {\n                Story s = this.storyBusiness.retrieve(i);\n                this.storyHierarchyBusiness.moveAfter(s, reference);\n            }\n        } catch (StoryTreeIntegrityViolationException stive) {\n            parseIntegrityErrors(stive);\n            return Action.ERROR;\n        }\n        return Action.SUCCESS;\n    }\n    \n    public String moveStoryUnder() {\n        Story target = this.storyBusiness.retrieve(storyId);\n        Story reference = this.storyBusiness.retrieve(referenceStoryId);\n        try {\n            this.storyHierarchyBusiness.moveUnder(target, reference);\n        } catch (StoryTreeIntegrityViolationException stive) {\n            parseIntegrityErrors(stive);\n            return Action.ERROR;\n        }\n        return Action.SUCCESS;\n    }\n\n    public String moveStoryAfter() {\n        Story target = this.storyBusiness.retrieve(storyId);\n        Story reference = this.storyBusiness.retrieve(referenceStoryId);\n        try {\n            this.storyHierarchyBusiness.moveAfter(target, reference);\n        } catch (StoryTreeIntegrityViolationException stive) {\n            parseIntegrityErrors(stive);\n            return Action.ERROR;\n        }\n        return Action.SUCCESS;\n    }\n    \n    public String moveStoryBefore() {\n        Story target = this.storyBusiness.retrieve(storyId);\n        Story reference = this.storyBusiness.retrieve(referenceStoryId);\n        try {\n            this.storyHierarchyBusiness.moveBefore(target, reference);\n        } catch (StoryTreeIntegrityViolationException stive) {\n            parseIntegrityErrors(stive);\n            return Action.ERROR;\n        }\n        return Action.SUCCESS;\n    }\n    \n    private void parseIntegrityErrors(StoryTreeIntegrityViolationException stive) {\n        List<StoryTreeIntegrityMessage> messages = stive.getMessages();\n        // Check for fatal messages\n        StoryTreeIntegrityUtils.getFatalMessages(messages);\n        \n        // Build the string\n        for (StoryTreeIntegrityMessage stim : messages) {\n            String message = this.getText(stim.getMessageName());\n            \n            if (stim.getTarget() != null) {\n                message += \": \" + stim.getTarget().getName() + \" in \"\n                        + stim.getTarget().getBacklog().getName();\n            }\n            integrityErrors.add(message);\n        }\n    }\n    \n    public String retrieveBranchMetrics() {\n        story = this.storyBusiness.retrieve(this.storyId);\n        this.branchMetrics = this.storyHierarchyBusiness.calculateStoryTreeMetrics(story);\n        return Action.SUCCESS;\n    }\n        \n    public String retrieveProductRootStories() {\n        stories = storyHierarchyBusiness.retrieveProductRootStories(productId, storyFilters);\n        for (Story story: stories) {\n            Story fullInfoStory = this.storyBusiness.retrieve(story.getId());\n            story.setFullInfoStory(fullInfoStory);\n            HashMap<Integer, Story> fullInfoStoryMap = new HashMap<Integer, Story>();\n            initHashMap(fullInfoStory.getChildren(), fullInfoStoryMap);\n            setStoriesInformation(story.getChildren(), fullInfoStoryMap);\n        }\n        return Action.SUCCESS;\n    }\n    public String retrieveProjectRootStories() {\n        stories = storyHierarchyBusiness.retrieveProjectRootStories(projectId, storyFilters);\n        for (Story story: stories) {\n            Story fullInfoStory = this.storyBusiness.retrieve(story.getId());\n            story.setFullInfoStory(fullInfoStory);\n            HashMap<Integer, Story> fullInfoStoryMap = new HashMap<Integer, Story>();\n            initHashMap(fullInfoStory.getChildren(), fullInfoStoryMap);\n            setStoriesInformation(story.getChildren(), fullInfoStoryMap);\n        }\n        return Action.SUCCESS;\n    }\n    \n    private void initHashMap(List<Story> fullInfoStories, HashMap<Integer, Story> fullInfoStoryMap) {\n        for (Story fullInfoStory: fullInfoStories) {\n            fullInfoStoryMap.put(fullInfoStory.getId(), fullInfoStory);\n            initHashMap(fullInfoStory.getChildren(), fullInfoStoryMap);\n        }\n    }\n    \n    private void setStoriesInformation(List<Story> stories, HashMap<Integer, Story> fullInfoStoryMap) {\n        for (Story story: stories) {\n            Story fullInfoStory = fullInfoStoryMap.get(story.getId());\n            story.setFullInfoStory(fullInfoStory);\n            setStoriesInformation(story.getChildren(), fullInfoStoryMap);\n        }\n    }\n\n    /*\n     * SETTERS AND GETTERS\n     */\n\n    public void setStoryId(Integer storyId) {\n        this.storyId = storyId;\n    }\n\n    public void setStoryIds(Integer[] storyIds) {\n        this.storyIds = storyIds;\n    }\n    \n    public List<Story> getHierarchy() {\n        return hierarchy;\n    }\n\n    public void setStoryBusiness(StoryBusiness storyBusiness) {\n        this.storyBusiness = storyBusiness;\n    }\n\n    public Story getStory() {\n        return story;\n    }\n\n    public void setReferenceStoryId(Integer parentId) {\n        this.referenceStoryId = parentId;\n    }\n\n    public void setStoryHierarchyBusiness(\n            StoryHierarchyBusiness storyHierarchyBusiness) {\n        this.storyHierarchyBusiness = storyHierarchyBusiness;\n    }\n    \n    public List<Story> getStories() {\n        return stories;\n    }\n    \n    public void setProductId(Integer productId) {\n        this.productId = productId;\n    }\n    \n    public void setProjectId(Integer projectId) {\n        this.projectId = projectId;\n    }\n\n    public StoryFilters getStoryFilters() {\n        return storyFilters;\n    }\n\n    public void setStoryFilters(StoryFilters storyFilters) {\n        this.storyFilters = storyFilters;\n    }\n\n    public Story getTopmostStory() {\n        return topmostStory;\n    }\n\n    public List<String> getIntegrityErrors() {\n        return integrityErrors;\n    }\n\n    public StoryTreeBranchMetrics getBranchMetrics() {\n        return branchMetrics;\n    }\n\n}", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\StoryListAction.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["StoryListAction"], "AN": ["storyFilters", "stories", "objectId", "projectBusiness", "storyRankBusiness"], "SCS_VariableDeclarator": ["storyFilters", "stories", "objectId", "projectBusiness", "storyRankBusiness"], "MN": ["projectLeafStories", "rankedStoriesByContext", "getStoryFilters", "setStoryFilters", "getStories", "setStories", "getObjectId", "setObjectId"], "PN": ["storyFilters", "stories", "objectId"], "SCS_MemberReference": ["stories", "objectId", "storyFilters", "SUCCESS", "stories", "objectId", "SUCCESS", "storyFilters", "storyFilters", "storyFilters", "stories", "stories", "stories", "objectId", "objectId", "objectId"], "SCS_ClassReference": ["projectBusiness", "storyRankBusiness"], "SCS_MethodInvocation": ["retrieveLeafStories", "retrieveByRankingContext"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport java.util.List;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.stereotype.Component;\n\nimport com.opensymphony.xwork2.Action;\n\nimport fi.hut.soberit.agilefant.business.ProjectBusiness;\nimport fi.hut.soberit.agilefant.business.StoryRankBusiness;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.transfer.StoryTO;\nimport fi.hut.soberit.agilefant.util.StoryFilters;\n\n@Component(\"storyListAction\")\n@Scope(\"prototype\")\npublic class StoryListAction {\n    \n    private StoryFilters storyFilters = new StoryFilters(null, null);\n    private List<? extends Story> stories;\n    private int objectId;\n    @Autowired\n    private ProjectBusiness projectBusiness;\n    @Autowired\n    private StoryRankBusiness storyRankBusiness;\n    \n    \n    public String projectLeafStories() {\n        stories = projectBusiness.retrieveLeafStories(objectId, storyFilters);\n        return Action.SUCCESS;\n    }\n    \n    public String rankedStoriesByContext() {\n        stories = storyRankBusiness.retrieveByRankingContext(objectId);\n        return Action.SUCCESS;\n    }\n\n\n    public StoryFilters getStoryFilters() {\n        return storyFilters;\n    }\n\n\n    public void setStoryFilters(StoryFilters storyFilters) {\n        this.storyFilters = storyFilters;\n    }\n\n\n    public List<? extends Story> getStories() {\n        return stories;\n    }\n\n\n    public void setStories(List<StoryTO> stories) {\n        this.stories = stories;\n    }\n\n\n    public int getObjectId() {\n        return objectId;\n    }\n\n\n    public void setObjectId(int objectId) {\n        this.objectId = objectId;\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\StoryTreeIntegrityAction.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["StoryTreeIntegrityAction"], "AN": ["serialVersionUID", "FATAL_CONSTRAINT", "storyTreeIntegrityBusiness", "storyBusiness", "backlogBusiness", "iterationBusiness", "data", "messages", "parentStoryConflict", "backlog", "story", "storyId", "targetStoryId", "backlogId"], "SCS_VariableDeclarator": ["serialVersionUID", "FATAL_CONSTRAINT", "storyTreeIntegrityBusiness", "storyBusiness", "backlogBusiness", "iterationBusiness", "data", "messages", "parentStoryConflict", "backlog", "story", "storyId", "targetStoryId", "backlogId", "story", "target"], "MN": ["checkChangeBacklog", "checkChangeParentStory", "setStoryTreeIntegrityBusiness", "setStoryId", "setTargetStoryId", "getMessages", "setBacklogId", "getData", "getBacklog", "setBacklog", "getStory", "isParentStoryConflict"], "PN": ["storyTreeIntegrityBusiness", "storyId", "targetStoryId", "backlogId", "backlog"], "SCS_MemberReference": ["story", "storyId", "backlog", "backlogId", "messages", "story", "backlog", "data", "story", "messages", "parentStoryConflict", "story", "backlog", "messages", "FATAL_CONSTRAINT", "SUCCESS", "storyId", "targetStoryId", "messages", "story", "target", "SUCCESS", "storyTreeIntegrityBusiness", "storyTreeIntegrityBusiness", "storyId", "storyId", "targetStoryId", "targetStoryId", "messages", "backlogId", "backlogId", "data", "backlog", "backlog", "backlog", "story", "parentStoryConflict"], "SCS_ClassReference": ["storyBusiness", "backlogBusiness", "storyTreeIntegrityBusiness", "storyTreeIntegrityBusiness", "storyTreeIntegrityBusiness", "StoryTreeIntegrityUtils", "storyBusiness", "storyBusiness", "storyTreeIntegrityBusiness"], "SCS_MethodInvocation": ["retrieve", "retrieve", "checkChangeBacklog", "generateChangedStoryTree", "hasParentStoryConflict", "getFatalMessages", "retrieve", "retrieve", "checkChangeParentStory"], "SCS_VariableDeclaration": ["Story", "Story"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport java.util.List;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.stereotype.Component;\n\nimport com.opensymphony.xwork2.Action;\nimport com.opensymphony.xwork2.ActionSupport;\n\nimport fi.hut.soberit.agilefant.business.BacklogBusiness;\nimport fi.hut.soberit.agilefant.business.IterationBusiness;\nimport fi.hut.soberit.agilefant.business.StoryBusiness;\nimport fi.hut.soberit.agilefant.business.StoryTreeIntegrityBusiness;\nimport fi.hut.soberit.agilefant.model.Backlog;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.transfer.MoveStoryNode;\nimport fi.hut.soberit.agilefant.util.StoryTreeIntegrityMessage;\nimport fi.hut.soberit.agilefant.util.StoryTreeIntegrityUtils;\n\n@Component(\"storyTreeIntegrityAction\")\n@Scope(\"prototype\")\npublic class StoryTreeIntegrityAction extends ActionSupport {\n\n    private static final long serialVersionUID = 5026286059393178372L;\n\n    public static final String FATAL_CONSTRAINT = \"fatalConstraint\"; \n    \n    @Autowired\n    private StoryTreeIntegrityBusiness storyTreeIntegrityBusiness;\n    @Autowired\n    private StoryBusiness storyBusiness;\n    @Autowired\n    private BacklogBusiness backlogBusiness;\n    @Autowired\n    private IterationBusiness iterationBusiness;\n    \n    private MoveStoryNode data;\n    \n    private List<StoryTreeIntegrityMessage> messages;\n    \n    private boolean parentStoryConflict = false;\n    \n    private Backlog backlog;\n    private Story story;\n    \n    private Integer storyId;\n    private Integer targetStoryId;\n    private Integer backlogId;\n\n\n    public String checkChangeBacklog() {\n        story = storyBusiness.retrieve(storyId);\n        backlog = backlogBusiness.retrieve(backlogId);\n        \n        messages = storyTreeIntegrityBusiness.checkChangeBacklog(story, backlog);\n\n        data = storyTreeIntegrityBusiness.generateChangedStoryTree(story, messages);\n        \n        parentStoryConflict = storyTreeIntegrityBusiness.hasParentStoryConflict(story, backlog);\n        \n        if (StoryTreeIntegrityUtils.getFatalMessages(messages)) {\n            return FATAL_CONSTRAINT; \n        }\n        \n        return Action.SUCCESS;\n    }\n    \n    public String checkChangeParentStory() {\n        Story story = storyBusiness.retrieve(storyId);\n        Story target = storyBusiness.retrieve(targetStoryId);\n        \n        messages = storyTreeIntegrityBusiness.checkChangeParentStory(story, target);\n        \n        return Action.SUCCESS;\n    }\n    \n    public void setStoryTreeIntegrityBusiness(\n            StoryTreeIntegrityBusiness storyTreeIntegrityBusiness) {\n        this.storyTreeIntegrityBusiness = storyTreeIntegrityBusiness;\n    }\n\n    public void setStoryId(Integer storyId) {\n        this.storyId = storyId;\n    }\n\n    public void setTargetStoryId(Integer targetStoryId) {\n        this.targetStoryId = targetStoryId;\n    }\n\n    public List<StoryTreeIntegrityMessage> getMessages() {\n        return messages;\n    }\n\n    public void setBacklogId(Integer backlogId) {\n        this.backlogId = backlogId;\n    }\n\n    public MoveStoryNode getData() {\n        return data;\n    }\n\n    public Backlog getBacklog() {\n        return backlog;\n    }\n\n    public void setBacklog(Backlog backlog) {\n        this.backlog = backlog;\n    }\n\n    public Story getStory() {\n        return story;\n    }\n\n    public boolean isParentStoryConflict() {\n        return parentStoryConflict;\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\TaskAction.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["TaskAction"], "AN": ["serialVersionUID", "taskBusiness", "transferObjectBusiness", "storyHierarchyBusiness", "task", "taskId", "rankUnderId", "iterationId", "storyId", "responsiblesChanged", "storyToStarted", "parentStory", "newResponsibles", "hourEntryHandlingChoice"], "SCS_VariableDeclarator": ["serialVersionUID", "taskBusiness", "transferObjectBusiness", "storyHierarchyBusiness", "task", "taskId", "rankUnderId", "iterationId", "storyId", "responsiblesChanged", "storyToStarted", "parentStory", "newResponsibles", "hourEntryHandlingChoice", "startStory", "currentUser", "rankUnder"], "MN": ["create", "store", "markStoryStarted", "retrieve", "delete", "getTaskContext", "move", "resetOriginalEstimate", "rankUnder", "deleteTaskForm", "taskToTransferObject", "initializePrefetchedData", "setTask", "getTask", "setTaskBusiness", "setTaskId", "setTransferObjectBusiness", "setIterationId", "setStoryId", "getNewResponsibles", "setNewResponsibles", "setRankUnderId", "setHourEntryHandlingChoice", "getHourEntryHandlingChoice", "setResponsiblesChanged", "getParentStory", "setStoryToStarted"], "PN": ["objectId", "task", "taskBusiness", "taskId", "transferObjectBusiness", "iterationId", "storyId", "newResponsibles", "rankUnderId", "hourEntryHandlingChoice", "responsiblesChanged", "storyToStarted"], "SCS_ClassReference": ["", "task", "", "taskBusiness", "", "SecurityUtil", "currentUser", "taskBusiness", "", "taskBusiness", "taskBusiness", "task", "storyHierarchyBusiness", "task", "taskBusiness", "taskBusiness", "", "taskBusiness", "taskBusiness", "", "taskBusiness", "taskBusiness", "taskBusiness", "taskBusiness", "transferObjectBusiness", "taskBusiness"], "SCS_MethodInvocation": ["setTask", "setResponsibles", "markStoryStarted", "storeTask", "taskToTransferObject", "getLoggedUser", "getMarkStoryStarted", "retrieve", "taskToTransferObject", "deleteAndUpdateHistory", "retrieve", "getStory", "recurseHierarchy", "getStory", "retrieve", "move", "taskToTransferObject", "retrieve", "resetOriginalEstimate", "taskToTransferObject", "retrieve", "retrieveIfExists", "rankAndMove", "retrieve", "constructTaskTO", "retrieveDetached"], "SCS_MemberReference": ["SUCCESS", "responsiblesChanged", "newResponsibles", "storyToStarted", "startStory", "task", "task", "iterationId", "storyId", "startStory", "startStory", "SUCCESS", "SUCCESS", "currentUser", "always", "task", "taskId", "SUCCESS", "taskId", "hourEntryHandlingChoice", "SUCCESS", "task", "taskId", "parentStory", "SUCCESS", "task", "taskId", "task", "task", "iterationId", "storyId", "SUCCESS", "task", "taskId", "task", "taskId", "SUCCESS", "task", "taskId", "rankUnderId", "task", "task", "rankUnder", "storyId", "iterationId", "SUCCESS", "task", "taskId", "SUCCESS", "task", "task", "task", "objectId", "task", "task", "task", "taskBusiness", "taskBusiness", "taskId", "taskId", "transferObjectBusiness", "transferObjectBusiness", "iterationId", "iterationId", "storyId", "storyId", "newResponsibles", "newResponsibles", "newResponsibles", "rankUnderId", "rankUnderId", "hourEntryHandlingChoice", "hourEntryHandlingChoice", "hourEntryHandlingChoice", "responsiblesChanged", "responsiblesChanged", "parentStory", "storyToStarted", "storyToStarted"], "SCS_VariableDeclaration": ["boolean", "User", "Task"], "CO": ["// Services", "// Helper fields", "// CRUD", "// OTHER FUNCTIONS", "// Prefetching", "// AUTOGENERATED    "], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport java.util.HashSet;\nimport java.util.Set;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.stereotype.Component;\n\nimport com.opensymphony.xwork2.Action;\nimport com.opensymphony.xwork2.ActionSupport;\n\nimport fi.hut.soberit.agilefant.annotations.PrefetchId;\nimport fi.hut.soberit.agilefant.business.StoryHierarchyBusiness;\nimport fi.hut.soberit.agilefant.business.TaskBusiness;\nimport fi.hut.soberit.agilefant.business.TransferObjectBusiness;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.Task;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.model.User.UserSettingType;\nimport fi.hut.soberit.agilefant.security.SecurityUtil;\nimport fi.hut.soberit.agilefant.util.HourEntryHandlingChoice;\n\n@Component(\"taskAction\")\n@Scope(\"prototype\")\npublic class TaskAction extends ActionSupport implements Prefetching, CRUDAction {\n\n    private static final long serialVersionUID = 7699657599039468223L;\n    \n    // Services\n    @Autowired\n    private TaskBusiness taskBusiness;\n    \n    @Autowired\n    private TransferObjectBusiness transferObjectBusiness;\n    \n    @Autowired\n    private StoryHierarchyBusiness storyHierarchyBusiness;\n    \n    // Helper fields\n    private Task task;\n    @PrefetchId\n    private int taskId;\n    \n    private int rankUnderId;\n    \n    private Integer iterationId;\n    private Integer storyId;\n    private boolean responsiblesChanged = false;\n    private boolean storyToStarted = false;\n    \n    private Story parentStory;\n    \n    private Set<User> newResponsibles = new HashSet<User>();\n    \n    private HourEntryHandlingChoice hourEntryHandlingChoice;\n    \n\n    // CRUD\n    public String create() {\n        setTask(new Task());\n        return Action.SUCCESS;\n    }\n    \n    public String store() {\n        if (responsiblesChanged) {\n            task.setResponsibles(newResponsibles);\n        }\n        \n        boolean startStory = false;\n        \n        if (storyToStarted || markStoryStarted()) {\n            startStory = true;\n        }\n        \n        task = taskBusiness.storeTask(task, iterationId, storyId, startStory);\n        taskToTransferObject();\n        if (startStory) {\n            return Action.SUCCESS + \"_withStory\";\n        }\n        return Action.SUCCESS;\n    }\n    \n    private boolean markStoryStarted() {\n        User currentUser = SecurityUtil.getLoggedUser();\n        if (currentUser != null \n                && currentUser.getMarkStoryStarted() == UserSettingType.always) {\n            return true;\n        }\n        return false;\n    }\n    \n    public String retrieve() {\n        task = taskBusiness.retrieve(taskId);\n        taskToTransferObject();\n        return Action.SUCCESS;\n    }\n    \n    public String delete() {\n        taskBusiness.deleteAndUpdateHistory(taskId, hourEntryHandlingChoice);\n        return Action.SUCCESS;\n    }\n    \n    // OTHER FUNCTIONS\n    \n    public String getTaskContext() {\n        task = taskBusiness.retrieve(taskId);\n        if (task.getStory() != null) {\n            parentStory = storyHierarchyBusiness.recurseHierarchy(task.getStory());\n        }\n        return Action.SUCCESS;\n    }\n    \n    public String move() {\n        task = taskBusiness.retrieve(taskId);\n        task = taskBusiness.move(task, iterationId, storyId);\n        taskToTransferObject();\n        return Action.SUCCESS;\n    }\n    \n    public String resetOriginalEstimate() {\n        task = taskBusiness.retrieve(taskId);\n        task = taskBusiness.resetOriginalEstimate(taskId);\n        taskToTransferObject();\n        return Action.SUCCESS;\n    }\n    \n    public String rankUnder() {\n        task = taskBusiness.retrieve(taskId);\n        Task rankUnder = taskBusiness.retrieveIfExists(rankUnderId);\n        \n        task = taskBusiness.rankAndMove(task, rankUnder, storyId, iterationId);\n        \n        return Action.SUCCESS;\n    }\n    \n    public String deleteTaskForm() {\n        task = taskBusiness.retrieve(taskId);\n        return Action.SUCCESS;\n    }\n    \n    private void taskToTransferObject() {\n        task = transferObjectBusiness.constructTaskTO(task);\n    }\n        \n    // Prefetching\n    public void initializePrefetchedData(int objectId) {\n        task = taskBusiness.retrieveDetached(objectId);\n    }\n    \n      \n    // AUTOGENERATED    \n    public void setTask(Task task) {\n        this.task = task;\n    }\n\n    public Task getTask() {\n        return task;\n    }\n    \n    public void setTaskBusiness(TaskBusiness taskBusiness) {\n        this.taskBusiness = taskBusiness;\n    }\n\n    public void setTaskId(int taskId) {\n        this.taskId = taskId;\n    }\n\n    public void setTransferObjectBusiness(\n            TransferObjectBusiness transferObjectBusiness) {\n        this.transferObjectBusiness = transferObjectBusiness;\n    }\n\n    public void setIterationId(Integer iterationId) {\n        this.iterationId = iterationId;\n    }\n\n    public void setStoryId(Integer storyId) {\n        this.storyId = storyId;\n    }\n    \n    public Set<User> getNewResponsibles() {\n        return this.newResponsibles;\n    }\n\n    public void setNewResponsibles(Set<User> newResponsibles) {\n        this.newResponsibles = new HashSet<User>(newResponsibles);\n    }\n\n    public void setRankUnderId(int rankUnderId) {\n        this.rankUnderId = rankUnderId;\n    }\n    \n    public void setHourEntryHandlingChoice(\n            HourEntryHandlingChoice hourEntryHandlingChoice) {\n        this.hourEntryHandlingChoice = hourEntryHandlingChoice;\n    }\n    public HourEntryHandlingChoice getHourEntryHandlingChoice() {\n        return hourEntryHandlingChoice;\n    }\n    \n    public void setResponsiblesChanged(boolean responsiblesChanged) {\n        this.responsiblesChanged = responsiblesChanged;\n    }\n\n    public Story getParentStory() {\n        return parentStory;\n    }\n\n    public void setStoryToStarted(boolean storyToStarted) {\n        this.storyToStarted = storyToStarted;\n    }\n    \n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\TaskSplitAction.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["TaskSplitAction"], "AN": ["taskBusiness", "taskSplitBusiness", "originalTaskId", "original", "responsibles", "newTasks"], "SCS_VariableDeclarator": ["taskBusiness", "taskSplitBusiness", "originalTaskId", "original", "responsibles", "newTasks"], "MN": ["split", "initializePrefetchedData", "getOriginal", "setOriginal", "getNewTasks", "setNewTasks", "setTaskBusiness", "setTaskSplitBusiness", "setOriginalTaskId", "getResponsibles", "setResponsibles"], "PN": ["objectId", "original", "newTasks", "taskBusiness", "taskSplitBusiness", "originalTaskId", "responsibles"], "SCS_ClassReference": ["original", "taskSplitBusiness", "taskBusiness"], "SCS_MethodInvocation": ["setResponsibles", "splitTask", "retrieveDetached"], "SCS_MemberReference": ["responsibles", "original", "original", "newTasks", "SUCCESS", "original", "objectId", "original", "original", "original", "newTasks", "newTasks", "newTasks", "taskBusiness", "taskBusiness", "taskSplitBusiness", "taskSplitBusiness", "originalTaskId", "originalTaskId", "responsibles", "responsibles", "responsibles"], "CO": ["/* GETTERS AND SETTERS */"], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashSet;\nimport java.util.List;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.stereotype.Component;\n\nimport com.opensymphony.xwork2.Action;\n\nimport fi.hut.soberit.agilefant.annotations.PrefetchId;\nimport fi.hut.soberit.agilefant.business.TaskBusiness;\nimport fi.hut.soberit.agilefant.business.TaskSplitBusiness;\nimport fi.hut.soberit.agilefant.model.Task;\nimport fi.hut.soberit.agilefant.model.User;\n\n@Component(\"taskSplitAction\")\n@Scope(\"prototype\")\npublic class TaskSplitAction implements Prefetching {\n\n    @Autowired\n    private TaskBusiness taskBusiness;\n\n    @Autowired\n    private TaskSplitBusiness taskSplitBusiness;\n\n    @SuppressWarnings(\"unused\")\n    @PrefetchId\n    private int originalTaskId;\n   \n    private Task original;\n    \n    private List<User> responsibles = new ArrayList<User>();\n    \n    private Collection<Task> newTasks = new ArrayList<Task>(); \n    \n    public String split() {\n        original.setResponsibles(new HashSet<User>(responsibles));\n        original = taskSplitBusiness.splitTask(original, newTasks);\n        return Action.SUCCESS;\n    }\n    \n    public void initializePrefetchedData(int objectId) {\n        original = taskBusiness.retrieveDetached(objectId);\n    }\n\n    /* GETTERS AND SETTERS */\n    public Task getOriginal() {\n        return original;\n    }\n\n    public void setOriginal(Task original) {\n        this.original = original;\n    }\n\n    public Collection<Task> getNewTasks() {\n        return newTasks;\n    }\n\n    public void setNewTasks(Collection<Task> newTasks) {\n        this.newTasks = newTasks;\n    }\n\n    public void setTaskBusiness(TaskBusiness taskBusiness) {\n        this.taskBusiness = taskBusiness;\n    }\n\n    public void setTaskSplitBusiness(TaskSplitBusiness taskSplitBusiness) {\n        this.taskSplitBusiness = taskSplitBusiness;\n    }\n    \n    public void setOriginalTaskId(int originalTaskId) {\n        this.originalTaskId = originalTaskId;\n    }\n\n    public List<User> getResponsibles() {\n        return responsibles;\n    }\n\n    public void setResponsibles(List<User> responsibles) {\n        this.responsibles = responsibles;\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\TeamAction.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["TeamAction"], "AN": ["serialVersionUID", "teamId", "team", "teamList", "userIds", "usersChanged", "productIds", "productsChanged", "iterationIds", "iterationsChanged", "teamBusiness", "userBusiness"], "SCS_VariableDeclarator": ["serialVersionUID", "teamId", "team", "teamList", "userIds", "usersChanged", "productIds", "productsChanged", "iterationIds", "iterationsChanged", "teamBusiness", "userBusiness", "loggedUser", "isAdmin", "users", "products", "iterations"], "MN": ["create", "delete", "retrieve", "retrieveAll", "call", "call", "retrieveMyTeams", "call", "store", "initializePrefetchedData", "getTeamId", "setTeamId", "getTeam", "setTeam", "getTeamList", "setTeamList", "setTeamBusiness", "setUsersChanged", "getUserIds", "setUserIds", "setProductsChanged", "getProductIds", "setProductIds", "setIterationsChanged", "getIterationIds", "setIterationIds", "deleteTeamForm", "getLoggedInUser"], "PN": ["objectId", "teamId", "team", "teamList", "teamBusiness", "usersChanged", "userIds", "productsChanged", "productIds", "iterationsChanged", "iterationIds"], "SCS_MemberReference": ["teamId", "team", "SUCCESS", "teamId", "SUCCESS", "team", "teamId", "SUCCESS", "isAdmin", "teamBusiness", "teamBusiness", "SUCCESS", "teamBusiness", "SUCCESS", "usersChanged", "users", "userIds", "productsChanged", "products", "productIds", "iterationsChanged", "iterations", "iterationIds", "team", "team", "users", "products", "iterations", "SUCCESS", "team", "objectId", "teamId", "teamId", "teamId", "team", "team", "team", "teamList", "teamList", "teamList", "teamBusiness", "teamBusiness", "usersChanged", "usersChanged", "userIds", "userIds", "userIds", "productsChanged", "productsChanged", "productIds", "productIds", "productIds", "iterationsChanged", "iterationsChanged", "iterationIds", "iterationIds", "iterationIds", "team", "teamId", "SUCCESS"], "SCS_ClassReference": ["team", "teamBusiness", "teamBusiness", "", "loggedUser", "teamList", null, "teamBusiness", "teamList", null, "userBusiness", null, "", null, "teamList", null, "userBusiness", null, "", null, "teamBusiness", "teamBusiness", "teamBusiness", "SecurityUtil"], "SCS_MethodInvocation": ["setUsers", "delete", "retrieve", "getLoggedInUser", "isAdmin", "addAll", "withUsers", "retrieveAll", "addAll", "withUsers", "retrieve", "getTeams", "getLoggedInUser", "getId", "addAll", "withUsers", "retrieve", "getTeams", "getLoggedInUser", "getId", "storeTeam", "retrieve", "retrieve", "getLoggedUser"], "SCS_VariableDeclaration": ["User", "Boolean", "Set", "Set", "Set"], "CO": ["/**\n     * Create a new team.\n     */", "/**\n     * Delete an existing team.\n     */", "/**\n     * Edit a team.\n     */", "/**\n     * Store the team.\n     */", "/*\n     * List of autogenerated setters and getters\n     */", "/**\n     * @return the teamId\n     */", "/**\n     * @param teamId\n     *            the teamId to set\n     */", "/**\n     * @return the team\n     */", "/**\n     * @param team\n     *            the team to set\n     */", "/** USED WITH TeamRowController.js to confirm team deletion**/"], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.stereotype.Component;\n\nimport com.opensymphony.xwork2.Action;\nimport com.opensymphony.xwork2.ActionSupport;\n\nimport fi.hut.soberit.agilefant.annotations.PrefetchId;\nimport fi.hut.soberit.agilefant.business.TeamBusiness;\nimport fi.hut.soberit.agilefant.business.TeamBusiness.Call;\nimport fi.hut.soberit.agilefant.business.UserBusiness;\nimport fi.hut.soberit.agilefant.model.Team;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.security.SecurityUtil;\n\n@Component(\"teamAction\")\n@Scope(\"prototype\")\npublic class TeamAction extends ActionSupport implements CRUDAction, Prefetching {\n\n    private static final long serialVersionUID = -3334278151418035144L;\n\n    @PrefetchId\n    private int teamId;\n\n    private Team team;\n    \n    private List<Team> teamList = new ArrayList<Team>();\n    \n    private Set<Integer> userIds = new HashSet<Integer>();\n    \n    private boolean usersChanged;\n    \n    private Set<Integer> productIds = new HashSet<Integer>();\n    \n    private boolean productsChanged;\n    \n    private Set<Integer> iterationIds = new HashSet<Integer>();\n    \n    private boolean iterationsChanged;\n\n    @Autowired\n    private TeamBusiness teamBusiness;\n    \n    @Autowired\n    private UserBusiness userBusiness;\n\n    /**\n     * Create a new team.\n     */\n    public String create() {\n        teamId = 0;\n        team = new Team();\n        team.setUsers(new ArrayList<User>());\n        return Action.SUCCESS;\n    }\n\n    /**\n     * Delete an existing team.\n     */\n    public String delete() {\n        teamBusiness.delete(teamId);\n        return Action.SUCCESS;\n    }\n\n    /**\n     * Edit a team.\n     */\n    public String retrieve() {\n        team = teamBusiness.retrieve(teamId);\n        return Action.SUCCESS;\n    }\n    \n    public String retrieveAll() {\n        \n        User loggedUser = getLoggedInUser();\n        Boolean isAdmin = loggedUser.isAdmin();\n        \n        if (isAdmin) {\n            teamList.addAll(this.teamBusiness.withUsers(new Call<Collection<Team>>() {\n            \tpublic Collection<Team> call() {\n            \t\treturn teamBusiness.retrieveAll();\n            \t}\n            }));\n        } else {\n            teamList.addAll(this.teamBusiness.withUsers(new Call<Collection<Team>>() {\n            \tpublic Collection<Team> call() {\n            \t\treturn userBusiness.retrieve(getLoggedInUser().getId()).getTeams();\n            \t}\n            }));\n        }\n        return Action.SUCCESS;\n    }\n    \n    public String retrieveMyTeams() {        \n        teamList.addAll(this.teamBusiness.withUsers(new Call<Collection<Team>>() {\n        \tpublic Collection<Team> call() {\n        \t\treturn userBusiness.retrieve(getLoggedInUser().getId()).getTeams();\n        \t}\n        }));\n        return Action.SUCCESS;\n    }\n\n    /**\n     * Store the team.\n     */\n    public String store() {\n        Set<Integer> users = null;\n        if (usersChanged) {\n            users = userIds;\n        }\n        \n        Set<Integer> products = null;\n        if (productsChanged) {\n            products = productIds;\n        }\n        \n        Set<Integer> iterations = null;\n        if (iterationsChanged) {\n            iterations = iterationIds;\n        }\n        \n        team = teamBusiness.storeTeam(team, users, products, iterations);\n        return Action.SUCCESS;\n    }\n\n\n\n    public void initializePrefetchedData(int objectId) {\n        team = teamBusiness.retrieve(objectId);\n    }\n    \n\n    /*\n     * List of autogenerated setters and getters\n     */\n\n    /**\n     * @return the teamId\n     */\n    public int getTeamId() {\n        return teamId;\n    }\n\n    /**\n     * @param teamId\n     *            the teamId to set\n     */\n    public void setTeamId(int teamId) {\n        this.teamId = teamId;\n    }\n\n    /**\n     * @return the team\n     */\n    public Team getTeam() {\n        return team;\n    }\n\n    /**\n     * @param team\n     *            the team to set\n     */\n    public void setTeam(Team team) {\n        this.team = team;\n    }\n\n\n    public List<Team> getTeamList() {\n        return teamList;\n    }\n\n    public void setTeamList(List<Team> teamList) {\n        this.teamList = teamList;\n    }\n\n    public void setTeamBusiness(TeamBusiness teamBusiness) {\n        this.teamBusiness = teamBusiness;\n    }\n\n    public void setUsersChanged(boolean usersChanged) {\n        this.usersChanged = usersChanged;\n    }\n\n    public Set<Integer> getUserIds() {\n        return userIds;\n    }\n\n    public void setUserIds(Set<Integer> userIds) {\n        this.userIds = userIds;\n    }\n    \n    public void setProductsChanged(boolean productsChanged) {\n        this.productsChanged = productsChanged;\n    }\n\n    public Set<Integer> getProductIds() {\n        return productIds;\n    }\n\n    public void setProductIds(Set<Integer> productIds) {\n        this.productIds = productIds;\n    }\n\n    public void setIterationsChanged(boolean iterationsChanged) {\n        this.iterationsChanged = iterationsChanged;\n    }\n\n    public Set<Integer> getIterationIds() {\n        return iterationIds;\n    }\n\n    public void setIterationIds(Set<Integer> iterationIds) {\n        this.iterationIds = iterationIds;\n    }\n    \n    /** USED WITH TeamRowController.js to confirm team deletion**/\n    \n    public String deleteTeamForm() {\n        team = teamBusiness.retrieve(teamId);\n        return Action.SUCCESS;\n    }\n    \n    protected User getLoggedInUser() {\n        return SecurityUtil.getLoggedUser();\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\TimesheetAction.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["TimesheetAction"], "AN": ["serialVersionUID", "timesheetBusiness", "timesheetExportBusiness", "userBusiness", "backlogBusiness", "productBusiness", "authorizationBusiness", "productIds", "projectIds", "iterationIds", "products", "startDate", "endDate", "timeZoneString", "timeZone", "interval", "userIds", "onlyOngoing", "effortSum", "exportableReport", "errorMessage"], "SCS_VariableDeclarator": ["serialVersionUID", "timesheetBusiness", "timesheetExportBusiness", "userBusiness", "backlogBusiness", "productBusiness", "authorizationBusiness", "productIds", "projectIds", "iterationIds", "products", "startDate", "endDate", "timeZoneString", "timeZone", "interval", "userIds", "onlyOngoing", "effortSum", "exportableReport", "errorMessage", "user", "selectedBacklogIds", "products", "product", "iters", "i", "backlogId", "selectedBacklogIds", "products", "product", "iters", "i", "backlogId", "wb", "selectedUsers", "userId", "user", "timeZoneDouble", "hoursOffset", "minutesOffset"], "MN": ["getSelectedBacklogs", "initialize", "checkAccess", "generateTree", "generateExeclReport", "getSelectedUsers", "getTimesheetBusiness", "setTimesheetBusiness", "getProductBusiness", "setProductBusiness", "getProductIds", "setProductIds", "getProjectIds", "setProjectIds", "getIterationIds", "setIterationIds", "getProducts", "setProducts", "getStartDate", "setStartDate", "getEndDate", "setEndDate", "getTimeZone", "setTimeZone", "getTimeZoneString", "setTimeZoneString", "getInterval", "setInterval", "getUserIds", "setUserIds", "isOnlyOngoing", "setOnlyOngoing", "getJSONProducts", "getJSONProjects", "getJSONIterations", "getEffortSum", "setBacklogBusiness", "setUserBusiness", "setTimesheetExportBusiness", "getSheetData", "setExportableReport", "getErrorMessage"], "PN": ["backlogId", "timesheetBusiness", "productBusiness", "productIds", "projectIds", "iterationIds", "products", "startDate", "endDate", "timeZone", "timeZoneString", "interval", "userIds", "onlyOngoing", "backlogBusiness", "userBusiness", "timesheetExportBusiness", "exportableReport"], "SCS_MemberReference": ["iterationIds", "iterationIds", "projectIds", "projectIds", "productIds", "productIds", "interval", "onlyOngoing", "timeZone", "SUCCESS", "authorizationBusiness", "backlogId", "user", "selectedBacklogIds", "products", "products", "backlogId", "backlogId", "products", "selectedBacklogIds", "startDate", "endDate", "timeZone", "userIds", "effortSum", "products", "SUCCESS", "selectedBacklogIds", "products", "products", "backlogId", "backlogId", "timesheetExportBusiness", "selectedBacklogIds", "startDate", "endDate", "timeZone", "userIds", "exportableReport", "exportableReport", "ERROR", "SUCCESS", "userIds", "userId", "NON_EXISTENT_USER_ID", "userBusiness", "userId", "user", "user", "selectedUsers", "timesheetBusiness", "timesheetBusiness", "timesheetBusiness", "productBusiness", "productBusiness", "productBusiness", "productIds", "productIds", "productIds", "projectIds", "projectIds", "projectIds", "iterationIds", "iterationIds", "iterationIds", "products", "products", "products", "startDate", "startDate", "startDate", "endDate", "endDate", "endDate", "timeZone", "timeZone", "timeZone", "timeZoneString", "timeZoneString", "timeZoneString", "timeZoneString", "timeZoneDouble", "hoursOffset", "minutesOffset", "minutesOffset", "minutesOffset", "timeZone", "hoursOffset", "minutesOffset", "interval", "interval", "interval", "userIds", "userIds", "userIds", "onlyOngoing", "onlyOngoing", "onlyOngoing", "productIds", "projectIds", "iterationIds", "effortSum", "backlogBusiness", "backlogBusiness", "userBusiness", "userBusiness", "timesheetExportBusiness", "timesheetExportBusiness", "exportableReport", "exportableReport", "exportableReport", "errorMessage"], "SCS_ClassReference": [null, null, null, null, "SecurityUtil", null, null, "selectedBacklogIds", "productBusiness", "selectedBacklogIds", "product", "selectedBacklogIds", "selectedBacklogIds", "backlogBusiness", "iters", "i", "i", null, "", "selectedBacklogIds", "timesheetBusiness", "timesheetBusiness", null, "selectedBacklogIds", "productBusiness", "selectedBacklogIds", "product", "selectedBacklogIds", "selectedBacklogIds", "backlogBusiness", "iters", "i", "i", null, "", "selectedBacklogIds", null, "wb", "Collections", null, null, "selectedUsers", "timeZoneDouble", "Math", "DateTimeZone", null, null, null, null], "SCS_MethodInvocation": ["size", "size", "size", "getZone", "getLoggedUser", "isBacklogAccessible", "getSelectedBacklogs", "size", "storeAllTimeSheets", "add", "getId", "contains", "remove", "retrieveAllStandAloneIterations", "iterator", "hasNext", "next", "getId", "checkAccess", "add", "getRootNodes", "getRootNodeSum", "getSelectedBacklogs", "size", "storeAllTimeSheets", "add", "getId", "contains", "remove", "retrieveAllStandAloneIterations", "iterator", "hasNext", "next", "getId", "checkAccess", "add", "generateTimesheet", "write", "emptyList", "getUserIds", "retrieve", "add", "intValue", "abs", "forOffsetHoursMinutes", "serialize", "serialize", "serialize", "toByteArray"], "SCS_VariableDeclaration": ["User", "Set", "Collection", "Product", "Collection", "Iterator", "int", "Set", "Collection", "Product", "Collection", "Iterator", "int", "Workbook", "List", "int", "User", "Double", "int", "int"], "CO": ["/**\n * \n * @author Vesa Pirila / Spider\n * @author Pasi Pekkanen\n *\n */", "// Standalone Iterations", "// Standalone Iterations"], "CODE": "package fi.hut.soberit.agilefant.web;\n\n\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Set;\n\nimport org.apache.poi.ss.usermodel.Workbook;\nimport org.joda.time.DateTime;\nimport org.joda.time.DateTimeZone;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.stereotype.Component;\n\nimport com.opensymphony.xwork2.Action;\nimport com.opensymphony.xwork2.ActionSupport;\n\nimport fi.hut.soberit.agilefant.business.AuthorizationBusiness;\nimport fi.hut.soberit.agilefant.business.BacklogBusiness;\nimport fi.hut.soberit.agilefant.business.ProductBusiness;\nimport fi.hut.soberit.agilefant.business.TimesheetBusiness;\nimport fi.hut.soberit.agilefant.business.TimesheetExportBusiness;\nimport fi.hut.soberit.agilefant.business.UserBusiness;\nimport fi.hut.soberit.agilefant.model.Backlog;\nimport fi.hut.soberit.agilefant.model.Product;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.security.SecurityUtil;\nimport fi.hut.soberit.agilefant.transfer.BacklogTimesheetNode;\nimport flexjson.JSONSerializer;\n\n/**\n * \n * @author Vesa Pirila / Spider\n * @author Pasi Pekkanen\n *\n */\n@Component(\"timesheetAction\")\n@Scope(\"prototype\")\npublic class TimesheetAction extends ActionSupport {\n\n    private static final long serialVersionUID = -8988740967426943267L;\n    \n    @Autowired\n    private TimesheetBusiness timesheetBusiness;\n    \n    @Autowired\n    private TimesheetExportBusiness timesheetExportBusiness;\n\n    @Autowired\n    private UserBusiness userBusiness;\n    \n    @Autowired\n    private BacklogBusiness backlogBusiness;\n    \n    @Autowired\n    private ProductBusiness productBusiness;\n    \n    @Autowired\n    private AuthorizationBusiness authorizationBusiness;\n    \n    private Set<Integer> productIds = new HashSet<Integer>();\n    \n    private Set<Integer> projectIds = new HashSet<Integer>();\n    \n    private Set<Integer> iterationIds = new HashSet<Integer>();\n    \n    private List<BacklogTimesheetNode> products;\n    \n    private DateTime startDate;\n\n    private DateTime endDate;\n    \n    private String timeZoneString = \"\";\n    \n    private DateTimeZone timeZone;\n    \n\tprivate String interval;\n    \n    private Set<Integer> userIds = new HashSet<Integer>();\n        \n    private boolean onlyOngoing = false;\n    \n    private long effortSum = 0;\n    \n    private ByteArrayOutputStream exportableReport;\n    \n    private String errorMessage = \"\";\n   \n    \n    public Set<Integer> getSelectedBacklogs() {\n        if(this.iterationIds.size() > 0) {\n            return this.iterationIds;\n        } else if(this.projectIds.size() > 0) {\n            return this.projectIds;\n        } else if(this.productIds.size() > 0) {\n            return this.productIds;\n        }\n        return new HashSet<Integer>();\n    }\n    public String initialize() {\n        this.interval = \"NO_INTERVAL\";\n        this.onlyOngoing = false;\n        this.timeZone = new DateTime().getZone();\n        return Action.SUCCESS;\n    }\n    \n    private boolean checkAccess(int backlogId){\n        User user = SecurityUtil.getLoggedUser();\n        return this.authorizationBusiness.isBacklogAccessible(backlogId, user);\n    }\n\n    public String generateTree(){\n        Set<Integer> selectedBacklogIds = this.getSelectedBacklogs();\n        if(selectedBacklogIds == null || selectedBacklogIds.size() == 0) {\n            Collection<Product> products = new ArrayList<Product>();\n            productBusiness.storeAllTimeSheets(products);\n            for (Product product: products) {\n                selectedBacklogIds.add(product.getId());\n            }\n        }        \n        if (selectedBacklogIds.contains(0))\n        {\n            // Standalone Iterations\n            selectedBacklogIds.remove(0);\n            Collection<Backlog> iters = backlogBusiness.retrieveAllStandAloneIterations();\n            for (Iterator<Backlog> i = iters.iterator();i.hasNext();){\n                int backlogId = i.next().getId();\n                if (checkAccess(backlogId)) {\n                    selectedBacklogIds.add(backlogId);\n                }\n            }\n        }\n        products = timesheetBusiness.getRootNodes(selectedBacklogIds, startDate, endDate, timeZone, this.userIds);\n        effortSum = timesheetBusiness.getRootNodeSum(products);\n        return Action.SUCCESS;\n    }\n    \n    public String generateExeclReport(){\n        Set<Integer> selectedBacklogIds = this.getSelectedBacklogs();\n        if(selectedBacklogIds == null || selectedBacklogIds.size() == 0) {\n            Collection<Product> products = new ArrayList<Product>();\n            productBusiness.storeAllTimeSheets(products);\n            for (Product product: products) {\n                selectedBacklogIds.add(product.getId());\n            }\n        }        \n        if (selectedBacklogIds.contains(0))\n        {\n            // Standalone Iterations\n            selectedBacklogIds.remove(0);\n            Collection<Backlog> iters = backlogBusiness.retrieveAllStandAloneIterations();\n            for (Iterator<Backlog> i = iters.iterator();i.hasNext();){\n                int backlogId = i.next().getId();\n                if (checkAccess(backlogId)) {\n                    selectedBacklogIds.add(backlogId);\n                }\n            }\n        }\n        Workbook wb = this.timesheetExportBusiness.generateTimesheet(this, selectedBacklogIds, startDate, endDate, timeZone, userIds);\n        this.exportableReport = new ByteArrayOutputStream();\n        try {\n            wb.write(this.exportableReport);\n        } catch (IOException e) {\n            return Action.ERROR;\n        }\n        return Action.SUCCESS;\n    }\n\n    public List<User> getSelectedUsers() {\n        if(this.userIds == null) {\n            return Collections.emptyList();\n        }\n        List<User> selectedUsers = new ArrayList<User>();\n        for(int userId : this.getUserIds()) {\n            if (userId != UserBusiness.NON_EXISTENT_USER_ID) {\n                User user = this.userBusiness.retrieve(userId);\n                if(user != null) {\n                    selectedUsers.add(user);\n                }\n            }\n        }\n        return selectedUsers;\n    }\n    public TimesheetBusiness getTimesheetBusiness() {\n        return timesheetBusiness;\n    }\n\n    public void setTimesheetBusiness(TimesheetBusiness timesheetBusiness) {\n        this.timesheetBusiness = timesheetBusiness;\n    }\n\n    public ProductBusiness getProductBusiness() {\n\t\treturn productBusiness;\n\t}\n\tpublic void setProductBusiness(ProductBusiness productBusiness) {\n\t\tthis.productBusiness = productBusiness;\n\t}\n\n    public Set<Integer> getProductIds() {\n        return productIds;\n    }\n\n    public void setProductIds(Set<Integer> productIds) {\n        this.productIds = productIds;\n    }\n\n    public Set<Integer> getProjectIds() {\n        return projectIds;\n    }\n\n    public void setProjectIds(Set<Integer> projectIds) {\n        this.projectIds = projectIds;\n    }\n\n    public Set<Integer> getIterationIds() {\n        return iterationIds;\n    }\n\n    public void setIterationIds(Set<Integer> iterationIds) {\n        this.iterationIds = iterationIds;\n    }\n\n    public List<BacklogTimesheetNode> getProducts() {\n        return products;\n    }\n\n    public void setProducts(List<BacklogTimesheetNode> products) {\n        this.products = products;\n    }\n\n    public DateTime getStartDate() {\n        return startDate;\n    }\n\n    public void setStartDate(DateTime startDate) {\n        this.startDate = startDate;\n    }\n\n    public DateTime getEndDate() {\n        return endDate;\n    }\n\n    public void setEndDate(DateTime endDate) {\n        this.endDate = endDate;\n    }\n    \n    public DateTimeZone getTimeZone() {\n\t\treturn timeZone;\n\t}\n\tpublic void setTimeZone(DateTimeZone timeZone) {\n\t\tthis.timeZone = timeZone;\n\t}\n\t\n    public String getTimeZoneString() {\n\t\treturn timeZoneString;\n\t}\n\tpublic void setTimeZoneString(String timeZoneString) {\n\t\tthis.timeZoneString = timeZoneString;\n\t\tDouble timeZoneDouble = new Double(timeZoneString);\n\t\tint hoursOffset = timeZoneDouble.intValue();\n\t\tint minutesOffset = (int)Math.abs((60 * (timeZoneDouble - hoursOffset)));\n\t\tif (minutesOffset > 59 || minutesOffset < 0) {\n\t\t\tminutesOffset = 0;\n\t\t}\n\t\tthis.timeZone = DateTimeZone.forOffsetHoursMinutes(hoursOffset, minutesOffset);\n\t}\n\n    public String getInterval() {\n        return interval;\n    }\n\n    public void setInterval(String interval) {\n        this.interval = interval;\n    }\n\n    public Set<Integer> getUserIds() {\n        return userIds;\n    }\n\n    public void setUserIds(Set<Integer> userIds) {\n        this.userIds = userIds;\n    }\n\n    public boolean isOnlyOngoing() {\n        return onlyOngoing;\n    }\n\n    public void setOnlyOngoing(boolean onlyOngoing) {\n        this.onlyOngoing = onlyOngoing;\n    }\n    \n    public String getJSONProducts() {\n        return new JSONSerializer().serialize(this.productIds);\n    }\n    public String getJSONProjects() {\n        return new JSONSerializer().serialize(this.projectIds);\n    }\n    public String getJSONIterations() {\n        return new JSONSerializer().serialize(this.iterationIds);\n    }\n    public long getEffortSum() {\n        return effortSum;\n    }\n    public void setBacklogBusiness(BacklogBusiness backlogBusiness) {\n        this.backlogBusiness = backlogBusiness;\n    }\n    public void setUserBusiness(UserBusiness userBusiness) {\n        this.userBusiness = userBusiness;\n    }\n    public void setTimesheetExportBusiness(\n            TimesheetExportBusiness timesheetExportBusiness) {\n        this.timesheetExportBusiness = timesheetExportBusiness;\n    }\n    public InputStream getSheetData() {\n        return new ByteArrayInputStream(this.exportableReport.toByteArray());\n    }\n    public void setExportableReport(ByteArrayOutputStream exportableReport) {\n        this.exportableReport = exportableReport;\n    }\n    public String getErrorMessage() {\n        return this.errorMessage;\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\UserAction.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["UserAction"], "AN": ["serialVersionUID", "userId", "user", "loggedUser", "password1", "password2", "loginName", "valid", "isAdmin", "users", "teamIds", "teamsChanged", "userBusiness", "teamBusiness"], "SCS_VariableDeclarator": ["serialVersionUID", "userId", "user", "loggedUser", "password1", "password2", "loginName", "valid", "isAdmin", "users", "teamIds", "teamsChanged", "userBusiness", "teamBusiness", "teams"], "MN": ["execute", "getLoggedInUserId", "create", "retrieve", "retrieveAll", "store", "delete", "disable", "enable", "checkLoginName", "initializePrefetchedData", "setUserBusiness", "getUsers", "setUserId", "getUserId", "setUser", "getUser", "setPassword1", "setPassword2", "getTeamIds", "setTeamIds", "setTeamsChanged", "setLoginName", "isValid", "getLoggedInUser", "getTeamMembers", "getLoggedUserAndCheckAdminStatus"], "PN": ["objectId", "userBusiness", "userId", "user", "password1", "password2", "teamIds", "teamsChanged", "loginName", "loggedUser"], "SCS_MemberReference": ["userId", "userId", "user", "userId", "SUCCESS", "user", "SUCCESS", "userId", "userId", "isAdmin", "loggedUser", "user", "userId", "user", "user", "loggedUser", "user", "userId", "SUCCESS", "isAdmin", "users", "loggedUser", "SUCCESS", "teamsChanged", "teams", "teamIds", "user", "user", "teams", "password1", "password2", "SUCCESS", "userId", "SUCCESS", "user", "userId", "SUCCESS", "user", "userId", "SUCCESS", "valid", "loginName", "SUCCESS", "user", "objectId", "userBusiness", "userBusiness", "users", "userId", "userId", "userId", "user", "user", "user", "password1", "password1", "password2", "password2", "teamIds", "teamIds", "teamIds", "teamsChanged", "teamsChanged", "loginName", "loginName", "valid", "users", "teamBusiness", "loggedUser", "isAdmin"], "SCS_ClassReference": ["", "userBusiness", "SecurityUtil", "user", null, "", null, "userBusiness", "users", "userBusiness", null, "userBusiness", null, "userBusiness", "userBusiness", "userBusiness", "userBusiness", "user", "userBusiness", "userBusiness", "user", "userBusiness", "userBusiness", "SecurityUtil", null, "loggedUser", "", "loggedUser"], "SCS_MethodInvocation": ["getLoggedInUserId", "retrieve", "getLoggedUserId", "setEnabled", "getLoggedUserAndCheckAdminStatus", "getLoggedInUserId", "getTeamMembers", "retrieve", "contains", "retrieve", "getLoggedUserAndCheckAdminStatus", "retrieveAll", "getTeamMembers", "storeUser", "retrieve", "retrieve", "disableUser", "getId", "retrieve", "enableUser", "getId", "isLoginNameUnique", "retrieve", "getLoggedUser", "getUsersInSameTeams", "getId", "getLoggedInUser", "isAdmin"], "SCS_VariableDeclaration": ["Set"], "CO": ["/**\n * UserAction\n * \n * @author khel\n */", "/*\n     * GETTERS AND SETTERS\n     */"], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Set;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.stereotype.Component;\n\nimport com.opensymphony.xwork2.Action;\nimport com.opensymphony.xwork2.ActionSupport;\n\nimport fi.hut.soberit.agilefant.annotations.PrefetchId;\nimport fi.hut.soberit.agilefant.business.TeamBusiness;\nimport fi.hut.soberit.agilefant.business.UserBusiness;\nimport fi.hut.soberit.agilefant.model.Team;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.security.SecurityUtil;\n\n/**\n * UserAction\n * \n * @author khel\n */\n@Component(\"userAction\")\n@Scope(\"prototype\")\npublic class UserAction extends ActionSupport implements CRUDAction, Prefetching {\n\n    private static final long serialVersionUID = 284890678155663442L;\n\n    @PrefetchId\n    private int userId;\n\n    private User user;\n    private User loggedUser;\n    \n    private String password1;\n    private String password2;\n    \n    private String loginName;\n    private boolean valid;\n    private boolean isAdmin;\n\n    private Collection<User> users = new ArrayList<User>();\n    \n    private Set<Integer> teamIds = new HashSet<Integer>();\n    private boolean teamsChanged = false;\n    \n    @Autowired\n    private UserBusiness userBusiness;\n    \n    @Autowired\n    private TeamBusiness teamBusiness;\n\n    @Override\n    public String execute() {\n        \n        if (userId == 0) {\n            userId = getLoggedInUserId();\n        }\n\n        user = userBusiness.retrieve(userId);\n\n        return Action.SUCCESS;\n    }\n    \n    protected int getLoggedInUserId() {\n        return SecurityUtil.getLoggedUserId();\n    }\n    \n    public String create() {\n        user = new User();\n        user.setEnabled(true);\n        return Action.SUCCESS;\n    }\n\n    public String retrieve() {\n        \n        this.getLoggedUserAndCheckAdminStatus();\n        \n        if (userId == 0) {\n            userId = getLoggedInUserId();\n        }\n        \n        if (!isAdmin) {\n            this.getTeamMembers(loggedUser);\n            user = userBusiness.retrieve(userId);\n            if (!users.contains(user)) {\n                user = loggedUser;\n            }\n        } else {\n            user = userBusiness.retrieve(userId);\n        }\n        return Action.SUCCESS;\n    }\n    \n    public String retrieveAll() {\n        \n        this.getLoggedUserAndCheckAdminStatus();\n        \n        if (isAdmin) {\n            users = userBusiness.retrieveAll();\n        } else {\n            this.getTeamMembers(loggedUser);\n        }\n        return Action.SUCCESS;\n    }\n    \n    public String store() {\n        Set<Integer> teams = null;\n        if (teamsChanged) {\n            teams = teamIds;\n        }\n        user = userBusiness.storeUser(user, teams, password1, password2);\n        return Action.SUCCESS;\n    }\n    \n    public String delete() {\n        userBusiness.retrieve(userId);\n        return Action.SUCCESS;\n    }\n    \n    public String disable() {\n        user = userBusiness.retrieve(userId);\n        userBusiness.disableUser(user.getId());\n        \n        return Action.SUCCESS;\n    }\n    \n    public String enable() {\n        user = userBusiness.retrieve(userId);\n        userBusiness.enableUser(user.getId());\n        \n        return Action.SUCCESS;\n    }\n    \n    public String checkLoginName() {\n        valid = userBusiness.isLoginNameUnique(loginName);\n        return Action.SUCCESS;\n    }\n    \n    \n    public void initializePrefetchedData(int objectId) {\n        user = userBusiness.retrieve(objectId);\n    }\n\n    /*\n     * GETTERS AND SETTERS\n     */\n    public void setUserBusiness(UserBusiness userBusiness) {\n        this.userBusiness = userBusiness;\n    }\n\n    public Collection<User> getUsers() {\n        return users;\n    }\n\n    public void setUserId(int userId) {\n        this.userId = userId;\n    }\n\n    public int getUserId() {\n        return userId;\n    }\n\n    public void setUser(User user) {\n        this.user = user;\n    }\n\n    public User getUser() {\n        return user;\n    }\n\n    public void setPassword1(String password1) {\n        this.password1 = password1;\n    }\n    \n    public void setPassword2(String password2) {\n        this.password2 = password2;\n    }\n\n    public Set<Integer> getTeamIds() {\n        return teamIds;\n    }\n\n    public void setTeamIds(Set<Integer> teamIds) {\n        this.teamIds = teamIds;\n    }\n\n    public void setTeamsChanged(boolean teamsChanged) {\n        this.teamsChanged = teamsChanged;\n    }\n\n    public void setLoginName(String loginName) {\n        this.loginName = loginName;\n    }\n\n    public boolean isValid() {\n        return valid;\n    }\n    \n    protected User getLoggedInUser() {\n        return SecurityUtil.getLoggedUser();\n    }\n    private void getTeamMembers(User loggedUser) {\n    \tthis.users = this.teamBusiness.getUsersInSameTeams(loggedUser.getId());\n    }\n    private void getLoggedUserAndCheckAdminStatus() {\n        loggedUser = getLoggedInUser();\n        isAdmin = loggedUser.isAdmin();\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\UserLoadAction.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["UserLoadAction"], "AN": ["serialVersionUID", "DEFAULT_LOAD_INTERVAL_LENGTH", "personalLoadBusiness", "userBusiness", "userId", "userLoadData", "loadIntervalLength", "loadLimits"], "SCS_VariableDeclarator": ["serialVersionUID", "DEFAULT_LOAD_INTERVAL_LENGTH", "personalLoadBusiness", "userBusiness", "userId", "userLoadData", "loadIntervalLength", "loadLimits", "user", "user"], "MN": ["retrieveUserLoad", "dailyLoadLimits", "getUserLoadData", "setUserLoadData", "setPersonalLoadBusiness", "setUserBusiness", "setUserId", "getLoadLimits", "setLoadIntervalLength"], "PN": ["userLoadData", "personalLoadBusiness", "userBusiness", "userId", "loadIntervalLength"], "SCS_MemberReference": ["loadIntervalLength", "loadIntervalLength", "DEFAULT_LOAD_INTERVAL_LENGTH", "userId", "userLoadData", "user", "loadIntervalLength", "SUCCESS", "userId", "loadLimits", "user", "SUCCESS", "userLoadData", "userLoadData", "userLoadData", "personalLoadBusiness", "personalLoadBusiness", "userBusiness", "userBusiness", "userId", "userId", "loadLimits", "loadIntervalLength", "loadIntervalLength"], "SCS_VariableDeclaration": ["User", "User"], "SCS_ClassReference": ["userBusiness", "personalLoadBusiness", "userBusiness", "personalLoadBusiness"], "SCS_MethodInvocation": ["retrieve", "retrieveUserLoad", "retrieve", "getDailyLoadLimitsByUser"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.web;\n\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.stereotype.Component;\n\nimport com.opensymphony.xwork2.Action;\nimport com.opensymphony.xwork2.ActionSupport;\n\nimport fi.hut.soberit.agilefant.business.PersonalLoadBusiness;\nimport fi.hut.soberit.agilefant.business.UserBusiness;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.transfer.ComputedLoadData;\nimport fi.hut.soberit.agilefant.transfer.UserLoadLimits;\n\n@Component(\"userLoadAction\")\n@Scope(\"prototype\")\npublic class UserLoadAction extends ActionSupport {\n    private static final long serialVersionUID = -3387270060869450376L;\n\n    public static final int DEFAULT_LOAD_INTERVAL_LENGTH = 5;\n    \n    @Autowired\n    private PersonalLoadBusiness personalLoadBusiness;\n    \n    @Autowired\n    private UserBusiness userBusiness;\n    \n    private int userId;\n    \n    private ComputedLoadData userLoadData;\n    \n    private Integer loadIntervalLength = null;\n    \n    private UserLoadLimits loadLimits;\n    \n    public String retrieveUserLoad() {\n        if(loadIntervalLength == null) {\n            loadIntervalLength = DEFAULT_LOAD_INTERVAL_LENGTH;\n        }\n        User user = userBusiness.retrieve(userId);\n        userLoadData = personalLoadBusiness.retrieveUserLoad(user, loadIntervalLength);\n        return Action.SUCCESS;\n    }\n\n    public String dailyLoadLimits() {\n        User user = userBusiness.retrieve(userId);\n        loadLimits = personalLoadBusiness.getDailyLoadLimitsByUser(user);\n        return Action.SUCCESS;\n    }\n    \n    public ComputedLoadData getUserLoadData() {\n        return userLoadData;\n    }\n\n    public void setUserLoadData(ComputedLoadData userLoadData) {\n        this.userLoadData = userLoadData;\n    }\n\n    public void setPersonalLoadBusiness(PersonalLoadBusiness personalLoadBusiness) {\n        this.personalLoadBusiness = personalLoadBusiness;\n    }\n\n    public void setUserBusiness(UserBusiness userBusiness) {\n        this.userBusiness = userBusiness;\n    }\n\n    public void setUserId(int userId) {\n        this.userId = userId;\n    }\n\n    public UserLoadLimits getLoadLimits() {\n        return loadLimits;\n    }\n\n    public void setLoadIntervalLength(Integer loadIntervalLength) {\n        this.loadIntervalLength = loadIntervalLength;\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\WidgetAction.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["WidgetAction"], "AN": ["serialVersionUID", "widget", "widgetId", "collectionId", "objectId", "type", "position", "listNumber", "agilefantWidgetBusiness"], "SCS_VariableDeclarator": ["serialVersionUID", "widget", "widgetId", "collectionId", "objectId", "type", "position", "listNumber", "agilefantWidgetBusiness"], "MN": ["create", "delete", "retrieve", "store", "move", "getWidget", "setWidget", "getWidgetId", "setWidgetId", "getCollectionId", "setCollectionId", "getType", "setType", "getPosition", "setPosition", "getListNumber", "setListNumber", "getObjectId", "setObjectId"], "PN": ["widget", "widgetId", "collectionId", "type", "position", "listNumber", "objectId"], "SCS_MemberReference": ["widget", "type", "objectId", "collectionId", "SUCCESS", "widgetId", "SUCCESS", "widget", "widgetId", "widget", "position", "listNumber", "SUCCESS", "widget", "widget", "widget", "widgetId", "widgetId", "widgetId", "collectionId", "collectionId", "collectionId", "type", "type", "type", "position", "position", "position", "listNumber", "listNumber", "listNumber", "objectId", "objectId", "objectId"], "SCS_ClassReference": ["agilefantWidgetBusiness", "agilefantWidgetBusiness", "agilefantWidgetBusiness", "agilefantWidgetBusiness"], "SCS_MethodInvocation": ["create", "delete", "retrieve", "move"], "CO": ["// TODO Auto-generated method stub", "// TODO Auto-generated method stub", "/*\n     * AUTOGENERATED LIST OF SETTERS AND GETTERS\n     */"], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.stereotype.Component;\n\nimport com.opensymphony.xwork2.Action;\nimport com.opensymphony.xwork2.ActionSupport;\n\nimport fi.hut.soberit.agilefant.business.AgilefantWidgetBusiness;\nimport fi.hut.soberit.agilefant.model.AgilefantWidget;\n\n@Component(\"widgetAction\")\n@Scope(\"prototype\")\npublic class WidgetAction extends ActionSupport implements CRUDAction {\n\n    private static final long serialVersionUID = 2143301123898713933L;\n    \n    private AgilefantWidget widget;\n    \n    private Integer widgetId;\n    private Integer collectionId;\n    private Integer objectId;\n    \n    private String type;\n    private Integer position;\n    private Integer listNumber;\n\n    @Autowired\n    private AgilefantWidgetBusiness agilefantWidgetBusiness;\n    \n    public String create() {\n        widget = agilefantWidgetBusiness.create(type, objectId, collectionId);\n        return Action.SUCCESS;\n    }\n\n    public String delete() {\n        agilefantWidgetBusiness.delete(widgetId);\n        return Action.SUCCESS;\n    }\n\n    public String retrieve() {\n        // TODO Auto-generated method stub\n        return null;\n    }\n\n    public String store() {\n        // TODO Auto-generated method stub\n        return null;\n    }\n    \n    public String move() {\n        widget = agilefantWidgetBusiness.retrieve(widgetId);\n        agilefantWidgetBusiness.move(widget, position, listNumber);\n        return Action.SUCCESS;\n    }\n    \n    /*\n     * AUTOGENERATED LIST OF SETTERS AND GETTERS\n     */\n\n    public AgilefantWidget getWidget() {\n        return widget;\n    }\n\n    public void setWidget(AgilefantWidget widget) {\n        this.widget = widget;\n    }\n\n    public Integer getWidgetId() {\n        return widgetId;\n    }\n\n    public void setWidgetId(Integer widgetId) {\n        this.widgetId = widgetId;\n    }\n\n    public Integer getCollectionId() {\n        return collectionId;\n    }\n\n    public void setCollectionId(Integer collectionId) {\n        this.collectionId = collectionId;\n    }\n\n    public String getType() {\n        return type;\n    }\n\n    public void setType(String type) {\n        this.type = type;\n    }\n\n    public Integer getPosition() {\n        return position;\n    }\n\n    public void setPosition(Integer position) {\n        this.position = position;\n    }\n\n    public Integer getListNumber() {\n        return listNumber;\n    }\n\n    public void setListNumber(Integer listNumber) {\n        this.listNumber = listNumber;\n    }\n\n    public Integer getObjectId() {\n        return objectId;\n    }\n\n    public void setObjectId(Integer objectId) {\n        this.objectId = objectId;\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\context\\\\ContextViewInterceptor.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["ContextViewInterceptor"], "AN": ["serialVersionUID"], "SCS_VariableDeclarator": ["serialVersionUID", "action"], "MN": ["destroy", "init", "intercept", "setContext"], "PN": ["invocation", "invocation", "contextName", "contextObjectId"], "SCS_ClassReference": ["invocation", "invocation", "", "action", "action", "invocation", "invocation", null, null, "invocation", null, null], "SCS_MethodInvocation": ["getAction", "getAction", "setContext", "getContextName", "getContextObjectId", "invoke", "getInvocationContext", "getSession", "put", "getInvocationContext", "getSession", "put"], "SCS_VariableDeclaration": ["ContextAware"], "SCS_MemberReference": ["invocation", "CONTEXT_OBJECT_ID_AFFIX", "contextName", "contextObjectId", "CONTEXT_NAME", "contextName"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.web.context;\n\nimport org.springframework.stereotype.Component;\n\nimport com.opensymphony.xwork2.ActionInvocation;\nimport com.opensymphony.xwork2.interceptor.Interceptor;\n\nimport fi.hut.soberit.agilefant.web.ContextAware;\n\n@Component\npublic class ContextViewInterceptor implements Interceptor {\n\n    private static final long serialVersionUID = 2542730509473988399L;\n\n\n    public void destroy() {\n    }\n\n    public void init() {\n    }\n\n    public String intercept(ActionInvocation invocation) throws Exception {\n        if (invocation.getAction() instanceof ContextAware) {\n            ContextAware action = ((ContextAware)invocation.getAction());\n            setContext(invocation, action.getContextName(), action.getContextObjectId());\n        }\n\n        return invocation.invoke();\n    }\n    \n    private void setContext(ActionInvocation invocation, String contextName, Integer contextObjectId) {\n        invocation.getInvocationContext().getSession().put(ContextAware.CONTEXT_OBJECT_ID_AFFIX + contextName, contextObjectId);\n        invocation.getInvocationContext().getSession().put(ContextAware.CONTEXT_NAME, contextName);\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\filters\\\\ResponseHeaderFilter.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["ResponseHeaderFilter"], "AN": ["expirationTime"], "SCS_VariableDeclarator": ["expirationTime", "httpResp"], "MN": ["init", "doFilter", "destroy"], "PN": ["filterConfig", "request", "response", "filterChain"], "SCS_MemberReference": ["expirationTime", "response", "expirationTime", "request", "response"], "SCS_ClassReference": ["Integer", "filterConfig", "httpResp", "filterChain"], "SCS_MethodInvocation": ["parseInt", "getInitParameter", "addHeader", "doFilter"], "SCS_VariableDeclaration": ["HttpServletResponse"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.web.filters;\n\nimport java.io.IOException;\n\nimport javax.servlet.Filter;\nimport javax.servlet.FilterChain;\nimport javax.servlet.FilterConfig;\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.ServletResponse;\nimport javax.servlet.http.HttpServletResponse;\n\npublic class ResponseHeaderFilter implements Filter {\n\n    private int expirationTime; \n    \n    public void init(FilterConfig filterConfig) throws ServletException {\n        expirationTime = Integer.parseInt((filterConfig.getInitParameter(\"expirationTime\")));\n    }\n    \n    public void doFilter(ServletRequest request, ServletResponse response,\n            FilterChain filterChain) throws IOException, ServletException {\n        \n        HttpServletResponse httpResp = (HttpServletResponse)response;\n        \n        httpResp.addHeader(\"Cache-Control\", \"max-age=\" + expirationTime);\n        \n        filterChain.doFilter(request, response);\n    }\n\n    public void destroy() {\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\function\\\\AEFFunctions.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["AEFFunctions"], "AN": ["minutesParser"], "SCS_VariableDeclarator": ["minutesParser", "rounded", "result", "list", "retval", "obj", "listFirst", "listSecond", "list"], "MN": ["isProduct", "isProject", "isIteration", "isStandaloneIteration", "isUser", "minutesToString", "estimateToHours", "isBeforeThisDay", "listContains", "substract", "dateTimeToDate", "currentDateTime", "dateTimeToFormattedString", "joinNamedObjects", "scheduleStatus", "mergeAndSort", "buildTimestamp", "releaseMode", "version"], "PN": ["obj", "obj", "obj", "obj", "obj", "minor", "estimate", "date", "coll", "object", "first", "second", "dateTime", "dateTime", "objects", "obj", "first", "second"], "SCS_MemberReference": ["obj", "obj", "obj", "obj", "obj", "obj", "minor", "minor", "estimate", "rounded", "result", "coll", "object", "first", "second", "list", "objects", "retval", "first", "second", "listFirst", "listSecond", "list", "list", "buildTimestamp", "releaseMode", "version"], "SCS_ClassReference": ["minutesParser", "Math", "estimate", "date", "coll", "list", "dateTime", "dateTime", "obj", "retval", "retval", "obj", null, "obj", null, "list", "list", "Collections", "Long", "AgilefantBuild", null, "AgilefantBuild", "HtmlUtils", "AgilefantBuild"], "SCS_MethodInvocation": ["convertToString", "round", "floatValue", "isBeforeNow", "contains", "removeAll", "toDate", "toString", "getName", "substring", "length", "getEndDate", "isBeforeNow", "getStartDate", "isAfterNow", "addAll", "addAll", "sort", "toString", "getBuild", "getMillis", "getBuild", "htmlEscape", "getBuild"], "SCS_VariableDeclaration": ["double", "double", "List", "String", "NamedObject", "List", "List", "List"], "CO": ["/**\n * custom functions for jsp pages\n */", "/**\n     * Merge story and task histories and sort them per the timestamp field. This is needed to generate mingled revision\n     * history for stories and tasks.\n     * \n     * @param first\n     * @param second\n     * @return merged list: first+second\n     * \n     * @author aborici\n     */"], "CODE": "package fi.hut.soberit.agilefant.web.function;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Date;\nimport java.util.List;\n\nimport org.joda.time.DateTime;\nimport org.springframework.beans.support.PropertyComparator;\nimport org.springframework.web.util.HtmlUtils;\n\nimport fi.hut.soberit.agilefant.model.ExactEstimate;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.NamedObject;\nimport fi.hut.soberit.agilefant.model.Product;\nimport fi.hut.soberit.agilefant.model.Project;\nimport fi.hut.soberit.agilefant.model.Schedulable;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.transfer.AgilefantHistoryEntry;\nimport fi.hut.soberit.agilefant.util.AgilefantBuild;\nimport fi.hut.soberit.agilefant.util.MinorUnitsParser;\n\n/**\n * custom functions for jsp pages\n */\npublic class AEFFunctions {\n\n    private static MinorUnitsParser minutesParser = new MinorUnitsParser(\"h\", \"min\", 60);\n\n    public static boolean isProduct(Object obj) {\n        return obj instanceof Product;\n    }\n\n    public static boolean isProject(Object obj) {\n        return obj instanceof Project;\n    }\n\n    public static boolean isIteration(Object obj) {\n        return obj instanceof Iteration;\n    }\n\n    public static boolean isStandaloneIteration(Object obj) {\n        return (obj instanceof Iteration && ((Iteration) obj).isStandAlone());\n    }\n\n    public static boolean isUser(Object obj) {\n        return obj instanceof User;\n    }\n\n    public static String minutesToString(Long minor) {\n        if (minor == null) {\n            return \"\";\n        }\n        return minutesParser.convertToString(minor);\n    }\n\n    public static String estimateToHours(ExactEstimate estimate) {\n        if (estimate == null) {\n            return \"\";\n        }\n        double rounded = Math.round(estimate.floatValue() * 10 / 60.0);\n        double result = rounded / 10.0;\n        return \"\" + result + \"h\";\n    }\n\n    public static boolean isBeforeThisDay(DateTime date) {\n        return date.isBeforeNow();\n    }\n\n    public static boolean listContains(Collection<Object> coll, Object object) {\n        if (coll == null)\n            return false;\n        return coll.contains(object);\n    }\n\n    public static List<?> substract(Collection<?> first, Collection<?> second) {\n        List<?> list = new ArrayList<Object>(first);\n        list.removeAll(second);\n        return list;\n    }\n\n    public static Date dateTimeToDate(DateTime dateTime) {\n        return dateTime.toDate();\n    }\n\n    public static DateTime currentDateTime() {\n        return new DateTime();\n    }\n\n    public static String dateTimeToFormattedString(DateTime dateTime) {\n        return dateTime.toString(\"YYYY-MM-dd HH:mm\");\n    }\n\n    public static String joinNamedObjects(Collection<NamedObject> objects) {\n        String retval = \"\";\n        for (NamedObject obj : objects) {\n            retval += obj.getName() + \", \";\n        }\n        return retval.substring(0, retval.length() - 2);\n    }\n\n    public static String scheduleStatus(Schedulable obj) {\n        if (obj.getEndDate().isBeforeNow()) {\n            return \"PAST\";\n        } else if (obj.getStartDate().isAfterNow()) {\n            return \"FUTURE\";\n        }\n        return \"CURRENT\";\n    }\n\n    /**\n     * Merge story and task histories and sort them per the timestamp field. This is needed to generate mingled revision\n     * history for stories and tasks.\n     * \n     * @param first\n     * @param second\n     * @return merged list: first+second\n     * \n     * @author aborici\n     */\n    @SuppressWarnings(\"unchecked\")\n    public static List<AgilefantHistoryEntry> mergeAndSort(List<AgilefantHistoryEntry> first, List<AgilefantHistoryEntry> second) {\n        List<AgilefantHistoryEntry> listFirst = new ArrayList<AgilefantHistoryEntry>(first);\n        List<AgilefantHistoryEntry> listSecond = new ArrayList<AgilefantHistoryEntry>(second);\n        List<AgilefantHistoryEntry> list = new ArrayList<AgilefantHistoryEntry>();\n\n        list.addAll(listFirst);\n        list.addAll(listSecond);\n\n        Collections.sort(list, new PropertyComparator(\"revision.timestamp\", true, false));\n\n        return list;\n    }\n\n    public static String buildTimestamp() {\n        return Long.toString(AgilefantBuild.getBuild().buildTimestamp.getMillis());\n    }\n\n    public static boolean releaseMode() {\n        return AgilefantBuild.getBuild().releaseMode;\n    }\n\n    public static String version() {\n        return HtmlUtils.htmlEscape(AgilefantBuild.getBuild().version);\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\function\\\\package-info.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": [], "CO": ["/**\n * This package contains custom functions for jsp pages. \n */"], "CODE": "/**\n * This package contains custom functions for jsp pages. \n */\npackage fi.hut.soberit.agilefant.web.function;", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\tag\\\\CssTag.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["CssTag"], "MN": ["process"], "PN": ["out", "path"], "SCS_ClassReference": ["out", "out", "out", "out", "out", "Long", "AgilefantBuild", null, "out"], "SCS_MethodInvocation": ["append", "append", "append", "append", "append", "toString", "getBuild", "getMillis", "append"], "SCS_MemberReference": ["path", "buildTimestamp"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.web.tag;\n\nimport java.io.IOException;\n\nimport javax.servlet.jsp.JspWriter;\n\nimport fi.hut.soberit.agilefant.util.AgilefantBuild;\n\npublic class CssTag extends StaticResourceTag {\n\n    @Override\n    protected void process(JspWriter out, String path) throws IOException {\n        out.append(\"<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"\");\n        out.append(\"static/css/\");\n        out.append(path);\n        out.append(\".css?\");\n        out.append(Long.toString(AgilefantBuild.getBuild().buildTimestamp.getMillis()));\n        out.append(\"\\\" />\");\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\tag\\\\CurrentBacklogTag.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["CurrentBacklogTag"], "AN": ["serialVersionUID", "CURRENT_ACTION", "CURRENT_CONTEXT", "CURRENT_PAGE_ID", "CURRENT_BACKLOG_CONTEXT", "CURRENT_BACKLOG_ID", "CURRENT_PRODUCT_ID", "CURRENT_PROJECT_ID", "CURRENT_ITERATION_ID", "currentAction", "currentContext", "currentPageId", "currentProductId", "currentProjectId", "currentIterationId", "backlogBusiness", "backlog", "backlogId"], "SCS_VariableDeclarator": ["serialVersionUID", "CURRENT_ACTION", "CURRENT_CONTEXT", "CURRENT_PAGE_ID", "CURRENT_BACKLOG_CONTEXT", "CURRENT_BACKLOG_ID", "CURRENT_PRODUCT_ID", "CURRENT_PROJECT_ID", "CURRENT_ITERATION_ID", "currentAction", "currentContext", "currentPageId", "currentProductId", "currentProjectId", "currentIterationId", "backlogBusiness", "backlog", "backlogId"], "MN": ["doStartTag", "resolveIds", "setBacklogId"], "PN": ["backlogId"], "SCS_MemberReference": ["backlogBusiness", "backlog", "backlogId", "backlog", "CURRENT_BACKLOG_ID", "CURRENT_BACKLOG_ID", "CURRENT_BACKLOG_CONTEXT", "CURRENT_BACKLOG_CONTEXT", "CURRENT_BACKLOG_ID", "currentPageId", "CURRENT_BACKLOG_CONTEXT", "currentContext", "CURRENT_ACTION", "currentAction", "CURRENT_CONTEXT", "currentContext", "CURRENT_PAGE_ID", "currentPageId", "CURRENT_PRODUCT_ID", "currentProductId", "CURRENT_PROJECT_ID", "currentProjectId", "CURRENT_ITERATION_ID", "currentIterationId", "EVAL_BODY_INCLUDE", "backlog", "currentAction", "currentContext", "currentPageId", "currentProductId", "currentProjectId", "currentIterationId", "backlog", "currentAction", "currentContext", "currentPageId", "currentProductId", "currentProjectId", "currentIterationId", "backlog", "currentAction", "currentContext", "currentPageId", "currentProductId", "currentProjectId", "currentIterationId", "backlogId", "backlogId"], "SCS_ClassReference": ["", "backlogBusiness", null, "", "", "", "", "", "", null, null, null, null, null, null, "backlog", "backlog", "backlog", "backlog", null, "backlog", "backlog", "backlog", null, null, "backlog", null, "backlog"], "SCS_MethodInvocation": ["requireBean", "retrieveIfExists", "resolveIds", "setPageAttribute", "getSessionAttribute", "setPageAttribute", "getSessionAttribute", "setSessionAttribute", "setSessionAttribute", "setAttribute", "setAttribute", "setAttribute", "setAttribute", "setAttribute", "setAttribute", "getId", "getId", "getId", "getParent", "getId", "getId", "getId", "getParent", "getParent", "getId", "getParent", "getId", "getId"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.web.tag;\n\nimport javax.servlet.jsp.JspException;\nimport javax.servlet.jsp.tagext.Tag;\n\nimport fi.hut.soberit.agilefant.business.BacklogBusiness;\nimport fi.hut.soberit.agilefant.model.Backlog;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.Product;\nimport fi.hut.soberit.agilefant.model.Project;\n\npublic class CurrentBacklogTag extends SpringTagSupport {\n\n    private static final long serialVersionUID = 828242085743658537L;\n\n    public static final String CURRENT_ACTION = \"currentAction\";\n    public static final String CURRENT_CONTEXT = \"currentContext\";\n    public static final String CURRENT_PAGE_ID = \"currentPageId\";\n    public static final String CURRENT_BACKLOG_CONTEXT = \"currentBacklogContext\";\n    public static final String CURRENT_BACKLOG_ID = \"currentBacklogId\";\n    public static final String CURRENT_PRODUCT_ID = \"currentProductId\";\n    public static final String CURRENT_PROJECT_ID = \"currentProjectId\";\n    public static final String CURRENT_ITERATION_ID = \"currentIterationId\";\n\n    private String currentAction = \"\";\n    private String currentContext = \"\";\n    private Integer currentPageId = 0;\n    private Integer currentProductId = 0;\n    private Integer currentProjectId = 0;\n    private Integer currentIterationId = 0;\n\n    private BacklogBusiness backlogBusiness;\n\n    private Backlog backlog;\n\n    private int backlogId;\n\n    @Override\n    public int doStartTag() throws JspException {\n        backlogBusiness = requireBean(\"backlogBusiness\");\n        this.backlog = backlogBusiness.retrieveIfExists(backlogId);\n        this.resolveIds();\n        if (backlog == null) {\n            setPageAttribute(CURRENT_BACKLOG_ID, getSessionAttribute(CURRENT_BACKLOG_ID));\n            setPageAttribute(CURRENT_BACKLOG_CONTEXT,  getSessionAttribute(CURRENT_BACKLOG_CONTEXT));\n        } else {\n            setSessionAttribute(CURRENT_BACKLOG_ID, currentPageId);\n            setSessionAttribute(CURRENT_BACKLOG_CONTEXT, currentContext);\n        }\n        super.getPageContext().setAttribute(CurrentBacklogTag.CURRENT_ACTION,\n                this.currentAction);\n        super.getPageContext().setAttribute(CurrentBacklogTag.CURRENT_CONTEXT,\n                this.currentContext);\n        super.getPageContext().setAttribute(CurrentBacklogTag.CURRENT_PAGE_ID,\n                this.currentPageId);\n        super.getPageContext().setAttribute(\n                CurrentBacklogTag.CURRENT_PRODUCT_ID, this.currentProductId);\n        super.getPageContext().setAttribute(\n                CurrentBacklogTag.CURRENT_PROJECT_ID, this.currentProjectId);\n        super.getPageContext()\n                .setAttribute(CurrentBacklogTag.CURRENT_ITERATION_ID,\n                        this.currentIterationId);\n        return Tag.EVAL_BODY_INCLUDE;\n    }\n\n    private void resolveIds() {\n        if (backlog instanceof Product) {\n            currentAction = \"editProduct\";\n            currentContext = \"product\";\n            currentPageId = backlog.getId();\n            currentProductId = backlog.getId();\n            currentProjectId = null;\n            currentIterationId = null;\n        } else if (backlog instanceof Project) {\n            currentAction = \"editProject\";\n            currentContext = \"project\";\n            currentPageId = backlog.getId();\n            currentProductId = backlog.getParent().getId();\n            currentProjectId = backlog.getId();\n            currentIterationId = null;\n        } else if (backlog instanceof Iteration) {\n            currentAction = \"editIteration\";\n            currentContext = \"iteration\";\n            currentPageId = backlog.getId();\n            currentProductId = backlog.getParent().getParent().getId();\n            currentProjectId = backlog.getParent().getId();\n            currentIterationId = backlog.getId();\n        }\n    }\n\n    public void setBacklogId(int backlogId) {\n        this.backlogId = backlogId;\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\tag\\\\ExistingObjectsTag.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["ExistingObjectsTag"], "AN": ["serialVersionUID", "HAS_PRODUCTS", "HAS_PROJECTS", "HAS_ITERATIONS", "productBusiness", "projectBusiness", "iterationBusiness"], "SCS_VariableDeclarator": ["serialVersionUID", "HAS_PRODUCTS", "HAS_PROJECTS", "HAS_ITERATIONS", "productBusiness", "projectBusiness", "iterationBusiness"], "MN": ["doStartTag"], "PN": [], "SCS_MemberReference": ["productBusiness", "projectBusiness", "iterationBusiness", "HAS_PRODUCTS", "HAS_PROJECTS", "HAS_ITERATIONS", "EVAL_BODY_INCLUDE"], "SCS_ClassReference": ["", "", "", null, "productBusiness", null, "projectBusiness", null, "iterationBusiness"], "SCS_MethodInvocation": ["requireBean", "requireBean", "requireBean", "setAttribute", "countAll", "setAttribute", "countAll", "setAttribute", "countAll"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.web.tag;\n\nimport javax.servlet.jsp.JspException;\nimport javax.servlet.jsp.tagext.Tag;\n\nimport fi.hut.soberit.agilefant.business.IterationBusiness;\nimport fi.hut.soberit.agilefant.business.ProductBusiness;\nimport fi.hut.soberit.agilefant.business.ProjectBusiness;\n\npublic class ExistingObjectsTag extends SpringTagSupport {\n    private static final long serialVersionUID = 1810440984222729111L;\n\n    public static final String HAS_PRODUCTS = \"hasProducts\";\n\n    public static final String HAS_PROJECTS = \"hasProjects\";\n\n    public static final String HAS_ITERATIONS = \"hasIterations\";\n\n    private ProductBusiness productBusiness;\n\n    private ProjectBusiness projectBusiness;\n\n    private IterationBusiness iterationBusiness;\n\n    @Override\n    public int doStartTag() throws JspException {\n        productBusiness = requireBean(\"productBusiness\");\n        projectBusiness = requireBean(\"projectBusiness\");\n        iterationBusiness = requireBean(\"iterationBusiness\");\n        super.getPageContext().setAttribute(ExistingObjectsTag.HAS_PRODUCTS,\n                productBusiness.countAll() > 0);\n        super.getPageContext().setAttribute(ExistingObjectsTag.HAS_PROJECTS,\n                projectBusiness.countAll() > 0);\n        super.getPageContext().setAttribute(ExistingObjectsTag.HAS_ITERATIONS,\n                iterationBusiness.countAll() > 0);\n        return Tag.EVAL_BODY_INCLUDE;\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\tag\\\\JavascriptTag.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["JavascriptTag"], "MN": ["process"], "PN": ["out", "path"], "SCS_ClassReference": ["out", "out", "out", "out", "out", "Long", "AgilefantBuild", null, "out"], "SCS_MethodInvocation": ["append", "append", "append", "append", "append", "toString", "getBuild", "getMillis", "append"], "SCS_MemberReference": ["path", "buildTimestamp"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.web.tag;\n\nimport java.io.IOException;\n\nimport javax.servlet.jsp.JspWriter;\n\nimport fi.hut.soberit.agilefant.util.AgilefantBuild;\n\npublic class JavascriptTag extends StaticResourceTag {\n\n    @Override\n    protected void process(JspWriter out, String path) throws IOException {\n        out.append(\"<script type=\\\"text/javascript\\\" src=\\\"\");\n        out.append(\"static/js/\");\n        out.append(path);\n        out.append(\".js?\");\n        out.append(Long.toString(AgilefantBuild.getBuild().buildTimestamp.getMillis()));\n        out.append(\"\\\"></script>\");\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\tag\\\\package-info.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": [], "CO": ["/**\n * This package contains tag handlers. \n */"], "CODE": "/**\n * This package contains tag handlers. \n */\npackage fi.hut.soberit.agilefant.web.tag;", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\tag\\\\SpringTagSupport.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["SpringTagSupport"], "AN": ["serialVersionUID", "pageContext", "applicationContext"], "SCS_VariableDeclarator": ["serialVersionUID", "pageContext", "applicationContext", "bean"], "MN": ["setPageContext", "retrieveSingletons", "getPageContext", "getApplicationContext", "requireBean", "getSessionAttribute", "getPageAttribute", "setSessionAttribute", "setPageAttribute"], "PN": ["pageContext", "name", "name", "name", "name", "value", "name", "value"], "SCS_MemberReference": ["pageContext", "pageContext", "pageContext", "applicationContext", "pageContext", "applicationContext", "name", "bean", "name", "bean", "name", "name", "name", "value", "name", "value"], "SCS_ClassReference": ["WebApplicationContextUtils", "pageContext", "", "applicationContext", null, null, null, null, null, null, null, null, null, null], "SCS_MethodInvocation": ["getWebApplicationContext", "getServletContext", "retrieveSingletons", "getBean", "getPageContext", "getSession", "getAttribute", "getPageContext", "getAttribute", "getPageContext", "getSession", "setAttribute", "getPageContext", "setAttribute"], "SCS_VariableDeclaration": ["Object"], "CO": ["/**\n     * Stub method that is called after the ApplicationContext has been retrieved.\n     */", "/**\n     * Retrieves a bean from the ApplicationContext and also does a null check.\n     * \n     * @param <T> bean type\n     * @param name bean name\n     * @return bean that was found\n     */"], "CODE": "package fi.hut.soberit.agilefant.web.tag;\n\nimport javax.servlet.jsp.PageContext;\nimport javax.servlet.jsp.tagext.TagSupport;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.web.context.support.WebApplicationContextUtils;\n\npublic abstract class SpringTagSupport extends TagSupport {\n\n    private static final long serialVersionUID = -2277915266490971933L;\n\n    private PageContext pageContext;\n\n    private ApplicationContext applicationContext;\n\n    @Override\n    public final void setPageContext(PageContext pageContext) {\n        super.setPageContext(pageContext);\n        this.pageContext = pageContext;\n        this.applicationContext = WebApplicationContextUtils\n                .getWebApplicationContext(pageContext.getServletContext());\n        retrieveSingletons();\n    }\n\n    /**\n     * Stub method that is called after the ApplicationContext has been retrieved.\n     */\n    protected void retrieveSingletons() {\n    }\n    \n    protected PageContext getPageContext() {\n        return this.pageContext;\n    }\n\n    protected ApplicationContext getApplicationContext() {\n        return applicationContext;\n    }\n\n    /**\n     * Retrieves a bean from the ApplicationContext and also does a null check.\n     * \n     * @param <T> bean type\n     * @param name bean name\n     * @return bean that was found\n     */\n    @SuppressWarnings(\"unchecked\")\n    protected <T> T requireBean(String name) {\n        Object bean = applicationContext.getBean(name);\n        if (bean == null) {\n            throw new IllegalStateException(\"Could not find required bean '\" + name + \"'\");\n        }\n        return (T) bean;\n    }\n    \n    @SuppressWarnings(\"unchecked\")\n    protected <T> T getSessionAttribute(String name) {\n        return (T) this.getPageContext().getSession().getAttribute(name);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    protected <T> T getPageAttribute(String name) {\n        return (T) this.getPageContext().getAttribute(name);\n    }\n    \n    protected void setSessionAttribute(String name, Object value) {\n        this.getPageContext().getSession().setAttribute(name, value);\n    }\n    protected void setPageAttribute(String name, Object value) {\n        this.getPageContext().setAttribute(name, value);\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\tag\\\\StaticResourceTag.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["StaticResourceTag"], "AN": ["MINIFY_ALWAYS", "minify", "path"], "SCS_VariableDeclarator": ["MINIFY_ALWAYS", "minify", "path", "out", "minifyNow", "finalPath"], "MN": ["doTag", "process", "setPath", "setMinify"], "PN": ["out", "path", "path", "minify"], "SCS_VariableDeclaration": ["JspWriter", "boolean", "String"], "SCS_ClassReference": ["", null, "MINIFY_ALWAYS", "AgilefantBuild", "Boolean", ""], "SCS_MethodInvocation": ["getJspContext", "getOut", "equals", "getBuild", "valueOf", "process"], "SCS_MemberReference": ["minify", "releaseMode", "minify", "minifyNow", "path", "path", "out", "finalPath", "path", "path", "minify", "minify"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.web.tag;\n\nimport java.io.IOException;\n\nimport javax.servlet.jsp.JspException;\nimport javax.servlet.jsp.JspWriter;\nimport javax.servlet.jsp.tagext.SimpleTagSupport;\n\nimport fi.hut.soberit.agilefant.util.AgilefantBuild;\n\npublic abstract class StaticResourceTag extends SimpleTagSupport {\n\n    private static final String MINIFY_ALWAYS = \"always\";\n\n    private String minify;\n\n    private String path;\n\n    @Override\n    public void doTag() throws JspException, IOException {\n        JspWriter out = getJspContext().getOut();\n\n        boolean minifyNow = MINIFY_ALWAYS.equals(minify) || (AgilefantBuild.getBuild().releaseMode && Boolean.valueOf(minify));\n        String finalPath = minifyNow ? path + \".min\" : path;\n\n        process(out, finalPath);\n    }\n\n    protected abstract void process(JspWriter out, String path) throws IOException;\n\n    public void setPath(String path) {\n        this.path = path;\n    }\n\n    public void setMinify(String minify) {\n        this.minify = minify;\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\widgets\\\\CommonWidget.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["CommonWidget"], "AN": ["serialVersionUID", "objectId", "widgetId"], "SCS_VariableDeclarator": ["serialVersionUID", "objectId", "widgetId"], "MN": ["getObjectId", "setObjectId", "getWidgetId", "setWidgetId"], "PN": ["objectId", "widgetId"], "SCS_MemberReference": ["objectId", "objectId", "objectId", "widgetId", "widgetId", "widgetId"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.web.widgets;\n\nimport com.opensymphony.xwork2.ActionSupport;\n\npublic class CommonWidget extends ActionSupport {\n    private static final long serialVersionUID = 4029492283643549647L;\n\n    private int objectId;\n    \n    private int widgetId;\n\n    public int getObjectId() {\n        return objectId;\n    }\n\n    public void setObjectId(int objectId) {\n        this.objectId = objectId;\n    }\n\n    public int getWidgetId() {\n        return widgetId;\n    }\n\n    public void setWidgetId(int widgetId) {\n        this.widgetId = widgetId;\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\widgets\\\\IterationMetricsWidget.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["IterationMetricsWidget"], "AN": ["serialVersionUID", "iteration", "iterationMetrics", "iterationBusiness", "authorizationBusiness"], "SCS_VariableDeclarator": ["serialVersionUID", "iteration", "iterationMetrics", "iterationBusiness", "authorizationBusiness", "user"], "MN": ["execute", "getAccess", "getIteration", "getIterationMetrics"], "PN": [], "SCS_MemberReference": ["iteration", "iterationMetrics", "iteration", "SUCCESS", "authorizationBusiness", "user", "iteration", "iterationMetrics"], "SCS_ClassReference": ["iterationBusiness", "", "iterationBusiness", "SecurityUtil", null, "iteration"], "SCS_MethodInvocation": ["retrieve", "getObjectId", "getIterationMetrics", "getLoggedUser", "isBacklogAccessible", "getId"], "SCS_VariableDeclaration": ["User"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.web.widgets;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.stereotype.Component;\n\nimport fi.hut.soberit.agilefant.business.AuthorizationBusiness;\nimport fi.hut.soberit.agilefant.business.IterationBusiness;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.security.SecurityUtil;\nimport fi.hut.soberit.agilefant.transfer.IterationMetrics;\n\n\n@Component(\"iterationMetricsWidget\")\n@Scope(\"prototype\")\npublic class IterationMetricsWidget extends CommonWidget {\n    private static final long serialVersionUID = 4029492283643549647L;\n    private Iteration iteration;\n    private IterationMetrics iterationMetrics;\n\n    @Autowired\n    private IterationBusiness iterationBusiness;\n    \n    @Autowired\n    private AuthorizationBusiness authorizationBusiness;\n    \n    @Override\n    public String execute() {\n        iteration = iterationBusiness.retrieve(getObjectId());\n        iterationMetrics = iterationBusiness.getIterationMetrics(iteration);\n        return SUCCESS;\n    }\n    \n    public boolean getAccess() {\n        User user = SecurityUtil.getLoggedUser();\n        return this.authorizationBusiness.isBacklogAccessible(iteration.getId(), user);\n    }\n\n    public Iteration getIteration() {\n        return iteration;\n    }\n\n    public IterationMetrics getIterationMetrics() {\n        return iterationMetrics;\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\widgets\\\\ProjectMetricsWidget.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["ProjectMetricsWidget"], "AN": ["serialVersionUID", "projectBusiness", "project", "projectMetrics", "authorizationBusiness"], "SCS_VariableDeclarator": ["serialVersionUID", "projectBusiness", "project", "projectMetrics", "authorizationBusiness", "user"], "MN": ["execute", "getAccess", "getProject", "getProjectMetrics"], "PN": [], "SCS_MemberReference": ["project", "projectMetrics", "project", "SUCCESS", "authorizationBusiness", "user", "project", "projectMetrics"], "SCS_ClassReference": ["projectBusiness", "", "projectBusiness", "SecurityUtil", null, "project"], "SCS_MethodInvocation": ["retrieve", "getObjectId", "getProjectMetrics", "getLoggedUser", "isBacklogAccessible", "getId"], "SCS_VariableDeclaration": ["User"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.web.widgets;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.stereotype.Component;\n\nimport fi.hut.soberit.agilefant.business.AuthorizationBusiness;\nimport fi.hut.soberit.agilefant.business.ProjectBusiness;\nimport fi.hut.soberit.agilefant.model.Project;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.security.SecurityUtil;\nimport fi.hut.soberit.agilefant.transfer.ProjectMetrics;\n\n@Scope(\"prototype\")\n@Component(\"projectMetricsWidget\")\npublic class ProjectMetricsWidget extends CommonWidget {\n\n    private static final long serialVersionUID = 8742527799375741424L;\n    \n    @Autowired\n    private ProjectBusiness projectBusiness;\n    \n    private Project project;\n    private ProjectMetrics projectMetrics;\n    \n    @Autowired\n    private AuthorizationBusiness authorizationBusiness;\n    \n    @Override\n    public String execute() {\n        project = projectBusiness.retrieve(getObjectId());\n        projectMetrics = projectBusiness.getProjectMetrics(project);\n        return SUCCESS;\n    }\n    \n    public boolean getAccess() {\n        User user = SecurityUtil.getLoggedUser();\n        return this.authorizationBusiness.isBacklogAccessible(project.getId(), user);\n    }\n    \n    public Project getProject() {\n        return project;\n    }\n\n    public ProjectMetrics getProjectMetrics() {\n        return projectMetrics;\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\widgets\\\\StoryWidget.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["StoryWidget"], "AN": ["serialVersionUID", "story", "storyMetrics", "storyBusiness", "authorizationBusiness"], "SCS_VariableDeclarator": ["serialVersionUID", "story", "storyMetrics", "storyBusiness", "authorizationBusiness", "user", "access"], "MN": ["execute", "getAccess", "getStory", "getStoryMetrics"], "PN": [], "SCS_MemberReference": ["story", "storyMetrics", "story", "SUCCESS", "authorizationBusiness", "user", "access", "access", "authorizationBusiness", "user", "story", "storyMetrics"], "SCS_ClassReference": ["storyBusiness", "", "storyBusiness", "SecurityUtil", "story", null, "story", null, "story", null, "story", null], "SCS_MethodInvocation": ["retrieve", "getObjectId", "calculateMetrics", "getLoggedUser", "getIteration", "isBacklogAccessible", "getIteration", "getId", "getBacklog", "isBacklogAccessible", "getBacklog", "getId"], "SCS_VariableDeclaration": ["User", "boolean"], "CO": ["/*\n    public boolean getAccess() {\n        User user = SecurityUtil.getLoggedUser();\n        //int backlogId = story.getIteration() != null ? story.getIteration().getId() : story.getBacklog().getId();\n        if (story.getIteration() != null) {\n            boolean access = this.authorizationBusiness.isBacklogAccessible(story.getIteration().getId(), user);\n            if (access || story.getBacklog() == null) {\n                return access;\n            }\n        }\n        return this.authorizationBusiness.isBacklogAccessible(story.getBacklog().getId(), user);\n    }\n    */"], "CODE": "package fi.hut.soberit.agilefant.web.widgets;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.stereotype.Component;\n\nimport fi.hut.soberit.agilefant.business.AuthorizationBusiness;\nimport fi.hut.soberit.agilefant.business.StoryBusiness;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.security.SecurityUtil;\nimport fi.hut.soberit.agilefant.util.StoryMetrics;\n\n@Component(\"storyWidget\")\n@Scope(\"prototype\")\npublic class StoryWidget extends CommonWidget {\n\n    private static final long serialVersionUID = 7810437122662724707L;\n\n    private Story story;\n    private StoryMetrics storyMetrics;\n    \n    @Autowired\n    private StoryBusiness storyBusiness;\n    \n    @Autowired\n    private AuthorizationBusiness authorizationBusiness;\n    \n    @Override\n    public String execute() {\n        story = storyBusiness.retrieve(getObjectId());\n        storyMetrics = storyBusiness.calculateMetrics(story);\n        return SUCCESS;\n    }\n    /*\n    public boolean getAccess() {\n        User user = SecurityUtil.getLoggedUser();\n        //int backlogId = story.getIteration() != null ? story.getIteration().getId() : story.getBacklog().getId();\n        if (story.getIteration() != null) {\n            boolean access = this.authorizationBusiness.isBacklogAccessible(story.getIteration().getId(), user);\n            if (access || story.getBacklog() == null) {\n                return access;\n            }\n        }\n        return this.authorizationBusiness.isBacklogAccessible(story.getBacklog().getId(), user);\n    }\n    */\n    \n    public boolean getAccess() {\n        User user = SecurityUtil.getLoggedUser();\n        if (story.getIteration() != null) {\n            boolean access = this.authorizationBusiness.isBacklogAccessible(story.getIteration().getId(), user);\n            if (access || story.getBacklog() == null) {\n                return access;\n            }\n        }\n        return this.authorizationBusiness.isBacklogAccessible(story.getBacklog().getId(), user);\n    }\n\n    public Story getStory() {\n        return story;\n    }\n    \n    public StoryMetrics getStoryMetrics() {\n        return storyMetrics;\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\main\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\widgets\\\\UserLoadWidget.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["UserLoadWidget"], "AN": ["serialVersionUID", "user", "userBusiness", "authorizationBusiness"], "SCS_VariableDeclarator": ["serialVersionUID", "user", "userBusiness", "authorizationBusiness", "currentUser"], "MN": ["execute", "getAccess", "getUser"], "PN": [], "SCS_MemberReference": ["user", "SUCCESS", "authorizationBusiness", "currentUser", "user"], "SCS_ClassReference": ["userBusiness", "", "SecurityUtil", null, "user"], "SCS_MethodInvocation": ["retrieve", "getObjectId", "getLoggedUser", "isUserAccessible", "getId"], "SCS_VariableDeclaration": ["User"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.web.widgets;\n\nimport java.util.HashSet;\nimport java.util.Set;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.stereotype.Component;\n\nimport fi.hut.soberit.agilefant.business.AuthorizationBusiness;\nimport fi.hut.soberit.agilefant.business.UserBusiness;\nimport fi.hut.soberit.agilefant.model.Team;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.security.SecurityUtil;\n\n@Component(\"userLoadWidget\")\n@Scope(\"prototype\")\npublic class UserLoadWidget extends CommonWidget {\n\n    private static final long serialVersionUID = 7810437122662724707L;\n\n    private User user;\n    \n    @Autowired\n    private UserBusiness userBusiness;\n    \n    @Autowired\n    private AuthorizationBusiness authorizationBusiness;\n    \n    @Override\n    public String execute() {\n        user = userBusiness.retrieve(getObjectId());\n        return SUCCESS;\n    }\n    \n    public boolean getAccess() {\n        User currentUser = SecurityUtil.getLoggedUser();\n        return this.authorizationBusiness.isUserAccessible(user.getId(), currentUser);\n    }\n\n    public User getUser() {\n        return user;\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\AgilefantWidgetBusinessTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["AgilefantWidgetBusinessTest"], "SCS_ClassReference": ["SpringJUnit4ClassRunner", "MockContextLoader", "", null, "widgetCollectionBusiness", "widgetCollectionBusiness", "EasyMock", "WidgetCollection", "EasyMock", "AgilefantWidget", "", null, "agilefantWidgetDAO", "EasyMock", "", null, "agilefantWidgetDAO", "", "", "testable", "", "captured", "", "actual", "", "actual", null, "", "actual", "testable", "", "testable", "", "testable", "", "widget", "widgetCollectionBusiness", "", "testable", "", "widget", "widget", "widgets", null, "", null, "", "", "grid", "", "grid", null, "", "grid", null, "", null, "", "", "grid", "", null, "", "", "grid", "widget1", "widget1", "widgets", null, "widget2", "widget2", "widgets", null, "widget3", "widget3", "widgets", null, "", null, "", "", "grid", "", "grid", null, "", "grid", null, "", "grid", null, "", "grid", null], "AN": ["testable", "agilefantWidgetDAO", "widgetCollectionBusiness"], "SCS_VariableDeclarator": ["testable", "agilefantWidgetDAO", "widgetCollectionBusiness", "returned", "collection", "captured", "actual", "collection", "widget", "widgets", "widget", "grid", "widgets", "grid", "widgets", "grid", "widgets", "widget1", "widget2", "widget3", "grid"], "MN": ["testCreate", "testCreate_nullIds", "testMove", "testGenerateWidgetGrid_oneColumn", "testGenerateWidgetGrid_empty", "testGenerateWidgetGrid_emptyMinColumns", "testGenerateWidgetGrid_multipleColumns"], "PN": [], "SCS_VariableDeclaration": ["AgilefantWidget", "WidgetCollection", "Capture", "AgilefantWidget", "WidgetCollection", "AgilefantWidget", "WidgetCollection", "AgilefantWidget", "List", "WidgetCollection", "List", "WidgetCollection", "List", "WidgetCollection", "AgilefantWidget", "AgilefantWidget", "AgilefantWidget", "List"], "SCS_MethodInvocation": ["expect", "andReturn", "retrieve", "insertWidgetToHead", "isA", "isA", "expect", "andReturn", "create", "capture", "expect", "andReturn", "get", "replayAll", "assertSame", "create", "verifyAll", "getValue", "assertEquals", "getType", "assertEquals", "getObjectId", "intValue", "assertEquals", "getWidgetCollection", "create", "fail", "create", "fail", "create", "fail", "setWidgetCollection", "insertWidgetToPosition", "replayAll", "move", "verifyAll", "setPosition", "setListNumber", "getWidgets", "add", "replayAll", "generateWidgetGrid", "verifyAll", "assertEquals", "size", "assertEquals", "get", "size", "assertSame", "get", "get", "replayAll", "generateWidgetGrid", "verifyAll", "assertEquals", "size", "replayAll", "generateWidgetGrid", "verifyAll", "assertEquals", "size", "setPosition", "setListNumber", "getWidgets", "add", "setPosition", "setListNumber", "getWidgets", "add", "setPosition", "setListNumber", "getWidgets", "add", "replayAll", "generateWidgetGrid", "verifyAll", "assertEquals", "size", "assertEquals", "get", "size", "assertSame", "get", "get", "assertSame", "get", "get", "assertSame", "get", "get"], "SCS_MemberReference": ["collection", "captured", "returned", "returned", "collection", "collection", "collection", "widget", "widget", "widget", "testable", "widgets", "widget", "testable", "widgets", "testable", "widgets", "widget1", "widget2", "widget3", "testable", "widgets", "widget1", "widget2", "widget3"], "CO": ["/*\n     * CREATE\n     */", "/*\n     * GENERATE GRID\n     */"], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport java.util.List;\n\nimport org.easymock.Capture;\nimport org.easymock.EasyMock;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.test.annotation.DirtiesContext;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n\nimport fi.hut.soberit.agilefant.business.impl.AgilefantWidgetBusinessImpl;\nimport fi.hut.soberit.agilefant.db.AgilefantWidgetDAO;\nimport fi.hut.soberit.agilefant.model.AgilefantWidget;\nimport fi.hut.soberit.agilefant.model.WidgetCollection;\nimport fi.hut.soberit.agilefant.test.Mock;\nimport fi.hut.soberit.agilefant.test.MockContextLoader;\nimport fi.hut.soberit.agilefant.test.MockedTestCase;\nimport fi.hut.soberit.agilefant.test.TestedBean;\n\nimport static org.junit.Assert.*;\n\nimport static org.easymock.EasyMock.*;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(loader = MockContextLoader.class)\npublic class AgilefantWidgetBusinessTest extends MockedTestCase {\n\n    @TestedBean\n    AgilefantWidgetBusinessImpl testable;\n    \n    @Mock\n    AgilefantWidgetDAO agilefantWidgetDAO;\n    \n    @Mock\n    WidgetCollectionBusiness widgetCollectionBusiness;\n    \n    \n    /*\n     * CREATE\n     */\n    @Test\n    @DirtiesContext\n    public void testCreate() {\n        AgilefantWidget returned = new AgilefantWidget();\n        WidgetCollection collection = new WidgetCollection();\n        Capture<AgilefantWidget> captured = new Capture<AgilefantWidget>();\n        \n        expect(widgetCollectionBusiness.retrieve(2)).andReturn(collection);\n        \n        widgetCollectionBusiness.insertWidgetToHead(EasyMock.isA(WidgetCollection.class), EasyMock.isA(AgilefantWidget.class));\n        \n        expect(agilefantWidgetDAO.create(EasyMock.capture(captured)))\n            .andReturn(new Integer(15));\n        \n        expect(agilefantWidgetDAO.get(15)).andReturn(returned);\n        \n        \n        replayAll();\n        assertSame(returned, testable.create(\"text\", 1, 2));\n        verifyAll();\n        \n        AgilefantWidget actual = captured.getValue();\n        \n        assertEquals(\"text\", actual.getType());\n        assertEquals(1, actual.getObjectId().intValue());\n        assertEquals(collection, actual.getWidgetCollection());\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testCreate_nullIds() {\n        try {\n            testable.create(null, 1, 2);\n            fail();\n        }\n        catch (IllegalArgumentException e) {}\n        try {\n            testable.create(\"\", null, 2);\n            fail();\n        }\n        catch (IllegalArgumentException e) {}\n        try {\n            testable.create(\"\", 2, null);\n            fail();\n        }\n        catch (IllegalArgumentException e) {}\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testMove() {\n        WidgetCollection collection = new WidgetCollection();\n        AgilefantWidget widget = new AgilefantWidget(); \n        widget.setWidgetCollection(collection);\n        \n        widgetCollectionBusiness.insertWidgetToPosition(collection, widget, 1, 2);\n        replayAll();\n        testable.move(widget, 1, 2);\n        verifyAll();\n    }\n    \n    \n    /*\n     * GENERATE GRID\n     */\n    @Test\n    @DirtiesContext\n    public void testGenerateWidgetGrid_oneColumn() {\n        WidgetCollection widgets = new WidgetCollection();\n        AgilefantWidget widget = new AgilefantWidget();\n        widget.setPosition(0);\n        widget.setListNumber(0);\n        widgets.getWidgets().add(widget);\n        \n        replayAll();\n        List<List<AgilefantWidget>> grid = this.testable.generateWidgetGrid(widgets, 0);\n        verifyAll();\n        assertEquals(1, grid.size());\n        assertEquals(1, grid.get(0).size());\n        assertSame(widget, grid.get(0).get(0));\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testGenerateWidgetGrid_empty() {\n        WidgetCollection widgets = new WidgetCollection();\n        replayAll();\n        List<List<AgilefantWidget>> grid = this.testable.generateWidgetGrid(widgets, 0);\n        verifyAll();\n        assertEquals(0, grid.size());\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testGenerateWidgetGrid_emptyMinColumns() {\n        WidgetCollection widgets = new WidgetCollection();\n        replayAll();\n        List<List<AgilefantWidget>> grid = this.testable.generateWidgetGrid(widgets, 2);\n        verifyAll();\n        assertEquals(2, grid.size());\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testGenerateWidgetGrid_multipleColumns() {\n        WidgetCollection widgets = new WidgetCollection();\n        AgilefantWidget widget1 = new AgilefantWidget();\n        widget1.setPosition(0);\n        widget1.setListNumber(0);\n        widgets.getWidgets().add(widget1);\n        \n        AgilefantWidget widget2 = new AgilefantWidget();\n        widget2.setPosition(1);\n        widget2.setListNumber(0);\n        widgets.getWidgets().add(widget2);\n        \n        AgilefantWidget widget3 = new AgilefantWidget();\n        widget3.setPosition(0);\n        widget3.setListNumber(3);\n        widgets.getWidgets().add(widget3);\n        \n        replayAll();\n        List<List<AgilefantWidget>> grid = this.testable.generateWidgetGrid(widgets, 2);\n        verifyAll();\n        \n        assertEquals(4, grid.size());\n        assertEquals(2, grid.get(0).size());\n        assertSame(widget1, grid.get(0).get(0));\n        assertSame(widget2, grid.get(0).get(1));\n        assertSame(widget3, grid.get(3).get(0));\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\AssignmentBusinessTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["AssignmentBusinessTest"], "AN": ["testable", "userBusiness", "assignmentDAO", "assignment"], "SCS_VariableDeclarator": ["testable", "userBusiness", "assignmentDAO", "assignment", "iter", "user", "as1", "actual", "iter", "user", "as1", "actual", "iter", "actual", "personalLoad", "personalLoad", "user1", "user2", "user3", "iter", "existingAssignment", "personalLoad", "capt1", "capt2", "actual", "users"], "MN": ["setUp", "replayAll", "verifyAll", "testGetAssignedUserIds", "testGetAssignedUserIds_Project", "testGetAssignedUserIds_Product", "testStore", "testStore_notFound", "testAddMultiple"], "PN": [], "SCS_MemberReference": ["testable", "userBusiness", "userBusiness", "assignmentDAO", "assignmentDAO", "assignment", "userBusiness", "assignmentDAO", "userBusiness", "assignmentDAO", "user", "iter", "as1", "iter", "user", "iter", "as1", "iter", "iter", "assignment", "assignment", "personalLoad", "personalLoad", "personalLoad", "user3", "iter", "existingAssignment", "user1", "user2", "capt1", "capt2", "iter", "personalLoad", "iter", "iter", "user1", "user2", "personalLoad", "personalLoad"], "SCS_ClassReference": ["", "UserBusiness", "testable", "", "AssignmentDAO", "testable", "", "", "user", "iter", null, "testable", "", "actual", "", "actual", "user", "iter", null, "testable", "", "actual", "", "actual", "testable", "", "actual", "", null, "assignmentDAO", "assignmentDAO", "", "testable", "", "assignment", "", "assignment", "", "ObjectNotFoundException", "", null, "assignmentDAO", "", "testable", "", "user1", "user2", "user3", "iter", null, "", null, "userBusiness", "", null, "userBusiness", "", null, "assignmentDAO", "EasyMock", "", null, "assignmentDAO", "", null, "assignmentDAO", "EasyMock", "", null, "assignmentDAO", "", "testable", "Arrays", "", "actual", "", "capt1", null, "", "capt2", null, "Arrays", "capt1", null, "capt2", null, "", "users", "", "users", "", "capt1", null, "", "capt2", null, "", "capt1", null, "", "capt2", null, ""], "SCS_MethodInvocation": ["createMock", "setUserBusiness", "createMock", "setAssignmentDAO", "replay", "verify", "setId", "getAssignments", "add", "getAssignedUserIds", "assertEquals", "size", "assertTrue", "contains", "setId", "getAssignments", "add", "getAssignedUserIds", "assertEquals", "size", "assertTrue", "contains", "getAssignedUserIds", "assertEquals", "size", "expect", "andReturn", "get", "store", "replayAll", "store", "assertEquals", "getAvailability", "assertEquals", "getPersonalLoad", "verifyAll", "expect", "andThrow", "get", "replayAll", "store", "verifyAll", "setId", "setId", "setId", "getAssignments", "add", "expect", "andReturn", "retrieve", "expect", "andReturn", "retrieve", "expect", "andReturn", "create", "capture", "expect", "andReturn", "get", "expect", "andReturn", "create", "capture", "expect", "andReturn", "get", "replayAll", "addMultiple", "asList", "assertEquals", "size", "assertEquals", "getValue", "getBacklog", "assertEquals", "getValue", "getBacklog", "asList", "getValue", "getUser", "getValue", "getUser", "assertTrue", "contains", "assertTrue", "contains", "assertEquals", "getValue", "getAvailability", "assertEquals", "getValue", "getAvailability", "assertEquals", "getValue", "getPersonalLoad", "assertEquals", "getValue", "getPersonalLoad", "verifyAll"], "SCS_VariableDeclaration": ["Iteration", "User", "Assignment", "Set", "Project", "User", "Assignment", "Set", "Product", "Set", "SignedExactEstimate", "SignedExactEstimate", "User", "User", "User", "Iteration", "Assignment", "SignedExactEstimate", "Capture", "Capture", "Set", "Set"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport static org.easymock.EasyMock.*;\nimport static org.junit.Assert.*;\n\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.Set;\n\nimport org.easymock.Capture;\nimport org.easymock.EasyMock;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport fi.hut.soberit.agilefant.business.impl.AssignmentBusinessImpl;\nimport fi.hut.soberit.agilefant.db.AssignmentDAO;\nimport fi.hut.soberit.agilefant.exception.ObjectNotFoundException;\nimport fi.hut.soberit.agilefant.model.Assignment;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.Product;\nimport fi.hut.soberit.agilefant.model.Project;\nimport fi.hut.soberit.agilefant.model.SignedExactEstimate;\nimport fi.hut.soberit.agilefant.model.User;\n\npublic class AssignmentBusinessTest {\n\n    AssignmentBusinessImpl testable;\n    UserBusiness userBusiness;\n    AssignmentDAO assignmentDAO;\n\n    Assignment assignment;\n\n    @Before\n    public void setUp() {\n        testable = new AssignmentBusinessImpl();\n\n        userBusiness = createMock(UserBusiness.class);\n        testable.setUserBusiness(userBusiness);\n\n        assignmentDAO = createMock(AssignmentDAO.class);\n        testable.setAssignmentDAO(assignmentDAO);\n\n        assignment = new Assignment();\n    }\n\n    private void replayAll() {\n        replay(userBusiness, assignmentDAO);\n    }\n\n    private void verifyAll() {\n        verify(userBusiness, assignmentDAO);\n    }\n\n    @Test\n    public void testGetAssignedUserIds() {\n        Iteration iter = new Iteration();\n        User user = new User();\n        user.setId(1);\n        Assignment as1 = new Assignment(user, iter);\n        iter.getAssignments().add(as1);\n        Set<Integer> actual = testable.getAssignedUserIds(iter);\n        assertEquals(1, actual.size());\n        assertTrue(actual.contains(1));\n    }\n    \n    @Test\n    public void testGetAssignedUserIds_Project() {\n        Project iter = new Project();\n        User user = new User();\n        user.setId(1);\n        Assignment as1 = new Assignment(user, iter);\n        iter.getAssignments().add(as1);\n        Set<Integer> actual = testable.getAssignedUserIds(iter);\n        assertEquals(1, actual.size());\n        assertTrue(actual.contains(1));\n    }\n    \n    @Test\n    public void testGetAssignedUserIds_Product() {\n        Product iter = new Product();\n        Set<Integer> actual = testable.getAssignedUserIds(iter);\n        assertEquals(0, actual.size());\n    }\n    \n    @Test\n    public void testStore() {\n        SignedExactEstimate personalLoad = new SignedExactEstimate(100L);\n        expect(assignmentDAO.get(10)).andReturn(assignment);\n        assignmentDAO.store(assignment);\n        replayAll();\n        testable.store(10, personalLoad, 100);\n        assertEquals(100, assignment.getAvailability());\n        assertEquals(personalLoad, assignment.getPersonalLoad());\n        verifyAll();\n    }\n\n    @Test(expected = ObjectNotFoundException.class)\n    public void testStore_notFound() {\n        SignedExactEstimate personalLoad = new SignedExactEstimate(100L);\n        expect(assignmentDAO.get(10)).andThrow(new ObjectNotFoundException());\n        replayAll();\n        testable.store(10, personalLoad, 100);\n        verifyAll();\n    }\n\n    @Test\n    public void testAddMultiple() {\n        User user1 = new User();\n        user1.setId(1);\n        User user2 = new User();\n        user2.setId(2);\n        User user3 = new User();\n        user3.setId(3);\n        Iteration iter = new Iteration();\n        Assignment existingAssignment = new Assignment(user3, iter);\n        iter.getAssignments().add(existingAssignment);\n        SignedExactEstimate personalLoad = new SignedExactEstimate(100L);\n\n        Capture<Assignment> capt1 = new Capture<Assignment>();\n        Capture<Assignment> capt2 = new Capture<Assignment>();\n        \n        expect(userBusiness.retrieve(1)).andReturn(user1);\n        expect(userBusiness.retrieve(2)).andReturn(user2);\n        expect(assignmentDAO.create(EasyMock.capture(capt1))).andReturn(new Integer(111));\n        expect(assignmentDAO.get(111)).andReturn(new Assignment());\n        expect(assignmentDAO.create(EasyMock.capture(capt2))).andReturn(new Integer(112));\n        expect(assignmentDAO.get(112)).andReturn(new Assignment());\n\n        replayAll();\n        \n        Set<Assignment> actual = testable.addMultiple(iter, new HashSet<Integer>(Arrays.asList(1, 2)),\n                personalLoad, 100);\n        \n        assertEquals(3, actual.size());\n        \n        assertEquals(iter, capt1.getValue().getBacklog());\n        assertEquals(iter, capt2.getValue().getBacklog());\n        \n        Set<User> users = new HashSet<User>(Arrays.asList(capt1.getValue().getUser(), capt2.getValue().getUser()));\n        assertTrue(users.contains(user1));\n        assertTrue(users.contains(user2));\n        \n        assertEquals((short)100, capt1.getValue().getAvailability());\n        assertEquals((short)100, capt2.getValue().getAvailability());\n        \n        assertEquals(personalLoad, capt1.getValue().getPersonalLoad());\n        assertEquals(personalLoad, capt2.getValue().getPersonalLoad());\n\n        verifyAll();\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\BacklogBusinessTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["BacklogBusinessTest"], "SCS_ClassReference": ["SpringJUnit4ClassRunner", "MockContextLoader", "backlog", "", null, "backlogDAO", "", "", "backlogBusiness", "", "", null, "Arrays", "productDAO", "", "backlogBusiness", "", "product", null, "", "backlogBusiness", "", "actualChildren", "", "actualChildren", "", "project", null, "", "backlogBusiness", "", "actualChildren", "", "actualChildren", "", "iterationUnderProduct", "iterationUnderProject", "project", "", "backlogBusiness", "", "backlogBusiness", "", "backlogBusiness", "", "backlogBusiness", "iteration", "", null, "storyDAO", "iteration", "", "", "backlogBusiness", "", null, "startDate", "iter", "startDate", null, "iter", "backlogBusiness", "", "daysLeft", null, "startDate", "iter", "startDate", null, "iter", "backlogBusiness", "", "daysLeft", null, "startDate", "iter", "startDate", null, "iter", "backlogBusiness", "", "daysLeft", null, null, "startDate", null, "iter", "startDate", null, "iter", "endDate", null, "backlogBusiness", "", null, "startDate", "iter", "startDate", null, "iter", "backlogBusiness", "", null, "startDate", "iter", "startDate", null, "iter", "backlogBusiness", "", "", null, null, "", null, null, "", null, "", "", "actual", "iteration", "iteration", "added", "addedRevision", null, "", null, "Arrays", null, "", null, null, "", null, null, "", null, "", "", "actual", "iteration", "iteration", "added", "addedRevision", null, "deletedRevision", null, "", null, "Arrays", null, "", null, "Arrays", null, "", null, "", "", "actual", "iteration", "iteration", "added", "addedRevision", null, "", null, "Arrays", null, "", null, null, "", null, "", "", "actual", "iteration", "iteration", "added", "addedRevision", null, "deletedRevision", null, "", null, "Arrays", null, "", null, "Arrays", null, "", null, null, "", null, "", "", "actual", "iteration", "iteration", "added", "addedRevision", null, "", null, "Arrays", null, "", null, null, "", null, null, "", null, "", "", "actual"], "AN": ["backlogBusiness", "backlogDAO", "productDAO", "storyDAO", "storyBusiness", "backlogHistoryDAO", "assignmentBusiness"], "SCS_VariableDeclarator": ["backlogBusiness", "backlogDAO", "productDAO", "storyDAO", "storyBusiness", "backlogHistoryDAO", "assignmentBusiness", "backlog", "product", "project", "actualChildren", "project", "iteration", "actualChildren", "product", "iterationUnderProject", "iterationUnderProduct", "project", "iteration", "iter", "startDate", "endDate", "daysLeft", "iter", "startDate", "endDate", "daysLeft", "iter", "startDate", "endDate", "daysLeft", "iter", "startDate", "endDate", "percentage", "iter", "startDate", "endDate", "percentage", "iter", "startDate", "endDate", "percentage", "iteration", "actual", "iteration", "added", "current", "addedRevision", "addedEntry", "actual", "iteration", "added", "addedRevision", "addedEntry", "deletedRevision", "deletedEntry", "actual", "iteration", "added", "addedRevision", "addedEntry", "actual", "iteration", "added", "addedRevision", "addedEntry", "deletedRevision", "deletedEntry", "actual", "iteration", "added", "addedRevision", "addedEntry", "actual"], "MN": ["testGetNumberOfChildren", "testGetChildBacklogs_allProducts", "testGetChildBacklogs_forProduct", "testGetChildBacklogs_forProject", "testGetParentProduct", "testGetStoryPointSumByBacklog", "testTimeLeftInSchedulable", "testTimeLeftInSchedulable_past", "testTimeLeftInSchedulable_future", "testCalculateBacklogTimeframePercentageLeft", "testCalculateBacklogTimeframePercentageLeft_past", "testCalculateBacklogTimeframePercentageLeft_future", "testRetrieveUnexpectedStories_empty", "testRetrieveUnexpectedStories_oneAdded", "testRetrieveUnexpectedStories_addedAndDeleted", "testRetrieveUnexpectedStories_addedBeforeStart", "testRetrieveUnexpectedStories_movedAfterEnd", "testRetrieveUnexpectedStories_deletedAfterEnd"], "PN": [], "SCS_VariableDeclaration": ["Backlog", "Backlog", "Project", "Collection", "Backlog", "Iteration", "Collection", "Product", "Iteration", "Iteration", "Project", "Iteration", "Iteration", "DateTime", "DateTime", "Days", "Iteration", "DateTime", "DateTime", "Days", "Iteration", "DateTime", "DateTime", "Days", "Iteration", "DateTime", "DateTime", "float", "Iteration", "DateTime", "DateTime", "float", "Iteration", "DateTime", "DateTime", "float", "Iteration", "List", "Iteration", "Story", "Story", "AgilefantRevisionEntity", "AgilefantHistoryEntry", "List", "Iteration", "Story", "AgilefantRevisionEntity", "AgilefantHistoryEntry", "AgilefantRevisionEntity", "AgilefantHistoryEntry", "List", "Iteration", "Story", "AgilefantRevisionEntity", "AgilefantHistoryEntry", "List", "Iteration", "Story", "AgilefantRevisionEntity", "AgilefantHistoryEntry", "AgilefantRevisionEntity", "AgilefantHistoryEntry", "List", "Iteration", "Story", "AgilefantRevisionEntity", "AgilefantHistoryEntry", "List"], "SCS_MethodInvocation": ["setId", "expect", "andReturn", "getNumberOfChildren", "replay", "assertEquals", "getNumberOfChildren", "verify", "expect", "andReturn", "asList", "getAll", "replay", "getChildBacklogs", "verify", "getChildren", "add", "replay", "getChildBacklogs", "assertTrue", "contains", "assertEquals", "size", "verify", "getChildren", "add", "replay", "getChildBacklogs", "assertTrue", "contains", "assertEquals", "size", "verify", "setParent", "setParent", "setParent", "assertSame", "getParentProduct", "assertSame", "getParentProduct", "assertSame", "getParentProduct", "assertSame", "getParentProduct", "setId", "expect", "andReturn", "getStoryPointSumByIteration", "getId", "replayAll", "assertEquals", "getStoryPointSumByIteration", "verifyAll", "minusDays", "plusDays", "setStartDate", "toDateMidnight", "toDateTime", "setEndDate", "daysLeftInSchedulableBacklog", "assertEquals", "getDays", "minusDays", "plusDays", "setStartDate", "toDateMidnight", "toDateTime", "setEndDate", "daysLeftInSchedulableBacklog", "assertEquals", "getDays", "plusDays", "plusDays", "setStartDate", "toDateMidnight", "toDateTime", "setEndDate", "daysLeftInSchedulableBacklog", "assertEquals", "getDays", "withZone", "minusDays", "withZone", "plusDays", "setStartDate", "toDateMidnight", "toDateTime", "setEndDate", "toDateMidnight", "toDateTime", "calculateBacklogTimeframePercentageLeft", "assertEquals", "minusDays", "plusDays", "setStartDate", "toDateMidnight", "toDateTime", "setEndDate", "calculateBacklogTimeframePercentageLeft", "assertEquals", "plusDays", "plusDays", "setStartDate", "toDateMidnight", "toDateTime", "setEndDate", "calculateBacklogTimeframePercentageLeft", "assertEquals", "expect", "andReturn", "retrieveAddedStories", "expect", "andReturn", "retrieveDeletedStories", "replayAll", "retrieveUnexpectedStories", "verifyAll", "assertEquals", "size", "setStartDate", "setEndDate", "setId", "setTimestamp", "getMillis", "expect", "andReturn", "asList", "retrieveAddedStories", "expect", "andReturn", "retrieveDeletedStories", "expect", "andReturn", "retrieveIfExists", "replayAll", "retrieveUnexpectedStories", "verifyAll", "assertSame", "get", "setStartDate", "setEndDate", "setId", "setTimestamp", "getMillis", "setTimestamp", "getMillis", "expect", "andReturn", "asList", "retrieveAddedStories", "expect", "andReturn", "asList", "retrieveDeletedStories", "replayAll", "retrieveUnexpectedStories", "verifyAll", "assertEquals", "size", "setStartDate", "setEndDate", "setId", "setTimestamp", "getMillis", "expect", "andReturn", "asList", "retrieveAddedStories", "expect", "andReturn", "retrieveDeletedStories", "replayAll", "retrieveUnexpectedStories", "verifyAll", "assertEquals", "size", "setStartDate", "setEndDate", "setId", "setTimestamp", "getMillis", "setTimestamp", "getMillis", "expect", "andReturn", "asList", "retrieveAddedStories", "expect", "andReturn", "asList", "retrieveDeletedStories", "expect", "andReturn", "retrieveIfExists", "replayAll", "retrieveUnexpectedStories", "verifyAll", "assertEquals", "size", "setStartDate", "setEndDate", "setId", "setTimestamp", "getMillis", "expect", "andReturn", "asList", "retrieveAddedStories", "expect", "andReturn", "retrieveDeletedStories", "expect", "andReturn", "retrieveIfExists", "replayAll", "retrieveUnexpectedStories", "verifyAll", "assertSame", "get"], "SCS_MemberReference": ["backlog", "backlogDAO", "backlog", "backlogDAO", "backlogDAO", "productDAO", "backlogDAO", "productDAO", "project", "backlogDAO", "productDAO", "product", "project", "backlogDAO", "productDAO", "iteration", "backlogDAO", "productDAO", "project", "iteration", "backlogDAO", "productDAO", "product", "project", "product", "product", "product", "product", "project", "product", "iterationUnderProduct", "product", "iterationUnderProject", "iteration", "endDate", "iter", "endDate", "iter", "endDate", "iter", "UTC", "UTC", "iter", "percentage", "endDate", "iter", "percentage", "endDate", "iter", "percentage", "backlogHistoryDAO", "iteration", "backlogHistoryDAO", "iteration", "backlogBusiness", "iteration", "added", "addedRevision", "ADD", "addedEntry", "backlogHistoryDAO", "iteration", "backlogHistoryDAO", "iteration", "current", "storyBusiness", "backlogBusiness", "iteration", "current", "added", "addedRevision", "ADD", "DEL", "deletedRevision", "addedEntry", "backlogHistoryDAO", "iteration", "deletedEntry", "backlogHistoryDAO", "iteration", "backlogBusiness", "iteration", "added", "addedRevision", "ADD", "addedEntry", "backlogHistoryDAO", "iteration", "backlogHistoryDAO", "iteration", "backlogBusiness", "iteration", "added", "addedRevision", "ADD", "DEL", "deletedRevision", "addedEntry", "backlogHistoryDAO", "iteration", "deletedEntry", "backlogHistoryDAO", "iteration", "added", "storyBusiness", "backlogBusiness", "iteration", "added", "addedRevision", "ADD", "addedEntry", "backlogHistoryDAO", "iteration", "backlogHistoryDAO", "iteration", "storyBusiness", "backlogBusiness", "iteration", "added"], "CO": ["/**\n * A spring test case for testing the Backlog business layer.\n * \n * @author hhaataja, rstrom\n * \n */"], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport static org.easymock.EasyMock.*;\nimport static org.junit.Assert.*;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.List;\n\nimport org.hibernate.envers.RevisionType;\nimport org.joda.time.DateTime;\nimport org.joda.time.DateTimeZone;\nimport org.joda.time.Days;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.test.annotation.DirtiesContext;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n\nimport fi.hut.soberit.agilefant.business.impl.BacklogBusinessImpl;\nimport fi.hut.soberit.agilefant.db.BacklogDAO;\nimport fi.hut.soberit.agilefant.db.ProductDAO;\nimport fi.hut.soberit.agilefant.db.StoryDAO;\nimport fi.hut.soberit.agilefant.db.history.BacklogHistoryDAO;\nimport fi.hut.soberit.agilefant.model.AgilefantRevisionEntity;\nimport fi.hut.soberit.agilefant.model.Backlog;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.Product;\nimport fi.hut.soberit.agilefant.model.Project;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.test.Mock;\nimport fi.hut.soberit.agilefant.test.MockContextLoader;\nimport fi.hut.soberit.agilefant.test.MockedTestCase;\nimport fi.hut.soberit.agilefant.test.TestedBean;\nimport fi.hut.soberit.agilefant.transfer.AgilefantHistoryEntry;\n\n\n/**\n * A spring test case for testing the Backlog business layer.\n * \n * @author hhaataja, rstrom\n * \n */\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(loader = MockContextLoader.class)\npublic class BacklogBusinessTest extends MockedTestCase {\n    \n    @TestedBean\n    private BacklogBusinessImpl backlogBusiness;\n    @Mock\n    private BacklogDAO backlogDAO;\n    @Mock\n    private ProductDAO productDAO;\n    @Mock\n    private StoryDAO storyDAO;\n    @Mock\n    private StoryBusiness storyBusiness;\n    @Mock\n    private BacklogHistoryDAO backlogHistoryDAO;\n    @Mock\n    private AssignmentBusiness assignmentBusiness;\n    \n    @Test\n    @DirtiesContext\n    public void testGetNumberOfChildren() {\n        Backlog backlog = new Product();\n        backlog.setId(5);\n        \n        expect(backlogDAO.getNumberOfChildren(backlog)).andReturn(2);\n        replay(backlogDAO);\n        \n        assertEquals(2, backlogBusiness.getNumberOfChildren(backlog));\n        \n        verify(backlogDAO);\n    }\n\n    \n    @Test\n    @DirtiesContext\n    public void testGetChildBacklogs_allProducts() {\n        expect(productDAO.getAll()).andReturn(Arrays.asList(new Product()));\n        replay(backlogDAO, productDAO);\n        backlogBusiness.getChildBacklogs(null);\n        verify(backlogDAO, productDAO);\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testGetChildBacklogs_forProduct() {\n        Backlog product = new Product();\n        Project project = new Project();\n        product.getChildren().add(project);\n        replay(backlogDAO, productDAO);\n        \n        Collection<Backlog> actualChildren = backlogBusiness.getChildBacklogs(product);\n        \n        assertTrue(actualChildren.contains(project));\n        assertEquals(1, actualChildren.size());\n        \n        verify(backlogDAO, productDAO);\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testGetChildBacklogs_forProject() {\n        Backlog project = new Project();\n        Iteration iteration = new Iteration();\n        project.getChildren().add(iteration);\n        replay(backlogDAO, productDAO);\n        \n        Collection<Backlog> actualChildren = backlogBusiness.getChildBacklogs(project);\n        assertTrue(actualChildren.contains(iteration));\n        assertEquals(1, actualChildren.size());\n        \n        verify(backlogDAO, productDAO);\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testGetParentProduct() {\n        Product product = new Product();\n        Iteration iterationUnderProject = new Iteration();\n        Iteration iterationUnderProduct = new Iteration();\n        Project project = new Project();\n        \n        iterationUnderProduct.setParent(product);\n        iterationUnderProject.setParent(project);\n        project.setParent(product);\n        \n        assertSame(product, backlogBusiness.getParentProduct(product));\n        assertSame(product, backlogBusiness.getParentProduct(project));\n        assertSame(product, backlogBusiness.getParentProduct(iterationUnderProduct));\n        assertSame(product, backlogBusiness.getParentProduct(iterationUnderProject));\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testGetStoryPointSumByBacklog() {\n        Iteration iteration = new Iteration();\n        iteration.setId(4);\n        expect(storyDAO.getStoryPointSumByIteration(iteration.getId()))\n            .andReturn(6);\n        replayAll();\n        \n        assertEquals(6, backlogBusiness.getStoryPointSumByIteration(iteration));\n        \n        verifyAll();\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testTimeLeftInSchedulable() {\n        Iteration iter = new Iteration();\n        DateTime startDate = new DateTime().minusDays(2);\n        DateTime endDate = startDate.plusDays(5);\n        iter.setStartDate(startDate.toDateMidnight().toDateTime());\n        iter.setEndDate(endDate);\n        \n        Days daysLeft = backlogBusiness.daysLeftInSchedulableBacklog(iter);\n        \n        assertEquals(3, daysLeft.getDays());\n        \n    }\n    \n    @Test\n    @DirtiesContext\n    public void testTimeLeftInSchedulable_past() {\n        Iteration iter = new Iteration();\n        DateTime startDate = new DateTime().minusDays(40);\n        DateTime endDate = startDate.plusDays(5);\n        iter.setStartDate(startDate.toDateMidnight().toDateTime());\n        iter.setEndDate(endDate);\n        \n        Days daysLeft = backlogBusiness.daysLeftInSchedulableBacklog(iter);\n        assertEquals(0, daysLeft.getDays());\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testTimeLeftInSchedulable_future() {\n        Iteration iter = new Iteration();\n        DateTime startDate = new DateTime().plusDays(2);\n        DateTime endDate = startDate.plusDays(50);\n        iter.setStartDate(startDate.toDateMidnight().toDateTime());\n        iter.setEndDate(endDate);\n        \n        Days daysLeft = backlogBusiness.daysLeftInSchedulableBacklog(iter);\n        assertEquals(50, daysLeft.getDays());\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testCalculateBacklogTimeframePercentageLeft() {\n        Iteration iter = new Iteration();\n        DateTime startDate = new DateTime().withZone(DateTimeZone.UTC).minusDays(2);\n        DateTime endDate = startDate.withZone(DateTimeZone.UTC).plusDays(4);\n        iter.setStartDate(startDate.toDateMidnight().toDateTime());\n        iter.setEndDate(endDate.toDateMidnight().toDateTime());\n        float percentage = backlogBusiness.calculateBacklogTimeframePercentageLeft(iter);\n        assertEquals(0.5f,percentage,0);\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testCalculateBacklogTimeframePercentageLeft_past() {\n        Iteration iter = new Iteration();\n        DateTime startDate = new DateTime().minusDays(40);\n        DateTime endDate = startDate.plusDays(5);\n        iter.setStartDate(startDate.toDateMidnight().toDateTime());\n        iter.setEndDate(endDate);\n        float percentage = backlogBusiness.calculateBacklogTimeframePercentageLeft(iter);\n        assertEquals(0f, percentage, 0);\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testCalculateBacklogTimeframePercentageLeft_future() {\n        Iteration iter = new Iteration();\n        DateTime startDate = new DateTime().plusDays(4);\n        DateTime endDate = startDate.plusDays(50);\n        iter.setStartDate(startDate.toDateMidnight().toDateTime());\n        iter.setEndDate(endDate);\n        float percentage = backlogBusiness.calculateBacklogTimeframePercentageLeft(iter);\n        assertEquals(1f, percentage, 1000);\n    }\n    \n    \n    @Test\n    @DirtiesContext\n    public void testRetrieveUnexpectedStories_empty() {\n        Iteration iteration = new Iteration();\n        expect(this.backlogHistoryDAO.retrieveAddedStories(iteration)).andReturn(new ArrayList<AgilefantHistoryEntry>());\n        expect(this.backlogHistoryDAO.retrieveDeletedStories(iteration)).andReturn(new ArrayList<AgilefantHistoryEntry>());\n        replayAll();\n        List<Story> actual = this.backlogBusiness.retrieveUnexpectedStories(iteration);\n        verifyAll();\n        assertEquals(0, actual.size());\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testRetrieveUnexpectedStories_oneAdded() {\n        Iteration iteration = new Iteration();\n        iteration.setStartDate(new DateTime(2010,1,1,0,0,0,0));\n        iteration.setEndDate(new DateTime(2010,2,1,0,0,0,0));\n        \n        Story added = new Story();\n        Story current = new Story();\n        added.setId(1);\n        AgilefantRevisionEntity addedRevision = new AgilefantRevisionEntity();\n        addedRevision.setTimestamp(new DateTime(2010,1,15,0,0,0,0).getMillis());\n        AgilefantHistoryEntry addedEntry = new AgilefantHistoryEntry(added, addedRevision, RevisionType.ADD);\n        \n        expect(this.backlogHistoryDAO.retrieveAddedStories(iteration)).andReturn(Arrays.asList(addedEntry));\n        expect(this.backlogHistoryDAO.retrieveDeletedStories(iteration)).andReturn(new ArrayList<AgilefantHistoryEntry>());\n        expect(this.storyBusiness.retrieveIfExists(1)).andReturn(current);\n        \n        replayAll();\n        List<Story> actual = this.backlogBusiness.retrieveUnexpectedStories(iteration);\n        verifyAll();\n        assertSame(current, actual.get(0));\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testRetrieveUnexpectedStories_addedAndDeleted() {\n        Iteration iteration = new Iteration();\n        iteration.setStartDate(new DateTime(2010,1,1,0,0,0,0));\n        iteration.setEndDate(new DateTime(2010,2,1,0,0,0,0));\n        \n        Story added = new Story();\n        added.setId(1);\n        AgilefantRevisionEntity addedRevision = new AgilefantRevisionEntity();\n        addedRevision.setTimestamp(new DateTime(2010,1,15,0,0,0,0).getMillis());\n        AgilefantHistoryEntry addedEntry = new AgilefantHistoryEntry(added, addedRevision, RevisionType.ADD);\n        \n        AgilefantRevisionEntity deletedRevision = new AgilefantRevisionEntity();\n        deletedRevision.setTimestamp(new DateTime(2010,1,20,0,0,0,0).getMillis());\n        AgilefantHistoryEntry deletedEntry = new AgilefantHistoryEntry(1, RevisionType.DEL, deletedRevision);\n        \n        expect(this.backlogHistoryDAO.retrieveAddedStories(iteration)).andReturn(Arrays.asList(addedEntry));\n        expect(this.backlogHistoryDAO.retrieveDeletedStories(iteration)).andReturn(Arrays.asList(deletedEntry));\n        \n        replayAll();\n        List<Story> actual = this.backlogBusiness.retrieveUnexpectedStories(iteration);\n        verifyAll();\n        assertEquals(0, actual.size());\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testRetrieveUnexpectedStories_addedBeforeStart() {\n        Iteration iteration = new Iteration();\n        iteration.setStartDate(new DateTime(2010,2,1,0,0,0,0));\n        iteration.setEndDate(new DateTime(2010,4,1,0,0,0,0));\n        \n        Story added = new Story();\n        added.setId(1);\n        AgilefantRevisionEntity addedRevision = new AgilefantRevisionEntity();\n        addedRevision.setTimestamp(new DateTime(2010,1,15,0,0,0,0).getMillis());\n        AgilefantHistoryEntry addedEntry = new AgilefantHistoryEntry(added, addedRevision, RevisionType.ADD);\n        \n        expect(this.backlogHistoryDAO.retrieveAddedStories(iteration)).andReturn(Arrays.asList(addedEntry));\n        expect(this.backlogHistoryDAO.retrieveDeletedStories(iteration)).andReturn(new ArrayList<AgilefantHistoryEntry>());\n        \n        replayAll();\n        List<Story> actual = this.backlogBusiness.retrieveUnexpectedStories(iteration);\n        verifyAll();\n        assertEquals(0, actual.size());\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testRetrieveUnexpectedStories_movedAfterEnd() {\n        Iteration iteration = new Iteration();\n        iteration.setStartDate(new DateTime(2010,1,1,0,0,0,0));\n        iteration.setEndDate(new DateTime(2010,2,1,0,0,0,0));\n        \n        Story added = new Story();\n        added.setId(1);\n        AgilefantRevisionEntity addedRevision = new AgilefantRevisionEntity();\n        addedRevision.setTimestamp(new DateTime(2010,1,15,0,0,0,0).getMillis());\n        AgilefantHistoryEntry addedEntry = new AgilefantHistoryEntry(added, addedRevision, RevisionType.ADD);\n        \n        AgilefantRevisionEntity deletedRevision = new AgilefantRevisionEntity();\n        deletedRevision.setTimestamp(new DateTime(2010,2,20,0,0,0,0).getMillis());\n        AgilefantHistoryEntry deletedEntry = new AgilefantHistoryEntry(1, RevisionType.DEL, deletedRevision);\n        \n        expect(this.backlogHistoryDAO.retrieveAddedStories(iteration)).andReturn(Arrays.asList(addedEntry));\n        expect(this.backlogHistoryDAO.retrieveDeletedStories(iteration)).andReturn(Arrays.asList(deletedEntry));\n        expect(this.storyBusiness.retrieveIfExists(1)).andReturn(added);\n        \n        replayAll();\n        List<Story> actual = this.backlogBusiness.retrieveUnexpectedStories(iteration);\n        verifyAll();\n        assertEquals(1, actual.size());\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testRetrieveUnexpectedStories_deletedAfterEnd() {\n        Iteration iteration = new Iteration();\n        iteration.setStartDate(new DateTime(2010,1,1,0,0,0,0));\n        iteration.setEndDate(new DateTime(2010,2,1,0,0,0,0));\n        \n        Story added = new Story();\n        added.setId(1);\n        AgilefantRevisionEntity addedRevision = new AgilefantRevisionEntity();\n        addedRevision.setTimestamp(new DateTime(2010,1,15,0,0,0,0).getMillis());\n        AgilefantHistoryEntry addedEntry = new AgilefantHistoryEntry(added, addedRevision, RevisionType.ADD);\n        \n        expect(this.backlogHistoryDAO.retrieveAddedStories(iteration)).andReturn(Arrays.asList(addedEntry));\n        expect(this.backlogHistoryDAO.retrieveDeletedStories(iteration)).andReturn(new ArrayList<AgilefantHistoryEntry>());\n        expect(this.storyBusiness.retrieveIfExists(1)).andReturn(null);\n        \n        replayAll();\n        List<Story> actual = this.backlogBusiness.retrieveUnexpectedStories(iteration);\n        verifyAll();\n        assertSame(added, actual.get(0));\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\BacklogHistoryEntryBusinessTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["BacklogHistoryEntryBusinessTest"], "AN": ["backlogHistoryEntryDAO", "storyHierarchyDAO", "backlogHistoryEntryBusiness", "backlogDAO", "oldEntry", "newEntry"], "SCS_VariableDeclarator": ["backlogHistoryEntryDAO", "storyHierarchyDAO", "backlogHistoryEntryBusiness", "backlogDAO", "oldEntry", "newEntry", "project", "entry", "project", "iteration", "entry", "project", "iteration", "product"], "MN": ["setUp_dependecies", "setUp_data", "replayAll", "verifyAll", "testUpdateHistory_project", "testUpdateHistory_iteration", "testUpdateHistory_updateLatestEntry", "testUpdateHistory_product"], "PN": [], "SCS_MemberReference": ["storyHierarchyDAO", "backlogHistoryEntryDAO", "backlogDAO", "backlogHistoryEntryBusiness", "backlogHistoryEntryDAO", "storyHierarchyDAO", "backlogDAO", "oldEntry", "newEntry", "backlogHistoryEntryDAO", "storyHierarchyDAO", "backlogDAO", "backlogHistoryEntryDAO", "storyHierarchyDAO", "backlogDAO", "project", "oldEntry", "project", "project", "project", "project", "entry", "project", "project", "iteration", "oldEntry", "project", "project", "project", "project", "entry", "project", "project", "iteration", "newEntry", "project", "project", "project", "project", "newEntry", "product"], "SCS_ClassReference": ["", "StoryHierarchyDAO", "", "BacklogHistoryEntryDAO", "", "BacklogDAO", "backlogHistoryEntryBusiness", "backlogHistoryEntryBusiness", "backlogHistoryEntryBusiness", "oldEntry", null, "newEntry", "", "", "project", "", null, "backlogDAO", "", null, "backlogHistoryEntryDAO", "EasyMock", "DateTime", "EasyMock", "", null, "storyHierarchyDAO", "", null, "storyHierarchyDAO", "", null, "storyHierarchyDAO", "", null, "storyHierarchyDAO", "backlogHistoryEntryDAO", "EasyMock", "", "backlogHistoryEntryBusiness", "", "", "entry", null, "", "entry", null, "", "entry", null, "", "entry", null, "", "entry", null, "project", "iteration", "", null, "backlogDAO", "", null, "backlogHistoryEntryDAO", "EasyMock", "DateTime", "EasyMock", "", null, "storyHierarchyDAO", "", null, "storyHierarchyDAO", "", null, "storyHierarchyDAO", "", null, "storyHierarchyDAO", "backlogHistoryEntryDAO", "EasyMock", "", "backlogHistoryEntryBusiness", "", "", "entry", null, "", "entry", null, "", "entry", null, "", "entry", null, "", "entry", null, "project", "iteration", "", null, "backlogDAO", "", null, "backlogHistoryEntryDAO", "EasyMock", "DateTime", "EasyMock", "", null, "storyHierarchyDAO", "", null, "storyHierarchyDAO", "", null, "storyHierarchyDAO", "", null, "storyHierarchyDAO", "backlogHistoryEntryDAO", "", "backlogHistoryEntryBusiness", "", "", "newEntry", "", "newEntry", "", "newEntry", "", null, "backlogDAO", "", "backlogHistoryEntryBusiness", ""], "SCS_MethodInvocation": ["createStrictMock", "createStrictMock", "createStrictMock", "setBacklogHistoryEntryDAO", "setStoryHierarchyDAO", "setBacklogDAO", "setTimestamp", "minusDays", "setTimestamp", "replay", "verify", "setId", "expect", "andReturn", "get", "expect", "andReturn", "retrieveLatest", "isA", "eq", "expect", "andReturn", "totalLeafDoneStoryPoints", "expect", "andReturn", "totalLeafStoryPoints", "expect", "andReturn", "totalRootStoryPoints", "expect", "andReturn", "totalBranchStoryPoints", "store", "capture", "replayAll", "updateHistory", "verifyAll", "assertEquals", "getValue", "getDoneSum", "assertEquals", "getValue", "getEstimateSum", "assertEquals", "getValue", "getRootSum", "assertEquals", "getValue", "getBacklog", "assertNotNull", "getValue", "getTimestamp", "setId", "setParent", "expect", "andReturn", "get", "expect", "andReturn", "retrieveLatest", "isA", "eq", "expect", "andReturn", "totalLeafDoneStoryPoints", "expect", "andReturn", "totalLeafStoryPoints", "expect", "andReturn", "totalRootStoryPoints", "expect", "andReturn", "totalBranchStoryPoints", "store", "capture", "replayAll", "updateHistory", "verifyAll", "assertEquals", "getValue", "getDoneSum", "assertEquals", "getValue", "getEstimateSum", "assertEquals", "getValue", "getRootSum", "assertEquals", "getValue", "getBacklog", "assertNotNull", "getValue", "getTimestamp", "setId", "setParent", "expect", "andReturn", "get", "expect", "andReturn", "retrieveLatest", "isA", "eq", "expect", "andReturn", "totalLeafDoneStoryPoints", "expect", "andReturn", "totalLeafStoryPoints", "expect", "andReturn", "totalRootStoryPoints", "expect", "andReturn", "totalBranchStoryPoints", "store", "replayAll", "updateHistory", "verifyAll", "assertEquals", "getEstimateSum", "assertEquals", "getRootSum", "assertEquals", "getDoneSum", "expect", "andReturn", "get", "replayAll", "updateHistory", "verifyAll"], "SCS_VariableDeclaration": ["Project", "Capture", "Project", "Iteration", "Capture", "Project", "Iteration", "Product"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport static org.easymock.EasyMock.*;\nimport static org.junit.Assert.*;\n\nimport org.easymock.Capture;\nimport org.easymock.EasyMock;\nimport org.joda.time.DateTime;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport fi.hut.soberit.agilefant.business.impl.BacklogHistoryEntryBusinessImpl;\nimport fi.hut.soberit.agilefant.db.BacklogDAO;\nimport fi.hut.soberit.agilefant.db.BacklogHistoryEntryDAO;\nimport fi.hut.soberit.agilefant.db.StoryHierarchyDAO;\nimport fi.hut.soberit.agilefant.model.BacklogHistoryEntry;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.Product;\nimport fi.hut.soberit.agilefant.model.Project;\n\npublic class BacklogHistoryEntryBusinessTest {\n\n    private BacklogHistoryEntryDAO backlogHistoryEntryDAO;\n    private StoryHierarchyDAO storyHierarchyDAO;\n    private BacklogHistoryEntryBusinessImpl backlogHistoryEntryBusiness;\n    private BacklogDAO backlogDAO;\n\n    private BacklogHistoryEntry oldEntry;\n\n    private BacklogHistoryEntry newEntry;\n\n    @Before\n    public void setUp_dependecies() {\n        storyHierarchyDAO = createStrictMock(StoryHierarchyDAO.class);\n        backlogHistoryEntryDAO = createStrictMock(BacklogHistoryEntryDAO.class);\n        backlogDAO = createStrictMock(BacklogDAO.class);\n\n        backlogHistoryEntryBusiness = new BacklogHistoryEntryBusinessImpl();\n        backlogHistoryEntryBusiness\n                .setBacklogHistoryEntryDAO(backlogHistoryEntryDAO);\n        backlogHistoryEntryBusiness.setStoryHierarchyDAO(storyHierarchyDAO);\n        backlogHistoryEntryBusiness.setBacklogDAO(backlogDAO);\n    }\n\n    @Before\n    public void setUp_data() {\n        oldEntry = new BacklogHistoryEntry();\n        oldEntry.setTimestamp(new DateTime().minusDays(400));\n\n        newEntry = new BacklogHistoryEntry();\n        newEntry.setTimestamp(new DateTime());\n    }\n\n    private void replayAll() {\n        replay(backlogHistoryEntryDAO, storyHierarchyDAO, backlogDAO);\n    }\n\n    private void verifyAll() {\n        verify(backlogHistoryEntryDAO, storyHierarchyDAO, backlogDAO);\n    }\n\n    @Test\n    public void testUpdateHistory_project() {\n        Project project = new Project();\n        project.setId(1);\n\n        expect(backlogDAO.get(1)).andReturn(project);\n        expect(\n                backlogHistoryEntryDAO.retrieveLatest(EasyMock\n                        .isA(DateTime.class), EasyMock.eq(1))).andReturn(\n                oldEntry);\n        expect(storyHierarchyDAO.totalLeafDoneStoryPoints(project)).andReturn(\n                10l);\n        expect(storyHierarchyDAO.totalLeafStoryPoints(project)).andReturn(20l);\n        expect(storyHierarchyDAO.totalRootStoryPoints(project)).andReturn(30l);\n        expect(storyHierarchyDAO.totalBranchStoryPoints(project)).andReturn(30l);\n        Capture<BacklogHistoryEntry> entry = new Capture<BacklogHistoryEntry>();\n        backlogHistoryEntryDAO.store(EasyMock.capture(entry));\n\n        replayAll();\n        backlogHistoryEntryBusiness.updateHistory(1);\n        verifyAll();\n\n        assertEquals(10l, entry.getValue().getDoneSum());\n        assertEquals(20l, entry.getValue().getEstimateSum());\n        assertEquals(30l, entry.getValue().getRootSum());\n        assertEquals(project, entry.getValue().getBacklog());\n        assertNotNull(entry.getValue().getTimestamp());\n    }\n\n    @Test\n    public void testUpdateHistory_iteration() {\n        Project project = new Project();\n        project.setId(2);\n        Iteration iteration = new Iteration();\n        iteration.setParent(project);\n        expect(backlogDAO.get(1)).andReturn(iteration);\n        expect(\n                backlogHistoryEntryDAO.retrieveLatest(EasyMock\n                        .isA(DateTime.class), EasyMock.eq(2))).andReturn(\n                oldEntry);\n        expect(storyHierarchyDAO.totalLeafDoneStoryPoints(project)).andReturn(\n                10l);\n        expect(storyHierarchyDAO.totalLeafStoryPoints(project)).andReturn(20l);\n        expect(storyHierarchyDAO.totalRootStoryPoints(project)).andReturn(30l);\n        expect(storyHierarchyDAO.totalBranchStoryPoints(project)).andReturn(40l);\n        Capture<BacklogHistoryEntry> entry = new Capture<BacklogHistoryEntry>();\n        backlogHistoryEntryDAO.store(EasyMock.capture(entry));\n\n        replayAll();\n        backlogHistoryEntryBusiness.updateHistory(1);\n        verifyAll();\n\n        assertEquals(10l, entry.getValue().getDoneSum());\n        assertEquals(20l, entry.getValue().getEstimateSum());\n        assertEquals(30l, entry.getValue().getRootSum());\n        assertEquals(project, entry.getValue().getBacklog());\n        assertNotNull(entry.getValue().getTimestamp());\n    }\n\n    @Test\n    public void testUpdateHistory_updateLatestEntry() {\n        Project project = new Project();\n        project.setId(2);\n        Iteration iteration = new Iteration();\n        iteration.setParent(project);\n        expect(backlogDAO.get(1)).andReturn(iteration);\n        expect(\n                backlogHistoryEntryDAO.retrieveLatest(EasyMock\n                        .isA(DateTime.class), EasyMock.eq(2))).andReturn(\n                newEntry);\n        expect(storyHierarchyDAO.totalLeafDoneStoryPoints(project)).andReturn(\n                10l);\n        expect(storyHierarchyDAO.totalLeafStoryPoints(project)).andReturn(20l);\n        expect(storyHierarchyDAO.totalRootStoryPoints(project)).andReturn(30l);\n        expect(storyHierarchyDAO.totalBranchStoryPoints(project)).andReturn(40l);\n        backlogHistoryEntryDAO.store(newEntry);\n\n        replayAll();\n        backlogHistoryEntryBusiness.updateHistory(1);\n        verifyAll();\n        assertEquals(20l, newEntry.getEstimateSum());\n        assertEquals(30l, newEntry.getRootSum());\n        assertEquals(10l, newEntry.getDoneSum());\n    }\n\n    @Test\n    public void testUpdateHistory_product() {\n        Product product = new Product();\n        expect(backlogDAO.get(1)).andReturn(product);\n        replayAll();\n        backlogHistoryEntryBusiness.updateHistory(1);\n        verifyAll();\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\DailyWorkBusinessTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["DailyWorkBusinessTest"], "AN": ["testable", "taskDAO", "whatsNextEntryDAO", "rankingBusiness", "taskBusiness", "task1", "task3", "task2", "story", "user", "backlog", "whatsNextEntry_forTask1AndUser", "whatsNextEntry_forTask2AndUser", "transferObjectBusiness", "storyRankDAO", "storyDAO"], "SCS_VariableDeclarator": ["testable", "taskDAO", "whatsNextEntryDAO", "rankingBusiness", "taskBusiness", "task1", "task3", "task2", "story", "user", "backlog", "whatsNextEntry_forTask1AndUser", "whatsNextEntry_forTask2AndUser", "transferObjectBusiness", "storyRankDAO", "storyDAO", "tasks", "story", "stories", "interval", "interval2", "assignedWork", "returned", "intervalValue", "interval2Value", "dwtto1", "dwtto2", "returned", "originalTO", "returnedTO", "entryCapture", "entryCapture2", "delegateCapture", "originalTO", "returnedTO", "dwtto1", "returnedTO"], "MN": ["setUp", "replayAll", "verifyAll", "testGetAssignedWorkFor", "testGetQueuedTasksForUser", "testRankToBottomOnWhatsNext", "testRankToBottom_noEntry", "testRankUnder_addEntry_upperTaskNotNull", "testRemoveFromWhatsNext", "testRankUnderTaskOnWhatsNext_withNullEntry", "testRankUnder_existingEntry_rankToTop", "testRemoveTaskFromWorkQueues", "testRemoveFromWhatsNext_notFound"], "PN": [], "SCS_MemberReference": ["testable", "taskDAO", "taskDAO", "storyDAO", "storyDAO", "whatsNextEntryDAO", "whatsNextEntryDAO", "rankingBusiness", "rankingBusiness", "taskBusiness", "taskBusiness", "transferObjectBusiness", "transferObjectBusiness", "storyRankDAO", "storyRankDAO", "backlog", "user", "task1", "task2", "task3", "story", "whatsNextEntry_forTask1AndUser", "user", "task1", "whatsNextEntry_forTask2AndUser", "user", "task2", "taskDAO", "storyDAO", "whatsNextEntryDAO", "rankingBusiness", "taskBusiness", "transferObjectBusiness", "storyRankDAO", "taskDAO", "storyDAO", "whatsNextEntryDAO", "rankingBusiness", "taskBusiness", "transferObjectBusiness", "storyRankDAO", "task1", "task2", "task3", "story", "tasks", "user", "interval", "stories", "user", "interval2", "assignedWork", "tasks", "stories", "user", "assignedWork", "returned", "intervalValue", "intervalValue", "interval2Value", "whatsNextEntry_forTask1AndUser", "whatsNextEntry_forTask2AndUser", "user", "task1", "task2", "dwtto1", "whatsNextEntry_forTask1AndUser", "dwtto2", "whatsNextEntry_forTask2AndUser", "user", "dwtto1", "dwtto2", "returned", "whatsNextEntry_forTask1AndUser", "user", "task1", "whatsNextEntry_forTask2AndUser", "user", "whatsNextEntry_forTask1AndUser", "whatsNextEntry_forTask2AndUser", "task1", "originalTO", "whatsNextEntry_forTask1AndUser", "user", "task1", "originalTO", "returnedTO", "user", "task1", "user", "task1", "user", "task1", "entryCapture", "task1", "user", "whatsNextEntry_forTask2AndUser", "user", "user", "task2", "entryCapture2", "whatsNextEntry_forTask2AndUser", "delegateCapture", "user", "task1", "originalTO", "user", "task1", "task2", "originalTO", "returnedTO", "whatsNextEntry_forTask1AndUser", "user", "task1", "whatsNextEntry_forTask1AndUser", "user", "task1", "whatsNextEntry_forTask1AndUser", "user", "task1", "task1", "dwtto1", "whatsNextEntry_forTask1AndUser", "user", "task1", "dwtto1", "returnedTO", "task1", "task1", "user", "task1", "user", "task1"], "SCS_ClassReference": ["", "TaskDAO", "testable", "", "StoryDAO", "testable", "", "WhatsNextEntryDAO", "testable", "", "RankingBusiness", "testable", "", "TaskBusiness", "testable", "", "TransferObjectBusiness", "testable", "", "StoryRankDAO", "testable", "backlog", "task1", "task2", "task3", "story", "whatsNextEntry_forTask1AndUser", "whatsNextEntry_forTask1AndUser", "whatsNextEntry_forTask2AndUser", "whatsNextEntry_forTask2AndUser", "", "", "tasks", "Arrays", "stories", "Arrays", "", null, "taskDAO", "EasyMock", "EasyMock", "EasyMock", "EasyMock", "Interval", "", null, "storyDAO", "EasyMock", "EasyMock", "EasyMock", "EasyMock", "Interval", "", null, "transferObjectBusiness", "", null, "storyRankDAO", "EasyMock", "Collection", "", null, "storyRankDAO", "EasyMock", "Collection", "", "testable", "", "", "", "interval", "", "interval2", "interval", "interval2", "", "", "", "intervalValue", "", "intervalValue", "", "intervalValue", null, "", null, "Arrays", "whatsNextEntryDAO", "", null, "transferObjectBusiness", "", null, "transferObjectBusiness", "", "testable", "", "", "Arrays", "", null, "whatsNextEntryDAO", "", null, "whatsNextEntryDAO", "rankingBusiness", "", null, "transferObjectBusiness", "", "testable", "", "", "IllegalArgumentException", "", null, "whatsNextEntryDAO", "", "testable", "", "", null, "whatsNextEntryDAO", "whatsNextEntryDAO", "", "", "WhatsNextEntry", "EasyMock", "taskBusiness", "", null, "whatsNextEntryDAO", "", null, "whatsNextEntryDAO", "rankingBusiness", "", "", "WhatsNextEntry", "EasyMock", "", "rankingBusiness", "", "Rankable", "", "", "", "RankUnderDelegate", "", "", null, "whatsNextEntryDAO", "", null, "transferObjectBusiness", "", "WhatsNextEntry", "", "testable", "", "delegateCapture", "delegateCapture", null, "", "", "entryCapture", "", "entryCapture2", "", "", null, "whatsNextEntryDAO", "whatsNextEntryDAO", "", "testable", "", "IllegalArgumentException", "testable", "", null, "whatsNextEntryDAO", "rankingBusiness", "", "Rankable", "", "", "RankUnderDelegate", "", null, "transferObjectBusiness", "", "testable", "", "", "whatsNextEntryDAO", "", "testable", "", "", null, "whatsNextEntryDAO", "", "testable", ""], "SCS_MethodInvocation": ["createMock", "setTaskDAO", "createMock", "setStoryDAO", "createMock", "setWhatsNextEntryDAO", "createMock", "setRankingBusiness", "createMock", "setTaskBusiness", "createMock", "setTransferObjectBusiness", "createMock", "setStoryRankDAO", "setId", "setId", "setId", "setId", "setId", "setUser", "setTask", "setUser", "setTask", "replay", "verify", "addAll", "asList", "addAll", "asList", "expect", "andReturn", "getAllTasks", "eq", "and", "capture", "isA", "expect", "andReturn", "getAllIterationStoriesByResponsibleAndInterval", "eq", "and", "capture", "isA", "expect", "andReturn", "constructAssignedWorkTO", "expect", "andReturn", "getIterationRanksForStories", "isA", "expect", "andReturn", "getProjectRanksForStories", "isA", "replayAll", "getAssignedWorkFor", "verifyAll", "assertSame", "assertTrue", "hasCaptured", "assertTrue", "hasCaptured", "getValue", "getValue", "assertNotNull", "assertEquals", "assertTrue", "containsNow", "assertEquals", "toDuration", "assertEquals", "getStart", "getMillisOfDay", "expect", "andReturn", "asList", "getWhatsNextEntriesFor", "expect", "andReturn", "constructQueuedDailyWorkTaskTO", "expect", "andReturn", "constructQueuedDailyWorkTaskTO", "replayAll", "getQueuedTasksForUser", "verifyAll", "assertEquals", "asList", "expect", "andReturn", "getWhatsNextEntryFor", "expect", "andReturn", "getLastTaskInRank", "rankToBottom", "expect", "andReturn", "constructQueuedDailyWorkTaskTO", "replayAll", "rankToBottomOnWhatsNext", "verifyAll", "assertSame", "expect", "andReturn", "getWhatsNextEntryFor", "replayAll", "rankToBottomOnWhatsNext", "verifyAll", "expect", "andReturn", "getWhatsNextEntryFor", "store", "and", "isA", "capture", "addResponsible", "expect", "andReturn", "getLastTaskInRank", "expect", "andReturn", "getWhatsNextEntryFor", "rankToBottom", "and", "isA", "capture", "eq", "rankUnder", "isA", "eq", "and", "isA", "capture", "expect", "andReturn", "getTasksWithRankBetween", "expect", "andReturn", "constructQueuedDailyWorkTaskTO", "isA", "replayAll", "rankUnderTaskOnWhatsNext", "assertTrue", "hasCaptured", "getValue", "getWithRankBetween", "verifyAll", "assertTrue", "hasCaptured", "assertTrue", "hasCaptured", "assertSame", "expect", "andReturn", "getWhatsNextEntryFor", "remove", "replayAll", "removeFromWhatsNext", "verifyAll", "rankUnderTaskOnWhatsNext", "expect", "andReturn", "getWhatsNextEntryFor", "rankUnder", "isA", "eq", "isA", "expect", "andReturn", "constructQueuedDailyWorkTaskTO", "replayAll", "rankUnderTaskOnWhatsNext", "verifyAll", "assertSame", "removeAllByTask", "replayAll", "removeTaskFromWorkQueues", "verifyAll", "expect", "andReturn", "getWhatsNextEntryFor", "replayAll", "removeFromWhatsNext", "verifyAll"], "SCS_VariableDeclaration": ["ArrayList", "Story", "ArrayList", "Capture", "Capture", "AssignedWorkTO", "AssignedWorkTO", "Interval", "Interval", "DailyWorkTaskTO", "DailyWorkTaskTO", "Collection", "DailyWorkTaskTO", "DailyWorkTaskTO", "Capture", "Capture", "Capture", "DailyWorkTaskTO", "DailyWorkTaskTO", "DailyWorkTaskTO", "DailyWorkTaskTO"], "CO": ["// race condition during midnight... ;) must contain today!", "// duration of interval is exactly 24 hours", "// and the milliseconds within the day must be 0 ", "// from delegate:", "// should not throw whenever an entry is not found, just be happy."], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport static org.easymock.EasyMock.*;\nimport static org.junit.Assert.*;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\n\nimport org.easymock.Capture;\nimport org.easymock.EasyMock;\nimport org.joda.time.Duration;\nimport org.joda.time.Interval;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport fi.hut.soberit.agilefant.business.impl.DailyWorkBusinessImpl;\nimport fi.hut.soberit.agilefant.db.StoryDAO;\nimport fi.hut.soberit.agilefant.db.StoryRankDAO;\nimport fi.hut.soberit.agilefant.db.TaskDAO;\nimport fi.hut.soberit.agilefant.db.WhatsNextEntryDAO;\nimport fi.hut.soberit.agilefant.model.Product;\nimport fi.hut.soberit.agilefant.model.Rankable;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.StoryRank;\nimport fi.hut.soberit.agilefant.model.Task;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.model.WhatsNextEntry;\nimport fi.hut.soberit.agilefant.transfer.AssignedWorkTO;\nimport fi.hut.soberit.agilefant.transfer.DailyWorkTaskTO;\n\npublic class DailyWorkBusinessTest {\n    private DailyWorkBusinessImpl testable;\n    \n    private TaskDAO taskDAO;\n    private WhatsNextEntryDAO whatsNextEntryDAO;\n\n    private RankingBusiness rankingBusiness;\n    private TaskBusiness taskBusiness;\n\n    private Task task1;\n\n    private Task task3;\n\n    private Task task2;\n\n    private Story story;\n\n    private User user;\n\n    private Product backlog;\n\n    private WhatsNextEntry whatsNextEntry_forTask1AndUser;\n\n    private WhatsNextEntry whatsNextEntry_forTask2AndUser;\n\n    private TransferObjectBusiness transferObjectBusiness;\n    \n    private StoryRankDAO storyRankDAO;\n\n    private StoryDAO storyDAO;\n    \n    @Before\n    public void setUp() {\n        testable = new DailyWorkBusinessImpl();\n        \n        taskDAO = createMock(TaskDAO.class);\n        testable.setTaskDAO(taskDAO);\n        \n        storyDAO = createMock(StoryDAO.class);\n        testable.setStoryDAO(storyDAO);\n\n        whatsNextEntryDAO = createMock(WhatsNextEntryDAO.class);\n        testable.setWhatsNextEntryDAO(whatsNextEntryDAO);\n        \n        rankingBusiness = createMock(RankingBusiness.class);\n        testable.setRankingBusiness(rankingBusiness);\n        \n        taskBusiness = createMock(TaskBusiness.class);\n        testable.setTaskBusiness(taskBusiness);\n        \n        transferObjectBusiness = createMock(TransferObjectBusiness.class);\n        testable.setTransferObjectBusiness(transferObjectBusiness);\n        \n        storyRankDAO = createMock(StoryRankDAO.class);\n        testable.setStoryRankDAO(storyRankDAO);\n\n        backlog = new Product();\n        backlog.setId(5);\n        \n        user = new User();\n        \n        task1 = new Task();\n        task1.setId(1);\n        task2 = new Task();\n        task2.setId(2);\n        task3 = new Task();\n        task3.setId(3);\n        \n        story = new Story();\n        story.setId(4);\n\n        whatsNextEntry_forTask1AndUser = new WhatsNextEntry();\n        whatsNextEntry_forTask1AndUser.setUser(user);\n        whatsNextEntry_forTask1AndUser.setTask(task1);\n\n        whatsNextEntry_forTask2AndUser = new WhatsNextEntry();\n        whatsNextEntry_forTask2AndUser.setUser(user);\n        whatsNextEntry_forTask2AndUser.setTask(task2);\n    }\n\n    private void replayAll() {\n        replay(taskDAO, storyDAO, whatsNextEntryDAO, rankingBusiness, taskBusiness, transferObjectBusiness, storyRankDAO);\n    }\n    \n    private void verifyAll() {\n        verify(taskDAO, storyDAO, whatsNextEntryDAO, rankingBusiness, taskBusiness, transferObjectBusiness, storyRankDAO);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    @Test\n    public void testGetAssignedWorkFor() {\n        ArrayList<Task> tasks = new ArrayList<Task>();\n        tasks.addAll(Arrays.asList(task1, task2, task3));\n        \n        Story story = new Story();\n        ArrayList<Story> stories = new ArrayList<Story>();\n        stories.addAll(Arrays.asList(story));\n\n        Capture<Interval> interval = new Capture<Interval>();\n        Capture<Interval> interval2 = new Capture<Interval>();\n        \n        expect(taskDAO.getAllTasks(EasyMock.eq(user), \n                EasyMock.and(EasyMock.capture(interval), EasyMock.isA(Interval.class)))).andReturn(tasks);\n        expect(storyDAO.getAllIterationStoriesByResponsibleAndInterval(EasyMock.eq(user), \n                EasyMock.and(EasyMock.capture(interval2), EasyMock.isA(Interval.class)))).andReturn(stories);\n        AssignedWorkTO assignedWork = new AssignedWorkTO();\n        \n        expect(transferObjectBusiness.constructAssignedWorkTO(tasks, stories)).andReturn(assignedWork);\n\n        expect(storyRankDAO.getIterationRanksForStories(EasyMock.isA(Collection.class))).andReturn(new ArrayList<StoryRank>());\n        expect(storyRankDAO.getProjectRanksForStories(EasyMock.isA(Collection.class))).andReturn(new ArrayList<StoryRank>());\n        \n        replayAll();\n        AssignedWorkTO returned = testable.getAssignedWorkFor(user);\n        verifyAll();\n        \n        assertSame(assignedWork, returned);\n\n        assertTrue(interval.hasCaptured());\n        assertTrue(interval2.hasCaptured());\n        Interval intervalValue = interval.getValue();\n        Interval interval2Value = interval2.getValue();\n        assertNotNull(intervalValue);\n        assertEquals(intervalValue, interval2Value);\n\n        // race condition during midnight... ;) must contain today!\n        assertTrue(intervalValue.containsNow());\n        \n        // duration of interval is exactly 24 hours\n        assertEquals(new Duration(24*60*60*1000), intervalValue.toDuration());\n\n        // and the milliseconds within the day must be 0 \n        assertEquals(0, intervalValue.getStart().getMillisOfDay());\n    }\n    \n    @Test\n    public void testGetQueuedTasksForUser() {\n        expect(whatsNextEntryDAO.getWhatsNextEntriesFor(user)).andReturn(\n                Arrays.asList(whatsNextEntry_forTask1AndUser, whatsNextEntry_forTask2AndUser));\n\n        DailyWorkTaskTO dwtto1 = new DailyWorkTaskTO(task1);\n        DailyWorkTaskTO dwtto2 = new DailyWorkTaskTO(task2);\n        \n        expect(transferObjectBusiness.constructQueuedDailyWorkTaskTO(whatsNextEntry_forTask1AndUser)).andReturn(dwtto1);\n        expect(transferObjectBusiness.constructQueuedDailyWorkTaskTO(whatsNextEntry_forTask2AndUser)).andReturn(dwtto2);\n        \n        replayAll();\n        \n        Collection<DailyWorkTaskTO> returned = testable.getQueuedTasksForUser(user);\n\n        verifyAll();\n        \n        assertEquals(Arrays.asList(dwtto1, dwtto2), returned);\n    }\n    \n    @Test\n    public void testRankToBottomOnWhatsNext() {\n        expect(whatsNextEntryDAO.getWhatsNextEntryFor(user, task1)).andReturn(whatsNextEntry_forTask1AndUser);\n        expect(whatsNextEntryDAO.getLastTaskInRank(user)).andReturn(whatsNextEntry_forTask2AndUser);\n        rankingBusiness.rankToBottom(whatsNextEntry_forTask1AndUser, whatsNextEntry_forTask2AndUser);\n        \n        DailyWorkTaskTO originalTO = new DailyWorkTaskTO(task1);\n        \n        expect(transferObjectBusiness.constructQueuedDailyWorkTaskTO(whatsNextEntry_forTask1AndUser)).andReturn(\n            originalTO\n        );\n        replayAll();\n        \n        DailyWorkTaskTO returnedTO = testable.rankToBottomOnWhatsNext(user, task1);\n        verifyAll();\n        assertSame(originalTO, returnedTO);\n    }\n    \n    @Test(expected=IllegalArgumentException.class)\n    public void testRankToBottom_noEntry() {\n        expect(whatsNextEntryDAO.getWhatsNextEntryFor(user, task1)).andReturn(null);\n        \n        replayAll();\n\n        testable.rankToBottomOnWhatsNext(user, task1);\n        verifyAll();\n    }\n    \n    @Test\n    public void testRankUnder_addEntry_upperTaskNotNull() {\n        expect(whatsNextEntryDAO.getWhatsNextEntryFor(user, task1)).andReturn(null);\n\n        Capture<WhatsNextEntry> entryCapture    = new Capture<WhatsNextEntry>();\n        Capture<WhatsNextEntry> entryCapture2   = new Capture<WhatsNextEntry>();\n        Capture<RankUnderDelegate> delegateCapture = new Capture<RankUnderDelegate>();\n\n        whatsNextEntryDAO.store(and(isA(WhatsNextEntry.class), EasyMock.capture(entryCapture)));\n        taskBusiness.addResponsible(task1, user);\n        expect(whatsNextEntryDAO.getLastTaskInRank(user)).andReturn(whatsNextEntry_forTask2AndUser);\n        expect(whatsNextEntryDAO.getWhatsNextEntryFor(user, task2)).andReturn(null);\n        \n        rankingBusiness.rankToBottom(and(isA(WhatsNextEntry.class), \n            EasyMock.capture(entryCapture2)), \n            eq(whatsNextEntry_forTask2AndUser)\n        );\n        \n        rankingBusiness.rankUnder(\n            isA(Rankable.class), \n            eq((Rankable)null),\n            and(isA(RankUnderDelegate.class), capture(delegateCapture))\n        );\n        \n        // from delegate:\n        expect(whatsNextEntryDAO.getTasksWithRankBetween(1, 2, user)).andReturn(new ArrayList<WhatsNextEntry>());\n        \n        DailyWorkTaskTO originalTO = new DailyWorkTaskTO(task1);\n        expect(transferObjectBusiness.constructQueuedDailyWorkTaskTO(isA(WhatsNextEntry.class))).andReturn(\n            originalTO\n        );\n\n        replayAll();\n\n        DailyWorkTaskTO returnedTO = testable.rankUnderTaskOnWhatsNext(user, task1, task2);\n\n        assertTrue(delegateCapture.hasCaptured());\n        delegateCapture.getValue().getWithRankBetween(1, 2);\n        verifyAll();\n\n        assertTrue(entryCapture.hasCaptured());\n        assertTrue(entryCapture2.hasCaptured());\n\n        assertSame(originalTO, returnedTO);\n    }\n    \n    @Test\n    public void testRemoveFromWhatsNext() {\n        expect(whatsNextEntryDAO.getWhatsNextEntryFor(user, task1)).andReturn(whatsNextEntry_forTask1AndUser);\n        whatsNextEntryDAO.remove(whatsNextEntry_forTask1AndUser);\n\n        replayAll();\n        testable.removeFromWhatsNext(user, task1);\n        \n        verifyAll();\n    }\n    \n    @Test(expected=IllegalArgumentException.class)\n    public void testRankUnderTaskOnWhatsNext_withNullEntry() {\n        testable.rankUnderTaskOnWhatsNext(null, new WhatsNextEntry());\n    }\n    \n    @Test\n    public void testRankUnder_existingEntry_rankToTop() {\n        expect(whatsNextEntryDAO.getWhatsNextEntryFor(user, task1)).andReturn(whatsNextEntry_forTask1AndUser);\n        \n        rankingBusiness.rankUnder(\n            isA(Rankable.class), \n            eq((Rankable)null),\n            isA(RankUnderDelegate.class)\n        );\n\n        DailyWorkTaskTO dwtto1 = new DailyWorkTaskTO(task1);\n        expect(transferObjectBusiness.constructQueuedDailyWorkTaskTO(whatsNextEntry_forTask1AndUser)).andReturn(dwtto1);\n        replayAll();\n\n        DailyWorkTaskTO returnedTO = testable.rankUnderTaskOnWhatsNext(user, task1, null);\n\n        verifyAll();\n        assertSame(dwtto1, returnedTO);\n    }\n\n    @Test\n    public void testRemoveTaskFromWorkQueues() {\n        whatsNextEntryDAO.removeAllByTask(task1);\n        \n        replayAll();\n        testable.removeTaskFromWorkQueues(task1);\n        verifyAll();\n    }\n    \n    @Test\n    public void testRemoveFromWhatsNext_notFound() {\n        expect(whatsNextEntryDAO.getWhatsNextEntryFor(user, task1)).andReturn(null);\n        replayAll();\n        \n        // should not throw whenever an entry is not found, just be happy.\n        testable.removeFromWhatsNext(user, task1);\n        verifyAll();\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\HolidayBusinessTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["HolidayBusinessTest"], "SCS_ClassReference": ["SpringJUnit4ClassRunner", "MockContextLoader", "", null, "holidayDAO", "", "", "holidayBusiness", ""], "AN": ["holidayBusiness", "holidayDAO"], "SCS_VariableDeclarator": ["holidayBusiness", "holidayDAO", "user", "holidays"], "MN": ["testRetrieveFutureHolidaysByUser"], "PN": [], "SCS_VariableDeclaration": ["User", "List"], "SCS_MethodInvocation": ["expect", "andReturn", "retrieveFutureHolidaysByUser", "replayAll", "assertEquals", "retrieveFutureHolidaysByUser", "verifyAll"], "SCS_MemberReference": ["holidays", "user", "holidays", "user"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.test.annotation.DirtiesContext;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\nimport static org.easymock.EasyMock.*;\nimport static org.junit.Assert.*;\n\nimport fi.hut.soberit.agilefant.business.impl.HolidayBusinessImpl;\nimport fi.hut.soberit.agilefant.db.HolidayDAO;\nimport fi.hut.soberit.agilefant.model.Holiday;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.test.Mock;\nimport fi.hut.soberit.agilefant.test.MockContextLoader;\nimport fi.hut.soberit.agilefant.test.MockedTestCase;\nimport fi.hut.soberit.agilefant.test.TestedBean;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(loader = MockContextLoader.class)\npublic class HolidayBusinessTest extends MockedTestCase {\n\n    @TestedBean\n    private HolidayBusinessImpl holidayBusiness;\n    \n    @Mock(strict=true)\n    private HolidayDAO holidayDAO;\n    \n    @Test\n    @DirtiesContext\n    public void testRetrieveFutureHolidaysByUser() {\n        User user = new User();\n        List<Holiday> holidays = new ArrayList<Holiday>();\n        \n        expect(holidayDAO.retrieveFutureHolidaysByUser(user)).andReturn(holidays);\n        \n        replayAll();\n        assertEquals(holidays, holidayBusiness.retrieveFutureHolidaysByUser(user));\n        verifyAll();\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\HourEntryBusinessTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["HourEntryBusinessTest"], "AN": ["hourEntryBusiness", "backlogHourEntryDAO", "hourEntryDAO", "storyBusiness", "userBusiness", "taskBusiness", "backlogBusiness", "targetUsers", "targetUserIds", "serverTimeZone"], "SCS_VariableDeclarator": ["hourEntryBusiness", "backlogHourEntryDAO", "hourEntryDAO", "storyBusiness", "userBusiness", "taskBusiness", "backlogBusiness", "targetUsers", "targetUserIds", "serverTimeZone", "iteration", "start", "end", "user", "start", "end", "noEntries", "entry", "date", "start", "end", "entries", "zone", "userstart", "userend", "start", "end", "zone", "start", "end", "entries", "usrHourTimeZone", "usrMinuteTimeZone", "zone", "UserStart", "UserEnd", "res", "entries", "start", "end", "zone", "userstart", "userend", "res", "entries", "start", "end", "usrHourTimeZone", "usrMinuteTimeZone", "zone", "userstart", "userend", "res", "start", "end", "zone", "effortEntry", "parent", "storedEntry", "actual", "effortEntry", "effortEntry", "parent", "effortEntry", "parent", "storedEntry", "actual", "effortEntry", "effortEntry", "parent", "effortEntry", "parent", "storedEntry", "actual", "effortEntry", "effortEntry", "parent", "hourEntries", "hourEntries", "hourEntries", "hourEntries", "hourEntries", "hourEntries", "hourEntries", "hourEntry1", "hourEntry2", "backlog", "hourEntries", "hourEntry1", "hourEntry2", "newHourEntry1", "newHourEntry2", "backlog", "hourEntries", "user", "now", "hourEntry1", "newHourEntry1"], "SCS_MemberReference": ["UTC", "hourEntryBusiness", "hourEntryDAO", "backlogHourEntryDAO", "storyBusiness", "storyBusiness", "taskBusiness", "taskBusiness", "userBusiness", "userBusiness", "backlogBusiness", "backlogBusiness", "hourEntryDAO", "backlogHourEntryDAO", "targetUsers", "targetUserIds", "hourEntryDAO", "backlogHourEntryDAO", "storyBusiness", "taskBusiness", "userBusiness", "backlogBusiness", "hourEntryDAO", "backlogHourEntryDAO", "storyBusiness", "taskBusiness", "userBusiness", "backlogBusiness", "hourEntryDAO", "iteration", "hourEntryDAO", "user", "start", "end", "start", "end", "hourEntryDAO", "hourEntryBusiness", "start", "end", "hourEntryBusiness", "user", "start", "end", "hourEntryDAO", "noEntries", "start", "end", "hourEntryDAO", "noEntries", "start", "end", "hourEntryDAO", "year", "month", "day", "effort", "date", "entry", "entries", "userstart", "userend", "hourEntryDAO", "UTC", "hourEntryDAO", "start", "end", "start", "end", "hourEntryDAO", "UTC", "hourEntryDAO", "usrHourTimeZone", "usrMinuteTimeZone", "entries", "UserStart", "UserEnd", "hourEntryDAO", "start", "end", "usrHourTimeZone", "usrMinuteTimeZone", "UTC", "hourEntryDAO", "entries", "userstart", "userend", "hourEntryDAO", "start", "end", "UTC", "hourEntryDAO", "usrHourTimeZone", "usrMinuteTimeZone", "entries", "userstart", "userend", "hourEntryDAO", "start", "end", "usrHourTimeZone", "usrMinuteTimeZone", "UTC", "hourEntryDAO", "hourEntryDAO", "UTC", "hourEntryDAO", "parent", "targetUsers", "targetUserIds", "storedEntry", "effortEntry", "targetUserIds", "parent", "effortEntry", "actual", "effortEntry", "targetUserIds", "parent", "targetUserIds", "effortEntry", "targetUserIds", "parent", "targetUsers", "targetUserIds", "storedEntry", "effortEntry", "targetUserIds", "parent", "effortEntry", "actual", "effortEntry", "targetUserIds", "parent", "targetUserIds", "effortEntry", "targetUserIds", "parent", "targetUsers", "targetUserIds", "storedEntry", "effortEntry", "targetUserIds", "parent", "effortEntry", "actual", "effortEntry", "targetUserIds", "parent", "targetUserIds", "effortEntry", "targetUserIds", "hourEntries", "hourEntries", "hourEntries", "ENTRY_LIMIT", "hourEntries", "hourEntries", "hourEntries", "hourEntries", "ENTRY_LIMIT", "hourEntries", "hourEntries", "hourEntries", "hourEntries", "ENTRY_LIMIT", "hourEntries", "hourEntry1", "hourEntry2", "hourEntry1", "hourEntry2", "hourEntries", "hourEntry1", "hourEntry2", "hourEntry1", "hourEntry2", "newHourEntry1", "newHourEntry2", "hourEntries", "backlog", "backlog", "backlog", "now", "user", "hourEntry1", "hourEntry1", "newHourEntry1", "hourEntries", "backlog", "now", "user"], "MN": ["compareHe", "setUp_dependencies", "setUp_data", "replayAll", "verifyAll", "testCalculateSumOfBacklogsHourEntries", "testCalculateSumOfBacklogsHourEntries_nullBacklog", "testCalculateSumByUserAndTimeInterval", "testGetEntriesByUserAndTimeInterval", "createEntry", "testGetDailySpentEffortByWeek", "calculateWeekSum", "testGetDailySpentEffortByInterval_noData", "testGetDailySpentEffortByInterval_yearChanges", "testGetDailySpentEffortByInterval", "testGetEntriesByUserAndDay", "testLogStoryEffort", "testLogStoryEffort_invalidStory", "testLogStoryEffort_invalidUser", "testLogTaskEffort", "testLogTaskEffort_invalidStory", "testLogTaskEffort_invalidUser", "testLogBacklogEffort", "testLogBacklogEffort_invalidStory", "testLogBacklogEffort_invalidUser", "testRetrieveBacklogHourEntries", "testRetrieveBacklogHourEntries_withLimit", "testRetrieveTaskHourEntries", "testRetrieveTaskHourEntries_withLimit", "testRetrieveStoryHourEntries", "testRetrieveStoryHourEntries_withLimit", "testDeleteAll", "testMoveToBacklog", "testMoveToBacklog_checkFields"], "PN": ["he1", "he2", "year", "month", "day", "effort"], "SCS_ClassReference": ["", "he1", "he2", "", "he1", "he2", "", "he1", "he2", "", "HourEntryDAO", "", "BacklogHourEntryDAO", "", "StoryBusiness", "hourEntryBusiness", "", "TaskBusiness", "hourEntryBusiness", "", "UserBusiness", "hourEntryBusiness", "", "BacklogBusiness", "hourEntryBusiness", "hourEntryBusiness", "hourEntryBusiness", "Arrays", "Arrays", "", "", "iteration", "", null, "hourEntryDAO", "", "", "hourEntryBusiness", "", "NullPointerException", "hourEntryBusiness", "start", "user", "", null, "hourEntryDAO", "", null, "hourEntryDAO", "", "", null, "", null, "", "start", "Collections", "", null, "hourEntryDAO", "", "", "hourEntryBusiness", "", "entry", "entry", "Collections", "DateTimeZone", "start", null, "serverTimeZone", "zone", "end", null, "serverTimeZone", "zone", "", null, "hourEntryDAO", "", "", "hourEntryBusiness", null, "start", "", "DateTimeZone", "start", null, "serverTimeZone", "zone", "end", null, "serverTimeZone", "zone", "", null, "hourEntryDAO", "", "", "hourEntryBusiness", "start", null, "", "DateTimeZone", "start", null, "serverTimeZone", "zone", "end", null, "serverTimeZone", "zone", "", null, "hourEntryDAO", "", "hourEntryBusiness", "", "res", "", "res", null, "", "res", null, "", "res", null, "", "res", null, "", "res", null, "", "res", null, "", "res", null, "", "entries", "", "entries", "", "entries", "", "entries", "", "entries", "", "entries", "", "entries", "", "DateTimeZone", "start", null, "serverTimeZone", "zone", "end", null, "serverTimeZone", "zone", "", null, "hourEntryDAO", "", "hourEntryBusiness", "", "res", "", "res", null, "", "res", null, "", "res", null, "", "res", null, "", "res", null, "", "res", null, "", "res", null, "", "res", null, "", "entries", "", "entries", "", "entries", "", "entries", "", "entries", "", "entries", "", "entries", "", "DateTimeZone", "start", null, "serverTimeZone", "zone", "end", null, "serverTimeZone", "zone", "", null, "hourEntryDAO", "", "hourEntryBusiness", "", "res", "", "res", null, "", "res", null, "", "res", null, "", "res", null, "", "DateTimeZone", "", null, "hourEntryDAO", "start", null, "serverTimeZone", "zone", "end", null, "serverTimeZone", "zone", "", "", "hourEntryBusiness", "start", "", "effortEntry", "effortEntry", "effortEntry", "", null, "storyBusiness", "", null, "userBusiness", "", null, "hourEntryDAO", "EasyMock", "", "hourEntryBusiness", "", "storedEntry", "", "actual", "", "ObjectNotFoundException", "", null, "storyBusiness", "", "hourEntryBusiness", "", "ObjectNotFoundException", "", null, "storyBusiness", "", null, "userBusiness", "", "hourEntryBusiness", "", "effortEntry", "effortEntry", "effortEntry", "", null, "taskBusiness", "", null, "userBusiness", "", null, "hourEntryDAO", "EasyMock", "", "hourEntryBusiness", "", "storedEntry", "", "actual", "", "ObjectNotFoundException", "", null, "taskBusiness", "", "hourEntryBusiness", "", "ObjectNotFoundException", "", null, "taskBusiness", "", null, "userBusiness", "", "hourEntryBusiness", "", "effortEntry", "effortEntry", "effortEntry", "", null, "backlogBusiness", "", null, "userBusiness", "", null, "hourEntryDAO", "EasyMock", "", "hourEntryBusiness", "", "storedEntry", "", "actual", "", "ObjectNotFoundException", "", null, "backlogBusiness", "", "hourEntryBusiness", "", "ObjectNotFoundException", "", null, "backlogBusiness", "", null, "userBusiness", "", "hourEntryBusiness", "", "", null, "hourEntryDAO", "", "", "hourEntryBusiness", "", "", null, "hourEntryDAO", "", "", "hourEntryBusiness", "", "", null, "hourEntryDAO", "", "", "hourEntryBusiness", "", "", null, "hourEntryDAO", "", "", "hourEntryBusiness", "", "", null, "hourEntryDAO", "", "", "hourEntryBusiness", "", "", null, "hourEntryDAO", "", "", "hourEntryBusiness", "", "hourEntries", "hourEntries", "hourEntryDAO", "hourEntryDAO", "", "hourEntryBusiness", "", "hourEntries", "hourEntries", "hourEntryDAO", "hourEntryDAO", "hourEntryDAO", "EasyMock", "hourEntryDAO", "EasyMock", "", "hourEntryBusiness", "", "newHourEntry1", null, "", "newHourEntry2", null, "", "hourEntry1", "hourEntry1", "hourEntry1", "hourEntry1", "hourEntries", "hourEntryDAO", "hourEntryDAO", "EasyMock", "", "hourEntryBusiness", "", "newHourEntry1", null, "", "newHourEntry1", null, "", "newHourEntry1", null, "", "newHourEntry1", null, ""], "SCS_MethodInvocation": ["assertEquals", "getDate", "getDate", "assertEquals", "getDescription", "getDescription", "assertEquals", "getMinutesSpent", "getMinutesSpent", "createMock", "createMock", "createMock", "setStoryBusiness", "createMock", "setTaskBusiness", "createMock", "setUserBusiness", "createMock", "setBacklogBusiness", "setHourEntryDAO", "setBacklogHourEntryDAO", "asList", "asList", "replay", "verify", "setId", "expect", "andReturn", "calculateIterationHourEntriesSum", "replay", "assertEquals", "calculateSumOfIterationsHourEntries", "verify", "calculateSumOfIterationsHourEntries", "plusDays", "setId", "expect", "andReturn", "calculateSumByUserAndTimeInterval", "expect", "andReturn", "calculateSumByUserAndTimeInterval", "replay", "assertEquals", "calculateSumByUserAndTimeInterval", "assertEquals", "calculateSumByUserAndTimeInterval", "verify", "plusDays", "emptyList", "expect", "andReturn", "getHourEntriesByFilter", "replay", "assertEquals", "getEntriesByUserAndTimeInterval", "verify", "setMinutesSpent", "setDate", "emptyList", "forOffsetHoursMinutes", "minusMillis", "plusMillis", "getOffset", "getOffset", "minusMillis", "plusMillis", "getOffset", "getOffset", "expect", "andReturn", "getHourEntriesByFilter", "replay", "assertEquals", "getDailySpentEffortByWeek", "size", "toLocalDate", "verify", "forOffsetHoursMinutes", "minusMillis", "plusMillis", "getOffset", "getOffset", "minusMillis", "plusMillis", "getOffset", "getOffset", "expect", "andReturn", "calculateSumByUserAndTimeInterval", "replay", "assertEquals", "calculateWeekSum", "plusDays", "toLocalDate", "verify", "forOffsetHoursMinutes", "minusMillis", "plusMillis", "getOffset", "getOffset", "minusMillis", "plusMillis", "getOffset", "getOffset", "expect", "andReturn", "getHourEntriesByFilter", "replay", "getDailySpentEffortByInterval", "assertEquals", "size", "assertEquals", "get", "getSpentEffort", "assertEquals", "get", "getSpentEffort", "assertEquals", "get", "getSpentEffort", "assertEquals", "get", "getSpentEffort", "assertEquals", "get", "getSpentEffort", "assertEquals", "get", "getSpentEffort", "assertEquals", "get", "getSpentEffort", "verify", "add", "createEntry", "add", "createEntry", "add", "createEntry", "add", "createEntry", "add", "createEntry", "add", "createEntry", "add", "createEntry", "forOffsetHoursMinutes", "minusMillis", "plusMillis", "getOffset", "getOffset", "minusMillis", "plusMillis", "getOffset", "getOffset", "expect", "andReturn", "getHourEntriesByFilter", "replay", "getDailySpentEffortByInterval", "assertEquals", "size", "assertEquals", "get", "getSpentEffort", "assertEquals", "get", "getSpentEffort", "assertEquals", "get", "getSpentEffort", "assertEquals", "get", "getSpentEffort", "assertEquals", "get", "getSpentEffort", "assertEquals", "get", "getSpentEffort", "assertEquals", "get", "getSpentEffort", "assertEquals", "get", "getSpentEffort", "verify", "add", "createEntry", "add", "createEntry", "add", "createEntry", "add", "createEntry", "add", "createEntry", "add", "createEntry", "add", "createEntry", "forOffsetHoursMinutes", "minusMillis", "plusMillis", "getOffset", "getOffset", "minusMillis", "plusMillis", "getOffset", "getOffset", "expect", "andReturn", "getHourEntriesByFilter", "replay", "getDailySpentEffortByInterval", "assertEquals", "size", "assertEquals", "get", "getSpentEffort", "assertEquals", "get", "getSpentEffort", "assertEquals", "get", "getSpentEffort", "assertEquals", "get", "getSpentEffort", "verify", "forOffsetHoursMinutes", "expect", "andReturn", "getHourEntriesByFilter", "minusMillis", "plusMillis", "getOffset", "getOffset", "minusMillis", "plusMillis", "getOffset", "getOffset", "replay", "assertEquals", "getEntriesByUserAndDay", "toLocalDate", "verify", "setDate", "setDescription", "setMinutesSpent", "expect", "andReturn", "retrieve", "expect", "andReturn", "retrieveMultiple", "expect", "andReturn", "create", "capture", "replayAll", "logStoryEffort", "verifyAll", "getValue", "assertEquals", "getStory", "compareHe", "expect", "andThrow", "retrieve", "replayAll", "logStoryEffort", "verifyAll", "expect", "andReturn", "retrieve", "expect", "andThrow", "retrieveMultiple", "replayAll", "logStoryEffort", "verifyAll", "setDate", "setDescription", "setMinutesSpent", "expect", "andReturn", "retrieve", "expect", "andReturn", "retrieveMultiple", "expect", "andReturn", "create", "capture", "replayAll", "logTaskEffort", "verifyAll", "getValue", "assertEquals", "getTask", "compareHe", "expect", "andThrow", "retrieve", "replayAll", "logTaskEffort", "verifyAll", "expect", "andReturn", "retrieve", "expect", "andThrow", "retrieveMultiple", "replayAll", "logTaskEffort", "verifyAll", "setDate", "setDescription", "setMinutesSpent", "expect", "andReturn", "retrieve", "expect", "andReturn", "retrieveMultiple", "expect", "andReturn", "create", "capture", "replayAll", "logBacklogEffort", "verifyAll", "getValue", "assertEquals", "getBacklog", "compareHe", "expect", "andThrow", "retrieve", "replayAll", "logBacklogEffort", "verifyAll", "expect", "andReturn", "retrieve", "expect", "andThrow", "retrieveMultiple", "replayAll", "logBacklogEffort", "verifyAll", "expect", "andReturn", "getBacklogHourEntries", "replayAll", "assertSame", "retrieveBacklogHourEntries", "verifyAll", "expect", "andReturn", "getBacklogHourEntries", "replayAll", "assertSame", "retrieveBacklogHourEntries", "verifyAll", "expect", "andReturn", "getTaskHourEntries", "replayAll", "assertSame", "retrieveTaskHourEntries", "verifyAll", "expect", "andReturn", "getTaskHourEntries", "replayAll", "assertSame", "retrieveTaskHourEntries", "verifyAll", "expect", "andReturn", "getStoryHourEntries", "replayAll", "assertSame", "retrieveStoryHourEntries", "verifyAll", "expect", "andReturn", "getStoryHourEntries", "replayAll", "assertSame", "retrieveStoryHourEntries", "verifyAll", "add", "add", "remove", "remove", "replayAll", "deleteAll", "verifyAll", "add", "add", "remove", "remove", "store", "capture", "store", "capture", "replayAll", "moveToBacklog", "assertSame", "getValue", "getBacklog", "assertSame", "getValue", "getBacklog", "verifyAll", "setMinutesSpent", "setDate", "setDescription", "setUser", "add", "remove", "store", "capture", "replayAll", "moveToBacklog", "assertEquals", "getValue", "getMinutesSpent", "assertEquals", "getValue", "getDate", "assertEquals", "getValue", "getDescription", "assertSame", "getValue", "getUser", "verifyAll"], "SCS_VariableDeclaration": ["Iteration", "DateTime", "DateTime", "User", "DateTime", "DateTime", "List", "HourEntry", "DateTime", "DateTime", "DateTime", "List", "DateTimeZone", "DateTime", "DateTime", "DateTime", "DateTime", "DateTimeZone", "DateTime", "DateTime", "List", "int", "int", "DateTimeZone", "DateTime", "DateTime", "List", "List", "DateTime", "DateTime", "DateTimeZone", "DateTime", "DateTime", "List", "List", "DateTime", "DateTime", "int", "int", "DateTimeZone", "DateTime", "DateTime", "List", "DateTime", "DateTime", "DateTimeZone", "HourEntry", "Story", "Capture", "StoryHourEntry", "HourEntry", "HourEntry", "Story", "HourEntry", "Task", "Capture", "TaskHourEntry", "HourEntry", "HourEntry", "Task", "HourEntry", "Iteration", "Capture", "BacklogHourEntry", "HourEntry", "HourEntry", "Iteration", "List", "List", "List", "List", "List", "List", "List", "HourEntry", "HourEntry", "Iteration", "List", "HourEntry", "HourEntry", "Capture", "Capture", "Iteration", "List", "User", "DateTime", "HourEntry", "Capture"], "CO": ["// Since the start time and end time need to be updated to the browser time", "// start time and end time should change"], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport static org.easymock.EasyMock.*;\nimport static org.junit.Assert.*;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport org.easymock.Capture;\nimport org.easymock.classextension.EasyMock;\nimport org.joda.time.DateTime;\nimport org.joda.time.DateTimeZone;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport fi.hut.soberit.agilefant.business.impl.HourEntryBusinessImpl;\nimport fi.hut.soberit.agilefant.db.BacklogHourEntryDAO;\nimport fi.hut.soberit.agilefant.db.HourEntryDAO;\nimport fi.hut.soberit.agilefant.exception.ObjectNotFoundException;\nimport fi.hut.soberit.agilefant.model.BacklogHourEntry;\nimport fi.hut.soberit.agilefant.model.HourEntry;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.StoryHourEntry;\nimport fi.hut.soberit.agilefant.model.Task;\nimport fi.hut.soberit.agilefant.model.TaskHourEntry;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.transfer.DailySpentEffort;\n\n\n\npublic class HourEntryBusinessTest {\n\n    private HourEntryBusinessImpl hourEntryBusiness;\n    private BacklogHourEntryDAO backlogHourEntryDAO;\n    private HourEntryDAO hourEntryDAO;\n    private StoryBusiness storyBusiness;\n    private UserBusiness userBusiness;\n    private TaskBusiness taskBusiness;\n    private BacklogBusiness backlogBusiness;\n    \n    private Collection<User> targetUsers;\n    private Set<Integer> targetUserIds;\n    \n    DateTimeZone serverTimeZone = DateTimeZone.UTC;\n    \n    private void compareHe(HourEntry he1, HourEntry he2) {\n\n        assertEquals(he1.getDate(), he2.getDate());\n        assertEquals(he1.getDescription(), he2.getDescription());\n        assertEquals(he1.getMinutesSpent(), he2.getMinutesSpent());\n    }\n    \n    @Before\n    public void setUp_dependencies() {\n        hourEntryBusiness = new HourEntryBusinessImpl();\n        hourEntryDAO = createMock(HourEntryDAO.class);\n        backlogHourEntryDAO = createMock(BacklogHourEntryDAO.class);\n        \n        storyBusiness = createMock(StoryBusiness.class);\n        hourEntryBusiness.setStoryBusiness(storyBusiness);\n        \n        taskBusiness = createMock(TaskBusiness.class);\n        hourEntryBusiness.setTaskBusiness(taskBusiness);\n        \n        userBusiness = createMock(UserBusiness.class);\n        hourEntryBusiness.setUserBusiness(userBusiness);\n        \n        backlogBusiness = createMock(BacklogBusiness.class);\n        hourEntryBusiness.setBacklogBusiness(backlogBusiness);\n        \n        hourEntryBusiness.setHourEntryDAO(hourEntryDAO);\n        hourEntryBusiness.setBacklogHourEntryDAO(backlogHourEntryDAO);\n    }\n    \n    @Before\n    public void setUp_data() {\n        targetUsers = Arrays.asList(new User());\n        targetUserIds = new HashSet<Integer>(Arrays.asList(1));\n    }\n    \n    private void replayAll() {\n        replay(hourEntryDAO, backlogHourEntryDAO, storyBusiness, taskBusiness, userBusiness, backlogBusiness);\n    }\n    \n    private void verifyAll() {\n        verify(hourEntryDAO, backlogHourEntryDAO, storyBusiness, taskBusiness, userBusiness, backlogBusiness);\n    }\n    \n    @Test\n    public void testCalculateSumOfBacklogsHourEntries() {\n        Iteration iteration = new Iteration();\n        iteration.setId(123);\n        expect(hourEntryDAO.calculateIterationHourEntriesSum(123))\n            .andReturn(22332L);\n        replay(hourEntryDAO);\n        \n        assertEquals(22332L, hourEntryBusiness.calculateSumOfIterationsHourEntries(iteration));\n        \n        verify(hourEntryDAO);\n    }\n    \n    @Test(expected=NullPointerException.class)\n    public void testCalculateSumOfBacklogsHourEntries_nullBacklog() {\n        hourEntryBusiness.calculateSumOfIterationsHourEntries(null);\n    }\n    \n    @Test\n    public void testCalculateSumByUserAndTimeInterval() {\n        DateTime start = new DateTime();\n        DateTime end = start.plusDays(7);\n        User user = new User();\n        user.setId(11);\n        \n        expect(hourEntryDAO.calculateSumByUserAndTimeInterval(user, start, end)).andReturn(400L);\n        expect(hourEntryDAO.calculateSumByUserAndTimeInterval(11, start, end)).andReturn(400L);\n        \n        replay(hourEntryDAO);\n        assertEquals(400L, this.hourEntryBusiness.calculateSumByUserAndTimeInterval(11, start, end));\n        assertEquals(400L, this.hourEntryBusiness.calculateSumByUserAndTimeInterval(user, start, end));\n        verify(hourEntryDAO);\n    }\n    \n    @Test\n    public void testGetEntriesByUserAndTimeInterval() {\n        DateTime start = new DateTime();\n        DateTime end = start.plusDays(7);\n        List<HourEntry> noEntries = Collections.emptyList();\n        expect(hourEntryDAO.getHourEntriesByFilter(start, end, 11)).andReturn(noEntries);\n        replay(hourEntryDAO);\n        assertEquals(noEntries, hourEntryBusiness.getEntriesByUserAndTimeInterval(11, start, end));\n        verify(hourEntryDAO);\n    }\n    \n    private static HourEntry createEntry(int year, int month, int day, long effort) {\n        HourEntry entry = new HourEntry();\n        DateTime date = new DateTime(year, month, day, 0,0,0,0);\n        entry.setMinutesSpent(effort);\n        entry.setDate(date);\n        return entry;\n    }\n    \n    @Test\n    public void testGetDailySpentEffortByWeek() {\n        DateTime start = new DateTime(2009,6,1,0,0,1,0);\n        DateTime end   = new DateTime(2009,6,7,23,59,59,0);\n        List<HourEntry> entries = Collections.emptyList();\n\n        DateTimeZone zone = DateTimeZone.forOffsetHoursMinutes(1, 0);\n        DateTime userstart = start.minusMillis(zone.getOffset(0)).plusMillis(serverTimeZone.getOffset(0));\n        DateTime userend   = end.minusMillis(zone.getOffset(0)).plusMillis(serverTimeZone.getOffset(0));\n\n        expect(hourEntryDAO.getHourEntriesByFilter(userstart, userend, 0)).andReturn(entries);\n\n        replay(hourEntryDAO);\n        assertEquals(7, hourEntryBusiness.getDailySpentEffortByWeek(start.toLocalDate(), 0, 1, 0, DateTimeZone.UTC).size());\n        verify(hourEntryDAO);\n    }\n    \n    @Test\n    public void calculateWeekSum() {\n        DateTime start = new DateTime(2009,6,1,0,0,1,0);\n        DateTime end = new DateTime(2009,6,7,23,59,59,0);\n        DateTimeZone zone = DateTimeZone.forOffsetHoursMinutes(5, 0);\n        start = start.minusMillis(zone.getOffset(0)).plusMillis(serverTimeZone.getOffset(0));\n        end = end.minusMillis(zone.getOffset(0)).plusMillis(serverTimeZone.getOffset(0));\n        \n        expect(hourEntryDAO.calculateSumByUserAndTimeInterval(0, start, end)).andReturn(0L);\n\n        replay(hourEntryDAO);\n        assertEquals(0L, hourEntryBusiness.calculateWeekSum(start.plusDays(3).toLocalDate(), 0,5,0, DateTimeZone.UTC), 0);\n        verify(hourEntryDAO);\n    }\n    \n    @Test\n    public void testGetDailySpentEffortByInterval_noData() {\n        DateTime start = new DateTime(2009,6,1,0,0,0,0);\n        DateTime end = new DateTime(2009,6,7,0,0,0,0);\n        \n        List<HourEntry> entries = new ArrayList<HourEntry>();\n\n        // Since the start time and end time need to be updated to the browser time\n        // start time and end time should change\n        int usrHourTimeZone   = 5;\n        int usrMinuteTimeZone = 0;\n        DateTimeZone zone = DateTimeZone.forOffsetHoursMinutes(usrHourTimeZone, usrMinuteTimeZone);\n        DateTime UserStart = start.minusMillis(zone.getOffset(0)).plusMillis(serverTimeZone.getOffset(0));\n        DateTime UserEnd   = end.minusMillis(zone.getOffset(0)).plusMillis(serverTimeZone.getOffset(0));\n        \n        expect(hourEntryDAO.getHourEntriesByFilter(UserStart, UserEnd, 0)).andReturn(entries);\n\n        replay(hourEntryDAO);\n               \n        List<DailySpentEffort> res = hourEntryBusiness.getDailySpentEffortByInterval(start, end, 0,usrHourTimeZone, usrMinuteTimeZone, DateTimeZone.UTC);\n        assertEquals(7, res.size());\n        assertEquals(null, res.get(0).getSpentEffort());\n        assertEquals(null, res.get(1).getSpentEffort());\n        assertEquals(null, res.get(2).getSpentEffort());\n        assertEquals(null, res.get(3).getSpentEffort());\n        assertEquals(null, res.get(4).getSpentEffort());\n        assertEquals(null, res.get(5).getSpentEffort());\n        assertEquals(null, res.get(6).getSpentEffort());\n        \n        verify(hourEntryDAO);\n    }\n    \n    @Test\n    public void testGetDailySpentEffortByInterval_yearChanges() {\n        List<HourEntry> entries = new ArrayList<HourEntry>();\n        entries.add(createEntry(2008, 1, 28, 100));\n        entries.add(createEntry(2008, 12, 28, 900));\n        entries.add(createEntry(2008, 12, 28, 1000));\n        entries.add(createEntry(2008, 12, 29, 4000));\n        entries.add(createEntry(2009, 1, 1, 50000));\n        entries.add(createEntry(2009, 1, 2, 6000000));\n        entries.add(createEntry(2009, 7, 28, 70000000));\n        DateTime start = new DateTime(2008,12,27,0,0,0,0);\n        DateTime end = new DateTime(2009,1,3,0,0,0,0);\n        DateTimeZone zone = DateTimeZone.forOffsetHoursMinutes(5, 0);\n        DateTime userstart = start.minusMillis(zone.getOffset(0)).plusMillis(serverTimeZone.getOffset(0));\n        DateTime userend   = end.minusMillis(zone.getOffset(0)).plusMillis(serverTimeZone.getOffset(0));\n        expect(hourEntryDAO.getHourEntriesByFilter(userstart, userend, 0)).andReturn(entries);\n        replay(hourEntryDAO);\n        List<DailySpentEffort> res = hourEntryBusiness.getDailySpentEffortByInterval(start, end, 0, 5, 0, DateTimeZone.UTC);\n        assertEquals(8, res.size());\n        assertEquals(null, res.get(0).getSpentEffort());\n        assertEquals(1900L, (long)res.get(1).getSpentEffort());\n        assertEquals(4000L, (long)res.get(2).getSpentEffort());\n        assertEquals(null, res.get(3).getSpentEffort());\n        assertEquals(null, res.get(4).getSpentEffort());\n        assertEquals(50000L, (long)res.get(5).getSpentEffort());\n        assertEquals(6000000L, (long)res.get(6).getSpentEffort());\n        assertEquals(null, res.get(7).getSpentEffort());\n        verify(hourEntryDAO);\n    }\n    \n    @Test\n    public void testGetDailySpentEffortByInterval() {\n        List<HourEntry> entries = new ArrayList<HourEntry>();\n        entries.add(createEntry(2009, 1, 28, 100));\n        entries.add(createEntry(2009, 4, 28, 900));\n        entries.add(createEntry(2009, 4, 28, 1000));\n        entries.add(createEntry(2009, 4, 30, 4000));\n        entries.add(createEntry(2009, 4, 30, 50000));\n        entries.add(createEntry(2009, 5, 1, 6000000));\n        entries.add(createEntry(2009, 5, 28, 70000000));\n        DateTime start = new DateTime(2009,4,28,0,0,0,0);\n        DateTime end = new DateTime(2009,5,1,23,59,0,0);\n\n        int usrHourTimeZone   = 5;\n        int usrMinuteTimeZone = 0;\n        DateTimeZone zone = DateTimeZone.forOffsetHoursMinutes(usrHourTimeZone, usrMinuteTimeZone);\n        DateTime userstart = start.minusMillis(zone.getOffset(0)).plusMillis(serverTimeZone.getOffset(0));\n        DateTime userend   = end.minusMillis(zone.getOffset(0)).plusMillis(serverTimeZone.getOffset(0));\n        expect(hourEntryDAO.getHourEntriesByFilter(userstart, userend, 0)).andReturn(entries);\n        replay(hourEntryDAO);\n        List<DailySpentEffort> res = hourEntryBusiness.getDailySpentEffortByInterval(start, end, 0, usrHourTimeZone, usrMinuteTimeZone, DateTimeZone.UTC);\n        assertEquals(4, res.size());\n        assertEquals(1900L, (long)res.get(0).getSpentEffort());\n        assertEquals(null, res.get(1).getSpentEffort());\n        assertEquals(54000L, (long)res.get(2).getSpentEffort());\n        assertEquals(6000000L, (long)res.get(3).getSpentEffort());\n        verify(hourEntryDAO);\n    }\n    \n    @Test\n    public void testGetEntriesByUserAndDay() {\n        DateTime start = new DateTime(2009,6,2,0,0,0,0);\n        DateTime end = new DateTime(2009,6,2,23,59,59,0);\n        DateTimeZone zone = DateTimeZone.forOffsetHoursMinutes(5, 0);\n        expect(hourEntryDAO.getHourEntriesByFilter(start.minusMillis(zone.getOffset(0)).plusMillis(serverTimeZone.getOffset(0)), \n        \t\tend.minusMillis(zone.getOffset(0)).plusMillis(serverTimeZone.getOffset(0)), 42)).andReturn(null);\n        replay(hourEntryDAO);\n        assertEquals(null, hourEntryBusiness.getEntriesByUserAndDay(start.toLocalDate(), 42,5,0, DateTimeZone.UTC));\n        verify(hourEntryDAO);\n    }\n    \n    @Test\n    public void testLogStoryEffort() {\n        HourEntry effortEntry = new HourEntry();\n        effortEntry.setDate(new DateTime());\n        effortEntry.setDescription(\"daadaa\");\n        effortEntry.setMinutesSpent(10L);\n        \n        Story parent = new Story();\n        \n        expect(storyBusiness.retrieve(1)).andReturn(parent);\n        expect(userBusiness.retrieveMultiple(targetUserIds)).andReturn(targetUsers);\n\n        Capture<StoryHourEntry> storedEntry = new Capture<StoryHourEntry>();\n        expect(hourEntryDAO.create(EasyMock.capture(storedEntry))).andReturn(1);\n        \n        replayAll();\n        hourEntryBusiness.logStoryEffort(1, effortEntry, targetUserIds);\n        verifyAll();\n        StoryHourEntry actual = (StoryHourEntry)storedEntry.getValue();\n        assertEquals(parent, actual.getStory());\n        compareHe(effortEntry, actual);\n    }\n    \n    @Test(expected=ObjectNotFoundException.class)\n    public void testLogStoryEffort_invalidStory() {\n        HourEntry effortEntry = new HourEntry();\n                \n        expect(storyBusiness.retrieve(1)).andThrow(new ObjectNotFoundException());\n        \n        replayAll();\n        hourEntryBusiness.logStoryEffort(1, effortEntry, targetUserIds);\n        verifyAll();\n\n    }\n    \n    @Test(expected=ObjectNotFoundException.class)\n    public void testLogStoryEffort_invalidUser() {\n        HourEntry effortEntry = new HourEntry();\n        \n        Story parent = new Story();\n        \n        expect(storyBusiness.retrieve(1)).andReturn(parent);\n        expect(userBusiness.retrieveMultiple(targetUserIds)).andThrow(new ObjectNotFoundException());\n        \n        replayAll();\n        hourEntryBusiness.logStoryEffort(1, effortEntry, targetUserIds);\n        verifyAll();\n\n    }\n    \n    @Test\n    public void testLogTaskEffort() {\n        HourEntry effortEntry = new HourEntry();\n        effortEntry.setDate(new DateTime());\n        effortEntry.setDescription(\"daadaa\");\n        effortEntry.setMinutesSpent(10L);\n        \n        Task parent = new Task();\n        \n        expect(taskBusiness.retrieve(1)).andReturn(parent);\n        expect(userBusiness.retrieveMultiple(targetUserIds)).andReturn(targetUsers);\n\n        Capture<TaskHourEntry> storedEntry = new Capture<TaskHourEntry>();\n        expect(hourEntryDAO.create(EasyMock.capture(storedEntry))).andReturn(1);\n        \n        replayAll();\n        hourEntryBusiness.logTaskEffort(1, effortEntry, targetUserIds);\n        verifyAll();\n        TaskHourEntry actual = (TaskHourEntry)storedEntry.getValue();\n        assertEquals(parent, actual.getTask());\n        compareHe(effortEntry, actual);\n    }\n    \n    @Test(expected=ObjectNotFoundException.class)\n    public void testLogTaskEffort_invalidStory() {\n        HourEntry effortEntry = new HourEntry();\n                \n        expect(taskBusiness.retrieve(1)).andThrow(new ObjectNotFoundException());\n        \n        replayAll();\n        hourEntryBusiness.logTaskEffort(1, effortEntry, targetUserIds);\n        verifyAll();\n\n    }\n    \n    @Test(expected=ObjectNotFoundException.class)\n    public void testLogTaskEffort_invalidUser() {\n        HourEntry effortEntry = new HourEntry();\n        \n        Task parent = new Task();\n        \n        expect(taskBusiness.retrieve(1)).andReturn(parent);\n        expect(userBusiness.retrieveMultiple(targetUserIds)).andThrow(new ObjectNotFoundException());\n        \n        replayAll();\n        hourEntryBusiness.logTaskEffort(1, effortEntry, targetUserIds);\n        verifyAll();\n\n    }\n    \n    \n    @Test\n    public void testLogBacklogEffort() {\n        HourEntry effortEntry = new HourEntry();\n        effortEntry.setDate(new DateTime());\n        effortEntry.setDescription(\"daadaa\");\n        effortEntry.setMinutesSpent(10L);\n        \n        Iteration parent = new Iteration();\n        \n        expect(backlogBusiness.retrieve(1)).andReturn(parent);\n        expect(userBusiness.retrieveMultiple(targetUserIds)).andReturn(targetUsers);\n\n        Capture<BacklogHourEntry> storedEntry = new Capture<BacklogHourEntry>();\n        expect(hourEntryDAO.create(EasyMock.capture(storedEntry))).andReturn(1);\n        \n        replayAll();\n        hourEntryBusiness.logBacklogEffort(1, effortEntry, targetUserIds);\n        verifyAll();\n        BacklogHourEntry actual = (BacklogHourEntry)storedEntry.getValue();\n        assertEquals(parent, actual.getBacklog());\n        compareHe(effortEntry, actual);\n    }\n    \n    @Test(expected=ObjectNotFoundException.class)\n    public void testLogBacklogEffort_invalidStory() {\n        HourEntry effortEntry = new HourEntry();\n                \n        expect(backlogBusiness.retrieve(1)).andThrow(new ObjectNotFoundException());\n        \n        replayAll();\n        hourEntryBusiness.logBacklogEffort(1, effortEntry, targetUserIds);\n        verifyAll();\n\n    }\n    \n    @Test(expected=ObjectNotFoundException.class)\n    public void testLogBacklogEffort_invalidUser() {\n        HourEntry effortEntry = new HourEntry();\n        \n        Iteration parent = new Iteration();\n        \n        expect(backlogBusiness.retrieve(1)).andReturn(parent);\n        expect(userBusiness.retrieveMultiple(targetUserIds)).andThrow(new ObjectNotFoundException());\n        \n        replayAll();\n        hourEntryBusiness.logBacklogEffort(1, effortEntry, targetUserIds);\n        verifyAll();\n\n    }\n    \n    @Test\n    public void testRetrieveBacklogHourEntries() {\n        List<HourEntry> hourEntries = new ArrayList<HourEntry>();\n        expect(hourEntryDAO.getBacklogHourEntries(10, 0)).andReturn(hourEntries);\n        replayAll();\n        assertSame(hourEntries, hourEntryBusiness.retrieveBacklogHourEntries(10, false));\n        verifyAll();\n    }\n\n    @Test\n    public void testRetrieveBacklogHourEntries_withLimit() {\n        List<HourEntry> hourEntries = new ArrayList<HourEntry>();\n        expect(hourEntryDAO.getBacklogHourEntries(10, HourEntryBusiness.ENTRY_LIMIT)).andReturn(hourEntries);\n        replayAll();\n        assertSame(hourEntries, hourEntryBusiness.retrieveBacklogHourEntries(10, true));\n        verifyAll();\n    }\n\n    @Test\n    public void testRetrieveTaskHourEntries() {\n        List<HourEntry> hourEntries = new ArrayList<HourEntry>();\n        expect(hourEntryDAO.getTaskHourEntries(10, 0)).andReturn(hourEntries);\n        replayAll();\n        assertSame(hourEntries, hourEntryBusiness.retrieveTaskHourEntries(10, false));\n        verifyAll();\n    }\n\n    @Test\n    public void testRetrieveTaskHourEntries_withLimit() {\n        List<HourEntry> hourEntries = new ArrayList<HourEntry>();\n        expect(hourEntryDAO.getTaskHourEntries(10, HourEntryBusiness.ENTRY_LIMIT)).andReturn(hourEntries);\n        replayAll();\n        assertSame(hourEntries, hourEntryBusiness.retrieveTaskHourEntries(10, true));\n        verifyAll();\n    }\n\n    @Test\n    public void testRetrieveStoryHourEntries() {\n        List<HourEntry> hourEntries = new ArrayList<HourEntry>();\n        expect(hourEntryDAO.getStoryHourEntries(10, 0)).andReturn(hourEntries);\n        replayAll();\n        assertSame(hourEntries, hourEntryBusiness.retrieveStoryHourEntries(10, false));\n        verifyAll();\n    }\n\n    @Test\n    public void testRetrieveStoryHourEntries_withLimit() {\n        List<HourEntry> hourEntries = new ArrayList<HourEntry>();\n        expect(hourEntryDAO.getStoryHourEntries(10, HourEntryBusiness.ENTRY_LIMIT)).andReturn(hourEntries);\n        replayAll();\n        assertSame(hourEntries, hourEntryBusiness.retrieveStoryHourEntries(10, true));\n        verifyAll();\n    }\n    \n    @Test\n    public void testDeleteAll() {\n        List<HourEntry> hourEntries = new ArrayList<HourEntry>();\n        HourEntry hourEntry1 = new HourEntry();\n        HourEntry hourEntry2 = new HourEntry();\n        hourEntries.add(hourEntry1);\n        hourEntries.add(hourEntry2);\n        hourEntryDAO.remove(hourEntry1);\n        hourEntryDAO.remove(hourEntry2);\n        replayAll();\n        hourEntryBusiness.deleteAll(hourEntries);\n        verifyAll();\n    }\n\n    @Test\n    public void testMoveToBacklog() {\n        Iteration backlog = new Iteration();\n        List<HourEntry> hourEntries = new ArrayList<HourEntry>();\n        HourEntry hourEntry1 = new HourEntry();\n        HourEntry hourEntry2 = new HourEntry();\n        hourEntries.add(hourEntry1);\n        hourEntries.add(hourEntry2);\n        hourEntryDAO.remove(hourEntry1);\n        hourEntryDAO.remove(hourEntry2);\n        Capture<BacklogHourEntry> newHourEntry1 = new Capture<BacklogHourEntry>();\n        Capture<BacklogHourEntry> newHourEntry2 = new Capture<BacklogHourEntry>();\n        hourEntryDAO.store(EasyMock.capture(newHourEntry1));\n        hourEntryDAO.store(EasyMock.capture(newHourEntry2));\n        replayAll();\n        hourEntryBusiness.moveToBacklog(hourEntries, backlog);\n        assertSame(backlog, newHourEntry1.getValue().getBacklog());\n        assertSame(backlog, newHourEntry2.getValue().getBacklog());\n        verifyAll();\n    }\n\n    @Test\n    public void testMoveToBacklog_checkFields() {\n        Iteration backlog = new Iteration();\n        List<HourEntry> hourEntries = new ArrayList<HourEntry>();\n        User user = new User();\n        DateTime now = new DateTime();\n        HourEntry hourEntry1 = new HourEntry();\n        hourEntry1.setMinutesSpent(100L);\n        hourEntry1.setDate(now);\n        hourEntry1.setDescription(\"Description\");\n        hourEntry1.setUser(user);\n        hourEntries.add(hourEntry1);\n        hourEntryDAO.remove(hourEntry1);\n        Capture<BacklogHourEntry> newHourEntry1 = new Capture<BacklogHourEntry>();\n        hourEntryDAO.store(EasyMock.capture(newHourEntry1));\n        replayAll();\n        hourEntryBusiness.moveToBacklog(hourEntries, backlog);\n        assertEquals(100L, newHourEntry1.getValue().getMinutesSpent());\n        assertEquals(now, newHourEntry1.getValue().getDate());\n        assertEquals(\"Description\", newHourEntry1.getValue().getDescription());\n        assertSame(user, newHourEntry1.getValue().getUser());\n        verifyAll();\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\IterationAssignedLoadTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["IterationAssignedLoadTest"], "SCS_ClassReference": ["SpringJUnit4ClassRunner", "MockContextLoader", "iteration", null, "iteration", "iteration", null, "iteration", "iteration", "user1", "user2", "assign1", "assign1", "assign1", "assign1", "assign2", "assign2", "assign2", "assign2", "story1", "story2", "taskInStory11", "taskInStory11", "taskInStory12", "taskInStory12", "taskInStory21", "taskInStory21", "taskInStory22", "taskInStory22", "taskWithoutStory", "taskWithoutStory", "nullTask", "story1", null, "story1", null, "story1", null, "story1", null, "iteration", null, "iteration", null, "iteration", null, "iteration", null, "Arrays", "ass", "", null, "iterationDAO", "", null, "backlogBusiness", "", null, "Days", "backlogBusiness", "", "iterationBusiness", "", "", "actual", "story1", null, "taskInStory21", null, "", null, "iterationDAO", "", null, "backlogBusiness", "", null, "Days", "backlogBusiness", "", "iterationBusiness", "", "", "actual", "", null, "", null, "story1", null, "taskInStory21", null, "taskInStory22", null, "taskWithoutStory", null, "iteration", null, "", null, "iterationDAO", "", null, "backlogBusiness", "", null, "Days", "backlogBusiness", "", "iterationBusiness", "", null, "", "actual", "", "taskInStory11", null, "taskInStory12", null, "taskInStory22", null, "taskWithoutStory", null, "ass", null, "", "iteration", null, "ass", null, "story1", null, "taskInStory22", null, "taskWithoutStory", null, "iteration", null, "", null, "iterationDAO", "", null, "backlogBusiness", "", null, "Days", "backlogBusiness", "", "iterationBusiness", "", "", "actual", null, "", "taskInStory11", null, "taskInStory12", null, "taskInStory22", null, "taskWithoutStory", null, "assignment", null, "", "taskInStory21", null, "assignment", null, "iteration", null, "iteration", null, "story1", null, "taskInStory21", null, "taskInStory22", null, "taskWithoutStory", null, "", null, "iterationDAO", "", null, "backlogBusiness", "", null, "Days", "backlogBusiness", "", "iterationBusiness", "", "", "actual", null, null, "", "u1", null, "", "u1", null, "", "u2", null, "", "u2", null, "", "u2", null, "", "u1", null, "", "u1", null, "", "u2", null, "", "u1", "", "u2", "iteration", null, "iteration", null, "iteration", "assign1", "", null, "iterationDAO", "", null, "backlogBusiness", "", null, "Days", "backlogBusiness", "", "iterationBusiness", "", "", "actual", null, null, "", "u1", null, "", "u1", null, "", "u2", null, "", "u2", null], "AN": ["iterationBusiness", "teamBusiness", "iterationDAO", "transferObjectBusiness", "storyBusiness", "hourEntryBusiness", "backlogHistoryEntryBusiness", "iterationHistoryEntryBusiness", "iterationHistoryEntryDAO", "backlogBusiness", "assignmentBusiness", "settingBusiness", "storyRankBusiness", "taskBusiness", "backlogHistoryDAO", "storyHistoryDAO", "taskHistoryDAO", "user1", "user2", "assign1", "assign2", "iteration", "story1", "story2", "taskInStory11", "taskInStory12", "taskInStory21", "taskInStory22", "taskWithoutStory", "allTasks", "u1fraction", "u2fraction"], "SCS_VariableDeclarator": ["iterationBusiness", "teamBusiness", "iterationDAO", "transferObjectBusiness", "storyBusiness", "hourEntryBusiness", "backlogHistoryEntryBusiness", "iterationHistoryEntryBusiness", "iterationHistoryEntryDAO", "backlogBusiness", "assignmentBusiness", "settingBusiness", "storyRankBusiness", "taskBusiness", "backlogHistoryDAO", "storyHistoryDAO", "taskHistoryDAO", "user1", "user2", "assign1", "assign2", "iteration", "story1", "story2", "taskInStory11", "taskInStory12", "taskInStory21", "taskInStory22", "taskWithoutStory", "allTasks", "u1fraction", "u2fraction", "nullTask", "ass", "actual", "actual", "actual", "ass", "actual", "assignment", "actual", "u1", "u2", "actual", "u1", "u2"], "MN": ["setupData", "findById", "testNoAssignees_noResponsbilities", "testNoAssignees_withResponsbilities", "testOneAssignee", "testOneAssignee_someUnassigned", "testBothAssignees", "testBothAssignees_unassigned"], "PN": ["assignments", "id"], "SCS_MemberReference": ["iteration", "user1", "user2", "assign1", "user1", "iteration", "assign2", "user2", "iteration", "story1", "iteration", "story2", "iteration", "taskInStory11", "story1", "taskInStory12", "story1", "taskInStory21", "story2", "taskInStory22", "story2", "taskWithoutStory", "iteration", "taskInStory11", "taskInStory12", "taskInStory21", "taskInStory22", "story1", "story2", "taskWithoutStory", "nullTask", "allTasks", "taskInStory11", "taskInStory12", "taskInStory21", "taskInStory22", "taskWithoutStory", "assignments", "id", "ass", "allTasks", "iteration", "iteration", "iteration", "actual", "iteration", "user1", "user2", "allTasks", "iteration", "iteration", "iteration", "actual", "iteration", "actual", "actual", "user1", "user2", "user1", "user1", "assign1", "allTasks", "iteration", "iteration", "iteration", "actual", "iteration", "actual", "user1", "user1", "user1", "assign1", "allTasks", "iteration", "iteration", "iteration", "actual", "iteration", "actual", "assign1", "assign2", "user1", "user2", "user1", "user2", "allTasks", "iteration", "iteration", "iteration", "actual", "iteration", "actual", "actual", "assign1", "assign2", "allTasks", "iteration", "iteration", "iteration", "actual", "iteration", "actual", "actual"], "SCS_MethodInvocation": ["setStartDate", "plusDays", "setEndDate", "getStartDate", "plusDays", "setBacklogSize", "setBaselineLoad", "setId", "setId", "setUser", "setId", "setBacklog", "setAvailability", "setUser", "setId", "setBacklog", "setAvailability", "setIteration", "setIteration", "setStory", "setEffortLeft", "setStory", "setEffortLeft", "setStory", "setEffortLeft", "setStory", "setEffortLeft", "setIteration", "setEffortLeft", "setEffortLeft", "getTasks", "add", "getTasks", "add", "getTasks", "add", "getTasks", "add", "getStories", "add", "getStories", "add", "getTasks", "add", "getTasks", "add", "asList", "getId", "expect", "andReturn", "getAllTasksForIteration", "expect", "andReturn", "calculateBacklogTimeframePercentageLeft", "expect", "andReturn", "days", "daysLeftInSchedulableBacklog", "replayAll", "calculateAssignedLoadPerAssignee", "verifyAll", "assertEquals", "size", "getResponsibles", "add", "getResponsibles", "add", "expect", "andReturn", "getAllTasksForIteration", "expect", "andReturn", "calculateBacklogTimeframePercentageLeft", "expect", "andReturn", "days", "daysLeftInSchedulableBacklog", "replayAll", "calculateAssignedLoadPerAssignee", "verifyAll", "assertEquals", "size", "assertNotNull", "findById", "assertNotNull", "findById", "getResponsibles", "add", "getResponsibles", "add", "getResponsibles", "add", "getResponsibles", "add", "getAssignments", "add", "expect", "andReturn", "getAllTasksForIteration", "expect", "andReturn", "calculateBacklogTimeframePercentageLeft", "expect", "andReturn", "days", "daysLeftInSchedulableBacklog", "replayAll", "calculateAssignedLoadPerAssignee", "verifyAll", "findById", "assertEquals", "size", "assertEquals", "getEffortLeft", "longValue", "getEffortLeft", "longValue", "getEffortLeft", "longValue", "getEffortLeft", "longValue", "getAssignedLoad", "longValue", "assertEquals", "getBacklogSize", "longValue", "getAvailableWorktime", "longValue", "getResponsibles", "add", "getResponsibles", "add", "getResponsibles", "add", "getAssignments", "add", "expect", "andReturn", "getAllTasksForIteration", "expect", "andReturn", "calculateBacklogTimeframePercentageLeft", "expect", "andReturn", "days", "daysLeftInSchedulableBacklog", "replayAll", "calculateAssignedLoadPerAssignee", "verifyAll", "assertEquals", "size", "findById", "assertEquals", "getEffortLeft", "longValue", "getEffortLeft", "longValue", "getEffortLeft", "longValue", "getEffortLeft", "longValue", "getAssignedLoad", "longValue", "assertEquals", "getEffortLeft", "longValue", "getUnassignedLoad", "longValue", "getAssignments", "add", "getAssignments", "add", "getResponsibles", "add", "getResponsibles", "add", "getResponsibles", "add", "getResponsibles", "add", "expect", "andReturn", "getAllTasksForIteration", "expect", "andReturn", "calculateBacklogTimeframePercentageLeft", "expect", "andReturn", "days", "daysLeftInSchedulableBacklog", "replayAll", "calculateAssignedLoadPerAssignee", "verifyAll", "assertEquals", "size", "findById", "findById", "assertEquals", "getAssignedLoad", "longValue", "assertEquals", "getUnassignedLoad", "longValue", "assertEquals", "getAssignedLoad", "longValue", "assertEquals", "getUnassignedLoad", "longValue", "assertEquals", "getAvailableWorktime", "longValue", "assertEquals", "getAvailableWorktime", "longValue", "assertEquals", "getTotalLoad", "longValue", "assertEquals", "getTotalLoad", "longValue", "assertEquals", "getLoadPercentage", "assertEquals", "getLoadPercentage", "getAssignments", "add", "getAssignments", "add", "setBaselineLoad", "setPersonalLoad", "expect", "andReturn", "getAllTasksForIteration", "expect", "andReturn", "calculateBacklogTimeframePercentageLeft", "expect", "andReturn", "days", "daysLeftInSchedulableBacklog", "replayAll", "calculateAssignedLoadPerAssignee", "verifyAll", "assertEquals", "size", "findById", "findById", "assertEquals", "getAssignedLoad", "longValue", "assertEquals", "getUnassignedLoad", "longValue", "assertEquals", "getAssignedLoad", "longValue", "assertEquals", "getUnassignedLoad", "longValue"], "SCS_VariableDeclaration": ["Task", "AssignmentTO", "Set", "Set", "Set", "AssignmentTO", "Set", "AssignmentTO", "Set", "AssignmentTO", "AssignmentTO", "Set", "AssignmentTO", "AssignmentTO"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Set;\n\nimport org.joda.time.DateTime;\nimport org.joda.time.Days;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.test.annotation.DirtiesContext;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n\nimport fi.hut.soberit.agilefant.business.impl.IterationBusinessImpl;\nimport fi.hut.soberit.agilefant.db.IterationDAO;\nimport fi.hut.soberit.agilefant.db.IterationHistoryEntryDAO;\nimport fi.hut.soberit.agilefant.db.history.BacklogHistoryDAO;\nimport fi.hut.soberit.agilefant.db.history.StoryHistoryDAO;\nimport fi.hut.soberit.agilefant.db.history.TaskHistoryDAO;\nimport fi.hut.soberit.agilefant.model.Assignment;\nimport fi.hut.soberit.agilefant.model.ExactEstimate;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.Task;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.test.Mock;\nimport fi.hut.soberit.agilefant.test.MockContextLoader;\nimport fi.hut.soberit.agilefant.test.MockedTestCase;\nimport fi.hut.soberit.agilefant.test.TestedBean;\nimport fi.hut.soberit.agilefant.transfer.AssignmentTO;\n\nimport static org.junit.Assert.*;\nimport static org.easymock.EasyMock.*;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(loader = MockContextLoader.class)\n@SuppressWarnings(\"unused\")\npublic class IterationAssignedLoadTest extends MockedTestCase {\n\n    @TestedBean\n    private IterationBusinessImpl iterationBusiness;\n\n    @Mock(strict = true)\n    private TeamBusiness teamBusiness;\n    @Mock(strict = true)\n    private IterationDAO iterationDAO;\n    @Mock(strict = true)\n    private TransferObjectBusiness transferObjectBusiness;\n    @Mock(strict = true)\n    private StoryBusiness storyBusiness;\n    @Mock(strict = true)\n    private HourEntryBusiness hourEntryBusiness;\n    @Mock(strict = true)\n    private BacklogHistoryEntryBusiness backlogHistoryEntryBusiness;\n    @Mock(strict = true)\n    private IterationHistoryEntryBusiness iterationHistoryEntryBusiness;\n    @Mock(strict = true)\n    private IterationHistoryEntryDAO iterationHistoryEntryDAO;\n    @Mock(strict = true)\n    private BacklogBusiness backlogBusiness;\n    @Mock(strict = true)\n    private AssignmentBusiness assignmentBusiness;\n    @Mock(strict = true)\n    private SettingBusiness settingBusiness;\n    @Mock(strict=true)\n    private StoryRankBusiness storyRankBusiness;\n    @Mock(strict=true)\n    private TaskBusiness taskBusiness;\n    @Mock(strict=true)\n    private BacklogHistoryDAO backlogHistoryDAO;\n    @Mock(strict=true)\n    private StoryHistoryDAO storyHistoryDAO;\n    @Mock(strict=true)\n    private TaskHistoryDAO taskHistoryDAO;\n\n    private User user1;\n    private User user2;\n    private Assignment assign1;\n    private Assignment assign2;\n    private Iteration iteration;\n    private Story story1;\n    private Story story2;\n    private Task taskInStory11;\n    private Task taskInStory12;\n    private Task taskInStory21;\n    private Task taskInStory22;\n    private Task taskWithoutStory;\n    private List<Task> allTasks;\n    private static float u1fraction = 100f / 110f;\n    private static float u2fraction = 10f / 110f;\n\n    @Before\n    public void setupData() {\n        iteration = new Iteration();\n        iteration.setStartDate(new DateTime().plusDays(5));\n        iteration.setEndDate(iteration.getStartDate().plusDays(10));\n        iteration.setBacklogSize(new ExactEstimate(500));\n        iteration.setBaselineLoad(new ExactEstimate(50));\n\n        user1 = new User();\n        user1.setId(1);\n\n        user2 = new User();\n        user2.setId(2);\n\n        assign1 = new Assignment();\n        assign1.setUser(user1);\n        assign1.setId(1);\n        assign1.setBacklog(iteration);\n        assign1.setAvailability(100);\n\n        assign2 = new Assignment();\n        assign2.setUser(user2);\n        assign2.setId(2);\n        assign2.setBacklog(iteration);\n        assign2.setAvailability(10);\n\n        story1 = new Story();\n        story1.setIteration(iteration);\n\n        story2 = new Story();\n        story2.setIteration(iteration);\n\n        taskInStory11 = new Task();\n        taskInStory11.setStory(story1);\n        taskInStory11.setEffortLeft(new ExactEstimate(10L));\n\n        taskInStory12 = new Task();\n        taskInStory12.setStory(story1);\n        taskInStory12.setEffortLeft(new ExactEstimate(100L));\n\n        taskInStory21 = new Task();\n        taskInStory21.setStory(story2);\n        taskInStory21.setEffortLeft(new ExactEstimate(1000L));\n\n        taskInStory22 = new Task();\n        taskInStory22.setStory(story2);\n        taskInStory22.setEffortLeft(new ExactEstimate(10000L));\n\n        taskWithoutStory = new Task();\n        taskWithoutStory.setIteration(iteration);\n        taskWithoutStory.setEffortLeft(new ExactEstimate(100000L));\n\n        Task nullTask = new Task();\n        nullTask.setEffortLeft(null);\n\n        story1.getTasks().add(taskInStory11);\n        story1.getTasks().add(taskInStory12);\n\n        story1.getTasks().add(taskInStory21);\n        story1.getTasks().add(taskInStory22);\n\n        iteration.getStories().add(story1);\n        iteration.getStories().add(story2);\n        iteration.getTasks().add(taskWithoutStory);\n        iteration.getTasks().add(nullTask);\n\n        allTasks = Arrays.asList(taskInStory11, taskInStory12, taskInStory21,\n                taskInStory22, taskWithoutStory);\n    }\n\n    private AssignmentTO findById(Set<AssignmentTO> assignments, int id) {\n        for (AssignmentTO ass : assignments) {\n            if (ass.getId() == id) {\n                return ass;\n            }\n        }\n        return null;\n    }\n\n    @Test\n    @DirtiesContext\n    public void testNoAssignees_noResponsbilities() {\n        expect(iterationDAO.getAllTasksForIteration(iteration)).andReturn(\n                allTasks);\n        Set<AssignmentTO> actual;\n        expect(backlogBusiness.calculateBacklogTimeframePercentageLeft(iteration)).andReturn(100.0f);\n        expect(backlogBusiness.daysLeftInSchedulableBacklog(iteration)).andReturn(Days.days(10));\n        replayAll();\n        actual = iterationBusiness.calculateAssignedLoadPerAssignee(iteration);\n        verifyAll();\n        assertEquals(0, actual.size());\n    }\n\n    @Test\n    @DirtiesContext\n    public void testNoAssignees_withResponsbilities() {\n        story1.getResponsibles().add(user1);\n        taskInStory21.getResponsibles().add(user2);\n        expect(iterationDAO.getAllTasksForIteration(iteration)).andReturn(\n                allTasks);\n        expect(backlogBusiness.calculateBacklogTimeframePercentageLeft(iteration)).andReturn(100.0f);\n        expect(backlogBusiness.daysLeftInSchedulableBacklog(iteration)).andReturn(Days.days(10));\n        Set<AssignmentTO> actual;\n        replayAll();\n        actual = iterationBusiness.calculateAssignedLoadPerAssignee(iteration);\n        verifyAll();\n        assertEquals(2, actual.size());\n        assertNotNull(this.findById(actual, -1));\n        assertNotNull(this.findById(actual, -2));\n    }\n\n    @Test\n    @DirtiesContext\n    public void testOneAssignee() {\n        story1.getResponsibles().add(user1);\n        taskInStory21.getResponsibles().add(user2);\n        taskInStory22.getResponsibles().add(user1);\n        taskWithoutStory.getResponsibles().add(user1);\n        iteration.getAssignments().add(assign1);\n        expect(iterationDAO.getAllTasksForIteration(iteration)).andReturn(\n                allTasks);\n        expect(backlogBusiness.calculateBacklogTimeframePercentageLeft(iteration)).andReturn(1.0f);\n        expect(backlogBusiness.daysLeftInSchedulableBacklog(iteration)).andReturn(Days.days(10));\n        Set<AssignmentTO> actual;\n        replayAll();\n        actual = iterationBusiness.calculateAssignedLoadPerAssignee(iteration);\n        verifyAll();\n        AssignmentTO ass = this.findById(actual, 1);\n        assertEquals(2, actual.size());\n        assertEquals(taskInStory11.getEffortLeft().longValue()\n                + taskInStory12.getEffortLeft().longValue()\n                + taskInStory22.getEffortLeft().longValue()\n                + taskWithoutStory.getEffortLeft().longValue(), ass\n                .getAssignedLoad().longValue());\n        assertEquals(iteration.getBacklogSize().longValue(), ass\n                .getAvailableWorktime().longValue());\n    }\n\n    @Test\n    @DirtiesContext\n    public void testOneAssignee_someUnassigned() {\n        story1.getResponsibles().add(user1);\n        taskInStory22.getResponsibles().add(user1);\n        taskWithoutStory.getResponsibles().add(user1);\n        iteration.getAssignments().add(assign1);\n        expect(iterationDAO.getAllTasksForIteration(iteration)).andReturn(\n                allTasks);\n        expect(backlogBusiness.calculateBacklogTimeframePercentageLeft(iteration)).andReturn(100.0f);\n        expect(backlogBusiness.daysLeftInSchedulableBacklog(iteration)).andReturn(Days.days(5));\n        Set<AssignmentTO> actual;\n        replayAll();\n        actual = iterationBusiness.calculateAssignedLoadPerAssignee(iteration);\n        verifyAll();\n        assertEquals(1, actual.size());\n        AssignmentTO assignment = this.findById(actual, 1);\n        assertEquals(taskInStory11.getEffortLeft().longValue()\n                + taskInStory12.getEffortLeft().longValue()\n                + taskInStory22.getEffortLeft().longValue()\n                + taskWithoutStory.getEffortLeft().longValue(), assignment\n                .getAssignedLoad().longValue());\n        assertEquals(taskInStory21.getEffortLeft().longValue(), assignment\n                .getUnassignedLoad().longValue());\n    }\n\n    @Test\n    @DirtiesContext\n    public void testBothAssignees() {\n        iteration.getAssignments().add(assign1);\n        iteration.getAssignments().add(assign2);\n\n        story1.getResponsibles().add(user1);\n        taskInStory21.getResponsibles().add(user2);\n        taskInStory22.getResponsibles().add(user1);\n        taskWithoutStory.getResponsibles().add(user2);\n\n        expect(iterationDAO.getAllTasksForIteration(iteration)).andReturn(\n                allTasks);\n        expect(backlogBusiness.calculateBacklogTimeframePercentageLeft(iteration)).andReturn(1.0f);\n        expect(backlogBusiness.daysLeftInSchedulableBacklog(iteration)).andReturn(Days.days(5));\n        Set<AssignmentTO> actual;\n        replayAll();\n        actual = iterationBusiness.calculateAssignedLoadPerAssignee(iteration);\n        verifyAll();\n        assertEquals(2, actual.size());\n\n        AssignmentTO u1 = this.findById(actual, 1);\n        AssignmentTO u2 = this.findById(actual, 2);\n\n        assertEquals(10110l, u1.getAssignedLoad().longValue());\n        assertEquals(0L, u1.getUnassignedLoad().longValue());\n        assertEquals(101000l, u2.getAssignedLoad().longValue());\n        assertEquals(0L, u2.getUnassignedLoad().longValue());\n\n        assertEquals(45, u2.getAvailableWorktime().longValue());\n        assertEquals(455, u1.getAvailableWorktime().longValue());\n        \n        assertEquals(10145l, u1.getTotalLoad().longValue());\n        assertEquals(101035l, u2.getTotalLoad().longValue());\n        \n        assertEquals(2230, u1.getLoadPercentage());\n        assertEquals(224522, u2.getLoadPercentage());\n    }\n\n    @Test\n    @DirtiesContext\n    public void testBothAssignees_unassigned() {\n        iteration.getAssignments().add(assign1);\n        iteration.getAssignments().add(assign2);\n        iteration.setBaselineLoad(null);\n        assign1.setPersonalLoad(null);\n\n        expect(iterationDAO.getAllTasksForIteration(iteration)).andReturn(\n                allTasks);\n        expect(backlogBusiness.calculateBacklogTimeframePercentageLeft(iteration)).andReturn(100.0f);\n        expect(backlogBusiness.daysLeftInSchedulableBacklog(iteration)).andReturn(Days.days(5));\n        Set<AssignmentTO> actual;\n        replayAll();\n        actual = iterationBusiness.calculateAssignedLoadPerAssignee(iteration);\n        verifyAll();\n        assertEquals(2, actual.size());\n\n        AssignmentTO u1 = this.findById(actual, 1);\n        AssignmentTO u2 = this.findById(actual, 2);\n\n        assertEquals(0L, u1.getAssignedLoad().longValue());\n        assertEquals(101009L, u1.getUnassignedLoad().longValue());\n        assertEquals(0L, u2.getAssignedLoad().longValue());\n        assertEquals(10100L, u2.getUnassignedLoad().longValue());\n\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\IterationBurndownBusinessTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["IterationBurndownBusinessTest"], "AN": ["iterationBurndownBusiness", "iterationHistoryEntryBusiness", "hourEntryBusiness", "iterationBusiness", "settingBusiness", "iteration", "startDate", "endDate", "originalEstimateSum", "entry", "chart", "dailySpentEffortList", "hourEntryList", "entry1", "entry2", "entriesList", "startEntry", "endEntry"], "SCS_VariableDeclarator": ["iterationBurndownBusiness", "iterationHistoryEntryBusiness", "hourEntryBusiness", "iterationBusiness", "settingBusiness", "iteration", "startDate", "endDate", "originalEstimateSum", "entry", "chart", "dailySpentEffortList", "hourEntryList", "entry1", "entry2", "entriesList", "startEntry", "endEntry", "newChart", "newChart", "plot", "rend", "newChart", "actualAxis", "rend", "actualTimeSeries", "actualEntry", "actualEntry", "forecomingEntry", "newEntries", "actualEntry", "emptyList", "actualEntry", "startPoint", "endPoint", "actualSeries", "startPoint", "endPoint", "actualSeries", "actualSeries", "startInstant", "secondInstant", "endInstant", "afterEndInstant", "startTime", "firstEntry", "secondEntry", "thirdEntry", "entries", "actualSeries", "actualItem", "expectedTimestamp", "scopedEntries", "nullEntry", "actualEntry", "estimatedValue", "entryWithoutScoping", "entryWithScoping", "expectedStartValue", "expectedEndvalue", "actualSeries", "startTime", "firstEntry", "secondEntry", "thirdEntry", "entries", "actualSeries", "value1", "value2", "actualSeries", "expectedTimestamp", "actualItems", "firstItem", "secondItem", "nullItem", "expectedFirstValue", "expectedSecondValue", "expectedValue", "expectedInstant", "timeSeries"], "MN": ["setUp", "testGetIterationBurndown", "testGetSmallIterationBurndown", "testCustomIterationBurndown", "testConstructChart", "testConstructSmallChart", "testSmallChartFormating", "testTransformToSmallChart", "testFormatChartAxes", "testFormatChartStyle", "testSetSeriesStyles", "testGetDataset", "testDetermineEndDate_currentDateBeforeEndDate", "testDetermineEndDate_currentDateEqualsEndDate", "testDetermineEndDate_currentDateAfterEndDate", "testGetHistoryEntryForDate_dateFound", "testGetHistoryEntryForDate_entryFromYesterday", "testGetHistoryEntryForDate_entryFromFarBehind", "testGetHistoryEntryForDate_endDateBetweenEntries", "testGetHistoryEntryForDate_emptyEntry", "testGetIterationHistoryEntries", "initializeEntriesForScopingTest", "testGetTodaysStartValueWithScoping_noScope", "testGetTodaysStartValueWithScoping_minusScope", "testGetTodaysStartValueWithScoping_plusScope", "testGetReferenceVelocityTimeSeries_noWeekends", "testGetReferenceVelocityTimeSeries_withWeekends", "testGetBurndownTimeSeries", "testGetBurndownTimeSeries_scoped", "testGetBurndownDataItemForDay", "testGetBurndownScopedDataItemForDay", "testIsScopingDone", "testGetCurrentDayTimeSeries", "testGetScopingTimeSeries", "testGetSeriesByStartAndEndPoints", "testGetScopeSeriesDataItem", "testSeriesStartAndEndCorrect", "testAddTimeSeriesItem"], "PN": ["chart", "series", "value1", "value2"], "SCS_MemberReference": ["iterationBurndownBusiness", "iterationHistoryEntryBusiness", "iterationHistoryEntryBusiness", "iterationHistoryEntryBusiness", "iterationBusiness", "iterationBusiness", "iterationBusiness", "hourEntryBusiness", "hourEntryBusiness", "hourEntryBusiness", "settingBusiness", "settingBusiness", "settingBusiness", "startDate", "endDate", "iteration", "startDate", "endDate", "originalEstimateSum", "chart", "EFFORT_LEFT_SERIES_NAME", "DATE_AXIS_LABEL", "EFFORT_AXIS_LABEL", "entry", "entry1", "entry2", "entriesList", "entry1", "entry2", "dailySpentEffortList", "hourEntryList", "entry", "iteration", "ZERO", "dailySpentEffortList", "iteration", "hourEntryList", "iteration", "dailySpentEffortList", "hourEntryList", "dailySpentEffortList", "hourEntryList", "dailySpentEffortList", "hourEntryList", "iterationHistoryEntryBusiness", "iterationBusiness", "hourEntryBusiness", "settingBusiness", "iteration", "iterationHistoryEntryBusiness", "iterationBusiness", "entry", "iteration", "ZERO", "hourEntryList", "iteration", "dailySpentEffortList", "hourEntryList", "dailySpentEffortList", "hourEntryList", "dailySpentEffortList", "hourEntryList", "iterationHistoryEntryBusiness", "iterationBusiness", "hourEntryBusiness", "settingBusiness", "iteration", "iterationHistoryEntryBusiness", "iterationBusiness", "entry", "iteration", "ZERO", "hourEntryList", "iteration", "dailySpentEffortList", "hourEntryList", "dailySpentEffortList", "hourEntryList", "dailySpentEffortList", "hourEntryList", "iterationHistoryEntryBusiness", "iterationBusiness", "hourEntryBusiness", "settingBusiness", "iteration", "iterationHistoryEntryBusiness", "iterationBusiness", "entry", "iteration", "ZERO", "hourEntryList", "iteration", "dailySpentEffortList", "hourEntryList", "dailySpentEffortList", "hourEntryList", "dailySpentEffortList", "hourEntryList", "iterationHistoryEntryBusiness", "iterationBusiness", "hourEntryBusiness", "settingBusiness", "iteration", "REFERENCE_SERIES_NAME", "REFERENCE_SERIES_NO", "EFFORT_LEFT_SERIES_NAME", "EFFORT_LEFT_SERIES_NO", "EFFORT_SPENT_SERIES_NAME", "EFFORT_SPENT_SERIES_NO", "CURRENT_DAY_EFFORT_SPENT_SERIES_NAME", "CURRENT_DAY_EFFORT_SPENT_SERIES_NO", "CURRENT_DAY_EFFORT_LEFT_SERIES_NAME", "CURRENT_DAY_EFFORT_LEFT_SERIES_NO", "SCOPING_SERIES_NAME", "SCOPING_SERIES_NO", "iterationHistoryEntryBusiness", "iterationBusiness", "entry", "iteration", "ZERO", "hourEntryList", "iteration", "dailySpentEffortList", "hourEntryList", "dailySpentEffortList", "hourEntryList", "dailySpentEffortList", "hourEntryList", "iterationHistoryEntryBusiness", "iterationBusiness", "hourEntryBusiness", "settingBusiness", "iteration", "REFERENCE_SERIES_NAME", "REFERENCE_SERIES_NO", "EFFORT_LEFT_SERIES_NAME", "EFFORT_LEFT_SERIES_NO", "EFFORT_SPENT_SERIES_NAME", "EFFORT_SPENT_SERIES_NO", "CURRENT_DAY_EFFORT_SPENT_SERIES_NAME", "CURRENT_DAY_EFFORT_SPENT_SERIES_NO", "CURRENT_DAY_EFFORT_LEFT_SERIES_NAME", "CURRENT_DAY_EFFORT_LEFT_SERIES_NO", "SCOPING_SERIES_NAME", "SCOPING_SERIES_NO", "newChart", "iterationHistoryEntryBusiness", "iterationBusiness", "PLOT_BACKGROUND_COLOR", "EFFORT_LEFT_SERIES_COLOR", "EFFORT_LEFT_SERIES_NO", "EFFORT_SPENT_SERIES_COLOR", "EFFORT_SPENT_SERIES_NO", "EFFORT_LEFT_SERIES_COLOR", "SCOPING_SERIES_NO", "EFFORT_LEFT_SERIES_COLOR", "CURRENT_DAY_EFFORT_LEFT_SERIES_NO", "EFFORT_SPENT_SERIES_COLOR", "CURRENT_DAY_EFFORT_SPENT_SERIES_NO", "REFERENCE_SERIES_COLOR", "REFERENCE_SERIES_NO", "SMALL_BURNDOWN_STROKE", "EFFORT_LEFT_SERIES_NO", "SMALL_BURNDOWN_STROKE", "EFFORT_SPENT_SERIES_NO", "SMALL_BURNDOWN_STROKE", "CURRENT_DAY_EFFORT_LEFT_SERIES_NO", "SMALL_BURNDOWN_STROKE", "CURRENT_DAY_EFFORT_SPENT_SERIES_NO", "SMALL_BURNDOWN_STROKE", "SCOPING_SERIES_NO", "SMALL_BURNDOWN_STROKE", "REFERENCE_SERIES_NO", "EFFORT_LEFT_SERIES_NO", "EFFORT_SPENT_SERIES_NO", "REFERENCE_SERIES_NO", "SCOPING_SERIES_NO", "CURRENT_DAY_EFFORT_LEFT_SERIES_NO", "CURRENT_DAY_EFFORT_SPENT_SERIES_NO", "chart", "newChart", "chart", "startDate", "endDate", "GRIDLINE_COLOR", "GRIDLINE_COLOR", "chart", "CHART_BACKGROUND_COLOR", "PLOT_BACKGROUND_COLOR", "EFFORT_LEFT_SERIES_COLOR", "EFFORT_LEFT_SERIES_NO", "EFFORT_LEFT_SERIES_SHAPE", "EFFORT_LEFT_SERIES_NO", "EFFORT_LEFT_SERIES_SHAPE_VISIBLE", "EFFORT_LEFT_SERIES_NO", "EFFORT_SPENT_SERIES_COLOR", "EFFORT_SPENT_SERIES_NO", "EFFORT_SPENT_SERIES_SHAPE", "EFFORT_SPENT_SERIES_NO", "EFFORT_SPENT_SERIES_SHAPE_VISIBLE", "EFFORT_SPENT_SERIES_NO", "REFERENCE_SERIES_COLOR", "REFERENCE_SERIES_NO", "CURRENT_DAY_EFFORT_LEFT_SERIES_COLOR", "CURRENT_DAY_EFFORT_LEFT_SERIES_NO", "CURRENT_DAY_SERIES_STROKE", "CURRENT_DAY_EFFORT_LEFT_SERIES_NO", "CURRENT_DAY_EFFORT_LEFT_SERIES_SHAPE", "CURRENT_DAY_EFFORT_LEFT_SERIES_NO", "CURRENT_DAY_EFFORT_LEFT_SERIES_SHAPE_VISIBLE", "CURRENT_DAY_EFFORT_LEFT_SERIES_NO", "CURRENT_DAY_EFFORT_LEFT_SERIES_SHAPE_FILLED", "CURRENT_DAY_EFFORT_LEFT_SERIES_NO", "CURRENT_DAY_EFFORT_SPENT_SERIES_COLOR", "CURRENT_DAY_EFFORT_SPENT_SERIES_NO", "CURRENT_DAY_SERIES_STROKE", "CURRENT_DAY_EFFORT_SPENT_SERIES_NO", "CURRENT_DAY_EFFORT_SPENT_SERIES_SHAPE", "CURRENT_DAY_EFFORT_SPENT_SERIES_NO", "CURRENT_DAY_EFFORT_SPENT_SERIES_SHAPE_VISIBLE", "CURRENT_DAY_EFFORT_SPENT_SERIES_NO", "CURRENT_DAY_EFFORT_SPENT_SERIES_SHAPE_FILLED", "CURRENT_DAY_EFFORT_SPENT_SERIES_NO", "SCOPING_SERIES_STROKE", "SCOPING_SERIES_NO", "SCOPING_SERIES_COLOR", "SCOPING_SERIES_NO", "entry", "iteration", "ZERO", "hourEntryList", "iteration", "dailySpentEffortList", "hourEntryList", "dailySpentEffortList", "hourEntryList", "dailySpentEffortList", "hourEntryList", "iterationHistoryEntryBusiness", "iterationBusiness", "hourEntryBusiness", "settingBusiness", "iteration", "REFERENCE_SERIES_NAME", "EFFORT_LEFT_SERIES_NAME", "CURRENT_DAY_EFFORT_LEFT_SERIES_NAME", "SCOPING_SERIES_NAME", "iterationHistoryEntryBusiness", "iterationBusiness", "entry1", "entriesList", "entriesList", "entriesList", "entriesList", "forecomingEntry", "entriesList", "emptyList", "entriesList", "iteration", "iterationHistoryEntryBusiness", "entriesList", "iteration", "iterationHistoryEntryBusiness", "startEntry", "endEntry", "startEntry", "endEntry", "startEntry", "endEntry", "startEntry", "endEntry", "settingBusiness", "startDate", "endDate", "originalEstimateSum", "settingBusiness", "REFERENCE_SERIES_NAME", "settingBusiness", "startDate", "endDate", "originalEstimateSum", "settingBusiness", "REFERENCE_SERIES_NAME", "iterationHistoryEntryBusiness", "entriesList", "startInstant", "secondInstant", "endInstant", "afterEndInstant", "iterationHistoryEntryBusiness", "firstEntry", "secondEntry", "thirdEntry", "entries", "entry1", "startEntry", "endEntry", "estimatedValue", "entryWithoutScoping", "entryWithScoping", "startEntry", "endEntry", "actualSeries", "expectedStartValue", "expectedEndvalue", "CURRENT_DAY_EFFORT_LEFT_SERIES_NAME", "expectedStartValue", "firstEntry", "secondEntry", "thirdEntry", "entries", "SCOPING_SERIES_NAME", "value1", "value2", "actualSeries", "value1", "value2", "startEntry", "endEntry", "expectedFirstValue", "expectedSecondValue", "value1", "value2", "timeSeries", "expectedInstant", "expectedValue", "timeSeries", "timeSeries"], "SCS_ClassReference": ["", "IterationHistoryEntryBusiness", "iterationBurndownBusiness", "", "IterationBusiness", "iterationBurndownBusiness", "", "HourEntryBusiness", "iterationBurndownBusiness", "", "SettingBusiness", "iterationBurndownBusiness", "iteration", "iteration", "iteration", "ChartFactory", "entry", "entry", "entry1", "startDate", "entry1", "entry1", "entry2", "startDate", null, "entry2", "entry2", "Arrays", "", null, "Arrays", "iterationHistoryEntryBusiness", "", null, "iterationHistoryEntryBusiness", "", "LocalDate", "", "ExactEstimate", "", "ExactEstimate", "", null, "iterationBusiness", "", "LocalDate", "", "LocalDate", "", "IterationHistoryEntry", "", null, "hourEntryBusiness", "", null, "hourEntryBusiness", "", null, "hourEntryBusiness", "iteration", null, "iteration", null, "", null, "hourEntryBusiness", "iteration", null, null, null, null, "", null, "hourEntryBusiness", "iteration", null, null, null, "", null, "settingBusiness", "", null, "settingBusiness", "", null, "settingBusiness", "", "", "iterationBurndownBusiness", "", "", null, "Arrays", "iterationHistoryEntryBusiness", "", null, "iterationHistoryEntryBusiness", "", "LocalDate", "", "ExactEstimate", "", "ExactEstimate", "", null, "iterationBusiness", "", "LocalDate", "", "LocalDate", "", "IterationHistoryEntry", "", null, "hourEntryBusiness", "", null, "hourEntryBusiness", "iteration", null, "iteration", null, "", null, "hourEntryBusiness", "iteration", null, null, null, null, "", null, "hourEntryBusiness", "iteration", null, null, null, "", null, "settingBusiness", "", null, "settingBusiness", "", null, "settingBusiness", "", "", "iterationBurndownBusiness", "", "", null, "Arrays", "iterationHistoryEntryBusiness", "", null, "iterationHistoryEntryBusiness", "", "LocalDate", "", "ExactEstimate", "", "ExactEstimate", "", null, "iterationBusiness", "", "LocalDate", "", "LocalDate", "", "IterationHistoryEntry", "", null, "hourEntryBusiness", "", null, "hourEntryBusiness", "iteration", null, "iteration", null, "", null, "hourEntryBusiness", "iteration", null, null, null, null, "", null, "hourEntryBusiness", "iteration", null, null, null, "", null, "settingBusiness", "", null, "settingBusiness", "", null, "settingBusiness", "", "", "iterationBurndownBusiness", "", "", null, "Arrays", "iterationHistoryEntryBusiness", "", null, "iterationHistoryEntryBusiness", "", "LocalDate", "", "ExactEstimate", "", "ExactEstimate", "", null, "iterationBusiness", "", "LocalDate", "", "LocalDate", "", "IterationHistoryEntry", "", null, "hourEntryBusiness", "", null, "hourEntryBusiness", "iteration", null, "iteration", null, "", null, "hourEntryBusiness", "iteration", null, null, null, null, "", null, "hourEntryBusiness", "iteration", null, null, null, "", null, "settingBusiness", "", null, "settingBusiness", "", null, "settingBusiness", "", "", "newChart", null, null, "", "newChart", null, null, "", "newChart", null, null, "", "newChart", null, null, "", "newChart", null, null, "", "newChart", null, null, "", "", null, "Arrays", "iterationHistoryEntryBusiness", "", null, "iterationHistoryEntryBusiness", "", "LocalDate", "", "ExactEstimate", "", "ExactEstimate", "", null, "iterationBusiness", "", "LocalDate", "", "LocalDate", "", "IterationHistoryEntry", "", null, "hourEntryBusiness", "", null, "hourEntryBusiness", "iteration", null, "iteration", null, "", null, "hourEntryBusiness", "iteration", null, null, null, null, "", null, "hourEntryBusiness", "iteration", null, null, null, "", null, "settingBusiness", "", null, "settingBusiness", "", null, "settingBusiness", "", "", "newChart", null, null, "", "newChart", null, null, "", "newChart", null, null, "", "newChart", null, null, "", "newChart", null, null, "", "newChart", null, null, "", "", "", "chart", null, "chart", "chart", null, "", "rend", "", "rend", "", "rend", "", "rend", "", "rend", "", "rend", "", "rend", "", "rend", "", "rend", "", "rend", "", "rend", "", "rend", "", "plot", null, "", "plot", null, "", "plot", "", "plot", "", "rend", "", "rend", "", "rend", "", "rend", "", "rend", "", "rend", "", "plot", null, "", "plot", null, "", "chart", "", "chart", null, "", "startDate", null, "actualAxis", "", "endDate", null, null, "actualAxis", "", "chart", null, "", "chart", null, "", "chart", "", "chart", null, "", "chart", "", "rend", "", "rend", "", "rend", "", "rend", "", "rend", "", "rend", "", "rend", "", "rend", "", "rend", "", "rend", "", "rend", "", "rend", "", "rend", "", "rend", "", "rend", "", "rend", "", "rend", "", "rend", "", "rend", "", null, "Arrays", "iterationHistoryEntryBusiness", "", null, "iterationHistoryEntryBusiness", "", "LocalDate", "", "ExactEstimate", "", "ExactEstimate", "", null, "iterationBusiness", "", "LocalDate", "", "LocalDate", "", "IterationHistoryEntry", "", null, "hourEntryBusiness", "", null, "hourEntryBusiness", "iteration", null, "iteration", null, "", null, "hourEntryBusiness", "iteration", null, null, null, null, "", null, "hourEntryBusiness", "iteration", null, null, null, "", null, "settingBusiness", "", null, "settingBusiness", "", "", "actualTimeSeries", "", "actualTimeSeries", "", "actualTimeSeries", "", "actualTimeSeries", "", "", null, "", null, "", null, null, "", "entry1", "entry2", "entry2", null, "", "entry2", "actualEntry", "", "entry2", "actualEntry", "", "actualEntry", "entry2", "entry2", null, "", "entry2", "actualEntry", "", "entry2", "actualEntry", "", "actualEntry", "forecomingEntry", null, "newEntries", "newEntries", "entry2", "entry2", null, "", "entry2", "actualEntry", "", "entry2", "actualEntry", "", "actualEntry", "startDate", "", "actualEntry", "", "actualEntry", "", "actualEntry", "", null, "iterationHistoryEntryBusiness", "", "", "", "startEntry", "startEntry", "startEntry", "startEntry", "endEntry", "endEntry", "endEntry", "endEntry", "", "", null, "", "endEntry", "endEntry", "", null, "", "endEntry", "endEntry", "", null, "startDate", "endDate", null, "", null, "settingBusiness", "", "", "", "actualSeries", "", "startPoint", "actualSeries", null, "", "startPoint", "actualSeries", null, "", "endPoint", "actualSeries", null, "", "endPoint", "actualSeries", null, "startDate", "endDate", null, null, "", null, "settingBusiness", "", "", "", "actualSeries", "", "startPoint", "actualSeries", null, "", "startPoint", "actualSeries", null, "", "endPoint", "actualSeries", null, "actualSeries", "", "endPoint", "actualSeries", null, "actualSeries", "", "startDate", "endDate", "startDate", null, null, "startDate", null, null, "endDate", null, "endDate", null, null, "", "ExactEstimateUtils", "entry1", "actualSeries", null, "", "ExactEstimateUtils", "entry2", "actualSeries", null, "", "ExactEstimateUtils", "entry2", "actualSeries", null, "", "actualSeries", "", "firstEntry", "startTime", "firstEntry", "firstEntry", "secondEntry", "startTime", null, "secondEntry", "secondEntry", "thirdEntry", "startTime", null, "thirdEntry", "thirdEntry", "Arrays", "startTime", "startTime", null, "", "actualSeries", "", "ExactEstimateUtils", "entry1", "actualItem", "", "startEntry", "endEntry", "startEntry", "endEntry", "", "scopedEntries", "scopedEntries", "", "expectedTimestamp", null, "nullEntry", "", "nullEntry", "", "expectedTimestamp", "actualEntry", "", "ExactEstimateUtils", "actualEntry", "entryWithScoping", "", "", "", "endEntry", "endEntry", "endEntry", "endEntry", "startEntry", "endEntry", "endEntry", "", "", "actualSeries", "", "ExactEstimateUtils", "actualSeries", null, "firstEntry", "startTime", "firstEntry", "firstEntry", "secondEntry", "startTime", null, "secondEntry", "secondEntry", "thirdEntry", "startTime", null, "thirdEntry", "thirdEntry", "Arrays", "startDate", "startTime", null, "", "actualSeries", "", "actualSeries", "entry1", "entry2", "entry1", null, null, "entry2", null, null, "", "", "actualSeries", "", "startEntry", "endEntry", "startEntry", "endEntry", "actualItems", "actualItems", "actualItems", "", "expectedTimestamp", "firstItem", "", "ExactEstimateUtils", "firstItem", "", "expectedTimestamp", null, "secondItem", "", "ExactEstimateUtils", "secondItem", "", "expectedTimestamp", null, "nullItem", "", "nullItem", "", "ExactEstimateUtils", "series", null, "", "ExactEstimateUtils", "series", null, "", "TimeSeries", "", null, "timeSeries", null, "", null, ""], "SCS_MethodInvocation": ["createMock", "setIterationHistoryEntryBusiness", "createMock", "setIterationBusiness", "createMock", "setHourEntryBusiness", "createMock", "setSettingBusiness", "setId", "setStartDate", "setEndDate", "createTimeSeriesChart", "setTimestamp", "setEffortLeftSum", "setTimestamp", "toLocalDate", "setEffortLeftSum", "setOriginalEstimateSum", "setTimestamp", "plusDays", "toLocalDate", "setEffortLeftSum", "setOriginalEstimateSum", "asList", "expect", "andReturn", "asList", "getHistoryEntriesForIteration", "expect", "andReturn", "calculateExpectedEffortDoneDate", "isA", "isA", "isA", "expect", "andReturn", "calculateDailyVelocity", "isA", "isA", "isA", "expect", "andReturn", "getDailySpentEffortByIteration", "expect", "andReturn", "getHourEntriesForIteration", "expect", "andReturn", "getDailySpentEffortForHourEntries", "getStartDate", "minusDays", "getEndDate", "plusDays", "expect", "andReturn", "getDailySpentEffortForHourEntries", "getStartDate", "minusDays", "toDateMidnight", "toDateTime", "plusDays", "expect", "andReturn", "getDailySpentEffortForHourEntries", "getStartDate", "toDateMidnight", "toDateTime", "plusDays", "expect", "andReturn", "isWeekendsInBurndown", "expect", "andReturn", "isHourReportingEnabled", "expect", "andReturn", "isHourReportingEnabled", "replay", "assertNotNull", "getIterationBurndown", "verify", "expect", "andReturn", "asList", "getHistoryEntriesForIteration", "expect", "andReturn", "calculateExpectedEffortDoneDate", "isA", "isA", "isA", "expect", "andReturn", "calculateDailyVelocity", "isA", "isA", "isA", "expect", "andReturn", "getHourEntriesForIteration", "expect", "andReturn", "getDailySpentEffortForHourEntries", "getStartDate", "minusDays", "getEndDate", "plusDays", "expect", "andReturn", "getDailySpentEffortForHourEntries", "getStartDate", "minusDays", "toDateMidnight", "toDateTime", "plusDays", "expect", "andReturn", "getDailySpentEffortForHourEntries", "getStartDate", "toDateMidnight", "toDateTime", "plusDays", "expect", "andReturn", "isWeekendsInBurndown", "expect", "andReturn", "isHourReportingEnabled", "expect", "andReturn", "isHourReportingEnabled", "replay", "assertNotNull", "getSmallIterationBurndown", "verify", "expect", "andReturn", "asList", "getHistoryEntriesForIteration", "expect", "andReturn", "calculateExpectedEffortDoneDate", "isA", "isA", "isA", "expect", "andReturn", "calculateDailyVelocity", "isA", "isA", "isA", "expect", "andReturn", "getHourEntriesForIteration", "expect", "andReturn", "getDailySpentEffortForHourEntries", "getStartDate", "minusDays", "getEndDate", "plusDays", "expect", "andReturn", "getDailySpentEffortForHourEntries", "getStartDate", "minusDays", "toDateMidnight", "toDateTime", "plusDays", "expect", "andReturn", "getDailySpentEffortForHourEntries", "getStartDate", "toDateMidnight", "toDateTime", "plusDays", "expect", "andReturn", "isWeekendsInBurndown", "expect", "andReturn", "isHourReportingEnabled", "expect", "andReturn", "isHourReportingEnabled", "replay", "assertNotNull", "getCustomIterationBurndown", "verify", "expect", "andReturn", "asList", "getHistoryEntriesForIteration", "expect", "andReturn", "calculateExpectedEffortDoneDate", "isA", "isA", "isA", "expect", "andReturn", "calculateDailyVelocity", "isA", "isA", "isA", "expect", "andReturn", "getHourEntriesForIteration", "expect", "andReturn", "getDailySpentEffortForHourEntries", "getStartDate", "minusDays", "getEndDate", "plusDays", "expect", "andReturn", "getDailySpentEffortForHourEntries", "getStartDate", "minusDays", "toDateMidnight", "toDateTime", "plusDays", "expect", "andReturn", "getDailySpentEffortForHourEntries", "getStartDate", "toDateMidnight", "toDateTime", "plusDays", "expect", "andReturn", "isWeekendsInBurndown", "expect", "andReturn", "isHourReportingEnabled", "expect", "andReturn", "isHourReportingEnabled", "replay", "assertEquals", "getXYPlot", "getDataset", "getSeriesKey", "assertEquals", "getXYPlot", "getDataset", "getSeriesKey", "assertEquals", "getXYPlot", "getDataset", "getSeriesKey", "assertEquals", "getXYPlot", "getDataset", "getSeriesKey", "assertEquals", "getXYPlot", "getDataset", "getSeriesKey", "assertEquals", "getXYPlot", "getDataset", "getSeriesKey", "verify", "expect", "andReturn", "asList", "getHistoryEntriesForIteration", "expect", "andReturn", "calculateExpectedEffortDoneDate", "isA", "isA", "isA", "expect", "andReturn", "calculateDailyVelocity", "isA", "isA", "isA", "expect", "andReturn", "getHourEntriesForIteration", "expect", "andReturn", "getDailySpentEffortForHourEntries", "getStartDate", "minusDays", "getEndDate", "plusDays", "expect", "andReturn", "getDailySpentEffortForHourEntries", "getStartDate", "minusDays", "toDateMidnight", "toDateTime", "plusDays", "expect", "andReturn", "getDailySpentEffortForHourEntries", "getStartDate", "toDateMidnight", "toDateTime", "plusDays", "expect", "andReturn", "isWeekendsInBurndown", "expect", "andReturn", "isHourReportingEnabled", "expect", "andReturn", "isHourReportingEnabled", "replay", "assertEquals", "getXYPlot", "getDataset", "getSeriesKey", "assertEquals", "getXYPlot", "getDataset", "getSeriesKey", "assertEquals", "getXYPlot", "getDataset", "getSeriesKey", "assertEquals", "getXYPlot", "getDataset", "getSeriesKey", "assertEquals", "getXYPlot", "getDataset", "getSeriesKey", "assertEquals", "getXYPlot", "getDataset", "getSeriesKey", "testSmallChartFormating", "verify", "assertEquals", "getPlot", "getBackgroundPaint", "getXYPlot", "getXYPlot", "getRenderer", "assertEquals", "getSeriesPaint", "assertEquals", "getSeriesPaint", "assertEquals", "getSeriesPaint", "assertEquals", "getSeriesPaint", "assertEquals", "getSeriesPaint", "assertEquals", "getSeriesPaint", "assertEquals", "getSeriesStroke", "assertEquals", "getSeriesStroke", "assertEquals", "getSeriesStroke", "assertEquals", "getSeriesStroke", "assertEquals", "getSeriesStroke", "assertEquals", "getSeriesStroke", "assertFalse", "getDomainAxis", "isVisible", "assertFalse", "getRangeAxis", "isVisible", "assertFalse", "isDomainGridlinesVisible", "assertFalse", "isRangeGridlinesVisible", "assertFalse", "getSeriesShapesVisible", "assertFalse", "getSeriesShapesVisible", "assertFalse", "getSeriesShapesVisible", "assertFalse", "getSeriesShapesVisible", "assertFalse", "getSeriesShapesVisible", "assertFalse", "getSeriesShapesVisible", "assertEquals", "getDomainAxis", "getLabel", "assertEquals", "getRangeAxis", "getLabel", "assertNull", "getLegend", "testSmallChartFormating", "getXYPlot", "getDomainAxis", "assertEquals", "toDateMidnight", "toDate", "getMinimumDate", "assertEquals", "plusDays", "toDateMidnight", "toDate", "getMaximumDate", "assertEquals", "getXYPlot", "getRangeGridlinePaint", "assertEquals", "getXYPlot", "getDomainGridlinePaint", "assertEquals", "getBackgroundPaint", "assertEquals", "getPlot", "getBackgroundPaint", "testSetSeriesStyles", "getPlot", "assertEquals", "getSeriesPaint", "assertEquals", "getSeriesShape", "assertEquals", "getSeriesShapesVisible", "assertEquals", "getSeriesPaint", "assertEquals", "getSeriesShape", "assertEquals", "getSeriesShapesVisible", "assertEquals", "getSeriesPaint", "assertEquals", "getSeriesPaint", "assertEquals", "getSeriesStroke", "assertEquals", "getSeriesShape", "assertEquals", "getSeriesShapesVisible", "assertEquals", "getSeriesShapesFilled", "assertEquals", "getSeriesPaint", "assertEquals", "getSeriesStroke", "assertEquals", "getSeriesShape", "assertEquals", "getSeriesShapesVisible", "assertEquals", "getSeriesShapesFilled", "assertEquals", "getSeriesStroke", "assertEquals", "getSeriesPaint", "expect", "andReturn", "asList", "getHistoryEntriesForIteration", "expect", "andReturn", "calculateExpectedEffortDoneDate", "isA", "isA", "isA", "expect", "andReturn", "calculateDailyVelocity", "isA", "isA", "isA", "expect", "andReturn", "getHourEntriesForIteration", "expect", "andReturn", "getDailySpentEffortForHourEntries", "getStartDate", "minusDays", "getEndDate", "plusDays", "expect", "andReturn", "getDailySpentEffortForHourEntries", "getStartDate", "minusDays", "toDateMidnight", "toDateTime", "plusDays", "expect", "andReturn", "getDailySpentEffortForHourEntries", "getStartDate", "toDateMidnight", "toDateTime", "plusDays", "expect", "andReturn", "isWeekendsInBurndown", "expect", "andReturn", "isHourReportingEnabled", "replay", "assertNotNull", "getSeries", "assertNotNull", "getSeries", "assertNotNull", "getSeries", "assertNotNull", "getSeries", "verify", "assertEquals", "plusDays", "assertEquals", "plusDays", "assertEquals", "minusDays", "minusDays", "assertEquals", "getTimestamp", "setDeltaOriginalEstimate", "getTimestamp", "plusDays", "assertEquals", "getOriginalEstimateSum", "getOriginalEstimateSum", "assertEquals", "getEffortLeftSum", "getEffortLeftSum", "assertEquals", "getDeltaOriginalEstimate", "setDeltaOriginalEstimate", "getTimestamp", "plusDays", "assertEquals", "getOriginalEstimateSum", "getOriginalEstimateSum", "assertEquals", "getEffortLeftSum", "getEffortLeftSum", "assertEquals", "getDeltaOriginalEstimate", "setTimestamp", "plusDays", "addAll", "add", "setDeltaOriginalEstimate", "getTimestamp", "plusDays", "assertEquals", "getOriginalEstimateSum", "getOriginalEstimateSum", "assertEquals", "getEffortLeftSum", "getEffortLeftSum", "assertEquals", "getDeltaOriginalEstimate", "toLocalDate", "assertEquals", "getEffortLeftSum", "assertEquals", "getOriginalEstimateSum", "assertEquals", "getDeltaOriginalEstimate", "expect", "andReturn", "getHistoryEntriesForIteration", "replay", "assertSame", "verify", "setOriginalEstimateSum", "setEffortLeftSum", "setDeltaOriginalEstimate", "setTimestamp", "setOriginalEstimateSum", "setEffortLeftSum", "setDeltaOriginalEstimate", "setTimestamp", "initializeEntriesForScopingTest", "assertEquals", "getMinorUnits", "initializeEntriesForScopingTest", "setDeltaOriginalEstimate", "setOriginalEstimateSum", "assertEquals", "getMinorUnits", "initializeEntriesForScopingTest", "setDeltaOriginalEstimate", "setOriginalEstimateSum", "assertEquals", "getMinorUnits", "toDate", "plusDays", "toDate", "expect", "andReturn", "isWeekendsInBurndown", "replay", "verify", "assertEquals", "getKey", "assertEquals", "getValue", "getDataItem", "getValue", "assertEquals", "getPeriod", "getDataItem", "getPeriod", "assertEquals", "getValue", "getDataItem", "getValue", "assertEquals", "getPeriod", "getDataItem", "getPeriod", "toDate", "toDateMidnight", "plusDays", "toDate", "expect", "andReturn", "isWeekendsInBurndown", "replay", "verify", "assertEquals", "getKey", "assertEquals", "getValue", "getDataItem", "getValue", "assertEquals", "getPeriod", "getDataItem", "getPeriod", "assertEquals", "getValue", "getDataItem", "getValue", "getItemCount", "assertEquals", "getPeriod", "getDataItem", "getPeriod", "getItemCount", "replay", "toLocalDate", "toLocalDate", "plusDays", "toDateMidnight", "toDate", "plusDays", "toDateMidnight", "toDate", "toDateMidnight", "toDate", "plusDays", "toDateMidnight", "toDate", "assertEquals", "extractMajorUnits", "getEffortLeftSum", "getDataItem", "getValue", "assertEquals", "extractMajorUnits", "getEffortLeftSum", "getDataItem", "getValue", "assertEquals", "extractMajorUnits", "getEffortLeftSum", "getDataItem", "getValue", "assertNull", "getDataItem", "verify", "setTimestamp", "toLocalDate", "setOriginalEstimateSum", "setDeltaOriginalEstimate", "setTimestamp", "plusDays", "toLocalDate", "setOriginalEstimateSum", "setDeltaOriginalEstimate", "setTimestamp", "plusDays", "toLocalDate", "setOriginalEstimateSum", "setDeltaOriginalEstimate", "asList", "toLocalDate", "toLocalDate", "plusDays", "assertEquals", "getItemCount", "assertEquals", "extractMajorUnits", "getEffortLeftSum", "getValue", "initializeEntriesForScopingTest", "setTimestamp", "setTimestamp", "setEffortLeftSum", "setDeltaOriginalEstimate", "getBurndownScopedDataItemForDay", "getFirst", "getSecond", "assertEquals", "minusSeconds", "toDate", "getPeriod", "assertEquals", "getValue", "assertEquals", "toDate", "getPeriod", "assertEquals", "extractMajorUnits", "getValue", "setDeltaOriginalEstimate", "assertFalse", "assertTrue", "initializeEntriesForScopingTest", "setOriginalEstimateSum", "getOriginalEstimateSum", "setEffortLeftSum", "getEffortLeftSum", "getEffortLeftSum", "getDeltaOriginalEstimate", "getEffortLeftSum", "testSeriesStartAndEndCorrect", "assertEquals", "getKey", "assertEquals", "extractMajorUnits", "getDataItem", "getValue", "setTimestamp", "toLocalDate", "setOriginalEstimateSum", "setDeltaOriginalEstimate", "setTimestamp", "plusDays", "toLocalDate", "setOriginalEstimateSum", "setDeltaOriginalEstimate", "setTimestamp", "plusDays", "toLocalDate", "setOriginalEstimateSum", "setDeltaOriginalEstimate", "asList", "toLocalDate", "plusDays", "toLocalDate", "assertEquals", "getKey", "assertEquals", "getItemCount", "getEffortLeftSum", "getEffortLeftSum", "getTimestamp", "toDateMidnight", "toDateTime", "getTimestamp", "toDateMidnight", "toDateTime", "testSeriesStartAndEndCorrect", "assertEquals", "getKey", "initializeEntriesForScopingTest", "setTimestamp", "setTimestamp", "setEffortLeftSum", "setDeltaOriginalEstimate", "get", "get", "get", "assertEquals", "toDate", "getPeriod", "assertEquals", "extractMajorUnits", "getValue", "assertEquals", "plusSeconds", "toDate", "getPeriod", "assertEquals", "extractMajorUnits", "getValue", "assertEquals", "plusSeconds", "toDate", "getPeriod", "assertNull", "getValue", "assertEquals", "extractMajorUnits", "getDataItem", "getValue", "assertEquals", "extractMajorUnits", "getDataItem", "getValue", "createMock", "expect", "andReturn", "addOrUpdate", "toDate", "replay", "addTimeSeriesItem", "verify"], "SCS_VariableDeclaration": ["JFreeChart", "JFreeChart", "XYPlot", "XYLineAndShapeRenderer", "JFreeChart", "DateAxis", "XYLineAndShapeRenderer", "TimeSeriesCollection", "IterationHistoryEntry", "IterationHistoryEntry", "IterationHistoryEntry", "List", "IterationHistoryEntry", "List", "IterationHistoryEntry", "TimeSeriesDataItem", "TimeSeriesDataItem", "TimeSeries", "TimeSeriesDataItem", "TimeSeriesDataItem", "TimeSeries", "TimeSeries", "Second", "Second", "Second", "Second", "DateTime", "IterationHistoryEntry", "IterationHistoryEntry", "IterationHistoryEntry", "List", "TimeSeries", "TimeSeriesDataItem", "DateTime", "Pair", "TimeSeriesDataItem", "TimeSeriesDataItem", "ExactEstimate", "IterationHistoryEntry", "IterationHistoryEntry", "ExactEstimate", "ExactEstimate", "TimeSeries", "DateTime", "IterationHistoryEntry", "IterationHistoryEntry", "IterationHistoryEntry", "List", "TimeSeries", "ExactEstimate", "ExactEstimate", "TimeSeries", "DateTime", "List", "TimeSeriesDataItem", "TimeSeriesDataItem", "TimeSeriesDataItem", "ExactEstimate", "ExactEstimate", "ExactEstimate", "DateTime", "TimeSeries"], "CO": ["/**\n * Test class for <code>IterationBurndownBusiness</code>.\n * <p>\n * Extends the class to be able to test protected methods.\n * \n * @author rjokelai, jsorvett, ahoffman\n *\n */", "// TODO: Verify hourEntryBusiness", "// TODO: Verify hourEntryBusiness", "// TODO: Verify hourEntryBusiness", "// TODO: Verify hourEntryBusiness", "// TODO: Verify hourEntryBusiness", "// TODO: Verify hourEntryBusiness"], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport static org.easymock.classextension.EasyMock.*;\nimport static org.junit.Assert.*;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport org.jfree.chart.ChartFactory;\nimport org.jfree.chart.JFreeChart;\nimport org.jfree.chart.axis.DateAxis;\nimport org.jfree.chart.plot.XYPlot;\nimport org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;\nimport org.jfree.data.time.Second;\nimport org.jfree.data.time.TimeSeries;\nimport org.jfree.data.time.TimeSeriesCollection;\nimport org.jfree.data.time.TimeSeriesDataItem;\nimport org.joda.time.DateTime;\nimport org.joda.time.LocalDate;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport fi.hut.soberit.agilefant.business.impl.IterationBurndownBusinessImpl;\nimport fi.hut.soberit.agilefant.model.ExactEstimate;\nimport fi.hut.soberit.agilefant.model.HourEntry;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.IterationHistoryEntry;\nimport fi.hut.soberit.agilefant.transfer.DailySpentEffort;\nimport fi.hut.soberit.agilefant.util.ExactEstimateUtils;\nimport fi.hut.soberit.agilefant.util.Pair;\n\n/**\n * Test class for <code>IterationBurndownBusiness</code>.\n * <p>\n * Extends the class to be able to test protected methods.\n * \n * @author rjokelai, jsorvett, ahoffman\n *\n */\npublic class IterationBurndownBusinessTest extends IterationBurndownBusinessImpl {\n\n    IterationBurndownBusinessImpl iterationBurndownBusiness;\n    IterationHistoryEntryBusiness iterationHistoryEntryBusiness;\n    HourEntryBusiness hourEntryBusiness;\n    IterationBusiness iterationBusiness;\n    SettingBusiness settingBusiness;\n    \n    Iteration iteration;\n    DateTime startDate;\n    DateTime endDate;\n    ExactEstimate originalEstimateSum;\n    IterationHistoryEntry entry;\n    JFreeChart chart;\n    \n    List<DailySpentEffort> dailySpentEffortList;\n    List<HourEntry> hourEntryList;\n    \n    IterationHistoryEntry entry1;\n    IterationHistoryEntry entry2;\n    List<IterationHistoryEntry> entriesList;\n    \n    IterationHistoryEntry startEntry;\n    IterationHistoryEntry endEntry;\n       \n    @Before\n    public void setUp() {\n        iterationBurndownBusiness = new IterationBurndownBusinessImpl();\n        iterationHistoryEntryBusiness = createMock(IterationHistoryEntryBusiness.class);\n        iterationBurndownBusiness.setIterationHistoryEntryBusiness(iterationHistoryEntryBusiness);\n        super.setIterationHistoryEntryBusiness(iterationHistoryEntryBusiness);\n        \n        iterationBusiness = createMock(IterationBusiness.class);\n        iterationBurndownBusiness.setIterationBusiness(iterationBusiness);\n        super.setIterationBusiness(iterationBusiness);\n        \n        hourEntryBusiness = createMock(HourEntryBusiness.class);\n        iterationBurndownBusiness.setHourEntryBusiness(hourEntryBusiness);\n        super.setHourEntryBusiness(hourEntryBusiness);\n        \n        settingBusiness = createMock(SettingBusiness.class);\n        iterationBurndownBusiness.setSettingBusiness(settingBusiness);\n        super.setSettingBusiness(settingBusiness);\n        \n        startDate = new DateTime(2009,1,1,0,0,0,0);\n        endDate = new DateTime(2009,1,10,0,0,0,0);\n        iteration = new Iteration();\n        iteration.setId(123);\n        iteration.setStartDate(startDate);\n        iteration.setEndDate(endDate);\n        originalEstimateSum = new ExactEstimate(100 * 60);\n        \n        chart = ChartFactory.createTimeSeriesChart(EFFORT_LEFT_SERIES_NAME,\n                DATE_AXIS_LABEL,\n                EFFORT_AXIS_LABEL,\n                null, true, true, false);\n        \n        entry = new IterationHistoryEntry();\n        entry.setTimestamp(new LocalDate(2009,1,1));\n        entry.setEffortLeftSum(240);\n        \n        \n        entry1 = new IterationHistoryEntry();\n        entry1.setTimestamp(startDate.toLocalDate());\n        entry1.setEffortLeftSum(100);\n        entry1.setOriginalEstimateSum(100);\n        entry2 = new IterationHistoryEntry();\n        entry2.setTimestamp(startDate.plusDays(1).toLocalDate());\n        entry2.setEffortLeftSum(0);\n        entry2.setOriginalEstimateSum(100);\n        \n        entriesList = Arrays.asList(entry1, entry2);\n        \n        dailySpentEffortList = new ArrayList<DailySpentEffort>();\n        hourEntryList = new ArrayList<HourEntry>();\n        \n        \n    }\n    \n    @Test\n    public void testGetIterationBurndown() {\n        expect(iterationHistoryEntryBusiness.getHistoryEntriesForIteration(iteration)).andReturn(Arrays.asList(entry));\n        expect(iterationHistoryEntryBusiness.calculateExpectedEffortDoneDate(isA(LocalDate.class), isA(ExactEstimate.class), isA(ExactEstimate.class))).andReturn(null);\n        \n        expect(iterationBusiness.calculateDailyVelocity(isA(LocalDate.class), isA(LocalDate.class), isA(IterationHistoryEntry.class))).andReturn(ExactEstimate.ZERO);\n        \n        expect(hourEntryBusiness.getDailySpentEffortByIteration(iteration)).andReturn(dailySpentEffortList);\n        expect(hourEntryBusiness.getHourEntriesForIteration(iteration)).andReturn(hourEntryList);\n        expect(hourEntryBusiness.getDailySpentEffortForHourEntries(hourEntryList, iteration.getStartDate().minusDays(1), iteration.getEndDate().plusDays(1))).andReturn(dailySpentEffortList);\n        expect(hourEntryBusiness.getDailySpentEffortForHourEntries(hourEntryList, iteration.getStartDate().minusDays(1), new DateTime().toDateMidnight().toDateTime().plusDays(1))).andReturn(dailySpentEffortList);\n        expect(hourEntryBusiness.getDailySpentEffortForHourEntries(hourEntryList, iteration.getStartDate(), new DateTime().toDateMidnight().toDateTime().plusDays(1))).andReturn(dailySpentEffortList);\n        \n        expect(settingBusiness.isWeekendsInBurndown()).andReturn(true);\n        expect(settingBusiness.isHourReportingEnabled()).andReturn(true);\n        expect(settingBusiness.isHourReportingEnabled()).andReturn(true);\n        replay(iterationHistoryEntryBusiness, iterationBusiness, hourEntryBusiness, settingBusiness);\n        \n        assertNotNull(iterationBurndownBusiness.getIterationBurndown(iteration, 0));\n        \n        // TODO: Verify hourEntryBusiness\n        verify(iterationHistoryEntryBusiness, iterationBusiness);\n    }\n    \n    @Test\n    public void testGetSmallIterationBurndown() {\n        expect(iterationHistoryEntryBusiness.getHistoryEntriesForIteration(iteration)).andReturn(Arrays.asList(entry));\n        expect(iterationHistoryEntryBusiness.calculateExpectedEffortDoneDate(isA(LocalDate.class), isA(ExactEstimate.class), isA(ExactEstimate.class))).andReturn(null);\n        \n        expect(iterationBusiness.calculateDailyVelocity(isA(LocalDate.class), isA(LocalDate.class), isA(IterationHistoryEntry.class))).andReturn(ExactEstimate.ZERO);\n        \n        expect(hourEntryBusiness.getHourEntriesForIteration(iteration)).andReturn(hourEntryList);\n        expect(hourEntryBusiness.getDailySpentEffortForHourEntries(hourEntryList, iteration.getStartDate().minusDays(1), iteration.getEndDate().plusDays(1))).andReturn(dailySpentEffortList);\n        expect(hourEntryBusiness.getDailySpentEffortForHourEntries(hourEntryList, iteration.getStartDate().minusDays(1), new DateTime().toDateMidnight().toDateTime().plusDays(1))).andReturn(dailySpentEffortList);\n        expect(hourEntryBusiness.getDailySpentEffortForHourEntries(hourEntryList, iteration.getStartDate(), new DateTime().toDateMidnight().toDateTime().plusDays(1))).andReturn(dailySpentEffortList);\n        \n        expect(settingBusiness.isWeekendsInBurndown()).andReturn(true);\n        expect(settingBusiness.isHourReportingEnabled()).andReturn(true);\n        expect(settingBusiness.isHourReportingEnabled()).andReturn(true);\n        replay(iterationHistoryEntryBusiness, iterationBusiness, hourEntryBusiness, settingBusiness);\n\n        assertNotNull(iterationBurndownBusiness.getSmallIterationBurndown(iteration, 0));\n\n        // TODO: Verify hourEntryBusiness\n        verify(iterationHistoryEntryBusiness, iterationBusiness);\n    }\n    \n    @Test\n    public void testCustomIterationBurndown() {\n        expect(iterationHistoryEntryBusiness.getHistoryEntriesForIteration(iteration)).andReturn(Arrays.asList(entry));\n        expect(iterationHistoryEntryBusiness.calculateExpectedEffortDoneDate(isA(LocalDate.class), isA(ExactEstimate.class), isA(ExactEstimate.class))).andReturn(null);\n        \n        expect(iterationBusiness.calculateDailyVelocity(isA(LocalDate.class), isA(LocalDate.class), isA(IterationHistoryEntry.class))).andReturn(ExactEstimate.ZERO);\n        \n        expect(hourEntryBusiness.getHourEntriesForIteration(iteration)).andReturn(hourEntryList);\n        expect(hourEntryBusiness.getDailySpentEffortForHourEntries(hourEntryList, iteration.getStartDate().minusDays(1), iteration.getEndDate().plusDays(1))).andReturn(dailySpentEffortList);\n        expect(hourEntryBusiness.getDailySpentEffortForHourEntries(hourEntryList, iteration.getStartDate().minusDays(1), new DateTime().toDateMidnight().toDateTime().plusDays(1))).andReturn(dailySpentEffortList);\n        expect(hourEntryBusiness.getDailySpentEffortForHourEntries(hourEntryList, iteration.getStartDate(), new DateTime().toDateMidnight().toDateTime().plusDays(1))).andReturn(dailySpentEffortList);\n        \n        expect(settingBusiness.isWeekendsInBurndown()).andReturn(true);\n        expect(settingBusiness.isHourReportingEnabled()).andReturn(true);\n        expect(settingBusiness.isHourReportingEnabled()).andReturn(true);\n        replay(iterationHistoryEntryBusiness, iterationBusiness, hourEntryBusiness, settingBusiness);\n        \n        assertNotNull(iterationBurndownBusiness.getCustomIterationBurndown(iteration, 1024, 768, 0));\n        \n        // TODO: Verify hourEntryBusiness\n        verify(iterationHistoryEntryBusiness, iterationBusiness);\n    }\n    \n    @Test\n    public void testConstructChart() {\n        expect(iterationHistoryEntryBusiness.getHistoryEntriesForIteration(iteration)).andReturn(Arrays.asList(entry));\n        expect(iterationHistoryEntryBusiness.calculateExpectedEffortDoneDate(isA(LocalDate.class), isA(ExactEstimate.class), isA(ExactEstimate.class))).andReturn(null);\n        \n        expect(iterationBusiness.calculateDailyVelocity(isA(LocalDate.class), isA(LocalDate.class), isA(IterationHistoryEntry.class))).andReturn(ExactEstimate.ZERO);\n        \n        expect(hourEntryBusiness.getHourEntriesForIteration(iteration)).andReturn(hourEntryList);\n        expect(hourEntryBusiness.getDailySpentEffortForHourEntries(hourEntryList, iteration.getStartDate().minusDays(1), iteration.getEndDate().plusDays(1))).andReturn(dailySpentEffortList);\n        expect(hourEntryBusiness.getDailySpentEffortForHourEntries(hourEntryList, iteration.getStartDate().minusDays(1), new DateTime().toDateMidnight().toDateTime().plusDays(1))).andReturn(dailySpentEffortList);\n        expect(hourEntryBusiness.getDailySpentEffortForHourEntries(hourEntryList, iteration.getStartDate(), new DateTime().toDateMidnight().toDateTime().plusDays(1))).andReturn(dailySpentEffortList);\n        \n        expect(settingBusiness.isWeekendsInBurndown()).andReturn(true);\n        expect(settingBusiness.isHourReportingEnabled()).andReturn(true);\n        expect(settingBusiness.isHourReportingEnabled()).andReturn(true);\n        \n        replay(iterationHistoryEntryBusiness, iterationBusiness, hourEntryBusiness, settingBusiness);\n        \n        JFreeChart newChart = super.constructChart(iteration, 0);\n        \n        assertEquals(REFERENCE_SERIES_NAME,\n                newChart.getXYPlot().getDataset().getSeriesKey(REFERENCE_SERIES_NO));\n        assertEquals(EFFORT_LEFT_SERIES_NAME,\n                newChart.getXYPlot().getDataset().getSeriesKey(EFFORT_LEFT_SERIES_NO));\n        assertEquals(EFFORT_SPENT_SERIES_NAME,\n                newChart.getXYPlot().getDataset().getSeriesKey(EFFORT_SPENT_SERIES_NO));\n        assertEquals(CURRENT_DAY_EFFORT_SPENT_SERIES_NAME,\n                newChart.getXYPlot().getDataset().getSeriesKey(CURRENT_DAY_EFFORT_SPENT_SERIES_NO));\n        assertEquals(CURRENT_DAY_EFFORT_LEFT_SERIES_NAME,\n                newChart.getXYPlot().getDataset().getSeriesKey(CURRENT_DAY_EFFORT_LEFT_SERIES_NO));\n        assertEquals(SCOPING_SERIES_NAME,\n                newChart.getXYPlot().getDataset().getSeriesKey(SCOPING_SERIES_NO));\n        \n        // TODO: Verify hourEntryBusiness\n        verify(iterationHistoryEntryBusiness, iterationBusiness);\n    }\n    \n    @Test\n    public void testConstructSmallChart() {\n        expect(iterationHistoryEntryBusiness.getHistoryEntriesForIteration(iteration)).andReturn(Arrays.asList(entry));\n        expect(iterationHistoryEntryBusiness.calculateExpectedEffortDoneDate(isA(LocalDate.class), isA(ExactEstimate.class), isA(ExactEstimate.class))).andReturn(null);\n        \n        expect(iterationBusiness.calculateDailyVelocity(isA(LocalDate.class), isA(LocalDate.class), isA(IterationHistoryEntry.class))).andReturn(ExactEstimate.ZERO);\n        \n        expect(hourEntryBusiness.getHourEntriesForIteration(iteration)).andReturn(hourEntryList);\n        expect(hourEntryBusiness.getDailySpentEffortForHourEntries(hourEntryList, iteration.getStartDate().minusDays(1), iteration.getEndDate().plusDays(1))).andReturn(dailySpentEffortList);\n        expect(hourEntryBusiness.getDailySpentEffortForHourEntries(hourEntryList, iteration.getStartDate().minusDays(1), new DateTime().toDateMidnight().toDateTime().plusDays(1))).andReturn(dailySpentEffortList);\n        expect(hourEntryBusiness.getDailySpentEffortForHourEntries(hourEntryList, iteration.getStartDate(), new DateTime().toDateMidnight().toDateTime().plusDays(1))).andReturn(dailySpentEffortList);\n        \n        expect(settingBusiness.isWeekendsInBurndown()).andReturn(true);\n        expect(settingBusiness.isHourReportingEnabled()).andReturn(true);\n        expect(settingBusiness.isHourReportingEnabled()).andReturn(true);\n        replay(iterationHistoryEntryBusiness, iterationBusiness, hourEntryBusiness, settingBusiness);\n        \n        JFreeChart newChart = super.constructSmallChart(iteration, 0);\n        \n        assertEquals(REFERENCE_SERIES_NAME,\n                newChart.getXYPlot().getDataset().getSeriesKey(REFERENCE_SERIES_NO));\n        assertEquals(EFFORT_LEFT_SERIES_NAME,\n                newChart.getXYPlot().getDataset().getSeriesKey(EFFORT_LEFT_SERIES_NO));\n        assertEquals(EFFORT_SPENT_SERIES_NAME,\n                newChart.getXYPlot().getDataset().getSeriesKey(EFFORT_SPENT_SERIES_NO));\n        assertEquals(CURRENT_DAY_EFFORT_SPENT_SERIES_NAME,\n                newChart.getXYPlot().getDataset().getSeriesKey(CURRENT_DAY_EFFORT_SPENT_SERIES_NO));\n        assertEquals(CURRENT_DAY_EFFORT_LEFT_SERIES_NAME,\n                newChart.getXYPlot().getDataset().getSeriesKey(CURRENT_DAY_EFFORT_LEFT_SERIES_NO));\n        assertEquals(SCOPING_SERIES_NAME,\n                newChart.getXYPlot().getDataset().getSeriesKey(SCOPING_SERIES_NO));\n               \n        testSmallChartFormating(newChart);\n        \n        // TODO: Verify hourEntryBusiness\n        verify(iterationHistoryEntryBusiness, iterationBusiness);\n    }\n    \n    private void testSmallChartFormating(JFreeChart chart) {\n        assertEquals(PLOT_BACKGROUND_COLOR, chart.getPlot().getBackgroundPaint());\n       \n        XYPlot plot = chart.getXYPlot();\n        XYLineAndShapeRenderer rend = (XYLineAndShapeRenderer)chart.getXYPlot().getRenderer();\n        assertEquals(EFFORT_LEFT_SERIES_COLOR, rend.getSeriesPaint(EFFORT_LEFT_SERIES_NO));\n        assertEquals(EFFORT_SPENT_SERIES_COLOR, rend.getSeriesPaint(EFFORT_SPENT_SERIES_NO));        \n        assertEquals(EFFORT_LEFT_SERIES_COLOR, rend.getSeriesPaint(SCOPING_SERIES_NO));\n        assertEquals(EFFORT_LEFT_SERIES_COLOR, rend.getSeriesPaint(CURRENT_DAY_EFFORT_LEFT_SERIES_NO));\n        assertEquals(EFFORT_SPENT_SERIES_COLOR, rend.getSeriesPaint(CURRENT_DAY_EFFORT_SPENT_SERIES_NO));\n        assertEquals(REFERENCE_SERIES_COLOR, rend.getSeriesPaint(REFERENCE_SERIES_NO));\n        \n        assertEquals(SMALL_BURNDOWN_STROKE, rend.getSeriesStroke(EFFORT_LEFT_SERIES_NO));\n        assertEquals(SMALL_BURNDOWN_STROKE, rend.getSeriesStroke(EFFORT_SPENT_SERIES_NO));\n        assertEquals(SMALL_BURNDOWN_STROKE, rend.getSeriesStroke(CURRENT_DAY_EFFORT_LEFT_SERIES_NO));\n        assertEquals(SMALL_BURNDOWN_STROKE, rend.getSeriesStroke(CURRENT_DAY_EFFORT_SPENT_SERIES_NO));\n        assertEquals(SMALL_BURNDOWN_STROKE, rend.getSeriesStroke(SCOPING_SERIES_NO));\n        assertEquals(SMALL_BURNDOWN_STROKE, rend.getSeriesStroke(REFERENCE_SERIES_NO));\n        \n        assertFalse(plot.getDomainAxis().isVisible());\n        assertFalse(plot.getRangeAxis().isVisible());\n        assertFalse(plot.isDomainGridlinesVisible());\n        assertFalse(plot.isRangeGridlinesVisible());\n        \n        assertFalse(rend.getSeriesShapesVisible(EFFORT_LEFT_SERIES_NO));\n        assertFalse(rend.getSeriesShapesVisible(EFFORT_SPENT_SERIES_NO));\n        assertFalse(rend.getSeriesShapesVisible(REFERENCE_SERIES_NO));\n        assertFalse(rend.getSeriesShapesVisible(SCOPING_SERIES_NO));\n        assertFalse(rend.getSeriesShapesVisible(CURRENT_DAY_EFFORT_LEFT_SERIES_NO));\n        assertFalse(rend.getSeriesShapesVisible(CURRENT_DAY_EFFORT_SPENT_SERIES_NO));\n        \n        assertEquals(null, plot.getDomainAxis().getLabel());\n        assertEquals(null, plot.getRangeAxis().getLabel());\n        \n        assertNull(chart.getLegend());\n    }\n    \n    @Test\n    public void testTransformToSmallChart() {\n        JFreeChart newChart = super.transformToSmallChart(chart);\n        testSmallChartFormating(newChart);\n    }\n    \n    @Test\n    public void testFormatChartAxes() {\n        super.formatChartAxes(chart, startDate, endDate);\n        \n        DateAxis actualAxis = (DateAxis)chart.getXYPlot().getDomainAxis();\n        \n        assertEquals(\"Start date not same\", startDate.toDateMidnight().toDate(), actualAxis.getMinimumDate());\n        assertEquals(\"End date not same\", endDate.plusDays(1).toDateMidnight().toDate(), actualAxis.getMaximumDate());\n        \n        assertEquals(GRIDLINE_COLOR, chart.getXYPlot().getRangeGridlinePaint());\n        assertEquals(GRIDLINE_COLOR, chart.getXYPlot().getDomainGridlinePaint());\n    } \n    \n    @Test\n    public void testFormatChartStyle() {\n        super.formatChartStyle(chart);\n        assertEquals(CHART_BACKGROUND_COLOR, chart.getBackgroundPaint());\n        assertEquals(PLOT_BACKGROUND_COLOR, chart.getPlot().getBackgroundPaint());\n        \n        testSetSeriesStyles();\n    }\n    \n    private void testSetSeriesStyles() {\n        XYLineAndShapeRenderer rend = (XYLineAndShapeRenderer) ((XYPlot) chart\n                .getPlot()).getRenderer();\n        \n        assertEquals(EFFORT_LEFT_SERIES_COLOR, rend.getSeriesPaint(EFFORT_LEFT_SERIES_NO));\n        assertEquals(EFFORT_LEFT_SERIES_SHAPE, rend.getSeriesShape(EFFORT_LEFT_SERIES_NO));\n        assertEquals(EFFORT_LEFT_SERIES_SHAPE_VISIBLE, rend.getSeriesShapesVisible(EFFORT_LEFT_SERIES_NO));\n        \n        assertEquals(EFFORT_SPENT_SERIES_COLOR, rend.getSeriesPaint(EFFORT_SPENT_SERIES_NO));\n        assertEquals(EFFORT_SPENT_SERIES_SHAPE, rend.getSeriesShape(EFFORT_SPENT_SERIES_NO));\n        assertEquals(EFFORT_SPENT_SERIES_SHAPE_VISIBLE, rend.getSeriesShapesVisible(EFFORT_SPENT_SERIES_NO));\n        \n        assertEquals(REFERENCE_SERIES_COLOR, rend.getSeriesPaint(REFERENCE_SERIES_NO));\n        \n        assertEquals(CURRENT_DAY_EFFORT_LEFT_SERIES_COLOR, rend.getSeriesPaint(CURRENT_DAY_EFFORT_LEFT_SERIES_NO));\n        assertEquals(CURRENT_DAY_SERIES_STROKE, rend.getSeriesStroke(CURRENT_DAY_EFFORT_LEFT_SERIES_NO));\n        assertEquals(CURRENT_DAY_EFFORT_LEFT_SERIES_SHAPE, rend.getSeriesShape(CURRENT_DAY_EFFORT_LEFT_SERIES_NO));\n        assertEquals(CURRENT_DAY_EFFORT_LEFT_SERIES_SHAPE_VISIBLE, rend.getSeriesShapesVisible(CURRENT_DAY_EFFORT_LEFT_SERIES_NO));\n        assertEquals(CURRENT_DAY_EFFORT_LEFT_SERIES_SHAPE_FILLED, rend.getSeriesShapesFilled(CURRENT_DAY_EFFORT_LEFT_SERIES_NO));\n        \n        assertEquals(CURRENT_DAY_EFFORT_SPENT_SERIES_COLOR, rend.getSeriesPaint(CURRENT_DAY_EFFORT_SPENT_SERIES_NO));\n        assertEquals(CURRENT_DAY_SERIES_STROKE, rend.getSeriesStroke(CURRENT_DAY_EFFORT_SPENT_SERIES_NO));\n        assertEquals(CURRENT_DAY_EFFORT_SPENT_SERIES_SHAPE, rend.getSeriesShape(CURRENT_DAY_EFFORT_SPENT_SERIES_NO));\n        assertEquals(CURRENT_DAY_EFFORT_SPENT_SERIES_SHAPE_VISIBLE, rend.getSeriesShapesVisible(CURRENT_DAY_EFFORT_SPENT_SERIES_NO));\n        assertEquals(CURRENT_DAY_EFFORT_SPENT_SERIES_SHAPE_FILLED, rend.getSeriesShapesFilled(CURRENT_DAY_EFFORT_SPENT_SERIES_NO));\n        \n        assertEquals(SCOPING_SERIES_STROKE, rend.getSeriesStroke(SCOPING_SERIES_NO));\n        assertEquals(SCOPING_SERIES_COLOR, rend.getSeriesPaint(SCOPING_SERIES_NO));\n    }\n    \n    @Test\n    public void testGetDataset() {\n        expect(iterationHistoryEntryBusiness.getHistoryEntriesForIteration(iteration)).andReturn(Arrays.asList(entry));\n        expect(iterationHistoryEntryBusiness.calculateExpectedEffortDoneDate(isA(LocalDate.class), isA(ExactEstimate.class), isA(ExactEstimate.class))).andReturn(null);\n        \n        expect(iterationBusiness.calculateDailyVelocity(isA(LocalDate.class), isA(LocalDate.class), isA(IterationHistoryEntry.class))).andReturn(ExactEstimate.ZERO);\n        \n        expect(hourEntryBusiness.getHourEntriesForIteration(iteration)).andReturn(hourEntryList);\n        expect(hourEntryBusiness.getDailySpentEffortForHourEntries(hourEntryList, iteration.getStartDate().minusDays(1), iteration.getEndDate().plusDays(1))).andReturn(dailySpentEffortList);\n        expect(hourEntryBusiness.getDailySpentEffortForHourEntries(hourEntryList, iteration.getStartDate().minusDays(1), new DateTime().toDateMidnight().toDateTime().plusDays(1))).andReturn(dailySpentEffortList);\n        expect(hourEntryBusiness.getDailySpentEffortForHourEntries(hourEntryList, iteration.getStartDate(), new DateTime().toDateMidnight().toDateTime().plusDays(1))).andReturn(dailySpentEffortList);\n        \n        expect(settingBusiness.isWeekendsInBurndown()).andReturn(true);\n        expect(settingBusiness.isHourReportingEnabled()).andReturn(true);\n        \n        replay(iterationHistoryEntryBusiness, iterationBusiness, hourEntryBusiness, settingBusiness);\n        \n        TimeSeriesCollection actualTimeSeries = super.getDataset(iteration);\n        assertNotNull(actualTimeSeries.getSeries(REFERENCE_SERIES_NAME));\n        assertNotNull(actualTimeSeries.getSeries(EFFORT_LEFT_SERIES_NAME));\n        assertNotNull(actualTimeSeries.getSeries(CURRENT_DAY_EFFORT_LEFT_SERIES_NAME));\n        assertNotNull(actualTimeSeries.getSeries(SCOPING_SERIES_NAME));\n        \n        // TODO: Verify hourEntryBusiness\n        verify(iterationHistoryEntryBusiness, iterationBusiness);\n    }\n    \n    @Test\n    public void testDetermineEndDate_currentDateBeforeEndDate() {\n        assertEquals(new LocalDate(), super.determineEndDate(new LocalDate().plusDays(3)));\n    }\n    \n    @Test\n    public void testDetermineEndDate_currentDateEqualsEndDate() {\n        assertEquals(new LocalDate(), super.determineEndDate(new LocalDate().plusDays(3)));\n    }\n    \n    @Test\n    public void testDetermineEndDate_currentDateAfterEndDate() {\n        assertEquals(new LocalDate().minusDays(2), super.determineEndDate(new LocalDate().minusDays(3)));\n    }\n    \n    @Test\n    public void testGetHistoryEntryForDate_dateFound() {\n        assertEquals(entry1, super.getHistoryEntryForDate(entriesList, entry1.getTimestamp()));\n    }\n    \n    @Test\n    public void testGetHistoryEntryForDate_entryFromYesterday() {\n        entry2.setDeltaOriginalEstimate(228);\n        IterationHistoryEntry actualEntry = super.getHistoryEntryForDate(\n                entriesList, entry2.getTimestamp().plusDays(1));\n        \n        assertEquals(entry2.getOriginalEstimateSum(), actualEntry.getOriginalEstimateSum());\n        assertEquals(entry2.getEffortLeftSum(), actualEntry.getEffortLeftSum());\n        assertEquals(0l, actualEntry.getDeltaOriginalEstimate());\n    }\n    \n    @Test\n    public void testGetHistoryEntryForDate_entryFromFarBehind() {\n        entry2.setDeltaOriginalEstimate(228);\n        IterationHistoryEntry actualEntry = super.getHistoryEntryForDate(\n                entriesList, entry2.getTimestamp().plusDays(102));\n        \n        assertEquals(entry2.getOriginalEstimateSum(), actualEntry.getOriginalEstimateSum());\n        assertEquals(entry2.getEffortLeftSum(), actualEntry.getEffortLeftSum());\n        assertEquals(0l, actualEntry.getDeltaOriginalEstimate());\n    }\n    \n    @Test\n    public void testGetHistoryEntryForDate_endDateBetweenEntries() {\n        IterationHistoryEntry forecomingEntry = new IterationHistoryEntry();\n        forecomingEntry.setTimestamp(new LocalDate().plusDays(66));\n        \n        List<IterationHistoryEntry> newEntries = new ArrayList<IterationHistoryEntry>();\n        newEntries.addAll(entriesList);\n        newEntries.add(forecomingEntry);\n        \n        entry2.setDeltaOriginalEstimate(228);\n        IterationHistoryEntry actualEntry = super.getHistoryEntryForDate(\n                entriesList, entry2.getTimestamp().plusDays(16));\n        \n        assertEquals(entry2.getOriginalEstimateSum(), actualEntry.getOriginalEstimateSum());\n        assertEquals(entry2.getEffortLeftSum(), actualEntry.getEffortLeftSum());\n        assertEquals(0l, actualEntry.getDeltaOriginalEstimate());\n    }\n    \n    @Test\n    public void testGetHistoryEntryForDate_emptyEntry() {\n        List<IterationHistoryEntry> emptyList = new ArrayList<IterationHistoryEntry>();\n        IterationHistoryEntry actualEntry = super.getHistoryEntryForDate(emptyList, startDate.toLocalDate());\n        assertEquals(0l , actualEntry.getEffortLeftSum());\n        assertEquals(0l , actualEntry.getOriginalEstimateSum());\n        assertEquals(0l , actualEntry.getDeltaOriginalEstimate());\n    }\n    \n    @Test\n    public void testGetIterationHistoryEntries() {\n        expect(iterationHistoryEntryBusiness.getHistoryEntriesForIteration(iteration))\n            .andReturn(entriesList);\n        replay(iterationHistoryEntryBusiness);\n        \n        assertSame(entriesList, super.getIterationHistoryEntries(iteration));\n        \n        verify(iterationHistoryEntryBusiness);\n    }\n    \n    private void initializeEntriesForScopingTest() {\n        startEntry = new IterationHistoryEntry();\n        startEntry.setOriginalEstimateSum(120);\n        startEntry.setEffortLeftSum(120);\n        startEntry.setDeltaOriginalEstimate(0);\n        startEntry.setTimestamp(new LocalDate(2009,1,1));\n        \n        endEntry = new IterationHistoryEntry();\n        endEntry.setOriginalEstimateSum(120);\n        endEntry.setEffortLeftSum(60);\n        endEntry.setDeltaOriginalEstimate(0);\n        endEntry.setTimestamp(new LocalDate(2009,1,2));\n    }\n    \n    @Test\n    public void testGetTodaysStartValueWithScoping_noScope() {\n        initializeEntriesForScopingTest();\n        assertEquals(new Long(120),\n                super.getTodaysStartValueWithScoping(startEntry, endEntry).getMinorUnits());\n    }\n    \n    @Test\n    public void testGetTodaysStartValueWithScoping_minusScope() {\n        initializeEntriesForScopingTest();\n        endEntry.setDeltaOriginalEstimate(-20);\n        endEntry.setOriginalEstimateSum(100);\n        assertEquals(new Long(100),\n                super.getTodaysStartValueWithScoping(startEntry, endEntry).getMinorUnits());\n    }\n    \n    @Test\n    public void testGetTodaysStartValueWithScoping_plusScope() {\n        initializeEntriesForScopingTest();\n        endEntry.setDeltaOriginalEstimate(97);\n        endEntry.setOriginalEstimateSum(217);\n        assertEquals(new Long(217),\n                super.getTodaysStartValueWithScoping(startEntry, endEntry).getMinorUnits());   \n    }\n    \n    @Test\n    public void testGetReferenceVelocityTimeSeries_noWeekends() {\n        \n        TimeSeriesDataItem startPoint = new TimeSeriesDataItem(new Second(\n                startDate.toDate()), 100.0);\n        TimeSeriesDataItem endPoint = new TimeSeriesDataItem(new Second(endDate\n                .plusDays(1).toDate()), 0.0);\n        \n        expect(settingBusiness.isWeekendsInBurndown()).andReturn(false);\n        \n        replay(settingBusiness);\n        TimeSeries actualSeries\n            = super.getReferenceVelocityTimeSeries(startDate, endDate, originalEstimateSum);\n        verify(settingBusiness);\n        \n        assertEquals(\"Reference series name incorrect\",\n                REFERENCE_SERIES_NAME, actualSeries.getKey());\n        \n        assertEquals(\"Reference start value not correct\",\n                startPoint.getValue(), actualSeries.getDataItem(0).getValue());\n        assertEquals(\"Reference start instant not correct\", startPoint\n                .getPeriod(), actualSeries.getDataItem(0).getPeriod());\n        assertEquals(\"Reference end value not correct\", endPoint.getValue(),\n                actualSeries.getDataItem(1).getValue());\n        assertEquals(\"Reference end instant not correct\", endPoint.getPeriod(),\n                actualSeries.getDataItem(1).getPeriod());\n        \n    }\n    \n    @Test\n    public void testGetReferenceVelocityTimeSeries_withWeekends() {\n        \n        TimeSeriesDataItem startPoint = new TimeSeriesDataItem(new Second(\n                startDate.toDate()), 100.0);\n        TimeSeriesDataItem endPoint = new TimeSeriesDataItem(\n                new Second(endDate.toDateMidnight().plusDays(1).toDate()), 0.0);\n        \n        expect(settingBusiness.isWeekendsInBurndown()).andReturn(true);\n        \n        replay(settingBusiness);\n        TimeSeries actualSeries\n            = super.getReferenceVelocityTimeSeries(startDate, endDate, originalEstimateSum);\n        verify(settingBusiness);\n        \n        assertEquals(\"Reference series name incorrect\",\n                REFERENCE_SERIES_NAME, actualSeries.getKey());\n        \n        assertEquals(\"Reference start value not correct\",\n                startPoint.getValue(), actualSeries.getDataItem(0).getValue());\n        assertEquals(\"Reference start instant not correct\", startPoint\n                .getPeriod(), actualSeries.getDataItem(0).getPeriod());\n        assertEquals(\"Reference end value not correct\", endPoint.getValue(),\n                actualSeries.getDataItem(actualSeries.getItemCount() - 1).getValue());\n        assertEquals(\"Reference end instant not correct\", endPoint.getPeriod(),\n                actualSeries.getDataItem(actualSeries.getItemCount() - 1).getPeriod());\n        \n    }\n    \n    @Test\n    public void testGetBurndownTimeSeries() {\n        replay(iterationHistoryEntryBusiness);\n        \n        TimeSeries actualSeries = super.getBurndownTimeSeries(entriesList,\n                startDate.toLocalDate(), endDate.toLocalDate());\n        \n        Second startInstant = new Second(startDate.plusDays(1).toDateMidnight().toDate());\n        Second secondInstant = new Second(startDate.plusDays(2).toDateMidnight().toDate());\n        Second endInstant = new Second(endDate.toDateMidnight().toDate());\n        Second afterEndInstant = new Second(endDate.plusDays(1).toDateMidnight().toDate());\n        \n        \n        assertEquals(ExactEstimateUtils.extractMajorUnits(new ExactEstimate(entry1.getEffortLeftSum())),\n                actualSeries.getDataItem(startInstant).getValue());\n        assertEquals(ExactEstimateUtils.extractMajorUnits(new ExactEstimate(entry2.getEffortLeftSum())),\n                actualSeries.getDataItem(secondInstant).getValue());\n        assertEquals(ExactEstimateUtils.extractMajorUnits(new ExactEstimate(entry2.getEffortLeftSum())),\n                actualSeries.getDataItem(endInstant).getValue());\n        \n        assertNull(actualSeries.getDataItem(afterEndInstant));\n        \n        verify(iterationHistoryEntryBusiness);\n    }\n    \n    @Test\n    public void testGetBurndownTimeSeries_scoped() {\n        DateTime startTime = new DateTime(2012, 7, 4, 12, 38, 12, 57);\n        IterationHistoryEntry firstEntry = new IterationHistoryEntry();\n        firstEntry.setTimestamp(startTime.toLocalDate());\n        firstEntry.setOriginalEstimateSum(130);\n        firstEntry.setDeltaOriginalEstimate(0);\n        IterationHistoryEntry secondEntry = new IterationHistoryEntry();\n        secondEntry.setTimestamp(startTime.plusDays(1).toLocalDate());\n        secondEntry.setOriginalEstimateSum(156);\n        secondEntry.setDeltaOriginalEstimate(26);\n        IterationHistoryEntry thirdEntry = new IterationHistoryEntry();\n        thirdEntry.setTimestamp(startTime.plusDays(2).toLocalDate());\n        thirdEntry.setOriginalEstimateSum(88);\n        thirdEntry.setDeltaOriginalEstimate(-68);\n        \n        List<IterationHistoryEntry> entries = Arrays.asList(firstEntry, secondEntry, thirdEntry);\n        \n        TimeSeries actualSeries = super.getBurndownTimeSeries(entries,\n                startTime.toLocalDate(), startTime.toLocalDate().plusDays(5));\n        \n        assertEquals(10, actualSeries.getItemCount());\n    }\n    \n    @Test\n    public void testGetBurndownDataItemForDay() {\n        TimeSeriesDataItem actualItem = super.getBurndownDataItemForDay(entry1);\n        \n        assertEquals(ExactEstimateUtils.extractMajorUnits(\n                new ExactEstimate(entry1.getEffortLeftSum())),\n                actualItem.getValue());\n    }\n    \n    @Test\n    public void testGetBurndownScopedDataItemForDay() {\n        initializeEntriesForScopingTest();\n        \n        startEntry.setTimestamp(new LocalDate(2008, 4, 2));\n        endEntry.setTimestamp(new LocalDate(2008, 4, 3));\n        startEntry.setEffortLeftSum(128);\n        endEntry.setDeltaOriginalEstimate(150);\n        DateTime expectedTimestamp = new DateTime(2008, 4, 3, 0, 0, 2, 0);\n        \n        Pair<TimeSeriesDataItem, TimeSeriesDataItem> scopedEntries\n            = getBurndownScopedDataItemForDay(startEntry, endEntry);\n        TimeSeriesDataItem nullEntry = scopedEntries.getFirst();\n        TimeSeriesDataItem actualEntry = scopedEntries.getSecond();\n        ExactEstimate estimatedValue = new ExactEstimate(128 + 150);\n        \n        assertEquals(new Second(expectedTimestamp.minusSeconds(1).toDate()), nullEntry.getPeriod());\n        assertEquals(null, nullEntry.getValue());\n        assertEquals(new Second(expectedTimestamp.toDate()), actualEntry.getPeriod());\n        assertEquals(ExactEstimateUtils.extractMajorUnits(estimatedValue), actualEntry.getValue());\n    }\n    \n    @Test\n    public void testIsScopingDone() {\n        IterationHistoryEntry entryWithoutScoping = new IterationHistoryEntry();\n        IterationHistoryEntry entryWithScoping = new IterationHistoryEntry();\n        entryWithScoping.setDeltaOriginalEstimate(-200);\n        \n        assertFalse(super.isScopingDone(entryWithoutScoping));\n        assertTrue(super.isScopingDone(entryWithScoping));\n    }\n    \n    @Test\n    public void testGetCurrentDayTimeSeries() {\n        initializeEntriesForScopingTest();\n        endEntry.setOriginalEstimateSum(endEntry.getOriginalEstimateSum() - 100);\n        endEntry.setEffortLeftSum(endEntry.getEffortLeftSum() - 80);\n                \n        ExactEstimate expectedStartValue = new ExactEstimate(\n                startEntry.getEffortLeftSum() + endEntry.getDeltaOriginalEstimate());\n        ExactEstimate expectedEndvalue = new ExactEstimate(endEntry.getEffortLeftSum());\n        \n        TimeSeries actualSeries = super.getCurrentDayEffortLeftSeries(startEntry, endEntry);\n        testSeriesStartAndEndCorrect(actualSeries, expectedStartValue, expectedEndvalue);\n        \n        assertEquals(CURRENT_DAY_EFFORT_LEFT_SERIES_NAME, actualSeries.getKey());\n        assertEquals(ExactEstimateUtils.extractMajorUnits(expectedStartValue),\n                actualSeries.getDataItem(0).getValue());\n    }\n    \n    \n    @Test\n    public void testGetScopingTimeSeries() {\n        DateTime startTime = new DateTime(2012, 7, 4, 12, 38, 12, 57);\n        IterationHistoryEntry firstEntry = new IterationHistoryEntry();\n        firstEntry.setTimestamp(startTime.toLocalDate());\n        firstEntry.setOriginalEstimateSum(130);\n        firstEntry.setDeltaOriginalEstimate(0);\n        IterationHistoryEntry secondEntry = new IterationHistoryEntry();\n        secondEntry.setTimestamp(startTime.plusDays(1).toLocalDate());\n        secondEntry.setOriginalEstimateSum(156);\n        secondEntry.setDeltaOriginalEstimate(26);\n        IterationHistoryEntry thirdEntry = new IterationHistoryEntry();\n        thirdEntry.setTimestamp(startTime.plusDays(2).toLocalDate());\n        thirdEntry.setOriginalEstimateSum(88);\n        thirdEntry.setDeltaOriginalEstimate(-68);\n        \n        List<IterationHistoryEntry> entries = Arrays.asList(firstEntry, secondEntry, thirdEntry);\n        \n        TimeSeries actualSeries = super.getScopingTimeSeries(entries,\n                startDate.toLocalDate(), startTime.plusDays(5).toLocalDate());\n        \n        assertEquals(SCOPING_SERIES_NAME, actualSeries.getKey());\n        assertEquals(6, actualSeries.getItemCount());\n    }\n    \n    \n    @Test\n    public void testGetSeriesByStartAndEndPoints() {\n        ExactEstimate value1 = new ExactEstimate(entry1.getEffortLeftSum());\n        ExactEstimate value2 = new ExactEstimate(entry2.getEffortLeftSum());\n        TimeSeries actualSeries = super.getSeriesByStartAndEndPoints(\n                \"Test series\",\n                new DateTime(entry1.getTimestamp().toDateMidnight().toDateTime()), value1,\n                new DateTime(entry2.getTimestamp().toDateMidnight().toDateTime()), value2);\n        \n        testSeriesStartAndEndCorrect(actualSeries, value1, value2);\n        assertEquals(\"Test series\", actualSeries.getKey());\n    }\n    \n    @Test\n    public void testGetScopeSeriesDataItem() {\n        initializeEntriesForScopingTest();\n        startEntry.setTimestamp(new LocalDate(2008, 4, 2));\n        endEntry.setTimestamp(new LocalDate(2008, 4, 3));\n        startEntry.setEffortLeftSum(128);\n        endEntry.setDeltaOriginalEstimate(150);\n        DateTime expectedTimestamp = new DateTime(2008, 4, 3, 0, 0, 0, 0);\n        \n        List<TimeSeriesDataItem> actualItems\n            = super.getScopeSeriesDataItems(startEntry, endEntry);\n        \n        TimeSeriesDataItem firstItem = actualItems.get(0);\n        TimeSeriesDataItem secondItem = actualItems.get(1);\n        TimeSeriesDataItem nullItem = actualItems.get(2);\n        ExactEstimate expectedFirstValue = new ExactEstimate(128);\n        ExactEstimate expectedSecondValue = new ExactEstimate(128 + 150);\n        \n        assertEquals(new Second(expectedTimestamp.toDate()), firstItem.getPeriod());\n        assertEquals(ExactEstimateUtils.extractMajorUnits(expectedFirstValue), firstItem.getValue());\n        assertEquals(new Second(expectedTimestamp.plusSeconds(2).toDate()), secondItem.getPeriod());\n        assertEquals(ExactEstimateUtils.extractMajorUnits(expectedSecondValue), secondItem.getValue());\n        assertEquals(new Second(expectedTimestamp.plusSeconds(3).toDate()), nullItem.getPeriod());\n        assertNull(nullItem.getValue());\n    }\n\n    private void testSeriesStartAndEndCorrect(TimeSeries series, ExactEstimate value1, ExactEstimate value2) {\n        assertEquals(ExactEstimateUtils.extractMajorUnits(value1), series.getDataItem(0).getValue());\n        assertEquals(ExactEstimateUtils.extractMajorUnits(value2), series.getDataItem(1).getValue());\n    }\n    \n    @Test\n    public void testAddTimeSeriesItem() {\n        ExactEstimate expectedValue = new ExactEstimate(120);\n        DateTime expectedInstant = new DateTime(2010, 1, 15, 12, 56, 42, 0);\n        \n        TimeSeries timeSeries = createMock(TimeSeries.class);\n        \n        expect(timeSeries.addOrUpdate(\n                new Second(new DateTime(2010, 1, 15, 0,0, 0, 0).toDate()), 2))\n                .andReturn(new TimeSeriesDataItem(new Second(), 0));\n        \n        replay(timeSeries);\n        \n        this.addTimeSeriesItem(expectedInstant, expectedValue, timeSeries);        \n        \n        verify(timeSeries);\n        \n\n        \n    }\n    \n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\IterationBusinessTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["IterationBusinessTest"], "SCS_ClassReference": ["SpringJUnit4ClassRunner", "MockContextLoader", "iteration", "iteration", "iteration", "project", "story1", "story2", "Arrays", "task", "Arrays", "Arrays", "expectedIterationData", "expectedIterationData", null, "expectedIterationData", "expectedIterationData", null, "stories", "iteration", "", null, "iterationDAO", "iteration", "", null, "transferObjectBusiness", "", null, "storyBusiness", "Collections", "", null, "iterationDAO", "Collections", "", null, "iterationDAO", "", "iterationBusiness", "iteration", "", "stories", "iteration", "invalidRank", "rankedStories", "", null, "iterationDAO", "iteration", "", null, "transferObjectBusiness", "", null, "storyBusiness", "Collections", "", null, "iterationDAO", "Collections", "", null, "iterationDAO", "", "iterationBusiness", "iteration", "", "ObjectNotFoundException", "", null, "iterationDAO", "", "", "iterationBusiness", "", "latestEntry", "latestEntry", "he1", "he2", "hourEntries", "Arrays", "", null, null, "iterationHistoryEntryBusiness", "", null, "backlogBusiness", "", null, "backlogBusiness", "iteration", "", null, "hourEntryBusiness", "", null, "Pair", "iterationDAO", "", null, "Pair", "iterationDAO", "", null, null, "iterationHistoryEntryDAO", "iteration", null, "", null, "backlogBusiness", "", null, "backlogBusiness", "", "iterationBusiness", "", "", "latestEntry", "actualMetrics", null, null, "", "latestEntry", "actualMetrics", null, null, "", "actualMetrics", null, "", "actualMetrics", null, null, "", "actualMetrics", "", "actualMetrics", "", "actualMetrics", null, "", "actualMetrics", "", "actualMetrics", "", "", null, null, "iterationHistoryEntryBusiness", "", null, "Pair", "iterationDAO", "", null, "Pair", "iterationDAO", "", null, "backlogBusiness", "", null, "backlogBusiness", "iteration", "", null, "hourEntryBusiness", "", null, "backlogBusiness", "", null, "backlogBusiness", "", "iterationBusiness", "", "actualMetrics", null, "", "actualMetrics", null, "", "", null, null, "iterationHistoryEntryBusiness", "", null, "Pair", "iterationDAO", "", null, "Pair", "iterationDAO", "", null, "backlogBusiness", "iteration", "", null, "backlogBusiness", "", null, "hourEntryBusiness", "", null, "backlogBusiness", "", null, "backlogBusiness", "", "iterationBusiness", "", "actualMetrics", null, null, "", "actualMetrics", null, null, "", "iter", "iter", "iter", "iter", null, "latestHistoryEntry", "latestHistoryEntry", "", null, null, "iterationHistoryEntryBusiness", "", null, "Days", "backlogBusiness", "", null, "backlogBusiness", "", null, "backlogBusiness", "iter", "", null, "hourEntryBusiness", "", null, "Pair", "iterationDAO", "", null, "Pair", "iterationDAO", "", null, null, "iterationHistoryEntryDAO", null, "", null, "backlogBusiness", "", null, "backlogBusiness", "", "iterationBusiness", "", "iterRow", "", "iterRow", null, "", "iterRow", null, "", "iterRow", null, "", "IllegalArgumentException", "iterationBusiness", "start", "iter", "iter", "iter", "iteration", "iter", "iter", "iter", "iter", "", null, "backlogBusiness", "", null, "iterationDAO", "iterationDAO", "", null, "transferObjectBusiness", "EasyMock", "Iteration", "", null, "", "iter", "actual", "", "iter", "actual", "", "iter", "actual", "", "iter", "actual", "", "iter", "actual", "", "iter", "actual", "", "IllegalArgumentException", "", null, "backlogBusiness", "", null, "", "ObjectNotFoundException", "", null, "backlogBusiness", "", null, "", "IllegalArgumentException", "start", "iteration", "iteration", "", null, "backlogBusiness", "", null, "", "start", "iter", "iter", "iter", "iteration", "iter", "iter", "iter", "iter", "user", "", null, "backlogBusiness", "", null, "iterationDAO", "EasyMock", "Iteration", "", null, "iterationDAO", "", null, "Arrays", "assignmentBusiness", "EasyMock", "EasyMock", "", null, "transferObjectBusiness", "", null, "Arrays", "", "userIdCapture", null, "", "userIdCapture", null, "", "start", "iter", "iter", "iter", "iteration", "", null, "backlogBusiness", "", null, "iterationDAO", "EasyMock", "Iteration", "", null, "iterationDAO", "", null, "transferObjectBusiness", "", null, "", "newParent", "iteration", "iterationDAO", "backlogHistoryEntryBusiness", "backlogHistoryEntryBusiness", "", null, "", "iter", "iter", "today", null, null, "iter", "iter", null, "yesterdayHistoryEntry", "yesterdayHistoryEntry", "latestHistoryEntry", "", null, "iterationHistoryEntryBusiness", "", null, "Days", "backlogBusiness", "", null, "iterationHistoryEntryDAO", "iter", "today", "", "", "iterationBusiness", "", "iter", "iter", "today", null, null, "iter", "iter", null, "yesterdayHistoryEntry", "yesterdayHistoryEntry", "latestHistoryEntry", "", null, "iterationHistoryEntryBusiness", "", null, "iterationHistoryEntryDAO", "iter", "today", "", "", "iterationBusiness", "", "iter", "iter", "today", null, null, "iter", "iter", null, "yesterdayHistoryEntry", "yesterdayHistoryEntry", "latestHistoryEntry", "", null, "iterationHistoryEntryBusiness", "", null, "iterationHistoryEntryDAO", "iter", "today", "", "", "iterationBusiness", "", "iter", "iter", "stories", "iter", "tasks", "iter", "assignments", "iter", "historyEntries", "iter", "hourEntries", "iter", "", null, "iterationDAO", "iter", "storyRankBusiness", "storyBusiness", "iterationHistoryEntryBusiness", "historyEntry", "assignmentBusiness", "assignment", "taskBusiness", "task", "hourEntryBusiness", "iter", "iterationDAO", "", "iterationBusiness", "iter", "", "iter", "stories", "iter", "tasks", "iter", "assignments", "iter", "historyEntries", "iter", "hourEntries", "iter", "", null, "iterationDAO", "iter", "storyRankBusiness", "storyBusiness", "iterationHistoryEntryBusiness", "historyEntry", "assignmentBusiness", "assignment", "taskBusiness", "task", "hourEntryBusiness", "iter", "iterationDAO", "", "iterationBusiness", "iter", "", "iteration", "iteration", "project", "", null, "iterationDAO", "iteration", "storyRankBusiness", "hourEntryBusiness", "iteration", "iterationDAO", "backlogHistoryEntryBusiness", "project", "", "iterationBusiness", "", "revDeleted", "revDeleted", "revAdded", "revModified", "revModified", "", null, "Arrays", "backlogHistoryDAO", "", null, "Arrays", "backlogHistoryDAO", "", null, "Arrays", "backlogHistoryDAO", "", null, "storyHistoryDAO", "", null, "storyHistoryDAO", "", null, "", "", "actual", "", "actual", "", "actual"], "AN": ["iterationBusiness", "transferObjectBusiness", "storyBusiness", "hourEntryBusiness", "iterationDAO", "iterationHistoryEntryDAO", "iterationHistoryEntryBusiness", "backlogBusiness", "assignmentBusiness", "backlogHistoryEntryBusiness", "storyRankBusiness", "taskBusiness", "storyHistoryDAO", "backlogHistoryDAO", "teamBusiness", "taskHistoryDAO", "iteration", "project", "storiesList", "tasksWithoutStoryList", "tasksTOsWithoutStoryList", "expectedIterationData", "task", "taskTO"], "SCS_VariableDeclarator": ["iterationBusiness", "transferObjectBusiness", "storyBusiness", "hourEntryBusiness", "iterationDAO", "iterationHistoryEntryDAO", "iterationHistoryEntryBusiness", "backlogBusiness", "assignmentBusiness", "backlogHistoryEntryBusiness", "storyRankBusiness", "taskBusiness", "storyHistoryDAO", "backlogHistoryDAO", "teamBusiness", "taskHistoryDAO", "iteration", "project", "storiesList", "tasksWithoutStoryList", "tasksTOsWithoutStoryList", "expectedIterationData", "task", "taskTO", "story1", "story2", "storyTO1", "storyTO2", "stories", "iterationTO", "emptyMetricsMap", "emptyTaskMap", "stories", "iterationTO", "rankedStories", "invalidRank", "emptyMetricsMap", "emptyTaskMap", "latestEntry", "he1", "he2", "hourEntries", "expectedStoryPoints", "expectedSpentEffort", "expectedPercentDoneTasks", "expectedPercentDoneStories", "expectedTaskCompletion", "expectedStoryCompletion", "actualMetrics", "actualMetrics", "actualMetrics", "iter", "latestHistoryEntry", "iterRow", "start", "end", "iter", "actual", "start", "end", "start", "end", "iter", "user", "assignment", "userIdCapture", "start", "end", "iter", "newParent", "iter", "today", "latestHistoryEntry", "yesterdayHistoryEntry", "iter", "today", "latestHistoryEntry", "yesterdayHistoryEntry", "iter", "today", "latestHistoryEntry", "yesterdayHistoryEntry", "iter", "project", "story", "stories", "tasks", "task", "assignments", "assignment", "historyEntries", "historyEntry", "hourEntries", "hourEntry", "iter", "story", "stories", "tasks", "task", "assignments", "assignment", "historyEntries", "historyEntry", "hourEntries", "hourEntry", "iteration", "project", "revDeleted", "deleted", "revAdded", "added", "revModified", "modified", "actual"], "MN": ["setUp", "testGetIterationContents", "testGetIterationContents_hasInvalidRank", "testGetIterationContents_nullBacklog", "testGetIterationMetrics", "testGetIterationMetricsZeroTotals", "testGetIterationMetrics_nullLatestHistoryEntry", "testGetIterationMetrics_withInterval", "testGetIterationMetrics_nullIteration", "testStoreIteration", "testStoreIteration_iterationParent", "testStoreIteration_nullParent", "testStoreIteration_invalidInterval", "testCreateIteration", "testCreateIteration_noAssigments", "testMoveTo", "testCalculateVariance", "testCalculateVariance_notStarted", "testCalculateVariance_noEffortLeft", "testDeleteIteration", "testDeleteStandaloneIteration", "testdeleteAndUpdateHistory", "testRetrieveChangesInIterationStories"], "PN": [], "SCS_MemberReference": ["iteration", "project", "story1", "story2", "storiesList", "storyTO1", "storyTO2", "task", "taskTO", "task", "tasksWithoutStoryList", "task", "tasksTOsWithoutStoryList", "taskTO", "expectedIterationData", "storiesList", "tasksTOsWithoutStoryList", "iteration", "iteration", "iterationTO", "iteration", "stories", "iteration", "emptyMetricsMap", "iteration", "emptyTaskMap", "iteration", "iteration", "stories", "invalidRank", "iteration", "iterationTO", "iteration", "stories", "iteration", "emptyMetricsMap", "iteration", "emptyTaskMap", "iteration", "iterationDAO", "iterationDAO", "he1", "he2", "latestEntry", "iteration", "expectedStoryPoints", "iteration", "expectedSpentEffort", "iteration", "iteration", "iteration", "iteration", "iteration", "iteration", "actualMetrics", "expectedStoryPoints", "expectedSpentEffort", "expectedPercentDoneTasks", "expectedPercentDoneStories", "expectedTaskCompletion", "expectedStoryCompletion", "iteration", "iteration", "iteration", "iteration", "iteration", "iteration", "iteration", "iteration", "iteration", "iteration", "iteration", "iteration", "iteration", "iteration", "iteration", "iteration", "latestHistoryEntry", "iter", "iter", "iter", "iter", "iter", "iter", "iter", "iter", "iter", "start", "end", "project", "project", "project", "iteration", "iteration", "iter", "iterationBusiness", "iter", "iteration", "iterationBusiness", "iteration", "iterationBusiness", "iteration", "start", "end", "project", "iterationBusiness", "iteration", "start", "end", "project", "project", "project", "iteration", "assignment", "iteration", "userIdCapture", "iteration", "iteration", "iterationBusiness", "iter", "start", "end", "project", "project", "project", "iteration", "iteration", "iteration", "iterationBusiness", "iter", "project", "iteration", "iterationBusiness", "iteration", "newParent", "latestHistoryEntry", "iter", "iter", "yesterdayHistoryEntry", "iter", "latestHistoryEntry", "iter", "yesterdayHistoryEntry", "iter", "latestHistoryEntry", "iter", "yesterdayHistoryEntry", "iter", "project", "story", "stories", "task", "tasks", "assignment", "assignments", "historyEntry", "historyEntries", "hourEntry", "hourEntries", "iter", "iter", "story", "DELETE", "iter", "story", "stories", "task", "tasks", "assignment", "assignments", "historyEntry", "historyEntries", "hourEntry", "hourEntries", "iter", "iter", "story", "DELETE", "iter", "project", "iteration", "iteration", "iteration", "DEL", "revDeleted", "revAdded", "ADD", "MOD", "revModified", "added", "iteration", "deleted", "iteration", "modified", "iteration", "iterationBusiness", "iteration", "modified", "added", "deleted"], "SCS_MethodInvocation": ["setId", "setStartDate", "setEndDate", "setId", "setId", "setId", "asList", "setId", "asList", "asList", "setStories", "getStories", "addAll", "setTasks", "getTasks", "addAll", "addAll", "getStories", "expect", "andReturn", "retrieveDeep", "getId", "expect", "andReturn", "constructIterationTO", "expect", "andReturn", "retrieveStoriesInIteration", "emptyMap", "expect", "andReturn", "calculateIterationDirectStoryMetrics", "emptyMap", "expect", "andReturn", "calculateIterationTaskEffortSpent", "replayAll", "getIterationContents", "getId", "verifyAll", "addAll", "getStories", "setId", "add", "expect", "andReturn", "retrieveDeep", "getId", "expect", "andReturn", "constructIterationTO", "expect", "andReturn", "retrieveStoriesInIteration", "emptyMap", "expect", "andReturn", "calculateIterationDirectStoryMetrics", "emptyMap", "expect", "andReturn", "calculateIterationTaskEffortSpent", "replayAll", "getIterationContents", "getId", "verifyAll", "expect", "andReturn", "retrieveDeep", "replay", "assertNull", "getIterationContents", "verify", "setEffortLeftSum", "setOriginalEstimateSum", "setMinutesSpent", "setMinutesSpent", "addAll", "asList", "expect", "andReturn", "times", "retrieveLatest", "expect", "andReturn", "getStoryPointSumByIteration", "expect", "andReturn", "calculateDoneStoryPointSum", "getId", "expect", "andReturn", "calculateSumOfIterationsHourEntries", "expect", "andReturn", "create", "getCountOfDoneAndNonDeferred", "expect", "andReturn", "create", "getCountOfDoneAndAllStories", "expect", "andReturn", "times", "retrieveByDate", "getId", "minusDays", "expect", "andReturn", "getStoryValueSumByIteration", "expect", "andReturn", "getCompletedStoryValueSumByIteration", "replayAll", "getIterationMetrics", "assertNotNull", "assertEquals", "getEffortLeftSum", "getEffortLeft", "getMinorUnits", "longValue", "assertEquals", "getOriginalEstimateSum", "getOriginalEstimate", "getMinorUnits", "longValue", "assertEquals", "getStoryPoints", "intValue", "assertEquals", "getSpentEffort", "getMinorUnits", "longValue", "assertEquals", "getPercentDoneTasks", "assertEquals", "getPercentDoneStories", "assertEquals", "getDoneStoryPoints", "intValue", "assertEquals", "getCompletedEffortPercentage", "assertEquals", "getDoneStoryPointsPercentage", "verifyAll", "expect", "andReturn", "times", "retrieveLatest", "expect", "andReturn", "create", "getCountOfDoneAndNonDeferred", "expect", "andReturn", "create", "getCountOfDoneAndAllStories", "expect", "andReturn", "getStoryPointSumByIteration", "expect", "andReturn", "calculateDoneStoryPointSum", "getId", "expect", "andReturn", "calculateSumOfIterationsHourEntries", "expect", "andReturn", "getStoryValueSumByIteration", "expect", "andReturn", "getCompletedStoryValueSumByIteration", "replayAll", "getIterationMetrics", "assertEquals", "getPercentDoneStories", "intValue", "assertEquals", "getPercentDoneStories", "intValue", "verifyAll", "expect", "andReturn", "times", "retrieveLatest", "expect", "andReturn", "create", "getCountOfDoneAndNonDeferred", "expect", "andReturn", "create", "getCountOfDoneAndAllStories", "expect", "andReturn", "calculateDoneStoryPointSum", "getId", "expect", "andReturn", "getStoryPointSumByIteration", "expect", "andReturn", "calculateSumOfIterationsHourEntries", "expect", "andReturn", "getStoryValueSumByIteration", "expect", "andReturn", "getCompletedStoryValueSumByIteration", "replayAll", "getIterationMetrics", "assertEquals", "getEffortLeft", "getMinorUnits", "longValue", "assertEquals", "getOriginalEstimate", "getMinorUnits", "longValue", "verifyAll", "setId", "setStartDate", "setEndDate", "getStartDate", "plusDays", "setOriginalEstimateSum", "setEffortLeftSum", "expect", "andReturn", "times", "retrieveLatest", "expect", "andReturn", "days", "daysLeftInSchedulableBacklog", "expect", "andReturn", "getStoryPointSumByIteration", "expect", "andReturn", "calculateDoneStoryPointSum", "getId", "expect", "andReturn", "calculateSumOfIterationsHourEntries", "expect", "andReturn", "create", "getCountOfDoneAndNonDeferred", "expect", "andReturn", "create", "getCountOfDoneAndAllStories", "expect", "andReturn", "times", "retrieveByDate", "minusDays", "expect", "andReturn", "getStoryValueSumByIteration", "expect", "andReturn", "getCompletedStoryValueSumByIteration", "replayAll", "getIterationMetrics", "assertEquals", "getDaysLeft", "assertEquals", "getEffortLeft", "intValue", "assertEquals", "getOriginalEstimate", "intValue", "assertEquals", "getDoneStoryPoints", "intValue", "verifyAll", "getIterationMetrics", "plusDays", "setStartDate", "setEndDate", "setParent", "setParent", "setBacklogSize", "setName", "setDescription", "setBaselineLoad", "expect", "andReturn", "retrieve", "expect", "andReturn", "get", "store", "expect", "andReturn", "constructIterationTO", "isA", "replayAll", "store", "assertEquals", "getStartDate", "getStartDate", "assertEquals", "getEndDate", "getEndDate", "assertEquals", "getBacklogSize", "getBacklogSize", "assertEquals", "getBaselineLoad", "getBaselineLoad", "assertEquals", "getName", "getName", "assertEquals", "getDescription", "getDescription", "verifyAll", "expect", "andReturn", "retrieve", "replayAll", "store", "verifyAll", "expect", "andThrow", "retrieve", "replayAll", "store", "verifyAll", "minusDays", "setStartDate", "setEndDate", "expect", "andReturn", "retrieve", "replayAll", "store", "verifyAll", "plusDays", "setStartDate", "setEndDate", "setParent", "setParent", "setBacklogSize", "setName", "setDescription", "setBaselineLoad", "setId", "expect", "andReturn", "retrieve", "expect", "andReturn", "create", "isA", "expect", "andReturn", "get", "expect", "andReturn", "asList", "addMultiple", "eq", "capture", "expect", "andReturn", "constructIterationTO", "replayAll", "store", "asList", "assertEquals", "getValue", "size", "assertTrue", "getValue", "contains", "verifyAll", "plusDays", "setStartDate", "setEndDate", "setParent", "setParent", "expect", "andReturn", "retrieve", "expect", "andReturn", "create", "isA", "expect", "andReturn", "get", "expect", "andReturn", "constructIterationTO", "replayAll", "store", "verifyAll", "setId", "setParent", "store", "updateHistory", "updateHistory", "replayAll", "moveTo", "verifyAll", "setId", "setStartDate", "minusDays", "toDateMidnight", "toDateTime", "setEndDate", "getStartDate", "plusDays", "setEffortLeftSum", "setOriginalEstimateSum", "setEffortLeftSum", "expect", "andReturn", "retrieveLatest", "expect", "andReturn", "days", "daysLeftInSchedulableBacklog", "expect", "andReturn", "retrieveByDate", "getId", "minusDays", "replayAll", "assertEquals", "calculateVariance", "verifyAll", "setId", "setStartDate", "plusDays", "toDateMidnight", "toDateTime", "setEndDate", "getStartDate", "plusDays", "setEffortLeftSum", "setOriginalEstimateSum", "setEffortLeftSum", "expect", "andReturn", "retrieveLatest", "expect", "andReturn", "retrieveByDate", "getId", "minusDays", "replayAll", "assertEquals", "calculateVariance", "verifyAll", "setId", "setStartDate", "minusDays", "toDateMidnight", "toDateTime", "setEndDate", "getStartDate", "plusDays", "setEffortLeftSum", "setOriginalEstimateSum", "setEffortLeftSum", "expect", "andReturn", "retrieveLatest", "expect", "andReturn", "retrieveByDate", "getId", "minusDays", "replayAll", "assertEquals", "calculateVariance", "verifyAll", "setParent", "setId", "add", "setAssignedStories", "add", "setTasks", "add", "setAssignments", "add", "setHistoryEntries", "add", "setHourEntries", "expect", "andReturn", "get", "getId", "removeBacklogRanks", "forceDelete", "delete", "getId", "delete", "getId", "delete", "getId", "deleteAll", "getHourEntries", "remove", "replayAll", "delete", "getId", "verifyAll", "setId", "add", "setAssignedStories", "add", "setTasks", "add", "setAssignments", "add", "setHistoryEntries", "add", "setHourEntries", "expect", "andReturn", "get", "getId", "removeBacklogRanks", "forceDelete", "delete", "getId", "delete", "getId", "delete", "getId", "deleteAll", "getHourEntries", "remove", "replayAll", "delete", "getId", "verifyAll", "setId", "setParent", "setId", "expect", "andReturn", "get", "getId", "removeBacklogRanks", "deleteAll", "getHourEntries", "remove", "updateHistory", "getId", "replayAll", "deleteAndUpdateHistory", "verifyAll", "setId", "setTimestamp", "setTimestamp", "setId", "setTimestamp", "expect", "andReturn", "asList", "retrieveAddedStories", "expect", "andReturn", "asList", "retrieveDeletedStories", "expect", "andReturn", "asList", "retrieveModifiedStories", "expect", "andReturn", "retrieveClosestRevision", "expect", "andReturn", "retrieveClosestRevision", "replayAll", "retrieveChangesInIterationStories", "verifyAll", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get"], "SCS_VariableDeclaration": ["Story", "Story", "StoryTO", "StoryTO", "List", "IterationTO", "Map", "Map", "List", "IterationTO", "List", "Story", "Map", "Map", "IterationHistoryEntry", "BacklogHourEntry", "BacklogHourEntry", "List", "int", "long", "Integer", "Integer", "int", "int", "IterationMetrics", "IterationMetrics", "IterationMetrics", "Iteration", "IterationHistoryEntry", "IterationMetrics", "DateTime", "DateTime", "Iteration", "Iteration", "DateTime", "DateTime", "DateTime", "DateTime", "Iteration", "User", "Assignment", "Capture", "DateTime", "DateTime", "Iteration", "Project", "Iteration", "LocalDate", "IterationHistoryEntry", "IterationHistoryEntry", "Iteration", "LocalDate", "IterationHistoryEntry", "IterationHistoryEntry", "Iteration", "LocalDate", "IterationHistoryEntry", "IterationHistoryEntry", "Iteration", "Project", "Story", "Set", "Set", "Task", "Set", "Assignment", "Set", "IterationHistoryEntry", "Set", "BacklogHourEntry", "Iteration", "Story", "Set", "Set", "Task", "Set", "Assignment", "Set", "IterationHistoryEntry", "Set", "BacklogHourEntry", "Iteration", "Project", "AgilefantRevisionEntity", "AgilefantHistoryEntry", "AgilefantRevisionEntity", "AgilefantHistoryEntry", "AgilefantRevisionEntity", "AgilefantHistoryEntry", "List"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.business;\n\n\nimport static org.easymock.EasyMock.expect;\nimport static org.easymock.EasyMock.replay;\nimport static org.easymock.EasyMock.verify;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertTrue;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\nimport org.easymock.Capture;\nimport org.easymock.EasyMock;\nimport org.hibernate.envers.RevisionType;\nimport org.joda.time.DateTime;\nimport org.joda.time.Days;\nimport org.joda.time.LocalDate;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.test.annotation.DirtiesContext;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n\nimport fi.hut.soberit.agilefant.business.impl.IterationBusinessImpl;\nimport fi.hut.soberit.agilefant.db.IterationDAO;\nimport fi.hut.soberit.agilefant.db.IterationHistoryEntryDAO;\nimport fi.hut.soberit.agilefant.db.history.BacklogHistoryDAO;\nimport fi.hut.soberit.agilefant.db.history.StoryHistoryDAO;\nimport fi.hut.soberit.agilefant.db.history.TaskHistoryDAO;\nimport fi.hut.soberit.agilefant.exception.ObjectNotFoundException;\nimport fi.hut.soberit.agilefant.model.AgilefantRevisionEntity;\nimport fi.hut.soberit.agilefant.model.Assignment;\nimport fi.hut.soberit.agilefant.model.BacklogHourEntry;\nimport fi.hut.soberit.agilefant.model.ExactEstimate;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.IterationHistoryEntry;\nimport fi.hut.soberit.agilefant.model.Project;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.Task;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.test.Mock;\nimport fi.hut.soberit.agilefant.test.MockContextLoader;\nimport fi.hut.soberit.agilefant.test.MockedTestCase;\nimport fi.hut.soberit.agilefant.test.TestedBean;\nimport fi.hut.soberit.agilefant.transfer.AgilefantHistoryEntry;\nimport fi.hut.soberit.agilefant.transfer.IterationMetrics;\nimport fi.hut.soberit.agilefant.transfer.IterationTO;\nimport fi.hut.soberit.agilefant.transfer.StoryTO;\nimport fi.hut.soberit.agilefant.transfer.TaskTO;\nimport fi.hut.soberit.agilefant.util.HourEntryHandlingChoice;\nimport fi.hut.soberit.agilefant.util.Pair;\nimport fi.hut.soberit.agilefant.util.StoryMetrics;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(loader = MockContextLoader.class)\npublic class IterationBusinessTest  extends MockedTestCase {\n\n    @TestedBean\n    IterationBusinessImpl iterationBusiness;\n    @Mock\n    TransferObjectBusiness transferObjectBusiness;\n    @Mock\n    StoryBusiness storyBusiness;\n    @Mock\n    HourEntryBusiness hourEntryBusiness;\n    @Mock\n    IterationDAO iterationDAO;\n    @Mock\n    IterationHistoryEntryDAO iterationHistoryEntryDAO;\n    @Mock\n    IterationHistoryEntryBusiness iterationHistoryEntryBusiness;\n    @Mock\n    BacklogBusiness backlogBusiness;\n    @Mock\n    AssignmentBusiness assignmentBusiness;\n    @Mock\n    BacklogHistoryEntryBusiness backlogHistoryEntryBusiness;\n    @Mock\n    StoryRankBusiness storyRankBusiness;\n    @Mock\n    TaskBusiness taskBusiness;\n    @Mock\n    StoryHistoryDAO storyHistoryDAO;\n    @Mock\n    BacklogHistoryDAO backlogHistoryDAO;\n    @Mock\n    TeamBusiness teamBusiness;\n    @Mock\n    TaskHistoryDAO taskHistoryDAO;\n    \n    Iteration iteration;\n    Project project;\n    Set<StoryTO> storiesList;\n    Set<Task> tasksWithoutStoryList;\n    Set<TaskTO> tasksTOsWithoutStoryList;\n    IterationTO expectedIterationData;\n    Task task;\n    TaskTO taskTO;\n\n    @Before\n    public void setUp() {\n        iteration = new Iteration();\n        iteration.setId(123);\n        iteration.setStartDate(new DateTime(2010,1,1,0,0,0,0));\n        iteration.setEndDate(new DateTime(2010, 1, 20, 0, 0, 0, 0));\n\n        project = new Project();\n        project.setId(313);\n\n        Story story1 = new Story();\n        story1.setId(666);\n        Story story2 = new Story();\n        story2.setId(667);\n        StoryTO storyTO1 = new StoryTO(story1);\n        StoryTO storyTO2 = new StoryTO(story2);\n        storiesList = new HashSet<StoryTO>(Arrays.asList(storyTO1, storyTO2));\n\n        task = new Task();\n        task.setId(1254);\n        taskTO = new TaskTO(task);\n        tasksWithoutStoryList = new HashSet<Task>(Arrays.asList(task));\n        tasksTOsWithoutStoryList = new HashSet<TaskTO>(Arrays.asList(taskTO));\n\n        expectedIterationData = new IterationTO(new Iteration());\n        expectedIterationData.setStories(new HashSet<Story>());\n        expectedIterationData.getStories().addAll(storiesList);\n        expectedIterationData.setTasks(new HashSet<Task>());\n        expectedIterationData.getTasks().addAll(\n                tasksTOsWithoutStoryList);\n    }\n\n    @Test\n    @DirtiesContext\n    public void testGetIterationContents() {\n        List<Story> stories = new ArrayList<Story>();\n        stories.addAll(iteration.getStories());\n        IterationTO iterationTO = new IterationTO(iteration);\n        \n        expect(iterationDAO.retrieveDeep(iteration.getId())).andReturn(iteration);\n        expect(transferObjectBusiness.constructIterationTO(iteration)).andReturn(iterationTO);\n        expect(storyBusiness.retrieveStoriesInIteration(iteration)).andReturn(stories);\n        Map<Integer, StoryMetrics> emptyMetricsMap = Collections.emptyMap();\n        expect(iterationDAO.calculateIterationDirectStoryMetrics(iteration)).andReturn(emptyMetricsMap);\n        Map<Integer, Long> emptyTaskMap = Collections.emptyMap();\n        expect(iterationDAO.calculateIterationTaskEffortSpent(iteration)).andReturn(emptyTaskMap);\n        \n        replayAll();\n        \n        iterationBusiness.getIterationContents(iteration.getId());\n        \n        verifyAll();\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testGetIterationContents_hasInvalidRank() {\n        List<Story> stories = new ArrayList<Story>();\n        stories.addAll(iteration.getStories());\n        IterationTO iterationTO = new IterationTO(iteration);\n        \n        List<Story> rankedStories = new ArrayList<Story>(stories);\n        Story invalidRank = new Story();\n        invalidRank.setId(999);\n        rankedStories.add(invalidRank);\n        \n        expect(iterationDAO.retrieveDeep(iteration.getId())).andReturn(iteration);\n        expect(transferObjectBusiness.constructIterationTO(iteration)).andReturn(iterationTO);\n        expect(storyBusiness.retrieveStoriesInIteration(iteration)).andReturn(stories);\n\n        Map<Integer, StoryMetrics> emptyMetricsMap = Collections.emptyMap();\n        expect(iterationDAO.calculateIterationDirectStoryMetrics(iteration)).andReturn(emptyMetricsMap);\n        Map<Integer, Long> emptyTaskMap = Collections.emptyMap();\n        expect(iterationDAO.calculateIterationTaskEffortSpent(iteration)).andReturn(emptyTaskMap);\n        \n        replayAll();\n        \n        iterationBusiness.getIterationContents(iteration.getId());\n        \n        verifyAll();\n    }\n\n    @Test(expected = ObjectNotFoundException.class)\n    @DirtiesContext\n    public void testGetIterationContents_nullBacklog() {\n        expect(iterationDAO.retrieveDeep(0)).andReturn(null);\n        replay(iterationDAO);\n        assertNull(iterationBusiness.getIterationContents(0));\n        verify(iterationDAO);\n    }\n\n    @Test\n    @DirtiesContext\n    public void testGetIterationMetrics() {\n        IterationHistoryEntry latestEntry = new IterationHistoryEntry();\n        latestEntry.setEffortLeftSum(112);\n        latestEntry.setOriginalEstimateSum(257);\n\n        BacklogHourEntry he1 = new BacklogHourEntry();\n        BacklogHourEntry he2 = new BacklogHourEntry();\n        he1.setMinutesSpent(39);\n        he2.setMinutesSpent(88);\n\n        List<BacklogHourEntry> hourEntries = new ArrayList<BacklogHourEntry>();\n        hourEntries.addAll(Arrays.asList(he1, he2));\n\n        int expectedStoryPoints = 68;\n        long expectedSpentEffort = 127;\n        Integer expectedPercentDoneTasks = 50;\n        Integer expectedPercentDoneStories = 50;\n        int expectedTaskCompletion = 56;\n        int expectedStoryCompletion = 15;\n\n        expect(iterationHistoryEntryBusiness.retrieveLatest(iteration))\n                .andReturn(latestEntry).times(2);\n        expect(backlogBusiness.getStoryPointSumByIteration(iteration)).andReturn(\n                expectedStoryPoints);\n        expect(backlogBusiness.calculateDoneStoryPointSum(iteration.getId())).andReturn(10);\n        expect(hourEntryBusiness.calculateSumOfIterationsHourEntries(iteration))\n                .andReturn(expectedSpentEffort);\n        expect(iterationDAO.getCountOfDoneAndNonDeferred(iteration)).andReturn(\n                Pair.create(2, 4));\n        expect(iterationDAO.getCountOfDoneAndAllStories(iteration)).andReturn(\n                Pair.create(1, 2));\n        expect(\n                iterationHistoryEntryDAO.retrieveByDate(iteration.getId(),\n                        new LocalDate().minusDays(1))).andReturn(null).times(1);\n        expect(backlogBusiness.getStoryValueSumByIteration(iteration)).andReturn(0);\n        expect(backlogBusiness.getCompletedStoryValueSumByIteration(iteration)).andReturn(0);\n\n        replayAll();\n\n        IterationMetrics actualMetrics = iterationBusiness\n                .getIterationMetrics(iteration);\n\n        assertNotNull(actualMetrics);\n        assertEquals(latestEntry.getEffortLeftSum(), actualMetrics\n                .getEffortLeft().getMinorUnits().longValue());\n        assertEquals(latestEntry.getOriginalEstimateSum(), actualMetrics\n                .getOriginalEstimate().getMinorUnits().longValue());\n        assertEquals(expectedStoryPoints, actualMetrics.getStoryPoints()\n                .intValue());\n        assertEquals(expectedSpentEffort, actualMetrics.getSpentEffort()\n                .getMinorUnits().longValue());\n        assertEquals(expectedPercentDoneTasks, actualMetrics\n                .getPercentDoneTasks());\n        assertEquals(expectedPercentDoneStories, actualMetrics\n                .getPercentDoneStories());\n        assertEquals(10, actualMetrics.getDoneStoryPoints().intValue());\n        assertEquals(expectedTaskCompletion, actualMetrics.getCompletedEffortPercentage());\n        assertEquals(expectedStoryCompletion, actualMetrics.getDoneStoryPointsPercentage());\n\n        verifyAll();\n    }\n\n    @Test\n    @DirtiesContext\n    public void testGetIterationMetricsZeroTotals() {\n        expect(iterationHistoryEntryBusiness.retrieveLatest(iteration))\n                .andReturn(null).times(2);\n        expect(iterationDAO.getCountOfDoneAndNonDeferred(iteration)).andReturn(\n                Pair.create(0, 0));\n        expect(iterationDAO.getCountOfDoneAndAllStories(iteration)).andReturn(\n                Pair.create(0, 0));\n\n        expect(backlogBusiness.getStoryPointSumByIteration(iteration)).andReturn(0);\n        expect(backlogBusiness.calculateDoneStoryPointSum(iteration.getId())).andReturn(0);\n        expect(hourEntryBusiness.calculateSumOfIterationsHourEntries(iteration))\n                .andReturn(0L);\n        expect(backlogBusiness.getStoryValueSumByIteration(iteration)).andReturn(0);\n        expect(backlogBusiness.getCompletedStoryValueSumByIteration(iteration)).andReturn(0);\n\n        replayAll();\n\n        IterationMetrics actualMetrics = iterationBusiness\n                .getIterationMetrics(iteration);\n\n        assertEquals(0, actualMetrics.getPercentDoneStories().intValue());\n        assertEquals(0, actualMetrics.getPercentDoneStories().intValue());\n\n        verifyAll();\n    }\n\n    @Test\n    @DirtiesContext\n    public void testGetIterationMetrics_nullLatestHistoryEntry() {\n        expect(iterationHistoryEntryBusiness.retrieveLatest(iteration))\n                .andReturn(null).times(2);\n        expect(iterationDAO.getCountOfDoneAndNonDeferred(iteration)).andReturn(\n                Pair.create(2, 4));\n        expect(iterationDAO.getCountOfDoneAndAllStories(iteration)).andReturn(\n                Pair.create(1, 3));\n\n        expect(backlogBusiness.calculateDoneStoryPointSum(iteration.getId())).andReturn(0);\n        expect(backlogBusiness.getStoryPointSumByIteration(iteration)).andReturn(0);\n        expect(hourEntryBusiness.calculateSumOfIterationsHourEntries(iteration))\n                .andReturn(0L);\n        expect(backlogBusiness.getStoryValueSumByIteration(iteration)).andReturn(0);\n        expect(backlogBusiness.getCompletedStoryValueSumByIteration(iteration)).andReturn(0);\n\n        replayAll();\n\n        IterationMetrics actualMetrics = iterationBusiness\n                .getIterationMetrics(iteration);\n\n        assertEquals(0L, actualMetrics.getEffortLeft().getMinorUnits()\n                .longValue());\n        assertEquals(0L, actualMetrics.getOriginalEstimate().getMinorUnits()\n                .longValue());\n\n        verifyAll();\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testGetIterationMetrics_withInterval() {\n        Iteration iter = new Iteration();\n        iter.setId(100);\n        iter.setStartDate(new DateTime());\n        iter.setEndDate(iter.getStartDate().plusDays(100));\n        IterationHistoryEntry latestHistoryEntry = new IterationHistoryEntry();\n        latestHistoryEntry.setOriginalEstimateSum(10);\n        latestHistoryEntry.setEffortLeftSum(10);\n\n        expect(iterationHistoryEntryBusiness.retrieveLatest(iter)).andReturn(\n                latestHistoryEntry).times(2);\n\n        expect(backlogBusiness.daysLeftInSchedulableBacklog(iter)).andReturn(Days.days(100));\n        expect(backlogBusiness.getStoryPointSumByIteration(iter)).andReturn(10);\n        expect(backlogBusiness.calculateDoneStoryPointSum(iter.getId())).andReturn(5);\n        expect(hourEntryBusiness.calculateSumOfIterationsHourEntries(iter))\n                .andReturn((long) 10);\n        expect(iterationDAO.getCountOfDoneAndNonDeferred(iter)).andReturn(\n                Pair.create(2, 4));\n        expect(iterationDAO.getCountOfDoneAndAllStories(iter)).andReturn(\n                Pair.create(1, 2));\n        expect(\n                iterationHistoryEntryDAO.retrieveByDate(100, new LocalDate()\n                        .minusDays(1))).andReturn(null).times(1);\n        expect(backlogBusiness.getStoryValueSumByIteration(iter)).andReturn(0);\n        expect(backlogBusiness.getCompletedStoryValueSumByIteration(iter)).andReturn(0);\n        replayAll();\n        IterationMetrics iterRow = iterationBusiness.getIterationMetrics(iter);\n        assertEquals(100, iterRow.getDaysLeft());\n        assertEquals(10, iterRow.getEffortLeft().intValue());\n        assertEquals(10, iterRow.getOriginalEstimate().intValue());\n        assertEquals(5, iterRow.getDoneStoryPoints().intValue());\n        verifyAll();\n    }\n    \n\n    @Test(expected = IllegalArgumentException.class)\n    public void testGetIterationMetrics_nullIteration() {\n        iterationBusiness.getIterationMetrics(null);\n    }\n\n    @Test\n    @DirtiesContext\n    public void testStoreIteration() {\n        DateTime start = new DateTime();\n        DateTime end = start.plusDays(3);\n        Iteration iter = new Iteration();\n        iter.setStartDate(start);\n        iter.setEndDate(end);\n        iter.setParent(project);\n        iteration.setParent(project);\n        iter.setBacklogSize(new ExactEstimate(120L));\n        iter.setName(\"foo\");\n        iter.setDescription(\"quu\");\n        iter.setBaselineLoad(new ExactEstimate(100L));\n\n        expect(backlogBusiness.retrieve(11)).andReturn(project);\n        expect(iterationDAO.get(10)).andReturn(iteration);\n        iterationDAO.store(iteration);\n        expect(transferObjectBusiness.constructIterationTO(EasyMock.isA(Iteration.class)))\n            .andReturn(new IterationTO(iter));\n\n        replayAll();\n\n        Iteration actual = this.iterationBusiness.store(10, 11, iter, null, null);\n        assertEquals(iter.getStartDate(), actual.getStartDate());\n        assertEquals(iter.getEndDate(), actual.getEndDate());\n        assertEquals(iter.getBacklogSize(), actual.getBacklogSize());\n        assertEquals(iter.getBaselineLoad(), actual.getBaselineLoad());\n        assertEquals(iter.getName(), actual.getName());\n        assertEquals(iter.getDescription(), actual.getDescription());\n        verifyAll();\n\n    }\n\n    @Test(expected = IllegalArgumentException.class)\n    @DirtiesContext\n    public void testStoreIteration_iterationParent() {\n        expect(backlogBusiness.retrieve(11)).andReturn(iteration);\n        replayAll();\n        this.iterationBusiness.store(10, 11, this.iteration, null, null);\n        verifyAll();\n    }\n\n    @Test(expected = ObjectNotFoundException.class)\n    @DirtiesContext\n    public void testStoreIteration_nullParent() {\n        expect(backlogBusiness.retrieve(11)).andThrow(new ObjectNotFoundException());\n        replayAll();\n        this.iterationBusiness.store(10, 11, this.iteration, null, null);\n        verifyAll();\n    }\n\n    @Test(expected = IllegalArgumentException.class)\n    @DirtiesContext\n    public void testStoreIteration_invalidInterval() {\n        DateTime start = new DateTime();\n        DateTime end = start.minusDays(3);\n        iteration.setStartDate(start);\n        iteration.setEndDate(end);\n\n        expect(backlogBusiness.retrieve(12)).andReturn(project);\n        replayAll();\n        this.iterationBusiness.store(11, 12, iteration, null, null);\n        verifyAll();\n    }\n\n    @Test\n    @DirtiesContext\n    public void testCreateIteration() {\n        DateTime start = new DateTime();\n        DateTime end = start.plusDays(3);\n        Iteration iter = new Iteration();\n        iter.setStartDate(start);\n        iter.setEndDate(end);\n        iter.setParent(project);\n        iteration.setParent(project);\n        iter.setBacklogSize(new ExactEstimate(120L));\n        iter.setName(\"foo\");\n        iter.setDescription(\"quu\");\n        iter.setBaselineLoad(new ExactEstimate(100L));\n        User user = new User();\n        user.setId(1);\n        Assignment assignment = new Assignment();\n        \n        Capture<Set<Integer>> userIdCapture = new Capture<Set<Integer>>();\n        expect(backlogBusiness.retrieve(11)).andReturn(project);\n        expect(iterationDAO.create(EasyMock.isA(Iteration.class))).andReturn(new Integer(16));\n        expect(iterationDAO.get(16)).andReturn(iteration);\n        expect(assignmentBusiness.addMultiple(EasyMock.eq(iteration), \n                EasyMock.capture(userIdCapture))).andReturn(new HashSet<Assignment>(Arrays.asList(assignment)));\n        expect(transferObjectBusiness.constructIterationTO(iteration))\n                .andReturn(new IterationTO(iteration));\n        \n        replayAll();\n        \n        this.iterationBusiness.store(0, 11, iter, new HashSet<Integer>(Arrays.asList(1)), null);\n        assertEquals(1, userIdCapture.getValue().size());\n        assertTrue(userIdCapture.getValue().contains(1));\n        verifyAll();\n    }\n\n    @Test\n    @DirtiesContext\n    public void testCreateIteration_noAssigments() {\n        DateTime start = new DateTime();\n        DateTime end = start.plusDays(3);\n        Iteration iter = new Iteration();\n        iter.setStartDate(start);\n        iter.setEndDate(end);\n        iter.setParent(project);\n        iteration.setParent(project);        \n        expect(backlogBusiness.retrieve(11)).andReturn(project);\n        expect(iterationDAO.create(EasyMock.isA(Iteration.class))).andReturn(new Integer(16));\n        expect(iterationDAO.get(16)).andReturn(iteration);\n        expect(transferObjectBusiness.constructIterationTO(iteration))\n            .andReturn(new IterationTO(iteration));\n        replayAll();\n        this.iterationBusiness.store(0, 11, iter, null, null);\n        verifyAll();\n    }\n    @Test\n    @DirtiesContext\n    public void testMoveTo() {\n        Project newParent = new Project();\n        newParent.setId(911);\n        iteration.setParent(project);\n        iterationDAO.store(iteration);\n        backlogHistoryEntryBusiness.updateHistory(911);\n        backlogHistoryEntryBusiness.updateHistory(313);\n        replayAll();\n        this.iterationBusiness.moveTo(iteration, newParent);\n        verifyAll();\n    }\n\n    @Test\n    @DirtiesContext\n    public void testCalculateVariance() {\n        Iteration iter = new Iteration();\n        LocalDate today = new LocalDate();\n        iter.setId(100);\n        iter.setStartDate(today.minusDays(10).toDateMidnight().toDateTime());\n        iter.setEndDate(iter.getStartDate().plusDays(100));\n        IterationHistoryEntry latestHistoryEntry = new IterationHistoryEntry();\n        IterationHistoryEntry yesterdayHistoryEntry = new IterationHistoryEntry();\n        yesterdayHistoryEntry.setEffortLeftSum(60);\n        yesterdayHistoryEntry.setOriginalEstimateSum(70);\n        latestHistoryEntry.setEffortLeftSum(60);\n        \n        expect(iterationHistoryEntryBusiness.retrieveLatest(iter)).andReturn(latestHistoryEntry);    \n        expect(backlogBusiness.daysLeftInSchedulableBacklog(iter)).andReturn(Days.days(90));\n        expect(iterationHistoryEntryDAO.retrieveByDate(iter.getId(), today.minusDays(1))).andReturn(yesterdayHistoryEntry);\n        replayAll();\n        assertEquals((Integer)(-30), iterationBusiness.calculateVariance(iter));\n        verifyAll();\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testCalculateVariance_notStarted() {\n        Iteration iter = new Iteration();\n        LocalDate today = new LocalDate();\n        iter.setId(100);\n        iter.setStartDate(today.plusDays(10).toDateMidnight().toDateTime());\n        iter.setEndDate(iter.getStartDate().plusDays(100));\n        IterationHistoryEntry latestHistoryEntry = new IterationHistoryEntry();\n        IterationHistoryEntry yesterdayHistoryEntry = new IterationHistoryEntry();\n        yesterdayHistoryEntry.setEffortLeftSum(60);\n        yesterdayHistoryEntry.setOriginalEstimateSum(70);\n        latestHistoryEntry.setEffortLeftSum(60);\n        \n        expect(iterationHistoryEntryBusiness.retrieveLatest(iter)).andReturn(latestHistoryEntry);    \n        expect(iterationHistoryEntryDAO.retrieveByDate(iter.getId(), today.minusDays(1))).andReturn(yesterdayHistoryEntry);\n        replayAll();\n        assertEquals(null, iterationBusiness.calculateVariance(iter));\n        verifyAll();\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testCalculateVariance_noEffortLeft() {\n        Iteration iter = new Iteration();\n        LocalDate today = new LocalDate();\n        iter.setId(100);\n        iter.setStartDate(today.minusDays(10).toDateMidnight().toDateTime());\n        iter.setEndDate(iter.getStartDate().plusDays(100));\n        IterationHistoryEntry latestHistoryEntry = new IterationHistoryEntry();\n        IterationHistoryEntry yesterdayHistoryEntry = new IterationHistoryEntry();\n        yesterdayHistoryEntry.setEffortLeftSum(0);\n        yesterdayHistoryEntry.setOriginalEstimateSum(30);\n        latestHistoryEntry.setEffortLeftSum(0);\n        \n        expect(iterationHistoryEntryBusiness.retrieveLatest(iter)).andReturn(latestHistoryEntry);    \n        expect(iterationHistoryEntryDAO.retrieveByDate(iter.getId(), today.minusDays(1))).andReturn(yesterdayHistoryEntry);\n        replayAll();\n        assertEquals(null, iterationBusiness.calculateVariance(iter));\n        verifyAll();\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testDeleteIteration() {\n        Iteration iter = new Iteration();\n        Project project = new Project();\n        iter.setParent(project);\n        iter.setId(111);\n        Story story = new Story();\n        Set<Story> stories = new HashSet<Story>();\n        stories.add(story);\n        iter.setAssignedStories(stories);\n        Set<Task> tasks = new HashSet<Task>();\n        Task task = new Task();\n        tasks.add(task);\n        iter.setTasks(tasks);\n        Set<Assignment> assignments = new HashSet<Assignment>();\n        Assignment assignment = new Assignment();\n        assignments.add(assignment);\n        iter.setAssignments(assignments);\n        Set<IterationHistoryEntry> historyEntries = new HashSet<IterationHistoryEntry>();\n        IterationHistoryEntry historyEntry = new IterationHistoryEntry();\n        historyEntries.add(historyEntry);\n        iter.setHistoryEntries(historyEntries);\n        Set<BacklogHourEntry> hourEntries = new HashSet<BacklogHourEntry>();\n        BacklogHourEntry hourEntry = new BacklogHourEntry();\n        hourEntries.add(hourEntry);\n        iter.setHourEntries(hourEntries);\n        \n        expect(iterationDAO.get(iter.getId())).andReturn(iter);\n        \n        storyRankBusiness.removeBacklogRanks(iter);\n        \n        storyBusiness.forceDelete(story);\n        iterationHistoryEntryBusiness.delete(historyEntry.getId());\n        assignmentBusiness.delete(assignment.getId());\n        taskBusiness.delete(task.getId(), HourEntryHandlingChoice.DELETE);\n        hourEntryBusiness.deleteAll(iter.getHourEntries());\n        \n        iterationDAO.remove(iter);\n        \n        replayAll();\n        iterationBusiness.delete(iter.getId());\n        verifyAll();\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testDeleteStandaloneIteration() {\n        Iteration iter = new Iteration();\n        iter.setId(112);\n        Story story = new Story();\n        Set<Story> stories = new HashSet<Story>();\n        stories.add(story);\n        iter.setAssignedStories(stories);\n        Set<Task> tasks = new HashSet<Task>();\n        Task task = new Task();\n        tasks.add(task);\n        iter.setTasks(tasks);\n        Set<Assignment> assignments = new HashSet<Assignment>();\n        Assignment assignment = new Assignment();\n        assignments.add(assignment);\n        iter.setAssignments(assignments);\n        Set<IterationHistoryEntry> historyEntries = new HashSet<IterationHistoryEntry>();\n        IterationHistoryEntry historyEntry = new IterationHistoryEntry();\n        historyEntries.add(historyEntry);\n        iter.setHistoryEntries(historyEntries);\n        Set<BacklogHourEntry> hourEntries = new HashSet<BacklogHourEntry>();\n        BacklogHourEntry hourEntry = new BacklogHourEntry();\n        hourEntries.add(hourEntry);\n        iter.setHourEntries(hourEntries);\n        \n        expect(iterationDAO.get(iter.getId())).andReturn(iter);\n        \n        storyRankBusiness.removeBacklogRanks(iter);\n        \n        storyBusiness.forceDelete(story);\n        iterationHistoryEntryBusiness.delete(historyEntry.getId());\n        assignmentBusiness.delete(assignment.getId());\n        taskBusiness.delete(task.getId(), HourEntryHandlingChoice.DELETE);\n        hourEntryBusiness.deleteAll(iter.getHourEntries());\n        \n        iterationDAO.remove(iter);\n        \n        replayAll();\n        iterationBusiness.delete(iter.getId());\n        verifyAll();\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testdeleteAndUpdateHistory() {\n        Iteration iteration = new Iteration();\n        iteration.setId(111);\n        Project project = new Project();\n        iteration.setParent(project);\n        project.setId(10);\n        expect(iterationDAO.get(iteration.getId())).andReturn(iteration);\n        \n        storyRankBusiness.removeBacklogRanks(iteration);\n        \n        hourEntryBusiness.deleteAll(iteration.getHourEntries());\n        iterationDAO.remove(iteration);\n        backlogHistoryEntryBusiness.updateHistory(project.getId());\n        replayAll();\n        iterationBusiness.deleteAndUpdateHistory(111);\n        verifyAll();\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testRetrieveChangesInIterationStories() {\n        AgilefantRevisionEntity revDeleted = new AgilefantRevisionEntity();\n        revDeleted.setId(1200);\n        revDeleted.setTimestamp(200);\n        AgilefantHistoryEntry deleted = new AgilefantHistoryEntry(200, RevisionType.DEL, revDeleted);\n        \n        AgilefantRevisionEntity revAdded = new AgilefantRevisionEntity();\n        revAdded.setTimestamp(10000);\n        AgilefantHistoryEntry added = new AgilefantHistoryEntry(new Story(), revAdded, RevisionType.ADD);\n        \n        AgilefantRevisionEntity revModified = new AgilefantRevisionEntity();\n        revModified.setId(2400);\n        revModified.setTimestamp(20000);\n        AgilefantHistoryEntry modified = new AgilefantHistoryEntry(20000, RevisionType.MOD, revModified);\n        \n        expect(backlogHistoryDAO.retrieveAddedStories(iteration)).andReturn(Arrays.asList(added));\n        expect(backlogHistoryDAO.retrieveDeletedStories(iteration)).andReturn(Arrays.asList(deleted));\n        expect(backlogHistoryDAO.retrieveModifiedStories(iteration)).andReturn(Arrays.asList(modified));\n        expect(storyHistoryDAO.retrieveClosestRevision(200, 1200)).andReturn(null);\n        expect(storyHistoryDAO.retrieveClosestRevision(20000, 2400)).andReturn(null);\n        \n        replayAll();\n        List<AgilefantHistoryEntry> actual = this.iterationBusiness.retrieveChangesInIterationStories(iteration);\n        verifyAll();\n        assertEquals(modified, actual.get(0));\n        assertEquals(added, actual.get(1));\n        assertEquals(deleted, actual.get(2));\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\IterationHistoryEntryBusinessTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["IterationHistoryEntryBusinessTest"], "AN": ["iterationHistoryEntryBusiness", "iterationHistoryEntryDAO", "iterationDAO", "iteration", "latestEntry"], "SCS_VariableDeclarator": ["iterationHistoryEntryBusiness", "iterationHistoryEntryDAO", "iterationDAO", "iteration", "latestEntry", "expectedEstimate", "sums", "capturedEntry", "entry", "sums", "capturedEntry", "entry"], "MN": ["setUp", "testGetLatestOriginalEstimateSum", "testGetLatestOriginalEstimateSum_nullValue", "testUpdateIterationHistory_latestEntryYesterday", "testUpdateIterationHistory_latestEntryToday", "testGetHistoryEntriesForIteration", "testRetrieveLatest"], "PN": [], "SCS_MemberReference": ["iterationHistoryEntryBusiness", "iterationHistoryEntryDAO", "iterationDAO", "iterationDAO", "iterationHistoryEntryDAO", "iteration", "latestEntry", "iteration", "latestEntry", "iterationHistoryEntryDAO", "iteration", "iterationHistoryEntryDAO", "iterationHistoryEntryDAO", "iteration", "iterationHistoryEntryDAO", "iteration", "latestEntry", "sums", "capturedEntry", "iterationDAO", "iterationHistoryEntryDAO", "iteration", "iterationDAO", "iterationHistoryEntryDAO", "iteration", "latestEntry", "sums", "capturedEntry", "iterationDAO", "iterationHistoryEntryDAO", "iteration", "iterationDAO", "iterationHistoryEntryDAO", "iterationHistoryEntryDAO", "iteration", "iterationHistoryEntryDAO", "latestEntry", "iterationHistoryEntryDAO", "latestEntry", "iteration", "iterationHistoryEntryDAO"], "SCS_ClassReference": ["", "IterationHistoryEntryDAO", "", "IterationDAO", "iterationHistoryEntryBusiness", "iterationHistoryEntryBusiness", "iteration", "latestEntry", "latestEntry", "latestEntry", "latestEntry", "latestEntry", "", null, "iterationHistoryEntryDAO", "iteration", "", "latestEntry", "", "expectedEstimate", "iterationHistoryEntryBusiness", null, "", "", null, "iterationHistoryEntryDAO", "iteration", "", "", "iterationHistoryEntryBusiness", null, "", "latestEntry", null, "Pair", "", null, "iterationDAO", "", null, "iterationHistoryEntryDAO", "", null, "iterationHistoryEntryDAO", "iterationHistoryEntryDAO", "", "", "iterationHistoryEntryBusiness", "capturedEntry", "", "entry", "", "entry", "", "entry", "", "entry", "", "entry", "", "entry", "", "Pair", "", null, "iterationDAO", "", null, "iterationHistoryEntryDAO", "", null, "iterationHistoryEntryDAO", "iterationHistoryEntryDAO", "", "", "iterationHistoryEntryBusiness", "capturedEntry", "", "entry", "", "entry", "", "entry", "", "entry", "", "latestEntry", "entry", "", "entry", "", "", null, "iterationHistoryEntryDAO", "iteration", "", "iterationHistoryEntryBusiness", "", "", null, "iterationHistoryEntryDAO", "iteration", "", "", "iterationHistoryEntryBusiness", ""], "SCS_MethodInvocation": ["createMock", "createMock", "setIterationDAO", "setIterationHistoryEntryDAO", "setId", "setIteration", "setId", "setEffortLeftSum", "setOriginalEstimateSum", "setTimestamp", "expect", "andReturn", "retrieveLatest", "getId", "replay", "getOriginalEstimateSum", "assertEquals", "getMinorUnits", "getLatestOriginalEstimateSum", "getMinorUnits", "verify", "expect", "andReturn", "retrieveLatest", "getId", "replay", "assertEquals", "getLatestOriginalEstimateSum", "getMinorUnits", "verify", "setTimestamp", "minusDays", "create", "expect", "andReturn", "get", "expect", "andReturn", "retrieveLatest", "expect", "andReturn", "calculateCurrentHistoryData", "store", "capture", "replay", "updateIterationHistory", "getValue", "assertEquals", "getDeltaOriginalEstimate", "assertEquals", "getEffortLeftSum", "assertEquals", "getOriginalEstimateSum", "assertEquals", "getId", "assertNotNull", "getTimestamp", "assertEquals", "getIteration", "verify", "create", "expect", "andReturn", "get", "expect", "andReturn", "retrieveLatest", "expect", "andReturn", "calculateCurrentHistoryData", "store", "capture", "replay", "updateIterationHistory", "getValue", "assertEquals", "getDeltaOriginalEstimate", "assertEquals", "getEffortLeftSum", "assertEquals", "getOriginalEstimateSum", "assertNotNull", "getTimestamp", "assertEquals", "getId", "getId", "assertEquals", "getIteration", "verify", "expect", "andReturn", "getHistoryEntriesForIteration", "getId", "replay", "getHistoryEntriesForIteration", "verify", "expect", "andReturn", "retrieveLatest", "getId", "replay", "assertEquals", "retrieveLatest", "verify"], "SCS_VariableDeclaration": ["ExactEstimate", "Pair", "Capture", "IterationHistoryEntry", "Pair", "Capture", "IterationHistoryEntry"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport static org.easymock.EasyMock.*;\nimport static org.junit.Assert.*;\n\nimport org.easymock.Capture;\nimport org.joda.time.LocalDate;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport fi.hut.soberit.agilefant.business.impl.IterationHistoryEntryBusinessImpl;\nimport fi.hut.soberit.agilefant.db.IterationDAO;\nimport fi.hut.soberit.agilefant.db.IterationHistoryEntryDAO;\nimport fi.hut.soberit.agilefant.model.ExactEstimate;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.IterationHistoryEntry;\nimport fi.hut.soberit.agilefant.util.Pair;\n\n\npublic class IterationHistoryEntryBusinessTest {\n    \n    private IterationHistoryEntryBusinessImpl iterationHistoryEntryBusiness;\n    \n    private IterationHistoryEntryDAO iterationHistoryEntryDAO;\n    \n    private IterationDAO iterationDAO;\n    \n    Iteration iteration;\n    IterationHistoryEntry latestEntry;\n    \n    @Before\n    public void setUp() {\n        this.iterationHistoryEntryBusiness = new IterationHistoryEntryBusinessImpl();\n        this.iterationHistoryEntryDAO = createMock(IterationHistoryEntryDAO.class);\n        this.iterationDAO = createMock(IterationDAO.class);\n        iterationHistoryEntryBusiness.setIterationDAO(iterationDAO);\n        iterationHistoryEntryBusiness.setIterationHistoryEntryDAO(iterationHistoryEntryDAO);\n        \n        iteration = new Iteration();\n        iteration.setId(1);\n        \n        latestEntry = new IterationHistoryEntry();\n        latestEntry.setIteration(iteration);\n        latestEntry.setId(666);\n        latestEntry.setEffortLeftSum(60);\n        latestEntry.setOriginalEstimateSum(90);\n        latestEntry.setTimestamp(new LocalDate());\n    }\n    \n    @Test\n    public void testGetLatestOriginalEstimateSum() {\n        expect(iterationHistoryEntryDAO.retrieveLatest(iteration.getId()))\n                .andReturn(latestEntry);\n        replay(iterationHistoryEntryDAO);\n        ExactEstimate expectedEstimate = new ExactEstimate(latestEntry.getOriginalEstimateSum());\n        assertEquals(expectedEstimate.getMinorUnits(), iterationHistoryEntryBusiness\n                .getLatestOriginalEstimateSum(iteration).getMinorUnits());\n\n        verify(iterationHistoryEntryDAO);\n    }\n    \n    \n    @Test\n    public void testGetLatestOriginalEstimateSum_nullValue() {\n        expect(iterationHistoryEntryDAO.retrieveLatest(iteration.getId()))\n                .andReturn(null);\n        replay(iterationHistoryEntryDAO);\n\n        assertEquals(new Long(0), iterationHistoryEntryBusiness\n                .getLatestOriginalEstimateSum(iteration).getMinorUnits());\n\n        verify(iterationHistoryEntryDAO);        \n    }\n    \n    @Test\n    public void testUpdateIterationHistory_latestEntryYesterday() {\n        latestEntry.setTimestamp(new LocalDate().minusDays(1));\n        Pair<ExactEstimate, ExactEstimate> sums = Pair.create(new ExactEstimate(10), new ExactEstimate(20));\n        \n        expect(iterationDAO.get(1)).andReturn(iteration);\n        expect(iterationHistoryEntryDAO.retrieveLatest(1)).andReturn(latestEntry);        \n        expect(iterationHistoryEntryDAO.calculateCurrentHistoryData(1)).andReturn(sums);\n        Capture<IterationHistoryEntry> capturedEntry = new Capture<IterationHistoryEntry>();\n        iterationHistoryEntryDAO.store(capture(capturedEntry));\n        replay(iterationDAO, iterationHistoryEntryDAO);\n        \n        iterationHistoryEntryBusiness.updateIterationHistory(1);\n        IterationHistoryEntry entry = capturedEntry.getValue();\n        assertEquals((long)-70, entry.getDeltaOriginalEstimate());\n        assertEquals((long)10, entry.getEffortLeftSum());\n        assertEquals((long)20, entry.getOriginalEstimateSum());\n        assertEquals(0, entry.getId());\n        assertNotNull(entry.getTimestamp());\n        assertEquals(iteration, entry.getIteration());\n       \n        verify(iterationDAO, iterationHistoryEntryDAO);\n    }\n    \n    @Test\n    public void testUpdateIterationHistory_latestEntryToday() {\n        Pair<ExactEstimate, ExactEstimate> sums = Pair.create(new ExactEstimate(10), new ExactEstimate(20));\n        \n        expect(iterationDAO.get(1)).andReturn(iteration);\n        expect(iterationHistoryEntryDAO.retrieveLatest(1)).andReturn(latestEntry);        \n        expect(iterationHistoryEntryDAO.calculateCurrentHistoryData(1)).andReturn(sums);\n        Capture<IterationHistoryEntry> capturedEntry = new Capture<IterationHistoryEntry>();\n        iterationHistoryEntryDAO.store(capture(capturedEntry));\n        replay(iterationDAO, iterationHistoryEntryDAO);\n        \n        iterationHistoryEntryBusiness.updateIterationHistory(1);\n        IterationHistoryEntry entry = capturedEntry.getValue();\n        assertEquals((long)-70, entry.getDeltaOriginalEstimate());\n        assertEquals((long)10, entry.getEffortLeftSum());\n        assertEquals((long)20, entry.getOriginalEstimateSum());\n        assertNotNull(entry.getTimestamp());\n        assertEquals(latestEntry.getId(), entry.getId());\n        assertEquals(iteration, entry.getIteration());\n        \n       \n        verify(iterationDAO, iterationHistoryEntryDAO);\n    }\n    \n    @Test\n    public void testGetHistoryEntriesForIteration() {\n        expect(iterationHistoryEntryDAO.getHistoryEntriesForIteration(iteration.getId()))\n            .andReturn(null);\n        replay(iterationHistoryEntryDAO);\n        \n        iterationHistoryEntryBusiness.getHistoryEntriesForIteration(iteration);\n        \n        verify(iterationHistoryEntryDAO);\n    }\n\n    @Test\n    public void testRetrieveLatest() {\n        expect(iterationHistoryEntryDAO.retrieveLatest(iteration.getId()))\n            .andReturn(latestEntry);\n        replay(iterationHistoryEntryDAO);\n        \n        assertEquals(latestEntry, iterationHistoryEntryBusiness.retrieveLatest(iteration));\n        \n        verify(iterationHistoryEntryDAO);\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\LabelBusinessTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["LabelBusinessTest"], "SCS_ClassReference": ["SpringJUnit4ClassRunner", "MockContextLoader", "", null, "labelDAO", "", "labelBusiness", "", null, null, "Arrays", "", null, "storyBusiness", "", null, "labelDAO", "", null, "labelDAO", "", null, "labelDAO", "EasyMock", "", null, "labelDAO", "", "labelBusiness", "", "", "capt", null, "", "capt", null, "", "addee", null], "AN": ["labelBusiness", "labelDAO", "storyBusiness"], "SCS_VariableDeclarator": ["labelBusiness", "labelDAO", "storyBusiness", "list", "user", "labelNames", "addee", "l1", "capt"], "MN": ["testLookUpLabelsLike", "testCreateStoryLabels"], "PN": [], "SCS_VariableDeclaration": ["List", "User", "List", "Story", "Label", "Capture"], "SCS_MethodInvocation": ["expect", "andReturn", "lookupLabelsLike", "replay", "lookupLabelsLike", "verify", "clearLoggedInUser", "setCurrentUser", "asList", "expect", "andReturn", "retrieve", "expect", "andReturn", "labelExists", "expect", "andReturn", "labelExists", "expect", "andReturn", "create", "capture", "expect", "andReturn", "get", "replayAll", "createStoryLabels", "verifyAll", "assertEquals", "getValue", "getCreator", "assertEquals", "getValue", "getDisplayName", "assertTrue", "getLabels", "contains"], "SCS_MemberReference": ["list", "labelDAO", "labelDAO", "user", "addee", "addee", "addee", "capt", "l1", "labelNames", "user", "l1"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport static org.easymock.EasyMock.expect;\nimport static org.easymock.EasyMock.replay;\nimport static org.easymock.EasyMock.verify;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertTrue;\n\nimport java.util.Arrays;\nimport java.util.LinkedList;\nimport java.util.List;\n\nimport org.easymock.Capture;\nimport org.easymock.EasyMock;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.test.annotation.DirtiesContext;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n\nimport fi.hut.soberit.agilefant.business.impl.LabelBusinessImpl;\nimport fi.hut.soberit.agilefant.db.LabelDAO;\nimport fi.hut.soberit.agilefant.model.Label;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.test.Mock;\nimport fi.hut.soberit.agilefant.test.MockContextLoader;\nimport fi.hut.soberit.agilefant.test.MockedTestCase;\nimport fi.hut.soberit.agilefant.test.TestedBean;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(loader = MockContextLoader.class)\npublic class LabelBusinessTest extends MockedTestCase {\n    \n    @TestedBean\n    private LabelBusinessImpl labelBusiness;\n    @Mock\n    private LabelDAO labelDAO;\n    @Mock\n    private StoryBusiness storyBusiness;\n    \n    @Test\n    @DirtiesContext\n    public void testLookUpLabelsLike() {\n        List<Label> list = new LinkedList<Label>();\n        expect(labelDAO.lookupLabelsLike(\"Notfound\")).andReturn(list);\n        replay(labelDAO);\n        labelBusiness.lookupLabelsLike(\"Notfound\");\n        verify(labelDAO);\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testCreateStoryLabels() {\n        User user = new User();\n        \n        this.clearLoggedInUser();\n        this.setCurrentUser(user);\n        \n        List<String> labelNames = Arrays.asList(\"foo\",\"faa\");\n        Story addee = new Story();\n        \n        Label l1 = new Label();\n        \n        expect(storyBusiness.retrieve(1)).andReturn(addee);\n        expect(labelDAO.labelExists(\"foo\", addee)).andReturn(false);\n        expect(labelDAO.labelExists(\"faa\", addee)).andReturn(true);\n        Capture<Label> capt = new Capture<Label>();\n        expect(labelDAO.create(EasyMock.capture(capt))).andReturn(1);\n        expect(labelDAO.get(1)).andReturn(l1);\n        \n        replayAll();\n        labelBusiness.createStoryLabels(labelNames, 1);\n        verifyAll();\n        \n        assertEquals(user, capt.getValue().getCreator());\n        assertEquals(\"foo\", capt.getValue().getDisplayName());\n        assertTrue(addee.getLabels().contains(l1));        \n        \n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\MenuBusinessTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["MenuBusinessTest"], "AN": ["menuBusiness", "productBusiness", "iterationBusiness", "projectDAO", "iterationDAO", "storyDAO", "transferObjectBusiness", "userBusiness", "authorizationBusiness", "products"], "SCS_VariableDeclarator": ["menuBusiness", "productBusiness", "iterationBusiness", "projectDAO", "iterationDAO", "storyDAO", "transferObjectBusiness", "userBusiness", "authorizationBusiness", "products", "prod1", "prod2", "proj1", "proj2", "proj3", "iter1", "iter2", "iter3", "user", "team", "users", "teams", "emptyStandAloneIterations", "actual", "user", "project", "iteration", "story", "nodes", "projectNode", "iterationNode", "storyNode"], "MN": ["setUp_dependencies", "setUp_dataset", "replayAll", "verifyAll", "constructBacklogMenuData", "testConstructMyAssigmentsData", "checkProducts", "checkProjects", "checkIterations"], "PN": ["nodes", "nodes", "nodes"], "SCS_MemberReference": ["menuBusiness", "productBusiness", "productBusiness", "transferObjectBusiness", "transferObjectBusiness", "iterationBusiness", "iterationBusiness", "iterationDAO", "iterationDAO", "projectDAO", "projectDAO", "storyDAO", "storyDAO", "userBusiness", "userBusiness", "authorizationBusiness", "authorizationBusiness", "products", "prod1", "prod2", "proj1", "proj2", "proj3", "iter1", "iter2", "iter3", "iterationDAO", "projectDAO", "storyDAO", "productBusiness", "transferObjectBusiness", "iterationBusiness", "userBusiness", "authorizationBusiness", "iterationDAO", "projectDAO", "storyDAO", "productBusiness", "transferObjectBusiness", "iterationBusiness", "userBusiness", "authorizationBusiness", "user", "user", "users", "team", "teams", "products", "products", "emptyStandAloneIterations", "FUTURE", "actual", "project", "iteration", "project", "iteration", "story", "user"], "SCS_ClassReference": ["", "ProductBusiness", "menuBusiness", "", "TransferObjectBusiness", "menuBusiness", "", "IterationBusiness", "menuBusiness", "", "IterationDAO", "menuBusiness", "", "ProjectDAO", "menuBusiness", "", "StoryDAO", "menuBusiness", "", "UserBusiness", "menuBusiness", "", "AuthorizationBusiness", "menuBusiness", "prod1", "prod1", "products", "prod2", "products", "prod2", "proj1", "proj1", "proj2", "proj2", "proj3", "proj3", "prod1", null, "prod1", null, "prod1", null, "iter1", "iter1", "iter2", "iter2", "iter3", "iter3", "proj1", null, "proj1", null, "proj1", null, "", "", "user", "SecurityUtil", "users", "team", "teams", "user", "team", "", null, "productBusiness", "", null, "authorizationBusiness", "SecurityUtil", "", null, "authorizationBusiness", "SecurityUtil", "", null, "iterationBusiness", "", null, null, "transferObjectBusiness", "", "Backlog", "", "menuBusiness", "", "", "actual", "", "user", "project", "project", "iteration", "iteration", "iteration", "story", "story", "story", "", null, "Arrays", "projectDAO", "user", "", null, "Arrays", "iterationDAO", "user", "", null, "Arrays", "storyDAO", "user", "", "menuBusiness", "", "", "nodes", "nodes", "", "projectNode", "", "projectNode", null, "projectNode", null, "", "iterationNode", "", "iterationNode", null, "iterationNode", null, "", "storyNode", "", "nodes", null, "", "nodes", null, "", "nodes", null, "", "nodes", null, "", "nodes", null, "", "nodes", null, "", "nodes", null, "", "nodes", null, "", "nodes", null, "", "nodes", null], "SCS_MethodInvocation": ["createStrictMock", "setProductBusiness", "createStrictMock", "setTransferObjectBusiness", "createStrictMock", "setIterationBusiness", "createStrictMock", "setIterationDAO", "createStrictMock", "setProjectDAO", "createStrictMock", "setStoryDAO", "createStrictMock", "setUserBusiness", "createStrictMock", "setAuthorizationBusiness", "setName", "setId", "add", "setName", "add", "setId", "setStartDate", "setId", "setStartDate", "setId", "setStartDate", "setId", "getChildren", "add", "getChildren", "add", "getChildren", "add", "setStartDate", "setId", "setStartDate", "setId", "setStartDate", "setId", "getChildren", "add", "getChildren", "add", "getChildren", "add", "replay", "verify", "setId", "setLoggedUser", "add", "setUsers", "add", "setTeams", "setProducts", "expect", "andReturn", "retrieveAllOrderByName", "expect", "andReturn", "isBacklogAccessible", "getLoggedUser", "expect", "andReturn", "isBacklogAccessible", "getLoggedUser", "expect", "andReturn", "retrieveAllStandAloneIterations", "expect", "andReturn", "times", "getBacklogScheduleStatus", "isA", "replayAll", "constructBacklogMenuData", "verifyAll", "assertEquals", "size", "checkProducts", "setId", "setId", "setName", "setId", "setName", "setParent", "setId", "setName", "setIteration", "expect", "andReturn", "asList", "retrieveActiveWithUserAssigned", "getId", "expect", "andReturn", "asList", "retrieveActiveWithUserAssigned", "getId", "expect", "andReturn", "asList", "retrieveActiveIterationStoriesWithUserResponsible", "getId", "replayAll", "constructMyAssignmentsData", "verifyAll", "assertEquals", "size", "get", "assertEquals", "getTitle", "assertEquals", "getChildren", "size", "getChildren", "get", "assertEquals", "getTitle", "assertEquals", "getChildren", "size", "getChildren", "get", "assertEquals", "getTitle", "assertEquals", "get", "getId", "assertEquals", "get", "getId", "checkProjects", "get", "getChildren", "assertEquals", "get", "getId", "assertEquals", "get", "getId", "assertEquals", "get", "getId", "checkIterations", "get", "getChildren", "assertEquals", "get", "getId", "assertEquals", "get", "getId", "assertEquals", "get", "getId"], "SCS_VariableDeclaration": ["Product", "Product", "Project", "Project", "Project", "Iteration", "Iteration", "Iteration", "User", "Team", "Collection", "Collection", "ArrayList", "List", "User", "Project", "Iteration", "Story", "List", "MenuDataNode", "MenuDataNode", "MenuDataNode"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport static org.easymock.EasyMock.createStrictMock;\nimport static org.easymock.EasyMock.expect;\nimport static org.easymock.EasyMock.isA;\nimport static org.easymock.EasyMock.replay;\nimport static org.easymock.EasyMock.verify;\nimport static org.junit.Assert.assertEquals;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport org.easymock.EasyMock;\nimport org.joda.time.DateTime;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport fi.hut.soberit.agilefant.business.impl.MenuBusinessImpl;\nimport fi.hut.soberit.agilefant.db.IterationDAO;\nimport fi.hut.soberit.agilefant.db.ProjectDAO;\nimport fi.hut.soberit.agilefant.db.StoryDAO;\nimport fi.hut.soberit.agilefant.model.Backlog;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.Product;\nimport fi.hut.soberit.agilefant.model.Project;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.Team;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.security.SecurityUtil;\nimport fi.hut.soberit.agilefant.transfer.MenuDataNode;\nimport fi.hut.soberit.agilefant.transfer.ScheduleStatus;\n\npublic class MenuBusinessTest {\n\n    MenuBusinessImpl menuBusiness;\n    \n    ProductBusiness productBusiness;\n    \n    IterationBusiness iterationBusiness;\n    \n    ProjectDAO projectDAO;\n    \n    IterationDAO iterationDAO;\n    \n    StoryDAO storyDAO;\n    \n    TransferObjectBusiness transferObjectBusiness;\n    \n    UserBusiness userBusiness;\n    \n    AuthorizationBusiness authorizationBusiness;\n    \n    Set<Product> products;\n    \n    @Before\n    public void setUp_dependencies() {\n        menuBusiness = new MenuBusinessImpl();\n        \n        productBusiness = createStrictMock(ProductBusiness.class);\n        menuBusiness.setProductBusiness(productBusiness);\n        \n        transferObjectBusiness = createStrictMock(TransferObjectBusiness.class);\n        menuBusiness.setTransferObjectBusiness(transferObjectBusiness);\n        \n        iterationBusiness = createStrictMock(IterationBusiness.class);\n        menuBusiness.setIterationBusiness(iterationBusiness);\n        \n        iterationDAO = createStrictMock(IterationDAO.class);\n        menuBusiness.setIterationDAO(iterationDAO);\n        \n        projectDAO = createStrictMock(ProjectDAO.class);\n        menuBusiness.setProjectDAO(projectDAO);\n        \n        storyDAO = createStrictMock(StoryDAO.class);\n        menuBusiness.setStoryDAO(storyDAO);\n        \n        userBusiness = createStrictMock(UserBusiness.class);\n        menuBusiness.setUserBusiness(userBusiness);\n        \n        authorizationBusiness = createStrictMock(AuthorizationBusiness.class);\n        menuBusiness.setAuthorizationBusiness(authorizationBusiness);\n    }\n\n    @Before\n    public void setUp_dataset() {\n        products = new HashSet<Product>();\n        Product prod1 = new Product();\n        prod1.setName(\"zzz\");\n        prod1.setId(2);\n        products.add(prod1);\n        Product prod2 = new Product();\n        prod2.setName(\"aaa\");\n        products.add(prod2);\n        prod2.setId(1);\n        \n        Project proj1 = new Project();\n        proj1.setStartDate(new DateTime(2009,1,1,0,0,0,0));\n        proj1.setId(3);\n        Project proj2 = new Project();\n        proj2.setStartDate(new DateTime(2009,10,1,0,0,0,0));\n        proj2.setId(5);\n        Project proj3 = new Project();\n        proj3.setStartDate(new DateTime(2009,6,1,0,0,0,0));\n        proj3.setId(4);\n        \n        prod1.getChildren().add(proj1);\n        prod1.getChildren().add(proj2);\n        prod1.getChildren().add(proj3);\n        \n        Iteration iter1 = new Iteration();\n        iter1.setStartDate(new DateTime(2009,12,1,0,0,0,0));\n        iter1.setId(8);\n        Iteration iter2 = new Iteration();\n        iter2.setStartDate(new DateTime(2009,2,1,0,0,0,0));\n        iter2.setId(6);\n        Iteration iter3 = new Iteration();\n        iter3.setStartDate(new DateTime(2009,7,1,0,0,0,0));\n        iter3.setId(7);\n        \n        proj1.getChildren().add(iter1);\n        proj1.getChildren().add(iter2);\n        proj1.getChildren().add(iter3);\n    }\n    private void replayAll() {\n        replay(iterationDAO, projectDAO, storyDAO, productBusiness, transferObjectBusiness, iterationBusiness, userBusiness, authorizationBusiness);\n    }\n\n    private void verifyAll() {\n        verify(iterationDAO, projectDAO, storyDAO, productBusiness, transferObjectBusiness, iterationBusiness, userBusiness, authorizationBusiness);\n    }\n    \n    @Test\n    public void constructBacklogMenuData() {  \n        User user = new User();\n        user.setId(10);\n        SecurityUtil.setLoggedUser(user);\n        Team team = new Team();\n        Collection<User> users = new ArrayList<User>();\n        users.add(user);\n        team.setUsers(users);\n        Collection<Team> teams = new ArrayList<Team>();\n        teams.add(team);\n        user.setTeams(teams);\n        team.setProducts(products);\n        \n        expect(productBusiness.retrieveAllOrderByName()).andReturn(\n                products);\n        expect(authorizationBusiness.isBacklogAccessible(1, SecurityUtil.getLoggedUser())).andReturn(true);\n        expect(authorizationBusiness.isBacklogAccessible(2, SecurityUtil.getLoggedUser())).andReturn(true);\n\n        final ArrayList<Iteration> emptyStandAloneIterations = new ArrayList<Iteration>();\n        expect(iterationBusiness.retrieveAllStandAloneIterations())\n            .andReturn(emptyStandAloneIterations);\n        \n        expect(transferObjectBusiness.getBacklogScheduleStatus(isA(Backlog.class)))\n            .andReturn(ScheduleStatus.FUTURE).times(8);\n        \n        replayAll();\n               \n        List<MenuDataNode> actual = menuBusiness.constructBacklogMenuData();\n        verifyAll();\n        \n        assertEquals(2, actual.size());\n        checkProducts(actual);\n    }\n    \n    @Test\n    public void testConstructMyAssigmentsData() {\n        User user = new User();\n        user.setId(10);\n        Project project = new Project();\n        project.setId(1);\n        project.setName(\"Project\");\n        Iteration iteration = new Iteration();\n        iteration.setId(2);\n        iteration.setName(\"Iteration\");\n        iteration.setParent(project);\n        Story story = new Story();\n        story.setId(3);\n        story.setName(\"Story\");\n        story.setIteration(iteration);\n        expect(projectDAO.retrieveActiveWithUserAssigned(user.getId())).andReturn(Arrays.asList(project));\n        expect(iterationDAO.retrieveActiveWithUserAssigned(user.getId())).andReturn(Arrays.asList(iteration));\n        expect(storyDAO.retrieveActiveIterationStoriesWithUserResponsible(user.getId())).andReturn(Arrays.asList(story));\n        replayAll();\n        List<MenuDataNode> nodes = menuBusiness.constructMyAssignmentsData(user);\n        verifyAll();\n        assertEquals(1, nodes.size());\n        MenuDataNode projectNode = nodes.get(0);\n        assertEquals(\"Project\", projectNode.getTitle());\n        assertEquals(1, projectNode.getChildren().size());\n        MenuDataNode iterationNode = projectNode.getChildren().get(0);\n        assertEquals(\"Iteration\", iterationNode.getTitle());\n        assertEquals(1, iterationNode.getChildren().size());\n        MenuDataNode storyNode = iterationNode.getChildren().get(0);\n        assertEquals(\"Story\", storyNode.getTitle());\n    }\n    \n    private void checkProducts(List<MenuDataNode> nodes) {\n        assertEquals(1, nodes.get(0).getId());\n        assertEquals(2, nodes.get(1).getId());\n        \n        checkProjects(nodes.get(1).getChildren());\n    }\n    \n    private void checkProjects(List<MenuDataNode> nodes) {\n        assertEquals(3, nodes.get(0).getId());\n        assertEquals(4, nodes.get(1).getId());\n        assertEquals(5, nodes.get(2).getId());\n        checkIterations(nodes.get(0).getChildren());\n    }\n    \n    private void checkIterations(List<MenuDataNode> nodes) {\n        assertEquals(6, nodes.get(0).getId());\n        assertEquals(7, nodes.get(1).getId());\n        assertEquals(8, nodes.get(2).getId());\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\PersonalLoadBusinessTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["PersonalLoadBusinessTest"], "AN": ["personalLoadBusiness", "userBusiness", "taskDAO", "storyDAO", "iterationDAO", "assignmentDAO", "settingBusiness", "user", "task1", "task2", "task3", "iter", "proj", "story", "assigneeMap"], "SCS_VariableDeclarator": ["personalLoadBusiness", "userBusiness", "taskDAO", "storyDAO", "iterationDAO", "assignmentDAO", "settingBusiness", "user", "task1", "task2", "task3", "iter", "proj", "story", "assigneeMap", "tasks", "iterationEffortData", "actualStoryIds", "iterTasks", "storyTasks", "iterationEffortData", "actualStoryIds", "assign1", "assign2", "iter1", "iter2", "availabilitySums", "interval", "existing", "iterationEffortData", "iterationIds", "baseDate", "intervalStart", "intervalEnd", "iterationStart", "iterationEnd", "iter", "loadContainer", "container", "containerInterval", "iterationLeftInterval", "worktimeInIteration", "worktimeInPeriod", "baseDate", "intervalStart", "intervalEnd", "iterationStart", "iterationEnd", "iter", "loadContainer", "container", "containerInterval", "actualInterval", "iterationInterval", "worktimeInIteration", "worktimeInPeriod", "baseDate", "intervalStart", "intervalEnd", "iterationStart", "iterationEnd", "iter", "loadContainer", "container", "containerInterval", "actualInterval", "iterationInterval", "worktimeInIteration", "worktimeInPeriod", "baseDate", "intervalStart", "intervalEnd", "iterationStart", "iterationEnd", "iter", "loadContainer", "container", "containerInterval", "actualInterval", "iterationInterval", "worktimeInIteration", "worktimeInPeriod", "baseDate", "intervalStart", "intervalEnd", "iterationStart", "iterationEnd", "iter", "loadContainer", "container", "containerInterval", "start", "end", "period", "actual", "transfer1", "transfer2", "iter1", "iter2", "availabilitySums", "iterationIds", "iterationIdsAvailSum", "interval", "transfer1", "transfer2", "transfer3", "iter1", "iter2", "availabilitySums", "dataPerIteration", "iterationIds", "iterationAssignment", "projectAssignmnet", "iterInterval", "preComputed", "containerForFirstInterval", "firstInterval", "containerForSecondInterval", "secondInterval", "projectAssignmentInFirst", "projectAssigmentInSecond", "actual"], "MN": ["setUp", "initDataset", "replayAll", "verifyAll", "testCalculateStoryAssignedTaskLoad", "testCalculateDirectlyAssignedTaskLoad", "testCalculateIterationFutureLoad", "testUpdateUserLoadByInterval_iterationStartsBefore", "testUpdateUserLoadByInterval_iterationStarts", "testupdateUserLoadByInterval_iterationEnds", "testupdateUserLoadByInterval_iterationInBetween", "testupdateUserLoadByInterval_iterationNotOngoing", "testInitializeLoadContainers", "testLoadIterationAvailabilitySums", "testCalculateUnassignedTaskLoad", "testAddBaselineLoad", "testGetDailyLoadLimitsByUser"], "PN": [], "SCS_MemberReference": ["personalLoadBusiness", "userBusiness", "taskDAO", "storyDAO", "iterationDAO", "assignmentDAO", "settingBusiness", "storyDAO", "taskDAO", "userBusiness", "iterationDAO", "assignmentDAO", "settingBusiness", "user", "task1", "task2", "task3", "iter", "proj", "story", "iter", "assigneeMap", "userBusiness", "taskDAO", "storyDAO", "iterationDAO", "assignmentDAO", "settingBusiness", "userBusiness", "taskDAO", "storyDAO", "iterationDAO", "assignmentDAO", "settingBusiness", "story", "story", "story", "task1", "task2", "task3", "tasks", "user", "assigneeMap", "actualStoryIds", "iterationEffortData", "user", "iter", "story", "iter", "task1", "task3", "task2", "iterTasks", "user", "storyTasks", "user", "assigneeMap", "actualStoryIds", "iterationEffortData", "user", "user", "user", "assign1", "assign2", "existing", "iter1", "iter2", "user", "availabilitySums", "iterationIds", "iterationEffortData", "user", "interval", "baseDate", "iterationStart", "iterationEnd", "iter", "intervalStart", "intervalEnd", "containerInterval", "baseDate", "iterationEnd", "worktimeInIteration", "user", "iterationLeftInterval", "worktimeInPeriod", "user", "containerInterval", "container", "loadContainer", "user", "baseDate", "iterationStart", "iterationEnd", "iter", "intervalStart", "intervalEnd", "containerInterval", "iterationStart", "intervalEnd", "iterationStart", "iterationEnd", "worktimeInIteration", "user", "iterationInterval", "worktimeInPeriod", "user", "actualInterval", "container", "loadContainer", "user", "baseDate", "iterationStart", "iterationEnd", "iter", "intervalStart", "intervalEnd", "containerInterval", "intervalStart", "iterationEnd", "iterationStart", "iterationEnd", "worktimeInIteration", "user", "iterationInterval", "worktimeInPeriod", "user", "actualInterval", "container", "loadContainer", "user", "baseDate", "iterationStart", "iterationEnd", "iter", "intervalStart", "intervalEnd", "containerInterval", "iterationStart", "iterationEnd", "iterationStart", "iterationEnd", "worktimeInIteration", "user", "iterationInterval", "worktimeInPeriod", "user", "actualInterval", "container", "loadContainer", "user", "baseDate", "iterationStart", "iterationEnd", "iter", "intervalStart", "intervalEnd", "containerInterval", "container", "loadContainer", "user", "personalLoadBusiness", "user", "start", "end", "period", "iter1", "iter2", "iterationIds", "availabilitySums", "iterationIdsAvailSum", "transfer1", "transfer2", "iter1", "iteration", "iter2", "iteration", "availabilitySum", "availabilitySum", "transfer1", "user", "interval", "transfer2", "transfer3", "user", "interval", "iter1", "iter2", "iterationIds", "availabilitySums", "iterationIds", "dataPerIteration", "user", "interval", "iter1", "iter2", "user", "iter", "user", "proj", "firstInterval", "secondInterval", "containerForFirstInterval", "containerForSecondInterval", "iterationAssignment", "projectAssignmnet", "user", "user", "iterInterval", "user", "projectAssignmentInFirst", "user", "projectAssigmentInSecond", "preComputed", "user", "user"], "SCS_ClassReference": ["", "UserBusiness", "", "TaskDAO", "", "StoryDAO", "", "IterationDAO", "", "AssignmentDAO", "", "SettingBusiness", "personalLoadBusiness", "personalLoadBusiness", "personalLoadBusiness", "personalLoadBusiness", "personalLoadBusiness", "personalLoadBusiness", "task1", "task1", "task2", "task2", "task3", "task3", "iter", "proj", "story", "story", "assigneeMap", "assigneeMap", "assigneeMap", "", "", "", "task1", "task2", "task3", "Arrays", "", null, "taskDAO", "", null, "storyDAO", "EasyMock", "", "personalLoadBusiness", "", "actualStoryIds", null, "", "iterationEffortData", null, "", "", "task1", "task2", "task3", "Arrays", "Arrays", "", null, "taskDAO", "", null, "taskDAO", "", null, "taskDAO", "EasyMock", "", "personalLoadBusiness", "", "actualStoryIds", null, "", "iterationEffortData", null, "", "assign1", "assign2", "iter1", "iter1", "iter2", "iter2", "iter1", "Arrays", "iter2", "Arrays", "availabilitySums", "availabilitySums", "iterationEffortData", "", null, "Arrays", "iterationDAO", "interval", "interval", "", null, "iterationDAO", "EasyMock", "", "personalLoadBusiness", "", "", "iterationEffortData", null, "", "iterationEffortData", null, null, "baseDate", "baseDate", "baseDate", "iter", "iter", "loadContainer", "container", "loadContainer", "loadContainer", "loadContainer", "", null, "userBusiness", "", null, "userBusiness", "", "personalLoadBusiness", "", "", "container", "", "container", "", "container", "", "container", null, null, "baseDate", "baseDate", "baseDate", "iter", "iter", "loadContainer", "container", "loadContainer", "loadContainer", "loadContainer", "", null, "userBusiness", "", null, "userBusiness", "", "personalLoadBusiness", "", "", "container", "", "container", "", "container", "", "container", null, null, "baseDate", "baseDate", "baseDate", "iter", "iter", "loadContainer", "container", "loadContainer", "loadContainer", "loadContainer", "", null, "userBusiness", "", null, "userBusiness", "", "personalLoadBusiness", "", "", "container", "", "container", "", "container", "", "container", null, null, "baseDate", "baseDate", "baseDate", "iter", "iter", "loadContainer", "container", "loadContainer", "loadContainer", "loadContainer", "", null, "userBusiness", "", null, "userBusiness", "", "personalLoadBusiness", "", "", "container", "", "container", "", "container", "", "container", null, null, "baseDate", "baseDate", "baseDate", "iter", "iter", "loadContainer", "loadContainer", "loadContainer", "loadContainer", "container", "personalLoadBusiness", "", "container", "start", null, "", "actual", "iter1", "iter2", "availabilitySums", "availabilitySums", "", null, "Arrays", "iterationDAO", "EasyMock", "", null, "iterationDAO", "EasyMock", "", "personalLoadBusiness", "Arrays", "", "iterationIds", null, "", "iterationIdsAvailSum", null, "", "", "", "", "", "iter1", "iter2", "availabilitySums", "availabilitySums", "Arrays", "", null, "Arrays", "taskDAO", "", null, "Arrays", "taskDAO", "", null, "Arrays", "iterationDAO", "", null, "iterationDAO", "", "personalLoadBusiness", "", "dataPerIteration", null, "", "dataPerIteration", null, "", "dataPerIteration", null, "", "dataPerIteration", null, "", "", "iterationAssignment", "iterationAssignment", "projectAssignmnet", "projectAssignmnet", "iter", "iter", "iter", "proj", "proj", "iter", "iter", "containerForFirstInterval", "containerForSecondInterval", "preComputed", null, "preComputed", null, "", null, "Arrays", "assignmentDAO", "", null, null, "userBusiness", "", null, "userBusiness", "", null, "userBusiness", "", "personalLoadBusiness", "", "containerForFirstInterval", "", "containerForSecondInterval", "", "user", "", null, "settingBusiness", "", null, "settingBusiness", "", null, "settingBusiness", "", null, "settingBusiness", "", null, "settingBusiness", "", "personalLoadBusiness", "", "", "actual", "", "actual", "", "actual", "", "actual", "", "actual"], "SCS_MethodInvocation": ["createStrictMock", "createStrictMock", "createStrictMock", "createStrictMock", "createStrictMock", "createStrictMock", "setStoryDAO", "setTaskDAO", "setUserBusiness", "setIterationDAO", "setAssignmentDAO", "setSettingBusiness", "setEffortLeft", "setId", "setEffortLeft", "setId", "setEffortLeft", "setId", "setId", "setId", "setId", "setIteration", "put", "put", "put", "replay", "verify", "initDataset", "setStory", "setStory", "setStory", "asList", "expect", "andReturn", "getStoryAssignedTasksWithEffortLeft", "expect", "andReturn", "getNumOfResponsiblesByStory", "capture", "replayAll", "calculateStoryAssignedTaskLoad", "assertEquals", "getValue", "size", "assertEquals", "get", "getTotalAssignedLoad", "verifyAll", "initDataset", "setIteration", "setStory", "setIteration", "asList", "asList", "expect", "andReturn", "getIterationTasksWithEffortLeft", "expect", "andReturn", "getStoryTasksWithEffortLeft", "expect", "andReturn", "getNumOfResponsiblesByTask", "capture", "replayAll", "calculateDirectlyAssignedTaskLoad", "assertEquals", "getValue", "size", "assertEquals", "get", "getTotalAssignedLoad", "verifyAll", "setAvailability", "setAvailability", "setBacklogSize", "setId", "setBacklogSize", "setId", "setAssignments", "asList", "setAssignments", "asList", "put", "put", "put", "expect", "andReturn", "asList", "retrieveEmptyIterationsWithPlannedSize", "getStart", "getEnd", "expect", "andReturn", "getTotalAvailability", "capture", "replayAll", "calculateIterationFutureLoad", "verifyAll", "assertEquals", "get", "getTotalFutureLoad", "assertEquals", "get", "getTotalFutureLoad", "withMillisOfSecond", "plusDays", "minusDays", "plusDays", "setStartDate", "setEndDate", "setIteration", "setInterval", "setTotalAssignedLoad", "setTotalUnassignedLoad", "setTotalFutureLoad", "expect", "andReturn", "calculateWorktimePerPeriod", "expect", "andReturn", "calculateWorktimePerPeriod", "replayAll", "updateUserLoadByInterval", "verifyAll", "assertEquals", "getAssignedLoad", "assertEquals", "getUnassignedLoad", "assertEquals", "getFutureLoad", "assertEquals", "getDetailedLoad", "get", "getTotalLoad", "plusDays", "plusDays", "plusDays", "setStartDate", "setEndDate", "setIteration", "setInterval", "setTotalAssignedLoad", "setTotalUnassignedLoad", "setTotalFutureLoad", "expect", "andReturn", "calculateWorktimePerPeriod", "expect", "andReturn", "calculateWorktimePerPeriod", "replayAll", "updateUserLoadByInterval", "verifyAll", "assertEquals", "getAssignedLoad", "assertEquals", "getUnassignedLoad", "assertEquals", "getFutureLoad", "assertEquals", "getDetailedLoad", "get", "getTotalLoad", "plusDays", "plusDays", "plusDays", "setStartDate", "setEndDate", "setIteration", "setInterval", "setTotalAssignedLoad", "setTotalUnassignedLoad", "setTotalFutureLoad", "expect", "andReturn", "calculateWorktimePerPeriod", "expect", "andReturn", "calculateWorktimePerPeriod", "replayAll", "updateUserLoadByInterval", "verifyAll", "assertEquals", "getAssignedLoad", "assertEquals", "getUnassignedLoad", "assertEquals", "getFutureLoad", "assertEquals", "getDetailedLoad", "get", "getTotalLoad", "plusDays", "plusDays", "plusDays", "setStartDate", "setEndDate", "setIteration", "setInterval", "setTotalAssignedLoad", "setTotalUnassignedLoad", "setTotalFutureLoad", "expect", "andReturn", "calculateWorktimePerPeriod", "expect", "andReturn", "calculateWorktimePerPeriod", "replayAll", "updateUserLoadByInterval", "verifyAll", "assertEquals", "getAssignedLoad", "assertEquals", "getUnassignedLoad", "assertEquals", "getFutureLoad", "assertEquals", "getDetailedLoad", "get", "getTotalLoad", "plusDays", "plusDays", "plusDays", "setStartDate", "setEndDate", "setIteration", "setTotalAssignedLoad", "setTotalUnassignedLoad", "setTotalFutureLoad", "setInterval", "updateUserLoadByInterval", "assertEquals", "getTotalLoad", "plusDays", "initializeLoadContainers", "assertEquals", "size", "setId", "setId", "put", "put", "expect", "andReturn", "asList", "getMultiple", "capture", "expect", "andReturn", "getTotalAvailability", "capture", "replayAll", "loadIterationAvailabilitySums", "asList", "assertEquals", "getValue", "size", "assertEquals", "getValue", "size", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "verifyAll", "setId", "setId", "put", "put", "asList", "expect", "andReturn", "asList", "getUnassignedIterationTasksWithEffortLeft", "expect", "andReturn", "asList", "getUnassignedStoryTasksWithEffortLeft", "expect", "andReturn", "asList", "getMultiple", "expect", "andReturn", "getTotalAvailability", "replayAll", "calculateUnassignedTaskLoad", "assertEquals", "get", "getIteration", "assertEquals", "get", "getIteration", "assertEquals", "get", "getTotalUnassignedLoad", "assertEquals", "get", "getTotalUnassignedLoad", "verifyAll", "initDataset", "setId", "setPersonalLoad", "setId", "setPersonalLoad", "setStartDate", "setBaselineLoad", "setEndDate", "setStartDate", "setEndDate", "getStartDate", "getEndDate", "setInterval", "setInterval", "getLoadContainers", "add", "getLoadContainers", "add", "expect", "andReturn", "asList", "assigmentsInBacklogTimeframe", "expect", "andReturn", "anyTimes", "calculateWorktimePerPeriod", "expect", "andReturn", "calculateWorktimePerPeriod", "expect", "andReturn", "calculateWorktimePerPeriod", "replayAll", "addBaselineLoad", "assertEquals", "getBaselineLoad", "assertEquals", "getBaselineLoad", "verifyAll", "setWeekEffort", "expect", "andReturn", "getRangeLow", "expect", "andReturn", "getOptimalLow", "expect", "andReturn", "getOptimalHigh", "expect", "andReturn", "getCriticalLow", "expect", "andReturn", "getRangeHigh", "replayAll", "getDailyLoadLimitsByUser", "verifyAll", "assertEquals", "getDailyLoadLow", "assertEquals", "getDailyLoadMedium", "assertEquals", "getDailyLoadHigh", "assertEquals", "getDailyLoadCritical", "assertEquals", "getDailyLoadMaximum"], "SCS_VariableDeclaration": ["List", "Map", "Capture", "List", "List", "Map", "Capture", "Assignment", "Assignment", "Iteration", "Iteration", "HashMap", "Interval", "IterationLoadContainer", "Map", "Capture", "DateTime", "DateTime", "DateTime", "DateTime", "DateTime", "Iteration", "IterationLoadContainer", "IntervalLoadContainer", "Interval", "Interval", "Duration", "Duration", "DateTime", "DateTime", "DateTime", "DateTime", "DateTime", "Iteration", "IterationLoadContainer", "IntervalLoadContainer", "Interval", "Interval", "Interval", "Duration", "Duration", "DateTime", "DateTime", "DateTime", "DateTime", "DateTime", "Iteration", "IterationLoadContainer", "IntervalLoadContainer", "Interval", "Interval", "Interval", "Duration", "Duration", "DateTime", "DateTime", "DateTime", "DateTime", "DateTime", "Iteration", "IterationLoadContainer", "IntervalLoadContainer", "Interval", "Interval", "Interval", "Duration", "Duration", "DateTime", "DateTime", "DateTime", "DateTime", "DateTime", "Iteration", "IterationLoadContainer", "IntervalLoadContainer", "Interval", "DateTime", "DateTime", "Period", "List", "UnassignedLoadTO", "UnassignedLoadTO", "Iteration", "Iteration", "Map", "Capture", "Capture", "Interval", "UnassignedLoadTO", "UnassignedLoadTO", "UnassignedLoadTO", "Iteration", "Iteration", "Map", "Map", "Set", "Assignment", "Assignment", "Interval", "ComputedLoadData", "IntervalLoadContainer", "Interval", "IntervalLoadContainer", "Interval", "Interval", "Interval", "UserLoadLimits"], "CO": ["// 20 day iteration ", "// 5 day interval", "//actual days left in the iteration", "// iteration and period durations without vacations and weekends", "// 10 days", "// days", "// 5days", "// total assigned effort", "// 3.6 - 10.6", "// 1.6 - 7.6", "// total intervals with vacations and weekends", "// iteration and period durations without vacations and weekends", "// 5", "// days", "// 3", "// days", "// total assigned effort", "// 1.6 - 9.6", "// 8.6 - 12.6", "// total intervals with vacations and weekends", "// iteration and period durations without vacations and weekends", "// 5", "// days", "// 2", "// days", "// total assigned effort", "// 2.6 - 4.6", "// 1.6 - 5.6", "// total intervals with vacations and weekends", "// iteration and period durations without vacations and weekends", "// 3", "// days", "// 3", "// days", "// total assigned effort", "// 1.6 - 4.6", "// 8.6 - 16.6", "// 10 per day", "// 100 per day", "// 5 days for interval 1 and zero for 2", "// 3 for interval 1 and 3 for 2", "// set up two intervals", "//first interval \"first week\"", "//second interval \"second week\"", "// total worktime in the iteration (first week)", "// worktime for project assigment (first week)", "// worktime for project assignemnt (second week)"], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport static org.easymock.EasyMock.*;\nimport static org.junit.Assert.*;\n\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\nimport org.easymock.Capture;\nimport org.easymock.EasyMock;\nimport org.joda.time.DateTime;\nimport org.joda.time.Duration;\nimport org.joda.time.Interval;\nimport org.joda.time.Period;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport fi.hut.soberit.agilefant.business.impl.PersonalLoadBusinessImpl;\nimport fi.hut.soberit.agilefant.db.AssignmentDAO;\nimport fi.hut.soberit.agilefant.db.IterationDAO;\nimport fi.hut.soberit.agilefant.db.StoryDAO;\nimport fi.hut.soberit.agilefant.db.TaskDAO;\nimport fi.hut.soberit.agilefant.model.Assignment;\nimport fi.hut.soberit.agilefant.model.ExactEstimate;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.Project;\nimport fi.hut.soberit.agilefant.model.SignedExactEstimate;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.Task;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.transfer.ComputedLoadData;\nimport fi.hut.soberit.agilefant.transfer.IntervalLoadContainer;\nimport fi.hut.soberit.agilefant.transfer.IterationLoadContainer;\nimport fi.hut.soberit.agilefant.transfer.UnassignedLoadTO;\nimport fi.hut.soberit.agilefant.transfer.UserLoadLimits;\n\npublic class PersonalLoadBusinessTest {\n\n    private PersonalLoadBusinessImpl personalLoadBusiness;\n    private UserBusiness userBusiness;\n    private TaskDAO taskDAO;\n    private StoryDAO storyDAO;\n    private IterationDAO iterationDAO;\n    private AssignmentDAO assignmentDAO;\n    private SettingBusiness settingBusiness;\n    private User user;\n    private Task task1;\n    private Task task2;\n    private Task task3;\n    private Iteration iter;\n    private Project proj;\n    private Story story;\n    private Map<Integer, Integer> assigneeMap;\n\n    @Before\n    public void setUp() {\n        personalLoadBusiness = new PersonalLoadBusinessImpl();\n        userBusiness = createStrictMock(UserBusiness.class);\n        taskDAO = createStrictMock(TaskDAO.class);\n        storyDAO = createStrictMock(StoryDAO.class);\n        iterationDAO = createStrictMock(IterationDAO.class);\n        assignmentDAO = createStrictMock(AssignmentDAO.class);\n        settingBusiness = createStrictMock(SettingBusiness.class);\n        personalLoadBusiness.setStoryDAO(storyDAO);\n        personalLoadBusiness.setTaskDAO(taskDAO);\n        personalLoadBusiness.setUserBusiness(userBusiness);\n        personalLoadBusiness.setIterationDAO(iterationDAO);\n        personalLoadBusiness.setAssignmentDAO(assignmentDAO);\n        personalLoadBusiness.setSettingBusiness(settingBusiness);\n        user = new User();\n\n    }\n\n    private void initDataset() {\n        task1 = new Task();\n        task1.setEffortLeft(new ExactEstimate(500));\n        task1.setId(1);\n        task2 = new Task();\n        task2.setEffortLeft(new ExactEstimate(5000));\n        task2.setId(2);\n        task3 = new Task();\n        task3.setEffortLeft(null);\n        task3.setId(3);\n\n        iter = new Iteration();\n        iter.setId(1);\n        proj = new Project();\n        proj.setId(2);\n        story = new Story();\n        story.setId(1);\n        story.setIteration(iter);\n        assigneeMap = new HashMap<Integer, Integer>();\n        assigneeMap.put(1, 2);\n        assigneeMap.put(2, 1);\n        assigneeMap.put(3, 2);\n    }\n\n    private void replayAll() {\n        replay(userBusiness, taskDAO, storyDAO, iterationDAO, assignmentDAO,\n                settingBusiness);\n    }\n\n    private void verifyAll() {\n        verify(userBusiness, taskDAO, storyDAO, iterationDAO, assignmentDAO,\n                settingBusiness);\n    }\n\n    @Test\n    public void testCalculateStoryAssignedTaskLoad() {\n        initDataset();\n        task1.setStory(story);\n        task2.setStory(story);\n        task3.setStory(story);\n        List<Task> tasks = Arrays.asList(task1, task2, task3);\n        Map<Integer, IterationLoadContainer> iterationEffortData = new HashMap<Integer, IterationLoadContainer>();\n\n        expect(taskDAO.getStoryAssignedTasksWithEffortLeft(user, null))\n                .andReturn(tasks);\n        Capture<Set<Integer>> actualStoryIds = new Capture<Set<Integer>>();\n        expect(\n                storyDAO.getNumOfResponsiblesByStory(EasyMock\n                        .capture(actualStoryIds))).andReturn(assigneeMap);\n        replayAll();\n        personalLoadBusiness.calculateStoryAssignedTaskLoad(\n                iterationEffortData, user, null);\n        assertEquals(1, actualStoryIds.getValue().size());\n        assertEquals(2750L, iterationEffortData.get(1).getTotalAssignedLoad());\n        verifyAll();\n    }\n\n    @Test\n    public void testCalculateDirectlyAssignedTaskLoad() {\n        initDataset();\n        task1.setIteration(iter);\n        task2.setStory(story);\n        task3.setIteration(iter);\n        List<Task> iterTasks = Arrays.asList(task1, task3);\n        List<Task> storyTasks = Arrays.asList(task2);\n        Map<Integer, IterationLoadContainer> iterationEffortData = new HashMap<Integer, IterationLoadContainer>();\n\n        expect(taskDAO.getIterationTasksWithEffortLeft(user, null)).andReturn(\n                iterTasks);\n        expect(taskDAO.getStoryTasksWithEffortLeft(user, null)).andReturn(\n                storyTasks);\n\n        Capture<Set<Integer>> actualStoryIds = new Capture<Set<Integer>>();\n        expect(\n                taskDAO.getNumOfResponsiblesByTask(EasyMock\n                        .capture(actualStoryIds))).andReturn(assigneeMap);\n        replayAll();\n        personalLoadBusiness.calculateDirectlyAssignedTaskLoad(\n                iterationEffortData, user, null);\n        assertEquals(3, actualStoryIds.getValue().size());\n        assertEquals(5250L, iterationEffortData.get(1).getTotalAssignedLoad());\n        verifyAll();\n    }\n    \n\n    @Test\n    public void testCalculateIterationFutureLoad() {\n        Assignment assign1 = new Assignment(user, null);\n        assign1.setAvailability(100);\n        Assignment assign2 = new Assignment(user, null);\n        assign2.setAvailability(100);\n        \n        Iteration iter1 = new Iteration();\n        iter1.setBacklogSize(new ExactEstimate(400L));\n        iter1.setId(1);\n        Iteration iter2 = new Iteration();\n        iter2.setBacklogSize(new ExactEstimate(500L));\n        iter2.setId(2);\n        \n        iter1.setAssignments(new HashSet<Assignment>(Arrays.asList(assign1)));\n        iter2.setAssignments(new HashSet<Assignment>(Arrays.asList(assign2)));\n        \n        HashMap<Integer, Integer> availabilitySums = new HashMap<Integer, Integer>();\n        availabilitySums.put(1, 100);\n        availabilitySums.put(2, 200);\n        \n        Interval interval = new Interval(new DateTime(2009,6,1,0,0,0,0), new DateTime(2009,10,1,0,0,0,0));\n        \n        IterationLoadContainer existing = new IterationLoadContainer();\n        \n        Map<Integer, IterationLoadContainer> iterationEffortData = new HashMap<Integer, IterationLoadContainer>();\n\n        iterationEffortData.put(1, existing);\n        Capture<Set<Integer>> iterationIds = new Capture<Set<Integer>>();\n        expect(iterationDAO.retrieveEmptyIterationsWithPlannedSize(interval.getStart(), interval.getEnd(), user)).andReturn(Arrays.asList(iter1, iter2));\n        expect(iterationDAO.getTotalAvailability(EasyMock.capture(iterationIds))).andReturn(availabilitySums);\n        replayAll();\n        personalLoadBusiness.calculateIterationFutureLoad(iterationEffortData, user, interval);\n        verifyAll();\n        assertEquals(400L, iterationEffortData.get(1).getTotalFutureLoad());\n        assertEquals(250L, iterationEffortData.get(2).getTotalFutureLoad());\n    }\n\n    @Test\n    public void testUpdateUserLoadByInterval_iterationStartsBefore() {\n        DateTime baseDate = new DateTime().withMillisOfSecond(0);\n        DateTime intervalStart = baseDate;\n        DateTime intervalEnd = baseDate.plusDays(5);\n        DateTime iterationStart = baseDate.minusDays(10);\n        DateTime iterationEnd = baseDate.plusDays(10);\n\n        // 20 day iteration \n        Iteration iter = new Iteration();\n        iter.setStartDate(iterationStart);\n        iter.setEndDate(iterationEnd);\n        IterationLoadContainer loadContainer = new IterationLoadContainer();\n        loadContainer.setIteration(iter);\n\n        // 5 day interval\n        IntervalLoadContainer container = new IntervalLoadContainer();\n        Interval containerInterval = new Interval(intervalStart, intervalEnd);\n        container.setInterval(containerInterval);\n        \n        //actual days left in the iteration\n        Interval iterationLeftInterval = new Interval(baseDate, iterationEnd);\n        // iteration and period durations without vacations and weekends\n        Duration worktimeInIteration = new Duration(1000 * 3600 * 24 * 10L); // 10 days\n        // days\n        Duration worktimeInPeriod = new Duration(1000 * 3600 * 24 * 5L); // 5days\n        \n        // total assigned effort\n        loadContainer.setTotalAssignedLoad(10000L);\n        loadContainer.setTotalUnassignedLoad(1000L);\n        loadContainer.setTotalFutureLoad(100L);\n\n        expect(userBusiness.calculateWorktimePerPeriod(user, iterationLeftInterval))\n                .andReturn(worktimeInIteration);\n        expect(userBusiness.calculateWorktimePerPeriod(user, containerInterval))\n                .andReturn(worktimeInPeriod);\n\n        replayAll();\n        personalLoadBusiness.updateUserLoadByInterval(container, loadContainer,\n                user);\n        verifyAll();\n        assertEquals(5000L, container.getAssignedLoad());\n        assertEquals(500L, container.getUnassignedLoad());\n        assertEquals(50L, container.getFutureLoad());\n        assertEquals(5550L, container.getDetailedLoad().get(0).getTotalLoad());\n    }\n    \n    @Test\n    public void testUpdateUserLoadByInterval_iterationStarts() {\n        DateTime baseDate = new DateTime(2009, 6, 1, 0, 0, 0, 0);\n        DateTime intervalStart = baseDate;\n        DateTime intervalEnd = baseDate.plusDays(6);\n        DateTime iterationStart = baseDate.plusDays(2);\n        DateTime iterationEnd = baseDate.plusDays(9);\n\n        // 3.6 - 10.6\n        Iteration iter = new Iteration();\n        iter.setStartDate(iterationStart);\n        iter.setEndDate(iterationEnd);\n        IterationLoadContainer loadContainer = new IterationLoadContainer();\n        loadContainer.setIteration(iter);\n\n        // 1.6 - 7.6\n        IntervalLoadContainer container = new IntervalLoadContainer();\n        Interval containerInterval = new Interval(intervalStart, intervalEnd);\n        container.setInterval(containerInterval);\n\n        // total intervals with vacations and weekends\n        Interval actualInterval = new Interval(iterationStart, intervalEnd);\n        Interval iterationInterval = new Interval(iterationStart, iterationEnd);\n        // iteration and period durations without vacations and weekends\n        Duration worktimeInIteration = new Duration(1000 * 3600 * 24 * 5L); // 5\n        // days\n        Duration worktimeInPeriod = new Duration(1000 * 3600 * 24 * 3L); // 3\n        // days\n        // total assigned effort\n        loadContainer.setTotalAssignedLoad(500L);\n        loadContainer.setTotalUnassignedLoad(5000L);\n        loadContainer.setTotalFutureLoad(50L);\n\n        expect(userBusiness.calculateWorktimePerPeriod(user, iterationInterval))\n                .andReturn(worktimeInIteration);\n        expect(userBusiness.calculateWorktimePerPeriod(user, actualInterval))\n                .andReturn(worktimeInPeriod);\n\n        replayAll();\n        personalLoadBusiness.updateUserLoadByInterval(container, loadContainer,\n                user);\n        verifyAll();\n        assertEquals(300L, container.getAssignedLoad());\n        assertEquals(3000L, container.getUnassignedLoad());\n        assertEquals(30L, container.getFutureLoad());\n        assertEquals(3330L, container.getDetailedLoad().get(0).getTotalLoad());\n    }\n\n    @Test\n    public void testupdateUserLoadByInterval_iterationEnds() {\n        DateTime baseDate = new DateTime(2009, 6, 1, 0, 0, 0, 0);\n        DateTime intervalStart = baseDate.plusDays(7);\n        DateTime intervalEnd = baseDate.plusDays(11);\n        DateTime iterationStart = baseDate;\n        DateTime iterationEnd = baseDate.plusDays(9);\n\n        // 1.6 - 9.6\n        Iteration iter = new Iteration();\n        iter.setStartDate(iterationStart);\n        iter.setEndDate(iterationEnd);\n        IterationLoadContainer loadContainer = new IterationLoadContainer();\n        loadContainer.setIteration(iter);\n\n        // 8.6 - 12.6\n        IntervalLoadContainer container = new IntervalLoadContainer();\n        Interval containerInterval = new Interval(intervalStart, intervalEnd);\n        container.setInterval(containerInterval);\n\n        // total intervals with vacations and weekends\n        Interval actualInterval = new Interval(intervalStart, iterationEnd);\n        Interval iterationInterval = new Interval(iterationStart, iterationEnd);\n        // iteration and period durations without vacations and weekends\n        Duration worktimeInIteration = new Duration(1000 * 3600 * 24 * 5L); // 5\n        // days\n        Duration worktimeInPeriod = new Duration(1000 * 3600 * 24 * 2L); // 2\n        // days\n        // total assigned effort\n        loadContainer.setTotalAssignedLoad(500L);\n        loadContainer.setTotalUnassignedLoad(5000L);\n        loadContainer.setTotalFutureLoad(50L);\n\n        expect(userBusiness.calculateWorktimePerPeriod(user, iterationInterval))\n                .andReturn(worktimeInIteration);\n        expect(userBusiness.calculateWorktimePerPeriod(user, actualInterval))\n                .andReturn(worktimeInPeriod);\n\n        replayAll();\n        personalLoadBusiness.updateUserLoadByInterval(container, loadContainer,\n                user);\n        verifyAll();\n        assertEquals(200L, container.getAssignedLoad());\n        assertEquals(2000L, container.getUnassignedLoad());\n        assertEquals(20L, container.getFutureLoad());\n        assertEquals(2220L, container.getDetailedLoad().get(0).getTotalLoad());\n    }\n\n    @Test\n    public void testupdateUserLoadByInterval_iterationInBetween() {\n        DateTime baseDate = new DateTime(2009, 6, 1, 0, 0, 0, 0);\n        DateTime intervalStart = baseDate;\n        DateTime intervalEnd = baseDate.plusDays(4);\n        DateTime iterationStart = baseDate.plusDays(1);\n        DateTime iterationEnd = baseDate.plusDays(3);\n\n        // 2.6 - 4.6\n        Iteration iter = new Iteration();\n        iter.setStartDate(iterationStart);\n        iter.setEndDate(iterationEnd);\n        IterationLoadContainer loadContainer = new IterationLoadContainer();\n        loadContainer.setIteration(iter);\n\n        // 1.6 - 5.6\n        IntervalLoadContainer container = new IntervalLoadContainer();\n        Interval containerInterval = new Interval(intervalStart, intervalEnd);\n        container.setInterval(containerInterval);\n\n        // total intervals with vacations and weekends\n        Interval actualInterval = new Interval(iterationStart, iterationEnd);\n        Interval iterationInterval = new Interval(iterationStart, iterationEnd);\n        // iteration and period durations without vacations and weekends\n        Duration worktimeInIteration = new Duration(1000 * 3600 * 24 * 3L); // 3\n        // days\n        Duration worktimeInPeriod = new Duration(1000 * 3600 * 24 * 3L); // 3\n        // days\n        // total assigned effort\n        loadContainer.setTotalAssignedLoad(500L);\n        loadContainer.setTotalUnassignedLoad(5000L);\n        loadContainer.setTotalFutureLoad(50L);\n\n        expect(userBusiness.calculateWorktimePerPeriod(user, iterationInterval))\n                .andReturn(worktimeInIteration);\n        expect(userBusiness.calculateWorktimePerPeriod(user, actualInterval))\n                .andReturn(worktimeInPeriod);\n\n        replayAll();\n        personalLoadBusiness.updateUserLoadByInterval(container, loadContainer,\n                user);\n        verifyAll();\n        assertEquals(500L, container.getAssignedLoad());\n        assertEquals(5000L, container.getUnassignedLoad());\n        assertEquals(50L, container.getFutureLoad());\n        assertEquals(5550L, container.getDetailedLoad().get(0).getTotalLoad());\n    }\n\n    @Test\n    public void testupdateUserLoadByInterval_iterationNotOngoing() {\n        DateTime baseDate = new DateTime(2009, 6, 1, 0, 0, 0, 0);\n        DateTime intervalStart = baseDate;\n        DateTime intervalEnd = baseDate.plusDays(4);\n        DateTime iterationStart = baseDate.plusDays(7);\n        DateTime iterationEnd = baseDate.plusDays(15);\n\n        // 1.6 - 4.6\n        Iteration iter = new Iteration();\n        iter.setStartDate(iterationStart);\n        iter.setEndDate(iterationEnd);\n        IterationLoadContainer loadContainer = new IterationLoadContainer();\n        loadContainer.setIteration(iter);\n        loadContainer.setTotalAssignedLoad(500L);\n        loadContainer.setTotalUnassignedLoad(5000L);\n        loadContainer.setTotalFutureLoad(50L);\n        // 8.6 - 16.6\n        IntervalLoadContainer container = new IntervalLoadContainer();\n        Interval containerInterval = new Interval(intervalStart, intervalEnd);\n        container.setInterval(containerInterval);\n        personalLoadBusiness.updateUserLoadByInterval(container, loadContainer,\n                user);\n        assertEquals(0L, container.getTotalLoad());\n\n    }\n\n    @Test\n    public void testInitializeLoadContainers() {\n        DateTime start = new DateTime(2009, 6, 1, 0, 0, 0, 0);\n        DateTime end = start.plusDays(29);\n        Period period = new Period(0, 0, 1, 0, 0, 0, 0, 0);\n        List<IntervalLoadContainer> actual = this.personalLoadBusiness\n                .initializeLoadContainers(user, start, end, period);\n        assertEquals(5, actual.size());\n    }\n\n    @Test\n    public void testLoadIterationAvailabilitySums() {\n        UnassignedLoadTO transfer1 = new UnassignedLoadTO(null, 1, (short) 1);\n        UnassignedLoadTO transfer2 = new UnassignedLoadTO(null, 2, (short) 1);\n\n        Iteration iter1 = new Iteration();\n        iter1.setId(1);\n        Iteration iter2 = new Iteration();\n        iter2.setId(2);\n\n        Map<Integer, Integer> availabilitySums = new HashMap<Integer, Integer>();\n        availabilitySums.put(1, 5);\n        availabilitySums.put(2, 42);\n\n        Capture<Set<Integer>> iterationIds = new Capture<Set<Integer>>();\n        Capture<Set<Integer>> iterationIdsAvailSum = new Capture<Set<Integer>>();\n\n        expect(\n                iterationDAO.getMultiple(EasyMock\n                        .capture(iterationIds))).andReturn(\n                Arrays.asList(iter1, iter2));\n        expect(\n                iterationDAO.getTotalAvailability(EasyMock\n                        .capture(iterationIdsAvailSum))).andReturn(\n                availabilitySums);\n\n        replayAll();\n        personalLoadBusiness.loadIterationAvailabilitySums(Arrays.asList(transfer1,\n                transfer2));\n        assertEquals(2, iterationIds.getValue().size());\n        assertEquals(2, iterationIdsAvailSum.getValue().size());\n        assertEquals(iter1, transfer1.iteration);\n        assertEquals(iter2, transfer2.iteration);\n        assertEquals(5, transfer1.availabilitySum);\n        assertEquals(42, transfer2.availabilitySum);\n        verifyAll();\n    }\n\n    @Test\n    public void testCalculateUnassignedTaskLoad() {\n        Interval interval = new Interval(500, 600);\n        UnassignedLoadTO transfer1 = new UnassignedLoadTO(new ExactEstimate(\n                1000), 1, 1);\n        UnassignedLoadTO transfer2 = new UnassignedLoadTO(new ExactEstimate(\n                8000), 2, 1);\n        UnassignedLoadTO transfer3 = new UnassignedLoadTO(null, 2, 0);\n\n        Iteration iter1 = new Iteration();\n        iter1.setId(1);\n        Iteration iter2 = new Iteration();\n        iter2.setId(2);\n\n        Map<Integer, Integer> availabilitySums = new HashMap<Integer, Integer>();\n        availabilitySums.put(1, 10);\n        availabilitySums.put(2, 100);\n\n        Map<Integer, IterationLoadContainer> dataPerIteration = new HashMap<Integer, IterationLoadContainer>();\n\n        Set<Integer> iterationIds = new HashSet<Integer>(Arrays.asList(1, 2));\n\n        expect(\n                taskDAO.getUnassignedIterationTasksWithEffortLeft(user,\n                        interval)).andReturn(Arrays.asList(transfer1));\n        expect(taskDAO.getUnassignedStoryTasksWithEffortLeft(user, interval))\n                .andReturn(Arrays.asList(transfer2, transfer3));\n\n        expect(iterationDAO.getMultiple(iterationIds)).andReturn(\n                Arrays.asList(iter1, iter2));\n        expect(iterationDAO.getTotalAvailability(iterationIds)).andReturn(\n                availabilitySums);\n\n        replayAll();\n        personalLoadBusiness.calculateUnassignedTaskLoad(dataPerIteration,\n                user, interval);\n        assertEquals(iter1, dataPerIteration.get(1).getIteration());\n        assertEquals(iter2, dataPerIteration.get(2).getIteration());\n        assertEquals(100L, dataPerIteration.get(1).getTotalUnassignedLoad());\n        assertEquals(80L, dataPerIteration.get(2).getTotalUnassignedLoad());\n        verifyAll();\n    }\n\n    @Test\n    public void testAddBaselineLoad() {\n        initDataset();\n        \n        Assignment iterationAssignment = new Assignment(user, iter);\n        iterationAssignment.setId(1);\n        iterationAssignment.setPersonalLoad(new SignedExactEstimate(30));// 10 per day\n        Assignment projectAssignmnet = new Assignment(user, proj);\n        projectAssignmnet.setId(2);\n        projectAssignmnet.setPersonalLoad(new SignedExactEstimate(500));// 100 per day\n\n        iter.setStartDate(new DateTime(2009, 6, 1, 0, 0, 0, 0));\n        iter.setBaselineLoad(new ExactEstimate(20));\n        iter.setEndDate(new DateTime(2009, 6, 7, 0, 0, 0, 0));// 5 days for interval 1 and zero for 2\n        proj.setStartDate(new DateTime(2009, 6, 3, 0, 0, 0, 0));\n        proj.setEndDate(new DateTime(2009, 6, 10, 0, 0, 0, 0));// 3 for interval 1 and 3 for 2\n        \n        Interval iterInterval = new Interval(iter.getStartDate(), iter.getEndDate());\n\n        // set up two intervals\n        //first interval \"first week\"\n        ComputedLoadData preComputed = new ComputedLoadData();\n        IntervalLoadContainer containerForFirstInterval = new IntervalLoadContainer();\n        Interval firstInterval = new Interval(new DateTime(2009, 6, 1, 0, 0, 0, 0),\n                new DateTime(2009, 6, 7, 0, 0, 0, 0));\n        containerForFirstInterval.setInterval(firstInterval);\n        \n        //second interval \"second week\"\n        IntervalLoadContainer containerForSecondInterval = new IntervalLoadContainer();\n        Interval secondInterval = new Interval(new DateTime(2009, 6, 8, 0, 0, 0, 0),\n                new DateTime(2009, 6, 13, 0, 0, 0, 0));\n        containerForSecondInterval.setInterval(secondInterval);\n        \n        preComputed.getLoadContainers().add(containerForFirstInterval);\n        preComputed.getLoadContainers().add(containerForSecondInterval);\n\n        expect(assignmentDAO.assigmentsInBacklogTimeframe(null, user))\n                .andReturn(\n                        Arrays.asList(iterationAssignment, projectAssignmnet));\n        Interval projectAssignmentInFirst = new Interval(\n                new DateTime(2009, 6, 3, 0, 0, 0, 0),\n                new DateTime(2009, 6, 7, 0, 0, 0, 0)\n        );\n        Interval projectAssigmentInSecond = new Interval(\n                new DateTime(2009, 6, 8, 0, 0, 0, 0),\n                new DateTime(2009, 6, 10, 0, 0, 0, 0)\n        );\n        \n        // total worktime in the iteration (first week)\n        expect(userBusiness.calculateWorktimePerPeriod(user, iterInterval))\n                .andReturn(new Duration(1000 * 3600 * 24 * 5)).anyTimes();\n\n        // worktime for project assigment (first week)\n        expect(userBusiness.calculateWorktimePerPeriod(user, projectAssignmentInFirst))\n                .andReturn(new Duration(1000 * 3600 * 24 * 3));\n\n        // worktime for project assignemnt (second week)\n        expect(userBusiness.calculateWorktimePerPeriod(user, projectAssigmentInSecond))\n                .andReturn(new Duration(1000 * 3600 * 24 * 3));\n\n        replayAll();\n        personalLoadBusiness.addBaselineLoad(preComputed, user, null);\n        assertEquals(350L, containerForFirstInterval.getBaselineLoad());\n        assertEquals(300L, containerForSecondInterval.getBaselineLoad());\n        verifyAll();\n    }\n    \n    @Test\n    public void testGetDailyLoadLimitsByUser() {\n        user.setWeekEffort(new ExactEstimate(5000L));\n        expect(settingBusiness.getRangeLow()).andReturn(10);\n        expect(settingBusiness.getOptimalLow()).andReturn(30);\n        expect(settingBusiness.getOptimalHigh()).andReturn(50);\n        expect(settingBusiness.getCriticalLow()).andReturn(80);\n        expect(settingBusiness.getRangeHigh()).andReturn(110);\n        \n        replayAll();\n        UserLoadLimits actual = personalLoadBusiness.getDailyLoadLimitsByUser(user);\n        verifyAll();\n        \n        assertEquals(100.0, actual.getDailyLoadLow(), 0.1);\n        assertEquals(300.0, actual.getDailyLoadMedium(), 0.1);\n        assertEquals(500.0, actual.getDailyLoadHigh(), 0.1);\n        assertEquals(800.0, actual.getDailyLoadCritical(), 0.1);\n        assertEquals(1100.0, actual.getDailyLoadMaximum(), 0.1);     \n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\PortfolioBusinessTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["PortfolioBusinessTest"], "SCS_ClassReference": ["SpringJUnit4ClassRunner", "MockContextLoader", "", "", "SpringAssertions", "PortfolioBusiness", "Months", null, "today", "rankedProject", "user", "SecurityUtil", "assignment", "rankedProject", null, "rankedProjects", "unrankedProject", "unrankedProject", null, "unrankedProjects", "", null, "settingBusiness", "", null, "projectDAO", "", null, "projectDAO", "", null, null, "authorizationBusiness", "EasyMock", "rankedProject", "EasyMock", "User", "", null, null, "authorizationBusiness", "EasyMock", "unrankedProject", "EasyMock", "User", "", "portfolioBusiness", "", "", "result", null, "result", null, "", "rankedTo", null, "", "rankedTo", null, null, "", "result", null, "result", null, null, "", "unrankedTo", null, "", "unrankedTo", null, null, ""], "AN": ["portfolioBusiness", "settingBusiness", "projectDAO", "authorizationBusiness"], "SCS_VariableDeclarator": ["portfolioBusiness", "settingBusiness", "projectDAO", "authorizationBusiness", "today", "timeSpan", "endDate", "rankedProject", "user", "assignment", "rankedProjects", "unrankedProjects", "unrankedProject", "result", "rankedTo", "unrankedTo"], "MN": ["verifyAll", "replayAll", "testSpringScope", "testGetPortfolioData"], "PN": [], "SCS_MethodInvocation": ["verify", "replay", "assertNoScopeAnnotation", "months", "toPeriod", "plus", "setId", "setAdmin", "setLoggedUser", "setUser", "getAssignments", "add", "add", "setId", "getAssignments", "add", "add", "expect", "andReturn", "getPortfolioTimeSpan", "expect", "andReturn", "getRankedProjects", "expect", "andReturn", "getUnrankedProjects", "expect", "andReturn", "anyTimes", "isBacklogAccessible", "eq", "getId", "anyObject", "expect", "andReturn", "anyTimes", "isBacklogAccessible", "eq", "getId", "anyObject", "replayAll", "getPortfolioData", "assertNotNull", "assertEquals", "getRankedProjects", "size", "getRankedProjects", "get", "assertEquals", "getAssignees", "size", "assertSame", "getAssignees", "iterator", "next", "assertEquals", "getUnrankedProjects", "size", "getUnrankedProjects", "iterator", "next", "assertEquals", "getAssignees", "size", "assertSame", "getAssignees", "iterator", "next", "verifyAll"], "SCS_MemberReference": ["projectDAO", "settingBusiness", "authorizationBusiness", "projectDAO", "settingBusiness", "authorizationBusiness", "timeSpan", "user", "user", "assignment", "rankedProject", "assignment", "unrankedProject", "timeSpan", "rankedProjects", "today", "endDate", "unrankedProjects", "today", "endDate", "result", "user", "user"], "SCS_VariableDeclaration": ["LocalDate", "Period", "LocalDate", "Project", "User", "Assignment", "List", "List", "Project", "PortfolioTO", "ProjectTO", "ProjectTO"], "CO": ["// PortfolioBusiness should", "// + have no scope annotation", "// getPortfolioData() should", "// + retrieve portfolio time span setting from SettingBusiness", "// + retrieve ranked projects from ProjectDAO", "// + retrieve unranked projects from ProjectDAO", "// + return a non-null PortfolioTO that contains", "// a list of ranked projects as ProjectTOs and a list of unranked projects", "// as ProjectTOs"], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport static org.easymock.EasyMock.expect;\nimport static org.easymock.EasyMock.replay;\nimport static org.easymock.EasyMock.verify;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertSame;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.easymock.EasyMock;\nimport org.joda.time.LocalDate;\nimport org.joda.time.Months;\nimport org.joda.time.Period;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.test.annotation.DirtiesContext;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n\nimport fi.hut.soberit.agilefant.business.impl.PortfolioBusinessImpl;\nimport fi.hut.soberit.agilefant.db.ProjectDAO;\nimport fi.hut.soberit.agilefant.model.Assignment;\nimport fi.hut.soberit.agilefant.model.Project;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.security.SecurityUtil;\nimport fi.hut.soberit.agilefant.test.Mock;\nimport fi.hut.soberit.agilefant.test.MockContextLoader;\nimport fi.hut.soberit.agilefant.test.SpringAssertions;\nimport fi.hut.soberit.agilefant.test.TestedBean;\nimport fi.hut.soberit.agilefant.transfer.PortfolioTO;\nimport fi.hut.soberit.agilefant.transfer.ProjectTO;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(loader = MockContextLoader.class)\npublic class PortfolioBusinessTest {\n\n    @TestedBean\n    private PortfolioBusinessImpl portfolioBusiness;\n\n    @Mock\n    private SettingBusiness settingBusiness;\n    @Mock\n    private ProjectDAO projectDAO;\n    @Mock\n    private AuthorizationBusiness authorizationBusiness;\n    \n    \n    protected void verifyAll() {\n        verify(projectDAO, settingBusiness, authorizationBusiness);\n    }\n\n    protected void replayAll() {\n        replay(projectDAO, settingBusiness, authorizationBusiness);\n    }\n\n    // PortfolioBusiness should\n    // + have no scope annotation\n    @Test\n    public void testSpringScope() {\n        SpringAssertions.assertNoScopeAnnotation(PortfolioBusiness.class);\n    }\n\n    // getPortfolioData() should\n    // + retrieve portfolio time span setting from SettingBusiness\n    // + retrieve ranked projects from ProjectDAO\n    // + retrieve unranked projects from ProjectDAO\n    // + return a non-null PortfolioTO that contains\n    // a list of ranked projects as ProjectTOs and a list of unranked projects\n    // as ProjectTOs\n    @Test\n    @DirtiesContext\n    public void testGetPortfolioData() {\n        LocalDate today = new LocalDate();\n        Period timeSpan = Months.months(6).toPeriod();\n        LocalDate endDate = today.plus(timeSpan);\n\n        Project rankedProject = new Project();\n        rankedProject.setId(666);\n        User user = new User();\n        user.setAdmin(true);\n        SecurityUtil.setLoggedUser(user);\n        Assignment assignment = new Assignment();\n        assignment.setUser(user);\n\n        List<Project> rankedProjects = new ArrayList<Project>();\n        rankedProject.getAssignments().add(assignment);\n        rankedProjects.add(rankedProject);\n\n        List<Project> unrankedProjects = new ArrayList<Project>();\n        Project unrankedProject = new Project();\n        unrankedProject.setId(999);\n        unrankedProject.getAssignments().add(assignment);\n        unrankedProjects.add(unrankedProject);\n\n        expect(settingBusiness.getPortfolioTimeSpan()).andReturn(timeSpan);\n        expect(projectDAO.getRankedProjects(today, endDate)).andReturn(\n                rankedProjects);\n        expect(projectDAO.getUnrankedProjects(today, endDate)).andReturn(\n                unrankedProjects);\n        expect(authorizationBusiness.isBacklogAccessible(EasyMock.eq(rankedProject.getId()), EasyMock.anyObject(User.class))).andReturn(true).anyTimes();\n        expect(authorizationBusiness.isBacklogAccessible(EasyMock.eq(unrankedProject.getId()), EasyMock.anyObject(User.class))).andReturn(true).anyTimes();\n        replayAll();\n\n        PortfolioTO result = portfolioBusiness.getPortfolioData();\n        assertNotNull(result);\n        assertEquals(1, result.getRankedProjects().size());\n        ProjectTO rankedTo = (ProjectTO) result.getRankedProjects().get(0);\n\n        assertEquals(1, rankedTo.getAssignees().size());\n        assertSame(user, rankedTo.getAssignees().iterator().next());\n\n        assertEquals(1, result.getUnrankedProjects().size());\n        ProjectTO unrankedTo = (ProjectTO) result.getUnrankedProjects()\n                .iterator().next();\n\n        assertEquals(1, unrankedTo.getAssignees().size());\n        assertSame(user, unrankedTo.getAssignees().iterator().next());\n\n        verifyAll();\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\ProductBusinessTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["ProductBusinessTest"], "SCS_ClassReference": ["SpringJUnit4ClassRunner", "MockContextLoader", "", null, "productDAO", "", "productBusiness", "", "prod", "prod", "prod", "newData", "newData", "", null, "productDAO", "productDAO", "", "productBusiness", "", "newData", "actual", "", "newData", "actual", "", "prod", "prod", "", null, "productDAO", "EasyMock", "Product", "", null, "productDAO", "", "productBusiness", "", "prod", "actual", "", "prod", "actual", "", "IllegalArgumentException", "prod", "prod", "productBusiness", "prod", "", null, "productDAO", "prod", "productDAO", "prod", "story1", "story2", "prod", null, "prod", null, "", null, "productDAO", "prod", "storyBusiness", "storyBusiness", "hourEntryBusiness", "prod", "productDAO", "", "productBusiness", "prod", "", "prod", "project", "iteration", "prod", null, "prod", null, "", null, "productDAO", "prod", "projectBusiness", "project", "iterationBusiness", "iteration", "hourEntryBusiness", "prod", "productDAO", "", "productBusiness", "prod", "", "prod", "hourEntry", "hourEntry2", "hourEntries", "hourEntries", "prod", "", null, "productDAO", "prod", "hourEntryBusiness", "productDAO", "", "productBusiness", "prod", "", "product", "project", "product", null, "iteration", "iteration", "project", null, "productStory", "productStory", "productStory", "projectStory", "projectStory", "projectStory", "iterationStory", "iterationStory", "iterationStory", "iterationStory", "iterationStory2", "iterationStory2", "iterationStory2", "iterationStory2", "iterationStory2", "product", "Arrays", "project", "Arrays", "iteration", "Arrays", "", null, "Arrays", "productDAO", "", null, "iterationBusiness", "", null, "transferObjectBusiness", "", null, "transferObjectBusiness", "", null, "", "", "actual", null, "", "actual", null, "", "actual", null, null, "actual", null, "", "actualProject", null, "", "actualProject", null, "", "actualProject", null, null, "actualProject", null, "", "actualIteration", null, "", "actualIteration", null, "", "actualIteration", null, null, "", "actualIteration", null, null, "product", "project1", "product", null, "project2", "product", null, "project3", "product", null, "iteration", "project1", null, "iteration", "time", "iteration2", "project1", null, "iteration2", "", null, "productDAO", "", null, "iterationBusiness", "", null, "transferObjectBusiness", "", null, "transferObjectBusiness", "", null, "transferObjectBusiness", "", null, "transferObjectBusiness", "", null, "transferObjectBusiness", "", null, "", "", "actual", null, "", "actual", null, null, "", "actual", null, null, "", "actual", null, null, "actual", null, "", "actualProject", null, "", "actualProject", null, null, "", "actualProject", null, null], "AN": ["productBusiness", "productDAO", "storyBusiness", "iterationBusiness", "projectBusiness", "hourEntryBusiness", "transferObjectBusiness", "teamBusiness", "authorizationBusiness"], "SCS_VariableDeclarator": ["productBusiness", "productDAO", "storyBusiness", "iterationBusiness", "projectBusiness", "hourEntryBusiness", "transferObjectBusiness", "teamBusiness", "authorizationBusiness", "prod", "newData", "actual", "prod", "actual", "prod", "prod", "prod", "story1", "story2", "prod", "project", "iteration", "prod", "hourEntries", "hourEntry", "hourEntry2", "product", "project", "iteration", "productStory", "projectStory", "iterationStory", "iterationStory2", "iters", "actual", "actualProject", "actualIteration", "product", "project1", "project2", "project3", "time", "iteration", "iteration2", "iters", "actual", "actualProject"], "MN": ["testRetrieveAllOrderByName", "testStore", "testStore_newProduct", "testStore_invalidData", "testDelete", "testDelete_withStories", "testDelete_withBacklogItems", "testDelete_withHourEntries", "testRetrieveLeafStoriesOnly", "testRetrieveLeafStoriesOnly_backlogOrder"], "PN": [], "SCS_MethodInvocation": ["expect", "andReturn", "retrieveBacklogTree", "replay", "retrieveAllOrderByName", "verify", "setName", "setDescription", "setId", "setName", "setDescription", "expect", "andReturn", "get", "store", "replay", "store", "assertEquals", "getName", "getName", "assertEquals", "getDescription", "getDescription", "verify", "setName", "setDescription", "expect", "andReturn", "create", "isA", "expect", "andReturn", "get", "replay", "store", "assertEquals", "getName", "getName", "assertEquals", "getDescription", "getDescription", "verify", "setName", "setDescription", "store", "setId", "expect", "andReturn", "get", "getId", "remove", "setId", "setBacklog", "setBacklog", "getStories", "add", "getStories", "add", "expect", "andReturn", "get", "getId", "forceDelete", "forceDelete", "deleteAll", "getHourEntries", "remove", "replayAll", "delete", "getId", "verifyAll", "setId", "setParent", "setParent", "getChildren", "add", "getChildren", "add", "expect", "andReturn", "get", "getId", "delete", "getId", "delete", "getId", "deleteAll", "getHourEntries", "remove", "replayAll", "delete", "getId", "verifyAll", "setId", "setId", "setId", "add", "add", "setHourEntries", "expect", "andReturn", "get", "getId", "deleteAll", "remove", "replayAll", "delete", "getId", "verifyAll", "setId", "setId", "getChildren", "add", "setId", "setParent", "getChildren", "add", "setBacklog", "setId", "setName", "setBacklog", "setId", "setName", "setId", "setIteration", "setBacklog", "setName", "setId", "setIteration", "setBacklog", "setState", "setName", "setStories", "asList", "setStories", "asList", "setStories", "asList", "expect", "andReturn", "asList", "retrieveLeafStories", "expect", "andReturn", "retrieveAllStandAloneIterations", "expect", "andReturn", "getBacklogScheduleStatus", "expect", "andReturn", "getBacklogScheduleStatus", "replayAll", "retrieveLeafStoriesOnly", "verifyAll", "assertEquals", "getChildProjects", "size", "assertEquals", "getLeafStories", "size", "assertEquals", "getLeafStories", "get", "getId", "getChildProjects", "get", "assertEquals", "getChildIterations", "size", "assertEquals", "getLeafStories", "size", "assertEquals", "getLeafStories", "get", "getId", "getChildIterations", "get", "assertEquals", "getChildren", "size", "assertEquals", "getLeafStories", "size", "assertEquals", "getLeafStories", "get", "getId", "assertEquals", "getLeafStories", "get", "getId", "setId", "setId", "getChildren", "add", "setId", "getChildren", "add", "setId", "getChildren", "add", "setId", "getChildren", "add", "setStartDate", "minusDays", "setId", "getChildren", "add", "setStartDate", "expect", "andReturn", "retrieveLeafStories", "expect", "andReturn", "retrieveAllStandAloneIterations", "expect", "andReturn", "getBacklogScheduleStatus", "expect", "andReturn", "getBacklogScheduleStatus", "expect", "andReturn", "getBacklogScheduleStatus", "expect", "andReturn", "getBacklogScheduleStatus", "expect", "andReturn", "getBacklogScheduleStatus", "replayAll", "retrieveLeafStoriesOnly", "verifyAll", "assertEquals", "getChildProjects", "size", "assertEquals", "getChildProjects", "get", "getId", "assertEquals", "getChildProjects", "get", "getId", "assertEquals", "getChildProjects", "get", "getId", "getChildProjects", "get", "assertEquals", "getChildIterations", "size", "assertEquals", "getChildIterations", "get", "getId", "assertEquals", "getChildIterations", "get", "getId"], "SCS_MemberReference": ["productDAO", "productDAO", "prod", "prod", "productDAO", "newData", "productDAO", "prod", "productDAO", "prod", "productDAO", "prod", "prod", "prod", "prod", "prod", "story1", "story2", "prod", "story1", "story2", "prod", "prod", "prod", "project", "iteration", "prod", "prod", "hourEntry", "hourEntry2", "hourEntries", "prod", "hourEntries", "prod", "project", "project", "iteration", "product", "project", "iteration", "project", "iteration", "project", "DONE", "productStory", "projectStory", "iterationStory", "productStory", "projectStory", "iterationStory", "productStory", "projectStory", "iterationStory", "iterationStory2", "productStory", "projectStory", "iterationStory", "iterationStory2", "product", "iters", "FUTURE", "project", "PAST", "iteration", "productBusiness", "product", "project1", "project2", "project3", "iteration", "iteration2", "time", "product", "iters", "ONGOING", "project1", "PAST", "project2", "FUTURE", "project3", "PAST", "iteration", "PAST", "iteration2", "productBusiness", "product"], "SCS_VariableDeclaration": ["Product", "Product", "Product", "Product", "Product", "Product", "Product", "Product", "Story", "Story", "Product", "Project", "Iteration", "Product", "Set", "BacklogHourEntry", "BacklogHourEntry", "Product", "Project", "Iteration", "Story", "Story", "Story", "Story", "List", "ProductTO", "ProjectTO", "IterationTO", "Product", "Project", "Project", "Project", "DateTime", "Iteration", "Iteration", "List", "ProductTO", "ProjectTO"], "CO": ["// add all three stories to all three backlogs", "// as only one story should be left in each backlog"], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport static org.easymock.EasyMock.expect;\nimport java.util.List;\nimport static org.easymock.EasyMock.replay;\nimport static org.easymock.EasyMock.verify;\nimport static org.junit.Assert.assertEquals;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.Set;\n\nimport org.easymock.EasyMock;\nimport org.joda.time.DateTime;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.test.annotation.DirtiesContext;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n\nimport fi.hut.soberit.agilefant.business.impl.ProductBusinessImpl;\nimport fi.hut.soberit.agilefant.db.ProductDAO;\nimport fi.hut.soberit.agilefant.model.BacklogHourEntry;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.Product;\nimport fi.hut.soberit.agilefant.model.Project;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.StoryState;\nimport fi.hut.soberit.agilefant.test.Mock;\nimport fi.hut.soberit.agilefant.test.MockContextLoader;\nimport fi.hut.soberit.agilefant.test.MockedTestCase;\nimport fi.hut.soberit.agilefant.test.TestedBean;\nimport fi.hut.soberit.agilefant.transfer.IterationTO;\nimport fi.hut.soberit.agilefant.transfer.ProductTO;\nimport fi.hut.soberit.agilefant.transfer.ProjectTO;\nimport fi.hut.soberit.agilefant.transfer.ScheduleStatus;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(loader = MockContextLoader.class)\npublic class ProductBusinessTest extends MockedTestCase {\n\n    @TestedBean\n    private ProductBusinessImpl productBusiness = new ProductBusinessImpl();\n    @Mock\n    private ProductDAO productDAO;\n    @Mock\n    private StoryBusiness storyBusiness;\n    @Mock\n    private IterationBusiness iterationBusiness;\n    @Mock\n    private ProjectBusiness projectBusiness;\n    @Mock\n    private HourEntryBusiness hourEntryBusiness;\n    @Mock\n    private TransferObjectBusiness transferObjectBusiness;\n    @Mock\n    private TeamBusiness teamBusiness;\n    @Mock\n    private AuthorizationBusiness authorizationBusiness;\n\n    @Test\n    @DirtiesContext\n    public void testRetrieveAllOrderByName() {\n        expect(productDAO.retrieveBacklogTree()).andReturn(\n                new ArrayList<Product>());\n        replay(productDAO);\n\n        productBusiness.retrieveAllOrderByName();\n\n        verify(productDAO);\n    }\n\n    @Test\n    @DirtiesContext\n    public void testStore() {\n        Product prod = new Product();\n        prod.setName(\"Test\");\n        prod.setDescription(\"This is a test.\");\n        prod.setId(1);\n\n        Product newData = new Product();\n        newData.setName(\"New test name\");\n        newData.setDescription(\"new description\");\n\n        expect(productDAO.get(1)).andReturn(prod);\n        productDAO.store(prod);\n\n        replay(productDAO);\n        Product actual = productBusiness.store(1, newData, null);\n        assertEquals(newData.getName(), actual.getName());\n        assertEquals(newData.getDescription(), actual.getDescription());\n        verify(productDAO);\n    }\n\n    @Test\n    @DirtiesContext\n    public void testStore_newProduct() {\n        Product prod = new Product();\n        prod.setName(\"Test\");\n        prod.setDescription(\"This is a test.\");\n\n        expect(productDAO.create(EasyMock.isA(Product.class))).andReturn(1);\n        expect(productDAO.get(1)).andReturn(prod);\n\n        replay(productDAO);\n        Product actual = productBusiness.store(0, prod, null);\n        assertEquals(prod.getName(), actual.getName());\n        assertEquals(prod.getDescription(), actual.getDescription());\n        verify(productDAO);\n    }\n\n    @Test(expected = IllegalArgumentException.class)\n    @DirtiesContext\n    public void testStore_invalidData() {\n        Product prod = new Product();\n        prod.setName(\"\");\n        prod.setDescription(\"This is a test.\");\n        productBusiness.store(0, prod, null);\n    }\n\n    @Test\n    @DirtiesContext\n    public void testDelete() {\n        Product prod = new Product();\n        prod.setId(10);\n        expect(productDAO.get(prod.getId())).andReturn(prod);\n        productDAO.remove(prod);\n    }\n\n    @Test\n    @DirtiesContext\n    public void testDelete_withStories() {\n        Product prod = new Product();\n        prod.setId(10);\n        Story story1 = new Story();\n        Story story2 = new Story();\n        story1.setBacklog(prod);\n        story2.setBacklog(prod);\n        prod.getStories().add(story1);\n        prod.getStories().add(story2);\n        expect(productDAO.get(prod.getId())).andReturn(prod);\n        storyBusiness.forceDelete(story1);\n        storyBusiness.forceDelete(story2);\n        hourEntryBusiness.deleteAll(prod.getHourEntries());\n        productDAO.remove(prod);\n        replayAll();\n        productBusiness.delete(prod.getId());\n        verifyAll();\n\n    }\n\n    @Test\n    @DirtiesContext\n    public void testDelete_withBacklogItems() {\n        Product prod = new Product();\n        prod.setId(10);\n        Project project = new Project();\n        Iteration iteration = new Iteration();\n        project.setParent(prod);\n        iteration.setParent(prod);\n        prod.getChildren().add(project);\n        prod.getChildren().add(iteration);\n        expect(productDAO.get(prod.getId())).andReturn(prod);\n        projectBusiness.delete(project.getId());\n        iterationBusiness.delete(iteration.getId());\n        hourEntryBusiness.deleteAll(prod.getHourEntries());\n        productDAO.remove(prod);\n        replayAll();\n        productBusiness.delete(prod.getId());\n        verifyAll();\n\n    }\n\n    @Test\n    @DirtiesContext\n    public void testDelete_withHourEntries() {\n        Product prod = new Product();\n        prod.setId(10);\n        Set<BacklogHourEntry> hourEntries = new HashSet<BacklogHourEntry>();\n        BacklogHourEntry hourEntry = new BacklogHourEntry();\n        BacklogHourEntry hourEntry2 = new BacklogHourEntry();\n        hourEntry.setId(1);\n        hourEntry2.setId(2);\n        hourEntries.add(hourEntry);\n        hourEntries.add(hourEntry2);\n        prod.setHourEntries(hourEntries);\n        expect(productDAO.get(prod.getId())).andReturn(prod);\n        hourEntryBusiness.deleteAll(hourEntries);\n        productDAO.remove(prod);\n        replayAll();\n        productBusiness.delete(prod.getId());\n        verifyAll();\n    }\n\n    @Test\n    @DirtiesContext\n    public void testRetrieveLeafStoriesOnly() {\n        Product product = new Product();\n        product.setId(1);\n        Project project = new Project();\n        project.setId(2);\n        product.getChildren().add(project);\n        Iteration iteration = new Iteration();\n        iteration.setId(3);\n        iteration.setParent(project);\n        project.getChildren().add(iteration);\n\n        Story productStory = new Story();\n        productStory.setBacklog(product);\n        productStory.setId(1);\n        productStory.setName(\"ppp\");\n        Story projectStory = new Story();\n        projectStory.setBacklog(project);\n        projectStory.setId(2);\n        projectStory.setName(\"sss\");\n        Story iterationStory = new Story();\n        iterationStory.setId(3);\n        iterationStory.setIteration(iteration);\n        iterationStory.setBacklog(project);\n        iterationStory.setName(\"xxx\");\n        Story iterationStory2 = new Story();\n        iterationStory2.setId(4);\n        iterationStory2.setIteration(iteration);\n        iterationStory2.setBacklog(project);\n        iterationStory2.setState(StoryState.DONE);\n        iterationStory2.setName(\"bbb\");\n\n        // add all three stories to all three backlogs\n        // as only one story should be left in each backlog\n        product.setStories(new HashSet<Story>(Arrays.asList(productStory,\n                projectStory, iterationStory)));\n        project.setStories(new HashSet<Story>(Arrays.asList(productStory,\n                projectStory, iterationStory)));\n        iteration.setStories(new HashSet<Story>(Arrays.asList(productStory,\n                projectStory, iterationStory, iterationStory2)));\n\n        expect(productDAO.retrieveLeafStories(product)).andReturn(\n                Arrays.asList(productStory, projectStory, iterationStory,\n                        iterationStory2));\n        \n        List<Iteration> iters = new ArrayList<Iteration>();\n        expect(iterationBusiness.retrieveAllStandAloneIterations()).andReturn(iters);\n        expect(transferObjectBusiness.getBacklogScheduleStatus(project)).andReturn(ScheduleStatus.FUTURE);\n        expect(transferObjectBusiness.getBacklogScheduleStatus(iteration)).andReturn(ScheduleStatus.PAST);\n\n        replayAll();\n        ProductTO actual = this.productBusiness\n                .retrieveLeafStoriesOnly(product);\n        verifyAll();\n        assertEquals(1, actual.getChildProjects().size());\n        assertEquals(1, actual.getLeafStories().size());\n        assertEquals(1, actual.getLeafStories().get(0).getId());\n\n        ProjectTO actualProject = actual.getChildProjects().get(0);\n        \n        assertEquals(1, actualProject.getChildIterations().size());\n        assertEquals(1, actualProject.getLeafStories().size());\n        assertEquals(2, actualProject.getLeafStories().get(0).getId());\n\n        IterationTO actualIteration = actualProject.getChildIterations().get(0);\n        \n        assertEquals(0, actualIteration.getChildren().size());\n        assertEquals(2, actualIteration.getLeafStories().size());\n        assertEquals(3, actualIteration.getLeafStories().get(0).getId());\n        assertEquals(4, actualIteration.getLeafStories().get(1).getId());\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testRetrieveLeafStoriesOnly_backlogOrder() {\n        Product product = new Product();\n        product.setId(1);\n        \n        Project project1 = new Project();\n        project1.setId(2);\n        product.getChildren().add(project1);\n        \n        Project project2 = new Project();\n        project2.setId(3);\n        product.getChildren().add(project2);\n        \n        Project project3 = new Project();\n        project3.setId(4);\n        product.getChildren().add(project3);\n\n        DateTime time = new DateTime(2010,1,1,0,0,0,0);\n        \n        Iteration iteration = new Iteration();\n        iteration.setId(5);\n        project1.getChildren().add(iteration);\n        iteration.setStartDate(time.minusDays(50));\n        \n        Iteration iteration2 = new Iteration();\n        iteration2.setId(6);\n        project1.getChildren().add(iteration2);\n        iteration2.setStartDate(time);\n\n        expect(productDAO.retrieveLeafStories(product)).andReturn(\n                new ArrayList<Story>());\n        \n        List<Iteration> iters = new ArrayList<Iteration>();\n        expect(iterationBusiness.retrieveAllStandAloneIterations()).andReturn(iters);\n        expect(transferObjectBusiness.getBacklogScheduleStatus(project1)).andReturn(ScheduleStatus.ONGOING);\n        expect(transferObjectBusiness.getBacklogScheduleStatus(project2)).andReturn(ScheduleStatus.PAST);\n        expect(transferObjectBusiness.getBacklogScheduleStatus(project3)).andReturn(ScheduleStatus.FUTURE);\n        \n        expect(transferObjectBusiness.getBacklogScheduleStatus(iteration)).andReturn(ScheduleStatus.PAST);\n        expect(transferObjectBusiness.getBacklogScheduleStatus(iteration2)).andReturn(ScheduleStatus.PAST);\n\n        replayAll();\n        ProductTO actual = this.productBusiness\n                .retrieveLeafStoriesOnly(product);\n        verifyAll();\n        assertEquals(3, actual.getChildProjects().size());\n        \n        assertEquals(4, actual.getChildProjects().get(0).getId());\n        assertEquals(2, actual.getChildProjects().get(1).getId());\n        assertEquals(3, actual.getChildProjects().get(2).getId());\n        \n        ProjectTO actualProject = actual.getChildProjects().get(1);\n        \n        assertEquals(2, actualProject.getChildIterations().size());\n\n        assertEquals(6, actualProject.getChildIterations().get(0).getId());\n        assertEquals(5, actualProject.getChildIterations().get(1).getId());\n       \n        \n\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\ProjectBurnupBusinessTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["ProjectBurnupBusinessTest"], "MN": ["testConvertToDatasets_entriesInFuture", "testConvertToDatasets_plannedSums", "testConvertToDatasets_doneSums"], "PN": [], "SCS_VariableDeclaration": ["List", "ProjectBurnupData", "Triple", "List", "ProjectBurnupData", "Triple", "List", "ProjectBurnupData", "Triple"], "SCS_VariableDeclarator": ["entries", "data", "datasets", "entries", "data", "datasets", "entries", "data", "datasets"], "SCS_ClassReference": ["entries", null, "entries", null, "entries", null, "", "", "datasets.first", null, "", "datasets.second", null, "entries", null, "entries", null, "entries", null, "", "", "datasets.first", null, "", "datasets.second", null, "entries", null, "entries", null, "entries", null, "", "", "datasets.first", null, "", "datasets.second", null], "SCS_MethodInvocation": ["add", "plusHours", "add", "plusHours", "add", "plusHours", "convertToDatasets", "assertEquals", "getSeries", "getItemCount", "assertEquals", "getSeries", "getItemCount", "add", "minusHours", "add", "minusHours", "add", "minusHours", "convertToDatasets", "assertEquals", "getSeries", "getItemCount", "assertEquals", "getSeries", "getItemCount", "add", "minusHours", "add", "minusHours", "add", "minusHours", "convertToDatasets", "assertEquals", "getSeries", "getItemCount", "assertEquals", "getSeries", "getItemCount"], "SCS_MemberReference": ["entries", "data", "entries", "data", "entries", "data"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport static org.junit.Assert.*;\n\nimport java.util.LinkedList;\nimport java.util.List;\n\nimport org.jfree.data.time.TimeSeriesCollection;\nimport org.joda.time.DateTime;\nimport org.junit.Test;\n\nimport fi.hut.soberit.agilefant.business.impl.ProjectBurnupBusinessImpl;\nimport fi.hut.soberit.agilefant.util.ProjectBurnupData;\nimport fi.hut.soberit.agilefant.util.Triple;\n\npublic class ProjectBurnupBusinessTest extends ProjectBurnupBusinessImpl {\n    \n    @Test\n    public void testConvertToDatasets_entriesInFuture() {\n        List<ProjectBurnupData.Entry> entries = new LinkedList<ProjectBurnupData.Entry>();\n        entries.add(new ProjectBurnupData.Entry(new DateTime().plusHours(1), 10, 10, 20));\n        entries.add(new ProjectBurnupData.Entry(new DateTime().plusHours(2), 20, 10, 30));\n        entries.add(new ProjectBurnupData.Entry(new DateTime().plusHours(3), 30, 20, 40));\n        ProjectBurnupData data = new ProjectBurnupData(entries);\n        Triple<TimeSeriesCollection, TimeSeriesCollection, TimeSeriesCollection> datasets = convertToDatasets(data);\n        assertEquals(0, datasets.first.getSeries(0).getItemCount());\n        assertEquals(0, datasets.second.getSeries(0).getItemCount());\n    }\n    \n    @Test\n    public void testConvertToDatasets_plannedSums() {\n        List<ProjectBurnupData.Entry> entries = new LinkedList<ProjectBurnupData.Entry>();\n        entries.add(new ProjectBurnupData.Entry(new DateTime().minusHours(3), 10, 10, 20));\n        entries.add(new ProjectBurnupData.Entry(new DateTime().minusHours(2), 20, 10, 20));\n        entries.add(new ProjectBurnupData.Entry(new DateTime().minusHours(1), 30, 10, 20));\n        ProjectBurnupData data = new ProjectBurnupData(entries);\n        Triple<TimeSeriesCollection, TimeSeriesCollection, TimeSeriesCollection> datasets = convertToDatasets(data);\n        assertEquals(4, datasets.first.getSeries(0).getItemCount());\n        assertEquals(2, datasets.second.getSeries(0).getItemCount());\n    }\n\n    @Test\n    public void testConvertToDatasets_doneSums() {\n        List<ProjectBurnupData.Entry> entries = new LinkedList<ProjectBurnupData.Entry>();\n        entries.add(new ProjectBurnupData.Entry(new DateTime().minusHours(3), 40, 10, 50));\n        entries.add(new ProjectBurnupData.Entry(new DateTime().minusHours(2), 40, 20, 60));\n        entries.add(new ProjectBurnupData.Entry(new DateTime().minusHours(1), 40, 30, 70));\n        ProjectBurnupData data = new ProjectBurnupData(entries);\n        Triple<TimeSeriesCollection, TimeSeriesCollection, TimeSeriesCollection> datasets = convertToDatasets(data);\n        assertEquals(4, datasets.first.getSeries(0).getItemCount());\n        assertEquals(4, datasets.second.getSeries(0).getItemCount());\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\ProjectBusinessRankingTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["ProjectBusinessRankingTest", "ProjectDefinition", "MockProjectDAO"], "AN": ["projectBusiness", "settingBusiness", "projectDAO", "projects", "expectedRanks", "toBeRanked", "target", "rank", "expectedRank", "move", "underThis", "startDateOffset", "endDateOffset"], "SCS_VariableDeclarator": ["projectBusiness", "settingBusiness", "projectDAO", "projects", "expectedRanks", "toBeRanked", "target", "entry", "id", "definition", "project", "rank", "expectedRank", "move", "underThis", "startDateOffset", "endDateOffset", "project", "today", "result", "project", "result", "project", "result", "project", "result", "project"], "MN": ["setUp", "testRankUnderProject_noSpacesBetweenRanks", "testRankUnderProject_spacesBetweenRanks", "testRankUnderProject_nullProject", "testMoveToRanked", "testMoveToRanked_emptyDatabase", "testMoveToRanked_noRankedProjects", "testMoveToRanked_spaceBetweenProjects", "testMoveToRanked_onlyUnrankedProjects", "testMoveToRanked_rankedProjectInThePast", "testMoveToRanked_addBeforeRankedProjects", "testMoveToRanked_projectsNotEntirelyInView", "testMoveToRanked_projectEndAndStartOutsideView", "replayMocks", "verifyMocks", "verifyRanks", "setupProjects", "project", "withStartDateOffset", "withEndDateOffset", "withRank", "expectedRank", "move", "underThis", "build", "get", "getRankedProjects", "getUnrankedProjects", "getMaxRankedProject", "getProjectsWithRankBetween"], "PN": ["projectDefinitions", "period", "period", "rank", "rank", "id", "startDate", "endDate", "startDate", "endDate", "lower", "upper"], "SCS_MemberReference": ["projectBusiness", "projectDAO", "settingBusiness", "settingBusiness", "toBeRanked", "target", "toBeRanked", "target", "settingBusiness", "settingBusiness", "projects", "expectedRanks", "projectDefinitions", "id", "project", "id", "startDateOffset", "period", "endDateOffset", "period", "rank", "rank", "expectedRank", "rank", "move", "underThis", "rank", "startDateOffset", "endDateOffset", "underThis", "target", "project", "move", "toBeRanked", "project", "project", "expectedRank", "project", "id", "projects", "project", "result", "projects", "project", "result", "projects", "result", "result", "project", "result", "projects", "lower", "upper", "project", "result"], "SCS_ClassReference": ["projectBusiness", "projectBusiness", "EasyMock", "SettingBusiness", "projectBusiness", "", "", null, null, null, "", null, null, "", null, null, "", null, null, null, "projectBusiness", "", "", "", null, null, null, "", null, null, "", null, null, "", null, null, null, "projectBusiness", "", "IllegalArgumentException", "projectBusiness", "", "", null, null, "", null, null, "", null, null, "", null, null, "", null, "Months", null, "settingBusiness", "", "projectBusiness", "", "", "", "", null, null, "", null, "Months", null, "settingBusiness", "", "projectBusiness", "", "", "", "", null, null, "", null, null, null, "Months", null, "", null, "Months", null, "settingBusiness", "", "projectBusiness", "", "", "", "", null, null, "", null, null, "", null, null, "", null, "Months", null, "settingBusiness", "", "projectBusiness", "", "", "", "", null, null, "", null, null, "", null, null, "", null, "Months", null, "settingBusiness", "", "projectBusiness", "", "", "", "", null, null, "", null, null, null, "Months", null, "", null, "Months", null, "settingBusiness", "", "projectBusiness", "", "", "", "", null, null, "", null, null, "", null, null, null, "Months", null, "", null, null, null, "Months", null, "", null, "Months", null, "settingBusiness", "", "projectBusiness", "", "", "", "", null, null, "", null, null, null, "Months", null, "", null, null, null, "Months", null, "", null, "Months", null, "settingBusiness", "", "projectBusiness", "", "", "", "", null, null, "", null, null, null, "Months", null, null, "Months", null, "", null, "Months", null, "settingBusiness", "", "projectBusiness", "", "", "EasyMock", "EasyMock", "expectedRanks", "", "entry", "Integer", "entry", null, "definition", "project", "projects", "Days", "Days", "project", "project", "today", null, "project", "project", null, "expectedRanks", "projects", "project", null, "startDate", "project", null, "endDate", "project", "result", "project", null, "startDate", "project", null, "endDate", "project", "result", "project", "project", "result", "project", "project", "result"], "SCS_MethodInvocation": ["setRankingBusiness", "setProjectDAO", "createMock", "setSettingBusiness", "setupProjects", "project", "withRank", "expectedRank", "underThis", "project", "withRank", "expectedRank", "project", "withRank", "expectedRank", "project", "withRank", "expectedRank", "move", "rankUnderProject", "verifyRanks", "setupProjects", "project", "withRank", "expectedRank", "underThis", "project", "withRank", "expectedRank", "project", "withRank", "expectedRank", "project", "withRank", "expectedRank", "move", "rankUnderProject", "verifyRanks", "rankUnderProject", "setupProjects", "project", "withRank", "expectedRank", "project", "withRank", "expectedRank", "project", "withRank", "expectedRank", "project", "withRank", "expectedRank", "expect", "andReturn", "months", "toPeriod", "getPortfolioTimeSpan", "replayMocks", "moveToRanked", "verifyMocks", "verifyRanks", "setupProjects", "project", "withRank", "expectedRank", "expect", "andReturn", "months", "toPeriod", "getPortfolioTimeSpan", "replayMocks", "moveToRanked", "verifyMocks", "verifyRanks", "setupProjects", "project", "withRank", "expectedRank", "project", "withRank", "expectedRank", "withStartDateOffset", "months", "toPeriod", "expect", "andReturn", "months", "toPeriod", "getPortfolioTimeSpan", "replayMocks", "moveToRanked", "verifyMocks", "verifyRanks", "setupProjects", "project", "withRank", "expectedRank", "project", "withRank", "expectedRank", "project", "withRank", "expectedRank", "expect", "andReturn", "months", "toPeriod", "getPortfolioTimeSpan", "replayMocks", "moveToRanked", "verifyMocks", "verifyRanks", "setupProjects", "project", "withRank", "expectedRank", "project", "withRank", "expectedRank", "project", "withRank", "expectedRank", "expect", "andReturn", "months", "toPeriod", "getPortfolioTimeSpan", "replayMocks", "moveToRanked", "verifyMocks", "verifyRanks", "setupProjects", "project", "withRank", "expectedRank", "project", "withRank", "expectedRank", "withEndDateOffset", "months", "toPeriod", "expect", "andReturn", "months", "toPeriod", "getPortfolioTimeSpan", "replayMocks", "moveToRanked", "verifyMocks", "verifyRanks", "setupProjects", "project", "withRank", "expectedRank", "project", "withRank", "expectedRank", "project", "withRank", "expectedRank", "withStartDateOffset", "months", "toPeriod", "project", "withRank", "expectedRank", "withStartDateOffset", "months", "toPeriod", "expect", "andReturn", "months", "toPeriod", "getPortfolioTimeSpan", "replayMocks", "moveToRanked", "verifyMocks", "verifyRanks", "setupProjects", "project", "withRank", "expectedRank", "project", "withRank", "expectedRank", "withStartDateOffset", "months", "toPeriod", "project", "withRank", "expectedRank", "withEndDateOffset", "months", "toPeriod", "expect", "andReturn", "months", "toPeriod", "getPortfolioTimeSpan", "replayMocks", "moveToRanked", "verifyMocks", "verifyRanks", "setupProjects", "project", "withRank", "expectedRank", "project", "withRank", "expectedRank", "withStartDateOffset", "months", "toPeriod", "withEndDateOffset", "months", "toPeriod", "expect", "andReturn", "months", "toPeriod", "getPortfolioTimeSpan", "replayMocks", "moveToRanked", "verifyMocks", "verifyRanks", "replay", "verify", "entrySet", "assertEquals", "getValue", "valueOf", "getKey", "getRank", "build", "setId", "add", "days", "days", "setRank", "setStartDate", "plus", "toDateTimeAtStartOfDay", "setEndDate", "getStartDate", "plus", "put", "get", "getEndDate", "isBefore", "toDateTimeAtStartOfDay", "getStartDate", "isAfter", "toDateTimeAtStartOfDay", "getRank", "add", "getEndDate", "isBefore", "toDateTimeAtStartOfDay", "getStartDate", "isAfter", "toDateTimeAtStartOfDay", "getRank", "add", "getRank", "getRank", "getRank", "getRank", "getRank", "add"], "SCS_VariableDeclaration": ["Map", "int", "ProjectDefinition", "Project", "Project", "LocalDate", "List", "Project", "List", "Project", "Project", "Project", "List", "Project"], "CO": ["/*\n     * The rest of this file contains only infrastructure\n     * that is needed for readable tests in this class. \n     */", "/**\n     * A utility class for defining projects (builder-pattern style)\n     */", "/**\n     * We extend ProjectDAOHibernate in order to override a single method with a real implementation.\n     * Doing this with EasyMock is tedious and probably requires a newer version than what Agilefant\n     * currently has.\n     * \n     * This might seem dangerous at first but probably isn't because all\n     * \"real\" hibernate methods will throw a NullPointerException\n     * because no sessionFactory has been injected.\n     */"], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport static org.easymock.EasyMock.*;\nimport static org.junit.Assert.*;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.easymock.EasyMock;\nimport org.joda.time.Days;\nimport org.joda.time.LocalDate;\nimport org.joda.time.Months;\nimport org.joda.time.ReadablePeriod;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport fi.hut.soberit.agilefant.business.impl.ProjectBusinessImpl;\nimport fi.hut.soberit.agilefant.business.impl.RankingBusinessImpl;\nimport fi.hut.soberit.agilefant.db.ProjectDAO;\nimport fi.hut.soberit.agilefant.db.hibernate.ProjectDAOHibernate;\nimport fi.hut.soberit.agilefant.model.Project;\n\npublic class ProjectBusinessRankingTest {\n\n    private ProjectBusinessImpl projectBusiness;\n    private SettingBusiness settingBusiness;\n    private ProjectDAO projectDAO = new MockProjectDAO();\n    private List<Project> projects;    \n    private Map<Project, Integer> expectedRanks;\n    private Project toBeRanked;\n    private Project target;\n\n    @Before\n    public void setUp() {\n        projectBusiness = new ProjectBusinessImpl();\n        projectBusiness.setRankingBusiness(new RankingBusinessImpl());\n        projectBusiness.setProjectDAO(projectDAO);\n        settingBusiness = EasyMock.createMock(SettingBusiness.class); \n        projectBusiness.setSettingBusiness(settingBusiness);\n    }\n\n    @Test\n    public void testRankUnderProject_noSpacesBetweenRanks() {\n        setupProjects(\n                project().withRank(1).expectedRank(1).underThis(),\n                project().withRank(2).expectedRank(3),\n                project().withRank(3).expectedRank(4),\n                project().withRank(4).expectedRank(2).move()\n        );\n        projectBusiness.rankUnderProject(toBeRanked, target);\n        verifyRanks();\n    }\n\n    @Test\n    public void testRankUnderProject_spacesBetweenRanks() {\n        setupProjects(\n                project().withRank(100).expectedRank(100).underThis(),\n                project().withRank(150).expectedRank(151),\n                project().withRank(170).expectedRank(171),\n                project().withRank(190).expectedRank(101).move()\n        );        \n        projectBusiness.rankUnderProject(toBeRanked, target);\n        verifyRanks();\n    }\n\n    @Test(expected = IllegalArgumentException.class)\n    public void testRankUnderProject_nullProject() {\n        projectBusiness.rankUnderProject(null, null);\n    }\n    \n    @Test\n    public void testMoveToRanked() {\n        setupProjects(\n                project().withRank(1).expectedRank(1),\n                project().withRank(2).expectedRank(2),\n                project().withRank(3).expectedRank(3),\n                project().withRank(0).expectedRank(4)\n        );\n        expect(settingBusiness.getPortfolioTimeSpan()).andReturn(Months.months(6).toPeriod());\n        replayMocks();\n        projectBusiness.moveToRanked(3);\n        verifyMocks();\n        verifyRanks();\n        \n    }\n    \n    @Test\n    public void testMoveToRanked_emptyDatabase() {\n        setupProjects(\n                project().withRank(0).expectedRank(1)\n        );\n        expect(settingBusiness.getPortfolioTimeSpan()).andReturn(Months.months(6).toPeriod());\n        replayMocks();\n        projectBusiness.moveToRanked(0);\n        verifyMocks();\n        verifyRanks();\n    }\n    \n    @Test\n    public void testMoveToRanked_noRankedProjects() {\n        setupProjects(\n                project().withRank(0).expectedRank(2),\n                project().withRank(1).expectedRank(1).withStartDateOffset(Months.months(8).toPeriod())\n        );\n        expect(settingBusiness.getPortfolioTimeSpan()).andReturn(Months.months(6).toPeriod());\n        replayMocks();\n        projectBusiness.moveToRanked(0);\n        verifyMocks();\n        verifyRanks();\n    }\n    \n    @Test\n    public void testMoveToRanked_spaceBetweenProjects() {\n        setupProjects(\n                project().withRank(0).expectedRank(4),\n                project().withRank(1).expectedRank(1),\n                project().withRank(3).expectedRank(3)\n        );\n        expect(settingBusiness.getPortfolioTimeSpan()).andReturn(Months.months(6).toPeriod());\n        replayMocks();\n        projectBusiness.moveToRanked(0);\n        verifyMocks();\n        verifyRanks();\n    }\n    \n    @Test\n    public void testMoveToRanked_onlyUnrankedProjects() {\n        setupProjects(\n                project().withRank(0).expectedRank(1),\n                project().withRank(0).expectedRank(0),\n                project().withRank(0).expectedRank(0)\n        );\n        expect(settingBusiness.getPortfolioTimeSpan()).andReturn(Months.months(6).toPeriod());\n        replayMocks();\n        projectBusiness.moveToRanked(0);\n        verifyMocks();\n        verifyRanks();\n    }\n    \n    @Test\n    public void testMoveToRanked_rankedProjectInThePast() {\n        setupProjects(\n                project().withRank(0).expectedRank(5),\n                project().withRank(4).expectedRank(4).withEndDateOffset(Months.months(-8).toPeriod())\n        );\n        expect(settingBusiness.getPortfolioTimeSpan()).andReturn(Months.months(6).toPeriod());\n        replayMocks();\n        projectBusiness.moveToRanked(0);\n        verifyMocks();\n        verifyRanks();\n    }\n    \n    @Test\n    public void testMoveToRanked_addBeforeRankedProjects() {\n        setupProjects(\n                project().withRank(0).expectedRank(2),\n                project().withRank(1).expectedRank(1),\n                project().withRank(4).expectedRank(5).withStartDateOffset(Months.months(8).toPeriod()),\n                project().withRank(5).expectedRank(6).withStartDateOffset(Months.months(9).toPeriod())\n        );\n        expect(settingBusiness.getPortfolioTimeSpan()).andReturn(Months.months(6).toPeriod());\n        replayMocks();\n        projectBusiness.moveToRanked(0);\n        verifyMocks();\n        verifyRanks();\n    }\n    \n    @Test\n    public void testMoveToRanked_projectsNotEntirelyInView() {\n        setupProjects(\n                project().withRank(0).expectedRank(10),\n                project().withRank(7).expectedRank(7).withStartDateOffset(Months.months(-2).toPeriod()),\n                project().withRank(9).expectedRank(9).withEndDateOffset(Months.months(2).toPeriod())\n        );\n        expect(settingBusiness.getPortfolioTimeSpan()).andReturn(Months.months(6).toPeriod());\n        replayMocks();\n        projectBusiness.moveToRanked(0);\n        verifyMocks();\n        verifyRanks();\n    }\n    \n    @Test\n    public void testMoveToRanked_projectEndAndStartOutsideView() {\n        setupProjects(\n                project().withRank(0).expectedRank(8),\n                project().withRank(7).expectedRank(7).withStartDateOffset(Months.months(-2).toPeriod()).withEndDateOffset(Months.months(2).toPeriod())\n        );\n        expect(settingBusiness.getPortfolioTimeSpan()).andReturn(Months.months(6).toPeriod());\n        replayMocks();\n        projectBusiness.moveToRanked(0);\n        verifyMocks();\n        verifyRanks();\n    }\n    \n    \n    \n    \n    \n    \n\n    /*\n     * The rest of this file contains only infrastructure\n     * that is needed for readable tests in this class. \n     */\n    \n    private void replayMocks() {\n        EasyMock.replay(settingBusiness);\n    }\n    \n    private void verifyMocks() {\n        EasyMock.verify(settingBusiness);\n    }\n    \n    private void verifyRanks() {\n        for (Map.Entry<Project, Integer> entry : expectedRanks.entrySet()) {\n            assertEquals(entry.getValue(), Integer.valueOf(entry.getKey().getRank()));\n        }\n    }\n    \n    private void setupProjects(ProjectDefinition... projectDefinitions) {\n        projects = new ArrayList<Project>();\n        expectedRanks = new HashMap<Project, Integer>();\n        int id = 0;\n        for (ProjectDefinition definition : projectDefinitions) {\n            Project project = definition.build();\n            project.setId(id);\n            projects.add(project);\n            id++;\n        }\n    }\n\n    private ProjectDefinition project() {\n        return new ProjectDefinition();\n    }\n    \n    /**\n     * A utility class for defining projects (builder-pattern style)\n     */\n    private class ProjectDefinition {\n        \n        private int rank;\n        private int expectedRank;\n        private boolean move;\n        private boolean underThis;\n        private ReadablePeriod startDateOffset = Days.days(0);\n        private ReadablePeriod endDateOffset = Days.days(0);\n\n        ProjectDefinition withStartDateOffset(ReadablePeriod period) {\n            this.startDateOffset = period;\n            return this;\n        }\n        ProjectDefinition withEndDateOffset(ReadablePeriod period) {\n            this.endDateOffset = period;\n            return this;\n        }\n        ProjectDefinition withRank(int rank) {\n            this.rank = rank;\n            return this;\n        }\n        ProjectDefinition expectedRank(int rank) {\n            this.expectedRank = rank;\n            return this;\n        }\n        ProjectDefinition move() {\n            this.move = true;\n            return this;\n        }\n        ProjectDefinition underThis() {\n            this.underThis = true;\n            return this;\n        }\n\n        Project build() {\n            Project project = new Project();\n            project.setRank(rank);\n            LocalDate today = new LocalDate();\n            project.setStartDate(today.plus(startDateOffset).toDateTimeAtStartOfDay());\n            project.setEndDate(project.getStartDate().plus(endDateOffset));\n            if (underThis) {\n                target = project;\n            }\n            if (move) {\n                toBeRanked = project;\n            }            \n            expectedRanks.put(project, expectedRank);\n            return project;\n        }\n\n    }\n\n    /**\n     * We extend ProjectDAOHibernate in order to override a single method with a real implementation.\n     * Doing this with EasyMock is tedious and probably requires a newer version than what Agilefant\n     * currently has.\n     * \n     * This might seem dangerous at first but probably isn't because all\n     * \"real\" hibernate methods will throw a NullPointerException\n     * because no sessionFactory has been injected.\n     */\n    private class MockProjectDAO extends ProjectDAOHibernate {\n        \n        @Override\n        public Project get(int id) {\n            return projects.get(id);\n        }\n        \n        @Override\n        public List<Project> getRankedProjects(LocalDate startDate, LocalDate endDate) {\n            List<Project> result = new ArrayList<Project>();\n            for (Project project : projects) {\n                if (project.getEndDate().isBefore(startDate.toDateTimeAtStartOfDay())) continue;\n                if (project.getStartDate().isAfter(endDate.toDateTimeAtStartOfDay())) continue;\n                if (project.getRank() > 0) {\n                    result.add(project);\n                }\n            }\n            return result;\n        }\n        \n        @Override\n        public List<Project> getUnrankedProjects(LocalDate startDate, LocalDate endDate) {\n            List<Project> result = new ArrayList<Project>();\n            for (Project project : projects) {\n                if (project.getEndDate().isBefore(startDate.toDateTimeAtStartOfDay())) continue;\n                if (project.getStartDate().isAfter(endDate.toDateTimeAtStartOfDay())) continue;\n                if (project.getRank() < 1) {\n                    result.add(project);\n                }\n            }\n            return result;\n        }\n\n        @Override\n        public Project getMaxRankedProject() {\n            Project result = null;\n            for (Project project : projects) {\n                if (project.getRank() < 1) continue;\n                if (result == null || project.getRank() > result.getRank()) {\n                    result = project;\n                }\n            }\n            return result;\n        }\n        \n        @Override\n        public Collection<Project> getProjectsWithRankBetween(int lower,\n                int upper) {\n            List<Project> result = new ArrayList<Project>();\n            for (Project project : projects) {\n                if (project.getRank() >= lower && project.getRank() <= upper) {\n                    result.add(project);\n                }\n            }\n            return result;\n        }\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\ProjectBusinessTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["ProjectBusinessTest"], "SCS_ClassReference": ["SpringJUnit4ClassRunner", "MockContextLoader", "product", "project", "project", "project", "user1", "user2", "story1", "story2", "story2", "Arrays", "task", "task", "Arrays", "story1", "Arrays", "project", null, "project", "project", null, "metrics", "metrics", "metrics", "metrics", "metrics", "metrics", "metrics", "metrics", "", null, "projectDAO", "project", "", null, "Days", "backlogBusiness", "", null, "storyRankBusiness", "", "storyBusiness", "", "projectBusiness", "", "", "actualMetrics", "", "actualMetrics", "", "actualMetrics", "", "IllegalArgumentException", "projectBusiness", "", null, null, "projectDAO", "project", "projectDAO", "", null, "transferObjectBusiness", "leafStory", "", "", null, "storyRankBusiness", "", null, "storyFilterBusiness", "", "", "projectBusiness", "project", "", "project", "", null, "productBusiness", "", null, "projectDAO", "EasyMock", "Project", "", null, "projectDAO", "", null, "transferObjectBusiness", "", "", "projectBusiness", "", "IllegalArgumentException", "project", "project", "", null, "projectDAO", "project", "projectDAO", "", "projectBusiness", "project", "", "ObjectNotFoundException", "falseProject", "", null, "projectDAO", "falseProject", "", "projectBusiness", "falseProject", "", "", null, null, "projectDAO", "project", "", null, "productBusiness", "projectDAO", "", null, "transferObjectBusiness", "leafStory", "", "", null, "storyRankBusiness", "", null, "storyFilterBusiness", "", "", "projectBusiness", "project", "", "", "project", "ObjectNotFoundException", "", null, "projectDAO", "", null, "productBusiness", "", "projectBusiness", "", "IllegalArgumentException", "projectBusiness", "Arrays", "", null, "projectDAO", "", "", "projectBusiness", "", "proj", "proj", "", null, null, "projectDAO", "", null, "transferObjectBusiness", "", "projectBusiness", "", "", "actual", "", "actual", "ObjectNotFoundException", "", null, "projectDAO", "", "projectBusiness", "", "project", "project", "", null, "projectDAO", "", "projectBusiness", "project", "", "project", null, "", "project", "project", "rankOver", "rankOver", "", null, "projectDAO", "project", "", null, "projectDAO", "rankOver", "", null, "projectDAO", "projectDAO", "", "projectBusiness", "project", "rankOver", "", "", "project", "project", "project", "rankUnder", "rankOver", "rankOver", "", null, "projectDAO", "project", "", null, "projectDAO", "rankOver", "", null, "projectDAO", "rankingBusiness", "", "", "", "RankUnderDelegate", "", "projectBusiness", "project", "rankOver", "", "", "project", "product", "iter", "iter", "project", null, "project", "project", "stories", "project", "assignments", "project", "historyEntries", "project", "hourEntries", "project", "", null, "projectDAO", "project", "storyRankBusiness", "iterationBusiness", "iter", "storyBusiness", "backlogHistoryEntryBusiness", "historyEntry", "assignmentBusiness", "assignment", "hourEntryBusiness", "project", "projectDAO", "", "projectBusiness", "project", ""], "AN": ["projectBusiness", "projectDAO", "backlogDAO", "productBusiness", "transferObjectBusiness", "settingBusiness", "rankingBusiness", "assignmentBusiness", "backlogHistoryEntryBusiness", "iterationBusiness", "storyBusiness", "hourEntryBusiness", "storyRankBusiness", "storyFilterBusiness", "backlogBusiness", "project", "product", "user1", "user2", "story1", "story2"], "SCS_VariableDeclarator": ["projectBusiness", "projectDAO", "backlogDAO", "productBusiness", "transferObjectBusiness", "settingBusiness", "rankingBusiness", "assignmentBusiness", "backlogHistoryEntryBusiness", "iterationBusiness", "storyBusiness", "hourEntryBusiness", "storyRankBusiness", "storyFilterBusiness", "backlogBusiness", "project", "product", "user1", "user2", "story1", "story2", "task", "metrics", "leafStories", "story", "actualMetrics", "actual", "leafStory", "leafStoryList", "actual", "falseProject", "actual", "leafStory", "leafStoryList", "expected", "proj", "actual", "project", "project", "rankOver", "project", "rankOver", "rankUnder", "product", "iter", "project", "story", "stories", "assignments", "assignment", "historyEntries", "historyEntry", "hourEntries", "hourEntry"], "MN": ["setUp_data", "testGetProjectMetrics", "testGetProjectMetrics_nullProject", "testStoreProject_oldProject", "testStoreProject_newProject", "testStoreProject_invalidDates", "testStoreProject_illegalProjectId", "testStoreProject_withProduct", "testStoreProject_invalidProduct", "testStoreProject_newProjectWithoutParent", "testGetAssignedUsers", "testGetProjectData", "testGetProjectData_noSuchProject", "testUnrank", "testRankOver_rankToTop", "testRankOver", "testDeleteProject"], "PN": [], "SCS_MemberReference": ["product", "project", "user1", "user2", "story1", "story2", "user2", "user1", "task", "metrics", "project", "leafStories", "project", "leafStories", "story", "project", "metrics", "actualMetrics", "project", "project", "project", "actual", "project", "leafStory", "leafStoryList", "project", "leafStoryList", "leafStoryList", "actual", "project", "project", "product", "project", "actual", "project", "actual", "project", "project", "project", "project", "falseProject", "project", "project", "product", "project", "actual", "project", "leafStory", "leafStoryList", "project", "leafStoryList", "leafStoryList", "actual", "project", "product", "project", "project", "project", "user1", "user2", "expected", "project", "expected", "project", "proj", "proj", "proj", "project", "project", "rankOver", "project", "rankOver", "rankUnder", "project", "rankUnder", "project", "iter", "product", "story", "stories", "assignment", "assignments", "historyEntry", "historyEntries", "hourEntry", "hourEntries", "project", "project", "story", "project"], "SCS_MethodInvocation": ["setId", "setId", "setStartDate", "setEndDate", "setId", "setId", "setId", "setId", "setResponsibles", "asList", "setId", "setResponsibles", "asList", "setTasks", "asList", "setStartDate", "minusDays", "setEndDate", "getStartDate", "plusDays", "setTotalDays", "setDaysLeft", "setNumberOfStories", "setNumberOfDoneStories", "setStoryPoints", "setCompletedStoryPoints", "setCompletedValue", "setTotalValue", "expect", "andReturn", "calculateProjectStoryMetrics", "getId", "expect", "andReturn", "days", "daysLeftInSchedulableBacklog", "expect", "andReturn", "retrieveByRankingContext", "expect", "calculateMetrics", "replayAll", "getProjectMetrics", "assertSame", "assertEquals", "getCompletedStoriesPercentage", "assertEquals", "getStoryPointsCompletedPercentage", "assertEquals", "getDaysLeftPercentage", "verifyAll", "getProjectMetrics", "expect", "andReturn", "anyTimes", "get", "getId", "store", "expect", "andReturn", "constructProjectTO", "setId", "add", "expect", "andReturn", "retrieveByRankingContext", "expect", "andReturn", "filterStoryList", "replayAll", "assertSame", "store", "getId", "verifyAll", "setId", "expect", "andReturn", "retrieve", "expect", "andReturn", "create", "isA", "expect", "andReturn", "get", "expect", "andReturn", "constructProjectTO", "replayAll", "assertSame", "store", "verifyAll", "setStartDate", "setEndDate", "expect", "andReturn", "get", "getId", "store", "replayAll", "store", "getId", "verifyAll", "setId", "expect", "andReturn", "get", "getId", "replayAll", "store", "getId", "verifyAll", "expect", "andReturn", "anyTimes", "get", "getId", "expect", "andReturn", "retrieve", "store", "expect", "andReturn", "constructProjectTO", "setId", "add", "expect", "andReturn", "retrieveByRankingContext", "expect", "andReturn", "filterStoryList", "replayAll", "assertSame", "store", "getId", "verifyAll", "assertEquals", "getParent", "expect", "andReturn", "get", "expect", "andThrow", "retrieve", "replayAll", "store", "verifyAll", "store", "asList", "expect", "andReturn", "getAssignedUsers", "replayAll", "assertSame", "getAssignedUsers", "verifyAll", "setId", "setName", "expect", "andReturn", "times", "get", "expect", "andReturn", "constructProjectTO", "replayAll", "getProjectData", "verifyAll", "assertEquals", "getId", "assertEquals", "getName", "expect", "andReturn", "get", "replayAll", "getProjectData", "verifyAll", "setId", "setRank", "expect", "andReturn", "get", "replayAll", "unrankProject", "getId", "assertEquals", "getRank", "intValue", "verifyAll", "setId", "setRank", "setRank", "setId", "expect", "andReturn", "get", "getId", "expect", "andReturn", "get", "getId", "expect", "andReturn", "getProjectWithRankLessThan", "increaseRankedProjectRanks", "replayAll", "rankOverProject", "getId", "getId", "verifyAll", "assertEquals", "getId", "setId", "setRank", "setRank", "setRank", "setId", "expect", "andReturn", "get", "getId", "expect", "andReturn", "get", "getId", "expect", "andReturn", "getProjectWithRankLessThan", "rankUnder", "eq", "eq", "isA", "replayAll", "rankOverProject", "getId", "getId", "verifyAll", "assertEquals", "getId", "setId", "setParent", "setId", "getChildren", "add", "setParent", "setId", "add", "setStories", "add", "setAssignments", "add", "setBacklogHistoryEntries", "add", "setHourEntries", "expect", "andReturn", "get", "getId", "removeBacklogRanks", "delete", "getId", "forceDelete", "delete", "getId", "delete", "getId", "deleteAll", "getHourEntries", "remove", "replayAll", "delete", "getId", "verifyAll"], "SCS_VariableDeclaration": ["Task", "ProjectMetrics", "List", "Story", "ProjectMetrics", "ProjectTO", "Story", "List", "ProjectTO", "Project", "ProjectTO", "Story", "List", "Collection", "Project", "ProjectTO", "Project", "Project", "Project", "Project", "Project", "Project", "Product", "Iteration", "Project", "Story", "Set", "Set", "Assignment", "Set", "BacklogHistoryEntry", "Set", "BacklogHourEntry"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport static org.easymock.EasyMock.*;\nimport static org.junit.Assert.*;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport org.easymock.EasyMock;\nimport org.joda.time.DateTime;\nimport org.joda.time.Days;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.test.annotation.DirtiesContext;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n\nimport fi.hut.soberit.agilefant.business.impl.ProjectBusinessImpl;\nimport fi.hut.soberit.agilefant.db.BacklogDAO;\nimport fi.hut.soberit.agilefant.db.ProjectDAO;\nimport fi.hut.soberit.agilefant.exception.ObjectNotFoundException;\nimport fi.hut.soberit.agilefant.model.Assignment;\nimport fi.hut.soberit.agilefant.model.BacklogHistoryEntry;\nimport fi.hut.soberit.agilefant.model.BacklogHourEntry;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.Product;\nimport fi.hut.soberit.agilefant.model.Project;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.Task;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.test.Mock;\nimport fi.hut.soberit.agilefant.test.MockContextLoader;\nimport fi.hut.soberit.agilefant.test.MockedTestCase;\nimport fi.hut.soberit.agilefant.test.TestedBean;\nimport fi.hut.soberit.agilefant.transfer.ProjectMetrics;\nimport fi.hut.soberit.agilefant.transfer.ProjectTO;\nimport fi.hut.soberit.agilefant.util.StoryFilters;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(loader = MockContextLoader.class)\npublic class ProjectBusinessTest  extends MockedTestCase { \n    @TestedBean\n    ProjectBusinessImpl projectBusiness;\n    @Mock\n    ProjectDAO projectDAO;\n    @Mock\n    BacklogDAO backlogDAO;\n    @Mock\n    ProductBusiness productBusiness;\n    @Mock\n    TransferObjectBusiness transferObjectBusiness;\n    @Mock\n    SettingBusiness settingBusiness;\n    @Mock\n    RankingBusiness rankingBusiness;\n    @Mock\n    AssignmentBusiness assignmentBusiness;\n    @Mock\n    BacklogHistoryEntryBusiness backlogHistoryEntryBusiness;\n    @Mock\n    IterationBusiness iterationBusiness;\n    @Mock\n    StoryBusiness storyBusiness;\n    @Mock\n    HourEntryBusiness hourEntryBusiness;\n    @Mock\n    StoryRankBusiness storyRankBusiness;\n    @Mock\n    StoryFilterBusiness storyFilterBusiness;\n    @Mock\n    BacklogBusiness backlogBusiness;\n    \n    Project project;\n    Product product;\n    User user1;\n    User user2;\n    Story story1;\n    Story story2;\n\n\n    @Before\n    public void setUp_data() {\n        product = new Product();\n        product.setId(313);\n\n        project = new Project();\n        project.setId(123);\n        project.setStartDate(new DateTime(2008, 1, 1, 12, 0, 0, 0));\n        project.setEndDate(new DateTime(2008, 3, 1, 12, 0, 0, 0));\n\n        user1 = new User();\n        user1.setId(1);\n        user2 = new User();\n        user2.setId(2);\n\n        story1 = new Story();\n        story1.setId(127);\n        story2 = new Story();\n        story2.setId(130);\n        story2.setResponsibles(new HashSet<User>(Arrays.asList(user2)));\n\n        Task task = new Task();\n        task.setId(86);\n        task.setResponsibles(new HashSet<User>(Arrays.asList(user1)));\n        story1.setTasks(new HashSet<Task>(Arrays.asList(task)));\n    }\n\n    @Test\n    @DirtiesContext\n    public void testGetProjectMetrics() {\n        ProjectMetrics metrics = new ProjectMetrics();\n        List<Story> leafStories = new ArrayList<Story>();\n        project.setStartDate(new DateTime().minusDays(7));\n        project.setEndDate(project.getStartDate().plusDays(10));\n\n        metrics.setTotalDays(10);\n        metrics.setDaysLeft(3);\n        \n        metrics.setNumberOfStories(100);\n        metrics.setNumberOfDoneStories(40);\n        \n        metrics.setStoryPoints(1000);\n        metrics.setCompletedStoryPoints(10);\n        \n        metrics.setCompletedValue(3);\n        metrics.setTotalValue(10);\n        \n        \n        expect(projectDAO.calculateProjectStoryMetrics(project.getId())).andReturn(metrics);\n        expect(backlogBusiness.daysLeftInSchedulableBacklog(project)).andReturn(Days.days(3));\n        expect(storyRankBusiness.retrieveByRankingContext(project)).andReturn(leafStories);\n        for(Story story : leafStories)\n            expect(storyBusiness.calculateMetrics(story));\n        \n\n        replayAll();\n\n        ProjectMetrics actualMetrics = projectBusiness\n                .getProjectMetrics(project);\n\n        assertSame(metrics, actualMetrics);\n        assertEquals(40, actualMetrics.getCompletedStoriesPercentage());\n        assertEquals(1, actualMetrics.getStoryPointsCompletedPercentage());\n        assertEquals(30, actualMetrics.getDaysLeftPercentage());\n\n        verifyAll();\n    }\n\n    @Test(expected = IllegalArgumentException.class)\n    @DirtiesContext\n    public void testGetProjectMetrics_nullProject() {\n        projectBusiness.getProjectMetrics(null);\n    }\n\n    @Test\n    @DirtiesContext\n    public void testStoreProject_oldProject() {\n        ProjectTO actual = new ProjectTO(project);\n        \n        expect(projectDAO.get(project.getId())).andReturn(project).anyTimes();\n        projectDAO.store(project);\n        expect(transferObjectBusiness.constructProjectTO(project)).andReturn(actual);\n\n        final Story leafStory = new Story();\n        leafStory.setId(12345);\n        List<Story> leafStoryList = new ArrayList<Story>() {{\n            add(leafStory);\n        }};\n        expect(storyRankBusiness.retrieveByRankingContext(project)).andReturn(leafStoryList);\n        expect(storyFilterBusiness.filterStoryList(leafStoryList, new StoryFilters(null, null))).andReturn(leafStoryList);\n\n        replayAll();\n        assertSame(actual, projectBusiness.store(project.getId(), null, project, null));\n        verifyAll();\n    }\n\n    @Test\n    @DirtiesContext\n    public void testStoreProject_newProject() {\n        ProjectTO actual = new ProjectTO(project);\n        project.setId(0);\n        expect(productBusiness.retrieve(313)).andReturn(product);\n        expect(projectDAO.create(EasyMock.isA(Project.class))).andReturn(123);\n        expect(projectDAO.get(123)).andReturn(project);\n        expect(transferObjectBusiness.constructProjectTO(project)).andReturn(actual);\n        replayAll();\n        assertSame(actual, projectBusiness.store(0, 313, project, null));\n        verifyAll();\n    }\n\n    @Test(expected = IllegalArgumentException.class)\n    @DirtiesContext\n    public void testStoreProject_invalidDates() {\n        project.setStartDate(new DateTime(2008, 1, 1, 1, 0, 0, 0));\n        project.setEndDate(new DateTime(2007, 1, 1, 1, 0, 0, 0));\n\n        expect(projectDAO.get(project.getId())).andReturn(project);\n        projectDAO.store(project);\n        replayAll();\n        projectBusiness.store(project.getId(), null, project, null);\n        verifyAll();\n    }\n\n    @Test(expected = ObjectNotFoundException.class)\n    @DirtiesContext\n    public void testStoreProject_illegalProjectId() {\n        Project falseProject = new Project();\n        falseProject.setId(4);\n        expect(projectDAO.get(falseProject.getId())).andReturn(null);\n        replayAll();\n        projectBusiness.store(falseProject.getId(), null, falseProject, null);\n        verifyAll();\n    }\n\n    @Test\n    @DirtiesContext\n    public void testStoreProject_withProduct() {\n        ProjectTO actual = new ProjectTO(project);\n\n        expect(projectDAO.get(project.getId())).andReturn(project).anyTimes();\n        expect(productBusiness.retrieve(313)).andReturn(product);\n        projectDAO.store(project);\n        expect(transferObjectBusiness.constructProjectTO(project)).andReturn(actual);\n\n        final Story leafStory = new Story();\n        leafStory.setId(12345);\n        List<Story> leafStoryList = new ArrayList<Story>() {{\n            add(leafStory);\n        }};\n        expect(storyRankBusiness.retrieveByRankingContext(project)).andReturn(leafStoryList);\n        expect(storyFilterBusiness.filterStoryList(leafStoryList, new StoryFilters(null, null))).andReturn(leafStoryList);\n\n        replayAll();\n        assertSame(actual, projectBusiness.store(project.getId(), 313, project, null));\n        verifyAll();\n        assertEquals(product, project.getParent());\n    }\n\n    @Test(expected = ObjectNotFoundException.class)\n    @DirtiesContext\n    public void testStoreProject_invalidProduct() {\n        expect(projectDAO.get(123)).andReturn(project);\n        expect(productBusiness.retrieve(313)).andThrow(new ObjectNotFoundException());\n        replayAll();\n        projectBusiness.store(123, 313, project, null);\n        verifyAll();\n    }\n    \n    @Test(expected = IllegalArgumentException.class)\n    @DirtiesContext\n    public void testStoreProject_newProjectWithoutParent() {\n        projectBusiness.store(0, null, project, null);\n    }\n\n    @Test\n    @DirtiesContext\n    public void testGetAssignedUsers() {\n        Collection<User> expected = Arrays.asList(user1, user2);\n        expect(projectDAO.getAssignedUsers(project)).andReturn(expected);\n        replayAll();\n\n        assertSame(\"List doesn't contain expected users\", expected,\n                projectBusiness.getAssignedUsers(project));\n\n        verifyAll();\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testGetProjectData() {\n        Project proj = new Project();\n        proj.setId(111);\n        proj.setName(\"Foo faa\");\n               \n               \n        expect(projectDAO.get(111)).andReturn(proj).times(2);\n        expect(transferObjectBusiness.constructProjectTO(proj)).andReturn(new ProjectTO(proj));\n        replayAll();\n        ProjectTO actual = projectBusiness.getProjectData(111);\n        verifyAll();\n        \n        assertEquals(111, actual.getId());\n        assertEquals(\"Foo faa\", actual.getName());\n    }\n    \n    \n    @Test(expected = ObjectNotFoundException.class)\n    @DirtiesContext\n    public void testGetProjectData_noSuchProject() {\n        expect(projectDAO.get(-1)).andReturn(null);\n        replayAll();\n        projectBusiness.getProjectData(-1);\n        verifyAll();\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testUnrank() {\n        Project project = new Project();\n        project.setId(500);\n        project.setRank(999);\n        expect(projectDAO.get(500)).andReturn(project);\n        replayAll();\n        projectBusiness.unrankProject(project.getId());\n        assertEquals(0, project.getRank().intValue());\n        verifyAll();\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testRankOver_rankToTop() {\n        Project project = new Project();\n        project.setId(1);\n        project.setRank(2);\n        Project rankOver = new Project();\n        rankOver.setRank(1);\n        rankOver.setId(5);\n        expect(projectDAO.get(project.getId())).andReturn(project);\n        expect(projectDAO.get(rankOver.getId())).andReturn(rankOver);\n        expect(projectDAO.getProjectWithRankLessThan(1)).andReturn(null);\n        projectDAO.increaseRankedProjectRanks();\n        replayAll();\n        projectBusiness.rankOverProject(project.getId(), rankOver.getId());\n        verifyAll();\n        assertEquals(1, project.getId());\n    }\n             \n    @Test\n    @DirtiesContext\n    public void testRankOver() {\n        Project project = new Project();\n        project.setId(1);\n        project.setRank(3);\n        Project rankOver = new Project();\n        Project rankUnder = new Project();\n        rankUnder.setRank(1);\n        rankOver.setRank(2);\n        rankOver.setId(5);\n        expect(projectDAO.get(project.getId())).andReturn(project);\n        expect(projectDAO.get(rankOver.getId())).andReturn(rankOver);\n        expect(projectDAO.getProjectWithRankLessThan(2)).andReturn(rankUnder);\n        rankingBusiness.rankUnder(eq(project), eq(rankUnder), isA(RankUnderDelegate.class));\n        replayAll();\n        projectBusiness.rankOverProject(project.getId(), rankOver.getId());\n        verifyAll();\n        assertEquals(1, project.getId());\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testDeleteProject() {\n        Product product = new Product();\n        product.setId(123);\n        Iteration iter = new Iteration();\n        Project project = new Project();\n        iter.setParent(project);\n        iter.setId(111);\n        project.getChildren().add(iter);\n        project.setParent(product);\n        project.setId(112);\n        Story story = new Story();\n        Set<Story> stories = new HashSet<Story>();\n        stories.add(story);\n        project.setStories(stories);\n        Set<Assignment> assignments = new HashSet<Assignment>();\n        Assignment assignment = new Assignment();\n        assignments.add(assignment);\n        project.setAssignments(assignments);\n        Set<BacklogHistoryEntry> historyEntries = new HashSet<BacklogHistoryEntry>();\n        BacklogHistoryEntry historyEntry = new BacklogHistoryEntry();\n        historyEntries.add(historyEntry);\n        project.setBacklogHistoryEntries(historyEntries);\n        Set<BacklogHourEntry> hourEntries = new HashSet<BacklogHourEntry>();\n        BacklogHourEntry hourEntry = new BacklogHourEntry();\n        hourEntries.add(hourEntry);\n        project.setHourEntries(hourEntries);\n        \n        expect(projectDAO.get(project.getId())).andReturn(project);\n        \n        storyRankBusiness.removeBacklogRanks(project);\n        \n        iterationBusiness.delete(iter.getId());\n        \n        storyBusiness.forceDelete(story);\n        backlogHistoryEntryBusiness.delete(historyEntry.getId());\n        assignmentBusiness.delete(assignment.getId());\n        hourEntryBusiness.deleteAll(project.getHourEntries());\n        \n        projectDAO.remove(project);\n        \n        replayAll();\n        projectBusiness.delete(project.getId());\n        verifyAll();\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\RankingBusinessTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["RankingBusinessTest"], "AN": ["rankingBusiness", "rankable1", "rankable2", "rankable3", "rankable4"], "SCS_VariableDeclarator": ["rankingBusiness", "rankable1", "rankable2", "rankable3", "rankable4", "actual", "actual", "actual"], "MN": ["setUp_data", "testGetRankBorders_toTop", "testGetRankBorders_up", "testGetRankBorders_down", "testGetRankBorders_nullRankable", "testFindOutRankDirection_toTop", "testFindOutRankDirection_up", "testFindOutRankDirection_down", "testFindOutRankDirection_sameRank", "testFindOutRankDirection_nullArguments", "assertShiftRanks", "testShiftRanks_toTop", "testShiftRanks_upwards", "testShiftRanks_downwards", "testShiftRanks_noDirection", "testShiftRanks_noRankables", "testFindOutNewRank_top", "testFindOutNewRank_up", "testFindOutNewRank_down", "testRankToBottom", "testRankToBottom_nothingBefore", "testRankUnder", "getWithRankBetween"], "PN": ["originalFirst", "originalSecond", "expectedFirst", "expectedSecond", "dir", "first", "second"], "SCS_MemberReference": ["rankable1", "rankable2", "rankable3", "rankable4", "rankable1", "rankable1", "rankable2", "rankable2", "rankable1", "TOP", "rankable1", "UP", "rankable1", "rankable2", "DOWN", "rankable2", "rankable1", "DOWN", "rankable2", "rankable1", "originalFirst", "originalSecond", "dir", "rankable1", "rankable2", "expectedFirst", "expectedSecond", "TOP", "UP", "DOWN", "UP", "rankable1", "TOP", "rankable1", "rankable2", "UP", "rankable2", "rankable1", "DOWN", "rankable1", "rankable2", "rankable1", "rankable1", "rankable3", "rankable2", "rankable3"], "SCS_ClassReference": ["rankable1", "rankingBusiness", "", "actual.first", "", "actual.second", "rankable1", "rankable2", "rankingBusiness", "", "actual.first", "", "actual.second", "rankable1", "rankable2", "rankingBusiness", "", "actual.first", "", "actual.second", "IllegalArgumentException", "rankingBusiness", "", "rankingBusiness", "rankable1", "rankable2", "", "rankingBusiness", "rankable1", "rankable2", "", "rankingBusiness", "rankable1", "rankable2", "", "rankingBusiness", "IllegalArgumentException", "rankingBusiness", "rankable1", "rankable2", "rankingBusiness", "Arrays", "", "rankable1", null, "", "rankable2", null, "", "", "", "IllegalArgumentException", "rankingBusiness", "IllegalArgumentException", "rankingBusiness", "", "rankingBusiness", "rankable1", "rankable2", "", "rankingBusiness", "rankable1", "rankable2", "", "rankingBusiness", "rankable1", "rankable2", "rankingBusiness", "", "rankable1", null, "rankable1", "rankingBusiness", "", "rankable1", null, "rankable1", "rankable2", "rankable3", "rankable4", "rankingBusiness", "", "first", "", "second", "Arrays", "", "rankable1", null], "SCS_MethodInvocation": ["setRank", "getRankBorders", "assertEquals", "intValue", "assertEquals", "intValue", "setRank", "setRank", "getRankBorders", "assertEquals", "intValue", "assertEquals", "intValue", "setRank", "setRank", "getRankBorders", "assertEquals", "intValue", "assertEquals", "intValue", "getRankBorders", "assertEquals", "findOutRankDirection", "setRank", "setRank", "assertEquals", "findOutRankDirection", "setRank", "setRank", "assertEquals", "findOutRankDirection", "setRank", "setRank", "assertEquals", "findOutRankDirection", "findOutRankDirection", "setRank", "setRank", "shiftRanks", "asList", "assertEquals", "getRank", "intValue", "assertEquals", "getRank", "intValue", "assertShiftRanks", "assertShiftRanks", "assertShiftRanks", "shiftRanks", "shiftRanks", "assertEquals", "findOutNewRank", "setRank", "setRank", "assertEquals", "findOutNewRank", "setRank", "setRank", "assertEquals", "findOutNewRank", "setRank", "setRank", "rankToBottom", "assertEquals", "getRank", "intValue", "setRank", "rankToBottom", "assertEquals", "getRank", "intValue", "setRank", "setRank", "setRank", "setRank", "rankUnder", "assertEquals", "intValue", "assertEquals", "intValue", "asList", "assertEquals", "getRank", "intValue"], "SCS_VariableDeclaration": ["Pair", "Pair", "Pair"], "CO": ["/*\n     * GET RANK BORDERS\n     */", "// Expected border values: (0, ownRank - 1)", "// Expected border values: (upperRank + 1, ownRank - 1)", "// Expected border values: (ownRank + 1, upper)", "/*\n     * FIND OUT RANK DIRECTION\n     */", "/*\n     * SHIFT RANKS\n     */", "/*\n     * FIND OUT NEW RANK \n     */"], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport static org.junit.Assert.*;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport fi.hut.soberit.agilefant.business.impl.RankingBusinessImpl;\nimport fi.hut.soberit.agilefant.business.impl.RankingBusinessImpl.RankDirection;\nimport fi.hut.soberit.agilefant.model.Rankable;\nimport fi.hut.soberit.agilefant.model.Task;\nimport fi.hut.soberit.agilefant.util.Pair;\n\npublic class RankingBusinessTest {\n\n    private RankingBusinessImpl rankingBusiness = new RankingBusinessImpl();\n\n    private Rankable rankable1;\n    private Rankable rankable2;\n    private Rankable rankable3;\n    private Rankable rankable4;\n    \n    @Before\n    public void setUp_data() {\n        rankable1 = new Task();\n        rankable2 = new Task();\n        rankable3 = new Task();\n        rankable4 = new Task();\n    }\n    \n    /*\n     * GET RANK BORDERS\n     */\n    @Test\n    public void testGetRankBorders_toTop() {\n        // Expected border values: (0, ownRank - 1)\n        rankable1.setRank(333);\n        Pair<Integer, Integer> actual = rankingBusiness.getRankBorders(rankable1, null);\n        assertEquals(0, actual.first.intValue());\n        assertEquals(332, actual.second.intValue());\n    }\n    \n    @Test\n    public void testGetRankBorders_up() {\n        // Expected border values: (upperRank + 1, ownRank - 1)\n        rankable1.setRank(287);\n        rankable2.setRank(150);\n        \n        Pair<Integer, Integer> actual = rankingBusiness.getRankBorders(rankable1, rankable2);\n        assertEquals(151, actual.first.intValue());\n        assertEquals(286, actual.second.intValue());\n    }\n    \n    @Test\n    public void testGetRankBorders_down() {\n        // Expected border values: (ownRank + 1, upper)\n        rankable1.setRank(117);\n        rankable2.setRank(3);\n        \n        Pair<Integer, Integer> actual = rankingBusiness.getRankBorders(rankable2, rankable1);\n        assertEquals(4, actual.first.intValue());\n        assertEquals(117, actual.second.intValue());\n    }\n    \n    @Test(expected = IllegalArgumentException.class)\n    public void testGetRankBorders_nullRankable() {\n        rankingBusiness.getRankBorders(null, null);\n    }\n    \n    \n    /*\n     * FIND OUT RANK DIRECTION\n     */\n    \n    @Test\n    public void testFindOutRankDirection_toTop() {\n        assertEquals(RankDirection.TOP, rankingBusiness.findOutRankDirection(rankable1, null));\n    }\n    \n    @Test\n    public void testFindOutRankDirection_up() {\n        rankable1.setRank(5);\n        rankable2.setRank(1);\n        assertEquals(RankDirection.UP, rankingBusiness.findOutRankDirection(rankable1, rankable2));\n    }\n    \n    @Test\n    public void testFindOutRankDirection_down() {\n        rankable1.setRank(5);\n        rankable2.setRank(1);\n        assertEquals(RankDirection.DOWN, rankingBusiness.findOutRankDirection(rankable2, rankable1));\n    }\n    \n    @Test\n    public void testFindOutRankDirection_sameRank() {\n        rankable1.setRank(5);\n        rankable2.setRank(5);\n        assertEquals(RankDirection.DOWN, rankingBusiness.findOutRankDirection(rankable2, rankable1));\n    }\n    \n    @Test(expected = IllegalArgumentException.class)\n    public void testFindOutRankDirection_nullArguments() {\n        rankingBusiness.findOutRankDirection(null, null);\n    }\n    \n    \n    /*\n     * SHIFT RANKS\n     */\n    private void assertShiftRanks(int originalFirst, int originalSecond,\n            int expectedFirst, int expectedSecond, RankDirection dir) {\n        rankable1.setRank(originalFirst);\n        rankable2.setRank(originalSecond);\n        \n        rankingBusiness.shiftRanks(dir, Arrays.asList(rankable1, rankable2));\n        \n        assertEquals(expectedFirst, rankable1.getRank().intValue());\n        assertEquals(expectedSecond, rankable2.getRank().intValue());\n    }\n    \n    @Test\n    public void testShiftRanks_toTop() {\n        assertShiftRanks(137, 337, 138, 338, RankDirection.TOP);\n    }\n   \n    \n    @Test\n    public void testShiftRanks_upwards() {\n        assertShiftRanks(127, 381, 128, 382, RankDirection.UP);\n    }\n    \n    @Test\n    public void testShiftRanks_downwards() {\n        assertShiftRanks(521, 985, 520, 984, RankDirection.DOWN);\n    }\n    \n    @Test(expected = IllegalArgumentException.class)\n    public void testShiftRanks_noDirection() {\n        rankingBusiness.shiftRanks(null, new ArrayList<Rankable>());\n    }\n    \n    @Test(expected = IllegalArgumentException.class)\n    public void testShiftRanks_noRankables() {\n        rankingBusiness.shiftRanks(RankDirection.UP, null);\n    }\n    \n    \n    /*\n     * FIND OUT NEW RANK \n     */\n    @Test\n    public void testFindOutNewRank_top() {\n        assertEquals(0, rankingBusiness.findOutNewRank(rankable1, null, RankDirection.TOP));\n    }\n    \n    @Test\n    public void testFindOutNewRank_up() {\n        rankable1.setRank(120);\n        rankable2.setRank(33);\n        assertEquals(34, rankingBusiness.findOutNewRank(rankable1, rankable2, RankDirection.UP));\n    }\n    \n    @Test\n    public void testFindOutNewRank_down() {\n        rankable1.setRank(713);\n        rankable2.setRank(97);\n        assertEquals(713, rankingBusiness.findOutNewRank(rankable2, rankable1, RankDirection.DOWN));\n    }\n    \n    @Test\n    public void testRankToBottom() {\n        rankable1.setRank(2);\n        rankable2.setRank(4);\n        \n        rankingBusiness.rankToBottom(rankable1, rankable2);\n        \n        assertEquals(5, rankable1.getRank().intValue());\n    }\n\n    @Test\n    public void testRankToBottom_nothingBefore() {\n        rankable1.setRank(2);\n        \n        rankingBusiness.rankToBottom(rankable1, null);\n        \n        assertEquals(0, rankable1.getRank().intValue());\n    }\n\n    @Test\n    public void testRankUnder() {\n        rankable1.setRank(1);\n        rankable2.setRank(2);\n        rankable3.setRank(3);\n        rankable4.setRank(4);\n        \n        rankingBusiness.rankUnder(rankable1, rankable3, new RankUnderDelegate() {\n            public Collection<? extends Rankable> getWithRankBetween(\n                    Integer first, Integer second) {\n                assertEquals(2, first.intValue());\n                assertEquals(3, second.intValue());\n                \n                return Arrays.asList(new Rankable[] { rankable2, rankable3 }); \n            }\n        });\n        \n        assertEquals(3, rankable1.getRank().intValue());\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\SearchBusinessTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["SearchBusinessTest"], "SCS_ClassReference": ["SpringJUnit4ClassRunner", "MockContextLoader", "", "iteration", "project", "products", "team", "story", "story", "", null, null, "authorizationBusiness", "SecurityUtil", "", null, "Arrays", "backlogDAO", "", null, "Arrays", "storyDAO", "", null, "Arrays", "taskDAO", "", "searchBusiness", "", "result", "", "result", null, "", "result", null, "", "", "story", "story", "iteration", "project", "products", "team", "", null, null, "authorizationBusiness", "SecurityUtil", "", null, "backlogDAO", "", null, "storyDAO", "", null, "storyDAO", "", null, "Arrays", "taskDAO", "", "searchBusiness", "", "result", "", "result", null, "", "", "iteration", "project", "story", "story", "products", "team", "", null, null, "authorizationBusiness", "SecurityUtil", "", null, "storyDAO", "", "", "searchBusiness", "", "user", "SecurityUtil", "", null, "storyDAO", "", "", "searchBusiness", "", "", "iteration", "project", "products", "team", "", null, null, "authorizationBusiness", "SecurityUtil", "", null, "backlogDAO", "", "", "searchBusiness", "", "user", "SecurityUtil", "", null, "backlogDAO", "", "", "searchBusiness", "", "user", "SecurityUtil", "", "", "searchBusiness", "", "user", "SecurityUtil", "", "", "searchBusiness", "", "user", "SecurityUtil", "", "", "searchBusiness", "", "user", "SecurityUtil", "", "", "searchBusiness", "", "", "iteration", "project", "products", "team", "Arrays", "", null, null, "authorizationBusiness", "SecurityUtil", "", null, "backlogDAO", "Iteration", "", "searchBusiness", "", "", "res", "actual", null, "", "project", "products", "team", "Arrays", "", null, null, "authorizationBusiness", "SecurityUtil", "", null, "backlogDAO", "Project", "", "searchBusiness", "", "", "res", "actual", null, "", "project", "iteration", "iteration", "story", "story", "story", "products", "team", "Arrays", "", null, null, "authorizationBusiness", "SecurityUtil", "", null, "storyDAO", "", "searchBusiness", "", "", "actual", null, "", "actual", null, null, "", "actual", null, null, "Arrays", "", null, null, "authorizationBusiness", "SecurityUtil", "", null, "userDAO", "", "searchBusiness", "", "", "res", "actual", null, "users", "team", "teams", "user", "SecurityUtil"], "AN": ["searchBusiness", "storyDAO", "backlogDAO", "taskDAO", "userDAO", "authorizationBusiness", "team"], "SCS_VariableDeclarator": ["searchBusiness", "storyDAO", "backlogDAO", "taskDAO", "userDAO", "authorizationBusiness", "team", "product", "project", "iteration", "products", "search", "story", "result", "search", "product", "project", "iteration", "story", "products", "result", "term", "story", "product", "project", "iteration", "products", "user", "term", "term", "product", "project", "iteration", "products", "user", "term", "user", "term", "user", "term", "user", "term", "user", "term", "term", "product", "project", "iteration", "products", "res", "actual", "term", "product", "project", "products", "res", "actual", "term", "product", "project", "iteration", "story", "products", "res", "actual", "term", "res", "actual", "user", "users", "teams"], "MN": ["testSearchStoriesAndBacklogs", "testSearchStoriesAndBacklogs_reference", "testSearchByReference_story", "testSearchByReference_storyNotFound", "testSearchByReference_backlog", "testSearchByReference_backlogNotFound", "testSearchByReference_invalidTerm1", "testSearchByReference_invalidTerm2", "testSearchByReference_invalidTerm3", "testSearchByReference_invalidTermEmpty", "testSearchIterations", "testSearchProjects", "testSearchStories", "testSearchUsers", "setAccess"], "PN": [], "SCS_MethodInvocation": ["setAccess", "setParent", "setParent", "add", "setProducts", "setIteration", "setBacklog", "expect", "andReturn", "anyTimes", "isBacklogAccessible", "getLoggedUser", "expect", "andReturn", "asList", "searchByName", "expect", "andReturn", "asList", "searchByName", "expect", "andReturn", "asList", "searchByName", "replayAll", "searchStoriesAndBacklog", "assertEquals", "size", "assertTrue", "get", "getOriginalObject", "assertTrue", "get", "getOriginalObject", "verifyAll", "setAccess", "setIteration", "setBacklog", "setParent", "setParent", "add", "setProducts", "expect", "andReturn", "anyTimes", "isBacklogAccessible", "getLoggedUser", "expect", "andReturn", "searchByName", "expect", "andReturn", "searchByName", "expect", "andReturn", "get", "expect", "andReturn", "asList", "searchByName", "replayAll", "searchStoriesAndBacklog", "assertEquals", "size", "assertTrue", "get", "getOriginalObject", "verifyAll", "setAccess", "setParent", "setParent", "setIteration", "setBacklog", "add", "setProducts", "expect", "andReturn", "anyTimes", "isBacklogAccessible", "getLoggedUser", "expect", "andReturn", "get", "replayAll", "assertEquals", "searchByReference", "verifyAll", "setId", "setLoggedUser", "expect", "andReturn", "get", "replayAll", "assertNull", "searchByReference", "verifyAll", "setAccess", "setParent", "setParent", "add", "setProducts", "expect", "andReturn", "anyTimes", "isBacklogAccessible", "getLoggedUser", "expect", "andReturn", "get", "replayAll", "assertEquals", "searchByReference", "verifyAll", "setId", "setLoggedUser", "expect", "andReturn", "get", "replayAll", "assertNull", "searchByReference", "verifyAll", "setId", "setLoggedUser", "replayAll", "assertNull", "searchByReference", "verifyAll", "setId", "setLoggedUser", "replayAll", "assertNull", "searchByReference", "verifyAll", "setId", "setLoggedUser", "replayAll", "assertNull", "searchByReference", "verifyAll", "setId", "setLoggedUser", "replayAll", "assertNull", "searchByReference", "verifyAll", "setAccess", "setParent", "setParent", "add", "setProducts", "asList", "expect", "andReturn", "anyTimes", "isBacklogAccessible", "getLoggedUser", "expect", "andReturn", "searchByName", "replayAll", "searchIterations", "verifyAll", "assertSame", "get", "get", "getOriginalObject", "setAccess", "setParent", "add", "setProducts", "asList", "expect", "andReturn", "anyTimes", "isBacklogAccessible", "getLoggedUser", "expect", "andReturn", "searchByName", "replayAll", "searchProjects", "verifyAll", "assertSame", "get", "get", "getOriginalObject", "setAccess", "setParent", "setName", "setParent", "setName", "setIteration", "setBacklog", "add", "setProducts", "asList", "expect", "andReturn", "anyTimes", "isBacklogAccessible", "getLoggedUser", "expect", "andReturn", "searchByName", "replayAll", "searchStories", "verifyAll", "assertSame", "get", "getOriginalObject", "assertTrue", "get", "getLabel", "contains", "assertTrue", "get", "getLabel", "contains", "asList", "expect", "andReturn", "anyTimes", "isUserAccessible", "getLoggedUser", "expect", "andReturn", "searchByName", "replayAll", "searchUsers", "verifyAll", "assertSame", "get", "get", "getOriginalObject", "add", "setUsers", "add", "setTeams", "setLoggedUser"], "SCS_VariableDeclaration": ["Backlog", "Backlog", "Iteration", "Set", "String", "Story", "List", "String", "Backlog", "Backlog", "Iteration", "Story", "Set", "List", "String", "Story", "Backlog", "Backlog", "Iteration", "Set", "User", "String", "String", "Backlog", "Backlog", "Backlog", "Set", "User", "String", "User", "String", "User", "String", "User", "String", "User", "String", "String", "Backlog", "Backlog", "Backlog", "Set", "List", "List", "String", "Backlog", "Backlog", "Set", "List", "List", "String", "Backlog", "Backlog", "Iteration", "Story", "Set", "List", "List", "String", "List", "List", "User", "Collection", "Collection"], "SCS_MemberReference": ["project", "product", "product", "products", "iteration", "project", "iteration", "search", "story", "search", "search", "search", "iteration", "project", "project", "product", "product", "products", "search", "search", "story", "search", "search", "project", "product", "iteration", "project", "product", "products", "story", "story", "term", "user", "term", "project", "product", "product", "products", "iteration", "iteration", "term", "user", "term", "user", "term", "user", "term", "user", "term", "user", "term", "project", "product", "product", "products", "iteration", "res", "term", "term", "product", "product", "products", "project", "res", "term", "term", "product", "project", "iteration", "project", "product", "products", "story", "res", "term", "term", "story", "res", "term", "term", "team", "user", "users", "team", "teams", "user"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport static org.easymock.EasyMock.expect;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertSame;\nimport static org.junit.Assert.assertTrue;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.test.annotation.DirtiesContext;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n\nimport fi.hut.soberit.agilefant.business.impl.SearchBusinessImpl;\nimport fi.hut.soberit.agilefant.db.BacklogDAO;\nimport fi.hut.soberit.agilefant.db.StoryDAO;\nimport fi.hut.soberit.agilefant.db.TaskDAO;\nimport fi.hut.soberit.agilefant.db.UserDAO;\nimport fi.hut.soberit.agilefant.model.Backlog;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.Product;\nimport fi.hut.soberit.agilefant.model.Project;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.Task;\nimport fi.hut.soberit.agilefant.model.Team;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.security.SecurityUtil;\nimport fi.hut.soberit.agilefant.test.Mock;\nimport fi.hut.soberit.agilefant.test.MockContextLoader;\nimport fi.hut.soberit.agilefant.test.MockedTestCase;\nimport fi.hut.soberit.agilefant.test.TestedBean;\nimport fi.hut.soberit.agilefant.transfer.SearchResultRow;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(loader = MockContextLoader.class)\npublic class SearchBusinessTest extends MockedTestCase {\n    \n    @TestedBean\n    private SearchBusinessImpl searchBusiness;\n    @Mock\n    private StoryDAO storyDAO;\n    @Mock\n    private BacklogDAO backlogDAO;\n    @Mock\n    private TaskDAO taskDAO;\n    @Mock\n    private UserDAO userDAO;\n    @Mock\n    private AuthorizationBusiness authorizationBusiness;\n    \n    private Team team;\n    \n    @Test\n    @DirtiesContext\n    public void testSearchStoriesAndBacklogs() {\n        setAccess();\n        \n        Backlog product = new Product();\n        Backlog project = new Project();\n        Iteration iteration = new Iteration();\n        iteration.setParent(project);\n        project.setParent(product);\n        Set<Product> products = new HashSet<Product>();\n        products.add((Product)product);\n        team.setProducts(products);\n        \n        String search = \"foo\";\n        Story story = new Story();\n        story.setIteration(iteration);\n        story.setBacklog(project);\n        expect(authorizationBusiness.isBacklogAccessible(0, SecurityUtil.getLoggedUser())).andReturn(true).anyTimes();\n        expect(backlogDAO.searchByName(search)).andReturn(Arrays.asList((Backlog)(iteration)));\n        expect(storyDAO.searchByName(search)).andReturn(Arrays.asList(story));\n        expect(taskDAO.searchByName(search)).andReturn(Arrays.asList((Task)(new Task())));\n        replayAll();\n        List<SearchResultRow> result = searchBusiness.searchStoriesAndBacklog(search);\n        assertEquals(2, result.size());\n        assertTrue(result.get(0).getOriginalObject() instanceof Iteration);\n        assertTrue(result.get(1).getOriginalObject() instanceof Story);\n        verifyAll();\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testSearchStoriesAndBacklogs_reference() {\n        setAccess();\n        \n        String search = \"story:123\";\n        Backlog product = new Product();\n        Backlog project = new Project();\n        Iteration iteration = new Iteration();\n        Story story = new Story();\n        story.setIteration(iteration);\n        story.setBacklog(project);\n        iteration.setParent(project);\n        project.setParent(product);\n        Set<Product> products = new HashSet<Product>();\n        products.add((Product)product);\n        team.setProducts(products);\n        \n        expect(authorizationBusiness.isBacklogAccessible(0, SecurityUtil.getLoggedUser())).andReturn(true).anyTimes();\n        expect(backlogDAO.searchByName(search)).andReturn(new ArrayList<Backlog>());\n        expect(storyDAO.searchByName(search)).andReturn(new ArrayList<Story>());\n        expect(storyDAO.get(123)).andReturn(story);\n        expect(taskDAO.searchByName(search)).andReturn(Arrays.asList((Task)(new Task())));\n        replayAll();\n        List<SearchResultRow> result = searchBusiness.searchStoriesAndBacklog(search);\n        assertEquals(1, result.size());\n        assertTrue(result.get(0).getOriginalObject() instanceof Story);\n        verifyAll();\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testSearchByReference_story() {\n        setAccess();\n        \n        String term = \"story:123\";\n        Story story = new Story();\n        \n        Backlog product = new Product();\n        Backlog project = new Project();\n        Iteration iteration = new Iteration();\n        iteration.setParent(project);\n        project.setParent(product);\n        story.setIteration(iteration);\n        story.setBacklog(project);\n        Set<Product> products = new HashSet<Product>();\n        products.add((Product)product);\n        team.setProducts(products);\n\n        expect(authorizationBusiness.isBacklogAccessible(0, SecurityUtil.getLoggedUser())).andReturn(true).anyTimes();\n        expect(storyDAO.get(123)).andReturn(story);\n        replayAll();\n        assertEquals(story, searchBusiness.searchByReference(term));\n        verifyAll();\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testSearchByReference_storyNotFound() {\n        User user = new User();\n        user.setId(10);\n        SecurityUtil.setLoggedUser(user);\n        \n        String term = \"story:123\";\n        expect(storyDAO.get(123)).andReturn(null);\n        replayAll();\n        assertNull(searchBusiness.searchByReference(term));\n        verifyAll();\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testSearchByReference_backlog() {\n        setAccess();\n        \n        String term = \"backlog:123\";\n        Backlog product = new Product();\n        Backlog project = new Project();\n        Backlog iteration = new Iteration();\n        iteration.setParent(project);\n        project.setParent(product);\n        Set<Product> products = new HashSet<Product>();\n        products.add((Product)product);\n        team.setProducts(products);\n        \n        expect(authorizationBusiness.isBacklogAccessible(0, SecurityUtil.getLoggedUser())).andReturn(true).anyTimes();\n        expect(backlogDAO.get(123)).andReturn(iteration);\n        replayAll();\n        assertEquals(iteration, searchBusiness.searchByReference(term));\n        verifyAll();\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testSearchByReference_backlogNotFound() {\n        User user = new User();\n        user.setId(10);\n        SecurityUtil.setLoggedUser(user);\n        \n        String term = \"backlog:123\";\n        expect(backlogDAO.get(123)).andReturn(null);\n        replayAll();\n        assertNull(searchBusiness.searchByReference(term));\n        verifyAll();\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testSearchByReference_invalidTerm1() {\n        User user = new User();\n        user.setId(10);\n        SecurityUtil.setLoggedUser(user);\n        \n        String term = \"foo:123\";\n        replayAll();\n        assertNull(searchBusiness.searchByReference(term));\n        verifyAll();\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testSearchByReference_invalidTerm2() {\n        User user = new User();\n        user.setId(10);\n        SecurityUtil.setLoggedUser(user);\n        \n        String term = \"backlog:123:foo:faa\";\n        replayAll();\n        assertNull(searchBusiness.searchByReference(term));\n        verifyAll();\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testSearchByReference_invalidTerm3() {\n        User user = new User();\n        user.setId(10);\n        SecurityUtil.setLoggedUser(user);\n        \n        String term = \"backlog:aaa\";\n        replayAll();\n        assertNull(searchBusiness.searchByReference(term));\n        verifyAll();\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testSearchByReference_invalidTermEmpty() {\n        User user = new User();\n        user.setId(10);\n        SecurityUtil.setLoggedUser(user);\n        \n        String term = \"\";\n        replayAll();\n        assertNull(searchBusiness.searchByReference(term));\n        verifyAll();\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testSearchIterations() {\n        setAccess();\n        \n        String term = \"\";\n        \n        Backlog product = new Product();\n        Backlog project = new Project();\n        Backlog iteration = new Iteration();\n        iteration.setParent(project);\n        project.setParent(product);\n        Set<Product> products = new HashSet<Product>();\n        products.add((Product)product);\n        team.setProducts(products);\n        List<Backlog> res = Arrays.asList((Backlog)(iteration));\n        \n        expect(authorizationBusiness.isBacklogAccessible(0, SecurityUtil.getLoggedUser())).andReturn(true).anyTimes();\n        expect(backlogDAO.searchByName(term, Iteration.class)).andReturn(res);\n        replayAll();\n        List<SearchResultRow> actual = searchBusiness.searchIterations(term);\n        verifyAll();\n        assertSame(res.get(0), actual.get(0).getOriginalObject());\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testSearchProjects() {\n        setAccess();\n        \n        String term = \"\";\n        \n        Backlog product = new Product();\n        Backlog project = new Project();\n        project.setParent(product);\n        Set<Product> products = new HashSet<Product>();\n        products.add((Product)product);\n        team.setProducts(products);\n        \n        List<Backlog> res = Arrays.asList((Backlog)(project));\n        \n        expect(authorizationBusiness.isBacklogAccessible(0, SecurityUtil.getLoggedUser())).andReturn(true).anyTimes();\n        expect(backlogDAO.searchByName(term, Project.class)).andReturn(res);\n        replayAll();\n        List<SearchResultRow> actual = searchBusiness.searchProjects(term);\n        verifyAll();\n        assertSame(res.get(0), actual.get(0).getOriginalObject());\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testSearchStories() {\n        setAccess();\n        \n        String term = \"\";\n        \n        Backlog product = new Product();\n        Backlog project = new Project();\n        project.setParent(product);\n        \n        Iteration iteration = new Iteration();\n        iteration.setName(\"foo\");\n        iteration.setParent(project);\n        \n        Story story = new Story();\n        story.setName(\"faa\");\n        story.setIteration(iteration);\n        story.setBacklog(project);\n        \n        Set<Product> products = new HashSet<Product>();\n        products.add((Product)product);\n        team.setProducts(products);\n        \n        List<Story> res = Arrays.asList(story);\n        expect(authorizationBusiness.isBacklogAccessible(0, SecurityUtil.getLoggedUser())).andReturn(true).anyTimes();\n        expect(storyDAO.searchByName(term)).andReturn(res);\n        replayAll();\n        List<SearchResultRow> actual = searchBusiness.searchStories(term);\n        verifyAll();\n        assertSame(story, actual.get(0).getOriginalObject());\n        assertTrue(actual.get(0).getLabel().contains(\"foo\"));\n        assertTrue(actual.get(0).getLabel().contains(\"faa\"));\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testSearchUsers() {\n        String term = \"\";\n        List<User> res = Arrays.asList(new User());\n        \n        expect(authorizationBusiness.isUserAccessible(0, SecurityUtil.getLoggedUser())).andReturn(true).anyTimes();\n        expect(userDAO.searchByName(term)).andReturn(res);\n        replayAll();\n        List<SearchResultRow> actual = searchBusiness.searchUsers(term);\n        verifyAll();\n        assertSame(res.get(0), actual.get(0).getOriginalObject());\n    }\n    \n    private void setAccess(){\n        User user = new User();\n        team = new Team();\n        Collection<User> users = new ArrayList<User>();\n        users.add(user);\n        team.setUsers(users);\n        Collection<Team> teams = new ArrayList<Team>();\n        teams.add(team);\n        user.setTeams(teams);\n        SecurityUtil.setLoggedUser(user);\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\SettingBusinessTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["SettingBusinessTest"], "AN": ["settingDAO", "testable", "setting"], "SCS_VariableDeclarator": ["settingDAO", "testable", "setting", "created", "created", "setting", "parameterSetting", "parameterSetting", "parameterSetting", "previousSetting", "parameterSetting", "parameterSetting", "parameterSetting", "setting", "setting"], "MN": ["eqSetting", "setUp", "rollback", "getTransaction", "commit", "testStoreSetting_int", "testStoreSetting_boolean", "testStoreSetting", "testSetHourReporting_SettingExists", "testSetHourReporting_SettingDoesNotExist", "testSetStoryTreeFieldOrder_doesNotExist", "testSetStoryTreeFieldOrder_exists", "testSetStoryTreeFieldOrder_incorrectString", "testSetStoryTreeFieldOrder_emptyString", "testSetBranchMetricsType_doesNotExist", "testSetBranchMetricsType_settingExist", "testGetBranchMetricsType", "testGetBranchMetricsType_noSuchSettings"], "PN": ["in", "status", "definition", "status"], "SCS_ClassReference": ["EasyMock", "testable", "", "SettingDAO", "testable", "setting", "", null, "settingDAO", "", null, "settingDAO", "EasyMock", "Setting", "created", "", null, "settingDAO", "", "testable", "", "testable", null, "", "", null, "settingDAO", "", null, "settingDAO", "EasyMock", "Setting", "created", "", null, "settingDAO", "", "testable", "", "testable", null, "", "", null, "settingDAO", "settingDAO", "", "testable", "", "setting", "", "setting", "setting", "parameterSetting", "parameterSetting", "", null, "settingDAO", "settingDAO", "", "", "testable", "", "parameterSetting", "parameterSetting", "", null, "settingDAO", "", null, "settingDAO", "", "", "testable", "", "parameterSetting", "parameterSetting", "", null, "settingDAO", "", null, "settingDAO", "", "", "testable", "", "previousSetting", "previousSetting", "parameterSetting", "parameterSetting", "", null, "settingDAO", "settingDAO", "", "", "testable", "", "IllegalArgumentException", "testable", "IllegalArgumentException", "testable", "parameterSetting", "parameterSetting", "", null, "settingDAO", "", null, "settingDAO", "", "", "testable", "", "setting", "setting", "SettingBusiness.BranchMetricsType.estimate", "parameterSetting", "parameterSetting", "", null, "settingDAO", "settingDAO", "", "", "testable", "", "setting", "setting", "SettingBusiness.BranchMetricsType.estimate", "", null, "settingDAO", "", "", "testable", "", "", null, "settingDAO", "", "", "testable", ""], "SCS_MethodInvocation": ["reportMatcher", "setTransactionManager", "createMock", "setSettingDAO", "setName", "expect", "andReturn", "getByName", "expect", "andReturn", "create", "isA", "setValue", "expect", "andReturn", "getByName", "replay", "storeSetting", "assertEquals", "retrieveByName", "getValue", "verify", "expect", "andReturn", "getByName", "expect", "andReturn", "create", "isA", "setValue", "expect", "andReturn", "getByName", "replay", "storeSetting", "assertEquals", "retrieveByName", "getValue", "verify", "expect", "andReturn", "getByName", "store", "replay", "storeSetting", "assertEquals", "getValue", "verify", "setName", "setValue", "setName", "setValue", "expect", "andReturn", "getByName", "store", "eqSetting", "replay", "setHourReporting", "verify", "setName", "setValue", "expect", "andReturn", "getByName", "expect", "andReturn", "create", "eqSetting", "replay", "setHourReporting", "verify", "setName", "setValue", "expect", "andReturn", "getByName", "expect", "andReturn", "create", "eqSetting", "replay", "setHourReporting", "verify", "setName", "setValue", "setName", "setValue", "expect", "andReturn", "getByName", "store", "eqSetting", "replay", "setStoryTreeFieldOrder", "verify", "setStoryTreeFieldOrder", "setStoryTreeFieldOrder", "setName", "setValue", "expect", "andReturn", "getByName", "expect", "andReturn", "create", "eqSetting", "replay", "setBranchMetricsType", "verify", "setName", "setValue", "toString", "setName", "setValue", "expect", "andReturn", "getByName", "store", "eqSetting", "replay", "setBranchMetricsType", "verify", "setName", "setValue", "toString", "expect", "andReturn", "getByName", "replay", "assertEquals", "getBranchMetricsType", "verify", "expect", "andReturn", "getByName", "replay", "assertEquals", "getBranchMetricsType", "verify"], "SCS_MemberReference": ["in", "testable", "settingDAO", "settingDAO", "setting", "created", "settingDAO", "settingDAO", "created", "settingDAO", "settingDAO", "setting", "setting", "settingDAO", "settingDAO", "SETTING_NAME_HOUR_REPORTING", "SETTING_NAME_HOUR_REPORTING", "setting", "SETTING_NAME_HOUR_REPORTING", "parameterSetting", "settingDAO", "settingDAO", "SETTING_NAME_HOUR_REPORTING", "SETTING_NAME_HOUR_REPORTING", "parameterSetting", "settingDAO", "settingDAO", "SETTING_NAME_HOUR_REPORTING", "SETTING_NAME_HOUR_REPORTING", "parameterSetting", "settingDAO", "settingDAO", "SETTING_NAME_STORY_TREE_FIELD_ORDER", "SETTING_NAME_STORY_TREE_FIELD_ORDER", "previousSetting", "SETTING_NAME_STORY_TREE_FIELD_ORDER", "parameterSetting", "settingDAO", "settingDAO", "SETTING_NAME_BRANCH_METRICS", "SETTING_NAME_BRANCH_METRICS", "parameterSetting", "settingDAO", "leaf", "settingDAO", "SETTING_NAME_BRANCH_METRICS", "SETTING_NAME_BRANCH_METRICS", "setting", "SETTING_NAME_BRANCH_METRICS", "parameterSetting", "settingDAO", "off", "settingDAO", "SETTING_NAME_BRANCH_METRICS", "setting", "SETTING_NAME_BRANCH_METRICS", "settingDAO", "estimate", "settingDAO", "SETTING_NAME_BRANCH_METRICS", "settingDAO", "DEFAULT_BRANCH_METRICS", "settingDAO"], "SCS_VariableDeclaration": ["Setting", "Setting", "Setting", "Setting", "Setting", "Setting", "Setting", "Setting", "Setting", "Setting", "Setting", "Setting"], "CO": ["/*\n     * An argument matcher for EasyMock. See SettingEquals.java for more information.\n     */"], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport static org.easymock.EasyMock.createMock;\nimport static org.easymock.EasyMock.expect;\nimport static org.easymock.EasyMock.replay;\nimport static org.easymock.EasyMock.verify;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotNull;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\n\nimport org.easymock.EasyMock;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.springframework.transaction.PlatformTransactionManager;\nimport org.springframework.transaction.TransactionDefinition;\nimport org.springframework.transaction.TransactionException;\nimport org.springframework.transaction.TransactionStatus;\nimport org.springframework.transaction.support.SimpleTransactionStatus;\n\nimport fi.hut.soberit.agilefant.business.SettingBusiness.BranchMetricsType;\nimport fi.hut.soberit.agilefant.business.impl.SettingBusinessImpl;\nimport fi.hut.soberit.agilefant.db.SettingDAO;\nimport fi.hut.soberit.agilefant.model.Setting;\n\npublic class SettingBusinessTest {\n\n    private SettingDAO settingDAO;  \n    private SettingBusinessImpl testable;\n    private Setting setting;\n    \n    /*\n     * An argument matcher for EasyMock. See SettingEquals.java for more information.\n     */\n    public static Setting eqSetting(Setting in){\n        EasyMock.reportMatcher(new SettingEquals(in));\n        return null;\n    }\n    \n    @Before\n    public void setUp() {\n        testable = new SettingBusinessImpl();\n        testable.setTransactionManager(new PlatformTransactionManager() {\n            @Override\n            public void rollback(TransactionStatus status) throws TransactionException {\n            }\n\n            @Override\n            public TransactionStatus getTransaction(TransactionDefinition definition) throws TransactionException {\n                return new SimpleTransactionStatus();\n            }\n\n            @Override\n            public void commit(TransactionStatus status) throws TransactionException {\n            }\n        });\n        settingDAO = createMock(SettingDAO.class);\n        testable.setSettingDAO(settingDAO);\n        setting = new Setting();\n        setting.setName(\"foo\");\n    }\n    \n    @Test\n    public void testStoreSetting_int() {\n    \texpect(settingDAO.getByName(\"int\")).andReturn(null);\n        expect(settingDAO.create(EasyMock.isA(Setting.class))).andReturn((Integer)1);\n        Setting created = new Setting();\n        created.setValue(\"15\");\n        expect(settingDAO.getByName(\"int\")).andReturn(created);\n        replay(settingDAO);\n        testable.storeSetting(\"int\", 15);\n        assertEquals(\"15\", testable.retrieveByName(\"int\").getValue());\n        verify(settingDAO);\n    }\n    \n    @Test\n    public void testStoreSetting_boolean() {\n    \texpect(settingDAO.getByName(\"bool\")).andReturn(null);\n        expect(settingDAO.create(EasyMock.isA(Setting.class))).andReturn((Integer)2);\n        Setting created = new Setting();\n        created.setValue(\"true\");\n        expect(settingDAO.getByName(\"bool\")).andReturn(created);\n        replay(settingDAO);\n        testable.storeSetting(\"bool\", true);\n        assertEquals(\"true\", testable.retrieveByName(\"bool\").getValue());\n        verify(settingDAO);\n    }\n    \n    @Test \n    public void testStoreSetting() {\n        expect(settingDAO.getByName(\"foo\")).andReturn(setting);\n        settingDAO.store(setting);\n        replay(settingDAO);\n        testable.storeSetting(\"foo\", \"new\");\n        assertEquals(\"new\", setting.getValue());\n        verify(settingDAO);\n    }\n    @Test\n    public void testSetHourReporting_SettingExists() {\n        Setting setting = new Setting();\n        Setting parameterSetting = new Setting();\n        \n        setting.setName(SettingBusinessImpl.SETTING_NAME_HOUR_REPORTING);\n        setting.setValue(\"false\");\n        \n        parameterSetting.setName(SettingBusinessImpl.SETTING_NAME_HOUR_REPORTING);\n        parameterSetting.setValue(\"true\");\n        \n        expect(settingDAO.getByName(SettingBusinessImpl.SETTING_NAME_HOUR_REPORTING)).andReturn(setting);\n        settingDAO.store(eqSetting(parameterSetting));\n        replay(settingDAO);\n        testable.setHourReporting(true);\n        verify(settingDAO);\n    }\n    \n    @Test\n    public void testSetHourReporting_SettingDoesNotExist() {\n        Setting parameterSetting = new Setting();\n    \n        parameterSetting.setName(SettingBusinessImpl.SETTING_NAME_HOUR_REPORTING);\n        parameterSetting.setValue(\"true\");\n        \n        expect(settingDAO.getByName(SettingBusinessImpl.SETTING_NAME_HOUR_REPORTING)).andReturn(null);\n        expect(settingDAO.create(eqSetting(parameterSetting))).andReturn(1);\n        replay(settingDAO);\n        testable.setHourReporting(true);\n        verify(settingDAO);\n    }\n    \n    @Test\n    public void testSetStoryTreeFieldOrder_doesNotExist() {\n        Setting parameterSetting = new Setting();\n        \n        parameterSetting.setName(SettingBusinessImpl.SETTING_NAME_HOUR_REPORTING);\n        parameterSetting.setValue(\"true\");\n        \n        expect(settingDAO.getByName(SettingBusinessImpl.SETTING_NAME_HOUR_REPORTING)).andReturn(null);\n        expect(settingDAO.create(eqSetting(parameterSetting))).andReturn(1);\n        replay(settingDAO);\n        testable.setHourReporting(true);\n        verify(settingDAO);\n    }\n    \n    @Test\n    public void testSetStoryTreeFieldOrder_exists() {\n        Setting previousSetting = new Setting();\n        Setting parameterSetting = new Setting();\n        \n        previousSetting.setName(SettingBusinessImpl.SETTING_NAME_STORY_TREE_FIELD_ORDER);\n        previousSetting.setValue(\"name\");\n        \n        parameterSetting.setName(SettingBusinessImpl.SETTING_NAME_STORY_TREE_FIELD_ORDER);\n        parameterSetting.setValue(\"state,storyPoints,labels,name,backlog\");\n        \n        expect(settingDAO.getByName(SettingBusinessImpl.SETTING_NAME_STORY_TREE_FIELD_ORDER)).andReturn(previousSetting);\n        settingDAO.store(eqSetting(parameterSetting));\n        \n        replay(settingDAO);\n        testable.setStoryTreeFieldOrder(\"state,storyPoints,labels,name,backlog\");\n        verify(settingDAO);\n    }\n    \n    @Test(expected = IllegalArgumentException.class)\n    public void testSetStoryTreeFieldOrder_incorrectString() {\n        testable.setStoryTreeFieldOrder(\"name,storyPoints,foo\");\n    }\n    \n    @Test(expected = IllegalArgumentException.class)\n    public void testSetStoryTreeFieldOrder_emptyString() {\n        testable.setStoryTreeFieldOrder(\"\");\n    }\n    \n    @Test\n    public void testSetBranchMetricsType_doesNotExist() {\n        Setting parameterSetting = new Setting();\n\n        parameterSetting.setName(SettingBusinessImpl.SETTING_NAME_BRANCH_METRICS);\n        parameterSetting.setValue(\"leaf\");\n        \n        expect(settingDAO.getByName(SettingBusinessImpl.SETTING_NAME_BRANCH_METRICS)).andReturn(null);\n        expect(settingDAO.create(eqSetting(parameterSetting))).andReturn(1);\n        \n        replay(settingDAO);\n        testable.setBranchMetricsType(BranchMetricsType.leaf);\n        verify(settingDAO);\n    }\n    \n    @Test\n    public void testSetBranchMetricsType_settingExist() {\n        Setting parameterSetting = new Setting();\n        Setting setting = new Setting();\n        \n        setting.setName(SettingBusinessImpl.SETTING_NAME_BRANCH_METRICS);\n        setting.setValue(SettingBusiness.BranchMetricsType.estimate.toString());\n        \n        parameterSetting.setName(SettingBusinessImpl.SETTING_NAME_BRANCH_METRICS);\n        parameterSetting.setValue(\"off\");\n        \n        expect(settingDAO.getByName(SettingBusinessImpl.SETTING_NAME_BRANCH_METRICS)).andReturn(setting);\n        settingDAO.store(eqSetting(parameterSetting));\n        \n        replay(settingDAO);\n        testable.setBranchMetricsType(BranchMetricsType.off);\n        verify(settingDAO);\n    }\n    \n    @Test\n    public void testGetBranchMetricsType() {\n        Setting setting = new Setting();\n        setting.setName(SettingBusinessImpl.SETTING_NAME_BRANCH_METRICS);\n        setting.setValue(SettingBusiness.BranchMetricsType.estimate.toString());\n        \n        expect(settingDAO.getByName(SettingBusinessImpl.SETTING_NAME_BRANCH_METRICS)).andReturn(setting);\n        \n        replay(settingDAO);\n        assertEquals(BranchMetricsType.estimate, testable.getBranchMetricsType());\n        verify(settingDAO);\n    }\n    \n    @Test\n    public void testGetBranchMetricsType_noSuchSettings() {\n        expect(settingDAO.getByName(SettingBusinessImpl.SETTING_NAME_BRANCH_METRICS)).andReturn(null);\n        \n        replay(settingDAO);\n        assertEquals(SettingBusiness.DEFAULT_BRANCH_METRICS, testable.getBranchMetricsType());\n        verify(settingDAO);\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\SettingEquals.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["SettingEquals"], "AN": ["expected"], "SCS_VariableDeclarator": ["expected", "name", "value"], "SCS_ConstructorDeclaration": ["SettingEquals"], "SCS_MemberReference": ["expected", "expected", "actual", "actual", "actual", "name", "value"], "MN": ["appendTo", "matches"], "PN": ["buffer", "actual"], "SCS_ClassReference": ["buffer", "expected", "expected", "expected", null, "expected", null], "SCS_MethodInvocation": ["append", "getName", "getValue", "getName", "equals", "getValue", "equals"], "SCS_VariableDeclaration": ["String", "String"], "CO": ["/**\n * An argument matcher for EasyMock. Compares two Setting objects. These kinds of\n * classes can be used in unit tests when working with EasyMock. See EasyMock \n * documentation for instructions. The section is called\n * Defining own Argument Matchers. \n * @see http://www.easymock.org/EasyMock2_0_Documentation.html\n * \n * @author Vesa Pirila / Spider\n *\n */"], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport org.easymock.IArgumentMatcher;\n\nimport fi.hut.soberit.agilefant.model.Setting;\n\n/**\n * An argument matcher for EasyMock. Compares two Setting objects. These kinds of\n * classes can be used in unit tests when working with EasyMock. See EasyMock \n * documentation for instructions. The section is called\n * Defining own Argument Matchers. \n * @see http://www.easymock.org/EasyMock2_0_Documentation.html\n * \n * @author Vesa Pirila / Spider\n *\n */\npublic class SettingEquals implements IArgumentMatcher {\n    private Setting expected;\n    \n    public SettingEquals(Setting expected){\n        this.expected = expected;\n    }\n    \n    public void appendTo(StringBuffer buffer) {\n        buffer.append(expected.getName() + \", \" + expected.getValue());\n    }\n\n    public boolean matches(Object actual) {\n        if(!(actual instanceof Setting)){\n            return false;    \n        }\n        String name = ((Setting)actual).getName();\n        String value = ((Setting)actual).getValue();\n        \n        return expected.getName().equals(name) && expected.getValue().equals(value);\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\StoryBatchBusinessTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["StoryBatchBusinessTest"], "SCS_ClassReference": ["SpringJUnit4ClassRunner", "MockContextLoader", "story1", "story2", "Arrays", "labels", "", null, "Arrays", "storyBusiness", "storyBusiness", "", "storyBusiness", "", "storyBusiness", "storyBusiness", "labelBusiness", "labelBusiness", "", "storyBatchBusiness", "", "", "story1", "", "story2", "story1", "story2", "Arrays", "", null, "Arrays", "storyBusiness", "storyBusiness", "", "storyBusiness", "", "storyBusiness", "storyBusiness", "", "storyBatchBusiness", "", "", "story1", "", "story2", "story1", "story2", "Arrays", "", null, "Arrays", "storyBusiness", "", "storyBatchBusiness", "", "", "story1", "", "story2"], "AN": ["storyBatchBusiness", "labelBusiness", "storyBusiness"], "SCS_VariableDeclarator": ["storyBatchBusiness", "labelBusiness", "storyBusiness", "story1", "story2", "storyIds", "labels", "state", "story1", "story2", "storyIds", "state", "story1", "story2", "storyIds", "labels"], "MN": ["testmodifyMultiple", "testmodifyMultiple_noLabels", "testmodifyMultiple_noState"], "PN": [], "SCS_VariableDeclaration": ["Story", "Story", "Set", "List", "StoryState", "Story", "Story", "Set", "StoryState", "Story", "Story", "Set", "List"], "SCS_MethodInvocation": ["setId", "setId", "asList", "add", "expect", "andReturn", "asList", "retrieveMultiple", "updateParentStates", "expectLastCall", "updateParentStates", "expectLastCall", "store", "store", "createStoryLabels", "createStoryLabels", "replayAll", "modifyMultiple", "verifyAll", "assertEquals", "getState", "assertEquals", "getState", "setId", "setId", "asList", "expect", "andReturn", "asList", "retrieveMultiple", "updateParentStates", "expectLastCall", "updateParentStates", "expectLastCall", "store", "store", "replayAll", "modifyMultiple", "verifyAll", "assertEquals", "getState", "assertEquals", "getState", "setId", "setId", "asList", "expect", "andReturn", "asList", "retrieveMultiple", "replayAll", "modifyMultiple", "verifyAll", "assertEquals", "getState", "assertEquals", "getState"], "SCS_MemberReference": ["IMPLEMENTED", "story1", "story2", "storyIds", "story1", "story2", "story1", "story2", "labels", "labels", "storyIds", "state", "labels", "state", "state", "IMPLEMENTED", "story1", "story2", "storyIds", "story1", "story2", "story1", "story2", "storyIds", "state", "state", "state", "story1", "story2", "storyIds", "storyIds", "labels", "NOT_STARTED", "NOT_STARTED"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.test.annotation.DirtiesContext;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n\nimport fi.hut.soberit.agilefant.business.impl.StoryBatchBusinessImpl;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.StoryState;\nimport fi.hut.soberit.agilefant.test.Mock;\nimport fi.hut.soberit.agilefant.test.MockContextLoader;\nimport fi.hut.soberit.agilefant.test.MockedTestCase;\nimport fi.hut.soberit.agilefant.test.TestedBean;\n\nimport static org.junit.Assert.*;\n\nimport static org.easymock.EasyMock.*;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(loader = MockContextLoader.class)\npublic class StoryBatchBusinessTest extends MockedTestCase{\n\n    @TestedBean\n    private StoryBatchBusinessImpl storyBatchBusiness;\n    @Mock\n    private LabelBusiness labelBusiness;\n    @Mock\n    private StoryBusiness storyBusiness;\n    \n    @Test\n    @DirtiesContext\n    public void testmodifyMultiple() {\n        Story story1 = new Story();\n        story1.setId(1);\n        Story story2 = new Story();\n        story2.setId(2);\n        \n        Set<Integer> storyIds = new HashSet<Integer>(Arrays.asList(1,2));\n        \n        List<String> labels = new ArrayList<String>();\n        labels.add(\"test\");\n        StoryState state = StoryState.IMPLEMENTED;\n        \n        expect(storyBusiness.retrieveMultiple(storyIds)).andReturn(Arrays.asList(story1, story2));\n        storyBusiness.updateParentStates(story1);\n        expectLastCall();\n        storyBusiness.updateParentStates(story2);\n        expectLastCall();\n        \n        storyBusiness.store(story1);\n        storyBusiness.store(story2);\n        \n        labelBusiness.createStoryLabels(labels, 1);\n        labelBusiness.createStoryLabels(labels, 2);\n        \n        replayAll();\n        storyBatchBusiness.modifyMultiple(storyIds, state, labels);\n        verifyAll();\n        assertEquals(state, story1.getState());\n        assertEquals(state, story2.getState());\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testmodifyMultiple_noLabels() {\n        Story story1 = new Story();\n        story1.setId(1);\n        Story story2 = new Story();\n        story2.setId(2);\n        \n        Set<Integer> storyIds = new HashSet<Integer>(Arrays.asList(1,2));\n\n        \n        StoryState state = StoryState.IMPLEMENTED;\n        \n        expect(storyBusiness.retrieveMultiple(storyIds)).andReturn(Arrays.asList(story1, story2));\n        storyBusiness.updateParentStates(story1);\n        expectLastCall();\n        storyBusiness.updateParentStates(story2);\n        expectLastCall();\n\n        storyBusiness.store(story1);\n        storyBusiness.store(story2);\n        \n        replayAll();\n        storyBatchBusiness.modifyMultiple(storyIds, state, null);\n        verifyAll();\n        assertEquals(state, story1.getState());\n        assertEquals(state, story2.getState());\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testmodifyMultiple_noState() {\n        Story story1 = new Story();\n        story1.setId(1);\n        Story story2 = new Story();\n        story2.setId(2);\n        \n        Set<Integer> storyIds = new HashSet<Integer>(Arrays.asList(1,2));\n\n        \n        List<String> labels = new ArrayList<String>();\n        \n        expect(storyBusiness.retrieveMultiple(storyIds)).andReturn(Arrays.asList(story1, story2));\n        \n        replayAll();\n        storyBatchBusiness.modifyMultiple(storyIds, null, labels);\n        verifyAll();\n\n        assertEquals(StoryState.NOT_STARTED, story1.getState());\n        assertEquals(StoryState.NOT_STARTED, story2.getState());\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\StoryBusinessCreateStoryTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["StoryBusinessCreateStoryTest"], "SCS_ClassReference": ["SpringJUnit4ClassRunner", "MockContextLoader", "blog", "proj", "blog", "", null, "backlogBusiness", "", null, "backlogBusiness", "", null, "iterationBusiness", "", null, "storyDAO", "EasyMock", "", null, "storyDAO", "storyRankBusiness", "storyRankBusiness", "storyRankBusiness", "returnedStory", "", null, "storyDAO", "dataItem", "dataItem", "dataItem", "dataItem", "storyHierarchyBusiness", "storyRankBusiness", "labelBusiness", "backlogHistoryEntryBusiness", "iterationHistoryEntryBusiness", "", null, "", "", "actual", "Story", "", "capturedStory", null, "", "capturedStory", null, "", "dataItem", "capturedStory", null, "", "dataItem", "capturedStory", null, "", "dataItem", "capturedStory", null, "", "dataItem", "capturedStory", null, "", null, "backlogBusiness", "", null, "userDAO", "", null, "userDAO", "", null, "storyDAO", "EasyMock", "", null, "storyDAO", "storyRankBusiness", "EasyMock", "Story", "EasyMock", "Backlog", "backlogHistoryEntryBusiness", "blog", "returnedStory", "", null, "storyDAO", "storyHierarchyBusiness", "", null, "backlogBusiness", "storyRankBusiness", "labelBusiness", "", null, "Arrays", "", "", "", "capturedStory", null, null, "", "capturedStory", null, null, "", "capturedStory", null, "IllegalArgumentException", null, "IllegalArgumentException", null, "ObjectNotFoundException", "", null, "backlogBusiness", null, "project", "iteration", "iteration", "story", "", null, "storyDAO", "", null, "storyDAO", "storyRankBusiness", "storyRankBusiness", "iterationHistoryEntryBusiness", "", "storyBusiness", "", "project", "story", "", null, "storyDAO", "", null, "storyDAO", "storyRankBusiness", "backlogHistoryEntryBusiness", "", "storyBusiness", "", "product", "project", "reference", "data", "data", "", null, "storyDAO", "", null, "backlogBusiness", "", null, "backlogBusiness", "", null, "storyDAO", "EasyMock", "Story", "", null, null, "storyDAO", "storyHierarchyBusiness", "labelBusiness", "", "", "data", "storyBusiness", "project", "", "product", "reference", "data", "data", "", null, "storyDAO", "", null, null, "backlogBusiness", "", null, "storyDAO", "EasyMock", "Story", "", null, null, "storyDAO", "storyHierarchyBusiness", "labelBusiness", "", "", "data", "storyBusiness", "data", null, "", "project", "reference", "data", "data", "", null, "storyDAO", "", null, null, "backlogBusiness", "", null, "storyDAO", "EasyMock", "Story", "", null, null, "storyDAO", "storyRankBusiness", "EasyMock", null, "storyHierarchyBusiness", "labelBusiness", "backlogHistoryEntryBusiness", "EasyMock", null, "", "", "data", "storyBusiness", "data", null, "", "product", "project", "reference", "data", "data", "", null, "storyDAO", "", null, "backlogBusiness", "", null, "backlogBusiness", "", null, "storyDAO", "EasyMock", "Story", "", null, null, "storyDAO", "storyHierarchyBusiness", "labelBusiness", "", "storyBusiness", "project", "", "newStory", "", "product", "reference", "data", "data", "", null, "storyDAO", "", null, null, "backlogBusiness", "", null, "storyDAO", "EasyMock", "Story", "", null, null, "storyDAO", "storyHierarchyBusiness", "labelBusiness", "", "storyBusiness", "data", null, "", "newStory", "", "project", "reference", "data", "data", "", null, "storyDAO", "", null, null, "backlogBusiness", "", null, "storyDAO", "EasyMock", "Story", "", null, null, "storyDAO", "storyRankBusiness", "EasyMock", null, "backlogHistoryEntryBusiness", "EasyMock", null, "storyHierarchyBusiness", "labelBusiness", "", "storyBusiness", "data", null, "", "newStory", "", "product", "reference", "reference", "reference", "reference", "reference", "reference", "reference", "reference", "data", "", null, "storyDAO", "", null, "backlogBusiness", "", null, "storyDAO", "EasyMock", "Story", "", null, null, "storyDAO", "", null, null, "storyDAO", "", "data", "", "data", "", "data", "", "data", "", "data", "", "data", "users", "users", "tmp", "", "returnedStory", null, "", "returnedStory", null, "t1", "t2", "tmp", null, "", "returnedStory", null, "", "returnedStory", null, null, null, "label1", "label2", "tmp", null, "tmp", null, "", "returnedStory", null, "returnedStory", "l", "l", "", "", "tmp", "i", "storyList", "originStory", "", "copyStory", null, "copyStory", "countInt", "", "st", null, "countInt"], "AN": ["storyBusiness", "iterationHistoryEntryBusiness", "backlogHistoryEntryBusiness", "storyDAO", "backlogBusiness", "iterationDAO", "userDAO", "hourEntryDAO", "iterationBusiness", "projectBusiness", "storyHistoryDAO", "storyRankBusiness", "transferObjectBusiness", "hourEntryBusiness", "taskBusiness", "storyHierarchyBusiness", "labelBusiness", "storyTreeIntegrityBusiness"], "SCS_VariableDeclarator": ["storyBusiness", "iterationHistoryEntryBusiness", "backlogHistoryEntryBusiness", "storyDAO", "backlogBusiness", "iterationDAO", "userDAO", "hourEntryDAO", "iterationBusiness", "projectBusiness", "storyHistoryDAO", "storyRankBusiness", "transferObjectBusiness", "hourEntryBusiness", "taskBusiness", "storyHierarchyBusiness", "labelBusiness", "storyTreeIntegrityBusiness", "tmp", "blog", "proj", "capturedStory", "returnedStory", "dataItem", "actual", "user1", "user2", "tmp", "labels", "blog", "capturedStory", "returnedStory", "bl", "actual", "project", "iteration", "story", "project", "story", "product", "project", "reference", "data", "product", "reference", "data", "project", "reference", "data", "product", "project", "reference", "data", "newStory", "product", "reference", "data", "newStory", "project", "reference", "data", "newStory", "product", "reference", "data", "user1", "user2", "tmp", "users", "returnedStory", "t1", "t2", "tmp", "returnedStory", "label1", "label2", "tmp", "returnedStory", "label1Exist", "label2Exist", "l", "originStory", "storyList", "i", "tmp", "copyStory", "count", "st", "countInt", "countName"], "MN": ["testCreateStory_noResponsibles", "testCreateStory_withResponsibles", "testCreateStory_nullDataItem", "testCreateStory_nullBacklogId", "testCreateStory_backlogNotFound", "createStoryToIteration", "createStoryToProject", "testCreateStoryUnderCurrentBacklog", "testCreateStoryUnderReferenceStoryWithProductBacklog", "testCreateStoryUnderReferenceStoryWithProjectBacklog", "testCreateSiblingCurrentBacklog", "testCreateSiblingUnderReferenceStoryWithProductBacklog", "testCreateSiblingUnderReferenceStoryWithProjectBacklog", "testCopyStory_withoutResponsibles", "testCopyStory_withResponsibles", "testCopyStory_withTask", "testCopyStory_withLabels", "testCopyStory_withChildStories"], "PN": [], "SCS_VariableDeclaration": ["Story", "Iteration", "Project", "Capture", "Story", "Story", "Story", "User", "User", "Story", "List", "Backlog", "Capture", "Story", "Backlog", "Story", "Project", "Iteration", "Story", "Project", "Story", "Product", "Project", "Story", "Story", "Product", "Story", "Story", "Project", "Story", "Story", "Product", "Project", "Story", "Story", "Story", "Product", "Story", "Story", "Story", "Project", "Story", "Story", "Story", "Product", "Story", "Story", "User", "User", "Story", "Set", "Story", "Task", "Task", "Story", "Story", "Label", "Label", "Story", "Story", "boolean", "boolean", "Label", "Story", "List", "Integer", "Story", "Story", "int", "Story", "Integer", "String"], "SCS_MethodInvocation": ["setId", "setId", "setParent", "expect", "andReturn", "retrieve", "expect", "andReturn", "retrieve", "expect", "andReturn", "retrieve", "expect", "andReturn", "create", "capture", "expect", "andReturn", "get", "rankToBottom", "rankToHead", "rankToBottom", "setId", "expect", "andReturn", "get", "setName", "setDescription", "setStoryPoints", "setState", "moveToTop", "rankToHead", "createStoryLabels", "updateHistory", "updateIterationHistory", "replayAll", "create", "verifyAll", "assertEquals", "getClass", "assertEquals", "getValue", "getIteration", "assertEquals", "getValue", "getBacklog", "assertEquals", "getName", "getValue", "getName", "assertEquals", "getDescription", "getValue", "getDescription", "assertEquals", "getStoryPoints", "getValue", "getStoryPoints", "assertEquals", "getState", "getValue", "getState", "expect", "andReturn", "retrieve", "expect", "andReturn", "get", "expect", "andReturn", "get", "expect", "andReturn", "create", "capture", "expect", "andReturn", "get", "rankToBottom", "isA", "isA", "updateHistory", "getId", "setId", "expect", "andReturn", "get", "moveToTop", "expect", "andReturn", "retrieve", "rankToHead", "createStoryLabels", "replayAll", "create", "asList", "verifyAll", "assertSame", "assertTrue", "getValue", "getResponsibles", "contains", "assertTrue", "getValue", "getResponsibles", "contains", "assertEquals", "getValue", "getBacklog", "create", "create", "expect", "andThrow", "retrieve", "create", "setId", "setId", "setParent", "setIteration", "expect", "andReturn", "create", "expect", "andReturn", "get", "rankToHead", "rankToBottom", "updateIterationHistory", "replayAll", "create", "verifyAll", "setId", "setBacklog", "expect", "andReturn", "create", "expect", "andReturn", "get", "rankToBottom", "updateHistory", "replayAll", "create", "verifyAll", "setId", "setId", "setBacklog", "setId", "setBacklog", "expect", "andReturn", "get", "expect", "andReturn", "retrieve", "expect", "andReturn", "retrieve", "expect", "andReturn", "create", "isA", "expect", "andReturn", "times", "get", "moveUnder", "createStoryLabels", "replayAll", "assertSame", "getBacklog", "createStoryUnder", "getId", "verifyAll", "setId", "setBacklog", "setId", "setBacklog", "expect", "andReturn", "get", "expect", "andReturn", "times", "retrieve", "expect", "andReturn", "create", "isA", "expect", "andReturn", "times", "get", "moveUnder", "createStoryLabels", "replayAll", "assertSame", "getBacklog", "createStoryUnder", "getBacklog", "getId", "verifyAll", "setId", "setBacklog", "setId", "setBacklog", "expect", "andReturn", "get", "expect", "andReturn", "times", "retrieve", "expect", "andReturn", "create", "isA", "expect", "andReturn", "times", "get", "rankToBottom", "expectLastCall", "once", "moveUnder", "createStoryLabels", "updateHistory", "expectLastCall", "once", "replayAll", "assertSame", "getBacklog", "createStoryUnder", "getBacklog", "getId", "verifyAll", "setId", "setId", "setBacklog", "setId", "setBacklog", "expect", "andReturn", "get", "expect", "andReturn", "retrieve", "expect", "andReturn", "retrieve", "expect", "andReturn", "create", "isA", "expect", "andReturn", "times", "get", "moveAfter", "createStoryLabels", "replayAll", "createStorySibling", "getId", "assertSame", "getBacklog", "verifyAll", "setId", "setBacklog", "setId", "setBacklog", "expect", "andReturn", "get", "expect", "andReturn", "times", "retrieve", "expect", "andReturn", "create", "isA", "expect", "andReturn", "times", "get", "moveAfter", "createStoryLabels", "replayAll", "createStorySibling", "getBacklog", "getId", "assertSame", "getBacklog", "verifyAll", "setId", "setBacklog", "setId", "setBacklog", "expect", "andReturn", "get", "expect", "andReturn", "times", "retrieve", "expect", "andReturn", "create", "isA", "expect", "andReturn", "times", "get", "rankToBottom", "expectLastCall", "once", "updateHistory", "expectLastCall", "once", "moveAfter", "createStoryLabels", "replayAll", "createStorySibling", "getBacklog", "getId", "assertSame", "getBacklog", "verifyAll", "setId", "setBacklog", "setName", "setId", "setTreeRank", "setStoryPoints", "setStoryValue", "setState", "setDescription", "setId", "expect", "andReturn", "get", "expect", "andReturn", "retrieve", "expect", "andReturn", "create", "isA", "expect", "andReturn", "times", "get", "expect", "andReturn", "times", "get", "assertSame", "getName", "assertSame", "getTreeRank", "assertSame", "getStoryPoints", "assertSame", "getStoryValue", "assertSame", "getState", "assertSame", "getDescription", "add", "add", "setResponsibles", "assertTrue", "getResponsibles", "contains", "assertTrue", "getResponsibles", "contains", "setName", "setStory", "getTasks", "add", "assertTrue", "getTasks", "size", "assertSame", "getTasks", "iterator", "next", "getName", "setName", "setName", "getLabels", "add", "getLabels", "add", "assertTrue", "getLabels", "size", "getLabels", "getName", "getName", "assertTrue", "assertTrue", "setName", "toString", "add", "setChildren", "assertTrue", "getChildren", "size", "getChildren", "toString", "assertTrue", "getName", "compareTo", "toString"], "SCS_MemberReference": ["proj", "blog", "blog", "blog", "capturedStory", "tmp", "tmp", "proj", "tmp", "blog", "tmp", "proj", "returnedStory", "STARTED", "returnedStory", "returnedStory", "blog", "storyBusiness", "dataItem", "blog", "proj", "blog", "user1", "user2", "capturedStory", "tmp", "returnedStory", "returnedStory", "bl", "returnedStory", "bl", "labels", "storyBusiness", "labels", "actual", "returnedStory", "user1", "user2", "blog", "storyBusiness", "storyBusiness", "storyBusiness", "project", "iteration", "story", "story", "story", "iteration", "story", "project", "story", "project", "story", "story", "story", "project", "story", "product", "project", "reference", "product", "project", "data", "data", "reference", "project", "data", "product", "product", "reference", "product", "data", "data", "reference", "product", "data", "project", "project", "reference", "project", "data", "data", "project", "data", "reference", "project", "data", "product", "project", "reference", "product", "project", "data", "data", "reference", "data", "project", "product", "product", "reference", "product", "data", "data", "reference", "data", "product", "project", "project", "reference", "project", "data", "data", "project", "data", "reference", "data", "project", "product", "STARTED", "reference", "reference", "product", "data", "data", "STARTED", "user1", "user2", "users", "tmp", "user1", "user2", "t1", "tmp", "t2", "tmp", "label1", "label1", "label2", "tmp", "label1Exist", "label2Exist", "label1Exist", "label2Exist", "i", "i", "tmp", "storyList", "originStory", "count", "count"], "CO": ["//storyRankBusiness.rankToBottom(story, project);", "// Case 1: Reference story's backlog is product (or project) and current view is project", "// Assert: Newly created story's backlog should be project", "// Case 2: Reference story's backlog is product and current view is product", "// Assert: Newly created story's backlog should be product ", "// Case 3: Reference story's backlog is project and current view is product", "// Assert: Newly created story's backlog should be project  ", "// Case 1: Reference story's backlog is product (or project) and current view is project", "// Assert: Newly created sibling story's backlog should be project", "// Case 2: Reference story's backlog is product and current view is product", "// Assert: Newly created sibling story's backlog should be product ", "// Case 3: Reference story's backlog is project and current view is project", "// Assert: Newly created sibling story's backlog should be project ", "// Copy new story", "// Copy story", "// Check if labels get copied over", "// Create stories", "//tmp.setParent(originStory); TODO: promperror if we set the child's parent here", "// Check if child stories get copied over"], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport static org.easymock.EasyMock.expect;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertSame;\nimport static org.junit.Assert.assertTrue;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport org.easymock.Capture;\nimport org.easymock.EasyMock;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.test.annotation.DirtiesContext;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n\nimport fi.hut.soberit.agilefant.business.impl.StoryBusinessImpl;\nimport fi.hut.soberit.agilefant.db.HourEntryDAO;\nimport fi.hut.soberit.agilefant.db.IterationDAO;\nimport fi.hut.soberit.agilefant.db.StoryDAO;\nimport fi.hut.soberit.agilefant.db.UserDAO;\nimport fi.hut.soberit.agilefant.db.history.StoryHistoryDAO;\nimport fi.hut.soberit.agilefant.exception.ObjectNotFoundException;\nimport fi.hut.soberit.agilefant.model.Backlog;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.Label;\nimport fi.hut.soberit.agilefant.model.Product;\nimport fi.hut.soberit.agilefant.model.Project;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.StoryState;\nimport fi.hut.soberit.agilefant.model.Task;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.test.Mock;\nimport fi.hut.soberit.agilefant.test.MockContextLoader;\nimport fi.hut.soberit.agilefant.test.MockedTestCase;\nimport fi.hut.soberit.agilefant.test.TestedBean;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(loader = MockContextLoader.class)\n@SuppressWarnings(\"unused\")\npublic class StoryBusinessCreateStoryTest extends MockedTestCase {\n    \n    @TestedBean\n    private StoryBusinessImpl storyBusiness;\n    \n    @Mock\n    private IterationHistoryEntryBusiness iterationHistoryEntryBusiness;\n    @Mock\n    private BacklogHistoryEntryBusiness backlogHistoryEntryBusiness;\n    @Mock(strict=true)\n    private StoryDAO storyDAO;\n    @Mock\n    private BacklogBusiness backlogBusiness;\n    @Mock\n    private IterationDAO iterationDAO;\n    @Mock\n    private UserDAO userDAO;\n    @Mock\n    private HourEntryDAO hourEntryDAO;\n    @Mock\n    private IterationBusiness iterationBusiness;\n    @Mock\n    private ProjectBusiness projectBusiness;\n    @Mock\n    private StoryHistoryDAO storyHistoryDAO;\n    @Mock\n    private StoryRankBusiness storyRankBusiness;\n    @Mock\n    private TransferObjectBusiness transferObjectBusiness;\n    @Mock\n    private HourEntryBusiness hourEntryBusiness;\n    @Mock\n    private TaskBusiness taskBusiness;\n    @Mock\n    private StoryHierarchyBusiness storyHierarchyBusiness;\n    @Mock\n    private LabelBusiness labelBusiness;\n    @Mock\n    private StoryTreeIntegrityBusiness storyTreeIntegrityBusiness;\n    \n    @Test\n    @DirtiesContext\n    public void testCreateStory_noResponsibles() {\n        Story tmp = new Story();\n        Iteration blog = new Iteration();\n        blog.setId(5);\n        Project proj = new Project();\n        proj.setId(12);\n        blog.setParent(proj);\n        expect(backlogBusiness.retrieve(5)).andReturn(blog);\n        expect(backlogBusiness.retrieve(5)).andReturn(blog);\n        expect(iterationBusiness.retrieve(5)).andReturn(blog);\n        \n        Capture<Story> capturedStory = new Capture<Story>();\n        \n        expect(storyDAO.create(EasyMock.capture(capturedStory))).andReturn(88);\n        expect(storyDAO.get(88)).andReturn(tmp);\n        storyRankBusiness.rankToBottom(tmp, proj);\n        storyRankBusiness.rankToHead(tmp, blog);\n        storyRankBusiness.rankToBottom(tmp, proj);\n        \n        Story returnedStory = new Story();\n        returnedStory.setId(88);\n        expect(storyDAO.get(88)).andReturn(returnedStory);\n        \n        Story dataItem = new Story();\n        dataItem.setName(\"Foofaa\");\n        dataItem.setDescription(\"Foofaa\");\n        dataItem.setStoryPoints(22);\n        dataItem.setState(StoryState.STARTED);\n        \n        storyHierarchyBusiness.moveToTop(returnedStory);\n        storyRankBusiness.rankToHead(returnedStory, blog);\n        labelBusiness.createStoryLabels(null, 88);\n        backlogHistoryEntryBusiness.updateHistory(12);\n        iterationHistoryEntryBusiness.updateIterationHistory(5);\n        \n        replayAll();\n        Story actual = this.storyBusiness.create(dataItem, 5, 5, null, null);\n        verifyAll();\n        \n        assertEquals(actual.getClass(), Story.class);\n        assertEquals(blog, capturedStory.getValue().getIteration());\n        assertEquals(proj, capturedStory.getValue().getBacklog());\n        \n        assertEquals(dataItem.getName(), capturedStory.getValue().getName());\n        assertEquals(dataItem.getDescription(), capturedStory.getValue().getDescription());\n        assertEquals(dataItem.getStoryPoints(), capturedStory.getValue().getStoryPoints());\n        assertEquals(dataItem.getState(), capturedStory.getValue().getState());\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testCreateStory_withResponsibles() {\n        User user1 = new User();\n        User user2 = new User();\n        Story tmp = new Story();\n        List<String> labels = new ArrayList<String>();\n        Backlog blog = new Project();\n        expect(backlogBusiness.retrieve(5)).andReturn(blog);\n        expect(userDAO.get(2)).andReturn(user1);\n        expect(userDAO.get(23)).andReturn(user2);\n        \n        Capture<Story> capturedStory = new Capture<Story>();\n        \n        expect(storyDAO.create(EasyMock.capture(capturedStory))).andReturn(88);\n        expect(storyDAO.get(88)).andReturn(tmp);\n        \n        storyRankBusiness.rankToBottom(EasyMock.isA(Story.class), EasyMock.isA(Backlog.class));\n        \n        backlogHistoryEntryBusiness.updateHistory(blog.getId());\n        \n        Story returnedStory = new Story();\n        returnedStory.setId(88);\n        expect(storyDAO.get(88)).andReturn(returnedStory);\n        \n        storyHierarchyBusiness.moveToTop(returnedStory);\n        Backlog bl = null;\n        expect(backlogBusiness.retrieve(5)).andReturn(bl);\n        storyRankBusiness.rankToHead(returnedStory, bl); \n        labelBusiness.createStoryLabels(labels, 88);\n        \n        replayAll();\n        Story actual = this.storyBusiness.create(new Story(), 5, null,\n                new HashSet<Integer>(Arrays.asList(2,23)), labels);\n        verifyAll();\n        \n        assertSame(actual, returnedStory);\n        assertTrue(capturedStory.getValue().getResponsibles().contains(user1));\n        assertTrue(capturedStory.getValue().getResponsibles().contains(user2));\n        assertEquals(blog, capturedStory.getValue().getBacklog());\n    }\n    \n    @Test(expected = IllegalArgumentException.class)\n    public void testCreateStory_nullDataItem() {\n        this.storyBusiness.create(null, 123, null, new HashSet<Integer>(), null);\n    }\n    \n    @Test(expected = IllegalArgumentException.class)\n    public void testCreateStory_nullBacklogId() {\n        this.storyBusiness.create(new Story(), null, null, new HashSet<Integer>(), null);\n    }\n    \n    @Test(expected = ObjectNotFoundException.class)\n    @DirtiesContext\n    public void testCreateStory_backlogNotFound() {\n        expect(backlogBusiness.retrieve(5)).andThrow(new ObjectNotFoundException());\n        this.storyBusiness.create(new Story(), 222, null, new HashSet<Integer>(), null);\n    }\n    \n    @Test\n    @DirtiesContext\n    public void createStoryToIteration() {\n        Project project = new Project();\n        project.setId(1);\n        \n        Iteration iteration = new Iteration();\n        iteration.setId(2);\n        iteration.setParent(project);\n        \n        Story story = new Story();\n        story.setIteration(iteration);\n        \n        expect(storyDAO.create(story)).andReturn(new Integer(1));\n        expect(storyDAO.get(1)).andReturn(story);\n        \n        //storyRankBusiness.rankToBottom(story, project);\n        storyRankBusiness.rankToHead(story, iteration);\n        storyRankBusiness.rankToBottom(story, project);\n        \n        iterationHistoryEntryBusiness.updateIterationHistory(2);\n        \n        replayAll();\n        storyBusiness.create(story);\n        verifyAll();\n    }\n    \n    @Test\n    @DirtiesContext\n    public void createStoryToProject() {\n        Project project = new Project();\n        project.setId(1);\n        \n        Story story = new Story();\n        story.setBacklog(project);\n        \n        expect(storyDAO.create(story)).andReturn(new Integer(1));\n        expect(storyDAO.get(1)).andReturn(story);\n        \n        storyRankBusiness.rankToBottom(story, project);\n        \n        backlogHistoryEntryBusiness.updateHistory(1);\n        \n        replayAll();\n        storyBusiness.create(story);\n        verifyAll();\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testCreateStoryUnderCurrentBacklog() {\n        Product product = new Product();\n        product.setId(10);\n        \n        Project project = new Project();\n        project.setId(11);\n        \n        Story reference = new Story();\n        reference.setBacklog(product);\n       \n        Story data = new Story();\n        data.setId(2);\n        data.setBacklog(project);\n        \n        expect(storyDAO.get(1)).andReturn(reference);\n\n        expect(backlogBusiness.retrieve(10)).andReturn(product);\n        expect(backlogBusiness.retrieve(11)).andReturn(project);\n        \n        expect(storyDAO.create(EasyMock.isA(Story.class))).andReturn(new Integer(2));\n        expect(storyDAO.get(2)).andReturn(data).times(2);\n        \n        storyHierarchyBusiness.moveUnder(data, reference);\n        labelBusiness.createStoryLabels(null, 2);\n        \n        replayAll();\n        // Case 1: Reference story's backlog is product (or project) and current view is project\n        // Assert: Newly created story's backlog should be project\n        assertSame(data.getBacklog(), project);\n        storyBusiness.createStoryUnder(1, project.getId(), data, null, null);\n        \n        verifyAll();\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testCreateStoryUnderReferenceStoryWithProductBacklog() {\n        Product product = new Product();\n        product.setId(10);\n        \n        Story reference = new Story();\n        reference.setBacklog(product);\n        \n        Story data = new Story();\n        data.setId(2);\n        data.setBacklog(product);\n        expect(storyDAO.get(1)).andReturn(reference);\n\n        expect(backlogBusiness.retrieve(10)).andReturn(product).times(2);\n                \n        expect(storyDAO.create(EasyMock.isA(Story.class))).andReturn(new Integer(2));\n        expect(storyDAO.get(2)).andReturn(data).times(2);\n        \n        storyHierarchyBusiness.moveUnder(data, reference);\n        labelBusiness.createStoryLabels(null, 2);\n        \n        replayAll();\n        // Case 2: Reference story's backlog is product and current view is product\n        // Assert: Newly created story's backlog should be product \n        assertSame(data.getBacklog(), product);\n        storyBusiness.createStoryUnder(1, data.getBacklog().getId(), data, null, null);\n        verifyAll();\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testCreateStoryUnderReferenceStoryWithProjectBacklog() {\n        Project project = new Project();\n        project.setId(11);\n        \n        Story reference = new Story();\n        reference.setBacklog(project);\n        \n        Story data = new Story();\n        data.setId(2);\n        data.setBacklog(project);\n        \n        expect(storyDAO.get(1)).andReturn(reference);\n        expect(backlogBusiness.retrieve(11)).andReturn(project).times(2);\n        expect(storyDAO.create(EasyMock.isA(Story.class))).andReturn(new Integer(2));\n        expect(storyDAO.get(2)).andReturn(data).times(2);\n        \n        storyRankBusiness.rankToBottom(data, project);\n        EasyMock.expectLastCall().once();\n        \n        storyHierarchyBusiness.moveUnder(data, reference);\n        labelBusiness.createStoryLabels(null, 2);\n        \n        backlogHistoryEntryBusiness.updateHistory(11);\n        EasyMock.expectLastCall().once();\n       \n        replayAll();\n        // Case 3: Reference story's backlog is project and current view is product\n        // Assert: Newly created story's backlog should be project  \n        assertSame(data.getBacklog(), project);\n        storyBusiness.createStoryUnder(1, data.getBacklog().getId(), data, null, null);\n        \n        verifyAll();\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testCreateSiblingCurrentBacklog() { \n        Product product = new Product();\n        product.setId(10);\n        \n        Project project = new Project();\n        project.setId(11);\n\n        \n        Story reference = new Story();\n        reference.setBacklog(product);\n        \n        Story data = new Story();\n        data.setId(2);\n        data.setBacklog(project);\n        \n        expect(storyDAO.get(1)).andReturn(reference);\n        \n        expect(backlogBusiness.retrieve(10)).andReturn(product);\n        expect(backlogBusiness.retrieve(11)).andReturn(project);\n        \n        expect(storyDAO.create(EasyMock.isA(Story.class))).andReturn(new Integer(2));\n        \n        expect(storyDAO.get(2)).andReturn(data).times(2);\n        storyHierarchyBusiness.moveAfter(data, reference);\n        labelBusiness.createStoryLabels(null, 2);\n        \n        replayAll();\n        \n        Story newStory = storyBusiness.createStorySibling(1, project.getId(), data, null, null);\n        \n        // Case 1: Reference story's backlog is product (or project) and current view is project\n        // Assert: Newly created sibling story's backlog should be project\n        assertSame(newStory.getBacklog(), project);\n        \n        verifyAll();\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testCreateSiblingUnderReferenceStoryWithProductBacklog() { \n        Product product = new Product();\n        product.setId(10);\n        \n        Story reference = new Story();\n        reference.setBacklog(product);\n        \n        Story data = new Story();\n        data.setId(2);\n        data.setBacklog(product);\n        expect(storyDAO.get(1)).andReturn(reference);\n\n        expect(backlogBusiness.retrieve(10)).andReturn(product).times(2);\n                \n        expect(storyDAO.create(EasyMock.isA(Story.class))).andReturn(new Integer(2));\n        expect(storyDAO.get(2)).andReturn(data).times(2);\n        \n        storyHierarchyBusiness.moveAfter(data, reference);\n        labelBusiness.createStoryLabels(null, 2);\n        \n        replayAll();\n        \n        Story newStory = storyBusiness.createStorySibling(1, data.getBacklog().getId(), data, null, null);\n        \n        // Case 2: Reference story's backlog is product and current view is product\n        // Assert: Newly created sibling story's backlog should be product \n        assertSame(newStory.getBacklog(), product);\n        \n        verifyAll();\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testCreateSiblingUnderReferenceStoryWithProjectBacklog() { \n        Project project = new Project();\n        project.setId(11);\n        \n        Story reference = new Story();\n        reference.setBacklog(project);\n          \n        Story data = new Story();\n        data.setId(2);\n        data.setBacklog(project);\n        \n        expect(storyDAO.get(1)).andReturn(reference);\n        \n        expect(backlogBusiness.retrieve(11)).andReturn(project).times(2);\n                \n        expect(storyDAO.create(EasyMock.isA(Story.class))).andReturn(new Integer(2));\n        expect(storyDAO.get(2)).andReturn(data).times(2);\n\n        storyRankBusiness.rankToBottom(data, project);\n        EasyMock.expectLastCall().once();\n        \n        backlogHistoryEntryBusiness.updateHistory(11);\n        EasyMock.expectLastCall().once();\n        \n        storyHierarchyBusiness.moveAfter(data, reference);\n        labelBusiness.createStoryLabels(null, 2);\n        \n        replayAll();\n        \n        Story newStory = storyBusiness.createStorySibling(1, data.getBacklog().getId(), data, null, null);\n        \n        // Case 3: Reference story's backlog is project and current view is project\n        // Assert: Newly created sibling story's backlog should be project \n        assertSame(newStory.getBacklog(), project);\n        \n        verifyAll();\n    }\n    \n    \n    @Test\n    @DirtiesContext\n    public void testCopyStory_withoutResponsibles() {\n        Product product = new Product();\n        product.setId(10);\n        \n        Story reference = new Story();\n        reference.setBacklog(product);\n        reference.setName(\"origin\");\n        reference.setId(1);\n        reference.setTreeRank(5);\n        reference.setStoryPoints(4);\n        reference.setStoryValue(10);\n        reference.setState(StoryState.STARTED);\n        reference.setDescription(\"Foofaa\");\n               \n        // Copy new story\n        Story data = new Story(reference);\n        data.setId(2);\n        \n        expect(storyDAO.get(1)).andReturn(reference);\n        \n        expect(backlogBusiness.retrieve(10)).andReturn(product);\n        expect(storyDAO.create(EasyMock.isA(Story.class))).andReturn(new Integer(2));\n        expect(storyDAO.get(2)).andReturn(data).times(2);\n        expect(storyDAO.get(2)).andReturn(data).times(2);\n        assertSame(data.getName(), \"origin\");\n        assertSame(data.getTreeRank(), 4);\n        assertSame(data.getStoryPoints(), 4);\n        assertSame(data.getStoryValue(), 10);\n        assertSame(data.getState(), StoryState.STARTED);\n        assertSame(data.getDescription(), \"Foofaa\");\n       }\n    \n    @Test\n    @DirtiesContext\n    public void testCopyStory_withResponsibles() {\n        User user1 = new User();\n        User user2 = new User();\n        Story tmp = new Story();\n        \n        Set<User> users = new HashSet<User>();\n        users.add(user1);\n        users.add(user2);\n        tmp.setResponsibles(users);\n        \n        Story returnedStory = new Story(tmp);\n        assertTrue(returnedStory.getResponsibles().contains(user1));\n        assertTrue(returnedStory.getResponsibles().contains(user2));\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testCopyStory_withTask() {\n        Task t1 = new Task();\n        t1.setName(\"task1\");\n        Task t2 = new Task(t1);\n        Story tmp = new Story();\n        t2.setStory(tmp);\n        \n        tmp.getTasks().add(t2);\n        \n        Story returnedStory = new Story(tmp);\n        assertTrue(returnedStory.getTasks().size() == 1);\n        assertSame(returnedStory.getTasks().iterator().next().getName(),\"task1\");\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testCopyStory_withLabels() {\n        Label label1 = new Label();\n        label1.setName(\"label1\");\n        Label label2 = new Label(label1);\n        label2.setName(\"label2\");\n        \n        // Copy story\n        Story tmp = new Story();\n        tmp.getLabels().add(label1);\n        tmp.getLabels().add(label2);\n        Story returnedStory = new Story(tmp);\n        \n        // Check if labels get copied over\n        assertTrue(returnedStory.getLabels().size() == 2);\n        boolean label1Exist = false;\n        boolean label2Exist = false;\n        for( Label l : returnedStory.getLabels())\n        {\n            if(l.getName() == \"label1\")\n                label1Exist = true;\n            if(l.getName() == \"label2\")\n                label2Exist = true;\n        }\n        assertTrue(label1Exist);\n        assertTrue(label2Exist);\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testCopyStory_withChildStories() {\n        \n        // Create stories\n        Story originStory = new Story();\n        \n        List<Story> storyList = new ArrayList<Story>();\n        for(Integer i=0; i<10; i++)\n        {\n            Story tmp = new Story();\n            tmp.setName(i.toString());\n            //tmp.setParent(originStory); TODO: promperror if we set the child's parent here\n            storyList.add(tmp);\n        }\n        \n        originStory.setChildren(storyList);\n        Story copyStory = new Story(originStory);\n                \n        // Check if child stories get copied over\n        assertTrue(copyStory.getChildren().size() == 10);\n        int count = 0;\n        for( Story st : copyStory.getChildren())\n        {\n            Integer countInt = count;\n            String countName = countInt.toString();\n            assertTrue(st.getName().compareTo(countInt.toString()) == 0);\n            count++;\n        }\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\StoryBusinessTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["StoryBusinessTest"], "AN": ["storyBusiness", "storyDAO", "iterationDAO", "userDAO", "iterationBusiness", "backlogBusiness", "blheBusiness", "iheBusiness", "storyRankBusiness", "transferObjectBusiness", "hourEntryDAO", "taskBusiness", "hourEntryBusiness", "storyHierarchyBusiness", "backlog", "iteration", "story1", "story2", "assignedUser", "storyInIteration", "storyInProject", "storyInProduct", "storyPriorityUpdated", "storyBacklogUpdated"], "SCS_VariableDeclarator": ["storyBusiness", "storyDAO", "iterationDAO", "userDAO", "iterationBusiness", "backlogBusiness", "blheBusiness", "iheBusiness", "storyRankBusiness", "transferObjectBusiness", "hourEntryDAO", "taskBusiness", "hourEntryBusiness", "storyHierarchyBusiness", "backlog", "iteration", "story1", "story2", "assignedUser", "storyInIteration", "storyInProject", "storyInProduct", "storyPriorityUpdated", "storyBacklogUpdated", "iter", "proj", "prod", "backlog", "user1", "user2", "users", "dataItem", "actual", "task1", "task2", "task1", "task2", "actual", "t", "newBacklog", "users", "actual", "task", "he", "child", "storyParent", "child", "task", "task", "parent", "child", "backlog", "blog", "story", "ref", "blog", "story", "ref", "ite", "story", "ref", "ite", "story", "ref", "blog", "story", "ref", "proj1", "iter", "proj2", "iter2", "story1", "story2", "blog", "story", "story", "actual", "story", "story", "actual", "story", "storyTo", "story", "backlog", "rank", "story", "backlog", "story", "backlog", "rank", "child", "story", "child"], "MN": ["setUp", "setUp_dependencies", "setUpStorysProjectResponsiblesData", "replayAll", "verifyAll", "store_createMockStoryBusiness", "moveStoryAway", "testStore_updateResponsibles", "testStore_tasksToDone", "testStore_dontSetTasksToDone", "testStore_nullStoryId", "testStore_noSuchStory", "testStore_updateBacklogAndClearResponsibles", "testDelete_withTasks", "testDelete_withHourEntries", "testDeleteAndUpdateHistory", "testDelete_deleteChoices_withChildren", "testDelete_deleteChoices_withChildren_deleteChildren", "testDelete_taskChoice_move", "testDelete_taskChoice_delete", "testDelete_hourEntryChoice_move", "testDelete_hourEntryChoice_delete", "testDelete_onlyChildRemoved", "testRankStoryUnder", "testRankStoryOver", "checksThatStorysIterationMatches_rankUnder", "checksThatStorysIterationMatches_rankOver", "testRankStoryUnder_null", "testRankStoryUnder_invalidbacklogs", "testRankStory_underNull", "testRankStoryToTop", "testRankStoryToTop_noBacklog", "testRankStoryToBottom", "testRankStoryToBottom_noBacklog", "testRetrieveStoryTO", "testUpdateRanks_noChildren_HasRank", "testUpdateRanks_noChildren_NoRank", "testUpdateRanks_children_HasRank", "testForceDelete"], "PN": ["story", "backlog"], "SCS_MemberReference": ["backlog", "iteration", "story1", "story2", "storyPriorityUpdated", "storyBacklogUpdated", "storyBusiness", "backlogBusiness", "backlogBusiness", "storyDAO", "storyDAO", "iterationDAO", "iterationDAO", "userDAO", "userDAO", "blheBusiness", "blheBusiness", "iheBusiness", "iheBusiness", "storyRankBusiness", "storyRankBusiness", "transferObjectBusiness", "transferObjectBusiness", "hourEntryDAO", "hourEntryDAO", "taskBusiness", "taskBusiness", "hourEntryBusiness", "hourEntryBusiness", "storyHierarchyBusiness", "storyHierarchyBusiness", "proj", "prod", "assignedUser", "storyInIteration", "storyInProject", "storyInProduct", "iter", "proj", "proj", "prod", "backlogBusiness", "storyDAO", "iterationDAO", "userDAO", "iheBusiness", "blheBusiness", "transferObjectBusiness", "hourEntryDAO", "taskBusiness", "hourEntryBusiness", "storyRankBusiness", "storyHierarchyBusiness", "backlogBusiness", "storyDAO", "iterationDAO", "userDAO", "iheBusiness", "blheBusiness", "transferObjectBusiness", "hourEntryDAO", "taskBusiness", "hourEntryBusiness", "storyRankBusiness", "storyHierarchyBusiness", "storyBusiness", "storyBacklogUpdated", "backlogBusiness", "backlogBusiness", "storyDAO", "storyDAO", "userDAO", "userDAO", "iterationBusiness", "iterationBusiness", "blheBusiness", "blheBusiness", "user1", "user2", "storyInIteration", "user1", "user2", "PENDING", "dataItem", "backlog", "users", "storyBacklogUpdated", "BLOCKED", "PENDING", "iteration", "task1", "task2", "story1", "story1", "task1", "task2", "story1", "BLOCKED", "BLOCKED", "iteration", "task1", "task2", "story1", "story1", "story1", "BLOCKED", "users", "storyInIteration", "newBacklog", "storyBacklogUpdated", "task", "story1", "he", "story1", "storyInIteration", "storyInIteration", "storyInIteration", "storyParent", "child", "storyParent", "storyInIteration", "storyInIteration", "DELETE", "DELETE", "DELETE", "MOVE", "storyParent", "iteration", "storyInIteration", "child", "storyInIteration", "storyInIteration", "DELETE", "DELETE", "DELETE", "DELETE", "task", "task", "task", "storyInIteration", "storyInIteration", "MOVE", "task", "MOVE", "storyInIteration", "storyInIteration", "DELETE", "MOVE", "storyInIteration", "storyInIteration", "MOVE", "storyInIteration", "storyInIteration", "DELETE", "child", "parent", "backlog", "backlog", "parent", "backlog", "parent", "child", "child", "blog", "blog", "story", "blog", "ref", "story", "ref", "blog", "blog", "blog", "story", "blog", "ref", "story", "ref", "blog", "ite", "ite", "story", "ite", "ref", "story", "ref", "ite", "ite", "story", "ite", "ref", "story", "ref", "blog", "story", "ref", "proj1", "proj2", "proj1", "proj2", "story1", "story2", "proj1", "blog", "story", "story", "backlog", "story", "backlog", "actual", "story", "story", "story", "backlog", "story", "backlog", "actual", "story", "story", "story1", "story1", "storyTo", "story1", "storyTo", "backlog", "rank", "story", "backlog", "story", "backlog", "story", "backlog", "rank", "child", "story", "story", "story", "child", "DELETE", "story"], "SCS_ClassReference": ["iteration", "story1", "", "BacklogBusiness", "storyBusiness", "", "StoryDAO", "storyBusiness", "", "IterationDAO", "storyBusiness", "", "UserDAO", "storyBusiness", "", "BacklogHistoryEntryBusiness", "storyBusiness", "", "IterationHistoryEntryBusiness", "storyBusiness", "", "StoryRankBusiness", "storyBusiness", "", "TransferObjectBusiness", "storyBusiness", "", "HourEntryDAO", "storyBusiness", "", "TaskBusiness", "storyBusiness", "", "HourEntryBusiness", "storyBusiness", "", "StoryHierarchyBusiness", "storyBusiness", "iter", "proj", "assignedUser", "storyInIteration", "storyInProduct", "storyInProject", "storyInIteration", "storyInIteration", "storyInProject", "storyInProduct", "", "", "", "BacklogBusiness", "storyBusiness", "", "StoryDAO", "storyBusiness", "", "UserDAO", "storyBusiness", "", "IterationHistoryEntryBusiness", "storyBusiness", "", "BacklogHistoryEntryBusiness", "storyBusiness", null, "storyInIteration", "Arrays", "", null, "storyDAO", "storyInIteration", "", null, "userDAO", "", null, "userDAO", "storyDAO", "EasyMock", "Story", "dataItem", "dataItem", "dataItem", "dataItem", "blheBusiness", "storyInIteration", null, "", "storyBusiness", "storyInIteration", "Arrays", "", "", "actual", "", "actual", "", "dataItem", "actual", "", "dataItem", "actual", "", "dataItem", "actual", "", "dataItem", "actual", "", "task1", "task1", "task2", "task2", "story1", "story1", "Arrays", "", null, "storyDAO", "story1", "storyDAO", "taskBusiness", "taskBusiness", "iheBusiness", "story1", null, "", "storyBusiness", "story1", "", null, "task1", "task1", "task2", "task2", "story1", "story1", "Arrays", "", null, "storyDAO", "story1", "storyDAO", "", "storyBusiness", "story1", "", "actual", "", "t", "IllegalArgumentException", null, "storyBusiness", "ObjectNotFoundException", null, "", null, "storyDAO", "", "storyBusiness", "", null, "newBacklog", "Arrays", "storyInIteration", "", null, "storyDAO", "storyInIteration", "", null, "backlogBusiness", "newBacklog", "storyDAO", "EasyMock", "Story", "blheBusiness", "storyInIteration", null, "", "storyBusiness", "storyInIteration", "newBacklog", "", "", "actual", null, "", "OperationNotPermittedException", "story1", null, "storyBusiness", "OperationNotPermittedException", "story1", null, "storyBusiness", "", null, "storyDAO", "storyInIteration", "storyDAO", "blheBusiness", "storyInIteration", null, "iheBusiness", "storyInIteration", null, "", "storyBusiness", "storyInIteration", "", "storyParent", "child", "storyInIteration", "storyInIteration", null, "storyHierarchyBusiness", "hourEntryBusiness", "storyInIteration", "storyDAO", "", "storyBusiness", "", "child", "", "storyInIteration", null, "", "child", "storyInIteration", "child", "child", "child", "storyInIteration", null, "storyInIteration", "blheBusiness", "child", null, "iheBusiness", "iteration", "hourEntryBusiness", "child", "hourEntryBusiness", "storyInIteration", "storyDAO", "child", "storyDAO", "", "storyBusiness", "", "storyInIteration", null, "", "storyInIteration", null, "", null, "taskBusiness", "storyInIteration", null, "storyDAO", "", "storyBusiness", "", "", "storyInIteration", null, "storyInIteration", null, "hourEntryBusiness", "task", "storyInIteration", "taskBusiness", "task", "storyDAO", "", "storyBusiness", "", "", "task", "", "storyInIteration", null, "storyInIteration", null, "hourEntryBusiness", "storyInIteration", "storyInIteration", "storyDAO", "", "storyBusiness", "", "", "storyInIteration", null, "storyInIteration", null, "hourEntryBusiness", "storyInIteration", "storyDAO", "", "storyBusiness", "", "", "storyInIteration", null, "backlog", "parent", null, "child", "child", "parent", "storyRankBusiness", "storyHierarchyBusiness", "storyDAO", "", "storyBusiness", "", "", "parent", null, "story", "ref", "storyRankBusiness", "", "storyBusiness", "", "story", "ref", "storyRankBusiness", "", "storyBusiness", "", "story", "ref", "storyRankBusiness", "", "storyBusiness", "", "story", "ref", "storyRankBusiness", "", "storyBusiness", "", "IllegalArgumentException", "ref", "", "storyBusiness", "", "IllegalArgumentException", "iter", "iter2", "story1", "story2", "", "storyBusiness", "", "IllegalArgumentException", "story", "", "storyBusiness", "", "storyRankBusiness", "", "storyBusiness", "", "", "IllegalArgumentException", "storyBusiness", "storyRankBusiness", "", "storyBusiness", "", "", "IllegalArgumentException", "storyBusiness", "", null, "storyDAO", "story1", "", null, "transferObjectBusiness", "", null, "storyDAO", "story1", "", null, "hourEntryDAO", "story1", "", "", "storyBusiness", "story1", "", "story", "story", null, "", "storyBusiness", "", "story", "storyRankBusiness", "", "storyBusiness", "", "story", "story", null, "story", null, "storyRankBusiness", "", "storyBusiness", "", "story", "child", "story", "Arrays", "story", "Arrays", "story", "Arrays", "taskBusiness", "EasyMock", "Task", "EasyMock", "", null, "hourEntryBusiness", "story", "storyDAO", "", "storyBusiness", "", "", "child", "", "story", null], "SCS_MethodInvocation": ["setId", "setId", "createMock", "setBacklogBusiness", "createMock", "setStoryDAO", "createMock", "setIterationDAO", "createMock", "setUserDAO", "createMock", "setBacklogHistoryEntryBusiness", "createMock", "setIterationHistoryEntryBusiness", "createMock", "setStoryRankBusiness", "createMock", "setTransferObjectBusiness", "createMock", "setHourEntryDAO", "createMock", "setTaskBusiness", "createMock", "setHourEntryBusiness", "createMock", "setStoryHierarchyBusiness", "setParent", "setParent", "setId", "setId", "setId", "setId", "setIteration", "setBacklog", "setBacklog", "setBacklog", "replay", "verify", "createMock", "setBacklogBusiness", "createMock", "setStoryDAO", "createMock", "setUserDAO", "createMock", "setIterationHistoryEntryBusiness", "createMock", "setBacklogHistoryEntryBusiness", "store_createMockStoryBusiness", "getBacklog", "asList", "expect", "andReturn", "get", "getId", "expect", "andReturn", "get", "expect", "andReturn", "get", "store", "isA", "setName", "setDescription", "setStoryPoints", "setState", "updateHistory", "getBacklog", "getId", "replayAll", "store", "getId", "asList", "verifyAll", "assertSame", "getBacklog", "assertEquals", "getResponsibles", "assertEquals", "getName", "getName", "assertEquals", "getDescription", "getDescription", "assertEquals", "getStoryPoints", "getStoryPoints", "assertEquals", "getState", "getState", "assertFalse", "setId", "setState", "setId", "setState", "setIteration", "setTasks", "asList", "expect", "andReturn", "get", "getId", "store", "setTaskToDone", "setTaskToDone", "updateIterationHistory", "getIteration", "getId", "replayAll", "store", "getId", "verifyAll", "store_createMockStoryBusiness", "setId", "setState", "setId", "setState", "setIteration", "setTasks", "asList", "expect", "andReturn", "get", "getId", "store", "replayAll", "store", "getId", "verifyAll", "getTasks", "assertEquals", "getState", "store_createMockStoryBusiness", "store", "store_createMockStoryBusiness", "expect", "andReturn", "get", "replayAll", "store", "verifyAll", "store_createMockStoryBusiness", "setId", "asList", "setResponsibles", "expect", "andReturn", "get", "getId", "expect", "andReturn", "retrieve", "getId", "store", "isA", "updateHistory", "getBacklog", "getId", "replayAll", "store", "getId", "getId", "verifyAll", "assertEquals", "getResponsibles", "size", "assertTrue", "getTasks", "add", "delete", "getHourEntries", "add", "delete", "expect", "andReturn", "get", "getId", "remove", "updateHistory", "getBacklog", "getId", "updateIterationHistory", "getIteration", "getId", "replayAll", "deleteAndUpdateHistory", "getId", "verifyAll", "setBacklog", "setParent", "setParent", "getChildren", "add", "updateChildrenTreeRanks", "deleteAll", "getHourEntries", "remove", "replayAll", "delete", "assertEquals", "getParent", "assertTrue", "getChildren", "isEmpty", "verifyAll", "setBacklog", "getBacklog", "setIteration", "setId", "setParent", "getChildren", "add", "setIteration", "updateHistory", "getBacklog", "getId", "updateIterationHistory", "getId", "deleteAll", "getHourEntries", "deleteAll", "getHourEntries", "remove", "getId", "remove", "replayAll", "delete", "assertTrue", "getChildren", "isEmpty", "verifyAll", "getTasks", "add", "expect", "andReturn", "move", "getBacklog", "getId", "remove", "replayAll", "delete", "verifyAll", "assertTrue", "getTasks", "isEmpty", "getTasks", "add", "moveToBacklog", "getHourEntries", "getBacklog", "delete", "getId", "remove", "replayAll", "delete", "verifyAll", "assertNull", "getStory", "assertTrue", "getTasks", "isEmpty", "getHourEntries", "add", "moveToBacklog", "getHourEntries", "getBacklog", "remove", "replayAll", "delete", "verifyAll", "assertTrue", "getHourEntries", "isEmpty", "getHourEntries", "add", "deleteAll", "getHourEntries", "remove", "replayAll", "delete", "verifyAll", "assertTrue", "getHourEntries", "isEmpty", "setId", "getChildren", "add", "setParent", "setBacklog", "setBacklog", "rankToBottom", "updateChildrenTreeRanks", "remove", "replayAll", "delete", "verifyAll", "assertTrue", "getChildren", "isEmpty", "setBacklog", "setBacklog", "rankBelow", "replayAll", "rankStoryUnder", "verifyAll", "setBacklog", "setBacklog", "rankAbove", "replayAll", "rankStoryOver", "verifyAll", "setIteration", "setIteration", "rankBelow", "replayAll", "rankStoryUnder", "verifyAll", "setIteration", "setIteration", "rankAbove", "replayAll", "rankStoryOver", "verifyAll", "setBacklog", "replayAll", "rankStoryUnder", "verifyAll", "setParent", "setParent", "setBacklog", "setBacklog", "replayAll", "rankStoryUnder", "verifyAll", "setBacklog", "replayAll", "rankStoryUnder", "verifyAll", "rankToHead", "replayAll", "rankStoryToTop", "verifyAll", "assertSame", "rankStoryToTop", "rankToBottom", "replayAll", "rankStoryToBottom", "verifyAll", "assertSame", "rankStoryToBottom", "expect", "andReturn", "get", "getId", "expect", "andReturn", "constructStoryTO", "expect", "andReturn", "calculateMetrics", "getId", "expect", "andReturn", "calculateSumByStory", "getId", "replayAll", "assertEquals", "retrieveStoryWithMetrics", "getId", "verifyAll", "setBacklog", "getStoryRanks", "add", "replayAll", "updateStoryRanks", "verifyAll", "setBacklog", "rankToBottom", "replayAll", "updateStoryRanks", "verifyAll", "setBacklog", "getStoryRanks", "add", "getChildren", "add", "removeStoryRanks", "replayAll", "updateStoryRanks", "verifyAll", "setId", "setParent", "setChildren", "asList", "setTasks", "asList", "setHourEntries", "asList", "delete", "isA", "same", "expectLastCall", "times", "deleteAll", "getHourEntries", "remove", "replayAll", "forceDelete", "verifyAll", "assertNull", "getParent", "assertEquals", "getChildren", "size"], "SCS_VariableDeclaration": ["Iteration", "Project", "Product", "Backlog", "User", "User", "Set", "Story", "Story", "Task", "Task", "Task", "Task", "Story", "Task", "Backlog", "Set", "Story", "Task", "StoryHourEntry", "Story", "Story", "Story", "Task", "Task", "Story", "Story", "Backlog", "Backlog", "Story", "Story", "Backlog", "Story", "Story", "Iteration", "Story", "Story", "Iteration", "Story", "Story", "Backlog", "Story", "Story", "Project", "Iteration", "Project", "Iteration", "Story", "Story", "Backlog", "Story", "Story", "Story", "Story", "Story", "Story", "Story", "StoryTO", "Story", "Project", "StoryRank", "Story", "Project", "Story", "Project", "StoryRank", "Story", "Story", "Story"], "CO": ["//            @Override", "//            public void updateStoryPriority(Story story, int insertAtPriority) {", "//                storyPriorityUpdated = true;", "//            }", "//        storyRankBusiness.removeStoryRanks(storyInIteration);", "//        storyRankBusiness.removeStoryRanks(storyInIteration);", "//        storyRankBusiness.removeStoryRanks(child);", "//        storyRankBusiness.removeStoryRanks(storyInIteration);", "//        expect(storyDAO.get(2333)).andReturn(child);", "//        assertNull(child.getParent());", "//        storyRankBusiness.removeStoryRanks(storyInIteration);", "//        storyRankBusiness.removeStoryRanks(storyInIteration);", "//        storyRankBusiness.removeStoryRanks(storyInIteration);", "//        storyRankBusiness.removeStoryRanks(storyInIteration);", "//        storyRankBusiness.removeStoryRanks(child);", "/**\n     * TEST FORCE DELETING\n     */"], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.Set;\n\nimport org.easymock.EasyMock;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport fi.hut.soberit.agilefant.business.impl.StoryBusinessImpl;\nimport fi.hut.soberit.agilefant.db.HourEntryDAO;\nimport fi.hut.soberit.agilefant.db.IterationDAO;\nimport fi.hut.soberit.agilefant.db.StoryDAO;\nimport fi.hut.soberit.agilefant.db.UserDAO;\nimport fi.hut.soberit.agilefant.exception.ObjectNotFoundException;\nimport fi.hut.soberit.agilefant.exception.OperationNotPermittedException;\nimport fi.hut.soberit.agilefant.model.Backlog;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.Product;\nimport fi.hut.soberit.agilefant.model.Project;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.StoryHourEntry;\nimport fi.hut.soberit.agilefant.model.StoryRank;\nimport fi.hut.soberit.agilefant.model.StoryState;\nimport fi.hut.soberit.agilefant.model.Task;\nimport fi.hut.soberit.agilefant.model.TaskState;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.transfer.StoryTO;\nimport fi.hut.soberit.agilefant.util.ChildHandlingChoice;\nimport fi.hut.soberit.agilefant.util.HourEntryHandlingChoice;\nimport fi.hut.soberit.agilefant.util.StoryMetrics;\nimport fi.hut.soberit.agilefant.util.TaskHandlingChoice;\n\nimport static org.junit.Assert.*;\n\nimport static org.easymock.EasyMock.*;\n\npublic class StoryBusinessTest {\n\n    StoryBusinessImpl storyBusiness;\n    \n    StoryDAO storyDAO;\n    IterationDAO iterationDAO;\n    UserDAO userDAO;\n    IterationHistoryEntryBusiness iterationBusiness;\n    \n    BacklogBusiness backlogBusiness;\n    BacklogHistoryEntryBusiness blheBusiness;\n    IterationHistoryEntryBusiness iheBusiness;\n    StoryRankBusiness storyRankBusiness;\n    TransferObjectBusiness transferObjectBusiness;\n    HourEntryDAO hourEntryDAO;\n    TaskBusiness taskBusiness;\n    HourEntryBusiness hourEntryBusiness;\n    StoryHierarchyBusiness storyHierarchyBusiness;\n    \n    \n    Backlog backlog;\n    Iteration iteration;\n    Story story1;\n    Story story2;\n    \n    User assignedUser; \n    \n    Story storyInIteration;\n    Story storyInProject;\n    Story storyInProduct;\n    \n    Boolean storyPriorityUpdated;\n    Boolean storyBacklogUpdated;\n    \n    @Before\n    public void setUp() {\n        backlog = new Product();\n        iteration = new Iteration();\n        iteration.setId(5834);\n        story1 = new Story();\n        story1.setId(666);\n        story2 = new Story();\n        \n        storyPriorityUpdated = false;\n        storyBacklogUpdated = false;\n    }\n    \n    @Before\n    public void setUp_dependencies() {\n        storyBusiness = new StoryBusinessImpl();\n        \n        backlogBusiness = createMock(BacklogBusiness.class);\n        storyBusiness.setBacklogBusiness(backlogBusiness);\n        \n        storyDAO = createMock(StoryDAO.class);\n        storyBusiness.setStoryDAO(storyDAO);\n        \n        iterationDAO = createMock(IterationDAO.class);\n        storyBusiness.setIterationDAO(iterationDAO);\n\n        userDAO = createMock(UserDAO.class);\n        storyBusiness.setUserDAO(userDAO);\n        \n        blheBusiness = createMock(BacklogHistoryEntryBusiness.class);\n        storyBusiness.setBacklogHistoryEntryBusiness(blheBusiness);\n        \n        iheBusiness = createMock(IterationHistoryEntryBusiness.class);\n        storyBusiness.setIterationHistoryEntryBusiness(iheBusiness);\n        \n        storyRankBusiness = createMock(StoryRankBusiness.class);\n        storyBusiness.setStoryRankBusiness(storyRankBusiness);\n        \n        transferObjectBusiness = createMock(TransferObjectBusiness.class);\n        storyBusiness.setTransferObjectBusiness(transferObjectBusiness);\n        \n        hourEntryDAO = createMock(HourEntryDAO.class);\n        storyBusiness.setHourEntryDAO(hourEntryDAO);\n        \n        taskBusiness = createMock(TaskBusiness.class);\n        storyBusiness.setTaskBusiness(taskBusiness);\n        \n        hourEntryBusiness = createMock(HourEntryBusiness.class);\n        storyBusiness.setHourEntryBusiness(hourEntryBusiness);\n        \n        storyHierarchyBusiness = createMock(StoryHierarchyBusiness.class);\n        storyBusiness.setStoryHierarchyBusiness(storyHierarchyBusiness);\n    }\n    \n    @Before\n    public void setUpStorysProjectResponsiblesData() {\n        Iteration iter = new Iteration();\n        Project proj = new Project();\n        Product prod = new Product();\n        iter.setParent(proj);\n        proj.setParent(prod);\n        \n        assignedUser = new User();\n        assignedUser.setId(2233);\n        \n        storyInIteration = new Story();\n        storyInProject = new Story();\n        storyInProduct = new Story();\n        \n        storyInIteration.setId(868);\n        storyInProduct.setId(951);\n        storyInProject.setId(3);\n        \n        storyInIteration.setIteration(iter);\n        storyInIteration.setBacklog(proj);\n        storyInProject.setBacklog(proj);\n        storyInProduct.setBacklog(prod);\n    }\n\n    private void replayAll() {\n        replay(backlogBusiness, storyDAO, iterationDAO, userDAO, iheBusiness, blheBusiness, transferObjectBusiness, hourEntryDAO, taskBusiness, hourEntryBusiness, storyRankBusiness, storyHierarchyBusiness);\n    }\n    \n    private void verifyAll() {\n        verify(backlogBusiness, storyDAO, iterationDAO, userDAO, iheBusiness, blheBusiness, transferObjectBusiness, hourEntryDAO, taskBusiness, hourEntryBusiness, storyRankBusiness, storyHierarchyBusiness);\n    }\n\n    \n    private void store_createMockStoryBusiness() {       \n        this.storyBusiness = new StoryBusinessImpl() {\n            @Override\n            public void moveStoryAway(Story story, Backlog backlog) {\n                storyBacklogUpdated = true;\n            }\n            \n//            @Override\n//            public void updateStoryPriority(Story story, int insertAtPriority) {\n//                storyPriorityUpdated = true;\n//            }\n        };\n        backlogBusiness = createMock(BacklogBusiness.class);\n        storyBusiness.setBacklogBusiness(backlogBusiness);\n        \n        storyDAO = createMock(StoryDAO.class);\n        storyBusiness.setStoryDAO(storyDAO);\n        \n        userDAO = createMock(UserDAO.class);\n        storyBusiness.setUserDAO(userDAO);\n        \n        iterationBusiness = createMock(IterationHistoryEntryBusiness.class);\n        storyBusiness.setIterationHistoryEntryBusiness(iterationBusiness);\n        \n        blheBusiness = createMock(BacklogHistoryEntryBusiness.class);\n        storyBusiness.setBacklogHistoryEntryBusiness(blheBusiness);\n    }\n    \n    @Test\n    public void testStore_updateResponsibles() {\n        this.store_createMockStoryBusiness();\n        \n        Backlog backlog = storyInIteration.getBacklog();\n        User user1 = new User();\n        User user2 = new User();\n        Set<User> users = new HashSet<User>(Arrays.asList(user1, user2));\n        \n        expect(storyDAO.get(storyInIteration.getId())).andReturn(storyInIteration);\n        expect(userDAO.get(123)).andReturn(user1);\n        expect(userDAO.get(222)).andReturn(user2);\n        storyDAO.store(EasyMock.isA(Story.class));\n        \n        Story dataItem = new Story();\n        dataItem.setName(\"Foo item\");\n        dataItem.setDescription(\"Fubar\");\n        dataItem.setStoryPoints(333);\n        dataItem.setState(StoryState.PENDING);\n        \n        blheBusiness.updateHistory(storyInIteration.getBacklog().getId());\n        \n        replayAll();\n        Story actual = storyBusiness.store(storyInIteration.getId(),\n                dataItem, null, new HashSet<Integer>(Arrays.asList(123, 222)), false);\n        verifyAll();\n        \n        assertSame(\"The backlogs don't match\", backlog, actual.getBacklog());\n        assertEquals(\"The responsibles don't match\", users, actual.getResponsibles());\n        \n        assertEquals(dataItem.getName(), actual.getName());\n        assertEquals(dataItem.getDescription(), actual.getDescription());\n        assertEquals(dataItem.getStoryPoints(), actual.getStoryPoints());\n        assertEquals(dataItem.getState(), actual.getState());\n        \n        assertFalse(storyBacklogUpdated);\n    }\n    \n    @Test\n    public void testStore_tasksToDone() {\n        Task task1 = new Task();\n        task1.setId(11);\n        task1.setState(TaskState.BLOCKED);\n        \n        Task task2 = new Task();\n        task2.setId(12);\n        task2.setState(TaskState.PENDING);\n        \n        story1.setIteration(iteration);\n        story1.setTasks(new HashSet<Task>(Arrays.asList(task1, task2)));\n        \n        expect(storyDAO.get(story1.getId())).andReturn(story1);\n        storyDAO.store(story1);\n        \n        taskBusiness.setTaskToDone(task1);\n        taskBusiness.setTaskToDone(task2);\n        iheBusiness.updateIterationHistory(story1.getIteration().getId());\n        \n        replayAll();\n        storyBusiness.store(story1.getId(), story1, null, null, true);\n        verifyAll();\n    }\n    \n    @Test\n    public void testStore_dontSetTasksToDone() {\n        this.store_createMockStoryBusiness();\n        Task task1 = new Task();\n        task1.setId(11);\n        task1.setState(TaskState.BLOCKED);\n        \n        Task task2 = new Task();\n        task2.setId(12);\n        task2.setState(TaskState.BLOCKED);\n        \n        story1.setIteration(iteration);\n        story1.setTasks(new HashSet<Task>(Arrays.asList(task1, task2)));\n        \n        expect(storyDAO.get(story1.getId())).andReturn(story1);\n        storyDAO.store(story1);\n        replayAll();\n        Story actual = storyBusiness.store(story1.getId(), story1, null, null, false);\n        verifyAll();\n        \n        for (Task t : actual.getTasks()) {\n            assertEquals(TaskState.BLOCKED, t.getState());\n        }\n    }\n    \n    \n    @Test(expected = IllegalArgumentException.class)\n    public void testStore_nullStoryId() {\n        this.store_createMockStoryBusiness();\n        storyBusiness.store(null, new Story(), 123, new HashSet<Integer>(), false);\n    }\n    \n    \n    @Test(expected = ObjectNotFoundException.class)\n    public void testStore_noSuchStory() {\n        this.store_createMockStoryBusiness();\n        expect(storyDAO.get(222)).andReturn(null);\n        replayAll();\n        storyBusiness.store(222, new Story(), 123, new HashSet<Integer>(), false);\n        verifyAll();\n    }\n    \n    \n    @Test\n    public void testStore_updateBacklogAndClearResponsibles() {\n        this.store_createMockStoryBusiness();\n        Backlog newBacklog = new Project();\n        newBacklog.setId(123);\n        Set<User> users = new HashSet<User>(Arrays.asList(new User(), new User()));\n        storyInIteration.setResponsibles(users);\n        \n        expect(storyDAO.get(storyInIteration.getId())).andReturn(storyInIteration);\n        expect(backlogBusiness.retrieve(newBacklog.getId())).andReturn(newBacklog);\n        \n        storyDAO.store(EasyMock.isA(Story.class));\n        \n        blheBusiness.updateHistory(storyInIteration.getBacklog().getId());\n        \n        replayAll();\n        Story actual = storyBusiness.store(storyInIteration.getId(),\n                new Story(), newBacklog.getId(), new HashSet<Integer>(), false);\n        verifyAll();\n        \n        assertEquals(0, actual.getResponsibles().size());\n        \n        assertTrue(storyBacklogUpdated);\n    }\n    \n    \n \n    \n    @Test(expected = OperationNotPermittedException.class)\n    public void testDelete_withTasks() {\n        Task task = new Task();\n        story1.getTasks().add(task);\n        storyBusiness.delete(story1);\n    }\n    \n    @Test(expected = OperationNotPermittedException.class)\n    public void testDelete_withHourEntries() {\n        StoryHourEntry he = new StoryHourEntry();\n        story1.getHourEntries().add(he);\n        storyBusiness.delete(story1);\n    }\n\n    @Test\n    public void testDeleteAndUpdateHistory() {\n        expect(storyDAO.get(storyInIteration.getId())).andReturn(storyInIteration);\n//        storyRankBusiness.removeStoryRanks(storyInIteration);\n        storyDAO.remove(storyInIteration);\n        blheBusiness.updateHistory(storyInIteration.getBacklog().getId());\n        iheBusiness.updateIterationHistory(storyInIteration.getIteration().getId());\n        replayAll();\n        \n        storyBusiness.deleteAndUpdateHistory(storyInIteration.getId(), null, null, null, null);\n        verifyAll();\n    }\n    \n    @Test\n    public void testDelete_deleteChoices_withChildren() {\n        Story child = new Story();\n        Story storyParent = new Story();\n        storyParent.setBacklog(new Product());\n        child.setParent(storyInIteration);\n        storyInIteration.setParent(storyParent);\n        storyInIteration.getChildren().add(child);\n\n        storyHierarchyBusiness.updateChildrenTreeRanks(storyParent);\n        hourEntryBusiness.deleteAll(storyInIteration.getHourEntries());\n//        storyRankBusiness.removeStoryRanks(storyInIteration);\n        storyDAO.remove(storyInIteration);\n        replayAll();\n        storyBusiness.delete(storyInIteration,\n                TaskHandlingChoice.DELETE,\n                HourEntryHandlingChoice.DELETE,\n                HourEntryHandlingChoice.DELETE,\n                ChildHandlingChoice.MOVE);\n        assertEquals(storyParent, child.getParent());\n        assertTrue(storyInIteration.getChildren().isEmpty());\n        verifyAll();\n    }\n    \n    @Test\n    public void testDelete_deleteChoices_withChildren_deleteChildren() {\n        Story child = new Story();\n        child.setBacklog(storyInIteration.getBacklog());\n        child.setIteration(iteration);\n        child.setId(2333);\n        child.setParent(storyInIteration);\n        storyInIteration.getChildren().add(child);\n        storyInIteration.setIteration(null);\n\n        blheBusiness.updateHistory(child.getBacklog().getId());\n        iheBusiness.updateIterationHistory(iteration.getId());\n        \n        hourEntryBusiness.deleteAll(child.getHourEntries());\n        hourEntryBusiness.deleteAll(storyInIteration.getHourEntries());\n        \n//        storyRankBusiness.removeStoryRanks(child);\n//        storyRankBusiness.removeStoryRanks(storyInIteration);\n        \n//        expect(storyDAO.get(2333)).andReturn(child);\n        \n        storyDAO.remove(child.getId());\n        storyDAO.remove(storyInIteration);\n        \n        replayAll();\n        storyBusiness.delete(storyInIteration,\n                TaskHandlingChoice.DELETE,\n                HourEntryHandlingChoice.DELETE,\n                HourEntryHandlingChoice.DELETE,\n                ChildHandlingChoice.DELETE);\n//        assertNull(child.getParent());\n        assertTrue(storyInIteration.getChildren().isEmpty());\n        verifyAll();\n    }\n\n    @Test\n    public void testDelete_taskChoice_move() {\n        Task task = new Task();\n        storyInIteration.getTasks().add(task);\n        expect(taskBusiness.move(task, storyInIteration.getBacklog().getId(), null)).andReturn(task);\n//        storyRankBusiness.removeStoryRanks(storyInIteration);\n        storyDAO.remove(storyInIteration);\n        replayAll();\n        storyBusiness.delete(storyInIteration, TaskHandlingChoice.MOVE, null, null, null);\n        verifyAll();\n        assertTrue(storyInIteration.getTasks().isEmpty());\n    }\n\n    @Test\n    public void testDelete_taskChoice_delete() {\n        Task task = new Task();\n        storyInIteration.getTasks().add(task);\n        hourEntryBusiness.moveToBacklog(task.getHourEntries(), storyInIteration.getBacklog());\n        taskBusiness.delete(task.getId(), HourEntryHandlingChoice.MOVE);\n//        storyRankBusiness.removeStoryRanks(storyInIteration);\n        storyDAO.remove(storyInIteration);\n        replayAll();\n        storyBusiness.delete(storyInIteration, TaskHandlingChoice.DELETE, null, HourEntryHandlingChoice.MOVE, null);\n        verifyAll();\n        assertNull(task.getStory());\n        assertTrue(storyInIteration.getTasks().isEmpty());\n    }\n    \n    @Test\n    public void testDelete_hourEntryChoice_move() {\n        storyInIteration.getHourEntries().add(new StoryHourEntry());\n        hourEntryBusiness.moveToBacklog(storyInIteration.getHourEntries(), storyInIteration.getBacklog());\n//        storyRankBusiness.removeStoryRanks(storyInIteration);\n        storyDAO.remove(storyInIteration);\n        replayAll();\n        storyBusiness.delete(storyInIteration, null, HourEntryHandlingChoice.MOVE, null, null);\n        verifyAll();\n        assertTrue(storyInIteration.getHourEntries().isEmpty());\n    }\n    @Test\n    public void testDelete_hourEntryChoice_delete() {\n        storyInIteration.getHourEntries().add(new StoryHourEntry());\n        hourEntryBusiness.deleteAll(storyInIteration.getHourEntries());\n//        storyRankBusiness.removeStoryRanks(storyInIteration);\n        storyDAO.remove(storyInIteration);\n        replayAll();\n        storyBusiness.delete(storyInIteration, null, HourEntryHandlingChoice.DELETE, null, null);\n        verifyAll();\n        assertTrue(storyInIteration.getHourEntries().isEmpty());\n    }\n    \n    @Test\n    public void testDelete_onlyChildRemoved() {\n        Story parent = new Story();\n        Story child = new Story();\n        Backlog backlog = new Project();\n        backlog.setId(1);\n        \n        parent.getChildren().add(child);\n        child.setParent(parent);\n        child.setBacklog(backlog);\n        parent.setBacklog(backlog);\n        \n        storyRankBusiness.rankToBottom(parent, backlog);\n//        storyRankBusiness.removeStoryRanks(child);\n        storyHierarchyBusiness.updateChildrenTreeRanks(parent);\n        storyDAO.remove(child);\n        replayAll();\n        storyBusiness.delete(child, null, null, null, null);\n        verifyAll();\n        assertTrue(parent.getChildren().isEmpty());\n        \n    }\n\n    @Test\n    public void testRankStoryUnder() {\n        Backlog blog = new Project();\n        Story story = new Story();\n        story.setBacklog(blog);\n        Story ref = new Story();\n        ref.setBacklog(blog);\n        storyRankBusiness.rankBelow(story, blog, ref);\n        replayAll();\n        storyBusiness.rankStoryUnder(story, ref, blog);\n        verifyAll();\n    }\n    \n    @Test\n    public void testRankStoryOver() {\n        Backlog blog = new Project();\n        Story story = new Story();\n        story.setBacklog(blog);\n        Story ref = new Story();\n        ref.setBacklog(blog);\n        storyRankBusiness.rankAbove(story, blog, ref);\n        replayAll();\n        storyBusiness.rankStoryOver(story, ref, blog);\n        verifyAll();\n    }\n\n    @Test\n    public void checksThatStorysIterationMatches_rankUnder() {\n        Iteration ite = new Iteration();\n        Story story = new Story();\n        story.setIteration(ite);\n        Story ref = new Story();\n        ref.setIteration(ite);\n        storyRankBusiness.rankBelow(story, ite, ref);\n        replayAll();\n        storyBusiness.rankStoryUnder(story, ref, null);\n        verifyAll();\n    }\n    \n    @Test\n    public void checksThatStorysIterationMatches_rankOver() {\n        Iteration ite = new Iteration();\n        Story story = new Story();\n        story.setIteration(ite);\n        Story ref = new Story();\n        ref.setIteration(ite);\n        storyRankBusiness.rankAbove(story, ite, ref);\n        replayAll();\n        storyBusiness.rankStoryOver(story, ref, null);\n        verifyAll();\n    }\n    \n    \n    @Test(expected=IllegalArgumentException.class)\n    public void testRankStoryUnder_null() {\n        Backlog blog = new Iteration();\n        Story story = null;\n        Story ref = new Story();\n        ref.setBacklog(blog);\n        \n        replayAll();\n        storyBusiness.rankStoryUnder(story, ref, null);\n        verifyAll();\n    }\n    \n    @Test(expected=IllegalArgumentException.class)\n    public void testRankStoryUnder_invalidbacklogs() {\n        Project proj1 = new Project();\n        Iteration iter = new Iteration();\n        iter.setParent(proj1);\n        \n        Project proj2 = new Project();\n        Iteration iter2 = new Iteration();\n        iter2.setParent(proj2);\n        \n        Story story1 = new Story();\n        story1.setBacklog(proj1);\n        Story story2 = new Story();\n        story2.setBacklog(proj2);\n        \n        replayAll();\n        storyBusiness.rankStoryUnder(story1, story2, proj1);\n        verifyAll();\n    }\n    \n    \n    @Test(expected=IllegalArgumentException.class)\n    public void testRankStory_underNull() {\n        Backlog blog = new Iteration();\n        Story story = new Story();\n        story.setBacklog(blog);\n        replayAll();\n        storyBusiness.rankStoryUnder(story, null, null);\n        verifyAll();\n    }\n    \n    @Test\n    public void testRankStoryToTop() {\n        Story story = new Story();\n        storyRankBusiness.rankToHead(story, backlog);\n        replayAll();\n        Story actual = storyBusiness.rankStoryToTop(story, backlog);\n        verifyAll();\n        assertSame(actual, story);\n    }\n    \n    @Test(expected = IllegalArgumentException.class)\n    public void testRankStoryToTop_noBacklog() {\n        Story story = new Story();\n        storyBusiness.rankStoryToTop(story, null);\n    }\n    \n    @Test\n    public void testRankStoryToBottom() {\n        Story story = new Story();\n        storyRankBusiness.rankToBottom(story, backlog);\n        replayAll();\n        Story actual = storyBusiness.rankStoryToBottom(story, backlog);\n        verifyAll();\n        assertSame(actual, story);\n    }\n    \n    @Test(expected = IllegalArgumentException.class)\n    public void testRankStoryToBottom_noBacklog() {\n        Story story = new Story();\n        storyBusiness.rankStoryToBottom(story, null);\n    }\n    \n    @Test\n    public void testRetrieveStoryTO() {\n        StoryTO storyTo = new StoryTO(story1);\n        expect(storyDAO.get(story1.getId())).andReturn(story1);\n        expect(transferObjectBusiness.constructStoryTO(story1)).andReturn(storyTo);\n        expect(storyDAO.calculateMetrics(story1.getId())).andReturn(new StoryMetrics());\n        expect(hourEntryDAO.calculateSumByStory(story1.getId())).andReturn(100l);\n        replayAll();\n        assertEquals(storyTo, storyBusiness.retrieveStoryWithMetrics(story1.getId()));\n        verifyAll();\n    }\n    \n    @Test\n    public void testUpdateRanks_noChildren_HasRank() {\n        Story story = new Story();\n        Project backlog = new Project();\n        story.setBacklog(backlog);\n        StoryRank rank = new StoryRank();\n        story.getStoryRanks().add(rank);\n        replayAll();\n        storyBusiness.updateStoryRanks(story);\n        verifyAll();\n    }\n    \n    @Test\n    public void testUpdateRanks_noChildren_NoRank() {\n        Story story = new Story();\n        Project backlog = new Project();\n        story.setBacklog(backlog);\n        storyRankBusiness.rankToBottom(story, backlog);\n        replayAll();\n        storyBusiness.updateStoryRanks(story);\n        verifyAll();\n    }\n    \n    @Test\n    public void testUpdateRanks_children_HasRank() {\n        Story story = new Story();\n        Project backlog = new Project();\n        story.setBacklog(backlog);\n        StoryRank rank = new StoryRank();\n        story.getStoryRanks().add(rank);\n        Story child = new Story();\n        story.getChildren().add(child);\n        \n        storyRankBusiness.removeStoryRanks(story);\n        replayAll();\n        storyBusiness.updateStoryRanks(story);\n        verifyAll();\n    }\n    \n    \n    /**\n     * TEST FORCE DELETING\n     */\n    \n    @Test\n    public void testForceDelete() {\n        Story story = new Story();\n        story.setId(1);\n        \n        Story child = new Story();\n        child.setParent(story);\n        story.setChildren(new ArrayList<Story>(Arrays.asList(child)));\n        \n        story.setTasks(new HashSet<Task>(Arrays.asList(new Task(), new Task())));\n        story.setHourEntries(new HashSet<StoryHourEntry>(Arrays.asList(new StoryHourEntry(), new StoryHourEntry(), new StoryHourEntry())));\n        \n        taskBusiness.delete(EasyMock.isA(Task.class), EasyMock.same(HourEntryHandlingChoice.DELETE));\n        expectLastCall().times(2);\n        \n        hourEntryBusiness.deleteAll(story.getHourEntries());\n        \n        storyDAO.remove(1);\n        \n        replayAll();\n        storyBusiness.forceDelete(story);\n        verifyAll();\n        \n        assertNull(\"Child story's parent not null\", child.getParent());\n        assertEquals(\"Parent story's children not empty\", 0, story.getChildren().size());\n    }\n\n    \n    \n    \n    \n    \n    \n    \n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\StoryFilterBusinessTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["StoryFilterBusinessTest"], "AN": ["storyFilterBusiness"], "SCS_VariableDeclarator": ["storyFilterBusiness", "story1", "storyFilters", "story", "states", "storyFilters", "story", "storyFilters", "story", "storyFilters", "story", "labels2", "great", "story", "failByName", "failByState", "succeed", "stories", "states", "storyFilters", "filteredStories", "bl", "story1", "childStory1", "childChildStory1", "childStory2", "states", "storyFilters", "filteredStories", "filteredStory", "filteredChildStory", "filteredChildChildStory", "backlog", "story1", "story2", "stories", "filter"], "MN": ["setUp", "testFilterByState", "testFilterByState_FilteredOut", "testFilterByName", "testFilterByName_notFound", "testFilterByLabels", "testFilterByLabels_notMatched", "testFilterStories", "testFilterStories_recursive", "testFilterStoryList"], "PN": [], "SCS_MemberReference": ["storyFilterBusiness", "IMPLEMENTED", "valueSet", "story1", "storyFilters", "DONE", "BLOCKED", "states", "story", "storyFilters", "story", "storyFilters", "story", "storyFilters", "great", "labels2", "story", "story", "NOT_STARTED", "DONE", "NOT_STARTED", "failByName", "failByState", "succeed", "NOT_STARTED", "states", "stories", "storyFilters", "bl", "bl", "bl", "bl", "childStory1", "childStory2", "childChildStory1", "DONE", "DONE", "states", "story1", "storyFilters", "backlog", "backlog", "story1", "story2", "story2", "stories", "filter"], "SCS_VariableDeclaration": ["Story", "StoryFilters", "Story", "Set", "StoryFilters", "Story", "StoryFilters", "Story", "StoryFilters", "Story", "Set", "Label", "Story", "Story", "Story", "Story", "List", "Set", "StoryFilters", "List", "Backlog", "Story", "Story", "Story", "Story", "Set", "StoryFilters", "List", "Story", "Story", "Story", "Backlog", "Story", "Story", "List", "StoryFilters"], "SCS_ClassReference": ["story1", "", "storyFilterBusiness", "story", "states", "", "storyFilterBusiness", "story", "", "storyFilterBusiness", "story", "", "storyFilterBusiness", "great", "great", "labels2", "story", "", "storyFilterBusiness", "", "storyFilterBusiness", "succeed", "failByName", "failByState", "succeed", "failByName", "failByState", "succeed", "Arrays", "states", "storyFilterBusiness", "", "filteredStories", "", "succeed", "filteredStories", null, "story1", "childStory1", "childChildStory1", "childStory2", "story1", "Arrays", "childStory1", "Arrays", "story1", "childStory1", "childStory2", "childChildStory1", "childChildStory1", "states", "storyFilterBusiness", "Arrays", "", "filteredStories", "filteredStories", "", "story1", "filteredStory", "", "filteredStory", null, "filteredStory", null, "", "childStory1", "filteredChildStory", "", "filteredChildStory", null, "filteredChildStory", null, "", "childChildStory1", "filteredChildChildStory", "backlog", "story1", "story2", "story2", "Arrays", "", "storyFilterBusiness", null], "SCS_MethodInvocation": ["setState", "assertTrue", "filterByState", "setState", "add", "assertFalse", "filterByState", "setName", "assertTrue", "filterByName", "setName", "assertFalse", "filterByName", "setName", "setDisplayName", "add", "setLabels", "assertTrue", "filterByLabels", "assertFalse", "filterByLabels", "setId", "setName", "setName", "setName", "setState", "setState", "setState", "asList", "add", "filterStories", "assertEquals", "size", "assertEquals", "getId", "get", "getId", "setBacklog", "setBacklog", "setBacklog", "setBacklog", "setChildren", "asList", "setChildren", "asList", "setId", "setId", "setId", "setId", "setState", "add", "filterStories", "asList", "assertEquals", "size", "get", "assertEquals", "getId", "getId", "assertEquals", "getChildren", "size", "getChildren", "get", "assertEquals", "getId", "getId", "assertEquals", "getChildren", "size", "getChildren", "get", "assertEquals", "getId", "getId", "setName", "setBacklog", "setBacklog", "setName", "asList", "assertEquals", "filterStoryList", "get"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\n\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport fi.hut.soberit.agilefant.business.impl.StoryFilterBusinessImpl;\nimport fi.hut.soberit.agilefant.model.Backlog;\nimport fi.hut.soberit.agilefant.model.Label;\nimport fi.hut.soberit.agilefant.model.Project;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.StoryState;\nimport fi.hut.soberit.agilefant.util.StoryFilters;\n\npublic class StoryFilterBusinessTest {\n\n    private StoryFilterBusinessImpl storyFilterBusiness;\n\n    @Before\n    public void setUp() {\n        storyFilterBusiness = new StoryFilterBusinessImpl();\n    }\n\n    @Test\n    public void testFilterByState() {\n        Story story1 = new Story();\n        story1.setState(StoryState.IMPLEMENTED);\n        StoryFilters storyFilters = new StoryFilters(null,\n                StoryState.valueSet);\n\n        assertTrue(storyFilterBusiness.filterByState(story1, storyFilters));\n    }\n\n    @Test\n    public void testFilterByState_FilteredOut() {\n        Story story = new Story();\n        story.setState(StoryState.DONE);\n        Set<StoryState> states = new HashSet<StoryState>();\n        states.add(StoryState.BLOCKED);\n        StoryFilters storyFilters = new StoryFilters(null, states);\n\n        assertFalse(storyFilterBusiness.filterByState(story, storyFilters));\n\n    }\n\n    @Test\n    public void testFilterByName() {\n        Story story = new Story();\n        story.setName(\"dIIbadAAba\");\n        StoryFilters storyFilters = new StoryFilters(\"DiiBaDaabA\", null);\n\n        assertTrue(storyFilterBusiness.filterByName(story, storyFilters));\n\n    }\n\n    @Test\n    public void testFilterByName_notFound() {\n        Story story = new Story();\n        story.setName(\"dIIdadAAba\");\n        StoryFilters storyFilters = new StoryFilters(\"DiiBaDaabA\", null);\n\n        assertFalse(storyFilterBusiness.filterByName(story, storyFilters));\n\n    }\n\n    @Test\n    public void testFilterByLabels() {\n        Story story = new Story();\n        Set<Label> labels2 = new HashSet<Label>();\n        Label great = new Label();\n        great.setName(\"great\");\n        great.setDisplayName(\"Great\");\n        labels2.add(great);\n        story.setLabels(labels2);\n        \n        assertTrue(storyFilterBusiness.filterByLabels(story, \"great\"));\n    }\n\n    @Test\n    public void testFilterByLabels_notMatched() {\n        Story story = new Story();\n\n        assertFalse(storyFilterBusiness.filterByLabels(story, \"great\"));\n    }\n\n    @Test\n    public void testFilterStories() {\n        Story failByName = new Story();\n        Story failByState = new Story();\n        Story succeed = new Story();\n\n        succeed.setId(1000);\n\n        failByName.setName(\"Somethingelse\");\n        failByState.setName(\"Name\");\n        succeed.setName(\"Name\");\n\n        failByName.setState(StoryState.NOT_STARTED);\n        failByState.setState(StoryState.DONE);\n        succeed.setState(StoryState.NOT_STARTED);\n\n        List<Story> stories = Arrays.asList(failByName, failByState,\n                succeed);\n\n        Set<StoryState> states = new HashSet<StoryState>();\n        states.add(StoryState.NOT_STARTED);\n\n        StoryFilters storyFilters = new StoryFilters(\"Name\", states);\n        List<Story> filteredStories = storyFilterBusiness.filterStories(\n                stories, storyFilters);\n\n        assertEquals(1, filteredStories.size());\n        assertEquals(succeed.getId(), filteredStories.get(0).getId());\n    }\n\n    @Test\n    public void testFilterStories_recursive() {\n        Backlog bl = new Project();\n        Story story1 = new Story();\n        story1.setBacklog(bl);\n        Story childStory1 = new Story();\n        childStory1.setBacklog(bl);\n        Story childChildStory1 = new Story();\n        childChildStory1.setBacklog(bl);\n        Story childStory2 = new Story();\n        childStory2.setBacklog(bl);\n\n        story1.setChildren(Arrays.asList(childStory1, childStory2));\n        childStory1.setChildren(Arrays.asList(childChildStory1));\n        story1.setId(1);\n        childStory1.setId(10);\n        childStory2.setId(20);\n        childChildStory1.setId(100);\n\n        childChildStory1.setState(StoryState.DONE);\n\n        Set<StoryState> states = new HashSet<StoryState>();\n        states.add(StoryState.DONE);\n        StoryFilters storyFilters = new StoryFilters(null, states);\n        List<Story> filteredStories = storyFilterBusiness.filterStories(Arrays\n                .asList(story1), storyFilters);\n        assertEquals(1, filteredStories.size());\n        Story filteredStory = filteredStories.get(0);\n        assertEquals(story1.getId(), filteredStory.getId());\n        assertEquals(1, filteredStory.getChildren().size());\n        Story filteredChildStory = filteredStory.getChildren().get(0);\n        assertEquals(childStory1.getId(), filteredChildStory.getId());\n        assertEquals(1, filteredChildStory.getChildren().size());\n        Story filteredChildChildStory = filteredChildStory.getChildren().get(0);\n        assertEquals(childChildStory1.getId(), filteredChildChildStory.getId());\n    }\n    \n    @Test\n    public void testFilterStoryList() {\n        Backlog backlog = new Project();\n        backlog.setName(\"?\");\n        Story story1 = new Story();\n        story1.setBacklog(backlog);\n        Story story2 = new Story();\n        story2.setBacklog(backlog);\n        story2.setName(\"test\");\n        List<Story> stories = Arrays.asList(story1, story2);\n        StoryFilters filter = new StoryFilters(\"test\", null);\n        assertEquals(story2, storyFilterBusiness.filterStoryList(stories, filter).get(0));\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\StoryHierarchyBusinessTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["StoryHierarchyBusinessTest"], "SCS_ClassReference": ["SpringJUnit4ClassRunner", "MockContextLoader", "story1", "story2", "story3", "story", "reference", "story4", "", null, "storyHierarchyDAO", "", "", "storyHierarchyBusiness", "", "", null, "storyHierarchyDAO", "", "", "storyHierarchyBusiness", "", "", null, "storyHierarchyDAO", "", "", "storyHierarchyBusiness", "", "", null, "storyHierarchyDAO", "", null, "storyFilterBusiness", "", "", "storyHierarchyBusiness", "", "", null, "storyHierarchyDAO", "", null, "storyFilterBusiness", "", "", "storyHierarchyBusiness", "", "story1", "story2", "story3", "children", "children", "children", "reference", "story", "oldParent", null, "oldParent", null, "storyTreeIntegrityBusiness", "", null, "storyBusiness", "", null, "storyBusiness", "", "storyHierarchyBusiness", "", "", "reference", null, "", "oldParent", null, "", "story", "", "oldParent", null, "", "oldParent", null, null, "", "reference", null, "", "reference", null, "", "reference", null, null, "StoryTreeIntegrityViolationException", "story1", "story2", "story3", "children", "children", "children", "reference", "story", "oldParent", null, "oldParent", null, "storyTreeIntegrityBusiness", "EasyMock", null, "", "storyHierarchyBusiness", "", "reference", "story1", "story2", "story3", "children", "children", "children", "story", "oldParent", null, "storyTreeIntegrityBusiness", "", null, "storyBusiness", "", null, "storyBusiness", "", "storyHierarchyBusiness", "", "", "reference", null, "", "oldParent", null, "", "story", "", "oldParent", null, "", "reference", null, "", "reference", null, "", "reference", null, null, "reference", "story", "oldParent", null, "oldParent", null, "storyTreeIntegrityBusiness", "", null, "storyBusiness", "", null, "storyBusiness", "", "storyHierarchyBusiness", "", "", "reference", null, "", "oldParent", null, "", "story", "", "oldParent", null, "", "oldParent", null, null, "", "reference", null, "", "reference", null, "", "reference", null, null, "story", "reference", "parent", "children", "children", "children", "children", "storyHierarchyBusiness", "", "story1", "", "reference", "", "story", "", "story2", "", "story3", "story", "reference", "parent", "children", "children", "children", "children", "oldParent", null, "storyTreeIntegrityBusiness", "", null, "storyBusiness", "", null, "storyBusiness", "", "storyHierarchyBusiness", "", "", "story1", "", "reference", "", "story", "", "story2", "", "story3", "", "story4", "", "oldParent", null, "", "story", "story", "reference", "story", "children", "children", "children", "children", "", null, "backlogBusiness", "story", "", null, "storyHierarchyDAO", "product", "", null, "storyBusiness", "", "storyHierarchyBusiness", "", "", "story1", "", "reference", "", "story", "", "story2", "", "story3", "", "story", "story", "reference", "story", "children", "children", "children", "children", "", null, "backlogBusiness", "story", "", null, "storyHierarchyDAO", "product", "", "storyHierarchyBusiness", "", "", "story1", "", "reference", "", "story", "", "story2", "", "story3", "story", "reference", "parent", "children", "children", "children", "children", "storyHierarchyBusiness", "", "story1", "", "story2", "", "story3", "", "reference", "", "story", "story", "reference", "parent", "children", "children", "children", "children", "storyHierarchyBusiness", "", "story1", "", "story", "", "reference", "", "story2", "", "story3", "story", "reference", "parent", "children", "children", "children", "children", "oldParent", null, "storyTreeIntegrityBusiness", "", null, "storyBusiness", "", null, "storyBusiness", "", "storyHierarchyBusiness", "", "", "story1", "", "story", "", "reference", "", "story2", "", "story3", "", "story4", "", "oldParent", null, "", "story", "story", "reference", "story", "children", "children", "children", "children", "", null, "backlogBusiness", "story", "", null, "storyHierarchyDAO", "product", "", null, "storyBusiness", "", "storyHierarchyBusiness", "", "", "story1", "", "story", "", "reference", "", "story2", "", "story3", "", "story", "story", "reference", "story", "children", "children", "children", "children", "", null, "backlogBusiness", "story", "", null, "storyHierarchyDAO", "product", "", "storyHierarchyBusiness", "", "", "story1", "", "story", "", "reference", "", "story2", "", "story3", "story", "reference", "parent", "children", "children", "children", "children", "storyHierarchyBusiness", "", "story", "", "reference", "", "story1", "", "story2", "", "story3", "story", null, "story2", "story", null, "story4", "story2", null, "story3", "stories", "stories", "storyHierarchyBusiness", "System.out", "result", "", "results", "results", "", "story", "result1", "", "result1", null, "result1", null, "result1", null, "result1_child1", "story2", "", "story2", "result2", "", "story4", "result4", "", "story4", null, "", "story2", null, "story2", null, "", "story3", "result3", "storyHierarchyBusiness", "", "results", "child1", "child2", "child3", "parent", "Arrays", "", "storyHierarchyBusiness", "", "", "child1", "", "child2", "", "child3", "IllegalArgumentException", "", "storyHierarchyBusiness", "", "story1", "story1", "Arrays", "story2", "", "storyHierarchyBusiness", "", "", "actual", "", "actual", null, "story1", "story1", "Arrays", "story4", "story2", "story2", "Arrays", "story3", "", "storyHierarchyBusiness", "", "", "actual", "", "actual", null, "", "actual", null, null, null, "root", "root", "child1", "child1", "child11", "child11", "child12", "child12", "child12", "child2", "child2", "child2", "child21", "child21", "child21", "child22", "child22", "child22", "child3", "child3", "root", "Arrays", "child1", "Arrays", "child2", "Arrays", "", null, "", "", "", "", ""], "AN": ["storyHierarchyBusiness", "storyHierarchyDAO", "storyBusiness", "backlogBusiness", "storyFilterBusiness", "storyTreeIntegrityBusiness", "children", "story", "reference", "story1", "story2", "story3", "oldParent", "story4"], "SCS_VariableDeclarator": ["storyHierarchyBusiness", "storyHierarchyDAO", "storyBusiness", "backlogBusiness", "storyFilterBusiness", "storyTreeIntegrityBusiness", "children", "story", "reference", "story1", "story2", "story3", "oldParent", "story4", "proj", "stories", "projectId", "stories", "productId", "stories", "projectId", "storyFilters", "stories", "productId", "storyFilters", "stories", "parent", "parent", "product", "proj", "product", "proj", "parent", "parent", "parent", "product", "proj", "product", "proj", "parent", "stories", "results", "result", "result1", "result1_child1", "result1_child2", "result2", "result4", "result3", "stories", "results", "parent", "child1", "child2", "child3", "actual", "actual", "root", "child1", "child11", "child12", "child2", "child21", "child22", "child3", "metrics"], "MN": ["setUp_storyList", "testRetrieveProjectLeafStories", "testRetrieveProjectRootStories", "testRetrieveProductRootStories", "testRetrieveProjectRootStories_withStoryFilters", "testRetrieveProductRootStories_withStoryFilters", "testMoveUnder", "testMoveUnder_treeConstraint", "testMoveUnder_emptiesOld", "testMoveUnder_toempty", "testRankAfter", "testRankAfter_move", "testRankAfter_moveAsRoot", "testRankAfter_rootStories", "testRankAfter_last", "testRankBefore", "testRankBefore_move", "testRankBefore_moveAsRoot", "testRankBefore_rootStories", "testRankBefore_first", "testReplaceStoryNodesWithRoots", "testReplaceStoryNodesWithRoots_emptyList", "testUpdateParentStoryTreeRanks", "testUpdateParentStoryTreeRanks_nullStory", "testRecurseHierarchy_topmostStory", "testRecurseHierarchy", "testCalculateStoryTreeMetrics"], "PN": [], "SCS_MemberReference": ["story1", "story2", "story3", "children", "story", "reference", "story4", "oldParent", "stories", "proj", "stories", "proj", "stories", "projectId", "stories", "projectId", "stories", "productId", "stories", "productId", "stories", "projectId", "stories", "stories", "storyFilters", "stories", "projectId", "storyFilters", "stories", "productId", "stories", "stories", "storyFilters", "stories", "productId", "storyFilters", "reference", "reference", "reference", "story1", "story2", "story3", "children", "oldParent", "story", "story4", "story", "reference", "oldParent", "reference", "story", "reference", "story", "story", "reference", "story", "reference", "reference", "reference", "story1", "story2", "story3", "children", "oldParent", "story", "story4", "story", "reference", "story", "reference", "children", "reference", "reference", "reference", "story1", "story2", "story3", "oldParent", "story", "story", "reference", "oldParent", "reference", "story", "reference", "story", "story", "reference", "story", "children", "oldParent", "story", "story4", "story", "reference", "oldParent", "reference", "story", "reference", "story", "story", "reference", "story", "parent", "parent", "children", "story1", "reference", "story2", "story3", "story", "reference", "oldParent", "parent", "children", "story1", "reference", "story2", "story3", "story4", "story", "parent", "oldParent", "parent", "story", "reference", "parent", "oldParent", "proj", "story1", "reference", "story2", "story3", "product", "children", "oldParent", "story", "reference", "proj", "story1", "reference", "story2", "story3", "product", "children", "story", "reference", "parent", "parent", "children", "story1", "story2", "story3", "reference", "story", "reference", "parent", "parent", "children", "story1", "reference", "story2", "story3", "story", "reference", "oldParent", "parent", "children", "story1", "reference", "story2", "story3", "story4", "story", "parent", "oldParent", "parent", "story", "reference", "parent", "oldParent", "proj", "story1", "reference", "story2", "story3", "product", "children", "oldParent", "story", "reference", "proj", "story1", "reference", "story2", "story3", "product", "children", "story", "reference", "parent", "parent", "children", "reference", "story1", "story2", "story3", "story", "reference", "story2", "story", "story4", "story", "story3", "story2", "story4", "story3", "stories", "results", "result2", "result1_child1", "result4", "result1_child2", "result2", "result1_child2", "result4", "result1_child1", "stories", "child1", "child2", "child3", "parent", "story2", "story1", "story1", "story2", "story4", "story1", "story1", "story3", "story3", "story2", "DONE", "DONE", "DONE", "DONE", "child1", "child2", "child3", "child11", "child12", "child21", "child22", "storyHierarchyBusiness", "root", "estimatedDonePoints", "estimatedPoints", "doneLeafPoints", "leafPoints"], "SCS_MethodInvocation": ["setId", "setId", "setId", "setId", "setId", "setId", "expect", "andReturn", "retrieveProjectLeafStories", "replayAll", "assertSame", "retrieveProjectLeafStories", "verifyAll", "expect", "andReturn", "retrieveProjectRootStories", "replayAll", "assertEquals", "retrieveProjectRootStories", "verifyAll", "expect", "andReturn", "retrieveProductRootStories", "replayAll", "assertSame", "retrieveProductRootStories", "verifyAll", "expect", "andReturn", "retrieveProjectRootStories", "expect", "andReturn", "filterStories", "replayAll", "assertEquals", "retrieveProjectRootStories", "verifyAll", "expect", "andReturn", "retrieveProductRootStories", "expect", "andReturn", "filterStories", "replayAll", "assertSame", "retrieveProductRootStories", "verifyAll", "setParent", "setParent", "setParent", "add", "add", "add", "setChildren", "setParent", "getChildren", "add", "getChildren", "add", "checkChangeParentStoryAndThrow", "expect", "andReturn", "updateStoryRanks", "expect", "andReturn", "updateStoryRanks", "replayAll", "moveUnder", "verifyAll", "assertTrue", "getChildren", "contains", "assertFalse", "getChildren", "contains", "assertSame", "getParent", "assertEquals", "getChildren", "size", "assertEquals", "getChildren", "get", "getTreeRank", "assertEquals", "getChildren", "size", "assertEquals", "getChildren", "get", "assertEquals", "getChildren", "get", "getTreeRank", "setParent", "setParent", "setParent", "add", "add", "add", "setChildren", "setParent", "getChildren", "add", "getChildren", "add", "checkChangeParentStoryAndThrow", "expectLastCall", "andThrow", "replayAll", "moveUnder", "verifyAll", "setChildren", "setParent", "setParent", "setParent", "add", "add", "add", "setParent", "getChildren", "add", "checkChangeParentStoryAndThrow", "expect", "andReturn", "updateStoryRanks", "expect", "andReturn", "updateStoryRanks", "replayAll", "moveUnder", "verifyAll", "assertTrue", "getChildren", "contains", "assertFalse", "getChildren", "contains", "assertSame", "getParent", "assertEquals", "getChildren", "size", "assertEquals", "getChildren", "size", "assertEquals", "getChildren", "get", "assertEquals", "getChildren", "get", "getTreeRank", "setChildren", "setParent", "getChildren", "add", "getChildren", "add", "checkChangeParentStoryAndThrow", "expect", "andReturn", "updateStoryRanks", "expect", "andReturn", "updateStoryRanks", "replayAll", "moveUnder", "verifyAll", "assertTrue", "getChildren", "contains", "assertFalse", "getChildren", "contains", "assertSame", "getParent", "assertEquals", "getChildren", "size", "assertEquals", "getChildren", "get", "getTreeRank", "assertEquals", "getChildren", "size", "assertEquals", "getChildren", "get", "assertEquals", "getChildren", "get", "getTreeRank", "setParent", "setParent", "setChildren", "add", "add", "add", "add", "moveAfter", "assertEquals", "getTreeRank", "assertEquals", "getTreeRank", "assertEquals", "getTreeRank", "assertEquals", "getTreeRank", "assertEquals", "getTreeRank", "setParent", "setParent", "setChildren", "add", "add", "add", "add", "getChildren", "add", "checkChangeParentStoryAndThrow", "expect", "andReturn", "updateStoryRanks", "expect", "andReturn", "updateStoryRanks", "replayAll", "moveAfter", "verifyAll", "assertEquals", "getTreeRank", "assertEquals", "getTreeRank", "assertEquals", "getTreeRank", "assertEquals", "getTreeRank", "assertEquals", "getTreeRank", "assertEquals", "getTreeRank", "assertEquals", "getChildren", "size", "assertEquals", "getParent", "setParent", "setParent", "setBacklog", "add", "add", "add", "add", "expect", "andReturn", "getParentProduct", "getBacklog", "expect", "andReturn", "retrieveProductRootStories", "getId", "expect", "andReturn", "updateStoryRanks", "replayAll", "moveAfter", "verifyAll", "assertEquals", "getTreeRank", "assertEquals", "getTreeRank", "assertEquals", "getTreeRank", "assertEquals", "getTreeRank", "assertEquals", "getTreeRank", "assertNull", "getParent", "setParent", "setParent", "setBacklog", "add", "add", "add", "add", "expect", "andReturn", "getParentProduct", "getBacklog", "expect", "andReturn", "retrieveProductRootStories", "getId", "replayAll", "moveAfter", "verifyAll", "assertEquals", "getTreeRank", "assertEquals", "getTreeRank", "assertEquals", "getTreeRank", "assertEquals", "getTreeRank", "assertEquals", "getTreeRank", "setParent", "setParent", "setChildren", "add", "add", "add", "add", "moveAfter", "assertEquals", "getTreeRank", "assertEquals", "getTreeRank", "assertEquals", "getTreeRank", "assertEquals", "getTreeRank", "assertEquals", "getTreeRank", "setParent", "setParent", "setChildren", "add", "add", "add", "add", "moveBefore", "assertEquals", "getTreeRank", "assertEquals", "getTreeRank", "assertEquals", "getTreeRank", "assertEquals", "getTreeRank", "assertEquals", "getTreeRank", "setParent", "setParent", "setChildren", "add", "add", "add", "add", "getChildren", "add", "checkChangeParentStoryAndThrow", "expect", "andReturn", "updateStoryRanks", "expect", "andReturn", "updateStoryRanks", "replayAll", "moveBefore", "verifyAll", "assertEquals", "getTreeRank", "assertEquals", "getTreeRank", "assertEquals", "getTreeRank", "assertEquals", "getTreeRank", "assertEquals", "getTreeRank", "assertEquals", "getTreeRank", "assertEquals", "getChildren", "size", "assertEquals", "getParent", "setParent", "setParent", "setBacklog", "add", "add", "add", "add", "expect", "andReturn", "getParentProduct", "getBacklog", "expect", "andReturn", "retrieveProductRootStories", "getId", "expect", "andReturn", "updateStoryRanks", "replayAll", "moveBefore", "verifyAll", "assertEquals", "getTreeRank", "assertEquals", "getTreeRank", "assertEquals", "getTreeRank", "assertEquals", "getTreeRank", "assertEquals", "getTreeRank", "assertNull", "getParent", "setParent", "setParent", "setBacklog", "add", "add", "add", "add", "expect", "andReturn", "getParentProduct", "getBacklog", "expect", "andReturn", "retrieveProductRootStories", "getId", "replayAll", "moveBefore", "verifyAll", "assertEquals", "getTreeRank", "assertEquals", "getTreeRank", "assertEquals", "getTreeRank", "assertEquals", "getTreeRank", "assertEquals", "getTreeRank", "setParent", "setParent", "setChildren", "add", "add", "add", "add", "moveBefore", "assertEquals", "getTreeRank", "assertEquals", "getTreeRank", "assertEquals", "getTreeRank", "assertEquals", "getTreeRank", "assertEquals", "getTreeRank", "getChildren", "add", "setParent", "getChildren", "add", "setParent", "getChildren", "add", "setParent", "add", "add", "replaceStoryNodesWithRoots", "println", "getId", "assertEquals", "size", "get", "assertEquals", "getId", "getId", "assertEquals", "getChildren", "size", "getChildren", "get", "getChildren", "get", "getId", "getId", "assertEquals", "getId", "getId", "assertEquals", "getId", "getId", "assertEquals", "getChildren", "size", "assertEquals", "getChildren", "size", "getChildren", "get", "assertEquals", "getId", "getId", "replaceStoryNodesWithRoots", "assertTrue", "isEmpty", "setTreeRank", "setTreeRank", "setTreeRank", "setChildren", "asList", "replayAll", "updateChildrenTreeRanks", "verifyAll", "assertEquals", "getTreeRank", "assertEquals", "getTreeRank", "assertEquals", "getTreeRank", "replayAll", "updateChildrenTreeRanks", "verifyAll", "setParent", "setChildren", "asList", "setParent", "replayAll", "recurseHierarchy", "verifyAll", "assertNull", "getParent", "assertEquals", "getChildren", "size", "setParent", "setChildren", "asList", "setParent", "setParent", "setChildren", "asList", "setParent", "replayAll", "recurseHierarchy", "verifyAll", "assertNull", "getParent", "assertEquals", "getChildren", "size", "assertEquals", "getChildren", "get", "getChildren", "size", "setStoryPoints", "setId", "setStoryPoints", "setId", "setStoryPoints", "setId", "setStoryPoints", "setState", "setId", "setStoryPoints", "setState", "setId", "setStoryPoints", "setState", "setId", "setStoryPoints", "setState", "setId", "setStoryPoints", "setId", "setChildren", "asList", "setChildren", "asList", "setChildren", "asList", "replayAll", "calculateStoryTreeMetrics", "verifyAll", "assertEquals", "assertEquals", "assertEquals", "assertEquals"], "SCS_VariableDeclaration": ["Project", "List", "int", "List", "int", "List", "int", "StoryFilters", "List", "int", "StoryFilters", "List", "Story", "Story", "Product", "Project", "Product", "Project", "Story", "Story", "Story", "Product", "Project", "Product", "Project", "Story", "List", "List", "Story", "Story", "Story", "Story", "Story", "Story", "Story", "List", "List", "Story", "Story", "Story", "Story", "StoryTO", "StoryTO", "Story", "Story", "Story", "Story", "Story", "Story", "Story", "Story", "StoryTreeBranchMetrics"], "CO": ["//newest at top", "//newest at top", "// INPUT:", "// 1 -> [4]", "// 1 -> 2 -> [3]", "// OUTPUT:", "// 1", "// \\- 2", "// ___\\- 3", "// \\- 4"], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport static org.easymock.EasyMock.*;\nimport static org.junit.Assert.*;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport org.easymock.EasyMock;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.test.annotation.DirtiesContext;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n\nimport fi.hut.soberit.agilefant.business.impl.StoryHierarchyBusinessImpl;\nimport fi.hut.soberit.agilefant.db.StoryHierarchyDAO;\nimport fi.hut.soberit.agilefant.exception.StoryTreeIntegrityViolationException;\nimport fi.hut.soberit.agilefant.model.Product;\nimport fi.hut.soberit.agilefant.model.Project;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.StoryState;\nimport fi.hut.soberit.agilefant.test.Mock;\nimport fi.hut.soberit.agilefant.test.MockContextLoader;\nimport fi.hut.soberit.agilefant.test.MockedTestCase;\nimport fi.hut.soberit.agilefant.test.TestedBean;\nimport fi.hut.soberit.agilefant.transfer.StoryTO;\nimport fi.hut.soberit.agilefant.transfer.StoryTreeBranchMetrics;\nimport fi.hut.soberit.agilefant.util.StoryFilters;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(loader = MockContextLoader.class)\npublic class StoryHierarchyBusinessTest extends MockedTestCase {\n\n    @TestedBean\n    private StoryHierarchyBusinessImpl storyHierarchyBusiness;\n\n    @Mock(strict = true)\n    private StoryHierarchyDAO storyHierarchyDAO;\n\n    @Mock(strict = true)\n    private StoryBusiness storyBusiness;\n\n    @Mock(strict = true)\n    private BacklogBusiness backlogBusiness;\n\n    @Mock(strict = true)\n    private StoryFilterBusiness storyFilterBusiness;\n    \n    @Mock(strict = true)\n    private StoryTreeIntegrityBusiness storyTreeIntegrityBusiness;\n\n    private List<Story> children;\n\n    private Story story;\n    private Story reference;\n    private Story story1;\n    private Story story2;\n    private Story story3;\n\n    private Story oldParent;\n    private Story story4;\n\n    @Before\n    public void setUp_storyList() {\n        story1 = new Story();\n        story1.setId(1);\n        story2 = new Story();\n        story2.setId(2);\n        story3 = new Story();\n        story3.setId(3);\n\n        children = new ArrayList<Story>();\n\n        story = new Story();\n        story.setId(4);\n        reference = new Story();\n        reference.setId(5);\n\n        story4 = new Story();\n        story4.setId(6);\n        oldParent = new Story();\n\n    }\n\n    @Test\n    @DirtiesContext\n    public void testRetrieveProjectLeafStories() {\n        Project proj = new Project();\n        List<Story> stories = new ArrayList<Story>();\n        expect(storyHierarchyDAO.retrieveProjectLeafStories(proj)).andReturn(\n                stories);\n        replayAll();\n        assertSame(stories, storyHierarchyBusiness\n                .retrieveProjectLeafStories(proj));\n        verifyAll();\n    }\n\n    @Test\n    @DirtiesContext\n    public void testRetrieveProjectRootStories() {\n        int projectId = 100;\n        List<Story> stories = new ArrayList<Story>();\n        expect(storyHierarchyDAO.retrieveProjectRootStories(projectId))\n                .andReturn(stories);\n        replayAll();\n        assertEquals(stories, storyHierarchyBusiness\n                .retrieveProjectRootStories(projectId, null));\n        verifyAll();\n    }\n\n    @Test\n    @DirtiesContext\n    public void testRetrieveProductRootStories() {\n        int productId = 100;\n        List<Story> stories = new ArrayList<Story>();\n        expect(storyHierarchyDAO.retrieveProductRootStories(productId))\n                .andReturn(stories);\n        replayAll();\n        assertSame(stories, storyHierarchyBusiness.retrieveProductRootStories(\n                productId, null));\n        verifyAll();\n    }\n\n    @Test\n    @DirtiesContext\n    public void testRetrieveProjectRootStories_withStoryFilters() {\n        int projectId = 100;\n        StoryFilters storyFilters = new StoryFilters(null, null);\n        List<Story> stories = new ArrayList<Story>();\n        expect(storyHierarchyDAO.retrieveProjectRootStories(projectId))\n                .andReturn(stories);\n        expect(storyFilterBusiness.filterStories(stories, storyFilters))\n                .andReturn(stories);\n        replayAll();\n        assertEquals(stories, storyHierarchyBusiness\n                .retrieveProjectRootStories(projectId, storyFilters));\n        verifyAll();\n    }\n\n    @Test\n    @DirtiesContext\n    public void testRetrieveProductRootStories_withStoryFilters() {\n        int productId = 100;\n        StoryFilters storyFilters = new StoryFilters(null, null);\n        List<Story> stories = new ArrayList<Story>();\n        expect(storyHierarchyDAO.retrieveProductRootStories(productId))\n                .andReturn(stories);\n        expect(storyFilterBusiness.filterStories(stories, storyFilters))\n                .andReturn(stories);\n        replayAll();\n        assertSame(stories, storyHierarchyBusiness.retrieveProductRootStories(\n                productId, storyFilters));\n        verifyAll();\n    }\n\n    @Test\n    @DirtiesContext\n    public void testMoveUnder() {\n        story1.setParent(reference);\n        story2.setParent(reference);\n        story3.setParent(reference);\n        children.add(story1);\n        children.add(story2);\n        children.add(story3);\n        reference.setChildren(children);\n\n        story.setParent(oldParent);\n        oldParent.getChildren().add(story);\n        oldParent.getChildren().add(story4);\n        \n        storyTreeIntegrityBusiness.checkChangeParentStoryAndThrow(story, reference);\n        expect(storyBusiness.updateStoryRanks(oldParent)).andReturn(null);\n        expect(storyBusiness.updateStoryRanks(reference)).andReturn(null);\n\n        replayAll();\n\n        storyHierarchyBusiness.moveUnder(story, reference);\n\n        verifyAll();\n\n        assertTrue(reference.getChildren().contains(story));\n        assertFalse(oldParent.getChildren().contains(story));\n        assertSame(reference, story.getParent());\n\n        assertEquals(1, oldParent.getChildren().size());\n        assertEquals(0, oldParent.getChildren().get(0).getTreeRank());\n\n        assertEquals(4, reference.getChildren().size());\n        assertEquals(story, reference.getChildren().get(0)); //newest at top\n        assertEquals(3, reference.getChildren().get(3).getTreeRank());\n    }\n\n    @Test(expected=StoryTreeIntegrityViolationException.class)\n    @DirtiesContext\n    public void testMoveUnder_treeConstraint() {\n        story1.setParent(reference);\n        story2.setParent(reference);\n        story3.setParent(reference);\n        children.add(story1);\n        children.add(story2);\n        children.add(story3);\n        reference.setChildren(children);\n\n        story.setParent(oldParent);\n        oldParent.getChildren().add(story);\n        oldParent.getChildren().add(story4);\n        \n        storyTreeIntegrityBusiness.checkChangeParentStoryAndThrow(story, reference);\n        EasyMock.expectLastCall().andThrow(new StoryTreeIntegrityViolationException(null));\n        replayAll();\n\n        storyHierarchyBusiness.moveUnder(story, reference);\n\n        verifyAll();\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testMoveUnder_emptiesOld() {\n        reference.setChildren(children);\n        story1.setParent(reference);\n        story2.setParent(reference);\n        story3.setParent(reference);\n        children.add(story1);\n        children.add(story2);\n        children.add(story3);\n\n        story.setParent(oldParent);\n        oldParent.getChildren().add(story);\n\n        storyTreeIntegrityBusiness.checkChangeParentStoryAndThrow(story, reference);\n        expect(storyBusiness.updateStoryRanks(oldParent)).andReturn(null);\n        expect(storyBusiness.updateStoryRanks(reference)).andReturn(null);\n\n        replayAll();\n\n        storyHierarchyBusiness.moveUnder(story, reference);\n\n        verifyAll();\n\n        assertTrue(reference.getChildren().contains(story));\n        assertFalse(oldParent.getChildren().contains(story));\n        assertSame(reference, story.getParent());\n\n        assertEquals(0, oldParent.getChildren().size());\n\n        assertEquals(4, reference.getChildren().size());\n        assertEquals(story, reference.getChildren().get(0)); //newest at top\n        assertEquals(3, reference.getChildren().get(3).getTreeRank());\n    }\n\n    @Test\n    @DirtiesContext\n    public void testMoveUnder_toempty() {\n        reference.setChildren(children);\n\n        story.setParent(oldParent);\n        oldParent.getChildren().add(story);\n        oldParent.getChildren().add(story4);\n\n        storyTreeIntegrityBusiness.checkChangeParentStoryAndThrow(story, reference);\n        expect(storyBusiness.updateStoryRanks(oldParent)).andReturn(null);\n        expect(storyBusiness.updateStoryRanks(reference)).andReturn(null);\n\n        replayAll();\n\n        storyHierarchyBusiness.moveUnder(story, reference);\n\n        verifyAll();\n\n        assertTrue(reference.getChildren().contains(story));\n        assertFalse(oldParent.getChildren().contains(story));\n        assertSame(reference, story.getParent());\n\n        assertEquals(1, oldParent.getChildren().size());\n        assertEquals(0, oldParent.getChildren().get(0).getTreeRank());\n\n        assertEquals(1, reference.getChildren().size());\n        assertEquals(story, reference.getChildren().get(0));\n        assertEquals(0, reference.getChildren().get(0).getTreeRank());\n    }\n\n    @Test\n    @DirtiesContext\n    public void testRankAfter() {\n        Story parent = new Story();\n        story.setParent(parent);\n        reference.setParent(parent);\n        parent.setChildren(children);\n\n        children.add(story1);\n        children.add(reference);\n        children.add(story2);\n        children.add(story3);\n\n        storyHierarchyBusiness.moveAfter(story, reference);\n        assertEquals(0, story1.getTreeRank());\n        assertEquals(1, reference.getTreeRank());\n        assertEquals(2, story.getTreeRank());\n        assertEquals(3, story2.getTreeRank());\n        assertEquals(4, story3.getTreeRank());\n\n    }\n\n    @Test\n    @DirtiesContext\n    public void testRankAfter_move() {\n        Story parent = new Story();\n        story.setParent(oldParent);\n        reference.setParent(parent);\n        parent.setChildren(children);\n\n        children.add(story1);\n        children.add(reference);\n        children.add(story2);\n        children.add(story3);\n\n        oldParent.getChildren().add(story4);\n\n        storyTreeIntegrityBusiness.checkChangeParentStoryAndThrow(story, parent);\n        expect(storyBusiness.updateStoryRanks(oldParent)).andReturn(null);\n        expect(storyBusiness.updateStoryRanks(parent)).andReturn(null);\n\n        replayAll();\n\n        storyHierarchyBusiness.moveAfter(story, reference);\n\n        verifyAll();\n\n        assertEquals(0, story1.getTreeRank());\n        assertEquals(1, reference.getTreeRank());\n        assertEquals(2, story.getTreeRank());\n        assertEquals(3, story2.getTreeRank());\n        assertEquals(4, story3.getTreeRank());\n\n        assertEquals(0, story4.getTreeRank());\n        assertEquals(1, oldParent.getChildren().size());\n\n        assertEquals(parent, story.getParent());\n\n    }\n\n    @Test\n    @DirtiesContext\n    public void testRankAfter_moveAsRoot() {\n        Product product = new Product();\n        Project proj = new Project();\n        story.setParent(oldParent);\n        reference.setParent(null);\n        story.setBacklog(proj);\n\n        children.add(story1);\n        children.add(reference);\n        children.add(story2);\n        children.add(story3);\n\n        expect(backlogBusiness.getParentProduct(story.getBacklog())).andReturn(\n                product);\n        expect(storyHierarchyDAO.retrieveProductRootStories(product.getId()))\n                .andReturn(children);\n        expect(storyBusiness.updateStoryRanks(oldParent)).andReturn(null);\n\n        replayAll();\n\n        storyHierarchyBusiness.moveAfter(story, reference);\n\n        verifyAll();\n\n        assertEquals(0, story1.getTreeRank());\n        assertEquals(1, reference.getTreeRank());\n        assertEquals(2, story.getTreeRank());\n        assertEquals(3, story2.getTreeRank());\n        assertEquals(4, story3.getTreeRank());\n\n        assertNull(story.getParent());\n\n    }\n\n    @Test\n    @DirtiesContext\n    public void testRankAfter_rootStories() {\n        Product product = new Product();\n        Project proj = new Project();\n        story.setParent(null);\n        reference.setParent(null);\n        story.setBacklog(proj);\n\n        children.add(story1);\n        children.add(reference);\n        children.add(story2);\n        children.add(story3);\n\n        expect(backlogBusiness.getParentProduct(story.getBacklog())).andReturn(\n                product);\n        expect(storyHierarchyDAO.retrieveProductRootStories(product.getId()))\n                .andReturn(children);\n\n        replayAll();\n\n        storyHierarchyBusiness.moveAfter(story, reference);\n\n        verifyAll();\n\n        assertEquals(0, story1.getTreeRank());\n        assertEquals(1, reference.getTreeRank());\n        assertEquals(2, story.getTreeRank());\n        assertEquals(3, story2.getTreeRank());\n        assertEquals(4, story3.getTreeRank());\n\n    }\n\n    @Test\n    @DirtiesContext\n    public void testRankAfter_last() {\n        Story parent = new Story();\n        story.setParent(parent);\n        reference.setParent(parent);\n        parent.setChildren(children);\n\n        children.add(story1);\n        children.add(story2);\n        children.add(story3);\n        children.add(reference);\n\n        storyHierarchyBusiness.moveAfter(story, reference);\n\n        assertEquals(0, story1.getTreeRank());\n        assertEquals(1, story2.getTreeRank());\n        assertEquals(2, story3.getTreeRank());\n        assertEquals(3, reference.getTreeRank());\n        assertEquals(4, story.getTreeRank());\n    }\n\n    @Test\n    @DirtiesContext\n    public void testRankBefore() {\n        Story parent = new Story();\n        story.setParent(parent);\n        reference.setParent(parent);\n        parent.setChildren(children);\n\n        children.add(story1);\n        children.add(reference);\n        children.add(story2);\n        children.add(story3);\n\n        storyHierarchyBusiness.moveBefore(story, reference);\n\n        assertEquals(0, story1.getTreeRank());\n        assertEquals(1, story.getTreeRank());\n        assertEquals(2, reference.getTreeRank());\n        assertEquals(3, story2.getTreeRank());\n        assertEquals(4, story3.getTreeRank());\n\n    }\n\n    @Test\n    @DirtiesContext\n    public void testRankBefore_move() {\n        Story parent = new Story();\n        story.setParent(oldParent);\n        reference.setParent(parent);\n        parent.setChildren(children);\n\n        children.add(story1);\n        children.add(reference);\n        children.add(story2);\n        children.add(story3);\n\n        oldParent.getChildren().add(story4);\n\n        storyTreeIntegrityBusiness.checkChangeParentStoryAndThrow(story, parent);\n        expect(storyBusiness.updateStoryRanks(oldParent)).andReturn(null);\n        expect(storyBusiness.updateStoryRanks(parent)).andReturn(null);\n\n        replayAll();\n\n        storyHierarchyBusiness.moveBefore(story, reference);\n\n        verifyAll();\n\n        assertEquals(0, story1.getTreeRank());\n        assertEquals(1, story.getTreeRank());\n        assertEquals(2, reference.getTreeRank());\n        assertEquals(3, story2.getTreeRank());\n        assertEquals(4, story3.getTreeRank());\n\n        assertEquals(0, story4.getTreeRank());\n        assertEquals(1, oldParent.getChildren().size());\n\n        assertEquals(parent, story.getParent());\n\n    }\n\n    @Test\n    @DirtiesContext\n    public void testRankBefore_moveAsRoot() {\n        Product product = new Product();\n        Project proj = new Project();\n        story.setParent(oldParent);\n        reference.setParent(null);\n        story.setBacklog(proj);\n\n        children.add(story1);\n        children.add(reference);\n        children.add(story2);\n        children.add(story3);\n\n        expect(backlogBusiness.getParentProduct(story.getBacklog())).andReturn(\n                product);\n        expect(storyHierarchyDAO.retrieveProductRootStories(product.getId()))\n                .andReturn(children);\n        expect(storyBusiness.updateStoryRanks(oldParent)).andReturn(null);\n\n        replayAll();\n\n        storyHierarchyBusiness.moveBefore(story, reference);\n\n        verifyAll();\n\n        assertEquals(0, story1.getTreeRank());\n        assertEquals(1, story.getTreeRank());\n        assertEquals(2, reference.getTreeRank());\n        assertEquals(3, story2.getTreeRank());\n        assertEquals(4, story3.getTreeRank());\n\n        assertNull(story.getParent());\n\n    }\n\n    @Test\n    @DirtiesContext\n    public void testRankBefore_rootStories() {\n        Product product = new Product();\n        Project proj = new Project();\n        story.setParent(null);\n        reference.setParent(null);\n        story.setBacklog(proj);\n\n        children.add(story1);\n        children.add(reference);\n        children.add(story2);\n        children.add(story3);\n\n        expect(backlogBusiness.getParentProduct(story.getBacklog())).andReturn(\n                product);\n        expect(storyHierarchyDAO.retrieveProductRootStories(product.getId()))\n                .andReturn(children);\n\n        replayAll();\n\n        storyHierarchyBusiness.moveBefore(story, reference);\n\n        verifyAll();\n\n        assertEquals(0, story1.getTreeRank());\n        assertEquals(1, story.getTreeRank());\n        assertEquals(2, reference.getTreeRank());\n        assertEquals(3, story2.getTreeRank());\n        assertEquals(4, story3.getTreeRank());\n\n    }\n\n    @Test\n    @DirtiesContext\n    public void testRankBefore_first() {\n        Story parent = new Story();\n        story.setParent(parent);\n        reference.setParent(parent);\n        parent.setChildren(children);\n\n        children.add(reference);\n        children.add(story1);\n        children.add(story2);\n        children.add(story3);\n\n        storyHierarchyBusiness.moveBefore(story, reference);\n\n        assertEquals(0, story.getTreeRank());\n        assertEquals(1, reference.getTreeRank());\n        assertEquals(2, story1.getTreeRank());\n        assertEquals(3, story2.getTreeRank());\n        assertEquals(4, story3.getTreeRank());\n\n    }\n\n    @Test\n    @DirtiesContext\n    public void testReplaceStoryNodesWithRoots() {\n        List<Story> stories = new ArrayList<Story>();\n\n        // INPUT:\n        // 1 -> [4]\n        // 1 -> 2 -> [3]\n        // OUTPUT:\n        // 1\n        // \\- 2\n        // ___\\- 3\n        // \\- 4\n        story.getChildren().add(story2);\n        story2.setParent(story);\n        story.getChildren().add(story4);\n        story4.setParent(story);\n        story2.getChildren().add(story3);\n        story3.setParent(story2);\n\n        stories.add(story4);\n        stories.add(story3);\n        List<Story> results = storyHierarchyBusiness\n                .replaceStoryNodesWithRoots(stories);\n        for (Story result : results) {\n            System.out.println(result.getId());\n        }\n\n        assertEquals(1, results.size());\n        Story result1 = results.get(0);\n        assertEquals(story.getId(), result1.getId());\n        assertEquals(2, result1.getChildren().size());\n        Story result1_child1 = result1.getChildren().get(0);\n        Story result1_child2 = result1.getChildren().get(1);\n        Story result2;\n        Story result4;\n        if (result1_child1.getId() == story2.getId()) {\n            result2 = result1_child1;\n            result4 = result1_child2;\n        } else {\n            result2 = result1_child2;\n            result4 = result1_child1;\n        }\n\n        assertEquals(story2.getId(), result2.getId());\n        assertEquals(story4.getId(), result4.getId());\n\n        assertEquals(0, story4.getChildren().size());\n        assertEquals(1, story2.getChildren().size());\n\n        Story result3 = story2.getChildren().get(0);\n\n        assertEquals(story3.getId(), result3.getId());\n    }\n\n    @Test\n    @DirtiesContext\n    public void testReplaceStoryNodesWithRoots_emptyList() {\n        List<Story> stories = new ArrayList<Story>();\n        List<Story> results = storyHierarchyBusiness\n                .replaceStoryNodesWithRoots(stories);\n\n        assertTrue(results.isEmpty());\n    }\n    \n    \n    @Test\n    @DirtiesContext\n    public void testUpdateParentStoryTreeRanks() {\n        Story parent = new Story();\n        \n        Story child1 = new Story();\n        Story child2 = new Story();\n        Story child3 = new Story();\n        child1.setTreeRank(0);\n        child2.setTreeRank(2);\n        child3.setTreeRank(3);\n        \n        parent.setChildren(new ArrayList<Story>(Arrays.asList(child1, child2,\n                child3)));\n        \n        replayAll();\n        storyHierarchyBusiness.updateChildrenTreeRanks(parent);\n        verifyAll();\n        \n        assertEquals(0, child1.getTreeRank());\n        assertEquals(1, child2.getTreeRank());\n        assertEquals(2, child3.getTreeRank());\n    }\n    \n    @Test(expected = IllegalArgumentException.class)\n    @DirtiesContext\n    public void testUpdateParentStoryTreeRanks_nullStory() {\n        replayAll();\n        storyHierarchyBusiness.updateChildrenTreeRanks(null);\n        verifyAll();\n    }\n    \n    \n    @Test\n    @DirtiesContext\n    public void testRecurseHierarchy_topmostStory() {\n        story1.setParent(null);\n        story1.setChildren(Arrays.asList(story2));\n        story2.setParent(story1);\n        \n        replayAll();\n        StoryTO actual = storyHierarchyBusiness.recurseHierarchy(story1);\n        verifyAll();\n        \n        assertNull(\"Story's parent not null\", actual.getParent());\n        assertEquals(\"Story's children not empty\", 0, actual.getChildren().size());\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testRecurseHierarchy() {\n        story1.setParent(null);\n        story1.setChildren(Arrays.asList(story2, story4));\n        story4.setParent(story1);\n        story2.setParent(story1);\n        story2.setChildren(Arrays.asList(story3));\n        story3.setParent(story3);\n        \n        replayAll();\n        StoryTO actual = storyHierarchyBusiness.recurseHierarchy(story2);\n        verifyAll();\n        \n        assertNull(\"Story's parent not null\", actual.getParent());\n        assertEquals(\"Story's children empty\", 1, actual.getChildren().size());\n        assertEquals(\"Child story's children not empty\", 0, actual.getChildren().get(0).getChildren().size());\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testCalculateStoryTreeMetrics() {\n       Story root = new Story();\n       root.setStoryPoints(20);\n       root.setId(1000);\n       \n       Story child1 = new Story();\n       child1.setStoryPoints(7);\n       child1.setId(1);\n       \n       Story child11 = new Story();\n       child11.setStoryPoints(4);\n       child11.setId(11);\n       \n       Story child12 = new Story();\n       child12.setStoryPoints(4);\n       child12.setState(StoryState.DONE);\n       child12.setId(12);\n       \n       Story child2 = new Story();\n       child2.setStoryPoints(14);\n       child2.setState(StoryState.DONE);\n       child2.setId(2);\n       \n       Story child21 = new Story();\n       child21.setStoryPoints(8);\n       child21.setState(StoryState.DONE);\n       child21.setId(21);\n       \n       Story child22 = new Story();\n       child22.setStoryPoints(4);\n       child22.setState(StoryState.DONE);\n       child22.setId(22);\n       \n       Story child3 = new Story();\n       child3.setStoryPoints(10);\n       child3.setId(3);\n       \n       root.setChildren(Arrays.asList(child1, child2, child3));\n       child1.setChildren(Arrays.asList(child11, child12));\n       child2.setChildren(Arrays.asList(child21, child22));\n       \n       replayAll();\n       StoryTreeBranchMetrics metrics = this.storyHierarchyBusiness.calculateStoryTreeMetrics(root);\n       verifyAll();\n       \n       assertEquals(18, metrics.estimatedDonePoints);\n       assertEquals(32, metrics.estimatedPoints);\n       assertEquals(16, metrics.doneLeafPoints);\n       assertEquals(30, metrics.leafPoints);\n       \n    }\n    \n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\StoryRankBusinessTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["StoryRankBusinessTest"], "AN": ["storyRankBusiness", "storyRankDAO", "storyRanks", "context", "story", "rankable"], "SCS_VariableDeclarator": ["storyRankBusiness", "storyRankDAO", "storyRanks", "context", "story", "rankable", "backlog", "story1", "story2", "story3", "actual", "backlog", "rank", "ref", "ref", "ref", "id", "capt", "rank", "ref", "ref", "ref", "id", "capt", "rank", "id", "capt", "rank"], "MN": ["setUp", "setUp_data", "replayAll", "verifyAll", "testRetrieveByRankingContext", "testGetRankByBacklog", "testRankAbove", "testRankAbove_toTop", "testRankAbove_emptyContext", "testRankBelow", "testRankBelow_topBottom", "testRankBelow_emptyContext", "testRemoveRank", "testRemoveRank_top", "testRemoveRank_bottom", "testRankToBottom", "testRankToBottom_emptyContext"], "PN": [], "SCS_MemberReference": ["storyRankBusiness", "storyRankDAO", "storyRankDAO", "storyRanks", "context", "context", "context", "context", "story", "rankable", "context", "storyRankDAO", "storyRankDAO", "story1", "story2", "story3", "storyRanks", "backlog", "backlog", "story1", "story2", "story3", "rank", "backlog", "story", "story", "backlog", "rankable", "context", "story", "context", "ref", "storyRanks", "context", "story", "context", "ref", "rankable", "context", "story", "context", "ref", "storyRanks", "context", "story", "context", "ref", "context", "story", "context", "ref", "id", "capt", "story", "context", "ref", "context", "story", "rankable", "context", "story", "context", "ref", "storyRanks", "context", "story", "context", "ref", "rankable", "context", "story", "context", "ref", "storyRanks", "context", "story", "context", "ref", "context", "story", "context", "ref", "id", "capt", "story", "context", "ref", "context", "story", "storyRanks", "storyRankDAO", "context", "story", "storyRanks", "context", "storyRankDAO", "storyRanks", "storyRankBusiness", "story", "context", "storyRanks", "storyRankDAO", "context", "story", "storyRanks", "context", "storyRankDAO", "storyRanks", "storyRankBusiness", "story", "context", "storyRanks", "storyRankDAO", "context", "story", "storyRanks", "context", "storyRankDAO", "storyRanks", "storyRankBusiness", "story", "context", "rankable", "context", "story", "storyRanks", "context", "storyRanks", "context", "story", "context", "context", "story", "EMPTY_LIST", "context", "id", "capt", "rankable", "story", "context", "context", "story"], "SCS_ClassReference": ["", "StoryRankDAO", "storyRankBusiness", "storyRanks", "storyRanks", "storyRanks", "storyRanks", null, "storyRanks", null, "storyRanks", null, "storyRanks", null, "storyRanks", null, "storyRanks", null, "rankable", "", "", "storyRanks", null, "storyRanks", null, "storyRanks", null, "", null, "storyRankDAO", "", "storyRankBusiness", "", "", "actual", "", "actual", "", "actual", "rank", "", null, "storyRankDAO", "", "", "storyRankBusiness", null, "", "", null, "storyRankDAO", "", null, "storyRanks", "storyRankDAO", "", null, "storyRankDAO", "", "storyRankBusiness", "", "", "storyRanks", null, "", "rankable", "", "storyRanks", null, "", "storyRanks", null, "", null, "storyRankDAO", "", null, "storyRanks", "storyRankDAO", "", null, "storyRankDAO", "", "storyRankBusiness", "", "", "rankable", "", "storyRanks", null, "", "storyRanks", null, "", "storyRanks", null, "", null, "storyRankDAO", "", null, "storyRankDAO", "", null, "storyRankDAO", "EasyMock", "", null, "storyRankDAO", "", "storyRankBusiness", "", "capt", "", "rank", "", "rank", "", "rankable", "", null, "storyRankDAO", "", null, "storyRanks", "storyRankDAO", "", null, "storyRankDAO", "", "storyRankBusiness", "", "", "storyRanks", null, "", "storyRanks", null, "", "rankable", "", "storyRanks", null, "", null, "storyRankDAO", "", null, "storyRanks", "storyRankDAO", "", null, "storyRankDAO", "", "storyRankBusiness", "", "", "storyRanks", null, "", "storyRanks", null, "", "storyRanks", null, "", "rankable", "", null, "storyRankDAO", "", null, "storyRankDAO", "", null, "storyRankDAO", "EasyMock", "", null, "storyRankDAO", "", "storyRankBusiness", "", "capt", "", "rank", "", "rank", "", "rankable", "", null, null, null, "", null, "storyRankDAO", null, null, "", null, "", "", "storyRanks", null, "", "storyRanks", null, "", null, null, null, "", null, "storyRankDAO", null, null, "", null, "", "", "storyRanks", null, "", "storyRanks", null, "", null, null, null, "", null, "storyRankDAO", null, null, "", null, "", "", "storyRanks", null, "", "storyRanks", null, "", null, "storyRankDAO", "", null, "storyRankDAO", "", null, "storyRankDAO", "", "storyRankBusiness", "", "", "storyRanks", null, "", "storyRanks", null, "", "storyRanks", null, "", "rankable", "", null, "storyRankDAO", "", null, "storyRankDAO", "", null, "storyRankDAO", "EasyMock", "", null, "storyRankDAO", "", "storyRankBusiness", "", "capt", "", "rank", "", "rank", "", "rankable"], "SCS_MethodInvocation": ["createStrictMock", "setStoryRankDAO", "add", "add", "add", "get", "setRank", "get", "setRank", "get", "setRank", "get", "setBacklog", "get", "setBacklog", "get", "setBacklog", "setBacklog", "replay", "verify", "get", "setStory", "get", "setStory", "get", "setStory", "expect", "andReturn", "retrieveRanksByBacklog", "replayAll", "retrieveByRankingContext", "verifyAll", "assertSame", "get", "assertSame", "get", "assertSame", "get", "setRank", "expect", "andReturn", "retrieveByBacklogAndStory", "replayAll", "assertEquals", "getRankByBacklog", "getRank", "verifyAll", "expect", "andReturn", "retrieveByBacklogAndStory", "expect", "andReturn", "get", "retrieveByBacklogAndStory", "expect", "andReturn", "retrieveRanksByBacklog", "replayAll", "rankAbove", "verifyAll", "assertSame", "get", "getRank", "assertSame", "getRank", "assertSame", "get", "getRank", "assertSame", "get", "getRank", "expect", "andReturn", "retrieveByBacklogAndStory", "expect", "andReturn", "get", "retrieveByBacklogAndStory", "expect", "andReturn", "retrieveRanksByBacklog", "replayAll", "rankAbove", "verifyAll", "assertSame", "getRank", "assertSame", "get", "getRank", "assertSame", "get", "getRank", "assertSame", "get", "getRank", "expect", "andReturn", "retrieveByBacklogAndStory", "expect", "andReturn", "retrieveByBacklogAndStory", "expect", "andReturn", "create", "capture", "expect", "andReturn", "get", "replayAll", "rankAbove", "verifyAll", "getValue", "assertSame", "getBacklog", "assertSame", "getStory", "assertSame", "getRank", "expect", "andReturn", "retrieveByBacklogAndStory", "expect", "andReturn", "get", "retrieveByBacklogAndStory", "expect", "andReturn", "retrieveRanksByBacklog", "replayAll", "rankBelow", "verifyAll", "assertSame", "get", "getRank", "assertSame", "get", "getRank", "assertSame", "getRank", "assertSame", "get", "getRank", "expect", "andReturn", "retrieveByBacklogAndStory", "expect", "andReturn", "get", "retrieveByBacklogAndStory", "expect", "andReturn", "retrieveRanksByBacklog", "replayAll", "rankBelow", "verifyAll", "assertSame", "get", "getRank", "assertSame", "get", "getRank", "assertSame", "get", "getRank", "assertSame", "getRank", "expect", "andReturn", "retrieveByBacklogAndStory", "expect", "andReturn", "retrieveByBacklogAndStory", "expect", "andReturn", "create", "capture", "expect", "andReturn", "get", "replayAll", "rankBelow", "verifyAll", "getValue", "assertSame", "getBacklog", "assertSame", "getStory", "assertSame", "getRank", "expect", "andReturn", "get", "retrieveByBacklogAndStory", "expect", "andReturn", "retrieveRanksByBacklog", "remove", "get", "replayAll", "removeRank", "verifyAll", "assertSame", "get", "getRank", "assertSame", "get", "getRank", "expect", "andReturn", "get", "retrieveByBacklogAndStory", "expect", "andReturn", "retrieveRanksByBacklog", "remove", "get", "replayAll", "removeRank", "verifyAll", "assertSame", "get", "getRank", "assertSame", "get", "getRank", "expect", "andReturn", "get", "retrieveByBacklogAndStory", "expect", "andReturn", "retrieveRanksByBacklog", "remove", "get", "replayAll", "removeRank", "verifyAll", "assertSame", "get", "getRank", "assertSame", "get", "getRank", "expect", "andReturn", "retrieveByBacklogAndStory", "expect", "andReturn", "retrieveRanksByBacklog", "expect", "andReturn", "retrieveRanksByBacklog", "replayAll", "rankToBottom", "verifyAll", "assertSame", "get", "getRank", "assertSame", "get", "getRank", "assertSame", "get", "getRank", "assertSame", "getRank", "expect", "andReturn", "retrieveByBacklogAndStory", "expect", "andReturn", "retrieveRanksByBacklog", "expect", "andReturn", "create", "capture", "expect", "andReturn", "get", "replayAll", "rankToBottom", "verifyAll", "getValue", "assertSame", "getBacklog", "assertSame", "getStory", "assertSame", "getRank"], "SCS_VariableDeclaration": ["Backlog", "Story", "Story", "Story", "List", "Backlog", "StoryRank", "Story", "Story", "Story", "Serializable", "Capture", "StoryRank", "Story", "Story", "Story", "Serializable", "Capture", "StoryRank", "Serializable", "Capture", "StoryRank"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\nimport org.easymock.Capture;\nimport org.easymock.EasyMock;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport fi.hut.soberit.agilefant.business.impl.StoryRankBusinessImpl;\nimport fi.hut.soberit.agilefant.db.StoryRankDAO;\nimport fi.hut.soberit.agilefant.model.Backlog;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.Project;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.StoryRank;\n\nimport static org.easymock.EasyMock.*;\nimport static org.junit.Assert.*;\n\npublic class StoryRankBusinessTest {\n\n    StoryRankBusinessImpl storyRankBusiness;\n\n    StoryRankDAO storyRankDAO;\n\n    List<StoryRank> storyRanks;\n\n    Backlog context;\n\n    Story story;\n\n    StoryRank rankable;\n\n    @Before\n    public void setUp() {\n        storyRankBusiness = new StoryRankBusinessImpl();\n\n        storyRankDAO = createStrictMock(StoryRankDAO.class);\n        storyRankBusiness.setStoryRankDAO(storyRankDAO);\n    }\n\n    @Before\n    public void setUp_data() {\n        storyRanks = new ArrayList<StoryRank>();\n\n        storyRanks.add(new StoryRank());\n        storyRanks.add(new StoryRank());\n        storyRanks.add(new StoryRank());\n\n        storyRanks.get(0).setRank(0);\n        storyRanks.get(1).setRank(1);\n        storyRanks.get(2).setRank(2);\n\n        context = new Project();\n\n        storyRanks.get(0).setBacklog(context);\n        storyRanks.get(1).setBacklog(context);\n        storyRanks.get(2).setBacklog(context);\n\n        story = new Story();\n\n        rankable = new StoryRank();\n        rankable.setBacklog(context);\n    }\n\n    public void replayAll() {\n        replay(storyRankDAO);\n    }\n\n    public void verifyAll() {\n        verify(storyRankDAO);\n    }\n\n    @Test\n    public void testRetrieveByRankingContext() {\n        Backlog backlog = new Project();\n        Story story1 = new Story();\n        Story story2 = new Story();\n        Story story3 = new Story();\n        storyRanks.get(0).setStory(story1);\n        storyRanks.get(1).setStory(story2);\n        storyRanks.get(2).setStory(story3);\n\n        expect(storyRankDAO.retrieveRanksByBacklog(backlog)).andReturn(\n                storyRanks);\n\n        replayAll();\n        List<Story> actual = storyRankBusiness\n                .retrieveByRankingContext(backlog);\n        verifyAll();\n        assertSame(story1, actual.get(0));\n        assertSame(story2, actual.get(1));\n        assertSame(story3, actual.get(2));\n\n    }\n\n    @Test\n    public void testGetRankByBacklog() {\n        Backlog backlog = new Project();\n        StoryRank rank = new StoryRank();\n        rank.setRank(556);\n        expect(storyRankDAO.retrieveByBacklogAndStory(backlog, story)).andReturn(rank);\n        \n        replayAll();\n        assertEquals(556, storyRankBusiness.getRankByBacklog(story, backlog).getRank());\n        verifyAll();\n    }\n    \n    \n    @Test\n    public void testRankAbove() {\n        Story ref = new Story();\n\n        expect(storyRankDAO.retrieveByBacklogAndStory(context, story))\n                .andReturn(rankable);\n        expect(storyRankDAO.retrieveByBacklogAndStory(context, ref)).andReturn(\n                storyRanks.get(1));\n        expect(storyRankDAO.retrieveRanksByBacklog(context)).andReturn(\n                storyRanks);\n        replayAll();\n        storyRankBusiness.rankAbove(story, context, ref);\n        verifyAll();\n        assertSame(0, storyRanks.get(0).getRank());\n        assertSame(1, rankable.getRank());\n        assertSame(2, storyRanks.get(1).getRank());\n        assertSame(3, storyRanks.get(2).getRank());\n    }\n\n    @Test\n    public void testRankAbove_toTop() {\n        Story ref = new Story();\n        expect(storyRankDAO.retrieveByBacklogAndStory(context, story))\n                .andReturn(rankable);\n        expect(storyRankDAO.retrieveByBacklogAndStory(context, ref)).andReturn(\n                storyRanks.get(0));\n        expect(storyRankDAO.retrieveRanksByBacklog(context)).andReturn(\n                storyRanks);\n        replayAll();\n        storyRankBusiness.rankAbove(story, context, ref);\n        verifyAll();\n        assertSame(0, rankable.getRank());\n        assertSame(1, storyRanks.get(0).getRank());\n        assertSame(2, storyRanks.get(1).getRank());\n        assertSame(3, storyRanks.get(2).getRank());\n    }\n\n    @Test\n    public void testRankAbove_emptyContext() {\n        Story ref = null;\n        Serializable id = new Integer(1);\n        Capture<StoryRank> capt = new Capture<StoryRank>();\n        expect(storyRankDAO.retrieveByBacklogAndStory(context, story))\n                .andReturn(null);\n        expect(storyRankDAO.retrieveByBacklogAndStory(context, ref)).andReturn(\n                null);\n        expect(storyRankDAO.create(EasyMock.capture(capt))).andReturn(id);\n        expect(storyRankDAO.get(1)).andReturn(null);\n        replayAll();\n        storyRankBusiness.rankAbove(story, context, ref);\n        verifyAll();\n        StoryRank rank = capt.getValue();\n        assertSame(context, rank.getBacklog());\n        assertSame(story, rank.getStory());\n        assertSame(0, rankable.getRank());\n\n    }\n\n    @Test\n    public void testRankBelow() {\n        Story ref = new Story();\n\n        expect(storyRankDAO.retrieveByBacklogAndStory(context, story))\n                .andReturn(rankable);\n        expect(storyRankDAO.retrieveByBacklogAndStory(context, ref)).andReturn(\n                storyRanks.get(1));\n        expect(storyRankDAO.retrieveRanksByBacklog(context)).andReturn(\n                storyRanks);\n        replayAll();\n        storyRankBusiness.rankBelow(story, context, ref);\n        verifyAll();\n\n        assertSame(0, storyRanks.get(0).getRank());\n        assertSame(1, storyRanks.get(1).getRank());\n        assertSame(2, rankable.getRank());\n        assertSame(3, storyRanks.get(2).getRank());\n    }\n\n    @Test\n    public void testRankBelow_topBottom() {\n        Story ref = new Story();\n\n        expect(storyRankDAO.retrieveByBacklogAndStory(context, story))\n                .andReturn(rankable);\n        expect(storyRankDAO.retrieveByBacklogAndStory(context, ref)).andReturn(\n                storyRanks.get(2));\n        expect(storyRankDAO.retrieveRanksByBacklog(context)).andReturn(\n                storyRanks);\n        replayAll();\n        storyRankBusiness.rankBelow(story, context, ref);\n        verifyAll();\n        assertSame(0, storyRanks.get(0).getRank());\n        assertSame(1, storyRanks.get(1).getRank());\n        assertSame(2, storyRanks.get(2).getRank());\n        assertSame(3, rankable.getRank());\n    }\n\n    @Test\n    public void testRankBelow_emptyContext() {\n        Story ref = null;\n        Serializable id = new Integer(1);\n        Capture<StoryRank> capt = new Capture<StoryRank>();\n        expect(storyRankDAO.retrieveByBacklogAndStory(context, story))\n                .andReturn(null);\n        expect(storyRankDAO.retrieveByBacklogAndStory(context, ref)).andReturn(\n                null);\n        expect(storyRankDAO.create(EasyMock.capture(capt))).andReturn(id);\n        expect(storyRankDAO.get(1)).andReturn(null);\n        replayAll();\n        storyRankBusiness.rankBelow(story, context, ref);\n        verifyAll();\n        StoryRank rank = capt.getValue();\n        assertSame(context, rank.getBacklog());\n        assertSame(story, rank.getStory());\n        assertSame(0, rankable.getRank());\n    }\n\n    @Test\n    public void testRemoveRank() {\n        expect(this.storyRankDAO.retrieveByBacklogAndStory(context, story))\n                .andReturn(this.storyRanks.get(1));\n        expect(storyRankDAO.retrieveRanksByBacklog(context)).andReturn(\n                storyRanks);\n        this.storyRankDAO.remove(this.storyRanks.get(1));\n        replayAll();\n        this.storyRankBusiness.removeRank(story, context);\n        verifyAll();\n        assertSame(0, storyRanks.get(0).getRank());\n        assertSame(1, storyRanks.get(2).getRank());\n    }\n\n    @Test\n    public void testRemoveRank_top() {\n        expect(this.storyRankDAO.retrieveByBacklogAndStory(context, story))\n                .andReturn(this.storyRanks.get(0));\n        expect(storyRankDAO.retrieveRanksByBacklog(context)).andReturn(\n                storyRanks);\n        this.storyRankDAO.remove(this.storyRanks.get(0));\n        replayAll();\n        this.storyRankBusiness.removeRank(story, context);\n        verifyAll();\n        assertSame(0, storyRanks.get(1).getRank());\n        assertSame(1, storyRanks.get(2).getRank());\n    }\n\n    @Test\n    public void testRemoveRank_bottom() {\n        expect(this.storyRankDAO.retrieveByBacklogAndStory(context, story))\n                .andReturn(this.storyRanks.get(2));\n        expect(storyRankDAO.retrieveRanksByBacklog(context)).andReturn(\n                storyRanks);\n        this.storyRankDAO.remove(this.storyRanks.get(2));\n        replayAll();\n        this.storyRankBusiness.removeRank(story, context);\n        verifyAll();\n        assertSame(0, storyRanks.get(0).getRank());\n        assertSame(1, storyRanks.get(1).getRank());\n    }\n\n    @Test\n    public void testRankToBottom() {\n        expect(storyRankDAO.retrieveByBacklogAndStory(context, story))\n                .andReturn(rankable);\n        expect(storyRankDAO.retrieveRanksByBacklog(context)).andReturn(\n                storyRanks);\n        expect(storyRankDAO.retrieveRanksByBacklog(context)).andReturn(\n                storyRanks);\n        replayAll();\n        storyRankBusiness.rankToBottom(story, context);\n        verifyAll();\n        assertSame(0, storyRanks.get(0).getRank());\n        assertSame(1, storyRanks.get(1).getRank());\n        assertSame(2, storyRanks.get(2).getRank());\n        assertSame(3, rankable.getRank());\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    @Test\n    public void testRankToBottom_emptyContext() {\n        Serializable id = new Integer(1);\n        Capture<StoryRank> capt = new Capture<StoryRank>();\n        expect(storyRankDAO.retrieveByBacklogAndStory(context, story))\n                .andReturn(null);\n        expect(storyRankDAO.retrieveRanksByBacklog(context)).andReturn(\n                Collections.EMPTY_LIST);\n        expect(storyRankDAO.create(EasyMock.capture(capt))).andReturn(id);\n        expect(storyRankDAO.get(1)).andReturn(rankable);\n        \n        replayAll();\n        storyRankBusiness.rankToBottom(story, context);\n        verifyAll();\n        StoryRank rank = capt.getValue();\n        assertSame(context, rank.getBacklog());\n        assertSame(story, rank.getStory());\n        assertSame(0, rankable.getRank());\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\StoryTreeIntegrityBusinessBuildChangeTreeTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["StoryTreeIntegrityBusinessBuildChangeTreeTest"], "SCS_ClassReference": ["SpringJUnit4ClassRunner", "MockContextLoader", "root", "Arrays", "child1", "Arrays", "messages", "messages", "", null, "", "", "storyNode", "", "", "node1", "", "node1", "", "", "", "storyNode", "", "node1", "", "node11", "", "node12", "", "node11", "", "node12", "level3", "level2", "messages", "", null, "", "", "storyNode", "", "storyNode", "", "storyNode", null, "", "storyNode", null, null, "", "storyNode", null, null, null, "node"], "AN": ["testable", "backlogBusiness"], "SCS_VariableDeclarator": ["testable", "backlogBusiness", "root", "child1", "child2", "child11", "child12", "messages", "storyNode", "node1", "node11", "node12", "level1", "level2", "level3", "messages", "storyNode", "node"], "MN": ["testGenerateChangedStoryTree_secondLevelChildren", "testGenerateChangedStoryTree_parentChanged", "findStoryNode"], "PN": ["story", "nodes"], "SCS_VariableDeclaration": ["Story", "Story", "Story", "Story", "Story", "List", "MoveStoryNode", "MoveStoryNode", "MoveStoryNode", "MoveStoryNode", "Story", "Story", "Story", "List", "MoveStoryNode", "MoveStoryNode"], "SCS_MethodInvocation": ["setChildren", "asList", "setChildren", "asList", "add", "add", "replayAll", "generateChangedStoryTree", "verifyAll", "findStoryNode", "getChildren", "assertNotNull", "findStoryNode", "getChildren", "findStoryNode", "getChildren", "assertNotNull", "assertNotNull", "assertTrue", "isContainsChanges", "assertTrue", "isContainsChanges", "assertTrue", "isContainsChanges", "assertTrue", "isContainsChanges", "assertTrue", "isChanged", "assertTrue", "isChanged", "setParent", "setParent", "add", "replayAll", "generateChangedStoryTree", "verifyAll", "assertEquals", "getStory", "assertTrue", "isContainsChanges", "assertEquals", "getChildren", "size", "assertEquals", "getChildren", "get", "getStory", "assertEquals", "getChildren", "get", "getChildren", "size", "getStory"], "SCS_MemberReference": ["child1", "child2", "child11", "child12", "root", "child11", "root", "child12", "testable", "root", "messages", "child1", "node1", "child11", "child12", "node11", "node12", "level2", "level1", "level2", "testable", "level3", "messages", "level2", "level3", "nodes", "story", "node"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport static org.junit.Assert.*;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.test.annotation.DirtiesContext;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n\nimport fi.hut.soberit.agilefant.business.impl.StoryTreeIntegrityBusinessImpl;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.test.Mock;\nimport fi.hut.soberit.agilefant.test.MockContextLoader;\nimport fi.hut.soberit.agilefant.test.MockedTestCase;\nimport fi.hut.soberit.agilefant.test.TestedBean;\nimport fi.hut.soberit.agilefant.transfer.MoveStoryNode;\nimport fi.hut.soberit.agilefant.util.StoryTreeIntegrityMessage;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(loader = MockContextLoader.class)\npublic class StoryTreeIntegrityBusinessBuildChangeTreeTest extends MockedTestCase {\n\n    @TestedBean\n    private StoryTreeIntegrityBusinessImpl testable;\n    \n    @Mock\n    private BacklogBusiness backlogBusiness;\n    \n    @Test\n    @DirtiesContext\n    public void testGenerateChangedStoryTree_secondLevelChildren() {\n        Story root = new Story();\n        Story child1 = new Story();\n        Story child2 = new Story();\n        Story child11 = new Story();\n        Story child12 = new Story();\n        \n        root.setChildren(Arrays.asList(child1, child2));\n        \n        child1.setChildren(Arrays.asList(child11, child12));\n        \n        List<StoryTreeIntegrityMessage> messages = new ArrayList<StoryTreeIntegrityMessage>();\n        messages.add(new StoryTreeIntegrityMessage(root, child11, null));\n        messages.add(new StoryTreeIntegrityMessage(root, child12, null));\n        \n        replayAll();\n        MoveStoryNode storyNode = this.testable.generateChangedStoryTree(root, messages);\n        verifyAll();\n        \n        MoveStoryNode node1 = findStoryNode(child1, storyNode.getChildren());\n        \n        assertNotNull(\"node 1 constructed\", node1);\n        \n        MoveStoryNode node11 = findStoryNode(child11, node1.getChildren());\n        MoveStoryNode node12 = findStoryNode(child12, node1.getChildren());\n        \n        assertNotNull(\"node 11 constructed\", node11);\n        assertNotNull(\"node 12 constructed\", node12);\n        \n        assertTrue(\"root changed\", storyNode.isContainsChanges());\n        assertTrue(\"node 1 changed\", node1.isContainsChanges());\n        assertTrue(\"node 11 changed\", node11.isContainsChanges());\n        assertTrue(\"node 12 changed\", node12.isContainsChanges());\n        \n        assertTrue(\"node 11 changed\", node11.isChanged());\n        assertTrue(\"node 12 changed\", node12.isChanged());\n    }\n    @Test\n    @DirtiesContext\n    public void testGenerateChangedStoryTree_parentChanged() {\n        Story level1 = new Story();\n        Story level2 = new Story();\n        Story level3 = new Story();\n        \n        level3.setParent(level2);\n        level2.setParent(level1);\n        \n        List<StoryTreeIntegrityMessage> messages = new ArrayList<StoryTreeIntegrityMessage>();\n        messages.add(new StoryTreeIntegrityMessage(level2, null, null));\n        \n        \n        replayAll();\n        MoveStoryNode storyNode = this.testable.generateChangedStoryTree(level3, messages);\n        verifyAll();\n        \n        assertEquals(\"invalid root\", level2, storyNode.getStory());\n        assertTrue(\"root not changed\", storyNode.isContainsChanges());\n        assertEquals(\"root does not have one child\", 1, storyNode.getChildren().size());\n        assertEquals(\"invalid child\", level3, storyNode.getChildren().get(0).getStory());\n        assertEquals(0, storyNode.getChildren().get(0).getChildren().size());\n        \n    }\n    private MoveStoryNode findStoryNode(Story story, List<MoveStoryNode> nodes) {\n        for(MoveStoryNode node: nodes) {\n            if(node.getStory() == story) {\n                return node;\n            }\n        }\n        return null;\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\TaskBusinessTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["TaskBusinessTest"], "SCS_ClassReference": ["SpringJUnit4ClassRunner", "MockContextLoader", "iteration", "story", "task", "loggedInUser", "IllegalArgumentException", "taskBusiness", "iteration", "story", "IllegalArgumentException", "taskBusiness", "iteration", "lastTask", "", null, "storyBusiness", "story", "", null, "iterationBusiness", "iteration", "", null, "taskDAO", "rankingBusiness", "lastTask", "", null, null, "iterationBusiness", "iteration", "", null, "taskDAO", "", null, "taskDAO", "", null, "taskDAO", "", null, "taskDAO", "iterationHistoryEntryBusiness", "iteration", "", "taskBusiness", "iteration", "", "actualTask", "", "actualTask", null, "", "lastTask", "lastTask", "story", "", null, null, "storyBusiness", "story", "", null, "taskDAO", "", null, "taskDAO", "", null, "taskDAO", "", null, "taskDAO", "iterationHistoryEntryBusiness", "iteration", "", "taskBusiness", "story", "", "actualTask", "", "actualTask", null, "", "task", "task", "", null, "taskDAO", "task", "taskDAO", "iterationHistoryEntryBusiness", "iteration", "", "taskBusiness", "", "task", "actualTask", "", "task", "task", "", null, "taskDAO", "task", "", null, "iterationBusiness", "iteration", "taskDAO", "", "iterationHistoryEntryBusiness", "iteration", "", "taskBusiness", "iteration", "", "task", "actualTask", "", "task", "task", "", null, "taskDAO", "task", "", null, "iterationBusiness", "iteration", "taskDAO", "", "dailyWorkBusiness", "iterationHistoryEntryBusiness", "iteration", "", "taskBusiness", "iteration", "", "task", "task", "task", "", null, "taskDAO", "task", "", null, "storyBusiness", "story", "taskDAO", "", "", "taskBusiness", "story", "", null, "actualTask", null, "", null, "actualTask", null, "", "task", "task", "task", "", null, "taskDAO", "task", "", null, "storyBusiness", "story", "taskDAO", "", "", "taskBusiness", "story", "", null, "actualTask", null, "", null, "actualTask", null, "", "task", "task", "", null, "taskDAO", "task", "taskDAO", "iterationHistoryEntryBusiness", "iteration", "", "taskBusiness", "", "ObjectNotFoundException", "", null, "iterationBusiness", "", "taskBusiness", "", "ObjectNotFoundException", "", null, "storyBusiness", "", "taskBusiness", "", "task", "story", "task2", "", null, "taskDAO", "task", "", null, "storyBusiness", "story", "taskDAO", "", "", "taskBusiness", "story", "", "", "story", "task", "story", "task2", "", null, "taskDAO", "task", "", null, "storyBusiness", "story", "taskDAO", "", "", "taskBusiness", "story", "", "", "story", "task", "task", "story", "task2", "", null, "taskDAO", "task", "", null, "storyBusiness", "story", "taskDAO", "", "", "taskBusiness", "story", "", "", "story", "task", "task", "task", "task", "", null, "taskDAO", "task", "taskDAO", "iterationHistoryEntryBusiness", "iteration", "", "taskBusiness", "task", "", "returnedTask", "", "returnedTask", "", "task", "task", "task", "story", "task", "", null, "taskDAO", "task", "taskDAO", "iterationHistoryEntryBusiness", "iteration", "", "taskBusiness", "task", "", "returnedTask", "", "returnedTask", "", "ObjectNotFoundException", "task", "task", "", null, "taskDAO", "task", "", "taskBusiness", "task", "", "task", "task", "", null, "taskDAO", "task", "taskDAO", "task", "iterationHistoryEntryBusiness", "iteration", "", "taskBusiness", "task", "", "task", "task", "story", "", null, "taskDAO", "task", "taskDAO", "task", "iterationHistoryEntryBusiness", "iteration", "", "taskBusiness", "task", "", "OperationNotPermittedException", "task", null, "taskBusiness", "task", "task", "story", "taskDAO", "task", "", "taskBusiness", "", "IllegalArgumentException", "taskBusiness", "IllegalArgumentException", "taskBusiness", "", null, "storyBusiness", "story", "", "taskBusiness", "story", "", "task", "", "task", "", "ObjectNotFoundException", "", null, "storyBusiness", "", "taskBusiness", "", "", null, "iterationBusiness", "iteration", "", "taskBusiness", "iteration", "", "task", "", "task", "", "ObjectNotFoundException", "", null, "iterationBusiness", "", "taskBusiness", "", "ObjectNotFoundException", "", null, "iterationBusiness", "", "taskBusiness", "", "IllegalArgumentException", "taskBusiness", "source", "destination", "task", "", null, "iterationBusiness", "destination", "taskDAO", "iterationHistoryEntryBusiness", "source", "iterationHistoryEntryBusiness", "destination", "", "taskBusiness", "destination", "", "task", "", "task", "", "iter", "iter2", "source", "source", "destination", "destination", "task", "", null, "storyBusiness", "destination", "taskDAO", "iterationHistoryEntryBusiness", "iter", "iterationHistoryEntryBusiness", "iter2", "", "taskBusiness", "destination", "", "task", "", "task", "", "proj", "iter2", "source", "source", "destination", "destination", "task", "", null, "storyBusiness", "destination", "taskDAO", "iterationHistoryEntryBusiness", "iter2", "", "taskBusiness", "destination", "", "task", "", "task", "", "proj", "iter", "source", "source", "destination", "destination", "task", "", null, "storyBusiness", "destination", "taskDAO", "iterationHistoryEntryBusiness", "iter", "", "taskBusiness", "destination", "", "task", "", "task", "", "source", "source", "destination", "destination", "task", "", null, "storyBusiness", "destination", "taskDAO", "", "taskBusiness", "destination", "", "task", "", "task", "", "IllegalArgumentException", "taskBusiness", "IllegalArgumentException", "taskBusiness", "IllegalArgumentException", "taskBusiness", "firstTaskInRank", "secondTaskInRank", "thirdTaskInRank", "fourthTaskInRank", "firstTaskInRank", "secondTaskInRank", "thirdTaskInRank", "fourthTaskInRank", "rankParentStory", "firstTaskInRank", "secondTaskInRank", "thirdTaskInRank", "fourthTaskInRank", "", "firstTaskInRank", null, "", "secondTaskInRank", null, "", "thirdTaskInRank", null, "", "fourthTaskInRank", null, "Arrays", "", null, "taskDAO", "", "taskBusiness", "", "", "", "", null, "Arrays", "taskDAO", "", "taskBusiness", "", "", "", null, "Arrays", "taskDAO", "", "taskBusiness", "", "", "", null, "Arrays", "taskDAO", "", "taskBusiness", "", "", "IllegalArgumentException", "", "taskBusiness", "", "first", "second", "", null, "taskDAO", "", "taskBusiness", "", "IllegalArgumentException", "first", "second", "", "taskBusiness", "", "IllegalArgumentException", "newTask", "", "taskBusiness", "", "last", "", null, "storyBusiness", "", null, "taskDAO", "", "taskBusiness", "", "", "task", "actual", "", "actual", null, "last", "", null, "iterationBusiness", "", null, "taskDAO", "", "taskBusiness", "", "", "task", "actual", "", "actual", null, "IllegalArgumentException", "taskBusiness", "IllegalArgumentException", "taskBusiness", "expectedParent", "", null, null, "storyBusiness", "", null, "taskDAO", "", null, "Arrays", "taskDAO", "fourthTaskInRank", "", "taskBusiness", "", "", "actual", "", "actual", null, "expectedParent", "upperTask", "upperTask", "lastTask", "", null, null, "iterationBusiness", "", null, "taskDAO", "", null, "Arrays", "taskDAO", "", "taskBusiness", "", "", "actual", "", "actual", null, "IllegalArgumentException", "", "taskBusiness", "", "IllegalArgumentException", "", "taskBusiness", "", "IllegalArgumentException", "", "taskBusiness", "", "task", "task", "", null, "taskDAO", "hourEntryBusiness", "task", "taskDAO", "", "taskBusiness", "", "task", "task", "", null, "taskDAO", "hourEntryBusiness", "task", "task", "taskDAO", "", "taskBusiness", "", "task", "task", "", null, "taskDAO", "hourEntryBusiness", "task", "task", "taskDAO", "", "taskBusiness", ""], "AN": ["taskBusiness", "iterationBusiness", "iterationHistoryEntryBusiness", "hourEntryBusiness", "storyBusiness", "taskDAO", "rankingBusiness", "iteration", "story", "task", "loggedInUser", "dailyWorkBusiness", "rankParentStory", "firstTaskInRank", "secondTaskInRank", "thirdTaskInRank", "fourthTaskInRank"], "SCS_VariableDeclarator": ["taskBusiness", "iterationBusiness", "iterationHistoryEntryBusiness", "hourEntryBusiness", "storyBusiness", "taskDAO", "rankingBusiness", "iteration", "story", "task", "loggedInUser", "dailyWorkBusiness", "lastTask", "lastTask", "actualTask", "lastTask", "actualTask", "actualTask", "actualTask", "actualTask", "actualTask", "task2", "task2", "task2", "returnedTask", "returnedTask", "he", "task", "source", "destination", "iter", "iter2", "source", "destination", "proj", "iter2", "source", "destination", "proj", "iter", "source", "destination", "iter", "source", "destination", "rankParentStory", "firstTaskInRank", "secondTaskInRank", "thirdTaskInRank", "fourthTaskInRank", "returnedTasksWithRankBetween", "actual", "first", "second", "iter", "first", "second", "newTask", "last", "story", "actual", "last", "iter", "actual", "rankedTask", "expectedParent", "actual", "expectedParent", "upperTask", "lastTask", "actual", "task", "task", "task"], "MN": ["setUp", "testStoreTask_storyAndIterationGiven", "testStoreTask_nullTask", "expectRankToBottom", "testStoreTask_newTaskToIteration", "testStoreTask_newTaskToStory", "testStoreTask_dontChangeParent", "testStoreTask_existingTask", "testStoreTask_existingTaskStateSetToDone", "testStoreTask_updateEffortLeftWhenSettingOriginalEstimate", "testStoreTask_updateNullOriginalEstimateWhenSettingEffortLeft", "testStoreTask_responsibles", "testStoreTask_nonExistentIteration", "testStoreTask_nonExistentStory", "testStoreTask_storyToStarted", "testStoreTask_doneStoryToStarted", "testStoreTask_StartedTaskStoryToDone", "testResetOriginalEstimate_underIteration", "testResetOriginalEstimate_underStory", "testResetOriginalEstimate_nonExistentTask", "testDeleteAndUpdateHistory_underIteration", "testDeleteAndUpdateHistory_underIterationStory", "testDelete_containsHourEntries", "testDelete_underProductStory", "testAssignParentForTask_nullTask", "testAssignParentForTask_bothIdsNull", "testAssignParentForTask_storyIdGiven", "testAssignParentForTask_nonExistentStoryIdGiven", "testAssignParentForTask_iterationIdGiven", "testAssignParentForTask_nonExistentIterationIdGiven", "testAssignParentForTask_backlogNotIteration", "testAssignParentForTask_bothIdsGiven", "testMove_fromIterationToIteration", "testMove_fromIterationStoryToIterationStory", "testMove_fromProjectStoryToIterationStory", "testMove_fromIterationToProject", "testMove_toStoryUnderSameIteration", "testMove_nullTask", "testMove_bothParentIdsNull", "testMove_bothIdsGiven", "setUp_ranking", "checkRanks", "testRankUnderTask_twoUpwards", "testRankUnderTask_twoDownwards", "testRankUnderTask_toTop", "testRankUnderTask_toBottom", "testRankUnderTask_nullTaskGiven", "testRankUnderTask_checkUnderSameIteration", "testRankUnderTask_noStory_differentIteration", "testRankUnderTask_tasksNotUnderSameStory", "testRankToBottom_story", "testRankToBottom_iteration", "testRankToBottom_noTaskGiven", "testRankToBottom_noParentGiven", "testRankAndMove_underStoryToTop", "testRankAndMove_underIteration", "testRankAndMove_nullTask", "testRankAndMove_noParent", "testRankAndMove_bothParents", "testDeleteWithHandlingChoice_delete", "testDeleteWithHandlingChoice_move_toStory", "testDeleteWithHandlingChoice_move_toBacklog"], "PN": ["rankable", "story", "iteration", "first", "second", "third", "fourth"], "SCS_MemberReference": ["task", "iteration", "story", "loggedInUser", "task", "story", "story", "iteration", "iteration", "lastTask", "story", "iteration", "rankable", "lastTask", "iteration", "task", "task", "lastTask", "iteration", "iteration", "task", "iteration", "story", "iteration", "story", "task", "task", "lastTask", "story", "story", "task", "story", "iteration", "task", "task", "task", "task", "iteration", "task", "task", "iteration", "task", "DONE", "task", "iteration", "task", "task", "iteration", "task", "task", "task", "story", "task", "task", "story", "task", "task", "story", "task", "task", "story", "task", "iteration", "task", "task", "task", "task", "task", "NOT_STARTED", "NOT_STARTED", "task2", "story", "task", "task", "story", "task", "STARTED", "DONE", "NOT_STARTED", "task2", "story", "task", "task", "story", "task", "DONE", "STARTED", "NOT_STARTED", "STARTED", "task2", "story", "task", "task", "story", "task", "NOT_STARTED", "iteration", "task", "task", "story", "iteration", "task", "task", "iteration", "task", "story", "iteration", "task", "he", "task", "story", "task", "task", "story", "task", "story", "task", "iteration", "task", "iteration", "task", "task", "task", "source", "destination", "task", "task", "destination", "iter", "iter2", "source", "destination", "task", "task", "destination", "proj", "iter2", "source", "destination", "task", "task", "destination", "iter", "proj", "source", "destination", "task", "task", "destination", "iter", "iter", "source", "destination", "task", "task", "destination", "task", "task", "firstTaskInRank", "secondTaskInRank", "thirdTaskInRank", "fourthTaskInRank", "rankParentStory", "rankParentStory", "rankParentStory", "rankParentStory", "rankParentStory", "first", "second", "third", "fourth", "secondTaskInRank", "thirdTaskInRank", "returnedTasksWithRankBetween", "rankParentStory", "fourthTaskInRank", "firstTaskInRank", "fourthTaskInRank", "actual", "secondTaskInRank", "thirdTaskInRank", "rankParentStory", "firstTaskInRank", "thirdTaskInRank", "firstTaskInRank", "secondTaskInRank", "thirdTaskInRank", "rankParentStory", "thirdTaskInRank", "secondTaskInRank", "thirdTaskInRank", "fourthTaskInRank", "rankParentStory", "firstTaskInRank", "fourthTaskInRank", "iter", "iter", "iter", "first", "second", "first", "second", "firstTaskInRank", "newTask", "story", "last", "story", "task", "iter", "last", "iter", "task", "task", "expectedParent", "fourthTaskInRank", "expectedParent", "firstTaskInRank", "secondTaskInRank", "thirdTaskInRank", "fourthTaskInRank", "expectedParent", "rankedTask", "expectedParent", "expectedParent", "expectedParent", "lastTask", "expectedParent", "lastTask", "expectedParent", "upperTask", "expectedParent", "task", "DELETE", "task", "MOVE", "task", "MOVE"], "SCS_MethodInvocation": ["setId", "setId", "setId", "setId", "storeTask", "getId", "getId", "storeTask", "getId", "setRank", "expect", "andReturn", "retrieve", "getId", "expect", "andReturn", "retrieve", "getId", "expect", "andReturn", "getLastTaskInRank", "rankToBottom", "setRank", "expect", "andReturn", "anyTimes", "retrieve", "getId", "expect", "andReturn", "create", "expect", "andReturn", "get", "expect", "andReturn", "getLastTaskInRank", "expect", "andReturn", "getTasksWithRankBetween", "updateIterationHistory", "getId", "replayAll", "storeTask", "getId", "assertEquals", "getIteration", "assertEquals", "getRank", "intValue", "verifyAll", "setStory", "setRank", "setIteration", "expect", "andReturn", "anyTimes", "retrieve", "getId", "expect", "andReturn", "create", "expect", "andReturn", "get", "expect", "andReturn", "getLastTaskInRank", "expect", "andReturn", "getTasksWithRankBetween", "updateIterationHistory", "getId", "replayAll", "storeTask", "getId", "assertEquals", "getStory", "assertEquals", "getRank", "intValue", "verifyAll", "setId", "setIteration", "expect", "andReturn", "getAndDetach", "getId", "store", "updateIterationHistory", "getId", "replayAll", "storeTask", "assertEquals", "getId", "getId", "verifyAll", "setId", "setIteration", "expect", "andReturn", "getAndDetach", "getId", "expect", "andReturn", "retrieve", "getId", "store", "expectRankToBottom", "updateIterationHistory", "getId", "replayAll", "storeTask", "getId", "assertEquals", "getId", "getId", "verifyAll", "setId", "setState", "expect", "andReturn", "getAndDetach", "getId", "expect", "andReturn", "retrieve", "getId", "store", "expectRankToBottom", "removeTaskFromWorkQueues", "updateIterationHistory", "getId", "replayAll", "storeTask", "getId", "verifyAll", "setId", "setEffortLeft", "setOriginalEstimate", "expect", "andReturn", "getAndDetach", "getId", "expect", "andReturn", "retrieve", "getId", "store", "expectRankToBottom", "replayAll", "storeTask", "getId", "assertEquals", "getMinorUnits", "getOriginalEstimate", "getMinorUnits", "assertEquals", "getMinorUnits", "getEffortLeft", "getMinorUnits", "verifyAll", "setId", "setEffortLeft", "setOriginalEstimate", "expect", "andReturn", "getAndDetach", "getId", "expect", "andReturn", "retrieve", "getId", "store", "expectRankToBottom", "replayAll", "storeTask", "getId", "assertEquals", "getMinorUnits", "getOriginalEstimate", "getMinorUnits", "assertEquals", "getMinorUnits", "getEffortLeft", "getMinorUnits", "verifyAll", "setId", "setIteration", "expect", "andReturn", "getAndDetach", "getId", "store", "updateIterationHistory", "getId", "replayAll", "storeTask", "verifyAll", "expect", "andThrow", "retrieve", "replayAll", "storeTask", "verifyAll", "expect", "andThrow", "retrieve", "replayAll", "storeTask", "verifyAll", "setId", "setState", "setState", "expect", "andReturn", "getAndDetach", "getId", "expect", "andReturn", "retrieve", "getId", "store", "expectRankToBottom", "replayAll", "storeTask", "getId", "verifyAll", "assertEquals", "getState", "setId", "setState", "setState", "expect", "andReturn", "getAndDetach", "getId", "expect", "andReturn", "retrieve", "getId", "store", "expectRankToBottom", "replayAll", "storeTask", "getId", "verifyAll", "assertEquals", "getState", "setId", "setState", "setState", "setState", "expect", "andReturn", "getAndDetach", "getId", "expect", "andReturn", "retrieve", "getId", "store", "expectRankToBottom", "replayAll", "storeTask", "getId", "verifyAll", "assertEquals", "getState", "setEffortLeft", "setOriginalEstimate", "setIteration", "setStory", "expect", "andReturn", "get", "getId", "store", "updateIterationHistory", "getId", "replayAll", "resetOriginalEstimate", "getId", "assertNull", "getEffortLeft", "assertNull", "getOriginalEstimate", "verifyAll", "setEffortLeft", "setOriginalEstimate", "setStory", "setIteration", "setIteration", "expect", "andReturn", "get", "getId", "store", "updateIterationHistory", "getId", "replayAll", "resetOriginalEstimate", "getId", "assertNull", "getEffortLeft", "assertNull", "getOriginalEstimate", "verifyAll", "setEffortLeft", "setOriginalEstimate", "expect", "andReturn", "get", "getId", "replayAll", "resetOriginalEstimate", "getId", "verifyAll", "setStory", "setIteration", "expect", "andReturn", "get", "getId", "remove", "getId", "updateIterationHistory", "getId", "replayAll", "deleteAndUpdateHistory", "getId", "verifyAll", "setStory", "setIteration", "setIteration", "expect", "andReturn", "get", "getId", "remove", "getId", "updateIterationHistory", "getId", "replayAll", "deleteAndUpdateHistory", "getId", "verifyAll", "getHourEntries", "add", "delete", "setStory", "setIteration", "setBacklog", "remove", "getId", "replayAll", "delete", "verifyAll", "assignParentForTask", "assignParentForTask", "expect", "andReturn", "retrieve", "getId", "replayAll", "assignParentForTask", "getId", "assertEquals", "getStory", "assertNull", "getIteration", "verifyAll", "expect", "andThrow", "retrieve", "replayAll", "assignParentForTask", "verifyAll", "expect", "andReturn", "retrieve", "getId", "replayAll", "assignParentForTask", "getId", "assertEquals", "getIteration", "assertNull", "getStory", "verifyAll", "expect", "andThrow", "retrieve", "replayAll", "assignParentForTask", "verifyAll", "expect", "andThrow", "retrieve", "replayAll", "assignParentForTask", "verifyAll", "assignParentForTask", "setId", "setId", "setIteration", "expect", "andReturn", "retrieve", "getId", "store", "updateIterationHistory", "getId", "updateIterationHistory", "getId", "replayAll", "move", "getId", "assertEquals", "getIteration", "assertNull", "getStory", "verifyAll", "setId", "setId", "setId", "setIteration", "setId", "setIteration", "setStory", "expect", "andReturn", "retrieve", "getId", "store", "updateIterationHistory", "getId", "updateIterationHistory", "getId", "replayAll", "move", "getId", "assertEquals", "getStory", "assertNull", "getIteration", "verifyAll", "setId", "setId", "setId", "setBacklog", "setId", "setIteration", "setStory", "expect", "andReturn", "retrieve", "getId", "store", "updateIterationHistory", "getId", "replayAll", "move", "getId", "assertEquals", "getStory", "assertNull", "getIteration", "verifyAll", "setId", "setId", "setId", "setIteration", "setId", "setBacklog", "setStory", "expect", "andReturn", "retrieve", "getId", "store", "updateIterationHistory", "getId", "replayAll", "move", "getId", "assertEquals", "getStory", "assertNull", "getIteration", "verifyAll", "setId", "setIteration", "setId", "setIteration", "setStory", "expect", "andReturn", "retrieve", "getId", "store", "replayAll", "move", "getId", "assertEquals", "getStory", "assertNull", "getIteration", "verifyAll", "move", "move", "move", "setId", "setId", "setId", "setId", "setRank", "setRank", "setRank", "setRank", "setId", "setStory", "setStory", "setStory", "setStory", "assertEquals", "getRank", "intValue", "assertEquals", "getRank", "intValue", "assertEquals", "getRank", "intValue", "assertEquals", "getRank", "intValue", "asList", "expect", "andReturn", "getTasksWithRankBetween", "replayAll", "rankUnderTask", "verifyAll", "checkRanks", "assertSame", "expect", "andReturn", "asList", "getTasksWithRankBetween", "replayAll", "rankUnderTask", "verifyAll", "checkRanks", "expect", "andReturn", "asList", "getTasksWithRankBetween", "replayAll", "rankUnderTask", "verifyAll", "checkRanks", "expect", "andReturn", "asList", "getTasksWithRankBetween", "replayAll", "rankUnderTask", "verifyAll", "checkRanks", "replayAll", "rankUnderTask", "verifyAll", "setIteration", "setIteration", "expect", "andReturn", "getTasksWithRankBetween", "replayAll", "rankUnderTask", "verifyAll", "setIteration", "setIteration", "replayAll", "rankUnderTask", "verifyAll", "setStory", "replayAll", "rankUnderTask", "verifyAll", "setRank", "expect", "andReturn", "retrieve", "expect", "andReturn", "getLastTaskInRank", "replayAll", "rankToBottom", "verifyAll", "assertEquals", "getId", "getId", "assertEquals", "getRank", "intValue", "setRank", "expect", "andReturn", "retrieve", "expect", "andReturn", "getLastTaskInRank", "replayAll", "rankToBottom", "verifyAll", "assertEquals", "getId", "getId", "assertEquals", "getRank", "intValue", "rankToBottom", "rankToBottom", "setId", "expect", "andReturn", "times", "retrieve", "expect", "andReturn", "getLastTaskInRank", "expect", "andReturn", "asList", "getTasksWithRankBetween", "getRank", "replayAll", "rankAndMove", "verifyAll", "assertEquals", "getStory", "assertEquals", "getRank", "intValue", "setId", "setRank", "setIteration", "setRank", "expect", "andReturn", "times", "retrieve", "expect", "andReturn", "getLastTaskInRank", "expect", "andReturn", "asList", "getTasksWithRankBetween", "replayAll", "rankAndMove", "verifyAll", "assertEquals", "getIteration", "assertEquals", "getRank", "intValue", "replayAll", "rankAndMove", "verifyAll", "replayAll", "rankAndMove", "verifyAll", "replayAll", "rankAndMove", "verifyAll", "setIteration", "setId", "expect", "andReturn", "get", "deleteAll", "getHourEntries", "remove", "replayAll", "delete", "verifyAll", "setStory", "setId", "expect", "andReturn", "get", "moveToStory", "getHourEntries", "getStory", "remove", "replayAll", "delete", "verifyAll", "setIteration", "setId", "expect", "andReturn", "get", "moveToBacklog", "getHourEntries", "getIteration", "remove", "replayAll", "delete", "verifyAll"], "SCS_VariableDeclaration": ["Task", "Task", "Task", "Task", "Task", "Task", "Task", "Task", "Task", "Task", "Task", "Task", "Task", "Task", "TaskHourEntry", "Task", "Iteration", "Iteration", "Iteration", "Iteration", "Story", "Story", "Project", "Iteration", "Story", "Story", "Project", "Iteration", "Story", "Story", "Iteration", "Story", "Story", "Collection", "Task", "Task", "Task", "Iteration", "Task", "Task", "Task", "Task", "Story", "Task", "Task", "Iteration", "Task", "Task", "Story", "Task", "Iteration", "Task", "Task", "Task", "Task", "Task", "Task"], "CO": ["/*\n     * TEST STORING.\n     */", "/**\n     * Helper method for testing that the ranking method is called.\n     */", "/*\n     * TEST ORIGINAL ESTIMATE RESETING\n     */", "/*\n     * TEST DELETION\n     */", "/*\n     * TEST ASSIGNING PARENT\n     */", "/*\n     * TEST MOVING TASKS.\n     * \n     * Moving tasks should update both the source and destination backlogs'\n     * histories.\n     */", "/*\n     * RANKING\n     */", "/*\n     * RANK TO BOTTOM\n     */", "/*\n     * RANK AND MOVE\n     */"], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport static org.easymock.EasyMock.*;\nimport static org.junit.Assert.*;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.LinkedList;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.test.annotation.DirtiesContext;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n\nimport fi.hut.soberit.agilefant.business.impl.RankingBusinessImpl;\nimport fi.hut.soberit.agilefant.business.impl.TaskBusinessImpl;\nimport fi.hut.soberit.agilefant.db.TaskDAO;\nimport fi.hut.soberit.agilefant.exception.ObjectNotFoundException;\nimport fi.hut.soberit.agilefant.exception.OperationNotPermittedException;\nimport fi.hut.soberit.agilefant.model.ExactEstimate;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.Product;\nimport fi.hut.soberit.agilefant.model.Project;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.StoryState;\nimport fi.hut.soberit.agilefant.model.Task;\nimport fi.hut.soberit.agilefant.model.TaskHourEntry;\nimport fi.hut.soberit.agilefant.model.TaskState;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.test.Mock;\nimport fi.hut.soberit.agilefant.test.MockContextLoader;\nimport fi.hut.soberit.agilefant.test.MockedTestCase;\nimport fi.hut.soberit.agilefant.test.TestedBean;\nimport fi.hut.soberit.agilefant.util.HourEntryHandlingChoice;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(loader = MockContextLoader.class)\npublic class TaskBusinessTest extends MockedTestCase {\n\n    @TestedBean\n    private TaskBusinessImpl taskBusiness;\n    @Mock(strict = true)\n    private IterationBusiness iterationBusiness;\n    @Mock(strict = true)\n    private IterationHistoryEntryBusiness iterationHistoryEntryBusiness;\n    @Mock(strict = true)\n    private HourEntryBusiness hourEntryBusiness;\n    @Mock(strict = true)\n    private StoryBusiness storyBusiness;\n    @Mock(strict=true)\n    private TaskDAO taskDAO;\n    @TestedBean\n    private RankingBusinessImpl rankingBusiness;\n\n    private Iteration iteration;\n    private Story story;\n    private Task task;\n    private User loggedInUser;\n\n    @Mock(strict=true)\n    private DailyWorkBusiness dailyWorkBusiness;\n\n    @Before\n    public void setUp() {\n        task = new Task();\n        iteration = new Iteration();\n        iteration.setId(2);\n        story = new Story();\n        story.setId(123);\n        task.setId(0);\n\n        loggedInUser = new User();\n        loggedInUser.setId(666);\n    }\n\n    /*\n     * TEST STORING.\n     */\n\n    @Test(expected = IllegalArgumentException.class)\n    @DirtiesContext\n    public void testStoreTask_storyAndIterationGiven() {\n        taskBusiness.storeTask(task, iteration.getId(), story.getId(), false);\n    }\n\n    @Test(expected = IllegalArgumentException.class)\n    @DirtiesContext\n    public void testStoreTask_nullTask() {\n        taskBusiness.storeTask(null, iteration.getId(), null, false);\n    }\n\n    /**\n     * Helper method for testing that the ranking method is called.\n     */\n    private void expectRankToBottom(Task rankable, Story story,\n            Iteration iteration) {\n        Task lastTask = new Task();\n        lastTask.setRank(11);\n\n        if (story != null) {\n            expect(storyBusiness.retrieve(story.getId())).andReturn(story);\n        } else if (iteration != null) {\n            expect(iterationBusiness.retrieve(iteration.getId())).andReturn(\n                    iteration);\n        }\n\n        expect(taskDAO.getLastTaskInRank(story, iteration)).andReturn(lastTask);\n        rankingBusiness.rankToBottom(rankable, lastTask);\n    }\n\n    @Test\n    @DirtiesContext\n    public void testStoreTask_newTaskToIteration() {\n        Task lastTask = new Task();\n        lastTask.setRank(22);\n\n        expect(iterationBusiness.retrieve(iteration.getId())).andReturn(\n                iteration).anyTimes();\n        expect(taskDAO.create(task)).andReturn(1351);\n        expect(taskDAO.get(1351)).andReturn(task);\n        expect(taskDAO.getLastTaskInRank(null, iteration)).andReturn(lastTask);\n        expect(taskDAO.getTasksWithRankBetween(0, 22, iteration, null)).andReturn(new LinkedList<Task>());\n        iterationHistoryEntryBusiness.updateIterationHistory(iteration.getId());\n\n        replayAll();\n\n        Task actualTask = taskBusiness.storeTask(task, iteration.getId(), null,\n                false);\n\n        assertEquals(iteration, actualTask.getIteration());\n        assertEquals(0, actualTask.getRank().intValue());\n\n        verifyAll();\n    }\n\n    @Test\n    @DirtiesContext\n    public void testStoreTask_newTaskToStory() {\n        Task lastTask = new Task();\n        lastTask.setStory(story);\n        lastTask.setRank(222);\n\n        story.setIteration(iteration);\n\n        expect(storyBusiness.retrieve(story.getId())).andReturn(story)\n                .anyTimes();\n        expect(taskDAO.create(task)).andReturn(1351);\n        expect(taskDAO.get(1351)).andReturn(task);\n        expect(taskDAO.getLastTaskInRank(story, null)).andReturn(lastTask);\n        expect(taskDAO.getTasksWithRankBetween(0, 222, null, story)).andReturn(new LinkedList<Task>());\n        iterationHistoryEntryBusiness.updateIterationHistory(iteration.getId());\n\n        replayAll();\n\n        Task actualTask = taskBusiness.storeTask(task, null, story.getId(),\n                false);\n\n        assertEquals(story, actualTask.getStory());\n        assertEquals(0, actualTask.getRank().intValue());\n\n        verifyAll();\n    }\n\n    @Test\n    @DirtiesContext\n    public void testStoreTask_dontChangeParent() {\n        task.setId(54326);\n        task.setIteration(iteration);\n\n        expect(taskDAO.getAndDetach(task.getId())).andReturn(task);\n        taskDAO.store(task);\n        iterationHistoryEntryBusiness.updateIterationHistory(iteration.getId());\n\n        replayAll();\n\n        Task actualTask = taskBusiness.storeTask(task, null, null, false);\n\n        assertEquals(task.getId(), actualTask.getId());\n\n        verifyAll();\n    }\n\n    @Test\n    @DirtiesContext\n    public void testStoreTask_existingTask() {\n        task.setId(54326);\n        task.setIteration(new Iteration());\n\n        expect(taskDAO.getAndDetach(task.getId())).andReturn(task);\n        expect(iterationBusiness.retrieve(iteration.getId())).andReturn(\n                iteration);\n        taskDAO.store(task);\n\n        expectRankToBottom(task, null, iteration);\n\n        iterationHistoryEntryBusiness.updateIterationHistory(iteration.getId());\n\n        replayAll();\n\n        Task actualTask = taskBusiness.storeTask(task, iteration.getId(), null,\n                false);\n\n        assertEquals(task.getId(), actualTask.getId());\n\n        verifyAll();\n    }\n\n    @Test\n    @DirtiesContext\n    public void testStoreTask_existingTaskStateSetToDone() {\n        task.setId(54326);\n        task.setState(TaskState.DONE);\n        expect(taskDAO.getAndDetach(task.getId())).andReturn(task);\n        expect(iterationBusiness.retrieve(iteration.getId())).andReturn(\n                iteration);\n        taskDAO.store(task);\n        expectRankToBottom(task, null, iteration);\n        dailyWorkBusiness.removeTaskFromWorkQueues(task);\n        iterationHistoryEntryBusiness.updateIterationHistory(iteration.getId());\n\n        replayAll();\n\n        taskBusiness.storeTask(task, iteration.getId(), null, false);\n\n        verifyAll();\n    }\n\n    @Test\n    @DirtiesContext\n    public void testStoreTask_updateEffortLeftWhenSettingOriginalEstimate() {\n        task.setId(12);\n        task.setEffortLeft(null);\n        task.setOriginalEstimate(new ExactEstimate(120));\n\n        expect(taskDAO.getAndDetach(task.getId())).andReturn(task);\n        expect(storyBusiness.retrieve(story.getId())).andReturn(story);\n        taskDAO.store(task);\n        expectRankToBottom(task, story, null);\n\n        replayAll();\n\n        Task actualTask = taskBusiness.storeTask(task, null, story.getId(),\n                false);\n\n        assertEquals(new ExactEstimate(120).getMinorUnits(), actualTask\n                .getOriginalEstimate().getMinorUnits());\n        assertEquals(new ExactEstimate(120).getMinorUnits(), actualTask\n                .getEffortLeft().getMinorUnits());\n\n        verifyAll();\n    }\n\n    @Test\n    @DirtiesContext\n    public void testStoreTask_updateNullOriginalEstimateWhenSettingEffortLeft() {\n        task.setId(12);\n        task.setEffortLeft(new ExactEstimate(90));\n        task.setOriginalEstimate(null);\n\n        expect(taskDAO.getAndDetach(task.getId())).andReturn(task);\n        expect(storyBusiness.retrieve(story.getId())).andReturn(story);\n        taskDAO.store(task);\n        expectRankToBottom(task, story, null);\n\n        replayAll();\n\n        Task actualTask = taskBusiness.storeTask(task, null, story.getId(),\n                false);\n\n        assertEquals(new ExactEstimate(90).getMinorUnits(), actualTask\n                .getOriginalEstimate().getMinorUnits());\n        assertEquals(new ExactEstimate(90).getMinorUnits(), actualTask\n                .getEffortLeft().getMinorUnits());\n\n        verifyAll();\n    }\n\n    @Test\n    @DirtiesContext\n    public void testStoreTask_responsibles() {\n        task.setId(123515);\n        task.setIteration(iteration);\n\n        expect(taskDAO.getAndDetach(task.getId())).andReturn(task);\n        taskDAO.store(task);\n        iterationHistoryEntryBusiness.updateIterationHistory(iteration.getId());\n\n        replayAll();\n\n        taskBusiness.storeTask(task, null, null, false);\n\n        verifyAll();\n    }\n\n    @Test(expected = ObjectNotFoundException.class)\n    @DirtiesContext\n    public void testStoreTask_nonExistentIteration() {\n        expect(iterationBusiness.retrieve(0)).andThrow(\n                new ObjectNotFoundException(\"Iteration not found\"));\n        replayAll();\n\n        taskBusiness.storeTask(task, 0, null, false);\n\n        verifyAll();\n    }\n\n    @Test(expected = ObjectNotFoundException.class)\n    @DirtiesContext\n    public void testStoreTask_nonExistentStory() {\n        expect(storyBusiness.retrieve(0)).andThrow(\n                new ObjectNotFoundException(\"Story not found\"));\n        replayAll();\n\n        taskBusiness.storeTask(task, null, 0, false);\n\n        verifyAll();\n    }\n\n    @Test\n    @DirtiesContext\n    public void testStoreTask_storyToStarted() {\n        task.setId(12);\n        story.setState(StoryState.NOT_STARTED);\n\n        Task task2 = new Task();\n        task2.setState(TaskState.NOT_STARTED);\n\n        expect(taskDAO.getAndDetach(task.getId())).andReturn(task2);\n\n        expect(storyBusiness.retrieve(story.getId())).andReturn(story);\n        taskDAO.store(task);\n        expectRankToBottom(task, story, null);\n\n        replayAll();\n\n        taskBusiness.storeTask(task, null, story.getId(), true);\n\n        verifyAll();\n\n        assertEquals(StoryState.STARTED, story.getState());\n    }\n\n    @Test\n    @DirtiesContext\n    public void testStoreTask_doneStoryToStarted() {\n        task.setId(12);\n        story.setState(StoryState.DONE);\n\n        Task task2 = new Task();\n        task2.setState(TaskState.NOT_STARTED);\n\n        expect(taskDAO.getAndDetach(task.getId())).andReturn(task2);\n\n        expect(storyBusiness.retrieve(story.getId())).andReturn(story);\n        taskDAO.store(task);\n        expectRankToBottom(task, story, null);\n\n        replayAll();\n\n        taskBusiness.storeTask(task, null, story.getId(), true);\n\n        verifyAll();\n\n        assertEquals(StoryState.DONE, story.getState());\n    }\n\n    @Test\n    @DirtiesContext\n    public void testStoreTask_StartedTaskStoryToDone() {\n        task.setId(12);\n        task.setState(TaskState.STARTED);\n        story.setState(StoryState.NOT_STARTED);\n        Task task2 = new Task();\n        task2.setState(TaskState.STARTED);\n\n        expect(taskDAO.getAndDetach(task.getId())).andReturn(task2);\n        expect(storyBusiness.retrieve(story.getId())).andReturn(story);\n        taskDAO.store(task);\n        expectRankToBottom(task, story, null);\n\n        replayAll();\n\n        taskBusiness.storeTask(task, null, story.getId(), true);\n\n        verifyAll();\n\n        assertEquals(StoryState.NOT_STARTED, story.getState());\n    }\n\n    /*\n     * TEST ORIGINAL ESTIMATE RESETING\n     */\n\n    @Test\n    @DirtiesContext\n    public void testResetOriginalEstimate_underIteration() {\n        task.setEffortLeft(new ExactEstimate());\n        task.setOriginalEstimate(new ExactEstimate());\n        task.setIteration(iteration);\n        task.setStory(null);\n        expect(taskDAO.get(task.getId())).andReturn(task);\n        taskDAO.store(task);\n\n        iterationHistoryEntryBusiness.updateIterationHistory(iteration.getId());\n\n        replayAll();\n\n        Task returnedTask = taskBusiness.resetOriginalEstimate(task.getId());\n\n        assertNull(returnedTask.getEffortLeft());\n        assertNull(returnedTask.getOriginalEstimate());\n\n        verifyAll();\n    }\n\n    @Test\n    @DirtiesContext\n    public void testResetOriginalEstimate_underStory() {\n        task.setEffortLeft(new ExactEstimate());\n        task.setOriginalEstimate(new ExactEstimate());\n        task.setStory(story);\n        story.setIteration(iteration);\n        task.setIteration(null);\n        expect(taskDAO.get(task.getId())).andReturn(task);\n        taskDAO.store(task);\n\n        iterationHistoryEntryBusiness.updateIterationHistory(iteration.getId());\n\n        replayAll();\n\n        Task returnedTask = taskBusiness.resetOriginalEstimate(task.getId());\n\n        assertNull(returnedTask.getEffortLeft());\n        assertNull(returnedTask.getOriginalEstimate());\n\n        verifyAll();\n    }\n\n    @Test(expected = ObjectNotFoundException.class)\n    @DirtiesContext\n    public void testResetOriginalEstimate_nonExistentTask() {\n        task.setEffortLeft(new ExactEstimate());\n        task.setOriginalEstimate(new ExactEstimate());\n        expect(taskDAO.get(task.getId())).andReturn(null);\n\n        replayAll();\n\n        taskBusiness.resetOriginalEstimate(task.getId());\n\n        verifyAll();\n    }\n\n    /*\n     * TEST DELETION\n     */\n\n    @Test\n    @DirtiesContext\n    public void testDeleteAndUpdateHistory_underIteration() {\n        task.setStory(null);\n        task.setIteration(iteration);\n\n        expect(taskDAO.get(task.getId())).andReturn(task);\n        taskDAO.remove(task.getId());\n        iterationHistoryEntryBusiness.updateIterationHistory(iteration.getId());\n        replayAll();\n\n        taskBusiness.deleteAndUpdateHistory(task.getId(), null);\n\n        verifyAll();\n    }\n\n    @Test\n    @DirtiesContext\n    public void testDeleteAndUpdateHistory_underIterationStory() {\n        task.setStory(story);\n        task.setIteration(null);\n        story.setIteration(iteration);\n\n        expect(taskDAO.get(task.getId())).andReturn(task);\n        taskDAO.remove(task.getId());\n        iterationHistoryEntryBusiness.updateIterationHistory(iteration.getId());\n        replayAll();\n\n        taskBusiness.deleteAndUpdateHistory(task.getId(), null);\n\n        verifyAll();\n    }\n\n    @Test(expected = OperationNotPermittedException.class)\n    @DirtiesContext\n    public void testDelete_containsHourEntries() {\n        TaskHourEntry he = new TaskHourEntry();\n        Task task = new Task();\n        task.getHourEntries().add(he);\n        taskBusiness.delete(task);\n    }\n\n    @Test\n    @DirtiesContext\n    public void testDelete_underProductStory() {\n        task.setStory(story);\n        task.setIteration(null);\n        story.setBacklog(new Product());\n\n        taskDAO.remove(task.getId());\n        replayAll();\n\n        taskBusiness.delete(task);\n\n        verifyAll();\n    }\n\n    /*\n     * TEST ASSIGNING PARENT\n     */\n\n    @Test(expected = IllegalArgumentException.class)\n    @DirtiesContext\n    public void testAssignParentForTask_nullTask() {\n        taskBusiness.assignParentForTask(null, null, null);\n    }\n\n    @Test(expected = IllegalArgumentException.class)\n    @DirtiesContext\n    public void testAssignParentForTask_bothIdsNull() {\n        taskBusiness.assignParentForTask(task, null, null);\n    }\n\n    @Test\n    @DirtiesContext\n    public void testAssignParentForTask_storyIdGiven() {\n        expect(storyBusiness.retrieve(story.getId())).andReturn(story);\n        replayAll();\n\n        taskBusiness.assignParentForTask(task, null, story.getId());\n\n        assertEquals(story, task.getStory());\n        assertNull(task.getIteration());\n\n        verifyAll();\n    }\n\n    @Test(expected = ObjectNotFoundException.class)\n    @DirtiesContext\n    public void testAssignParentForTask_nonExistentStoryIdGiven() {\n        expect(storyBusiness.retrieve(-1)).andThrow(\n                new ObjectNotFoundException());\n        replayAll();\n\n        taskBusiness.assignParentForTask(task, null, -1);\n\n        verifyAll();\n    }\n\n    @Test\n    @DirtiesContext\n    public void testAssignParentForTask_iterationIdGiven() {\n        expect(iterationBusiness.retrieve(iteration.getId())).andReturn(\n                iteration);\n        replayAll();\n\n        taskBusiness.assignParentForTask(task, iteration.getId(), null);\n\n        assertEquals(iteration, task.getIteration());\n        assertNull(task.getStory());\n\n        verifyAll();\n    }\n\n    @Test(expected = ObjectNotFoundException.class)\n    @DirtiesContext\n    public void testAssignParentForTask_nonExistentIterationIdGiven() {\n        expect(iterationBusiness.retrieve(-1)).andThrow(\n                new ObjectNotFoundException());\n        replayAll();\n\n        taskBusiness.assignParentForTask(task, -1, null);\n\n        verifyAll();\n    }\n\n    @Test(expected = ObjectNotFoundException.class)\n    @DirtiesContext\n    public void testAssignParentForTask_backlogNotIteration() {\n        expect(iterationBusiness.retrieve(123)).andThrow(\n                new ObjectNotFoundException());\n        replayAll();\n\n        taskBusiness.assignParentForTask(task, 123, null);\n\n        verifyAll();\n    }\n\n    @Test(expected = IllegalArgumentException.class)\n    @DirtiesContext\n    public void testAssignParentForTask_bothIdsGiven() {\n        taskBusiness.assignParentForTask(task, 123, 456);\n    }\n\n    /*\n     * TEST MOVING TASKS.\n     * \n     * Moving tasks should update both the source and destination backlogs'\n     * histories.\n     */\n\n    @Test\n    @DirtiesContext\n    public void testMove_fromIterationToIteration() {\n        Iteration source = new Iteration();\n        source.setId(222);\n        Iteration destination = new Iteration();\n        destination.setId(666);\n\n        task.setIteration(source);\n\n        expect(iterationBusiness.retrieve(destination.getId())).andReturn(\n                destination);\n        taskDAO.store(task);\n        iterationHistoryEntryBusiness.updateIterationHistory(source.getId());\n        iterationHistoryEntryBusiness.updateIterationHistory(destination\n                .getId());\n\n        replayAll();\n\n        taskBusiness.move(task, destination.getId(), null);\n\n        assertEquals(destination, task.getIteration());\n        assertNull(task.getStory());\n\n        verifyAll();\n    }\n\n    @Test\n    @DirtiesContext\n    public void testMove_fromIterationStoryToIterationStory() {\n        Iteration iter = new Iteration();\n        iter.setId(654);\n        Iteration iter2 = new Iteration();\n        iter2.setId(999);\n\n        Story source = new Story();\n        source.setId(397);\n        source.setIteration(iter);\n\n        Story destination = new Story();\n        destination.setId(1223);\n        destination.setIteration(iter2);\n\n        task.setStory(source);\n\n        expect(storyBusiness.retrieve(destination.getId())).andReturn(\n                destination);\n        taskDAO.store(task);\n        iterationHistoryEntryBusiness.updateIterationHistory(iter.getId());\n        iterationHistoryEntryBusiness.updateIterationHistory(iter2.getId());\n\n        replayAll();\n\n        taskBusiness.move(task, null, destination.getId());\n\n        assertEquals(destination, task.getStory());\n        assertNull(task.getIteration());\n\n        verifyAll();\n    }\n\n    @Test\n    @DirtiesContext\n    public void testMove_fromProjectStoryToIterationStory() {\n        Project proj = new Project();\n        proj.setId(654);\n        Iteration iter2 = new Iteration();\n        iter2.setId(999);\n\n        Story source = new Story();\n        source.setId(397);\n        source.setBacklog(proj);\n\n        Story destination = new Story();\n        destination.setId(1223);\n        destination.setIteration(iter2);\n\n        task.setStory(source);\n\n        expect(storyBusiness.retrieve(destination.getId())).andReturn(\n                destination);\n        taskDAO.store(task);\n        iterationHistoryEntryBusiness.updateIterationHistory(iter2.getId());\n\n        replayAll();\n\n        taskBusiness.move(task, null, destination.getId());\n\n        assertEquals(destination, task.getStory());\n        assertNull(task.getIteration());\n\n        verifyAll();\n    }\n\n    @Test\n    @DirtiesContext\n    public void testMove_fromIterationToProject() {\n        Project proj = new Project();\n        proj.setId(654);\n        Iteration iter = new Iteration();\n        iter.setId(999);\n\n        Story source = new Story();\n        source.setId(397);\n        source.setIteration(iter);\n\n        Story destination = new Story();\n        destination.setId(1223);\n        destination.setBacklog(proj);\n\n        task.setStory(source);\n\n        expect(storyBusiness.retrieve(destination.getId())).andReturn(\n                destination);\n        taskDAO.store(task);\n        iterationHistoryEntryBusiness.updateIterationHistory(iter.getId());\n\n        replayAll();\n\n        taskBusiness.move(task, null, destination.getId());\n\n        assertEquals(destination, task.getStory());\n        assertNull(task.getIteration());\n\n        verifyAll();\n    }\n\n    @Test\n    @DirtiesContext\n    public void testMove_toStoryUnderSameIteration() {\n        Iteration iter = new Iteration();\n\n        Story source = new Story();\n        source.setId(397);\n        source.setIteration(iter);\n\n        Story destination = new Story();\n        destination.setId(1223);\n        destination.setIteration(iter);\n\n        task.setStory(source);\n\n        expect(storyBusiness.retrieve(destination.getId())).andReturn(\n                destination);\n        taskDAO.store(task);\n        replayAll();\n\n        taskBusiness.move(task, null, destination.getId());\n\n        assertEquals(destination, task.getStory());\n        assertNull(task.getIteration());\n\n        verifyAll();\n    }\n\n    @Test(expected = IllegalArgumentException.class)\n    @DirtiesContext\n    public void testMove_nullTask() {\n        taskBusiness.move(null, null, null);\n    }\n\n    @Test(expected = IllegalArgumentException.class)\n    @DirtiesContext\n    public void testMove_bothParentIdsNull() {\n        taskBusiness.move(task, null, null);\n    }\n\n    @Test(expected = IllegalArgumentException.class)\n    @DirtiesContext\n    public void testMove_bothIdsGiven() {\n        taskBusiness.move(task, 123, 456);\n    }\n\n    /*\n     * RANKING\n     */\n\n    Story rankParentStory;\n\n    Task firstTaskInRank;\n    Task secondTaskInRank;\n    Task thirdTaskInRank;\n    Task fourthTaskInRank;\n\n    @Before\n    public void setUp_ranking() {\n        firstTaskInRank = new Task();\n        secondTaskInRank = new Task();\n        thirdTaskInRank = new Task();\n        fourthTaskInRank = new Task();\n\n        firstTaskInRank.setId(111);\n        secondTaskInRank.setId(222);\n        thirdTaskInRank.setId(333);\n        fourthTaskInRank.setId(444);\n\n        firstTaskInRank.setRank(0);\n        secondTaskInRank.setRank(1);\n        thirdTaskInRank.setRank(5);\n        fourthTaskInRank.setRank(6);\n\n        rankParentStory = new Story();\n        rankParentStory.setId(22);\n\n        firstTaskInRank.setStory(rankParentStory);\n        secondTaskInRank.setStory(rankParentStory);\n        thirdTaskInRank.setStory(rankParentStory);\n        fourthTaskInRank.setStory(rankParentStory);\n    }\n\n    private void checkRanks(int first, int second, int third, int fourth) {\n        assertEquals(\"First rank does not match\", first, firstTaskInRank\n                .getRank().intValue());\n        assertEquals(\"Second rank does not match\", second, secondTaskInRank\n                .getRank().intValue());\n        assertEquals(\"Third rank does not match\", third, thirdTaskInRank\n                .getRank().intValue());\n        assertEquals(\"Fourth rank does not match\", fourth, fourthTaskInRank\n                .getRank().intValue());\n    }\n\n    @Test\n    @DirtiesContext\n    public void testRankUnderTask_twoUpwards() {\n        Collection<Task> returnedTasksWithRankBetween = Arrays.asList(\n                secondTaskInRank, thirdTaskInRank);\n\n        expect(taskDAO.getTasksWithRankBetween(1, 5, null, rankParentStory))\n                .andReturn(returnedTasksWithRankBetween);\n\n        replayAll();\n        Task actual = taskBusiness.rankUnderTask(fourthTaskInRank,\n                firstTaskInRank);\n        verifyAll();\n\n        checkRanks(0, 2, 6, 1);\n        assertSame(fourthTaskInRank, actual);\n    }\n\n    @Test\n    @DirtiesContext\n    public void testRankUnderTask_twoDownwards() {\n        expect(taskDAO.getTasksWithRankBetween(1, 5, null, rankParentStory))\n                .andReturn(Arrays.asList(secondTaskInRank, thirdTaskInRank));\n        replayAll();\n        taskBusiness.rankUnderTask(firstTaskInRank, thirdTaskInRank);\n        verifyAll();\n        checkRanks(5, 0, 4, 6);\n    }\n\n    @Test\n    @DirtiesContext\n    public void testRankUnderTask_toTop() {\n        expect(taskDAO.getTasksWithRankBetween(0, 4, null, rankParentStory))\n                .andReturn(\n                        Arrays.asList(firstTaskInRank, secondTaskInRank,\n                                thirdTaskInRank));\n        replayAll();\n        taskBusiness.rankUnderTask(thirdTaskInRank, null);\n        verifyAll();\n        checkRanks(1, 2, 0, 6);\n    }\n\n    @Test\n    @DirtiesContext\n    public void testRankUnderTask_toBottom() {\n        expect(taskDAO.getTasksWithRankBetween(1, 6, null, rankParentStory))\n                .andReturn(\n                        Arrays.asList(secondTaskInRank, thirdTaskInRank,\n                                fourthTaskInRank));\n        replayAll();\n        taskBusiness.rankUnderTask(firstTaskInRank, fourthTaskInRank);\n        verifyAll();\n        checkRanks(6, 0, 4, 5);\n    }\n\n    @Test(expected = IllegalArgumentException.class)\n    @DirtiesContext\n    public void testRankUnderTask_nullTaskGiven() {\n        replayAll();\n        taskBusiness.rankUnderTask(null, null);\n        verifyAll();\n    }\n\n    @Test\n    @DirtiesContext\n    public void testRankUnderTask_checkUnderSameIteration() {\n        Task first = new Task();\n        Task second = new Task();\n        Iteration iter = new Iteration();\n\n        first.setIteration(iter);\n        second.setIteration(iter);\n\n        expect(taskDAO.getTasksWithRankBetween(1, 0, iter, null)).andReturn(\n                new ArrayList<Task>());\n        replayAll();\n        taskBusiness.rankUnderTask(first, second);\n        verifyAll();\n    }\n\n    @Test(expected = IllegalArgumentException.class)\n    @DirtiesContext\n    public void testRankUnderTask_noStory_differentIteration() {\n        Task first = new Task();\n        Task second = new Task();\n\n        first.setIteration(new Iteration());\n        second.setIteration(new Iteration());\n\n        replayAll();\n        taskBusiness.rankUnderTask(first, second);\n        verifyAll();\n    }\n\n    @Test(expected = IllegalArgumentException.class)\n    @DirtiesContext\n    public void testRankUnderTask_tasksNotUnderSameStory() {\n        Task newTask = new Task();\n        newTask.setStory(new Story());\n\n        replayAll();\n        taskBusiness.rankUnderTask(firstTaskInRank, newTask);\n        verifyAll();\n    }\n\n    /*\n     * RANK TO BOTTOM\n     */\n    @Test\n    @DirtiesContext\n    public void testRankToBottom_story() {\n        Task last = new Task();\n        last.setRank(230);\n        Story story = new Story();\n        expect(storyBusiness.retrieve(22)).andReturn(story);\n        expect(taskDAO.getLastTaskInRank(story, null)).andReturn(last);\n        replayAll();\n        Task actual = taskBusiness.rankToBottom(task, 22, null);\n        verifyAll();\n        assertEquals(task.getId(), actual.getId());\n        assertEquals(231, actual.getRank().intValue());\n    }\n\n    @Test\n    @DirtiesContext\n    public void testRankToBottom_iteration() {\n        Task last = new Task();\n        last.setRank(22);\n        Iteration iter = new Iteration();\n        expect(iterationBusiness.retrieve(561)).andReturn(iter);\n        expect(taskDAO.getLastTaskInRank(null, iter)).andReturn(last);\n        replayAll();\n        Task actual = taskBusiness.rankToBottom(task, null, 561);\n        verifyAll();\n        assertEquals(task.getId(), actual.getId());\n        assertEquals(23, actual.getRank().intValue());\n    }\n\n    @Test(expected = IllegalArgumentException.class)\n    @DirtiesContext\n    public void testRankToBottom_noTaskGiven() {\n        taskBusiness.rankToBottom(null, null, 561);\n    }\n\n    @Test(expected = IllegalArgumentException.class)\n    @DirtiesContext\n    public void testRankToBottom_noParentGiven() {\n        taskBusiness.rankToBottom(task, null, null);\n    }\n\n    /*\n     * RANK AND MOVE\n     */\n\n    @Test\n    @DirtiesContext\n    public void testRankAndMove_underStoryToTop() {\n        Task rankedTask = new Task();\n        Story expectedParent = new Story();\n        expectedParent.setId(123);\n        expect(storyBusiness.retrieve(123)).andReturn(expectedParent).times(2);\n        expect(taskDAO.getLastTaskInRank(expectedParent, null)).andReturn(\n                fourthTaskInRank);\n        expect(\n                taskDAO.getTasksWithRankBetween(0, fourthTaskInRank.getRank(),\n                        null, expectedParent)).andReturn(\n                Arrays.asList(firstTaskInRank, secondTaskInRank,\n                        thirdTaskInRank, fourthTaskInRank));\n        replayAll();\n        Task actual = taskBusiness.rankAndMove(rankedTask, null, 123, null);\n        verifyAll();\n\n        assertEquals(expectedParent, actual.getStory());\n        assertEquals(0, actual.getRank().intValue());\n    }\n\n    @Test\n    @DirtiesContext\n    public void testRankAndMove_underIteration() {\n        Iteration expectedParent = new Iteration();\n        expectedParent.setId(222);\n        Task upperTask = new Task();\n        upperTask.setRank(4);\n        upperTask.setIteration(expectedParent);\n        Task lastTask = new Task();\n        lastTask.setRank(12);\n        expect(iterationBusiness.retrieve(222)).andReturn(expectedParent)\n                .times(2);\n        expect(taskDAO.getLastTaskInRank(null, expectedParent)).andReturn(\n                lastTask);\n        expect(taskDAO.getTasksWithRankBetween(5, 12, expectedParent, null))\n                .andReturn(Arrays.asList(lastTask));\n        replayAll();\n        Task actual = taskBusiness\n                .rankAndMove(new Task(), upperTask, null, 222);\n        verifyAll();\n\n        assertEquals(expectedParent, actual.getIteration());\n        assertEquals(5, actual.getRank().intValue());\n    }\n\n    @Test(expected = IllegalArgumentException.class)\n    @DirtiesContext\n    public void testRankAndMove_nullTask() {\n        replayAll();\n        taskBusiness.rankAndMove(null, null, null, null);\n        verifyAll();\n    }\n\n    @Test(expected = IllegalArgumentException.class)\n    @DirtiesContext\n    public void testRankAndMove_noParent() {\n        replayAll();\n        taskBusiness.rankAndMove(new Task(), null, null, null);\n        verifyAll();\n    }\n\n    @Test(expected = IllegalArgumentException.class)\n    @DirtiesContext\n    public void testRankAndMove_bothParents() {\n        replayAll();\n        taskBusiness.rankAndMove(new Task(), null, 123, 345);\n        verifyAll();\n    }\n\n    @Test\n    @DirtiesContext\n    public void testDeleteWithHandlingChoice_delete() {\n        Task task = new Task();\n        task.setIteration(new Iteration());\n        task.setId(50);\n        expect(taskDAO.get(50)).andReturn(task);\n        hourEntryBusiness.deleteAll(task.getHourEntries());\n        taskDAO.remove(50);\n        replayAll();\n        taskBusiness.delete(50, HourEntryHandlingChoice.DELETE);\n        verifyAll();\n    }\n\n    @Test\n    @DirtiesContext\n    public void testDeleteWithHandlingChoice_move_toStory() {\n        Task task = new Task();\n        task.setStory(new Story());\n        task.setId(50);\n        expect(taskDAO.get(50)).andReturn(task);\n        hourEntryBusiness.moveToStory(task.getHourEntries(), task.getStory());\n        taskDAO.remove(50);\n        replayAll();\n        taskBusiness.delete(50, HourEntryHandlingChoice.MOVE);\n        verifyAll();\n    }\n\n    @Test\n    @DirtiesContext\n    public void testDeleteWithHandlingChoice_move_toBacklog() {\n        Task task = new Task();\n        task.setIteration(new Iteration());\n        task.setId(50);\n        expect(taskDAO.get(50)).andReturn(task);\n        hourEntryBusiness.moveToBacklog(task.getHourEntries(), task\n                .getIteration());\n        taskDAO.remove(50);\n        replayAll();\n        taskBusiness.delete(50, HourEntryHandlingChoice.MOVE);\n        verifyAll();\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\TaskSplitBusinessTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["TaskSplitBusinessTest"], "AN": ["testable", "taskBusiness", "iteration", "originalTask", "newTasks", "createdTasks", "parentStory"], "SCS_VariableDeclarator": ["testable", "taskBusiness", "iteration", "originalTask", "newTasks", "createdTasks", "parentStory", "responsible"], "MN": ["setUp_dependencies", "setUp_data", "verifyAll", "replayAll", "testSplitTask_iterationTask", "testSplitTask_storyTask", "createChildTasks", "testSplitTask_successWithEmptyList", "testSplitTask_nullOriginal", "testSplitTask_originalNotPersisted"], "PN": ["storyId", "iterationId"], "SCS_MemberReference": ["testable", "taskBusiness", "taskBusiness", "iteration", "parentStory", "iteration", "originalTask", "responsible", "newTasks", "createdTasks", "taskBusiness", "taskBusiness", "iteration", "originalTask", "originalTask", "newTasks", "parentStory", "originalTask", "originalTask", "newTasks", "iterationId", "storyId", "originalTask", "iterationId", "storyId", "originalTask", "originalTask"], "SCS_ClassReference": ["", "TaskBusiness", "testable", "iteration", "parentStory", "parentStory", "originalTask", "originalTask", "originalTask", null, "newTasks", "newTasks", "createdTasks", "createdTasks", "", "", "originalTask", "originalTask", "taskBusiness", "", "", "testable", "", "originalTask", "originalTask", "taskBusiness", "", "", "testable", "", "", null, "createdTasks", "taskBusiness", "newTasks", "", null, "createdTasks", "taskBusiness", "createdTasks", "", null, "createdTasks", "taskBusiness", "newTasks", "", null, "createdTasks", "taskBusiness", "createdTasks", "testable", "IllegalArgumentException", "testable", "Arrays", "RuntimeException", "testable", "Arrays"], "SCS_MethodInvocation": ["createStrictMock", "setTaskBusiness", "setId", "setId", "setIteration", "setId", "setRank", "getResponsibles", "add", "add", "add", "add", "add", "verify", "replay", "setIteration", "setStory", "store", "createChildTasks", "replayAll", "splitTask", "verifyAll", "setIteration", "setStory", "store", "createChildTasks", "replayAll", "splitTask", "verifyAll", "expect", "andReturn", "get", "storeTask", "get", "expect", "andReturn", "get", "rankUnderTask", "get", "expect", "andReturn", "get", "storeTask", "get", "expect", "andReturn", "get", "rankUnderTask", "get", "splitTask", "splitTask", "asList", "splitTask", "asList"], "SCS_VariableDeclaration": ["User"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport static org.easymock.EasyMock.*;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport fi.hut.soberit.agilefant.business.impl.TaskSplitBusinessImpl;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.Task;\nimport fi.hut.soberit.agilefant.model.User;\n\npublic class TaskSplitBusinessTest {\n    TaskSplitBusinessImpl testable;\n\n    TaskBusiness taskBusiness;\n\n    Iteration iteration;\n\n    Task originalTask;\n\n    List<Task> newTasks;\n    List<Task> createdTasks;\n    \n    \n    Story parentStory;\n    \n\n    @Before\n    public void setUp_dependencies() {\n        testable = new TaskSplitBusinessImpl();\n\n        taskBusiness = createStrictMock(TaskBusiness.class);\n        testable.setTaskBusiness(taskBusiness);\n    }\n\n    @Before\n    public void setUp_data() {\n        iteration = new Iteration();\n        iteration.setId(3);\n\n        parentStory = new Story();\n        parentStory.setId(5);\n        parentStory.setIteration(iteration);\n        \n        originalTask = new Task();\n        originalTask.setId(1);\n        originalTask.setRank(2);\n\n        User responsible = new User();\n        originalTask.getResponsibles().add(responsible);\n\n        newTasks = new ArrayList<Task>();\n        newTasks.add(new Task());\n        newTasks.add(new Task());\n        \n        createdTasks = new ArrayList<Task>();\n        createdTasks.add(new Task());\n        createdTasks.add(new Task());\n    }\n\n    private void verifyAll() {\n        verify(taskBusiness);\n    }\n\n    private void replayAll() {\n        replay(taskBusiness);\n    }\n\n    @Test\n    public void testSplitTask_iterationTask() {\n        originalTask.setIteration(iteration);\n        originalTask.setStory(null);\n        \n        taskBusiness.store(originalTask);\n        createChildTasks(null, 3);\n        \n        replayAll();\n        testable.splitTask(originalTask, newTasks);\n        verifyAll();\n    }\n\n    @Test\n    public void testSplitTask_storyTask() {\n        originalTask.setIteration(null);\n        originalTask.setStory(parentStory);\n\n        taskBusiness.store(originalTask);\n        createChildTasks(5, null);\n        \n        replayAll();\n        testable.splitTask(originalTask, newTasks);\n        verifyAll();\n    }\n\n    private void createChildTasks(Integer storyId, Integer iterationId) {\n        expect(taskBusiness.storeTask(newTasks.get(0), iterationId, storyId, false))\n            .andReturn(createdTasks.get(0));\n        expect(taskBusiness.rankUnderTask(createdTasks.get(0), originalTask))\n            .andReturn(createdTasks.get(0));\n        \n        expect(taskBusiness.storeTask(newTasks.get(1), iterationId, storyId, false))\n            .andReturn(createdTasks.get(1));\n        expect(taskBusiness.rankUnderTask(createdTasks.get(1), originalTask))\n            .andReturn(createdTasks.get(1));\n    }\n\n    public void testSplitTask_successWithEmptyList() {\n        testable.splitTask(originalTask, new ArrayList<Task>());\n    }\n\n    @Test(expected = IllegalArgumentException.class)\n    public void testSplitTask_nullOriginal() {\n        testable.splitTask(null, Arrays.asList(new Task()));\n    }\n    \n    @Test(expected = RuntimeException.class)\n    public void testSplitTask_originalNotPersisted() {\n        testable.splitTask(new Task(), Arrays.asList(new Task()));\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\TeamBusinessTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["TeamBusinessTest"], "AN": ["teamBusiness", "teamDAO", "userBusiness"], "SCS_VariableDeclarator": ["teamBusiness", "teamDAO", "userBusiness", "team", "user", "actual", "team", "actual"], "MN": ["setUp_dependencies", "replayAll", "verifyAll", "testStoreTeam_existing", "testStoreTeam_newTeam", "testStoreTeam_nullCheck"], "PN": [], "SCS_MemberReference": ["teamBusiness", "teamDAO", "teamDAO", "userBusiness", "userBusiness", "teamDAO", "userBusiness", "teamDAO", "userBusiness", "user", "team", "team", "team", "actual", "user", "team", "team", "team", "team", "actual"], "SCS_ClassReference": ["", "TeamDAO", "teamBusiness", "", "UserBusiness", "teamBusiness", "", "", "team", "", null, "userBusiness", "", null, "userBusiness", "teamDAO", "", "teamBusiness", "Arrays", "", "", "", "team", null, "", "team", null, "", null, "teamDAO", "", null, "teamDAO", "", "teamBusiness", "", "", "IllegalArgumentException", "", "teamBusiness", ""], "SCS_MethodInvocation": ["createMock", "setTeamDAO", "createMock", "setUserBusiness", "replay", "verify", "setId", "expect", "andReturn", "retrieve", "expect", "andReturn", "retrieve", "store", "replayAll", "storeTeam", "asList", "verifyAll", "assertEquals", "assertEquals", "getUsers", "size", "assertTrue", "getUsers", "contains", "expect", "andReturn", "create", "expect", "andReturn", "get", "replayAll", "storeTeam", "verifyAll", "assertEquals", "replayAll", "storeTeam", "verifyAll"], "SCS_VariableDeclaration": ["Team", "User", "Team", "Team", "Team"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport static org.easymock.EasyMock.*;\nimport static org.junit.Assert.*;\n\nimport java.util.Arrays;\nimport java.util.HashSet;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport fi.hut.soberit.agilefant.business.impl.TeamBusinessImpl;\nimport fi.hut.soberit.agilefant.db.TeamDAO;\nimport fi.hut.soberit.agilefant.model.Team;\nimport fi.hut.soberit.agilefant.model.User;\n\npublic class TeamBusinessTest {\n    \n    private TeamBusinessImpl teamBusiness;\n    \n    private TeamDAO teamDAO;\n    private UserBusiness userBusiness;\n    \n    @Before\n    public void setUp_dependencies() {\n        teamBusiness = new TeamBusinessImpl();\n        \n        teamDAO = createMock(TeamDAO.class);\n        teamBusiness.setTeamDAO(teamDAO);\n        \n        userBusiness = createMock(UserBusiness.class);\n        teamBusiness.setUserBusiness(userBusiness);\n    }\n\n    private void replayAll() {\n        replay(teamDAO, userBusiness);\n    }\n\n    private void verifyAll() {\n        verify(teamDAO, userBusiness);\n    }\n\n    \n    @Test\n    public void testStoreTeam_existing() {\n        Team team = new Team();\n        team.setId(123);\n        \n        User user = new User();      \n\n        expect(userBusiness.retrieve(22)).andReturn(user);\n        expect(userBusiness.retrieve(13)).andReturn(new User());\n        teamDAO.store(team);\n        \n        replayAll();\n        Team actual = teamBusiness.storeTeam(team, new HashSet<Integer>(Arrays.asList(22, 13)), null, null);\n        verifyAll();\n        \n        assertEquals(team, actual);\n        assertEquals(2, team.getUsers().size());\n        assertTrue(team.getUsers().contains(user));\n    }\n    \n    @Test\n    public void testStoreTeam_newTeam() {\n        Team team = new Team();\n        expect(teamDAO.create(team)).andReturn(555);\n        expect(teamDAO.get(555)).andReturn(team);\n        \n        replayAll();\n        Team actual = teamBusiness.storeTeam(team, null, null, null);\n        verifyAll();\n        \n        assertEquals(team, actual);\n    }\n    \n    @Test(expected = IllegalArgumentException.class)\n    public void testStoreTeam_nullCheck() {\n        replayAll();\n        teamBusiness.storeTeam(null, null, null, null);\n        verifyAll();\n    }\n    \n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\TimesheetBusinessTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["TimesheetBusinessTest", "TimesheetTestNode"], "AN": ["hourEntryDAO", "backlogIds", "userIds", "startDate", "endDate", "backlogHE", "storyHE", "taskHE", "iterTaskHE", "sheetData"], "SCS_VariableDeclarator": ["hourEntryDAO", "backlogIds", "userIds", "startDate", "endDate", "backlogHE", "storyHE", "taskHE", "iterTaskHE", "sheetData", "prod", "proj", "iter", "story", "task", "iterationTask", "tsb", "nodes", "nodes", "tsb", "nodes", "tsb", "sheetData", "prod", "rootNode", "tsb", "nodes", "sheetData", "tsb", "nodes", "sheetData", "prod", "rootNode", "proj", "nonRootNode", "tsb", "nodes", "emptyBacklogHEList", "emptyStoryHEList", "emptyTaskHEList", "actualData", "emptyBacklogHEList", "emptyStoryHEList", "emptyTaskHEList", "actualData", "parentStoryNode", "parentIterationNode", "story", "task", "node", "data", "taskNode", "task", "node", "taskNode", "iteration", "task", "node", "data", "iter", "iterNode", "task", "taskNode", "iter", "iterNode", "task", "taskNode", "task", "node", "proj", "story", "storyNode", "sheetData", "storyNode", "storyNode", "story", "node", "project", "iteration", "blNode", "sheetData", "iterNode", "proj", "blNode", "iterNode", "proj", "blNode", "iteration", "blNode", "sheetData", "product", "project", "iteration", "iterationNode", "sheetData", "projectNode", "productNode"], "SCS_ConstructorDeclaration": ["TimesheetTestNode"], "MN": ["getEffortSum", "setUp", "getRootNodeSum_noNodes", "getRootNodeSum_oneNode", "getRootNodeSum_multipleNodes", "testGetRootNodes_simple", "testGetRootNodes_noRoots", "testGetRootNodes_muptipleBacklogs", "testGetUnlinkedTimesheetData_emptyDataset", "testGetUnlinkedTimesheetData_withData", "testLinkTasks", "testAttachTaskNodeToStoryNode_notInData", "testAttachTaskNodeToStoryNode_inData", "testAttachTaskNodeToStoryNode_nullStory", "testAttachTaskNodeToStoryNode_duplicate", "testAttachTaskNodeToIterationNode_notInData", "testAttachTaskNodeToIterationNode_inData", "testAttachTaskNodeToIterationNode_duplicate", "testAttachTaskNodeToIterationNode_nullIteration", "testAttachStoryNodeToBacklogNode_notInData", "testAttachStoryNodeToBacklogNode_inData", "testAttachStoryNodeToBacklogNode_duplicate", "testAttachStoryNodeToBacklogNode_nullBacklog", "testLinkStoriesToBacklogs", "testAttachBacklogNodeToBacklogNode_notInData", "testAttachBacklogNodeToBacklogNode_inData", "testAttachBacklogNodeToBacklogNode_duplicate", "testAttachBacklogNodeToBacklogNode_null", "testLinkBacklogs"], "PN": [], "SCS_MemberReference": ["hourEntryDAO", "hourEntryDAO", "backlogIds", "userIds", "startDate", "endDate", "prod", "proj", "iter", "story", "iter", "backlogHE", "proj", "storyHE", "story", "taskHE", "task", "iterTaskHE", "iterationTask", "sheetData", "backlogHE", "iterTaskHE", "storyHE", "taskHE", "iter", "prod", "nodes", "nodes", "nodes", "prod", "rootNode", "sheetData", "sheetData", "prod", "proj", "rootNode", "nonRootNode", "sheetData", "emptyBacklogHEList", "hourEntryDAO", "backlogIds", "startDate", "endDate", "userIds", "emptyStoryHEList", "hourEntryDAO", "backlogIds", "startDate", "endDate", "userIds", "emptyTaskHEList", "hourEntryDAO", "backlogIds", "startDate", "endDate", "userIds", "hourEntryDAO", "backlogIds", "startDate", "endDate", "userIds", "actualData", "hourEntryDAO", "backlogHE", "storyHE", "taskHE", "emptyBacklogHEList", "hourEntryDAO", "backlogIds", "startDate", "endDate", "userIds", "emptyStoryHEList", "hourEntryDAO", "backlogIds", "startDate", "endDate", "userIds", "emptyTaskHEList", "hourEntryDAO", "backlogIds", "startDate", "endDate", "userIds", "hourEntryDAO", "backlogIds", "startDate", "endDate", "userIds", "actualData", "hourEntryDAO", "sheetData", "story", "task", "data", "node", "node", "sheetData", "taskNode", "taskNode", "task", "sheetData", "node", "sheetData", "taskNode", "sheetData", "taskNode", "iteration", "task", "data", "node", "node", "iter", "iterNode", "iter", "task", "sheetData", "taskNode", "taskNode", "iter", "iterNode", "iter", "task", "sheetData", "taskNode", "sheetData", "taskNode", "task", "sheetData", "node", "proj", "story", "sheetData", "storyNode", "storyNode", "sheetData", "storyNode", "storyNode", "sheetData", "storyNode", "sheetData", "storyNode", "story", "sheetData", "node", "sheetData", "project", "iteration", "sheetData", "blNode", "blNode", "proj", "blNode", "sheetData", "iterNode", "iterNode", "proj", "blNode", "sheetData", "iterNode", "sheetData", "iterNode", "iteration", "sheetData", "blNode", "product", "project", "iteration", "iterationNode", "sheetData", "iterationNode", "projectNode", "iterationNode"], "SCS_ClassReference": ["", "HourEntryDAO", "Arrays", "Arrays", "prod", "proj", "prod", "iter", "iter", "story", "story", "task", "task", "iterationTask", "iterationTask", "backlogHE", "storyHE", "taskHE", "iterTaskHE", "sheetData", "sheetData", "sheetData", "sheetData", "sheetData", "sheetData", "", "tsb", "Collections", "", "tsb", "Arrays", "", "tsb", "Arrays", "", "tsb", "sheetData", "tsb", "", "nodes", "tsb", "", "nodes", "prod", "proj", "sheetData", "sheetData", "tsb", "", "nodes", "", null, null, "", null, null, "", null, null, "", "", "", "Arrays", "Arrays", "Arrays", "", null, null, "", null, null, "", null, null, "", "", "", "actualData", "", "actualData", "", "actualData", "", "actualData", "", "actualData", "", "actualData", "", "sheetData", "sheetData", "", "parentStoryNode", "", "parentIterationNode", "", "parentStoryNode", "", "parentStoryNode", null, "", "parentIterationNode", "", "parentIterationNode", null, "story", "task", "", "data", "", "data", null, null, "", "data", null, null, "sheetData", "", "sheetData", null, null, "task", "sheetData", "", "sheetData", null, null, "iteration", "task", "", "data", "", "data", null, null, "", "data", null, null, "iter", "sheetData", "task", "task", "", "sheetData", null, null, "iter", "sheetData", "task", "task", "", "sheetData", null, null, "task", "proj", "story", "story", "", "sheetData", "", "sheetData", null, null, "", "sheetData", null, null, "sheetData", "", "sheetData", null, null, "sheetData", "", "sheetData", null, null, "story", "story", "", "sheetData", null, null, "project", "iteration", "iteration", "", "sheetData", "", "sheetData", null, null, "sheetData", "iterNode", null, "sheetData", "", "blNode", null, "sheetData", "iterNode", null, "sheetData", "", "blNode", null, "iteration", "iteration", "product", "project", "project", "iteration", "iteration", "sheetData", "", "sheetData", "", "sheetData", "", "sheetData", null, "", "sheetData", null, "", "sheetData", null, "", "sheetData", null, null, "sheetData", "sheetData", "", "productNode", null, "", "projectNode", null], "SCS_MethodInvocation": ["createMock", "asList", "asList", "setId", "setId", "setParent", "setId", "setParent", "setId", "setIteration", "setId", "setStory", "setId", "setIteration", "setBacklog", "setStory", "setTask", "setTask", "addEntry", "addEntry", "addEntry", "addEntry", "addNode", "addNode", "assertEquals", "getRootNodeSum", "emptyList", "assertEquals", "getRootNodeSum", "asList", "assertEquals", "getRootNodeSum", "asList", "assertEquals", "getRootNodeSum", "addNode", "findRootNodes", "assertEquals", "size", "findRootNodes", "assertEquals", "size", "setId", "setId", "addNode", "addNode", "findRootNodes", "assertEquals", "size", "expect", "andReturn", "getBacklogHourEntriesByFilter", "expect", "andReturn", "getStoryHourEntriesByFilter", "expect", "andReturn", "getTaskHourEntriesByFilter", "replay", "assertNotNull", "verify", "asList", "asList", "asList", "expect", "andReturn", "getBacklogHourEntriesByFilter", "expect", "andReturn", "getStoryHourEntriesByFilter", "expect", "andReturn", "getTaskHourEntriesByFilter", "replay", "assertNotNull", "assertNotNull", "getBacklogNode", "assertNotNull", "getStoryNode", "assertNotNull", "getTaskNode", "assertNull", "getBacklogNode", "assertNull", "getStoryNode", "assertNull", "getTaskNode", "verify", "getStoryNode", "getBacklogNode", "assertFalse", "getHasChildren", "assertFalse", "getHasChildren", "assertTrue", "getHasChildren", "assertEquals", "getChildren", "size", "assertTrue", "getHasChildren", "assertEquals", "getTaskNodes", "size", "setId", "setStory", "assertNotNull", "getStoryNode", "assertEquals", "getStoryNode", "getChildren", "size", "assertEquals", "getStoryNode", "getChildren", "get", "getTaskNode", "assertEquals", "getStoryNode", "getChildren", "get", "setStory", "getTaskNode", "assertEquals", "getStoryNode", "getChildren", "size", "setId", "setIteration", "assertNotNull", "getBacklogNode", "assertEquals", "getBacklogNode", "getTaskNodes", "size", "assertEquals", "getBacklogNode", "getTaskNodes", "get", "setId", "addNode", "setId", "setIteration", "assertEquals", "getBacklogNode", "getTaskNodes", "get", "setId", "addNode", "setId", "setIteration", "assertEquals", "getBacklogNode", "getTaskNodes", "size", "setIteration", "setId", "setId", "setBacklog", "assertNotNull", "getBacklogNode", "assertEquals", "getBacklogNode", "getStoryNodes", "size", "assertEquals", "getBacklogNode", "getStoryNodes", "get", "getStoryNode", "assertEquals", "getBacklogNode", "getStoryNodes", "get", "getStoryNode", "assertEquals", "getBacklogNode", "getStoryNodes", "size", "setId", "setBacklog", "assertEquals", "getBacklogNode", "getStoryNodes", "size", "setId", "setId", "setParent", "assertNotNull", "getBacklogNode", "assertEquals", "getBacklogNode", "getBacklogNodes", "get", "getBacklogNode", "getBacklog", "getParent", "addNode", "assertEquals", "getBacklogNodes", "get", "getBacklogNode", "getBacklog", "getParent", "addNode", "assertEquals", "getBacklogNodes", "size", "setId", "setParent", "setId", "setId", "setParent", "setId", "setParent", "addNode", "assertNotNull", "getBacklogNode", "assertNotNull", "getBacklogNode", "assertTrue", "getBacklogNode", "getBacklog", "assertTrue", "getBacklogNode", "getBacklog", "assertTrue", "getBacklogNode", "getBacklog", "assertEquals", "getBacklogNode", "getBacklogNodes", "get", "getBacklogNode", "getBacklogNode", "assertTrue", "getBacklogNodes", "contains", "assertTrue", "getBacklogNodes", "contains"], "SCS_VariableDeclaration": ["Product", "Project", "Iteration", "Story", "Task", "Task", "TimesheetBusiness", "List", "List", "TimesheetBusiness", "List", "TimesheetBusiness", "TimesheetData", "Product", "BacklogTimesheetNode", "TimesheetBusiness", "List", "TimesheetData", "TimesheetBusiness", "List", "TimesheetData", "Product", "BacklogTimesheetNode", "Project", "BacklogTimesheetNode", "TimesheetBusiness", "List", "List", "List", "List", "TimesheetData", "List", "List", "List", "TimesheetData", "StoryTimesheetNode", "BacklogTimesheetNode", "Story", "Task", "TaskTimesheetNode", "TimesheetData", "TaskTimesheetNode", "Task", "TaskTimesheetNode", "TaskTimesheetNode", "Iteration", "Task", "TaskTimesheetNode", "TimesheetData", "Iteration", "BacklogTimesheetNode", "Task", "TaskTimesheetNode", "Iteration", "BacklogTimesheetNode", "Task", "TaskTimesheetNode", "Task", "TaskTimesheetNode", "Project", "Story", "StoryTimesheetNode", "TimesheetData", "StoryTimesheetNode", "StoryTimesheetNode", "Story", "StoryTimesheetNode", "Project", "Iteration", "BacklogTimesheetNode", "TimesheetData", "BacklogTimesheetNode", "Backlog", "BacklogTimesheetNode", "BacklogTimesheetNode", "Backlog", "BacklogTimesheetNode", "Iteration", "BacklogTimesheetNode", "TimesheetData", "Product", "Project", "Iteration", "BacklogTimesheetNode", "TimesheetData", "BacklogTimesheetNode", "BacklogTimesheetNode"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport static org.easymock.EasyMock.*;\nimport static org.junit.Assert.*;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport org.joda.time.DateTime;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport fi.hut.soberit.agilefant.business.impl.TimesheetBusinessImpl;\nimport fi.hut.soberit.agilefant.db.HourEntryDAO;\nimport fi.hut.soberit.agilefant.model.Backlog;\nimport fi.hut.soberit.agilefant.model.BacklogHourEntry;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.Product;\nimport fi.hut.soberit.agilefant.model.Project;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.StoryHourEntry;\nimport fi.hut.soberit.agilefant.model.Task;\nimport fi.hut.soberit.agilefant.model.TaskHourEntry;\nimport fi.hut.soberit.agilefant.transfer.BacklogTimesheetNode;\nimport fi.hut.soberit.agilefant.transfer.StoryTimesheetNode;\nimport fi.hut.soberit.agilefant.transfer.TaskTimesheetNode;\nimport fi.hut.soberit.agilefant.util.TimesheetData;\n\npublic class TimesheetBusinessTest extends TimesheetBusinessImpl {\n    \n    private HourEntryDAO hourEntryDAO;\n    \n    private Set<Integer> backlogIds;\n    private Set<Integer> userIds;\n    private DateTime startDate;\n    private DateTime endDate;\n    private BacklogHourEntry backlogHE;\n    private StoryHourEntry storyHE;\n    private TaskHourEntry taskHE;\n    private TaskHourEntry iterTaskHE;\n    private TimesheetData sheetData;\n    \n    private class TimesheetTestNode extends BacklogTimesheetNode {\n\n        public TimesheetTestNode() {\n            super(null);\n        }\n        @Override\n        public long getEffortSum() {\n            return 500L;\n        }\n    }\n    \n    @Before\n    public void setUp() {\n        this.hourEntryDAO = createMock(HourEntryDAO.class);\n        super.setHourEntryDAO(this.hourEntryDAO);\n        \n        backlogIds = new HashSet<Integer>(Arrays.asList(1,2,3));\n        userIds = new HashSet<Integer>(Arrays.asList(1,2));\n        startDate  = new DateTime(2009,5,5,1,1,0,0);\n        endDate = new DateTime(2009,10,10,1,1,0,0);\n        \n        Product prod = new Product();\n        prod.setId(1);\n        Project proj = new Project();\n        proj.setId(2);\n        prod.setParent(prod);\n        Iteration iter = new Iteration();\n        iter.setId(3);\n        iter.setParent(proj);\n        Story story = new Story();\n        story.setId(1);\n        story.setIteration(iter);\n        Task task = new Task();\n        task.setId(1);\n        task.setStory(story);\n        Task iterationTask = new Task();\n        iterationTask.setId(2);\n        iterationTask.setIteration(iter);\n        \n        backlogHE = new BacklogHourEntry();\n        backlogHE.setBacklog(proj);\n        storyHE = new StoryHourEntry();\n        storyHE.setStory(story);\n        taskHE = new TaskHourEntry();\n        taskHE.setTask(task);\n        iterTaskHE = new TaskHourEntry();\n        iterTaskHE.setTask(iterationTask);\n        \n        sheetData = new TimesheetData();\n        sheetData.addEntry(backlogHE);\n        sheetData.addEntry(iterTaskHE);\n        sheetData.addEntry(storyHE);\n        sheetData.addEntry(taskHE);\n        sheetData.addNode(new BacklogTimesheetNode(iter));\n        sheetData.addNode(new BacklogTimesheetNode(prod));\n    }\n    \n    @Test\n    public void getRootNodeSum_noNodes() {\n        TimesheetBusiness tsb = new TimesheetBusinessImpl();\n        assertEquals(0L, tsb.getRootNodeSum(null));\n        List<BacklogTimesheetNode> nodes = Collections.emptyList();\n        assertEquals(0L, tsb.getRootNodeSum(nodes));\n    }\n    \n    @Test\n    public void getRootNodeSum_oneNode() {\n        List<BacklogTimesheetNode> nodes = Arrays.asList((BacklogTimesheetNode)new TimesheetTestNode());\n        TimesheetBusiness tsb = new TimesheetBusinessImpl();\n        assertEquals(500L, tsb.getRootNodeSum(nodes));\n    }\n    \n    @Test\n    public void getRootNodeSum_multipleNodes() {\n        List<BacklogTimesheetNode> nodes = Arrays.asList((BacklogTimesheetNode)new TimesheetTestNode(), (BacklogTimesheetNode)new TimesheetTestNode());\n        TimesheetBusiness tsb = new TimesheetBusinessImpl();\n        assertEquals(1000L, tsb.getRootNodeSum(nodes));\n    }\n    \n    @Test\n    public void testGetRootNodes_simple() {\n        TimesheetData sheetData = new TimesheetData();\n        Product prod = new Product();\n        BacklogTimesheetNode rootNode = new BacklogTimesheetNode(prod);\n        sheetData.addNode(rootNode);\n        TimesheetBusiness tsb = new TimesheetBusinessImpl();\n        List<BacklogTimesheetNode> nodes = tsb.findRootNodes(sheetData);\n        assertEquals(1, nodes.size());\n    }\n    @Test\n    public void testGetRootNodes_noRoots() {\n        TimesheetData sheetData = new TimesheetData();\n        TimesheetBusiness tsb = new TimesheetBusinessImpl();\n        List<BacklogTimesheetNode> nodes = tsb.findRootNodes(sheetData);\n        assertEquals(0, nodes.size());\n    }\n    \n    @Test\n    public void testGetRootNodes_muptipleBacklogs() {\n        TimesheetData sheetData = new TimesheetData();\n        Product prod = new Product();\n        prod.setId(1);\n        BacklogTimesheetNode rootNode = new BacklogTimesheetNode(prod);\n        Project proj = new Project();\n        proj.setId(2);\n        BacklogTimesheetNode nonRootNode = new BacklogTimesheetNode(proj);\n\n        sheetData.addNode(rootNode);\n        sheetData.addNode(nonRootNode);\n        TimesheetBusiness tsb = new TimesheetBusinessImpl();\n        List<BacklogTimesheetNode> nodes = tsb.findRootNodes(sheetData);\n        assertEquals(1, nodes.size());\n    }\n    \n    @Test\n    public void testGetUnlinkedTimesheetData_emptyDataset() {\n        List<BacklogHourEntry> emptyBacklogHEList = new ArrayList<BacklogHourEntry>();\n        List<StoryHourEntry> emptyStoryHEList = new ArrayList<StoryHourEntry>();\n        List<TaskHourEntry> emptyTaskHEList = new ArrayList<TaskHourEntry>();\n        \n        expect(this.hourEntryDAO.getBacklogHourEntriesByFilter(backlogIds, startDate, endDate, userIds)).andReturn(emptyBacklogHEList);\n        expect(this.hourEntryDAO.getStoryHourEntriesByFilter(backlogIds, startDate, endDate, userIds)).andReturn(emptyStoryHEList);\n        expect(this.hourEntryDAO.getTaskHourEntriesByFilter(backlogIds, startDate, endDate, userIds)).andReturn(emptyTaskHEList);\n        \n        replay(this.hourEntryDAO);\n        \n        TimesheetData actualData = super.getUnlinkedTimesheetData(backlogIds, startDate, endDate, userIds);\n        assertNotNull(actualData);\n        verify(this.hourEntryDAO);\n    }\n    @Test\n    public void testGetUnlinkedTimesheetData_withData() {\n        List<BacklogHourEntry> emptyBacklogHEList = Arrays.asList(this.backlogHE);\n        List<StoryHourEntry> emptyStoryHEList = Arrays.asList(this.storyHE);\n        List<TaskHourEntry> emptyTaskHEList = Arrays.asList(this.taskHE);\n        \n        expect(this.hourEntryDAO.getBacklogHourEntriesByFilter(backlogIds, startDate, endDate, userIds)).andReturn(emptyBacklogHEList);\n        expect(this.hourEntryDAO.getStoryHourEntriesByFilter(backlogIds, startDate, endDate, userIds)).andReturn(emptyStoryHEList);\n        expect(this.hourEntryDAO.getTaskHourEntriesByFilter(backlogIds, startDate, endDate, userIds)).andReturn(emptyTaskHEList);\n        \n        replay(this.hourEntryDAO);\n        \n        TimesheetData actualData = super.getUnlinkedTimesheetData(backlogIds, startDate, endDate, userIds);\n        assertNotNull(actualData);\n        assertNotNull(actualData.getBacklogNode(2));\n        assertNotNull(actualData.getStoryNode(1));\n        assertNotNull(actualData.getTaskNode(1));\n        assertNull(actualData.getBacklogNode(1));\n        assertNull(actualData.getStoryNode(2));\n        assertNull(actualData.getTaskNode(2));\n        verify(this.hourEntryDAO);\n    }\n    \n    @Test\n    public void testLinkTasks() {\n        StoryTimesheetNode parentStoryNode = sheetData.getStoryNode(1);\n        BacklogTimesheetNode parentIterationNode = sheetData.getBacklogNode(3);\n        assertFalse(parentStoryNode.getHasChildren());\n        assertFalse(parentIterationNode.getHasChildren());\n        super.linkTasks(sheetData);\n        assertTrue(parentStoryNode.getHasChildren());\n        assertEquals(1, parentStoryNode.getChildren().size());  \n        assertTrue(parentIterationNode.getHasChildren());\n        assertEquals(1, parentIterationNode.getTaskNodes().size());\n    }\n    \n    @Test\n    public void testAttachTaskNodeToStoryNode_notInData() {\n        Story story = new Story();\n        story.setId(42);\n        Task task = new Task();\n        task.setStory(story);\n        TaskTimesheetNode node = new TaskTimesheetNode(task);\n        TimesheetData data = new TimesheetData();\n        super.attachTaskNodeToStoryNode(data, node);\n        assertNotNull(data.getStoryNode(42));\n        assertEquals(1, data.getStoryNode(42).getChildren().size());\n        assertEquals(node, data.getStoryNode(42).getChildren().get(0));\n    }\n    \n    @Test\n    public void testAttachTaskNodeToStoryNode_inData() {\n        TaskTimesheetNode taskNode = sheetData.getTaskNode(1);\n        super.attachTaskNodeToStoryNode(sheetData, taskNode);\n        assertEquals(taskNode, sheetData.getStoryNode(1).getChildren().get(0));\n    }\n    @Test\n    public void testAttachTaskNodeToStoryNode_nullStory() {\n        Task task = new Task();\n        task.setStory(null);\n        TaskTimesheetNode node = new TaskTimesheetNode(task);\n        super.attachTaskNodeToStoryNode(sheetData, node);\n    }\n    \n    @Test\n    public void testAttachTaskNodeToStoryNode_duplicate() {\n        TaskTimesheetNode taskNode = sheetData.getTaskNode(1);\n        super.attachTaskNodeToStoryNode(sheetData, taskNode);\n        super.attachTaskNodeToStoryNode(sheetData, taskNode);\n        assertEquals(1, sheetData.getStoryNode(1).getChildren().size());\n    }\n    \n    @Test\n    public void testAttachTaskNodeToIterationNode_notInData() {\n        Iteration iteration = new Iteration();\n        iteration.setId(42);\n        Task task = new Task();\n        task.setIteration(iteration);\n        TaskTimesheetNode node = new TaskTimesheetNode(task);\n        TimesheetData data = new TimesheetData();\n        super.attachTaskNodeToIterationNode(data, node);\n        assertNotNull(data.getBacklogNode(42));\n        assertEquals(1, data.getBacklogNode(42).getTaskNodes().size());\n        assertEquals(node, data.getBacklogNode(42).getTaskNodes().get(0));\n\n    }\n    \n    @Test\n    public void testAttachTaskNodeToIterationNode_inData() {\n        Iteration iter = new Iteration();\n        iter.setId(6);\n        BacklogTimesheetNode iterNode = new BacklogTimesheetNode(iter);\n        sheetData.addNode(iterNode);\n        Task task = new Task();\n        task.setId(3);\n        task.setIteration(iter);\n        TaskTimesheetNode taskNode = new TaskTimesheetNode(task);\n        super.attachTaskNodeToIterationNode(sheetData, taskNode);\n        assertEquals(taskNode, sheetData.getBacklogNode(6).getTaskNodes().get(0));\n    }\n    \n    @Test\n    public void testAttachTaskNodeToIterationNode_duplicate() {\n        Iteration iter = new Iteration();\n        iter.setId(6);\n        BacklogTimesheetNode iterNode = new BacklogTimesheetNode(iter);\n        sheetData.addNode(iterNode);\n        Task task = new Task();\n        task.setId(3);\n        task.setIteration(iter);\n        TaskTimesheetNode taskNode = new TaskTimesheetNode(task);\n        super.attachTaskNodeToIterationNode(sheetData, taskNode);\n        super.attachTaskNodeToIterationNode(sheetData, taskNode);\n        assertEquals(1, sheetData.getBacklogNode(6).getTaskNodes().size());\n    }\n    @Test\n    public void testAttachTaskNodeToIterationNode_nullIteration() {\n        Task task = new Task();\n        task.setIteration(null);\n        TaskTimesheetNode node = new TaskTimesheetNode(task);\n        super.attachTaskNodeToIterationNode(sheetData, node);\n    }\n    \n    @Test\n    public void testAttachStoryNodeToBacklogNode_notInData() {\n        Project proj = new Project();\n        proj.setId(42);\n        Story story = new Story();\n        story.setId(52);\n        story.setBacklog(proj);\n        StoryTimesheetNode storyNode = new StoryTimesheetNode(story);\n        TimesheetData sheetData = new TimesheetData();\n        super.attachStoryNodeToBacklogNode(sheetData, storyNode);\n        assertNotNull(sheetData.getBacklogNode(42));\n        assertEquals(1, sheetData.getBacklogNode(42).getStoryNodes().size());\n        assertEquals(storyNode, sheetData.getBacklogNode(42).getStoryNodes().get(0));\n    }\n    @Test\n    public void testAttachStoryNodeToBacklogNode_inData() {\n        StoryTimesheetNode storyNode = sheetData.getStoryNode(1);\n        super.attachStoryNodeToBacklogNode(sheetData, storyNode);\n        assertEquals(storyNode, sheetData.getBacklogNode(3).getStoryNodes().get(0));\n    }\n    @Test\n    public void testAttachStoryNodeToBacklogNode_duplicate() {\n        StoryTimesheetNode storyNode = sheetData.getStoryNode(1);\n        super.attachStoryNodeToBacklogNode(sheetData, storyNode);\n        super.attachStoryNodeToBacklogNode(sheetData, storyNode);\n        assertEquals(1, sheetData.getBacklogNode(3).getStoryNodes().size());\n    }\n    @Test\n    public void testAttachStoryNodeToBacklogNode_nullBacklog() {\n        Story story = new Story();\n        story.setId(5);\n        story.setBacklog(null);\n        StoryTimesheetNode node = new StoryTimesheetNode(story);\n        super.attachStoryNodeToBacklogNode(sheetData, node);\n    }\n    \n    @Test\n    public void testLinkStoriesToBacklogs() {\n        super.linkStories(sheetData);\n        assertEquals(1, sheetData.getBacklogNode(3).getStoryNodes().size());\n    }\n    \n    @Test\n    public void testAttachBacklogNodeToBacklogNode_notInData() {\n        Project project = new Project();\n        project.setId(10);\n        Iteration iteration = new Iteration();\n        iteration.setId(11);\n        iteration.setParent(project);\n        BacklogTimesheetNode blNode = new BacklogTimesheetNode(iteration);\n        TimesheetData sheetData = new TimesheetData();\n        super.attachBacklogNodeToBacklogNode(sheetData, blNode);\n        assertNotNull(sheetData.getBacklogNode(10));\n        assertEquals(blNode, sheetData.getBacklogNode(10).getBacklogNodes().get(0));\n    }\n    @Test\n    public void testAttachBacklogNodeToBacklogNode_inData() {\n        BacklogTimesheetNode iterNode = sheetData.getBacklogNode(3);\n        Backlog proj = iterNode.getBacklog().getParent();\n        BacklogTimesheetNode blNode = new BacklogTimesheetNode(proj);\n        sheetData.addNode(blNode);\n        super.attachBacklogNodeToBacklogNode(sheetData, iterNode);\n        assertEquals(iterNode, blNode.getBacklogNodes().get(0));\n    }\n    @Test\n    public void testAttachBacklogNodeToBacklogNode_duplicate() {\n        BacklogTimesheetNode iterNode = sheetData.getBacklogNode(3);\n        Backlog proj = iterNode.getBacklog().getParent();\n        BacklogTimesheetNode blNode = new BacklogTimesheetNode(proj);\n        sheetData.addNode(blNode);\n        super.attachBacklogNodeToBacklogNode(sheetData, iterNode);\n        super.attachBacklogNodeToBacklogNode(sheetData, iterNode);\n        assertEquals(1, blNode.getBacklogNodes().size());\n    }\n    @Test\n    public void testAttachBacklogNodeToBacklogNode_null() {\n        Iteration iteration = new Iteration();\n        iteration.setId(11);\n        iteration.setParent(null);\n        BacklogTimesheetNode blNode = new BacklogTimesheetNode(iteration);\n        TimesheetData sheetData = new TimesheetData();\n        super.attachBacklogNodeToBacklogNode(sheetData, blNode);\n\n    }\n    \n    @Test\n    public void testLinkBacklogs() {\n        Product product = new Product();\n        product.setId(1);\n        Project project = new Project();\n        project.setId(2);\n        project.setParent(product);\n        Iteration iteration = new Iteration();\n        iteration.setId(3);\n        iteration.setParent(project);\n        BacklogTimesheetNode iterationNode = new BacklogTimesheetNode(iteration);\n        TimesheetData sheetData = new TimesheetData();\n        sheetData.addNode(iterationNode);\n        super.linkBacklogs(sheetData);\n        assertNotNull(sheetData.getBacklogNode(1));\n        assertNotNull(sheetData.getBacklogNode(2));\n        assertTrue(sheetData.getBacklogNode(1).getBacklog() instanceof Product);\n        assertTrue(sheetData.getBacklogNode(2).getBacklog() instanceof Project);\n        assertTrue(sheetData.getBacklogNode(3).getBacklog() instanceof Iteration);\n        assertEquals(iterationNode, sheetData.getBacklogNode(2).getBacklogNodes().get(0));\n        BacklogTimesheetNode projectNode = sheetData.getBacklogNode(2);\n        BacklogTimesheetNode productNode = sheetData.getBacklogNode(1);\n        assertTrue(productNode.getBacklogNodes().contains(projectNode));\n        assertTrue(projectNode.getBacklogNodes().contains(iterationNode));\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\TimesheetExportBusinessTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["TimesheetExportBusinessTest"], "AN": ["product", "project", "iteration", "story", "storyTask", "iterationTask", "user", "productEntry", "taskEntry", "storyEntry", "date"], "SCS_VariableDeclarator": ["product", "project", "iteration", "story", "storyTask", "iterationTask", "user", "productEntry", "taskEntry", "storyEntry", "date", "heDAO", "backlogEntries", "storyEntries", "taskEntries", "actual", "backlogIds", "userIds", "startTime", "endtTime", "heDAO", "backlogEntries", "storyEntries", "taskEntries", "actual", "textProvider", "textProvider", "sheet", "row", "productCell", "projectCell", "iterationCell", "storyIdCell", "storyCell", "taskIdCell", "taskCell", "descriptionCell", "userCell", "dateCell", "effortCell", "wb", "helper", "style", "format", "numStyle", "numFormat", "headerStyle", "headerFont", "sheet", "row", "data", "productCell", "descCell", "userCell", "dateCell", "effortCell", "row", "data", "productCell", "projectCell", "iterationCell", "storyIdCell", "storyCell", "taskIdCell", "taskCell", "descCell", "userCell", "dateCell", "effortCell"], "MN": ["setUp", "testGetTimesheetRows_noData", "testGetTimesheetRows", "mockTextProvider", "testRenderHeader", "testInitializeColumnStyles", "testSizeColumns", "testSetRowValue_productEntry", "testSetRowValue_storyTaskEntry"], "PN": [], "SCS_MemberReference": ["product", "project", "iteration", "story", "iterationTask", "storyTask", "product", "project", "iteration", "project", "iteration", "story", "user", "productEntry", "product", "user", "taskEntry", "storyTask", "user", "storyEntry", "story", "backlogEntries", "storyEntries", "taskEntries", "heDAO", "heDAO", "heDAO", "productEntry", "storyEntry", "taskEntry", "backlogEntries", "backlogIds", "startTime", "endtTime", "userIds", "storyEntries", "backlogIds", "startTime", "endtTime", "userIds", "taskEntries", "backlogIds", "startTime", "endtTime", "userIds", "heDAO", "heDAO", "backlogIds", "startTime", "endtTime", "userIds", "heDAO", "COLUMN_NAMES", "COLUMN_NAMES", "COLUMN_NAMES", "COLUMN_NAMES", "COLUMN_NAMES", "COLUMN_NAMES", "COLUMN_NAMES", "COLUMN_NAMES", "COLUMN_NAMES", "COLUMN_NAMES", "COLUMN_NAMES", "textProvider", "row", "productCell", "projectCell", "iterationCell", "storyIdCell", "storyCell", "taskIdCell", "taskCell", "descriptionCell", "userCell", "dateCell", "effortCell", "textProvider", "sheet", "row", "productCell", "projectCell", "iterationCell", "storyIdCell", "storyCell", "taskIdCell", "taskCell", "descriptionCell", "userCell", "dateCell", "effortCell", "sheet", "textProvider", "textProvider", "sheet", "row", "productCell", "projectCell", "iterationCell", "storyIdCell", "storyCell", "taskIdCell", "taskCell", "descriptionCell", "userCell", "dateCell", "effortCell", "helper", "style", "DATE_FORMAT", "format", "numStyle", "EFFORT_FORMAT", "numFormat", "headerStyle", "headerFont", "HEADER_FONT_WEIGHT", "headerFont", "wb", "style", "helper", "format", "numStyle", "numFormat", "headerStyle", "headerFont", "wb", "wb", "style", "helper", "format", "numStyle", "numFormat", "headerStyle", "headerFont", "sheet", "sheet", "sheet", "productEntry", "productCell", "PRODUCT_COLUMN_NUM", "descCell", "DESCRIPTION_COLUMN_NUM", "userCell", "USER_COLUMN_NUM", "dateCell", "DATE_COLUMN_NUM", "effortCell", "EFFORT_COLUMN_NUM", "CELL_TYPE_NUMERIC", "productCell", "descCell", "userCell", "dateCell", "effortCell", "row", "row", "data", "productCell", "descCell", "userCell", "dateCell", "effortCell", "row", "taskEntry", "productCell", "PRODUCT_COLUMN_NUM", "projectCell", "PROJECT_COLUMN_NUM", "iterationCell", "ITERATION_COLUMN_NUM", "storyIdCell", "STORYID_COLUMN_NUM", "storyCell", "STORY_COLUMN_NUM", "taskIdCell", "TASKID_COLUMN_NUM", "taskCell", "TASK_COLUMN_NUM", "descCell", "DESCRIPTION_COLUMN_NUM", "userCell", "USER_COLUMN_NUM", "dateCell", "DATE_COLUMN_NUM", "effortCell", "EFFORT_COLUMN_NUM", "CELL_TYPE_NUMERIC", "productCell", "projectCell", "iterationCell", "storyIdCell", "storyCell", "taskIdCell", "taskCell", "descCell", "userCell", "dateCell", "effortCell", "row", "row", "data", "productCell", "projectCell", "iterationCell", "storyIdCell", "storyCell", "taskIdCell", "taskCell", "descCell", "userCell", "dateCell", "effortCell", "row"], "SCS_ClassReference": ["product", "project", "iteration", "story", "storyTask", "iterationTask", "project", "iteration", "story", "story", "iterationTask", "storyTask", "user", "productEntry", "productEntry", "productEntry", "productEntry", "productEntry", "date", "taskEntry", "taskEntry", "taskEntry", "taskEntry", "date", "taskEntry", "storyEntry", "", "HourEntryDAO", "Collections", "Collections", "Collections", "", null, "heDAO", "", null, "heDAO", "", null, "heDAO", null, "", "", "actual", "", "Arrays", "Arrays", "", "HourEntryDAO", "Arrays", "Arrays", "Arrays", "", null, "heDAO", "", null, "heDAO", "", null, "heDAO", null, "", "", "actual", "", "", "TextProvider", "", null, "textProvider", "", null, "textProvider", "", null, "textProvider", "", null, "textProvider", "", null, "textProvider", "", null, "textProvider", "", null, "textProvider", "", null, "textProvider", "", null, "textProvider", "", null, "textProvider", "", null, "textProvider", "", "", "Sheet", "", "Row", "", "Cell", "productCell", "productCell", "", "Cell", "projectCell", "projectCell", "", "Cell", "iterationCell", "iterationCell", "", "Cell", "storyIdCell", "storyIdCell", "", "Cell", "storyCell", "storyCell", "", "Cell", "taskIdCell", "taskIdCell", "", "Cell", "taskCell", "taskCell", "", "Cell", "descriptionCell", "descriptionCell", "", "Cell", "userCell", "userCell", "", "Cell", "dateCell", "dateCell", "", "Cell", "effortCell", "effortCell", "", null, "sheet", "", null, "row", "", null, "row", "", null, "row", "", null, "row", "", null, "row", "", null, "row", "", null, "row", "", null, "row", "", null, "row", "", null, "row", "", null, "row", "", "", "", "Workbook", "", "CreationHelper", "", null, "wb", "", "CellStyle", "", null, "wb", "", "DataFormat", "", null, "format", "", null, "helper", "style", "", "CellStyle", "", null, "wb", "", "DataFormat", "", null, "numFormat", "", null, "helper", "numStyle", "", "CellStyle", "", null, "wb", "", "Font", "", null, "wb", "headerFont", "headerStyle", "", "", "", "Sheet", "sheet", "sheet", "sheet", "sheet", "sheet", "sheet", "sheet", "sheet", "sheet", "sheet", "sheet", "", null, "sheet", "", null, "sheet", "", null, "sheet", "", null, "sheet", "", null, "sheet", "", null, "sheet", "", null, "sheet", "", null, "sheet", "", null, "sheet", "", null, "sheet", "", null, "sheet", "sheet", "", "", "", "Row", "", "Cell", "", null, "row", "productCell", "product", "", "Cell", "", null, "row", "descCell", "productEntry", "", "Cell", "", null, "row", "userCell", "user", "", "Cell", "", null, "row", "dateCell", "dateCell", "date", "", "Cell", "", null, "row", "effortCell", "effortCell", "effortCell", "", "", "", "Row", "", "Cell", "", null, "row", "productCell", "product", "", "Cell", "", null, "row", "projectCell", "project", "", "Cell", "", null, "row", "iterationCell", "iteration", "", "Cell", "", null, "row", "storyIdCell", "story", "", "Cell", "", null, "row", "storyCell", "story", "", "Cell", "", null, "row", "taskIdCell", "storyTask", "", "Cell", "", null, "row", "taskCell", "storyTask", "", "Cell", "", null, "row", "descCell", "taskEntry", "", "Cell", "", null, "row", "userCell", "user", "", "Cell", "", null, "row", "dateCell", "dateCell", "date", "", "Cell", "", null, "row", "effortCell", "effortCell", "effortCell", "", ""], "SCS_MethodInvocation": ["setName", "setName", "setName", "setName", "setName", "setName", "setParent", "setParent", "setIteration", "setBacklog", "setIteration", "setStory", "setFullName", "setBacklog", "setDescription", "setUser", "setMinutesSpent", "setDate", "toDateTime", "setTask", "setDescription", "setUser", "setDate", "toDateTime", "setMinutesSpent", "setStory", "createMock", "emptyList", "emptyList", "emptyList", "expect", "andReturn", "getBacklogHourEntriesByFilter", "expect", "andReturn", "getStoryHourEntriesByFilter", "expect", "andReturn", "getTaskHourEntriesByFilter", "setHourEntryDAO", "replay", "assertEquals", "size", "verify", "asList", "asList", "createMock", "asList", "asList", "asList", "expect", "andReturn", "getBacklogHourEntriesByFilter", "expect", "andReturn", "getStoryHourEntriesByFilter", "expect", "andReturn", "getTaskHourEntriesByFilter", "setHourEntryDAO", "replay", "assertEquals", "size", "verify", "createMock", "expect", "andReturn", "getText", "expect", "andReturn", "getText", "expect", "andReturn", "getText", "expect", "andReturn", "getText", "expect", "andReturn", "getText", "expect", "andReturn", "getText", "expect", "andReturn", "getText", "expect", "andReturn", "getText", "expect", "andReturn", "getText", "expect", "andReturn", "getText", "expect", "andReturn", "getText", "mockTextProvider", "createMock", "createMock", "createMock", "setCellValue", "setCellStyle", "createMock", "setCellValue", "setCellStyle", "createMock", "setCellValue", "setCellStyle", "createMock", "setCellValue", "setCellStyle", "createMock", "setCellValue", "setCellStyle", "createMock", "setCellValue", "setCellStyle", "createMock", "setCellValue", "setCellStyle", "createMock", "setCellValue", "setCellStyle", "createMock", "setCellValue", "setCellStyle", "createMock", "setCellValue", "setCellStyle", "createMock", "setCellValue", "setCellStyle", "expect", "andReturn", "createRow", "expect", "andReturn", "createCell", "expect", "andReturn", "createCell", "expect", "andReturn", "createCell", "expect", "andReturn", "createCell", "expect", "andReturn", "createCell", "expect", "andReturn", "createCell", "expect", "andReturn", "createCell", "expect", "andReturn", "createCell", "expect", "andReturn", "createCell", "expect", "andReturn", "createCell", "expect", "andReturn", "createCell", "replay", "verify", "createMock", "createMock", "expect", "andReturn", "getCreationHelper", "createMock", "expect", "andReturn", "createCellStyle", "createMock", "expect", "andReturn", "getFormat", "expect", "andReturn", "createDataFormat", "setDataFormat", "createMock", "expect", "andReturn", "createCellStyle", "createMock", "expect", "andReturn", "getFormat", "expect", "andReturn", "createDataFormat", "setDataFormat", "createMock", "expect", "andReturn", "createCellStyle", "createMock", "expect", "andReturn", "createFont", "setBoldweight", "setFont", "replay", "verify", "createMock", "autoSizeColumn", "autoSizeColumn", "autoSizeColumn", "autoSizeColumn", "autoSizeColumn", "autoSizeColumn", "autoSizeColumn", "autoSizeColumn", "autoSizeColumn", "autoSizeColumn", "autoSizeColumn", "expect", "andReturn", "getColumnWidth", "expect", "andReturn", "getColumnWidth", "expect", "andReturn", "getColumnWidth", "expect", "andReturn", "getColumnWidth", "expect", "andReturn", "getColumnWidth", "expect", "andReturn", "getColumnWidth", "expect", "andReturn", "getColumnWidth", "expect", "andReturn", "getColumnWidth", "expect", "andReturn", "getColumnWidth", "expect", "andReturn", "getColumnWidth", "expect", "andReturn", "getColumnWidth", "setColumnWidth", "replay", "verify", "createMock", "createMock", "expect", "andReturn", "createCell", "setCellValue", "getName", "createMock", "expect", "andReturn", "createCell", "setCellValue", "getDescription", "createMock", "expect", "andReturn", "createCell", "setCellValue", "getFullName", "createMock", "expect", "andReturn", "createCell", "setCellStyle", "setCellValue", "toDate", "createMock", "expect", "andReturn", "createCell", "setCellValue", "setCellType", "setCellStyle", "replay", "verify", "createMock", "createMock", "expect", "andReturn", "createCell", "setCellValue", "getName", "createMock", "expect", "andReturn", "createCell", "setCellValue", "getName", "createMock", "expect", "andReturn", "createCell", "setCellValue", "getName", "createMock", "expect", "andReturn", "createCell", "setCellValue", "getId", "createMock", "expect", "andReturn", "createCell", "setCellValue", "getName", "createMock", "expect", "andReturn", "createCell", "setCellValue", "getId", "createMock", "expect", "andReturn", "createCell", "setCellValue", "getName", "createMock", "expect", "andReturn", "createCell", "setCellValue", "getDescription", "createMock", "expect", "andReturn", "createCell", "setCellValue", "getFullName", "createMock", "expect", "andReturn", "createCell", "setCellStyle", "setCellValue", "toDate", "createMock", "expect", "andReturn", "createCell", "setCellValue", "setCellType", "setCellStyle", "replay", "verify"], "SCS_VariableDeclaration": ["HourEntryDAO", "List", "List", "List", "List", "Set", "Set", "DateTime", "DateTime", "HourEntryDAO", "List", "List", "List", "List", "TextProvider", "TextProvider", "Sheet", "Row", "Cell", "Cell", "Cell", "Cell", "Cell", "Cell", "Cell", "Cell", "Cell", "Cell", "Cell", "Workbook", "CreationHelper", "CellStyle", "DataFormat", "CellStyle", "DataFormat", "CellStyle", "Font", "Sheet", "Row", "TimesheetExportRowData", "Cell", "Cell", "Cell", "Cell", "Cell", "Row", "TimesheetExportRowData", "Cell", "Cell", "Cell", "Cell", "Cell", "Cell", "Cell", "Cell", "Cell", "Cell", "Cell"], "CO": ["//date format", "//effort format", "//header style", "// auto size calls", "// get size after auto size", "// no limit", "// too wide", "/*\n     * Test setRowValues with minimum fields (effort logged directly to a\n     * project)\n     */", "/*\n     * Test setRowValues with all possible fields (effort logged to a task\n     * located in an iteration-level story.\n     */"], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport static org.easymock.EasyMock.*;\nimport static org.junit.Assert.*;\n\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport org.apache.poi.ss.usermodel.Cell;\nimport org.apache.poi.ss.usermodel.CellStyle;\nimport org.apache.poi.ss.usermodel.CreationHelper;\nimport org.apache.poi.ss.usermodel.DataFormat;\nimport org.apache.poi.ss.usermodel.Font;\nimport org.apache.poi.ss.usermodel.Row;\nimport org.apache.poi.ss.usermodel.Sheet;\nimport org.apache.poi.ss.usermodel.Workbook;\nimport org.joda.time.DateTime;\nimport org.joda.time.DateTimeZone;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport com.opensymphony.xwork2.TextProvider;\n\nimport fi.hut.soberit.agilefant.business.impl.TimesheetExportBusinessImpl;\nimport fi.hut.soberit.agilefant.db.HourEntryDAO;\nimport fi.hut.soberit.agilefant.model.BacklogHourEntry;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.Product;\nimport fi.hut.soberit.agilefant.model.Project;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.StoryHourEntry;\nimport fi.hut.soberit.agilefant.model.Task;\nimport fi.hut.soberit.agilefant.model.TaskHourEntry;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.util.TimesheetExportRowData;\n\npublic class TimesheetExportBusinessTest extends TimesheetExportBusinessImpl {\n\n    private Product product;\n    private Project project;\n    private Iteration iteration;\n    private Story story;\n    private Task storyTask;\n    private Task iterationTask;\n\n    private User user;\n\n    private BacklogHourEntry productEntry;\n    private TaskHourEntry taskEntry;\n    private StoryHourEntry storyEntry;\n\n    private static DateTime date = new DateTime(2009, 6, 10, 12, 30, 0, 0);\n\n    @Before\n    public void setUp() {\n        product = new Product();\n        project = new Project();\n        iteration = new Iteration();\n        story = new Story();\n        iterationTask = new Task();\n        storyTask = new Task();\n\n        product.setName(\"product 1\");\n        project.setName(\"project 1\");\n        iteration.setName(\"iteration 1\");\n        story.setName(\"story 1\");\n        storyTask.setName(\"task 1\");\n        iterationTask.setName(\"task 2\");\n\n        project.setParent(product);\n        iteration.setParent(project);\n        story.setIteration(iteration);\n        story.setBacklog(project);\n        iterationTask.setIteration(iteration);\n        storyTask.setStory(story);\n\n        user = new User();\n        user.setFullName(\"User 1\");\n\n        productEntry = new BacklogHourEntry();\n        productEntry.setBacklog(product);\n        productEntry.setDescription(\"foofaa\");\n        productEntry.setUser(user);\n        productEntry.setMinutesSpent(60);\n        productEntry.setDate(date.toDateTime());\n\n        taskEntry = new TaskHourEntry();\n        taskEntry.setTask(storyTask);\n        taskEntry.setDescription(\"foo\");\n        taskEntry.setUser(user);\n        taskEntry.setDate(date.toDateTime());\n        taskEntry.setMinutesSpent(60);\n\n        storyEntry = new StoryHourEntry();\n        storyEntry.setStory(story);\n    }\n\n    @Test\n    public void testGetTimesheetRows_noData() {\n        HourEntryDAO heDAO = createMock(HourEntryDAO.class);\n        List<BacklogHourEntry> backlogEntries = Collections.emptyList();\n        List<StoryHourEntry> storyEntries = Collections.emptyList();\n        List<TaskHourEntry> taskEntries = Collections.emptyList();\n        expect(heDAO.getBacklogHourEntriesByFilter(null, null, null, null))\n                .andReturn(backlogEntries);\n        expect(heDAO.getStoryHourEntriesByFilter(null, null, null, null))\n                .andReturn(storyEntries);\n        expect(heDAO.getTaskHourEntriesByFilter(null, null, null, null))\n                .andReturn(taskEntries);\n        this.setHourEntryDAO(heDAO);\n        replay(heDAO);\n        List<TimesheetExportRowData> actual = super.getTimesheetRows(null,\n                null, null, null, null);\n        assertEquals(0, actual.size());\n        verify(heDAO);\n    }\n\n    @Test\n    public void testGetTimesheetRows() {\n        Set<Integer> backlogIds = new HashSet<Integer>(Arrays.asList(1, 2, 3));\n        Set<Integer> userIds = new HashSet<Integer>(Arrays.asList(1, 2));\n        DateTime startTime = new DateTime(2009, 1, 1, 0, 0, 0, 0);\n        DateTime endtTime = new DateTime(2009, 6, 1, 0, 0, 0, 0);\n        HourEntryDAO heDAO = createMock(HourEntryDAO.class);\n\n        List<BacklogHourEntry> backlogEntries = Arrays.asList(productEntry);\n        List<StoryHourEntry> storyEntries = Arrays.asList(storyEntry);\n        List<TaskHourEntry> taskEntries = Arrays.asList(taskEntry);\n\n        expect(\n                heDAO.getBacklogHourEntriesByFilter(backlogIds, startTime,\n                        endtTime, userIds)).andReturn(backlogEntries);\n        expect(\n                heDAO.getStoryHourEntriesByFilter(backlogIds, startTime,\n                        endtTime, userIds)).andReturn(storyEntries);\n        expect(\n                heDAO.getTaskHourEntriesByFilter(backlogIds, startTime,\n                        endtTime, userIds)).andReturn(taskEntries);\n\n        this.setHourEntryDAO(heDAO);\n\n        replay(heDAO);\n        List<TimesheetExportRowData> actual = super.getTimesheetRows(\n                backlogIds, startTime, endtTime, null, userIds);\n        assertEquals(3, actual.size());\n        verify(heDAO);\n\n    }\n\n    private TextProvider mockTextProvider() {\n        TextProvider textProvider = createMock(TextProvider.class);\n        expect(textProvider.getText(TimesheetExportBusiness.COLUMN_NAMES[0]))\n                .andReturn(\"PROD COL\");\n        expect(textProvider.getText(TimesheetExportBusiness.COLUMN_NAMES[1]))\n                .andReturn(\"PROJ COL\");\n        expect(textProvider.getText(TimesheetExportBusiness.COLUMN_NAMES[2]))\n                .andReturn(\"ITER COL\");\n        expect(textProvider.getText(TimesheetExportBusiness.COLUMN_NAMES[3]))\n                .andReturn(\"STORYID COL\");\n        expect(textProvider.getText(TimesheetExportBusiness.COLUMN_NAMES[4]))\n                .andReturn(\"STORY COL\");\n        expect(textProvider.getText(TimesheetExportBusiness.COLUMN_NAMES[5]))\n                .andReturn(\"TASKID COL\");\n        expect(textProvider.getText(TimesheetExportBusiness.COLUMN_NAMES[6]))\n                .andReturn(\"TASK COL\");\n        expect(textProvider.getText(TimesheetExportBusiness.COLUMN_NAMES[7]))\n                .andReturn(\"DESC COL\");\n        expect(textProvider.getText(TimesheetExportBusiness.COLUMN_NAMES[8]))\n                .andReturn(\"USER COL\");\n        expect(textProvider.getText(TimesheetExportBusiness.COLUMN_NAMES[9]))\n                .andReturn(\"DATE COL\");\n        expect(textProvider.getText(TimesheetExportBusiness.COLUMN_NAMES[10]))\n                .andReturn(\"EFF COL\");\n        return textProvider;\n    }\n\n    @Test\n    public void testRenderHeader() {\n        TextProvider textProvider = mockTextProvider();\n        Sheet sheet = createMock(Sheet.class);\n        Row row = createMock(Row.class);\n\n        Cell productCell = createMock(Cell.class);\n        productCell.setCellValue(\"PROD COL\");\n        productCell.setCellStyle(null);\n        Cell projectCell = createMock(Cell.class);\n        projectCell.setCellValue(\"PROJ COL\");\n        projectCell.setCellStyle(null);\n        Cell iterationCell = createMock(Cell.class);\n        iterationCell.setCellValue(\"ITER COL\");\n        iterationCell.setCellStyle(null);\n        Cell storyIdCell = createMock(Cell.class);\n        storyIdCell.setCellValue(\"STORYID COL\");\n        storyIdCell.setCellStyle(null);\n        Cell storyCell = createMock(Cell.class);\n        storyCell.setCellValue(\"STORY COL\");\n        storyCell.setCellStyle(null);\n        Cell taskIdCell = createMock(Cell.class);\n        taskIdCell.setCellValue(\"TASKID COL\");\n        taskIdCell.setCellStyle(null);\n        Cell taskCell = createMock(Cell.class);\n        taskCell.setCellValue(\"TASK COL\");\n        taskCell.setCellStyle(null);\n        Cell descriptionCell = createMock(Cell.class);\n        descriptionCell.setCellValue(\"DESC COL\");\n        descriptionCell.setCellStyle(null);\n        Cell userCell = createMock(Cell.class);\n        userCell.setCellValue(\"USER COL\");\n        userCell.setCellStyle(null);\n        Cell dateCell = createMock(Cell.class);\n        dateCell.setCellValue(\"DATE COL\");\n        dateCell.setCellStyle(null);\n        Cell effortCell = createMock(Cell.class);\n        effortCell.setCellValue(\"EFF COL\");\n        effortCell.setCellStyle(null);\n\n        expect(sheet.createRow(0)).andReturn(row);\n        expect(row.createCell(0)).andReturn(productCell);\n        expect(row.createCell(1)).andReturn(projectCell);\n        expect(row.createCell(2)).andReturn(iterationCell);\n        expect(row.createCell(3)).andReturn(storyIdCell);\n        expect(row.createCell(4)).andReturn(storyCell);\n        expect(row.createCell(5)).andReturn(taskIdCell);\n        expect(row.createCell(6)).andReturn(taskCell);\n        expect(row.createCell(7)).andReturn(descriptionCell);\n        expect(row.createCell(8)).andReturn(userCell);\n        expect(row.createCell(9)).andReturn(dateCell);\n        expect(row.createCell(10)).andReturn(effortCell);\n\n        replay(textProvider, sheet, row, productCell, projectCell,\n                iterationCell, storyIdCell, storyCell, taskIdCell, taskCell, descriptionCell, userCell,\n                dateCell, effortCell);\n        super.renderHeader(sheet, textProvider);\n        verify(textProvider, sheet, row, productCell, projectCell,\n                iterationCell, storyIdCell, storyCell, taskIdCell, taskCell, descriptionCell, userCell,\n                dateCell, effortCell);\n\n    }\n\n    @Test\n    public void testInitializeColumnStyles() {\n        Workbook wb = createMock(Workbook.class);\n        CreationHelper helper = createMock(CreationHelper.class);\n        expect(wb.getCreationHelper()).andReturn(helper);\n\n        //date format\n        CellStyle style = createMock(CellStyle.class);\n        expect(wb.createCellStyle()).andReturn(style);\n\n        DataFormat format = createMock(DataFormat.class);\n        expect(format.getFormat(DATE_FORMAT)).andReturn((Short) (short) 0);\n        expect(helper.createDataFormat()).andReturn(format);\n        style.setDataFormat((Short) (short) 0);\n\n        //effort format\n        CellStyle numStyle = createMock(CellStyle.class);\n        expect(wb.createCellStyle()).andReturn(numStyle);\n        DataFormat numFormat = createMock(DataFormat.class);\n        expect(numFormat.getFormat(EFFORT_FORMAT)).andReturn((Short)(short)1);\n        expect(helper.createDataFormat()).andReturn(numFormat);\n        numStyle.setDataFormat((Short)(short)1);\n        \n        //header style\n        CellStyle headerStyle = createMock(CellStyle.class);\n        expect(wb.createCellStyle()).andReturn(headerStyle);\n        Font headerFont = createMock(Font.class);\n        expect(wb.createFont()).andReturn(headerFont);\n        headerFont.setBoldweight(HEADER_FONT_WEIGHT);\n        headerStyle.setFont(headerFont);\n        \n        replay(wb, style, helper, format, numStyle, numFormat, headerStyle, headerFont);\n        super.initializeColumnStyles(wb);\n\n        verify(wb, style, helper, format, numStyle, numFormat, headerStyle, headerFont);\n    }\n\n    @Test\n    public void testSizeColumns() {\n        Sheet sheet = createMock(Sheet.class);\n        // auto size calls\n        sheet.autoSizeColumn(0);\n        sheet.autoSizeColumn(1);\n        sheet.autoSizeColumn(2);\n        sheet.autoSizeColumn(3);\n        sheet.autoSizeColumn(4);\n        sheet.autoSizeColumn(5);\n        sheet.autoSizeColumn(6);\n        sheet.autoSizeColumn(7);\n        sheet.autoSizeColumn(8);\n        sheet.autoSizeColumn(9);\n        sheet.autoSizeColumn(10);\n        // get size after auto size\n        expect(sheet.getColumnWidth(0)).andReturn(10);\n        expect(sheet.getColumnWidth(1)).andReturn(60 * 256); // no limit\n        expect(sheet.getColumnWidth(2)).andReturn(10);\n        expect(sheet.getColumnWidth(3)).andReturn(15 * 256);\n        expect(sheet.getColumnWidth(4)).andReturn(70 * 256); // too wide\n        expect(sheet.getColumnWidth(5)).andReturn(10);\n        expect(sheet.getColumnWidth(6)).andReturn(10);\n        expect(sheet.getColumnWidth(7)).andReturn(10);\n        expect(sheet.getColumnWidth(8)).andReturn(10);\n        expect(sheet.getColumnWidth(9)).andReturn(10);\n        expect(sheet.getColumnWidth(10)).andReturn(10);\n\n        sheet.setColumnWidth(4, 256 * 55);\n        replay(sheet);\n        super.sizeColumns(sheet);\n        verify(sheet);\n\n    }\n\n    /*\n     * Test setRowValues with minimum fields (effort logged directly to a\n     * project)\n     */\n    @Test\n    public void testSetRowValue_productEntry() {\n        Row row = createMock(Row.class);\n        TimesheetExportRowData data = new TimesheetExportRowData(productEntry);\n\n        Cell productCell = createMock(Cell.class);\n        expect(row.createCell(PRODUCT_COLUMN_NUM)).andReturn(productCell);\n        productCell.setCellValue(product.getName());\n\n        Cell descCell = createMock(Cell.class);\n        expect(row.createCell(DESCRIPTION_COLUMN_NUM)).andReturn(descCell);\n        descCell.setCellValue(productEntry.getDescription());\n\n        Cell userCell = createMock(Cell.class);\n        expect(row.createCell(USER_COLUMN_NUM)).andReturn(userCell);\n        userCell.setCellValue(user.getFullName());\n\n        Cell dateCell = createMock(Cell.class);\n        expect(row.createCell(DATE_COLUMN_NUM)).andReturn(dateCell);\n        dateCell.setCellStyle(null);\n        dateCell.setCellValue(date.toDate());\n\n        Cell effortCell = createMock(Cell.class); \n        expect(row.createCell(EFFORT_COLUMN_NUM)).andReturn(effortCell);\n        effortCell.setCellValue(1.0);\n        effortCell.setCellType(Cell.CELL_TYPE_NUMERIC);\n        effortCell.setCellStyle(null);\n\n        replay(productCell, descCell, userCell, dateCell, effortCell, row);\n        super.setRowValues(row, data);\n        verify(productCell, descCell, userCell, dateCell, effortCell, row);\n\n    }\n\n    /*\n     * Test setRowValues with all possible fields (effort logged to a task\n     * located in an iteration-level story.\n     */\n    @Test\n    public void testSetRowValue_storyTaskEntry() {\n        Row row = createMock(Row.class);\n        TimesheetExportRowData data = new TimesheetExportRowData(taskEntry);\n\n        Cell productCell = createMock(Cell.class);\n        expect(row.createCell(PRODUCT_COLUMN_NUM)).andReturn(productCell);\n        productCell.setCellValue(product.getName());\n\n        Cell projectCell = createMock(Cell.class);\n        expect(row.createCell(PROJECT_COLUMN_NUM)).andReturn(projectCell);\n        projectCell.setCellValue(project.getName());\n\n        Cell iterationCell = createMock(Cell.class);\n        expect(row.createCell(ITERATION_COLUMN_NUM)).andReturn(iterationCell);\n        iterationCell.setCellValue(iteration.getName());\n\n        Cell storyIdCell = createMock(Cell.class);\n        expect(row.createCell(STORYID_COLUMN_NUM)).andReturn(storyIdCell);\n        storyIdCell.setCellValue(\"\"+story.getId());\n        \n        Cell storyCell = createMock(Cell.class);\n        expect(row.createCell(STORY_COLUMN_NUM)).andReturn(storyCell);\n        storyCell.setCellValue(story.getName());\n\n        Cell taskIdCell = createMock(Cell.class);\n        expect(row.createCell(TASKID_COLUMN_NUM)).andReturn(taskIdCell);\n        taskIdCell.setCellValue(\"\"+storyTask.getId());\n        \n        Cell taskCell = createMock(Cell.class);\n        expect(row.createCell(TASK_COLUMN_NUM)).andReturn(taskCell);\n        taskCell.setCellValue(storyTask.getName());\n\n        Cell descCell = createMock(Cell.class);\n        expect(row.createCell(DESCRIPTION_COLUMN_NUM)).andReturn(descCell);\n        descCell.setCellValue(taskEntry.getDescription());\n\n        Cell userCell = createMock(Cell.class);\n        expect(row.createCell(USER_COLUMN_NUM)).andReturn(userCell);\n        userCell.setCellValue(user.getFullName());\n\n        Cell dateCell = createMock(Cell.class);\n        expect(row.createCell(DATE_COLUMN_NUM)).andReturn(dateCell);\n        dateCell.setCellStyle(null);\n        dateCell.setCellValue(date.toDate());\n\n        Cell effortCell = createMock(Cell.class);\n        expect(row.createCell(EFFORT_COLUMN_NUM)).andReturn(effortCell);\n        effortCell.setCellValue(1.0);\n        effortCell.setCellType(Cell.CELL_TYPE_NUMERIC);\n        effortCell.setCellStyle(null);\n\n        replay(productCell, projectCell, iterationCell, storyIdCell, storyCell, taskIdCell, taskCell,\n                descCell, userCell, dateCell, effortCell, row);\n        super.setRowValues(row, data);\n        verify(productCell, projectCell, iterationCell, storyIdCell, storyCell, taskIdCell, taskCell,\n                descCell, userCell, dateCell, effortCell, row);\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\TransferObjectBusinessTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["TransferObjectBusinessTest"], "AN": ["transferObjectBusiness", "hourEntryBusiness", "userBusiness", "teamBusiness", "backlogBusiness", "productBusiness", "projectBusiness", "iterationBusiness", "authorizationBusiness", "project", "iteration", "story1", "story2", "task", "assignedUser", "notAssignedUser", "team", "storyBusiness"], "SCS_VariableDeclarator": ["transferObjectBusiness", "hourEntryBusiness", "userBusiness", "teamBusiness", "backlogBusiness", "productBusiness", "projectBusiness", "iterationBusiness", "authorizationBusiness", "project", "iteration", "story1", "story2", "task", "assignedUser", "notAssignedUser", "team", "storyBusiness", "responsibles", "actualTO", "responsibles", "metrics", "actualTO", "past", "actual", "past", "actual", "user", "actual", "user1", "user2", "team", "actual", "user1", "user2", "team", "actual", "product", "products", "project", "iterationUnderProject", "iterationUnderProduct", "nodes", "node", "product", "product2", "products", "project", "nodes", "node", "product", "products", "project", "nodes", "node", "product", "project", "iterationUnderProject", "iterationUnderProduct", "nodes", "node", "adn", "product1", "product2", "products", "nodes", "actual", "product", "iter", "iter", "iter", "task", "entry", "user", "story", "iteration", "transferObj", "task", "entry", "iteration", "transferObj", "iteration", "story1", "story2", "task1", "task3", "task2", "assigned", "user", "users", "teams"], "MN": ["setUp_dependencies", "verifyAll", "replayAll", "setUp", "testConstructTaskTO", "testConstructStoryTO", "constructIterationTO", "constructProjectTO", "testConstructUserAutocompleteData", "testConstructTeamAutocompleteData_withUserIds", "testConstructTeamAutocompleteData_withoutUserIds", "testGetBacklogAutocompleteData", "testGetBacklogAutocompleteData_filterByBacklog", "testGetProjectAutocompleteData", "testGetCurrentIterationAutocompleteData", "getDataNodeById", "testConstructProductAutocompleteData", "testCalculateBacklogScheduleStatus_forProduct", "testCalculateBacklogScheduleStatus_forPastIteration", "testCalculateBacklogScheduleStatus_forCurrentIteration", "testCalculateBacklogScheduleStatus_forFutureIteration", "testCreateQueueudDailyWorkTaskTO_withStoryTask", "testCreateQueueudDailyWorkTaskTO_withIterationTask", "testCreateAssignedWorkTO", "setAccess"], "PN": ["id", "nodes"], "SCS_MemberReference": ["hourEntryBusiness", "hourEntryBusiness", "userBusiness", "userBusiness", "teamBusiness", "teamBusiness", "backlogBusiness", "backlogBusiness", "productBusiness", "productBusiness", "projectBusiness", "projectBusiness", "iterationBusiness", "iterationBusiness", "storyBusiness", "storyBusiness", "authorizationBusiness", "authorizationBusiness", "hourEntryBusiness", "userBusiness", "storyBusiness", "teamBusiness", "backlogBusiness", "productBusiness", "projectBusiness", "iterationBusiness", "authorizationBusiness", "hourEntryBusiness", "userBusiness", "storyBusiness", "teamBusiness", "backlogBusiness", "productBusiness", "projectBusiness", "iterationBusiness", "authorizationBusiness", "iteration", "project", "project", "assignedUser", "notAssignedUser", "story1", "story2", "iteration", "task", "assignedUser", "notAssignedUser", "iteration", "responsibles", "task", "responsibles", "assignedUser", "notAssignedUser", "iteration", "responsibles", "metrics", "story1", "story1", "metrics", "responsibles", "past", "PAST", "past", "PAST", "user", "user", "user", "transferObjectBusiness", "user1", "user2", "user1", "user1", "team", "transferObjectBusiness", "team", "user1", "user2", "user1", "user1", "team", "transferObjectBusiness", "team", "product", "products", "product", "project", "product", "product", "project", "iterationUnderProject", "iterationUnderProduct", "nodes", "product", "node", "nodes", "project", "product", "product2", "products", "product", "product", "project", "product2", "project", "product", "project", "product", "product", "product", "project", "product2", "product2", "nodes", "product", "node", "nodes", "project", "product", "products", "product", "project", "nodes", "project", "product", "project", "product", "iterationUnderProject", "iterationUnderProduct", "nodes", "iterationUnderProject", "node", "nodes", "iterationUnderProduct", "nodes", "id", "adn", "product1", "product2", "products", "product1", "product2", "nodes", "product1", "actual", "nodes", "product2", "ONGOING", "product", "PAST", "iter", "ONGOING", "iter", "FUTURE", "iter", "user", "task", "iteration", "story", "user", "entry", "task", "iteration", "entry", "story1", "story1", "task1", "task3", "iteration", "task1", "task2", "task3", "story2", "team", "user", "users", "team", "teams", "user"], "SCS_ClassReference": ["", "HourEntryBusiness", "transferObjectBusiness", "", "UserBusiness", "transferObjectBusiness", "", "TeamBusiness", "transferObjectBusiness", "", "BacklogBusiness", "transferObjectBusiness", "", "ProductBusiness", "transferObjectBusiness", "", "ProjectBusiness", "transferObjectBusiness", "", "IterationBusiness", "transferObjectBusiness", "", "StoryBusiness", "transferObjectBusiness", "", "AuthorizationBusiness", "transferObjectBusiness", "", "", "project", "iteration", "assignedUser", "notAssignedUser", "story1", "story1", "story2", "task", "Arrays", "task", "task", "task", "", null, "Long", null, "hourEntryBusiness", "", "", "transferObjectBusiness", "", "", "task", "actualTO", "", "actualTO", "Arrays", "story1", "story1", "", null, "storyBusiness", "", "transferObjectBusiness", "", "", "story1", "actualTO", "", "actualTO", "", "actualTO", "past", null, "past", null, "", "transferObjectBusiness", "", "", "actual", "past", null, "past", null, "", "transferObjectBusiness", "", "", "actual", "user", "user", "user", "user", "SecurityUtil", "", null, "userBusiness", "", null, "Arrays", "userBusiness", "", null, "", "actual", "", "actual", null, "", "actual", null, "", "actual", null, "", "actual", null, "", "actual", null, "", "user1", "user2", "team", "team", "team", "Arrays", "SecurityUtil", "", null, "userBusiness", "", null, "Arrays", "teamBusiness", "", null, "", "actual", "", "actual", null, "", "actual", null, "", "actual", null, "", "actual", null, "", "actual", null, "", "actual", null, null, "", "user1", "user2", "team", "team", "team", "Arrays", "SecurityUtil", "", null, "userBusiness", "", null, "Arrays", "teamBusiness", "", null, "", "actual", "", "actual", null, "", "actual", null, "", "actual", null, "", "actual", null, "", "actual", null, "", "actual", null, "", "", "product", "product", "products", "team", "project", "project", "project", "iterationUnderProject", "iterationUnderProject", "iterationUnderProject", "iterationUnderProduct", "iterationUnderProduct", "iterationUnderProduct", "", null, "Arrays", "backlogBusiness", "", null, "authorizationBusiness", "SecurityUtil", "", null, "authorizationBusiness", "SecurityUtil", "", "transferObjectBusiness", "", "", "nodes", "", "", "Backlog", null, "node", "", "node", "", "node", "", "", "node", "", "node", "node", "", "node", "", "product", "product", "product2", "product2", "products", "products", "team", "project", "project", "project", "", null, "Arrays", "backlogBusiness", "", null, "backlogBusiness", "", null, "backlogBusiness", "", null, "backlogBusiness", "", null, "backlogBusiness", "", null, "backlogBusiness", "", null, "authorizationBusiness", "SecurityUtil", "", null, "authorizationBusiness", "SecurityUtil", "", "transferObjectBusiness", "", "", "nodes", "", "", "Backlog", null, "node", "", "node", "", "node", "", "", "node", "", "node", "node", "", "node", "", "product", "product", "products", "team", "project", "project", "project", "", null, "Arrays", "projectBusiness", "", null, "authorizationBusiness", "SecurityUtil", "", "transferObjectBusiness", "", "", "nodes", "", "", "node", "", "node", "node", "", "node", "product", "product", "project", "project", "project", "iterationUnderProject", "iterationUnderProject", "iterationUnderProject", "iterationUnderProduct", "iterationUnderProduct", "iterationUnderProduct", "", null, "Arrays", "iterationBusiness", "", null, "authorizationBusiness", "SecurityUtil", "", null, "authorizationBusiness", "SecurityUtil", "", "transferObjectBusiness", "", "", "nodes", "", "", "node", "", "node", "", "", "node", "", "node", "adn", "", "product1", "product1", "product2", "product2", "products", "products", "team", "", null, "SecurityUtil", null, "userBusiness", "", null, "Arrays", "productBusiness", "", null, "authorizationBusiness", "SecurityUtil", "", null, "authorizationBusiness", "SecurityUtil", "", "transferObjectBusiness", "", "", "", "actual", "", "actual", "", "", "actual", "", "actual", "", "transferObjectBusiness", "iter", null, "iter", null, null, "", "transferObjectBusiness", "iter", "iter", null, "", "transferObjectBusiness", "iter", null, "iter", null, null, "", "transferObjectBusiness", "entry", "entry", "entry", "story", "story", "task", "iteration", "iteration", "story", "task", "task", "Arrays", "transferObjectBusiness", "", "transferObj", "", "transferObj", "task", "entry", "entry", "iteration", "iteration", "task", "transferObjectBusiness", "", "transferObj", "", "transferObj", "iteration", "story1", "story2", "task1", "task1", "task3", "task3", "story1", "Arrays", "task2", "task2", "", null, null, "storyBusiness", "EasyMock", "Story", "", null, null, "hourEntryBusiness", "EasyMock", "Collection", "", "transferObjectBusiness", "Arrays", "Arrays", "", "", "story1", "assigned", null, null, "", "story2", "assigned", null, null, "", "assigned", null, "", "assigned", null, "", "task2", "assigned", null, null, "", "assigned", null, null, null, "", "assigned", null, null, null, null, "users", "team", "teams", "user", "SecurityUtil"], "SCS_MethodInvocation": ["createMock", "setHourEntryBusiness", "createMock", "setUserBusiness", "createMock", "setTeamBusiness", "createMock", "setBacklogBusiness", "createMock", "setProductBusiness", "createMock", "setProjectBusiness", "createMock", "setIterationBusiness", "createMock", "setStoryBusiness", "createMock", "setAuthorizationBusiness", "verify", "replay", "setId", "setParent", "setId", "setId", "setIteration", "setId", "setId", "setId", "asList", "setIteration", "setResponsibles", "setHourEntries", "expect", "andReturn", "valueOf", "anyTimes", "calculateSum", "isNull", "replayAll", "constructTaskTO", "verifyAll", "assertEquals", "getId", "getId", "assertEquals", "getResponsibles", "asList", "setIteration", "setResponsibles", "expect", "andReturn", "calculateMetrics", "replayAll", "constructStoryTO", "verifyAll", "assertEquals", "getId", "getId", "assertEquals", "getMetrics", "assertEquals", "getResponsibles", "setStartDate", "minusMonths", "setEndDate", "minusMonths", "replayAll", "constructIterationTO", "verifyAll", "assertEquals", "getScheduleStatus", "setStartDate", "minusMonths", "setEndDate", "minusMonths", "replayAll", "constructProjectTO", "verifyAll", "assertEquals", "getScheduleStatus", "setId", "setFullName", "setLoginName", "setAdmin", "setLoggedUser", "expect", "andReturn", "retrieve", "expect", "andReturn", "asList", "retrieveAll", "replayAll", "constructUserAutocompleteData", "assertEquals", "size", "assertEquals", "get", "getId", "assertEquals", "get", "getName", "assertEquals", "get", "getMatchedString", "assertEquals", "get", "getBaseClassName", "assertNull", "get", "getIdList", "verifyAll", "setId", "setId", "setName", "setId", "setUsers", "asList", "setLoggedUser", "expect", "andReturn", "retrieve", "expect", "andReturn", "asList", "retrieveAll", "replayAll", "constructTeamAutocompleteData", "assertEquals", "size", "assertEquals", "get", "getId", "assertEquals", "get", "getName", "assertEquals", "get", "getMatchedString", "assertEquals", "get", "getBaseClassName", "assertSame", "get", "getOriginalObject", "assertEquals", "get", "getIdList", "size", "verifyAll", "setId", "setId", "setName", "setId", "setUsers", "asList", "setLoggedUser", "expect", "andReturn", "retrieve", "expect", "andReturn", "asList", "retrieveAll", "replayAll", "constructTeamAutocompleteData", "assertEquals", "size", "assertEquals", "get", "getId", "assertEquals", "get", "getName", "assertEquals", "get", "getMatchedString", "assertEquals", "get", "getBaseClassName", "assertSame", "get", "getOriginalObject", "assertNull", "get", "getIdList", "verifyAll", "setAccess", "setId", "setName", "add", "setProducts", "setId", "setParent", "setName", "setId", "setParent", "setName", "setId", "setParent", "setName", "expect", "andReturn", "asList", "retrieveAll", "expect", "andReturn", "isBacklogAccessible", "getLoggedUser", "expect", "andReturn", "isBacklogAccessible", "getLoggedUser", "replayAll", "constructBacklogAutocompleteData", "verifyAll", "assertEquals", "size", "getDataNodeById", "assertEquals", "getCanonicalName", "getBaseClassName", "assertEquals", "getName", "assertEquals", "getOriginalObject", "getDataNodeById", "assertEquals", "getName", "assertEquals", "getName", "getMatchedString", "assertEquals", "getOriginalObject", "setAccess", "setId", "setName", "setId", "setName", "add", "add", "setProducts", "setId", "setParent", "setName", "expect", "andReturn", "asList", "retrieveAll", "expect", "andReturn", "retrieve", "expect", "andReturn", "getParentProduct", "expect", "andReturn", "getParentProduct", "expect", "andReturn", "getParentProduct", "expect", "andReturn", "getParentProduct", "expect", "andReturn", "isBacklogAccessible", "getLoggedUser", "expect", "andReturn", "isBacklogAccessible", "getLoggedUser", "replayAll", "constructBacklogAutocompleteData", "verifyAll", "assertEquals", "size", "getDataNodeById", "assertEquals", "getCanonicalName", "getBaseClassName", "assertEquals", "getName", "assertEquals", "getOriginalObject", "getDataNodeById", "assertEquals", "getName", "assertEquals", "getName", "getMatchedString", "assertEquals", "getOriginalObject", "setAccess", "setId", "setName", "add", "setProducts", "setId", "setParent", "setName", "expect", "andReturn", "asList", "retrieveAll", "expect", "andReturn", "isBacklogAccessible", "getLoggedUser", "replayAll", "constructProjectAutocompleteData", "verifyAll", "assertEquals", "size", "getDataNodeById", "assertEquals", "getName", "assertEquals", "getName", "getMatchedString", "assertEquals", "getOriginalObject", "setId", "setName", "setId", "setParent", "setName", "setId", "setParent", "setName", "setId", "setParent", "setName", "expect", "andReturn", "asList", "retrieveCurrentAndFutureIterations", "expect", "andReturn", "isBacklogAccessible", "getLoggedUser", "expect", "andReturn", "isBacklogAccessible", "getLoggedUser", "replayAll", "constructCurrentIterationAutocompleteData", "verifyAll", "assertEquals", "size", "getDataNodeById", "assertEquals", "getName", "assertEquals", "getOriginalObject", "getDataNodeById", "assertEquals", "getName", "assertEquals", "getOriginalObject", "getId", "setAccess", "setId", "setName", "setName", "setId", "add", "add", "setProducts", "expect", "andReturn", "getLoggedUser", "anyTimes", "retrieve", "expect", "andReturn", "asList", "retrieveAll", "expect", "andReturn", "isBacklogAccessible", "getLoggedUser", "expect", "andReturn", "isBacklogAccessible", "getLoggedUser", "replayAll", "constructProductAutocompleteData", "verifyAll", "getDataNodeById", "assertEquals", "getName", "assertEquals", "getOriginalObject", "getDataNodeById", "assertEquals", "getName", "assertEquals", "getOriginalObject", "assertEquals", "getBacklogScheduleStatus", "setStartDate", "minusYears", "setEndDate", "minusYears", "plusMonths", "assertEquals", "getBacklogScheduleStatus", "setStartDate", "setEndDate", "plusMonths", "assertEquals", "getBacklogScheduleStatus", "setStartDate", "plusYears", "setEndDate", "plusYears", "plusMonths", "assertEquals", "getBacklogScheduleStatus", "setUser", "setTask", "setRank", "setName", "setId", "setId", "setName", "setId", "setIteration", "setStory", "setResponsibles", "asList", "constructQueuedDailyWorkTaskTO", "assertEquals", "getWorkQueueRank", "assertEquals", "getId", "setId", "setRank", "setTask", "setName", "setId", "setIteration", "constructQueuedDailyWorkTaskTO", "assertEquals", "getWorkQueueRank", "assertEquals", "getId", "setId", "setId", "setId", "setId", "setStory", "setId", "setStory", "setTasks", "asList", "setId", "setIteration", "expect", "andReturn", "anyTimes", "calculateMetrics", "isA", "expect", "andReturn", "anyTimes", "calculateSum", "isA", "replayAll", "constructAssignedWorkTO", "asList", "asList", "verifyAll", "assertEquals", "getId", "getStories", "get", "getId", "assertEquals", "getId", "getStories", "get", "getId", "assertEquals", "getStories", "size", "assertEquals", "getTasksWithoutStory", "size", "assertEquals", "getId", "getTasksWithoutStory", "get", "getId", "assertEquals", "getStories", "get", "getTasks", "size", "assertTrue", "getStories", "get", "getTasks", "iterator", "next", "add", "setUsers", "add", "setTeams", "setLoggedUser"], "SCS_VariableDeclaration": ["Set", "TaskTO", "Set", "StoryMetrics", "StoryTO", "Iteration", "IterationTO", "Project", "ProjectTO", "User", "List", "User", "User", "Team", "List", "User", "User", "Team", "List", "Backlog", "Set", "Backlog", "Backlog", "Backlog", "List", "AutocompleteDataNode", "Product", "Product", "Set", "Backlog", "List", "AutocompleteDataNode", "Product", "Set", "Project", "List", "AutocompleteDataNode", "Backlog", "Backlog", "Iteration", "Iteration", "List", "AutocompleteDataNode", "AutocompleteDataNode", "Product", "Product", "Set", "List", "AutocompleteDataNode", "Product", "Iteration", "Iteration", "Iteration", "Task", "WhatsNextEntry", "User", "Story", "Iteration", "DailyWorkTaskTO", "Task", "WhatsNextEntry", "Iteration", "DailyWorkTaskTO", "Iteration", "Story", "Story", "Task", "Task", "Task", "AssignedWorkTO", "User", "Collection", "Collection"], "CO": ["/*\n     * BACKLOG AUTOCOMPLETE DATA\n     */", "// only backlogs should be included in backlogs autocomplete data", "// Supply the project id", "/**\n     * Project autocomplete data.\n     */", "/**\n     * Helper method to get a <code>AutocompleteDataNode</code> with specified id.\n     */", "//        expect(storyBusiness.calculateMetrics(EasyMock.isA(Story.class))).andReturn(new StoryMetrics());", "//        expect(hourEntryBusiness.calculateSum((Collection<HourEntry>)EasyMock.isA(Collection.class))).andReturn(0L);", "//        expect(hourEntryBusiness.calculateSum((Collection<HourEntry>)EasyMock.isA(Collection.class))).andReturn(0L);", "// story1 pulled via task1", "// stories populated with taskTOs! Both tasks in the story 1"], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport static org.easymock.EasyMock.createMock;\nimport static org.easymock.EasyMock.expect;\nimport static org.easymock.EasyMock.isNull;\nimport static org.easymock.EasyMock.replay;\nimport static org.easymock.EasyMock.verify;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertSame;\nimport static org.junit.Assert.assertTrue;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport org.easymock.EasyMock;\nimport org.joda.time.DateTime;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport fi.hut.soberit.agilefant.business.impl.TransferObjectBusinessImpl;\nimport fi.hut.soberit.agilefant.model.Backlog;\nimport fi.hut.soberit.agilefant.model.HourEntry;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.Product;\nimport fi.hut.soberit.agilefant.model.Project;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.Task;\nimport fi.hut.soberit.agilefant.model.Team;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.model.WhatsNextEntry;\nimport fi.hut.soberit.agilefant.security.SecurityUtil;\nimport fi.hut.soberit.agilefant.transfer.AssignedWorkTO;\nimport fi.hut.soberit.agilefant.transfer.AutocompleteDataNode;\nimport fi.hut.soberit.agilefant.transfer.DailyWorkTaskTO;\nimport fi.hut.soberit.agilefant.transfer.IterationTO;\nimport fi.hut.soberit.agilefant.transfer.ProjectTO;\nimport fi.hut.soberit.agilefant.transfer.ScheduleStatus;\nimport fi.hut.soberit.agilefant.transfer.StoryTO;\nimport fi.hut.soberit.agilefant.transfer.TaskTO;\nimport fi.hut.soberit.agilefant.util.StoryMetrics;\n\npublic class TransferObjectBusinessTest {\n\n    private TransferObjectBusinessImpl transferObjectBusiness = new TransferObjectBusinessImpl();\n    private HourEntryBusiness hourEntryBusiness;\n    private UserBusiness userBusiness;\n    private TeamBusiness teamBusiness;\n    private BacklogBusiness backlogBusiness;\n    private ProductBusiness productBusiness;\n    private ProjectBusiness projectBusiness;\n    private IterationBusiness iterationBusiness;\n    private AuthorizationBusiness authorizationBusiness;\n    \n    Project   project;\n    Iteration iteration;\n    Story     story1;\n    Story story2;\n    Task task;\n    User assignedUser;\n    User notAssignedUser;\n    Team team;\n    private StoryBusiness storyBusiness;\n\n    @Before\n    public void setUp_dependencies() {\n        hourEntryBusiness = createMock(HourEntryBusiness.class);\n        transferObjectBusiness.setHourEntryBusiness(hourEntryBusiness);\n        \n        userBusiness = createMock(UserBusiness.class);\n        transferObjectBusiness.setUserBusiness(userBusiness);\n        \n        teamBusiness = createMock(TeamBusiness.class);\n        transferObjectBusiness.setTeamBusiness(teamBusiness);\n        \n        backlogBusiness = createMock(BacklogBusiness.class);\n        transferObjectBusiness.setBacklogBusiness(backlogBusiness);\n        \n        productBusiness = createMock(ProductBusiness.class);\n        transferObjectBusiness.setProductBusiness(productBusiness);\n        \n        projectBusiness = createMock(ProjectBusiness.class);\n        transferObjectBusiness.setProjectBusiness(projectBusiness);\n        \n        iterationBusiness = createMock(IterationBusiness.class);\n        transferObjectBusiness.setIterationBusiness(iterationBusiness);\n\n        storyBusiness = createMock(StoryBusiness.class);\n        transferObjectBusiness.setStoryBusiness(storyBusiness);\n        \n        authorizationBusiness = createMock(AuthorizationBusiness.class);\n        transferObjectBusiness.setAuthorizationBusiness(authorizationBusiness);\n        \n    }\n    \n    private void verifyAll() {\n        verify(hourEntryBusiness, userBusiness, storyBusiness, teamBusiness,\n                backlogBusiness, productBusiness, projectBusiness,\n                iterationBusiness, authorizationBusiness);\n    }\n\n    private void replayAll() {\n        replay(hourEntryBusiness, userBusiness, storyBusiness, teamBusiness,\n                backlogBusiness, productBusiness, projectBusiness,\n                iterationBusiness, authorizationBusiness);\n    }\n    \n    \n    @Before\n    public void setUp() {\n        iteration = new Iteration();\n        project = new Project();\n        project.setId(8474);\n        iteration.setParent(project);\n\n        assignedUser = new User();\n        assignedUser.setId(666);\n        notAssignedUser = new User();\n        notAssignedUser.setId(515);\n\n        story1 = new Story();\n        story2 = new Story();\n        story1.setIteration(iteration);\n        task = new Task();\n        story1.setId(1265);\n        story2.setId(8472);\n        task.setId(1236);\n    }\n\n\n\n    @SuppressWarnings(\"unchecked\")\n    @Test\n    public void testConstructTaskTO() {\n        Set<User> responsibles = new HashSet<User>(Arrays.asList(assignedUser, notAssignedUser));\n        \n        task.setIteration(iteration);\n        task.setResponsibles(responsibles);\n        task.setHourEntries(null);\n\n        expect(hourEntryBusiness.calculateSum((Collection<? extends HourEntry>) isNull()))\n                .andReturn(Long.valueOf(0)).anyTimes();\n\n        replayAll();\n        TaskTO actualTO = transferObjectBusiness.constructTaskTO(task);\n        verifyAll();\n\n        assertEquals(\"Task and transfer object id's not equal\", task.getId(),\n                actualTO.getId());\n\n        assertEquals(responsibles, actualTO.getResponsibles());\n    }\n\n    @Test\n    public void testConstructStoryTO() {\n        Set<User> responsibles = new HashSet<User>(Arrays.asList(assignedUser, notAssignedUser));\n        story1.setIteration(iteration);\n        story1.setResponsibles(responsibles);\n\n        StoryMetrics metrics = new StoryMetrics();\n        \n        expect(storyBusiness.calculateMetrics(story1))\n            .andReturn(metrics);\n        \n        replayAll();\n        StoryTO actualTO = transferObjectBusiness.constructStoryTO(story1);\n        verifyAll();\n\n        assertEquals(\"Task and transfer object id's not equal\", story1.getId(),\n                actualTO.getId());\n\n        assertEquals(actualTO.getMetrics(), metrics);\n        \n        assertEquals(responsibles, actualTO.getResponsibles());\n    }\n    \n    @Test\n    public void constructIterationTO() {\n        Iteration past = new Iteration();\n        past.setStartDate(new DateTime().minusMonths(2));\n        past.setEndDate(new DateTime().minusMonths(1));\n     \n        \n        replayAll();\n        IterationTO actual = transferObjectBusiness.constructIterationTO(past);\n        verifyAll();\n        \n        assertEquals(ScheduleStatus.PAST, actual.getScheduleStatus());\n        \n    }\n    \n    @Test\n    public void constructProjectTO() {\n        Project past = new Project();\n        past.setStartDate(new DateTime().minusMonths(2));\n        past.setEndDate(new DateTime().minusMonths(1));\n        \n        \n        replayAll();\n        ProjectTO actual = transferObjectBusiness.constructProjectTO(past);\n        verifyAll();\n        \n        assertEquals(ScheduleStatus.PAST, actual.getScheduleStatus());\n    }\n    \n   @Test\n   public void testConstructUserAutocompleteData() {\n        User user = new User();\n        user.setId(1);\n        user.setFullName(\"daadaa\");\n        user.setLoginName(\"additional\");\n        user.setAdmin(true);\n        SecurityUtil.setLoggedUser(user);\n        \n        expect(userBusiness.retrieve(1)).andReturn(user);\n        expect(userBusiness.retrieveAll()).andReturn(Arrays.asList(user));\n        \n        replayAll();\n        List<AutocompleteDataNode> actual = this.transferObjectBusiness.constructUserAutocompleteData();\n        assertEquals(1, actual.size());\n        assertEquals(1, (int)actual.get(0).getId());\n        assertEquals(\"daadaa\", actual.get(0).getName());\n        assertEquals(\"daadaa additional\", actual.get(0).getMatchedString());\n        assertEquals(\"fi.hut.soberit.agilefant.model.User\", actual.get(0).getBaseClassName());\n        assertNull(actual.get(0).getIdList());\n        verifyAll();\n    }\n    \n    @Test\n    public void testConstructTeamAutocompleteData_withUserIds() {\n        User user1 = new User();\n        User user2 = new User();\n        Team team = new Team();\n        user1.setId(1);\n        user2.setId(2);\n        team.setName(\"daa\");\n        team.setId(1);\n        team.setUsers(Arrays.asList(user1,user2));\n        SecurityUtil.setLoggedUser(user1);\n        \n        expect(userBusiness.retrieve(1)).andReturn(user1);\n        expect(teamBusiness.retrieveAll()).andReturn(Arrays.asList(team));\n        \n        replayAll();\n        List<AutocompleteDataNode> actual = this.transferObjectBusiness.constructTeamAutocompleteData(true);\n        assertEquals(1, actual.size());\n        assertEquals(1, (int)actual.get(0).getId());\n        assertEquals(\"daa\", actual.get(0).getName());\n        assertEquals(\"daa\", actual.get(0).getMatchedString());\n        assertEquals(\"fi.hut.soberit.agilefant.model.Team\", actual.get(0).getBaseClassName());\n        assertSame(team, actual.get(0).getOriginalObject());\n        assertEquals(2, actual.get(0).getIdList().size());\n        verifyAll();\n    }\n    \n    @Test\n    public void testConstructTeamAutocompleteData_withoutUserIds() {\n        User user1 = new User();\n        User user2 = new User();\n        Team team = new Team();\n        user1.setId(1);\n        user2.setId(2);\n        team.setName(\"daa\");\n        team.setId(1);\n        team.setUsers(Arrays.asList(user1,user2));\n        SecurityUtil.setLoggedUser(user1);\n        \n        expect(userBusiness.retrieve(1)).andReturn(user1);\n        expect(teamBusiness.retrieveAll()).andReturn(Arrays.asList(team));\n        \n        replayAll();\n        List<AutocompleteDataNode> actual = this.transferObjectBusiness.constructTeamAutocompleteData(false);\n        assertEquals(1, actual.size());\n        assertEquals(1, (int)actual.get(0).getId());\n        assertEquals(\"daa\", actual.get(0).getName());\n        assertEquals(\"daa\", actual.get(0).getMatchedString());\n        assertEquals(\"fi.hut.soberit.agilefant.model.Team\", actual.get(0).getBaseClassName());\n        assertSame(team, actual.get(0).getOriginalObject());\n        assertNull(actual.get(0).getIdList());\n        verifyAll();\n    }\n\n    /*\n     * BACKLOG AUTOCOMPLETE DATA\n     */\n    @Test\n    public void testGetBacklogAutocompleteData() {\n        setAccess();\n        \n        Backlog product = new Product();\n        product.setId(1);\n        product.setName(\"Product\");\n        \n        Set<Product> products = new HashSet<Product>();\n        products.add((Product)product);\n        team.setProducts(products);\n        \n        Backlog project = new Project();\n        project.setId(7);\n        project.setParent(product);\n        project.setName(\"Project\");\n        \n        Backlog iterationUnderProject = new Iteration();\n        iterationUnderProject.setId(333);\n        iterationUnderProject.setParent(project);\n        iterationUnderProject.setName(\"Iter 1\");\n        \n        Backlog iterationUnderProduct = new Iteration();\n        iterationUnderProduct.setId(615);\n        iterationUnderProduct.setParent(product);\n        iterationUnderProduct.setName(\"Iter 2\");\n        \n        expect(backlogBusiness.retrieveAll())\n            .andReturn(Arrays.asList(product, project, iterationUnderProject, iterationUnderProduct));\n        expect(authorizationBusiness.isBacklogAccessible(1, SecurityUtil.getLoggedUser())).andReturn(true);\n        expect(authorizationBusiness.isBacklogAccessible(7, SecurityUtil.getLoggedUser())).andReturn(true);\n        \n        replayAll();\n        \n        List<AutocompleteDataNode> nodes = transferObjectBusiness.constructBacklogAutocompleteData(null);\n        \n        verifyAll();\n        \n        // only backlogs should be included in backlogs autocomplete data\n        assertEquals(2, nodes.size());\n        \n        AutocompleteDataNode node = getDataNodeById(1, nodes);\n        assertEquals(Backlog.class.getCanonicalName(), node.getBaseClassName());\n        assertEquals(\"Product\", node.getName());\n        assertEquals(product, node.getOriginalObject());\n        \n        node = getDataNodeById(7, nodes);\n        assertEquals(\"Product > Project\", node.getName());\n        assertEquals(node.getName(), node.getMatchedString());\n        assertEquals(project, node.getOriginalObject());\n    }\n    \n    @Test\n    public void testGetBacklogAutocompleteData_filterByBacklog() {\n        setAccess();\n        \n        Product product = new Product();\n        product.setId(1);\n        product.setName(\"Product\");\n        \n        Product product2 = new Product();\n        product2.setId(123);\n        product2.setName(\"Wrong\");\n        \n        Set<Product> products = new HashSet<Product>();\n        products.add((Product)product);\n        products.add((Product)product2);\n        team.setProducts(products);\n        \n        Backlog project = new Project();\n        project.setId(7);\n        project.setParent(product);\n        project.setName(\"Project\");\n\n        expect(backlogBusiness.retrieveAll()).andReturn(Arrays.asList(product, project, product2));\n\n        expect(backlogBusiness.retrieve(7)).andReturn(project);\n        expect(backlogBusiness.getParentProduct(project)).andReturn(product);\n        \n        expect(backlogBusiness.getParentProduct(product)).andReturn(product);\n        expect(backlogBusiness.getParentProduct(project)).andReturn(product);\n        expect(backlogBusiness.getParentProduct(product2)).andReturn(product2);\n        \n        expect(authorizationBusiness.isBacklogAccessible(1, SecurityUtil.getLoggedUser())).andReturn(true);\n        expect(authorizationBusiness.isBacklogAccessible(7, SecurityUtil.getLoggedUser())).andReturn(true);\n        \n        replayAll();\n        \n        // Supply the project id\n        List<AutocompleteDataNode> nodes = transferObjectBusiness\n                .constructBacklogAutocompleteData(7);\n        \n        verifyAll();\n        \n        assertEquals(2, nodes.size());\n        \n        AutocompleteDataNode node = getDataNodeById(1, nodes);\n        assertEquals(Backlog.class.getCanonicalName(), node.getBaseClassName());\n        assertEquals(\"Product\", node.getName());\n        assertEquals(product, node.getOriginalObject());\n        \n        node = getDataNodeById(7, nodes);\n        assertEquals(\"Product > Project\", node.getName());\n        assertEquals(node.getName(), node.getMatchedString());\n        assertEquals(project, node.getOriginalObject());\n    }\n       \n    /**\n     * Project autocomplete data.\n     */\n    @Test\n    public void testGetProjectAutocompleteData() {\n        setAccess();\n\n        Product product = new Product();\n        product.setId(1);\n        product.setName(\"Product\");\n        \n        Set<Product> products = new HashSet<Product>();\n        products.add((Product)product);\n        team.setProducts(products);\n        \n        Project project = new Project();\n        project.setId(7);\n        project.setParent(product);\n        project.setName(\"Project\");\n        \n        expect(projectBusiness.retrieveAll()).andReturn(Arrays.asList(project));\n        expect(authorizationBusiness.isBacklogAccessible(7, SecurityUtil.getLoggedUser())).andReturn(true);\n        \n        replayAll();\n        \n        List<AutocompleteDataNode> nodes = transferObjectBusiness\n                .constructProjectAutocompleteData();\n        verifyAll();\n        \n        assertEquals(1, nodes.size());\n               \n        AutocompleteDataNode node = getDataNodeById(7, nodes);\n        assertEquals(\"Product > Project\", node.getName());\n        assertEquals(node.getName(), node.getMatchedString());\n        assertEquals(project, node.getOriginalObject());\n\n    }\n\n    @Test\n    public void testGetCurrentIterationAutocompleteData() {\n        Backlog product = new Product();\n        product.setId(1);\n        product.setName(\"Product\");\n        \n        Backlog project = new Project();\n        project.setId(7);\n        project.setParent(product);\n        project.setName(\"Project\");\n        \n        Iteration iterationUnderProject = new Iteration();\n        iterationUnderProject.setId(333);\n        iterationUnderProject.setParent(project);\n        iterationUnderProject.setName(\"Iter 1\");\n        \n        Iteration iterationUnderProduct = new Iteration();\n        iterationUnderProduct.setId(615);\n        iterationUnderProduct.setParent(product);\n        iterationUnderProduct.setName(\"Iter 2\");\n        \n        expect(iterationBusiness.retrieveCurrentAndFutureIterations())\n            .andReturn(Arrays.asList(iterationUnderProject, iterationUnderProduct));\n        \n        expect(authorizationBusiness.isBacklogAccessible(333, SecurityUtil.getLoggedUser())).andReturn(true);\n        expect(authorizationBusiness.isBacklogAccessible(615, SecurityUtil.getLoggedUser())).andReturn(true);\n        \n        replayAll();\n        \n        List<AutocompleteDataNode> nodes = transferObjectBusiness\n                .constructCurrentIterationAutocompleteData();\n        \n        verifyAll();\n        \n        assertEquals(2, nodes.size());\n        AutocompleteDataNode node = getDataNodeById(333, nodes);\n        assertEquals(\"Product > Project > Iter 1\", node.getName());\n        assertEquals(iterationUnderProject, node.getOriginalObject());\n        \n        node = getDataNodeById(615, nodes);\n        assertEquals(\"Product > Iter 2\", node.getName());\n        assertEquals(iterationUnderProduct, node.getOriginalObject());\n    }\n\n    \n    /**\n     * Helper method to get a <code>AutocompleteDataNode</code> with specified id.\n     */\n    private AutocompleteDataNode getDataNodeById(int id, Collection<AutocompleteDataNode> nodes) {\n        for (AutocompleteDataNode adn : nodes) {\n            if (adn.getId() == id) {\n                return adn;\n            }\n        }\n        return null;\n    }\n    \n    @Test\n    public void testConstructProductAutocompleteData() { \n        setAccess();\n        \n        Product product1 = new Product();\n        product1.setId(756);\n        product1.setName(\"Test product no. 1\");\n        Product product2 = new Product();\n        product2.setName(\"Foo bar\");\n        product2.setId(918);\n        \n        Set<Product> products = new HashSet<Product>();\n        products.add((Product)product1);\n        products.add((Product)product2);\n        team.setProducts(products);\n        \n        expect(userBusiness.retrieve(0)).andReturn(SecurityUtil.getLoggedUser()).anyTimes();\n        expect(productBusiness.retrieveAll()).andReturn(Arrays.asList(product1, product2));\n        expect(authorizationBusiness.isBacklogAccessible(756, SecurityUtil.getLoggedUser())).andReturn(true);\n        expect(authorizationBusiness.isBacklogAccessible(918, SecurityUtil.getLoggedUser())).andReturn(true);\n        replayAll();\n        List<AutocompleteDataNode> nodes = transferObjectBusiness\n                .constructProductAutocompleteData();\n        verifyAll();\n        \n        AutocompleteDataNode actual = getDataNodeById(756, nodes);\n        assertEquals(\"Test product no. 1\", actual.getName());\n        assertEquals(product1, actual.getOriginalObject());\n        \n        actual = getDataNodeById(918, nodes);\n        assertEquals(\"Foo bar\", actual.getName());\n        assertEquals(product2, actual.getOriginalObject());\n    }\n    \n    @Test\n    public void testCalculateBacklogScheduleStatus_forProduct() {\n        Product product = new Product();\n        assertEquals(ScheduleStatus.ONGOING, transferObjectBusiness.getBacklogScheduleStatus(product));\n    }\n    \n    @Test\n    public void testCalculateBacklogScheduleStatus_forPastIteration() {\n        Iteration iter = new Iteration();\n        iter.setStartDate(new DateTime().minusYears(3));\n        iter.setEndDate(new DateTime().minusYears(3).plusMonths(1));\n        assertEquals(ScheduleStatus.PAST, transferObjectBusiness.getBacklogScheduleStatus(iter));\n    }\n    \n    @Test\n    public void testCalculateBacklogScheduleStatus_forCurrentIteration() {\n        Iteration iter = new Iteration();\n        iter.setStartDate(new DateTime());\n        iter.setEndDate(new DateTime().plusMonths(1));\n        assertEquals(ScheduleStatus.ONGOING, transferObjectBusiness.getBacklogScheduleStatus(iter));\n    }\n    \n    @Test\n    public void testCalculateBacklogScheduleStatus_forFutureIteration() {\n        Iteration iter = new Iteration();\n        iter.setStartDate(new DateTime().plusYears(3));\n        iter.setEndDate(new DateTime().plusYears(3).plusMonths(1));\n        assertEquals(ScheduleStatus.FUTURE, transferObjectBusiness.getBacklogScheduleStatus(iter));\n    }\n    \n    @Test\n    public void testCreateQueueudDailyWorkTaskTO_withStoryTask() {\n        Task task = new Task();\n\n        WhatsNextEntry entry = new WhatsNextEntry();\n        User user = new User();\n        entry.setUser(user);\n        entry.setTask(task);\n        entry.setRank(2);\n        \n        Story story = new Story();\n        story.setName(\"story\");\n        story.setId(3);\n        \n        task.setId(5);\n        \n        Iteration iteration = new Iteration();\n        iteration.setName(\"iter\");\n        iteration.setId(4);\n        \n        story.setIteration(iteration);\n        \n        task.setStory(story);\n        task.setResponsibles(new HashSet<User>(Arrays.asList(new User[] { user } )));\n\n        DailyWorkTaskTO transferObj = transferObjectBusiness.constructQueuedDailyWorkTaskTO(entry);\n        assertEquals(2, transferObj.getWorkQueueRank());\n        assertEquals(5, transferObj.getId());\n    };\n\n    @Test\n    public void testCreateQueueudDailyWorkTaskTO_withIterationTask() {\n        Task task = new Task();\n\n        WhatsNextEntry entry = new WhatsNextEntry();\n        task.setId(5);\n        entry.setRank(5);\n        entry.setTask(task);\n        \n        Iteration iteration = new Iteration();\n        iteration.setName(\"iter\");\n        iteration.setId(4);\n        \n        task.setIteration(iteration);\n\n        DailyWorkTaskTO transferObj = transferObjectBusiness.constructQueuedDailyWorkTaskTO(entry);\n        assertEquals(5, transferObj.getWorkQueueRank());\n        assertEquals(5, transferObj.getId());\n        \n        \n    };\n\n    @SuppressWarnings(\"unchecked\")\n    @Test\n    public void testCreateAssignedWorkTO() {\n        Iteration iteration = new Iteration();\n        iteration.setId(7);\n\n        Story story1 = new Story();\n        story1.setId(8);\n\n        Story story2 = new Story();\n        story2.setId(10);\n        \n        Task task1 = new Task();\n        task1.setId(5);\n        task1.setStory(story1);\n        \n        Task task3 = new Task();\n        task3.setId(42);\n        task3.setStory(story1);\n        \n        story1.setTasks(new HashSet<Task>(Arrays.asList(task1, task3)));\n        \n        Task task2 = new Task();\n        task2.setId(6);\n        task2.setIteration(iteration);\n        \n        expect(storyBusiness.calculateMetrics(EasyMock.isA(Story.class))).andReturn(new StoryMetrics()).anyTimes();\n//        expect(storyBusiness.calculateMetrics(EasyMock.isA(Story.class))).andReturn(new StoryMetrics());\n        expect(hourEntryBusiness.calculateSum((Collection<HourEntry>)EasyMock.isA(Collection.class))).andReturn(0L).anyTimes();\n//        expect(hourEntryBusiness.calculateSum((Collection<HourEntry>)EasyMock.isA(Collection.class))).andReturn(0L);\n//        expect(hourEntryBusiness.calculateSum((Collection<HourEntry>)EasyMock.isA(Collection.class))).andReturn(0L);\n\n        replayAll();\n        AssignedWorkTO assigned = transferObjectBusiness.constructAssignedWorkTO(\n            Arrays.asList(task1, task2, task3),\n            Arrays.asList(story2)\n        );\n        verifyAll();\n        \n        assertEquals(story1.getId(), assigned.getStories().get(0).getId());\n        // story1 pulled via task1\n        assertEquals(story2.getId(), assigned.getStories().get(1).getId());\n\n        assertEquals(2, assigned.getStories().size());\n\n        assertEquals(1, assigned.getTasksWithoutStory().size());\n        assertEquals(task2.getId(), assigned.getTasksWithoutStory().get(0).getId());\n        \n        // stories populated with taskTOs! Both tasks in the story 1\n        assertEquals(2, assigned.getStories().get(0).getTasks().size());\n        assertTrue(assigned.getStories().get(0).getTasks().iterator().next() instanceof TaskTO);\n    };\n    \n    private void setAccess(){\n        User user = new User();\n        team = new Team();\n        Collection<User> users = new ArrayList<User>();\n        users.add(user);\n        team.setUsers(users);\n        Collection<Team> teams = new ArrayList<Team>();\n        teams.add(team);\n        user.setTeams(teams);\n        SecurityUtil.setLoggedUser(user);\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\UserBusinessTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["UserBusinessTest"], "AN": ["userBusiness", "userDAO", "teamBusiness", "passwordEncoder"], "SCS_VariableDeclarator": ["userBusiness", "userDAO", "teamBusiness", "passwordEncoder", "listOfEnabledUsers", "listOfDisabledUsers", "user", "start", "expected", "interval", "actual", "user", "start", "expected", "interval", "actual", "user", "start", "expected", "interval", "actual", "user", "start", "holiday", "expected", "interval", "actual", "user", "actual", "dataItem", "actual", "dataItem", "actual", "password", "bcryptBeginning", "user", "actual", "user", "teamIds", "first", "second", "actual", "teams", "user", "actual", "teams"], "MN": ["setUp", "verifyAll", "replayAll", "testGetEnabledUsers_interaction", "testGetDisabledUsers_interaction", "testCalculateWorktimePerPeriod", "testCalculateWorktimePerPeriod_inWeekend", "testCalculateWorktimePerPeriod_withWeekend", "testCalculateWorktimePerPeriod_withVacations", "testStore_newUser", "testStore_noPasswordChange", "testStore_unmatchedPassword", "testStore_emptyPasswordString", "testStore_passwordChange", "testStore_changeTeams", "testStore_clearTeams", "testIsLoginNameUnique", "testIsLoginNameUnique_isUnique"], "PN": [], "SCS_MemberReference": ["userDAO", "userDAO", "teamBusiness", "teamBusiness", "passwordEncoder", "passwordEncoder", "userDAO", "teamBusiness", "userDAO", "teamBusiness", "listOfEnabledUsers", "listOfEnabledUsers", "listOfDisabledUsers", "listOfDisabledUsers", "userBusiness", "user", "interval", "start", "userBusiness", "user", "interval", "userBusiness", "user", "interval", "holiday", "userBusiness", "user", "interval", "user", "user", "user", "dataItem", "dataItem", "dataItem", "dataItem", "user", "user", "password", "password", "bcryptBeginning", "first", "second", "user", "user", "teamIds", "first", "second", "user", "user"], "SCS_ClassReference": ["", "UserDAO", "userBusiness", "", "TeamBusiness", "userBusiness", "userBusiness", "", "", "Arrays", "", null, "userDAO", "", "", "userBusiness", "", "Arrays", "", null, "userDAO", "", "", "userBusiness", "", "start", "start", null, "start", "start", null, null, "", "expected", "actual", "start", null, null, "", "expected", "actual", "start", "start", null, "start", "start", null, null, "", "expected", "actual", "holiday", "start", null, null, "holiday", "start", null, null, "user", null, "start", "start", null, "start", "start", null, null, "", "expected", "actual", "user", "", null, "userDAO", "", null, "userDAO", "", "userBusiness", "", "", "actual", "dataItem", "dataItem", "userDAO", "", "userBusiness", "", "", "actual", "IllegalArgumentException", "userBusiness", "dataItem", "dataItem", "userDAO", "", "userBusiness", "", "", "actual", "user", "user", "userDAO", "", "userBusiness", "", "", "actual", null, "user", "Arrays", "first", "second", "", null, "teamBusiness", "", null, "teamBusiness", "userDAO", "", "userBusiness", "", "actual", "", "teams", "", "teams", "user", "user", "Arrays", "userDAO", "", "userBusiness", "", "actual", "", "teams", "", null, "userDAO", "", "", "userBusiness", "", "", null, "userDAO", "", "", "userBusiness", ""], "SCS_MethodInvocation": ["createMock", "setUserDAO", "createMock", "setTeamBusiness", "setPasswordEncoder", "verify", "replay", "asList", "expect", "andReturn", "listUsersByEnabledStatus", "replayAll", "assertSame", "getEnabledUsers", "verifyAll", "asList", "expect", "andReturn", "listUsersByEnabledStatus", "replayAll", "assertSame", "getDisabledUsers", "verifyAll", "toDateMidnight", "plusDays", "toDateMidnight", "toDateMidnight", "plusDays", "toDateMidnight", "calculateWorktimePerPeriod", "assertEquals", "getMillis", "getMillis", "plusDays", "toDateMidnight", "calculateWorktimePerPeriod", "assertEquals", "getMillis", "getMillis", "toDateMidnight", "plusDays", "toDateMidnight", "toDateMidnight", "plusDays", "toDateMidnight", "calculateWorktimePerPeriod", "assertEquals", "getMillis", "getMillis", "setStartDate", "plusDays", "toDateMidnight", "toDate", "setEndDate", "plusDays", "toDateMidnight", "toDate", "getHolidays", "add", "toDateMidnight", "plusDays", "toDateMidnight", "toDateMidnight", "plusDays", "toDateMidnight", "calculateWorktimePerPeriod", "assertEquals", "getMillis", "getMillis", "setFullName", "expect", "andReturn", "create", "expect", "andReturn", "get", "replayAll", "storeUser", "verifyAll", "assertEquals", "getFullName", "setId", "setPassword", "store", "replayAll", "storeUser", "verifyAll", "assertEquals", "getPassword", "storeUser", "setId", "setPassword", "store", "replayAll", "storeUser", "verifyAll", "assertEquals", "getPassword", "setId", "setPassword", "store", "replayAll", "storeUser", "verifyAll", "assertEquals", "getPassword", "substring", "setId", "asList", "setId", "setId", "expect", "andReturn", "retrieve", "expect", "andReturn", "retrieve", "store", "replayAll", "storeUser", "verifyAll", "getTeams", "assertTrue", "contains", "assertTrue", "contains", "setId", "setTeams", "asList", "store", "replayAll", "storeUser", "verifyAll", "getTeams", "assertEquals", "size", "expect", "andReturn", "getByLoginNameIgnoreCase", "replayAll", "assertFalse", "isLoginNameUnique", "verifyAll", "expect", "andReturn", "getByLoginNameIgnoreCase", "replayAll", "assertTrue", "isLoginNameUnique", "verifyAll"], "SCS_VariableDeclaration": ["List", "List", "User", "LocalDate", "Duration", "Interval", "Duration", "User", "DateTime", "Duration", "Interval", "Duration", "User", "LocalDate", "Duration", "Interval", "Duration", "User", "LocalDate", "Holiday", "Duration", "Interval", "Duration", "User", "User", "User", "User", "User", "User", "String", "String", "User", "User", "User", "Set", "Team", "Team", "User", "Collection", "User", "User", "Collection"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.business;\n\nimport static org.easymock.EasyMock.*;\nimport static org.junit.Assert.*;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport org.joda.time.DateTime;\nimport org.joda.time.Duration;\nimport org.joda.time.Interval;\nimport org.joda.time.LocalDate;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\n\nimport fi.hut.soberit.agilefant.business.impl.UserBusinessImpl;\nimport fi.hut.soberit.agilefant.db.UserDAO;\nimport fi.hut.soberit.agilefant.model.Holiday;\nimport fi.hut.soberit.agilefant.model.Team;\nimport fi.hut.soberit.agilefant.model.User;\n\npublic class UserBusinessTest {\n\n    UserBusinessImpl userBusiness = new UserBusinessImpl();\n    UserDAO userDAO;\n    \n    TeamBusiness teamBusiness;\n    \n    PasswordEncoder passwordEncoder;\n    \n    @Before\n    public void setUp() {\n        userDAO = createMock(UserDAO.class);\n        userBusiness.setUserDAO(userDAO);\n        \n        teamBusiness = createMock(TeamBusiness.class);\n        userBusiness.setTeamBusiness(teamBusiness);\n        \n        passwordEncoder = new BCryptPasswordEncoder();\n        userBusiness.setPasswordEncoder(passwordEncoder);\n    }\n\n    private void verifyAll() {\n        verify(userDAO, teamBusiness);\n    }\n\n    private void replayAll() {\n        replay(userDAO, teamBusiness);\n    }\n    \n    @Test\n    public void testGetEnabledUsers_interaction() {\n        List<User> listOfEnabledUsers = Arrays.asList(new User());\n        expect(userDAO.listUsersByEnabledStatus(true)).andReturn(listOfEnabledUsers);\n        replayAll();\n        \n        assertSame(listOfEnabledUsers, userBusiness.getEnabledUsers());\n        \n        verifyAll();\n    }\n\n    \n    @Test\n    public void testGetDisabledUsers_interaction() {\n        List<User> listOfDisabledUsers = Arrays.asList(new User());\n        expect(userDAO.listUsersByEnabledStatus(false)).andReturn(listOfDisabledUsers);\n        replayAll();\n        \n        assertSame(listOfDisabledUsers, userBusiness.getDisabledUsers());\n        \n        verifyAll();\n    }\n    \n    @Test\n    public void testCalculateWorktimePerPeriod() {\n        User user = new User();\n        LocalDate start = new LocalDate(2009,6,1);\n        Duration expected = new Duration(start.toDateMidnight(), start.plusDays(4).toDateMidnight());\n        Interval interval = new Interval(start.toDateMidnight(), start.plusDays(4).toDateMidnight());\n        Duration actual = this.userBusiness.calculateWorktimePerPeriod(user, interval);\n        assertEquals(expected.getMillis(), actual.getMillis());\n    }\n    \n    @Test\n    public void testCalculateWorktimePerPeriod_inWeekend() {\n        User user = new User();\n        DateTime start = new DateTime(2009,9,5, 14, 50, 0, 0);\n        Duration expected = new Duration(0);\n        Interval interval = new Interval(start, start.plusDays(1).toDateMidnight());\n        Duration actual = this.userBusiness.calculateWorktimePerPeriod(user, interval);\n        assertEquals(expected.getMillis(), actual.getMillis());\n    }\n    \n    @Test\n    public void testCalculateWorktimePerPeriod_withWeekend() {\n        User user = new User();\n        LocalDate start = new LocalDate(2009,6,1);\n        Duration expected = new Duration(start.toDateMidnight(), start.plusDays(6).toDateMidnight());\n        Interval interval = new Interval(start.toDateMidnight(), start.plusDays(8).toDateMidnight());\n        Duration actual = this.userBusiness.calculateWorktimePerPeriod(user, interval);\n        assertEquals(expected.getMillis(), actual.getMillis());\n    }\n    \n    @Test\n    public void testCalculateWorktimePerPeriod_withVacations() {\n        User user = new User();\n        LocalDate start = new LocalDate(2009,6,1);\n        \n        Holiday holiday = new Holiday();\n        holiday.setStartDate(start.plusDays(1).toDateMidnight().toDate());\n        holiday.setEndDate(start.plusDays(3).toDateMidnight().toDate());\n        user.getHolidays().add(holiday);        \n        \n        Duration expected = new Duration(start.toDateMidnight(), start.plusDays(4).toDateMidnight());\n        Interval interval = new Interval(start.toDateMidnight(), start.plusDays(8).toDateMidnight());\n        Duration actual = this.userBusiness.calculateWorktimePerPeriod(user, interval);\n        assertEquals(expected.getMillis(), actual.getMillis());        \n    }\n    \n    @Test\n    public void testStore_newUser() {\n        User user = new User();\n        user.setFullName(\"Teemu Teekkari\");\n        \n        expect(userDAO.create(user)).andReturn(1756);\n        expect(userDAO.get(1756)).andReturn(user);\n        replayAll();\n        User actual = userBusiness.storeUser(user, null, \"teemu\", \"teemu\");\n        verifyAll();\n        \n        assertEquals(\"Teemu Teekkari\", actual.getFullName());\n    }\n    \n    @Test\n    public void testStore_noPasswordChange() {\n        User dataItem = new User();\n        dataItem.setId(123);\n        dataItem.setPassword(\"password string\");\n        \n        userDAO.store(dataItem);\n        replayAll();\n        User actual = userBusiness.storeUser(dataItem, null, null, null);\n        verifyAll();\n        \n        assertEquals(\"password string\", actual.getPassword());\n    }\n    \n    @Test(expected = IllegalArgumentException.class)\n    public void testStore_unmatchedPassword() {\n        userBusiness.storeUser(new User(), null, \"Foo\", \"Incorrect\");\n    }\n    \n    @Test\n    public void testStore_emptyPasswordString() {\n        User dataItem = new User();\n        dataItem.setId(123);\n        dataItem.setPassword(\"password string\");\n        \n        userDAO.store(dataItem);\n        replayAll();\n        User actual = userBusiness.storeUser(dataItem, null, \"\", \"\");\n        verifyAll();\n        \n        assertEquals(\"password string\", actual.getPassword());\n    }\n    \n    @Test\n    public void testStore_passwordChange() {\n        String password = \"teemu\";\n        String bcryptBeginning = \"$2a$10$\";\n        \n        User user = new User();\n        user.setId(123);\n        user.setPassword(\"Foo\");\n        \n        userDAO.store(user);\n        replayAll();\n        User actual = userBusiness.storeUser(user, null, password, password);\n        verifyAll();\n        \n        assertEquals(bcryptBeginning, actual.getPassword().substring(0, 7));\n    }\n    \n    @Test\n    public void testStore_changeTeams() {\n        User user = new User();\n        user.setId(123);\n        \n        Set<Integer> teamIds = new HashSet<Integer>(Arrays.asList(1,7));\n        Team first = new Team();\n        first.setId(1);\n        Team second = new Team();\n        second.setId(7);\n        \n        \n        expect(teamBusiness.retrieve(1)).andReturn(first);\n        expect(teamBusiness.retrieve(7)).andReturn(second);\n        userDAO.store(user);\n        \n        replayAll();\n        User actual = userBusiness.storeUser(user, teamIds, null, null);\n        verifyAll();\n        \n        Collection<Team> teams = actual.getTeams();\n        assertTrue(teams.contains(first));\n        assertTrue(teams.contains(second));\n    }\n    \n    @Test\n    public void testStore_clearTeams() {\n        User user = new User();\n        user.setId(123);\n        user.setTeams(new ArrayList<Team>(Arrays.asList(new Team())));\n              \n        userDAO.store(user);\n        \n        replayAll();\n        User actual = userBusiness.storeUser(user, new HashSet<Integer>(), null, null);\n        verifyAll();\n        \n        Collection<Team> teams = actual.getTeams();\n        assertEquals(0, teams.size());\n    }\n    \n    \n    @Test\n    public void testIsLoginNameUnique() {\n        expect(userDAO.getByLoginNameIgnoreCase(\"paavo\")).andReturn(new User());\n        replayAll();\n        assertFalse(userBusiness.isLoginNameUnique(\"paavo\"));\n        verifyAll();\n    }\n    \n    @Test\n    public void testIsLoginNameUnique_isUnique() {\n        expect(userDAO.getByLoginNameIgnoreCase(\"mauno\")).andReturn(null);\n        replayAll();\n        assertTrue(userBusiness.isLoginNameUnique(\"mauno\"));\n        verifyAll();\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\WidgetCollectionBusinessTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["WidgetCollectionBusinessTest"], "SCS_ClassReference": ["SpringJUnit4ClassRunner", "MockContextLoader", "collection", "", null, "widgetCollectionDAO", "EasyMock", "WidgetCollection", "", null, "widgetCollectionDAO", "", "", "testable", "", "", "collection", "collection", "collection", "widget1", "widget2", "widget3", "", "", "widget1", "", "widget1", "", "testable", "", "", "widget1", null, "", "widget1", null, "", "widget2", "widget2", "widget3", "widget3", "collection", null, "collection", null, "", "widget1", "", "widget1", "", "testable", "", "", "widget1", null, "", "widget1", null, "", "widget2", null, "", "widget2", null, "", "widget3", null, "", "widget3", null, "", "widget2", "widget2", "widget3", "widget3", "collection", null, "collection", null, "", "widget1", "", "widget1", "", "testable", "", "", "widget1", null, "", "widget1", null, "", "widget2", null, "", "widget2", null, "", "widget3", null, "", "widget3", null], "AN": ["testable", "widgetCollectionDAO", "agilefantWidgetBusiness", "collection", "widget1", "widget2", "widget3"], "SCS_VariableDeclarator": ["testable", "widgetCollectionDAO", "agilefantWidgetBusiness", "collection", "widget1", "widget2", "widget3"], "MN": ["testCreatePortfolio", "setUp_data", "testInsertWidgetToHead_emptyCollection", "testInsertWidgetToHead_notEmpty", "testInsertWidgetToPosition"], "PN": [], "SCS_MemberReference": ["collection", "collection", "collection", "collection", "widget1", "widget2", "widget3", "collection", "widget1", "widget2", "widget3", "collection", "widget1", "widget2", "widget3", "collection", "widget1"], "SCS_MethodInvocation": ["setId", "expect", "andReturn", "create", "isA", "expect", "andReturn", "get", "replayAll", "assertSame", "createPortfolio", "verifyAll", "assertEquals", "getName", "setId", "setName", "setType", "setType", "setType", "setUp_data", "assertNull", "getPosition", "assertNull", "getListNumber", "replayAll", "insertWidgetToHead", "verifyAll", "assertEquals", "getPosition", "intValue", "assertEquals", "getListNumber", "intValue", "setUp_data", "setListNumber", "setPosition", "setListNumber", "setPosition", "getWidgets", "add", "getWidgets", "add", "assertNull", "getPosition", "assertNull", "getListNumber", "replayAll", "insertWidgetToHead", "verifyAll", "assertEquals", "getPosition", "intValue", "assertEquals", "getListNumber", "intValue", "assertEquals", "getPosition", "intValue", "assertEquals", "getListNumber", "intValue", "assertEquals", "getPosition", "intValue", "assertEquals", "getListNumber", "intValue", "setUp_data", "setListNumber", "setPosition", "setListNumber", "setPosition", "getWidgets", "add", "getWidgets", "add", "assertNull", "getPosition", "assertNull", "getListNumber", "replayAll", "insertWidgetToPosition", "verifyAll", "assertEquals", "getPosition", "intValue", "assertEquals", "getListNumber", "intValue", "assertEquals", "getPosition", "intValue", "assertEquals", "getListNumber", "intValue", "assertEquals", "getPosition", "intValue", "assertEquals", "getListNumber", "intValue"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.business;\n\n\nimport org.easymock.EasyMock;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.test.annotation.DirtiesContext;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n\nimport fi.hut.soberit.agilefant.business.impl.WidgetCollectionBusinessImpl;\nimport fi.hut.soberit.agilefant.db.WidgetCollectionDAO;\nimport fi.hut.soberit.agilefant.model.AgilefantWidget;\nimport fi.hut.soberit.agilefant.model.WidgetCollection;\nimport fi.hut.soberit.agilefant.test.Mock;\nimport fi.hut.soberit.agilefant.test.MockContextLoader;\nimport fi.hut.soberit.agilefant.test.MockedTestCase;\nimport fi.hut.soberit.agilefant.test.TestedBean;\n\nimport static org.junit.Assert.*;\n\nimport static org.easymock.EasyMock.*;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(loader = MockContextLoader.class)\npublic class WidgetCollectionBusinessTest extends MockedTestCase {\n\n    @TestedBean\n    WidgetCollectionBusinessImpl testable;\n    \n    @Mock\n    WidgetCollectionDAO widgetCollectionDAO;\n    \n    @Mock\n    AgilefantWidgetBusiness agilefantWidgetBusiness;\n    \n    WidgetCollection collection;\n    AgilefantWidget  widget1;\n    AgilefantWidget  widget2;\n    AgilefantWidget  widget3;\n\n    @Test\n    @DirtiesContext\n    public void testCreatePortfolio() {\n        collection = new WidgetCollection();\n        collection.setId(641);\n        \n        expect(widgetCollectionDAO.create(EasyMock.isA(WidgetCollection.class))).andReturn(641);\n        expect(widgetCollectionDAO.get(641)).andReturn(collection);\n        \n        replayAll();\n        assertSame(collection, testable.createPortfolio());\n        verifyAll();\n        \n        assertEquals(\"New dashboard\", collection.getName());\n    }\n    \n    \n    private void setUp_data() {\n        collection = new WidgetCollection();\n        collection.setId(1);\n        collection.setName(\"Test collection\");\n        \n        widget1 = new AgilefantWidget();\n        widget1.setType(\"text\");\n        \n        widget2 = new AgilefantWidget();\n        widget2.setType(\"text\");\n        \n        widget3 = new AgilefantWidget();\n        widget3.setType(\"text\");\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testInsertWidgetToHead_emptyCollection() {\n        setUp_data();\n        assertNull(widget1.getPosition());\n        assertNull(widget1.getListNumber());\n        \n        replayAll();\n        testable.insertWidgetToHead(collection, widget1);\n        verifyAll();\n        \n        assertEquals(0, widget1.getPosition().intValue());\n        assertEquals(0, widget1.getListNumber().intValue());\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testInsertWidgetToHead_notEmpty() {\n        setUp_data();\n        widget2.setListNumber(0);\n        widget2.setPosition(0);\n        widget3.setListNumber(1);\n        widget3.setPosition(0);\n        collection.getWidgets().add(widget2);\n        collection.getWidgets().add(widget3);\n        \n        assertNull(widget1.getPosition());\n        assertNull(widget1.getListNumber());\n        \n        replayAll();\n        testable.insertWidgetToHead(collection, widget1);\n        verifyAll();\n        \n        assertEquals(0, widget1.getPosition().intValue());\n        assertEquals(0, widget1.getListNumber().intValue());\n        \n        assertEquals(1, widget2.getPosition().intValue());\n        assertEquals(0, widget2.getListNumber().intValue());\n        \n        assertEquals(0, widget3.getPosition().intValue());\n        assertEquals(1, widget3.getListNumber().intValue());\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testInsertWidgetToPosition() {\n        setUp_data();\n        widget2.setListNumber(0);\n        widget2.setPosition(0);\n        widget3.setListNumber(1);\n        widget3.setPosition(0);\n        collection.getWidgets().add(widget2);\n        collection.getWidgets().add(widget3);\n        \n        assertNull(widget1.getPosition());\n        assertNull(widget1.getListNumber());\n        \n        replayAll();\n        testable.insertWidgetToPosition(collection, widget1, 0, 1);\n        verifyAll();\n        \n        assertEquals(0, widget1.getPosition().intValue());\n        assertEquals(1, widget1.getListNumber().intValue());\n        \n        assertEquals(0, widget2.getPosition().intValue());\n        assertEquals(0, widget2.getListNumber().intValue());\n        \n        assertEquals(1, widget3.getPosition().intValue());\n        assertEquals(1, widget3.getListNumber().intValue());\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\impl\\\\StoryBusinessImplTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["StoryBusinessImplTest"], "AN": ["impl", "s1", "s2"], "SCS_VariableDeclarator": ["impl", "s1", "s2", "ite", "ite", "ite2"], "MN": ["setup", "iterationChanged_same", "iterationChanged_null", "iterationChanged", "storyHasChildren"], "PN": [], "SCS_MemberReference": ["impl", "s1", "s2", "ite", "ite", "s1", "s2", "s1", "s1", "ite", "ite2", "s1", "s2", "s2", "s1"], "SCS_ClassReference": ["s1", "s2", "ite", "s1", "s2", "Assert", "StoryBusinessImpl", "Assert", "StoryBusinessImpl", "Assert", "StoryBusinessImpl", "Assert", "StoryBusinessImpl", "ite", "ite2", "s1", "s2", "Assert", "StoryBusinessImpl", "Assert", "StoryBusinessImpl", "s1", null, "Assert", "StoryBusinessImpl"], "SCS_MethodInvocation": ["setId", "setId", "setId", "setIteration", "setIteration", "assertFalse", "haveDifferentIteration", "assertTrue", "haveDifferentIteration", "assertTrue", "haveDifferentIteration", "assertFalse", "haveDifferentIteration", "setId", "setId", "setIteration", "setIteration", "assertTrue", "haveDifferentIteration", "assertFalse", "storyHasChildren", "getChildren", "add", "assertTrue", "storyHasChildren"], "SCS_VariableDeclaration": ["Iteration", "Iteration", "Iteration"], "CO": ["// initialization", "// test"], "CODE": "package fi.hut.soberit.agilefant.business.impl;\n\nimport java.util.HashSet;\nimport java.util.Set;\n\nimport junit.framework.Assert;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.StoryRank;\n\npublic class StoryBusinessImplTest {\n\n    private StoryBusinessImpl impl;\n    \n    private Story s1;\n    private Story s2; \n\n    \n    @Before\n    public void setup() {\n        impl = new StoryBusinessImpl();\n        \n        s1 = new Story();\n        s2 = new Story();\n        s1.setId(1);\n        s2.setId(2);\n    }\n    \n\n    @Test\n    public void iterationChanged_same() {\n            \n        final Iteration ite = new Iteration();\n        ite.setId(3);\n        \n        s1.setIteration(ite);\n        s2.setIteration(ite);\n        \n        Assert.assertFalse(StoryBusinessImpl.haveDifferentIteration(s1, s2));\n    }\n\n    \n    @Test\n    public void iterationChanged_null() {\n        Assert.assertTrue(StoryBusinessImpl.haveDifferentIteration(null, s1));\n        Assert.assertTrue(StoryBusinessImpl.haveDifferentIteration(s1, null));\n        \n        Assert.assertFalse(StoryBusinessImpl.haveDifferentIteration(null, null));\n    }\n\n    \n    @Test\n    public void iterationChanged() {\n        final Iteration ite = new Iteration();\n        ite.setId(3);\n\n        final Iteration ite2 = new Iteration();\n        ite2.setId(4);\n        \n        s1.setIteration(ite);\n        s2.setIteration(ite2);\n        \n        Assert.assertTrue(StoryBusinessImpl.haveDifferentIteration(s1, s2));\n    }\n    \n     \n    @Test\n    public void storyHasChildren() {\n        Assert.assertFalse(StoryBusinessImpl.storyHasChildren(null));\n        \n        \n        // initialization\n        s1.getChildren().add(s2);\n        \n        // test\n        Assert.assertTrue(StoryBusinessImpl.storyHasChildren(s1));\n    }\n    \n    \n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\business\\\\impl\\\\StoryTreeIntegrityBusinessTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["StoryTreeIntegrityBusinessTest"], "SCS_ClassReference": ["SpringJUnit4ClassRunner", "MockContextLoader", "", null, "backlogBusiness", "story_31", "", null, "backlogBusiness", "", "testable", "", "", "", "", null, "backlogBusiness", "story_21", "", null, "backlogBusiness", "", "testable", "", "", "", "", "", "", null, "backlogBusiness", "story_41", "", null, "backlogBusiness", "", "testable", "", "", "", "", null, "backlogBusiness", "story_33", "", null, "backlogBusiness", "", "testable", "", "", "", "", "testable", "", "", "", null, "backlogBusiness", "story_23", "", null, "backlogBusiness", "", "testable", "", "", "", "testable", "", "", "", "", "testable", "", "", "", "", "testable", "", "", "", "", "testable", "", "", "", "", "msg", "msg", "msg", "", "", "messages", "", "", "", "", "story_11", "story_12", "story_21", "story_31", "story_32", "story_41", "story_22", "story_33", "story_23", "story_11", "Arrays", "story_21", "story_22", "story_21", "Arrays", "story_31", "story_32", "story_31", "Arrays", "story_41", "story_22", "Arrays", "story_33", "story_23", "story_11", "story_12", "story_21", "story_31", "story_32", "story_41", "story_41", "story_22", "story_33", "story_23", "product", "Arrays", "project1", "project1", "Arrays", "iteration", "project2", "iteration", "project", "parentStory", "story", "story", "", "", null, "", "targetProject", "project", "parentStory", "story", "story", "", null, null, "", null, null, "", "", null, "", "targetProject", "project", "parentStory", "story", "story", "", null, null, "", null, null, "", "", null, ""], "AN": ["testable", "backlogBusiness", "messages", "product", "project1", "project2", "iteration", "story_11", "story_12", "story_21", "story_31", "story_32", "story_41", "story_22", "story_33", "story_23"], "SCS_VariableDeclarator": ["testable", "backlogBusiness", "messages", "another", "msg", "product", "project1", "project2", "iteration", "story_11", "story_12", "story_21", "story_31", "story_32", "story_41", "story_22", "story_33", "story_23", "product", "project", "iteration", "parentStory", "story", "product", "project", "targetProject", "parentStory", "story", "product", "targetProduct", "project", "targetProject", "parentStory", "story"], "MN": ["testChangeBacklog_hasChildren_movingToIteration", "testChangeBacklog_hasChildren_notUnderTargetBacklog", "testChangeBacklog_moveToProduct_parentInProject", "testChangeBacklog_moveToDifferentBranch", "testChangeBacklog_moveToAnotherProduct_noConflict", "testChangeBacklog_moveToAnotherProduct_withConflict", "testChangeParent_moveUnderIterationStory", "testChangeParent_moveToDifferentBranch", "testChangeParent_moveProductStoryUnderProjectStory", "testChangeParent_moveBranchUnderAnother", "assertMessagesContain", "assertNumberOfMessages", "setUp_data", "constructStories", "setStoryRelations", "setStoryBacklogs", "constructBacklogs", "testHasParentStoryConflict_toIteration", "testHasParentStoryConflict_toOtherProject", "testHasParentStoryConflict_differentProduct"], "PN": ["messages", "message", "source", "target", "messages", "num"], "SCS_MethodInvocation": ["expect", "andReturn", "getParentProduct", "getBacklog", "expect", "andReturn", "getParentProduct", "replayAll", "checkChangeBacklog", "verifyAll", "assertNumberOfMessages", "assertMessagesContain", "expect", "andReturn", "getParentProduct", "getBacklog", "expect", "andReturn", "getParentProduct", "replayAll", "checkChangeBacklog", "verifyAll", "assertNumberOfMessages", "assertMessagesContain", "assertMessagesContain", "assertMessagesContain", "expect", "andReturn", "getParentProduct", "getBacklog", "expect", "andReturn", "getParentProduct", "replayAll", "checkChangeBacklog", "verifyAll", "assertNumberOfMessages", "assertMessagesContain", "expect", "andReturn", "getParentProduct", "getBacklog", "expect", "andReturn", "getParentProduct", "replayAll", "checkChangeBacklog", "verifyAll", "assertNumberOfMessages", "assertMessagesContain", "replayAll", "checkChangeBacklog", "verifyAll", "assertNumberOfMessages", "expect", "andReturn", "getParentProduct", "getBacklog", "expect", "andReturn", "getParentProduct", "replayAll", "checkChangeBacklog", "verifyAll", "assertNumberOfMessages", "replayAll", "checkChangeParentStory", "verifyAll", "assertNumberOfMessages", "assertMessagesContain", "replayAll", "checkChangeParentStory", "verifyAll", "assertNumberOfMessages", "assertMessagesContain", "replayAll", "checkChangeParentStory", "verifyAll", "assertNumberOfMessages", "assertMessagesContain", "replayAll", "checkChangeParentStory", "verifyAll", "assertNumberOfMessages", "assertMessagesContain", "assertMessagesContain", "getMessage", "getSource", "getTarget", "fail", "assertEquals", "size", "constructBacklogs", "constructStories", "setStoryBacklogs", "setStoryRelations", "setName", "setName", "setName", "setName", "setName", "setName", "setName", "setName", "setName", "setChildren", "asList", "setParent", "setParent", "setChildren", "asList", "setParent", "setParent", "setChildren", "asList", "setParent", "setChildren", "asList", "setParent", "setParent", "setBacklog", "setBacklog", "setBacklog", "setBacklog", "setBacklog", "setIteration", "setBacklog", "setBacklog", "setBacklog", "setBacklog", "setChildren", "asList", "setParent", "setChildren", "asList", "setParent", "setParent", "setParent", "setParent", "setBacklog", "setBacklog", "setParent", "replayAll", "assertFalse", "hasParentStoryConflict", "verifyAll", "setParent", "setParent", "setBacklog", "setBacklog", "setParent", "expect", "andReturn", "getParentProduct", "expect", "andReturn", "getParentProduct", "replayAll", "assertTrue", "hasParentStoryConflict", "verifyAll", "setParent", "setParent", "setBacklog", "setBacklog", "setParent", "expect", "andReturn", "getParentProduct", "expect", "andReturn", "getParentProduct", "replayAll", "assertTrue", "hasParentStoryConflict", "verifyAll"], "SCS_MemberReference": ["product", "product", "iteration", "messages", "story_31", "iteration", "messages", "messages", "MOVE_TO_ITERATION_HAS_CHILDREN", "story_31", "product", "product", "project2", "messages", "story_21", "project2", "messages", "messages", "CHILD_IN_WRONG_BRANCH", "story_21", "story_31", "messages", "CHILD_IN_WRONG_BRANCH", "story_31", "story_41", "messages", "CHILD_IN_WRONG_BRANCH", "story_21", "story_32", "product", "product", "product", "messages", "story_41", "product", "messages", "messages", "PARENT_DEEPER_IN_HIERARCHY", "story_41", "story_31", "product", "product", "project1", "messages", "story_33", "project1", "messages", "messages", "PARENT_IN_WRONG_BRANCH", "story_33", "story_22", "messages", "story_12", "messages", "product", "another", "another", "messages", "story_23", "another", "messages", "messages", "story_32", "story_41", "messages", "messages", "TARGET_PARENT_IN_ITERATION", "story_32", "story_41", "messages", "story_41", "story_22", "messages", "messages", "TARGET_PARENT_IN_WRONG_BRANCH", "story_41", "story_22", "messages", "story_23", "story_22", "messages", "messages", "TARGET_PARENT_DEEPER_IN_HIERARCHY", "story_23", "story_22", "messages", "story_22", "story_31", "messages", "messages", "TARGET_PARENT_IN_WRONG_BRANCH", "story_22", "story_31", "messages", "TARGET_PARENT_IN_WRONG_BRANCH", "story_22", "story_33", "messages", "message", "source", "target", "message", "num", "story_11", "story_12", "story_21", "story_31", "story_32", "story_41", "story_22", "story_33", "story_23", "story_21", "story_22", "story_11", "story_11", "story_31", "story_32", "story_21", "story_21", "story_41", "story_31", "story_33", "story_22", "story_11", "product", "product", "product", "project1", "project1", "iteration", "project1", "project2", "project2", "product", "product", "project1", "project2", "iteration", "project1", "project2", "product", "iteration", "project1", "product", "project", "product", "project", "project", "parentStory", "testable", "story", "iteration", "product", "product", "project", "project", "parentStory", "product", "backlogBusiness", "targetProject", "product", "backlogBusiness", "project", "testable", "story", "targetProject", "targetProduct", "product", "project", "project", "parentStory", "targetProduct", "backlogBusiness", "targetProject", "product", "backlogBusiness", "project", "testable", "story", "targetProject"], "SCS_VariableDeclaration": ["Product", "StoryTreeIntegrityMessage", "Product", "Project", "Iteration", "Story", "Story", "Product", "Project", "Project", "Story", "Story", "Product", "Product", "Project", "Project", "Story", "Story"], "CO": ["/*\n     * CHANGING BACKLOG\n     */", "/*\n     * CHANGING PARENT STORY\n     */", "// 32 -> 41", "// 41 -> 22", "// 23 -> 22", "// 34 vaihtaa branchia", "// 22 -> 31", "// 2 virhett\u00c3\u00a4, 22->31, 33 -> 31", "/*\n     * HELPER METHODS\n     */", "/**\n     * Helper method for checking messages' content.\n     */", "/*\n     * DATA CONSTRUCTION\n     */", "/*\n     * Dataset as ASCII:\n     * Story 11 (Prod)\n     * |- Story 21 (Prod)\n     * | |- Story 31 (Proj1)\n     * | | |- Story 41 (Iter1)\n     * | |- Story 32 (Proj1)\n     * |- Story 22 (Proj2)\n     * | |- Story 33 (Proj2)\n     * |- Story 23 (Prod)\n     * Story 12 (Prod)\n     */", "// TODO add replay & verify wrapper", "/*\n    @Test\n    public void checkParentDifferentProjectRule_whenTargetIsStandalone() {\n        Story parentStory = new Story();\n        Story childStory = new Story();\n        parentStory.getChildren().add(childStory);\n        \n        Iteration standAloneIteration = new Iteration();\n        standAloneIteration.setParent(null);\n        \n        List<StoryTreeIntegrityMessage> messages = new ArrayList<StoryTreeIntegrityMessage>();\n        \n        \n        StoryTreeIntegrityBusinessImpl.checkParentDifferentProjectRule(childStory, standAloneIteration, messages);\n        \n        assertTrue(messages.size() == 0);\n        \n    }\n    */"], "CODE": "package fi.hut.soberit.agilefant.business.impl;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.List;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.test.annotation.DirtiesContext;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n\nimport fi.hut.soberit.agilefant.business.BacklogBusiness;\nimport fi.hut.soberit.agilefant.business.impl.StoryTreeIntegrityBusinessImpl;\nimport fi.hut.soberit.agilefant.model.Backlog;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.Product;\nimport fi.hut.soberit.agilefant.model.Project;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.test.Mock;\nimport fi.hut.soberit.agilefant.test.MockContextLoader;\nimport fi.hut.soberit.agilefant.test.MockedTestCase;\nimport fi.hut.soberit.agilefant.test.TestedBean;\nimport fi.hut.soberit.agilefant.util.StoryHierarchyIntegrityViolationType;\nimport fi.hut.soberit.agilefant.util.StoryTreeIntegrityMessage;\n\nimport static org.junit.Assert.*;\n\nimport static org.easymock.EasyMock.*;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(loader = MockContextLoader.class)\npublic class StoryTreeIntegrityBusinessTest extends MockedTestCase {\n\n    @TestedBean\n    private StoryTreeIntegrityBusinessImpl testable;\n\n    @Mock\n    private BacklogBusiness backlogBusiness;\n\n    List<StoryTreeIntegrityMessage> messages;\n\n    /*\n     * CHANGING BACKLOG\n     */\n\n    @Test\n    @DirtiesContext\n    public void testChangeBacklog_hasChildren_movingToIteration() {\n        expect(backlogBusiness.getParentProduct(story_31.getBacklog()))\n                .andReturn(product);\n        expect(backlogBusiness.getParentProduct(iteration)).andReturn(product);\n\n        replayAll();\n        messages = testable.checkChangeBacklog(story_31, iteration);\n        verifyAll();\n\n        assertNumberOfMessages(messages, 1);\n        assertMessagesContain(\n                messages,\n                StoryHierarchyIntegrityViolationType.MOVE_TO_ITERATION_HAS_CHILDREN,\n                story_31, null);\n    }\n\n    @Test\n    @DirtiesContext\n    public void testChangeBacklog_hasChildren_notUnderTargetBacklog() {\n        expect(backlogBusiness.getParentProduct(story_21.getBacklog()))\n                .andReturn(product);\n        expect(backlogBusiness.getParentProduct(project2)).andReturn(product);\n\n        replayAll();\n        messages = testable.checkChangeBacklog(story_21, project2);\n        verifyAll();\n\n        assertNumberOfMessages(messages, 3);\n        assertMessagesContain(messages,\n                StoryHierarchyIntegrityViolationType.CHILD_IN_WRONG_BRANCH,\n                story_21, story_31);\n        assertMessagesContain(messages,\n                StoryHierarchyIntegrityViolationType.CHILD_IN_WRONG_BRANCH,\n                story_31, story_41);\n        assertMessagesContain(messages,\n                StoryHierarchyIntegrityViolationType.CHILD_IN_WRONG_BRANCH,\n                story_21, story_32);\n    }\n\n    @Test\n    @DirtiesContext\n    public void testChangeBacklog_moveToProduct_parentInProject() {\n        expect(backlogBusiness.getParentProduct(story_41.getBacklog()))\n                .andReturn(product);\n        expect(backlogBusiness.getParentProduct(product)).andReturn(product);\n\n        replayAll();\n        messages = testable.checkChangeBacklog(story_41, product);\n        verifyAll();\n\n        assertNumberOfMessages(messages, 1);\n        assertMessagesContain(\n                messages,\n                StoryHierarchyIntegrityViolationType.PARENT_DEEPER_IN_HIERARCHY,\n                story_41, story_31);\n    }\n\n    @Test\n    @DirtiesContext\n    public void testChangeBacklog_moveToDifferentBranch() {\n        expect(backlogBusiness.getParentProduct(story_33.getBacklog()))\n                .andReturn(product);\n        expect(backlogBusiness.getParentProduct(project1)).andReturn(product);\n\n        replayAll();\n        messages = testable.checkChangeBacklog(story_33, project1);\n        verifyAll();\n\n        assertNumberOfMessages(messages, 1);\n        assertMessagesContain(messages,\n                StoryHierarchyIntegrityViolationType.PARENT_IN_WRONG_BRANCH,\n                story_33, story_22);\n    }\n\n    @Test\n    @DirtiesContext\n    public void testChangeBacklog_moveToAnotherProduct_noConflict() {\n        replayAll();\n        messages = testable.checkChangeBacklog(story_12, new Product());\n        verifyAll();\n        assertNumberOfMessages(messages, 0);\n    }\n\n    @Test\n    @DirtiesContext\n    public void testChangeBacklog_moveToAnotherProduct_withConflict() {\n        Product another = new Product();\n        \n        expect(backlogBusiness.getParentProduct(story_23.getBacklog())).andReturn(product);\n        expect(backlogBusiness.getParentProduct(another)).andReturn(another);\n        \n        replayAll();\n        messages = testable.checkChangeBacklog(story_23, another);\n        verifyAll();\n        assertNumberOfMessages(messages, 1);\n    }\n\n    /*\n     * CHANGING PARENT STORY\n     */\n\n    @Test\n    @DirtiesContext\n    public void testChangeParent_moveUnderIterationStory() {\n        // 32 -> 41\n\n        replayAll();\n        messages = testable.checkChangeParentStory(story_32, story_41);\n        verifyAll();\n\n        assertNumberOfMessages(messages, 1);\n        assertMessagesContain(\n                messages,\n                StoryHierarchyIntegrityViolationType.TARGET_PARENT_IN_ITERATION,\n                story_32, story_41);\n    }\n\n    @Test\n    @DirtiesContext\n    public void testChangeParent_moveToDifferentBranch() {\n        // 41 -> 22\n\n        replayAll();\n        messages = testable.checkChangeParentStory(story_41, story_22);\n        verifyAll();\n\n        assertNumberOfMessages(messages, 1);\n        assertMessagesContain(\n                messages,\n                StoryHierarchyIntegrityViolationType.TARGET_PARENT_IN_WRONG_BRANCH,\n                story_41, story_22);\n    }\n\n    @Test\n    @DirtiesContext\n    public void testChangeParent_moveProductStoryUnderProjectStory() {\n        // 23 -> 22\n        // 34 vaihtaa branchia\n\n        replayAll();\n        messages = testable.checkChangeParentStory(story_23, story_22);\n        verifyAll();\n\n        assertNumberOfMessages(messages, 1);\n        assertMessagesContain(\n                messages,\n                StoryHierarchyIntegrityViolationType.TARGET_PARENT_DEEPER_IN_HIERARCHY,\n                story_23, story_22);\n    }\n\n    @Test\n    @DirtiesContext\n    public void testChangeParent_moveBranchUnderAnother() {\n        // 22 -> 31\n        // 2 virhett\u00c3\u00a4, 22->31, 33 -> 31\n\n        replayAll();\n        messages = testable.checkChangeParentStory(story_22, story_31);\n        verifyAll();\n\n        assertNumberOfMessages(messages, 2);\n        assertMessagesContain(\n                messages,\n                StoryHierarchyIntegrityViolationType.TARGET_PARENT_IN_WRONG_BRANCH,\n                story_22, story_31);\n        assertMessagesContain(\n                messages,\n                StoryHierarchyIntegrityViolationType.TARGET_PARENT_IN_WRONG_BRANCH,\n                story_22, story_33);\n    }\n\n    /*\n     * HELPER METHODS\n     */\n\n    /**\n     * Helper method for checking messages' content.\n     */\n    private void assertMessagesContain(\n            List<StoryTreeIntegrityMessage> messages,\n            StoryHierarchyIntegrityViolationType message, Story source,\n            Story target) {\n\n        for (StoryTreeIntegrityMessage msg : messages) {\n            if (msg.getMessage() == message && msg.getSource() == source\n                    && msg.getTarget() == target) {\n                return;\n            }\n        }\n        fail(\"Message not found: \" + message);\n    }\n\n    private void assertNumberOfMessages(\n            List<StoryTreeIntegrityMessage> messages, int num) {\n        assertEquals(\"Incorrect number of messages\", num, messages.size());\n    }\n\n    /*\n     * DATA CONSTRUCTION\n     */\n    /*\n     * Dataset as ASCII:\n     * Story 11 (Prod)\n     * |- Story 21 (Prod)\n     * | |- Story 31 (Proj1)\n     * | | |- Story 41 (Iter1)\n     * | |- Story 32 (Proj1)\n     * |- Story 22 (Proj2)\n     * | |- Story 33 (Proj2)\n     * |- Story 23 (Prod)\n     * Story 12 (Prod)\n     */\n\n    Product product;\n    Project project1;\n    Project project2;\n    Iteration iteration;\n    Story story_11;\n    Story story_12;\n    Story story_21;\n    Story story_31;\n    Story story_32;\n    Story story_41;\n    Story story_22;\n    Story story_33;\n    Story story_23;\n\n    @Before\n    public void setUp_data() {\n        constructBacklogs();\n        constructStories();\n        setStoryBacklogs();\n        setStoryRelations();\n    }\n\n    private void constructStories() {\n        story_11 = new Story();\n        story_12 = new Story();\n        story_21 = new Story();\n        story_31 = new Story();\n        story_32 = new Story();\n        story_41 = new Story();\n        story_22 = new Story();\n        story_33 = new Story();\n        story_23 = new Story();\n\n        story_11.setName(\"Story 11\");\n        story_12.setName(\"Story 12\");\n        story_21.setName(\"Story 21\");\n        story_31.setName(\"Story 31\");\n        story_32.setName(\"Story 32\");\n        story_41.setName(\"Story 41\");\n        story_22.setName(\"Story 22\");\n        story_33.setName(\"Story 33\");\n        story_23.setName(\"Story 23\");\n    }\n\n    private void setStoryRelations() {\n        story_11.setChildren(new ArrayList<Story>(Arrays.asList(story_21,\n                story_22)));\n        story_21.setParent(story_11);\n        story_22.setParent(story_11);\n\n        story_21.setChildren(new ArrayList<Story>(Arrays.asList(story_31,\n                story_32)));\n        story_31.setParent(story_21);\n        story_32.setParent(story_21);\n\n        story_31.setChildren(new ArrayList<Story>(Arrays.asList(story_41)));\n        story_41.setParent(story_31);\n\n        story_22.setChildren(new ArrayList<Story>(Arrays.asList(story_33)));\n        story_33.setParent(story_22);\n\n        story_23.setParent(story_11);\n    }\n\n    private void setStoryBacklogs() {\n        story_11.setBacklog(product);\n        story_12.setBacklog(product);\n        story_21.setBacklog(product);\n        story_31.setBacklog(project1);\n        story_32.setBacklog(project1);\n        story_41.setIteration(iteration);\n        story_41.setBacklog(project1);\n        story_22.setBacklog(project2);\n        story_33.setBacklog(project2);\n        story_23.setBacklog(product);\n    }\n\n    private void constructBacklogs() {\n        product = new Product();\n        project1 = new Project();\n        project2 = new Project();\n        iteration = new Iteration();\n\n        product.setChildren(new HashSet<Backlog>(Arrays.asList(project1,\n                project2)));\n\n        project1.setParent(product);\n        project1.setChildren(new HashSet<Backlog>(Arrays.asList(iteration)));\n        iteration.setParent(project1);\n\n        project2.setParent(product);\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testHasParentStoryConflict_toIteration() {\n        Product product = new Product();\n        Project project = new Project();\n        Iteration iteration = new Iteration();\n        \n        Story parentStory = new Story();\n        Story story = new Story();\n        \n        iteration.setParent(project);\n        project.setParent(product);\n        \n        parentStory.setBacklog(project);\n        story.setBacklog(project);\n        story.setParent(parentStory);\n        \n        replayAll();\n        assertFalse(this.testable.hasParentStoryConflict(story, iteration));\n        verifyAll();\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testHasParentStoryConflict_toOtherProject() {\n        Product product = new Product();\n        Project project = new Project();\n        Project targetProject = new Project();\n        \n        Story parentStory = new Story();\n        Story story = new Story();\n        \n        targetProject.setParent(product);\n        project.setParent(product);\n        \n        parentStory.setBacklog(project);\n        story.setBacklog(project);\n        story.setParent(parentStory);\n        \n        expect(this.backlogBusiness.getParentProduct(targetProject)).andReturn(product);\n        expect(this.backlogBusiness.getParentProduct(project)).andReturn(product);\n        \n        replayAll();\n        assertTrue(this.testable.hasParentStoryConflict(story, targetProject));\n        verifyAll();\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testHasParentStoryConflict_differentProduct() {\n        Product product = new Product();\n        Product targetProduct = new Product();\n        Project project = new Project();\n        Project targetProject = new Project();\n        \n        Story parentStory = new Story();\n        Story story = new Story();\n        \n        targetProject.setParent(targetProduct);\n        project.setParent(product);\n        \n        parentStory.setBacklog(project);\n        story.setBacklog(project);\n        story.setParent(parentStory);\n        \n        expect(this.backlogBusiness.getParentProduct(targetProject)).andReturn(targetProduct);\n        expect(this.backlogBusiness.getParentProduct(project)).andReturn(product);\n        \n        replayAll();\n        assertTrue(this.testable.hasParentStoryConflict(story, targetProject));\n        verifyAll();\n    }\n    \n    // TODO add replay & verify wrapper\n    /*\n    @Test\n    public void checkParentDifferentProjectRule_whenTargetIsStandalone() {\n        Story parentStory = new Story();\n        Story childStory = new Story();\n        parentStory.getChildren().add(childStory);\n        \n        Iteration standAloneIteration = new Iteration();\n        standAloneIteration.setParent(null);\n        \n        List<StoryTreeIntegrityMessage> messages = new ArrayList<StoryTreeIntegrityMessage>();\n        \n        \n        StoryTreeIntegrityBusinessImpl.checkParentDifferentProjectRule(childStory, standAloneIteration, messages);\n        \n        assertTrue(messages.size() == 0);\n        \n    }\n    */\n    \n    \n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\AssignmentDAOTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["AssignmentDAOTest"], "AN": ["assignmentDAO", "user", "interval"], "SCS_VariableDeclarator": ["assignmentDAO", "user", "interval", "actual", "actual", "actual", "actual"], "MN": ["setUp", "tearDown", "testAssigmentsInBacklogTimeframe_noInFrame", "testAssigmentsInBacklogTimeframe_begins", "testAssigmentsInBacklogTimeframe_ends", "testAssigmentsInBacklogTimeframe"], "PN": [], "SCS_MemberReference": ["user", "user", "interval", "interval", "interval", "user", "interval", "interval", "user", "interval", "interval", "user", "interval", "interval", "user"], "SCS_ClassReference": ["user", "", "assignmentDAO", "", "actual", "", "assignmentDAO", "", "actual", "", "assignmentDAO", "", "actual", "", "assignmentDAO", "", "actual"], "SCS_MethodInvocation": ["setId", "executeClassSql", "assigmentsInBacklogTimeframe", "assertEquals", "size", "executeClassSql", "assigmentsInBacklogTimeframe", "assertEquals", "size", "executeClassSql", "assigmentsInBacklogTimeframe", "assertEquals", "size", "executeClassSql", "assigmentsInBacklogTimeframe", "assertEquals", "size"], "SCS_VariableDeclaration": ["List", "List", "List", "List"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.db;\n\nimport static org.junit.Assert.*;\n\nimport java.util.List;\n\nimport org.joda.time.DateTime;\nimport org.joda.time.Interval;\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport fi.hut.soberit.agilefant.model.Assignment;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.test.AbstractHibernateTests;\n\n@ContextConfiguration\n@Transactional\npublic class AssignmentDAOTest extends AbstractHibernateTests {\n    \n    @Autowired\n    private AssignmentDAO assignmentDAO;\n    \n    private User user;\n    \n    private Interval interval;\n    \n    @Before\n    public void setUp() {\n        user = new User();\n        user.setId(2);\n    }\n    \n    @After\n    public void tearDown() {\n        this.user = null;\n        this.interval = null;\n    }\n    \n    @Test\n    public void testAssigmentsInBacklogTimeframe_noInFrame() {\n        executeClassSql();\n        interval = new Interval(new DateTime(2009,1,1,0,0,0,0), new DateTime(2009,2,1,0,0,0,0));\n        List<Assignment> actual = assignmentDAO.assigmentsInBacklogTimeframe(interval, user);\n        assertEquals(0, actual.size());\n    }\n    \n    @Test\n    public void testAssigmentsInBacklogTimeframe_begins() {\n        executeClassSql();\n        interval = new Interval(new DateTime(2009,1,1,0,0,0,0), new DateTime(2009,6,5,0,0,0,0));\n        List<Assignment> actual = assignmentDAO.assigmentsInBacklogTimeframe(interval, user);\n        assertEquals(2, actual.size());\n    }\n    \n    @Test\n    public void testAssigmentsInBacklogTimeframe_ends() {\n        executeClassSql();\n        interval = new Interval(new DateTime(2009,6,6,0,0,0,0), new DateTime(2009,7,1,0,0,0,0));\n        List<Assignment> actual = assignmentDAO.assigmentsInBacklogTimeframe(interval, user);\n        assertEquals(2, actual.size());\n    }\n    \n    @Test\n    public void testAssigmentsInBacklogTimeframe() {\n        executeClassSql();\n        interval = new Interval(new DateTime(2009,6,2,0,0,0,0), new DateTime(2009,6,8,0,0,0,0));\n        List<Assignment> actual = assignmentDAO.assigmentsInBacklogTimeframe(interval, user);\n        assertEquals(2, actual.size());\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\BacklogDAOTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["BacklogDAOTest"], "AN": ["backlogDAO"], "SCS_VariableDeclarator": ["backlogDAO", "search", "backlogs", "search", "backlogs", "search", "backlogs", "search", "backlogs"], "MN": ["testCalculateStoryPointSum", "testCalculateStoryDonePointSum", "testSearchByName", "testSearchByName_notFound", "testSearchByName_iterations", "testSearchByName_projects"], "PN": [], "SCS_ClassReference": ["", "", "backlogDAO", "", "", "backlogDAO", "", "backlogDAO", "", "backlogs", "", "backlogDAO", "", "backlogs", "", "backlogDAO", "Iteration", "", "backlogs", "", "backlogDAO", "Project", "", "backlogs"], "SCS_MethodInvocation": ["executeClassSql", "assertEquals", "calculateStoryPointSum", "executeClassSql", "assertEquals", "calculateDoneStoryPointSum", "executeClassSql", "searchByName", "assertEquals", "size", "executeClassSql", "searchByName", "assertEquals", "size", "executeClassSql", "searchByName", "assertEquals", "size", "executeClassSql", "searchByName", "assertEquals", "size"], "SCS_VariableDeclaration": ["String", "List", "String", "List", "String", "List", "String", "List"], "SCS_MemberReference": ["search", "search", "search", "search"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.db;\n\nimport static org.junit.Assert.*;\n\nimport java.util.List;\n\nimport org.junit.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport fi.hut.soberit.agilefant.model.Backlog;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.Project;\nimport fi.hut.soberit.agilefant.test.AbstractHibernateTests;\n\n@ContextConfiguration\n@Transactional\npublic class BacklogDAOTest extends AbstractHibernateTests {\n    \n    @Autowired    \n    private BacklogDAO backlogDAO;\n    \n    @Test\n    public void testCalculateStoryPointSum() {\n        executeClassSql();\n        assertEquals(20, backlogDAO.calculateStoryPointSum(1));\n    }\n    \n    @Test\n    public void testCalculateStoryDonePointSum() {\n        executeClassSql();\n        assertEquals(10, backlogDAO.calculateDoneStoryPointSum(1));\n    }\n\n    \n    @Test\n    public void testSearchByName() {\n        String search  = \"Iteration\";\n        executeClassSql();\n        List<Backlog> backlogs = backlogDAO.searchByName(search);\n        assertEquals(4, backlogs.size());\n    }\n\n    @Test\n    public void testSearchByName_notFound() {\n        String search  = \"not found string\";\n        executeClassSql();\n        List<Backlog> backlogs = backlogDAO.searchByName(search);\n        assertEquals(0, backlogs.size());\n    }\n    \n    @Test\n    public void testSearchByName_iterations() {\n        String search  = \"Iteration\";\n        executeClassSql();\n        List<Backlog> backlogs = backlogDAO.searchByName(search, Iteration.class);\n        assertEquals(4, backlogs.size());\n    }\n    \n    @Test\n    public void testSearchByName_projects() {\n        String search  = \"Iteration\";\n        executeClassSql();\n        List<Backlog> backlogs = backlogDAO.searchByName(search, Project.class);\n        assertEquals(0, backlogs.size());\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\BacklogHistoryEntryDAOTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["BacklogHistoryEntryDAOTest"], "AN": ["backlogHistoryEntryDAO"], "SCS_VariableDeclarator": ["backlogHistoryEntryDAO", "count", "entry", "entry", "count", "entry"], "MN": ["testRetrieveBurnupData_duplicate", "testRetrieveBurnupData_noHistory", "testRetrieveBurnupData"], "PN": [], "SCS_ClassReference": ["", "backlogHistoryEntryDAO", "", "", "", "", "backlogHistoryEntryDAO", "", "", "backlogHistoryEntryDAO", "", ""], "SCS_MethodInvocation": ["executeClassSql", "retrieveBurnupData", "assertEquals", "assertEquals", "assertEquals", "executeClassSql", "retrieveBurnupData", "fail", "executeClassSql", "retrieveBurnupData", "assertNotNull", "assertEquals"], "SCS_VariableDeclaration": ["int", "ProjectBurnupData", "ProjectBurnupData", "int", "ProjectBurnupData"], "SCS_MemberReference": ["count", "estimateSum", "doneSum", "count", "entry", "entry", "count", "count"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.db;\n\nimport static org.junit.Assert.*;\n\nimport org.junit.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport fi.hut.soberit.agilefant.test.AbstractHibernateTests;\nimport fi.hut.soberit.agilefant.util.ProjectBurnupData;\n\n@ContextConfiguration\n@Transactional\npublic class BacklogHistoryEntryDAOTest extends AbstractHibernateTests {\n    \n    @Autowired\n    private BacklogHistoryEntryDAO backlogHistoryEntryDAO;\n    \n    @Test\n    public void testRetrieveBurnupData_duplicate() {\n        executeClassSql();\n        int count = 0;\n        for (ProjectBurnupData.Entry entry : backlogHistoryEntryDAO.retrieveBurnupData(1)) {\n            count++;\n            assertEquals(20, entry.estimateSum);\n            assertEquals(6, entry.doneSum);\n        }\n        assertEquals(1, count);\n    }\n\n    @Test\n    public void testRetrieveBurnupData_noHistory() {\n        executeClassSql();\n        for (ProjectBurnupData.Entry entry : backlogHistoryEntryDAO.retrieveBurnupData(4)) {\n            fail(\"Unexpected: \" + entry);\n        }\n    }\n    \n    @Test\n    public void testRetrieveBurnupData() {\n        executeClassSql();\n        int count = 0;        \n        for (ProjectBurnupData.Entry entry : backlogHistoryEntryDAO.retrieveBurnupData(3)) {\n            assertNotNull(entry);\n            count++;\n        }\n        assertEquals(4, count);\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\BacklogHourEntryDAOTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["BacklogHourEntryDAOTest"], "AN": ["testable"], "SCS_VariableDeclarator": ["testable", "project", "returned", "product", "returned"], "MN": ["retrieveByBacklog", "retrieveByBacklog_noEntries"], "PN": [], "SCS_ClassReference": ["", "project", "testable", "", "returned", "", "product", "testable", "", "returned"], "SCS_MethodInvocation": ["executeClassSql", "setId", "retrieveByBacklog", "assertEquals", "size", "executeClassSql", "setId", "retrieveByBacklog", "assertEquals", "size"], "SCS_VariableDeclaration": ["Project", "List", "Product", "List"], "SCS_MemberReference": ["project", "product"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.db;\n\nimport java.util.List;\n\nimport org.junit.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport fi.hut.soberit.agilefant.model.BacklogHourEntry;\nimport fi.hut.soberit.agilefant.model.Product;\nimport fi.hut.soberit.agilefant.model.Project;\nimport fi.hut.soberit.agilefant.test.AbstractHibernateTests;\n\nimport static org.junit.Assert.*;\n\n@ContextConfiguration\n@Transactional\npublic class BacklogHourEntryDAOTest extends AbstractHibernateTests {\n    \n    @Autowired    \n    private BacklogHourEntryDAO testable;\n    \n    @Test\n    public void retrieveByBacklog() {\n        executeClassSql();\n        Project project = new Project();\n        project.setId(3);\n        List<BacklogHourEntry> returned = testable.retrieveByBacklog(project);\n        assertEquals(2, returned.size());\n    }\n    \n    @Test\n    public void retrieveByBacklog_noEntries() {\n        executeClassSql();\n        Product product = new Product();\n        product.setId(1);\n        List<BacklogHourEntry> returned = testable.retrieveByBacklog(product);\n        assertEquals(0, returned.size());\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\GenericDAOTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["GenericDAOTest"], "AN": ["sampleDAO"], "SCS_VariableDeclarator": ["sampleDAO", "entity", "entity", "entities", "foundIds", "entity", "entries", "entries", "e", "entity", "entity", "name"], "MN": ["testCreate", "testGet", "testGetAll", "testGetMultiple", "testGetMultiple_noIds", "containsEntry", "testRemoveById", "testRemoveByObject", "testStore", "testCount", "testExists_yes", "testExists_no"], "PN": ["entities", "id", "name"], "SCS_VariableDeclaration": ["SampleEntity", "SampleEntity", "Collection", "Set", "SampleEntity", "Collection", "Collection", "SampleEntity", "SampleEntity", "SampleEntity", "String"], "SCS_ClassReference": ["sampleDAO", "", "SimpleJdbcTestUtils", "", "sampleDAO", "", "entity", "", "entity", "", "sampleDAO", "", "entities", "foundIds", "entity", "", "foundIds", "", "foundIds", "", "foundIds", "", "foundIds", "", "sampleDAO", "Arrays", "", "", "", "", "", "sampleDAO", "", "", "entries", "e", "e", null, "", "sampleDAO", "", "", "SimpleJdbcTestUtils", "", "sampleDAO", "sampleDAO", "", "", "SimpleJdbcTestUtils", "", "sampleDAO", "entity", "sampleDAO", "", "simpleJdbcTemplate", "String", "", "", "", "sampleDAO", "", "", "sampleDAO", "", "", "sampleDAO"], "SCS_MethodInvocation": ["create", "assertEquals", "countRowsInTable", "executeClassSql", "get", "assertEquals", "getId", "assertEquals", "getName", "executeClassSql", "getAll", "assertEquals", "size", "add", "getId", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "executeClassSql", "getMultiple", "asList", "assertTrue", "containsEntry", "assertTrue", "containsEntry", "executeClassSql", "getMultiple", "assertNotNull", "assertEquals", "size", "getId", "getName", "equals", "executeClassSql", "remove", "forceFlush", "assertEquals", "countRowsInTable", "executeClassSql", "get", "remove", "forceFlush", "assertEquals", "countRowsInTable", "executeClassSql", "get", "setName", "store", "forceFlush", "queryForObject", "assertEquals", "executeClassSql", "assertEquals", "count", "executeClassSql", "assertTrue", "exists", "executeClassSql", "assertFalse", "exists"], "SCS_MemberReference": ["entity", "simpleJdbcTemplate", "entities", "entries", "entries", "entries", "entities", "id", "name", "simpleJdbcTemplate", "entity", "simpleJdbcTemplate", "entity", "name"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.db;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.HashSet;\nimport java.util.Set;\n\nimport org.junit.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.jdbc.SimpleJdbcTestUtils;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport fi.hut.soberit.agilefant.test.AbstractHibernateTests;\nimport fi.hut.soberit.agilefant.test.SampleDAO;\nimport fi.hut.soberit.agilefant.test.SampleEntity;\n\nimport static org.junit.Assert.*;\n\n@ContextConfiguration\n@Transactional\npublic class GenericDAOTest extends AbstractHibernateTests {\n\n    @Autowired\n    private SampleDAO sampleDAO;\n    \n    @Test\n    public void testCreate() {\n        SampleEntity entity = new SampleEntity();\n        sampleDAO.create(entity);\n        assertEquals(1, SimpleJdbcTestUtils.countRowsInTable(simpleJdbcTemplate, \"samples\"));\n    }\n\n    @Test\n    public void testGet() {\n        executeClassSql();\n        SampleEntity entity = sampleDAO.get(1);\n        assertEquals(1, entity.getId());\n        assertEquals(\"Sample 1\", entity.getName());\n    }\n\n    @Test\n    public void testGetAll() {\n        executeClassSql();\n        Collection<SampleEntity> entities = sampleDAO.getAll();\n        assertEquals(4, entities.size());\n        Set<Integer> foundIds = new HashSet<Integer>();\n        for (SampleEntity entity : entities) {\n            foundIds.add(entity.getId());\n        }\n        assertTrue(foundIds.contains(1));\n        assertTrue(foundIds.contains(2));\n        assertTrue(foundIds.contains(3));\n        assertTrue(foundIds.contains(4));\n    }\n    \n    @Test\n    public void testGetMultiple() {\n        executeClassSql();\n        Collection<SampleEntity> entries = sampleDAO.getMultiple(Arrays.asList(1,3));\n        assertTrue(containsEntry(entries, 1, \"Sample 1\"));\n        assertTrue(containsEntry(entries, 3, \"Sample 3\"));\n    }\n    \n    @Test\n    public void testGetMultiple_noIds() {\n        executeClassSql();\n        Collection<SampleEntity> entries = sampleDAO.getMultiple(new ArrayList<Integer>());\n        assertNotNull(entries);\n        assertEquals(0, entries.size());\n    }\n    \n    private boolean containsEntry(Collection<SampleEntity> entities, int id, String name) {\n        for (SampleEntity e : entities) {\n            if (e.getId() == id && e.getName().equals(name)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    \n    @Test\n    public void testRemoveById() {\n        executeClassSql();\n        sampleDAO.remove(1);\n        forceFlush();\n        assertEquals(3, SimpleJdbcTestUtils.countRowsInTable(simpleJdbcTemplate, \"samples\"));\n    }\n    \n    @Test\n    public void testRemoveByObject() {\n        executeClassSql();\n        SampleEntity entity = sampleDAO.get(1);\n        sampleDAO.remove(entity);\n        forceFlush();\n        assertEquals(3, SimpleJdbcTestUtils.countRowsInTable(simpleJdbcTemplate, \"samples\"));\n    }\n    \n    @Test\n    public void testStore() {\n        executeClassSql();\n        SampleEntity entity = sampleDAO.get(1);\n        entity.setName(\"Changed\");\n        sampleDAO.store(entity);\n        forceFlush();\n        String name = simpleJdbcTemplate.queryForObject(\"SELECT name FROM samples WHERE id = ?\", String.class, 1);\n        assertEquals(\"Changed\", name);\n    }\n\n    @Test\n    public void testCount() {\n        executeClassSql();\n        assertEquals(4, sampleDAO.count());\n    }\n    \n    @Test\n    public void testExists_yes() {\n        executeClassSql();\n        assertTrue(sampleDAO.exists(1));\n    }\n\n    @Test\n    public void testExists_no() {\n        executeClassSql();        \n        assertFalse(sampleDAO.exists(999));\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\HolidayDAOTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["HolidayDAOTest"], "MN": ["testRetriveFutureHolidaysByUser"], "PN": [], "CO": ["//dummy"], "CODE": "package fi.hut.soberit.agilefant.db;\n\nimport org.junit.Test;\n\npublic class HolidayDAOTest {\n\n    @Test\n    public void testRetriveFutureHolidaysByUser() {\n        //dummy\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\HourEntryDAOTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["HourEntryDAOTest"], "AN": ["hourEntryDAO"], "SCS_VariableDeclarator": ["hourEntryDAO", "actualResult", "backlogs", "actualResult", "backlogs", "actualResult", "backlogs", "actualResult", "backlogs", "startTime", "endTime", "actualResult", "backlogs", "userIds", "actualResult", "backlogs", "userIds", "actualResult", "actualEntries", "backlogs", "actualEntries", "backlogs", "actualEntries", "backlogs", "actualEntries", "backlogs", "actualEntries", "actualEntries", "backlogs", "actualEntries", "backlogs", "actualEntries", "backlogs", "actualEntries", "backlogs", "actualEntries", "actualSum", "actualSum", "startDate", "endDate"], "MN": ["testCalculateSumByStory", "testCalculateSumByStory_storiesWithHourEntries", "testCalculateSumFromTasksWithoutStory", "testGetBacklogHourEntriesByFilter_noFilter", "testGetBacklogHourEntriesByFilter_emptyProduct", "testGetBacklogHourEntriesByFilter_WithData", "testGetBacklogHourEntriesByFilter_WithDataFilter", "testGetBacklogHourEntriesByFilter_DateFiltert", "testGetBacklogHourEntriesByFilter_UserFilter", "testGetBacklogHourEntriesByFilter_UserFilterNotFound", "testGetStoryHourEntriesByFilter_noFilter", "testGetStoryHourEntriesByFilter_ProductNoEntries", "testGetStoryHourEntriesByFilter_Product", "testGetStoryHourEntriesByFilter_Project", "testGetStoryHourEntriesByFilter_ProductIteration", "testGetTaskHourEntriesByFilter_NoFilter", "testGetTaskHourEntriesByFilter_emptyProduct", "testGetTaskHourEntriesByFilter_Product", "testGetTaskHourEntriesByFilter_Project", "testGetTaskHourEntriesByFilter_Iteration", "testCalculateIterationHourEntries", "testCalculateIterationHourEntries_emptyIteration", "testGetHourEntriesByFilter", "testGetHourEntriesByFilter_noUser", "testGetHourEntriesByFilter_noDates", "testGetBacklogHourEntries", "testGetBacklogHourEntries_withLimit", "testGetStoryHourEntries", "testGetStoryHourEntries_withLimit", "testGetTaskHourEntries", "testGetTaskHourEntries_withLimit"], "PN": [], "SCS_ClassReference": ["", "", "hourEntryDAO", "", "", "hourEntryDAO", "", "", "hourEntryDAO", "", "hourEntryDAO", "", "", "actualResult", "", "Arrays", "hourEntryDAO", "", "", "actualResult", "", "Arrays", "hourEntryDAO", "", "", "actualResult", "", "Arrays", "hourEntryDAO", "", "", "actualResult", "", "Arrays", "hourEntryDAO", "", "", "actualResult", "", "Arrays", "Arrays", "hourEntryDAO", "", "", "actualResult", "", "Arrays", "Arrays", "hourEntryDAO", "", "", "actualResult", "hourEntryDAO", "", "", "actualEntries", "", "Arrays", "hourEntryDAO", "", "", "actualEntries", "", "Arrays", "hourEntryDAO", "", "", "actualEntries", "", "Arrays", "hourEntryDAO", "", "", "actualEntries", "", "Arrays", "hourEntryDAO", "", "", "actualEntries", "hourEntryDAO", "", "", "actualEntries", "", "Arrays", "hourEntryDAO", "", "", "actualEntries", "", "Arrays", "hourEntryDAO", "", "", "actualEntries", "", "Arrays", "hourEntryDAO", "", "", "actualEntries", "", "Arrays", "hourEntryDAO", "", "", "actualEntries", "", "hourEntryDAO", "", "", "hourEntryDAO", "", "", "", "hourEntryDAO", null, "", "", "hourEntryDAO", null, "", "", "hourEntryDAO", null, "", "", "hourEntryDAO", null, "", "", "hourEntryDAO", null, "", "", "hourEntryDAO", null, "", "", "hourEntryDAO", null, "", "", "hourEntryDAO", null, "", "", "hourEntryDAO", null], "SCS_MethodInvocation": ["executeClassSql", "assertEquals", "calculateSumByStory", "executeClassSql", "assertEquals", "calculateSumByStory", "executeClassSql", "assertEquals", "calculateSumFromTasksWithoutStory", "executeClassSql", "getBacklogHourEntriesByFilter", "assertNotNull", "assertEquals", "size", "executeClassSql", "asList", "getBacklogHourEntriesByFilter", "assertNotNull", "assertEquals", "size", "executeClassSql", "asList", "getBacklogHourEntriesByFilter", "assertNotNull", "assertEquals", "size", "executeClassSql", "asList", "getBacklogHourEntriesByFilter", "assertNotNull", "assertEquals", "size", "executeClassSql", "asList", "getBacklogHourEntriesByFilter", "assertNotNull", "assertEquals", "size", "executeClassSql", "asList", "asList", "getBacklogHourEntriesByFilter", "assertNotNull", "assertEquals", "size", "executeClassSql", "asList", "asList", "getBacklogHourEntriesByFilter", "assertNotNull", "assertEquals", "size", "getStoryHourEntriesByFilter", "assertNotNull", "assertEquals", "size", "executeClassSql", "asList", "getStoryHourEntriesByFilter", "assertNotNull", "assertEquals", "size", "executeClassSql", "asList", "getStoryHourEntriesByFilter", "assertNotNull", "assertEquals", "size", "executeClassSql", "asList", "getStoryHourEntriesByFilter", "assertNotNull", "assertEquals", "size", "executeClassSql", "asList", "getStoryHourEntriesByFilter", "assertNotNull", "assertEquals", "size", "getTaskHourEntriesByFilter", "assertNotNull", "assertEquals", "size", "executeClassSql", "asList", "getTaskHourEntriesByFilter", "assertNotNull", "assertEquals", "size", "executeClassSql", "asList", "getTaskHourEntriesByFilter", "assertNotNull", "assertEquals", "size", "executeClassSql", "asList", "getTaskHourEntriesByFilter", "assertNotNull", "assertEquals", "size", "executeClassSql", "asList", "getTaskHourEntriesByFilter", "assertNotNull", "assertEquals", "size", "executeClassSql", "calculateIterationHourEntriesSum", "assertEquals", "executeClassSql", "calculateIterationHourEntriesSum", "assertEquals", "executeClassSql", "assertEquals", "getHourEntriesByFilter", "size", "executeClassSql", "assertEquals", "getHourEntriesByFilter", "size", "executeClassSql", "assertEquals", "getHourEntriesByFilter", "size", "executeClassSql", "assertEquals", "getBacklogHourEntries", "size", "executeClassSql", "assertEquals", "getBacklogHourEntries", "size", "executeClassSql", "assertEquals", "getStoryHourEntries", "size", "executeClassSql", "assertEquals", "getStoryHourEntries", "size", "executeClassSql", "assertEquals", "getTaskHourEntries", "size", "executeClassSql", "assertEquals", "getTaskHourEntries", "size"], "SCS_VariableDeclaration": ["List", "Set", "List", "Set", "List", "Set", "List", "Set", "DateTime", "DateTime", "List", "Set", "Set", "List", "Set", "Set", "List", "List", "Set", "List", "Set", "List", "Set", "List", "Set", "List", "List", "Set", "List", "Set", "List", "Set", "List", "Set", "List", "long", "long", "DateTime", "DateTime"], "SCS_MemberReference": ["actualResult", "backlogs", "actualResult", "backlogs", "actualResult", "backlogs", "actualResult", "backlogs", "startTime", "endTime", "actualResult", "backlogs", "userIds", "actualResult", "backlogs", "userIds", "actualResult", "actualEntries", "backlogs", "actualEntries", "backlogs", "actualEntries", "backlogs", "actualEntries", "backlogs", "actualEntries", "actualEntries", "backlogs", "actualEntries", "backlogs", "actualEntries", "backlogs", "actualEntries", "backlogs", "actualEntries", "actualSum", "actualSum", "startDate", "endDate"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.db;\n\nimport static org.junit.Assert.*;\n\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport org.joda.time.DateTime;\nimport org.junit.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport fi.hut.soberit.agilefant.model.BacklogHourEntry;\nimport fi.hut.soberit.agilefant.model.StoryHourEntry;\nimport fi.hut.soberit.agilefant.model.TaskHourEntry;\nimport fi.hut.soberit.agilefant.test.AbstractHibernateTests;\n\n@ContextConfiguration\n@Transactional\npublic class HourEntryDAOTest extends AbstractHibernateTests {\n    \n    @Autowired\n    private HourEntryDAO hourEntryDAO;\n    \n    @Test\n    public void testCalculateSumByStory() {\n        executeClassSql();\n        assertEquals(80, hourEntryDAO.calculateSumByStory(4));\n    }\n\n    @Test\n    public void testCalculateSumByStory_storiesWithHourEntries() {\n        executeClassSql();\n        assertEquals(170, hourEntryDAO.calculateSumByStory(6));\n    }\n    \n    @Test\n    public void testCalculateSumFromTasksWithoutStory() {\n        executeClassSql();\n        assertEquals(60, hourEntryDAO.calculateSumFromTasksWithoutStory(5));\n    }\n    \n    @Test\n    public void testGetBacklogHourEntriesByFilter_noFilter() {\n        executeClassSql();\n        List<BacklogHourEntry> actualResult = hourEntryDAO.getBacklogHourEntriesByFilter(null, null, null, null);\n        assertNotNull(actualResult);\n        assertEquals(0, actualResult.size());\n    \n    }\n    \n    @Test\n    public void testGetBacklogHourEntriesByFilter_emptyProduct() {\n        executeClassSql();\n        Set<Integer>  backlogs = new HashSet<Integer>(Arrays.asList(2));\n        List<BacklogHourEntry> actualResult = hourEntryDAO.getBacklogHourEntriesByFilter(backlogs, null, null, null);\n        assertNotNull(actualResult);\n        assertEquals(0, actualResult.size());\n    }\n    @Test\n    public void testGetBacklogHourEntriesByFilter_WithData() {\n        executeClassSql();\n        Set<Integer>  backlogs = new HashSet<Integer>(Arrays.asList(1));\n        List<BacklogHourEntry> actualResult = hourEntryDAO.getBacklogHourEntriesByFilter(backlogs, null, null, null);\n        assertNotNull(actualResult);\n        assertEquals(6, actualResult.size());\n    }\n    @Test\n    public void testGetBacklogHourEntriesByFilter_WithDataFilter() {\n        executeClassSql();\n        Set<Integer>  backlogs = new HashSet<Integer>(Arrays.asList(3));\n        List<BacklogHourEntry> actualResult = hourEntryDAO.getBacklogHourEntriesByFilter(backlogs, null, null, null);\n        assertNotNull(actualResult);\n        assertEquals(4, actualResult.size());\n    }\n\n    @Test\n    public void testGetBacklogHourEntriesByFilter_DateFiltert() {\n        executeClassSql();\n        Set<Integer>  backlogs = new HashSet<Integer>(Arrays.asList(5));\n        DateTime startTime = new DateTime(2009, 5, 14, 9, 0, 0, 0);\n        DateTime endTime = new DateTime(2009, 5, 14, 16, 0, 0, 0);\n        List<BacklogHourEntry> actualResult = hourEntryDAO.getBacklogHourEntriesByFilter(backlogs, startTime, endTime, null);\n        assertNotNull(actualResult);\n        assertEquals(1, actualResult.size());\n    }\n    \n    @Test\n    public void testGetBacklogHourEntriesByFilter_UserFilter() {\n        executeClassSql();\n        Set<Integer>  backlogs = new HashSet<Integer>(Arrays.asList(5));\n        Set<Integer> userIds = new HashSet<Integer>(Arrays.asList(1));\n        List<BacklogHourEntry> actualResult = hourEntryDAO.getBacklogHourEntriesByFilter(backlogs, null, null, userIds);\n        assertNotNull(actualResult);\n        assertEquals(2, actualResult.size());\n    }\n    \n    @Test\n    public void testGetBacklogHourEntriesByFilter_UserFilterNotFound() {\n        executeClassSql();\n        Set<Integer>  backlogs = new HashSet<Integer>(Arrays.asList(5));\n        Set<Integer> userIds = new HashSet<Integer>(Arrays.asList(2));\n        List<BacklogHourEntry> actualResult = hourEntryDAO.getBacklogHourEntriesByFilter(backlogs, null, null, userIds);\n        assertNotNull(actualResult);\n        assertEquals(0, actualResult.size());\n    }\n    \n    @Test\n    public void testGetStoryHourEntriesByFilter_noFilter() {\n        List<StoryHourEntry> actualEntries = hourEntryDAO.getStoryHourEntriesByFilter(null, null, null, null);\n        assertNotNull(actualEntries);\n        assertEquals(0, actualEntries.size());\n    }\n    \n    @Test\n    public void testGetStoryHourEntriesByFilter_ProductNoEntries() {\n        executeClassSql();\n        Set<Integer>  backlogs = new HashSet<Integer>(Arrays.asList(2));\n        List<StoryHourEntry> actualEntries = hourEntryDAO.getStoryHourEntriesByFilter(backlogs, null, null, null);\n        assertNotNull(actualEntries);\n        assertEquals(0, actualEntries.size());\n    }\n    \n    @Test\n    public void testGetStoryHourEntriesByFilter_Product() {\n        executeClassSql();\n        Set<Integer>  backlogs = new HashSet<Integer>(Arrays.asList(1));\n        List<StoryHourEntry> actualEntries = hourEntryDAO.getStoryHourEntriesByFilter(backlogs, null, null, null);\n        assertNotNull(actualEntries);\n        assertEquals(5, actualEntries.size());\n    }\n    \n    @Test\n    public void testGetStoryHourEntriesByFilter_Project() {\n        executeClassSql();\n        Set<Integer>  backlogs = new HashSet<Integer>(Arrays.asList(3));\n        List<StoryHourEntry> actualEntries = hourEntryDAO.getStoryHourEntriesByFilter(backlogs, null, null, null);\n        assertNotNull(actualEntries);\n        assertEquals(5, actualEntries.size());\n    }\n    \n    @Test\n    public void testGetStoryHourEntriesByFilter_ProductIteration() {\n        executeClassSql();\n        Set<Integer>  backlogs = new HashSet<Integer>(Arrays.asList(5));\n        List<StoryHourEntry> actualEntries = hourEntryDAO.getStoryHourEntriesByFilter(backlogs, null, null, null);\n        assertNotNull(actualEntries);\n        assertEquals(2, actualEntries.size());\n    }\n    \n    @Test\n    public void testGetTaskHourEntriesByFilter_NoFilter() {\n        List<TaskHourEntry> actualEntries = hourEntryDAO.getTaskHourEntriesByFilter(null, null, null, null);\n        assertNotNull(actualEntries);\n        assertEquals(0, actualEntries.size());\n    }\n\n    @Test\n    public void testGetTaskHourEntriesByFilter_emptyProduct() {\n        executeClassSql();\n        Set<Integer>  backlogs = new HashSet<Integer>(Arrays.asList(2));\n        List<TaskHourEntry> actualEntries = hourEntryDAO.getTaskHourEntriesByFilter(backlogs, null, null, null);\n        assertNotNull(actualEntries);\n        assertEquals(0, actualEntries.size());\n    }\n    \n    @Test\n    public void testGetTaskHourEntriesByFilter_Product() {\n        executeClassSql();\n        Set<Integer>  backlogs = new HashSet<Integer>(Arrays.asList(1));\n        List<TaskHourEntry> actualEntries = hourEntryDAO.getTaskHourEntriesByFilter(backlogs, null, null, null);\n        assertNotNull(actualEntries);\n        assertEquals(10, actualEntries.size());\n    }\n    \n    @Test\n    public void testGetTaskHourEntriesByFilter_Project() {\n        executeClassSql();\n        Set<Integer>  backlogs = new HashSet<Integer>(Arrays.asList(3));\n        List<TaskHourEntry> actualEntries = hourEntryDAO.getTaskHourEntriesByFilter(backlogs, null, null, null);\n        assertNotNull(actualEntries);\n        assertEquals(8, actualEntries.size());\n    }\n    \n    @Test\n    public void testGetTaskHourEntriesByFilter_Iteration() {\n        executeClassSql();\n        Set<Integer>  backlogs = new HashSet<Integer>(Arrays.asList(5));\n        List<TaskHourEntry> actualEntries = hourEntryDAO.getTaskHourEntriesByFilter(backlogs, null, null, null);\n        assertNotNull(actualEntries);\n        assertEquals(6, actualEntries.size());\n    }\n    \n    @Test\n    public void testCalculateIterationHourEntries() {\n        executeClassSql();\n        long actualSum = hourEntryDAO.calculateIterationHourEntriesSum(5);\n        assertEquals(4240, actualSum);\n    }\n    \n    @Test\n    public void testCalculateIterationHourEntries_emptyIteration() {\n        executeClassSql();\n        long actualSum = hourEntryDAO.calculateIterationHourEntriesSum(6);\n        assertEquals(0, actualSum);\n    }\n    \n    @Test\n    public void testGetHourEntriesByFilter() {\n        executeClassSql();\n        DateTime startDate = new DateTime(2009, 5, 12, 10, 20, 0, 0);\n        DateTime endDate = new DateTime(2009, 5, 14, 10, 20, 0, 0);\n        assertEquals(3, hourEntryDAO.getHourEntriesByFilter(startDate, endDate, 1).size());\n    }\n    \n    @Test\n    public void testGetHourEntriesByFilter_noUser() {\n        executeClassSql();\n        assertEquals(21, hourEntryDAO.getHourEntriesByFilter(null, null, 0).size());\n    }\n    \n    @Test\n    public void testGetHourEntriesByFilter_noDates() {\n        executeClassSql();\n        assertEquals(21, hourEntryDAO.getHourEntriesByFilter(null, null, 1).size());\n    }\n    \n    @Test\n    public void testGetBacklogHourEntries() {\n        executeClassSql();\n        assertEquals(2, hourEntryDAO.getBacklogHourEntries(5, 0).size());\n    }\n    \n    @Test\n    public void testGetBacklogHourEntries_withLimit() {\n        executeClassSql();\n        assertEquals(1, hourEntryDAO.getBacklogHourEntries(5, 1).size());\n    }\n\n    @Test\n    public void testGetStoryHourEntries() {\n        executeClassSql();\n        assertEquals(3, hourEntryDAO.getStoryHourEntries(6, 0).size());\n    }\n    \n    @Test\n    public void testGetStoryHourEntries_withLimit() {\n        executeClassSql();\n        assertEquals(1, hourEntryDAO.getStoryHourEntries(6, 1).size());\n    }\n\n    @Test\n    public void testGetTaskHourEntries() {\n        executeClassSql();\n        assertEquals(2, hourEntryDAO.getTaskHourEntries(4, 0).size());\n    }\n    \n    @Test\n    public void testGetTaskHourEntries_withLimit() {\n        executeClassSql();\n        assertEquals(1, hourEntryDAO.getTaskHourEntries(4, 1).size());\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\IterationDAOTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["IterationDAOTest"], "AN": ["iterationDAO"], "SCS_VariableDeclarator": ["iterationDAO", "iteration", "iteration", "startDate", "endDate", "user", "actual", "startDate", "actual", "actual", "iter", "tasks", "actual", "iterations", "data", "result"], "MN": ["testGetCountOfDoneAndAllTasks", "testGetCountOfDoneAndAllStories", "testRetrieveEmptyIterationsWithPlannedSize", "testRetrieveCurrentAndFutureIterationsAt", "testRetrieveDeep_emptyIteration", "testgetAllTasksForIteration", "testRetrieveDeep", "testRetrieveActiveWithUserAssigned", "testCountIterationStoriesByState", "testGetTotalAvailability"], "PN": [], "SCS_ClassReference": ["", "iterationDAO", "", "Pair", "iterationDAO", "", "iterationDAO", "", "Pair", "iterationDAO", "", "user", "iterationDAO", "", "actual", "", "actual", null, "", "iterationDAO", "", "actual", null, "", "actual", "", "iterationDAO", "", "", "iter", "iterationDAO", "", "tasks", "", "iterationDAO", "", "", "iterationDAO", "", "iterations", "", "iterationDAO", "", "data", "", "data", "", "data", "", "data", "", "data", "", "data", "", "iterationDAO", "Arrays", "", "result", "", "result", "", "result"], "SCS_MethodInvocation": ["executeClassSql", "get", "assertEquals", "create", "getCountOfDoneAndAllTasks", "executeClassSql", "get", "assertEquals", "create", "getCountOfDoneAndAllStories", "executeClassSql", "setId", "retrieveEmptyIterationsWithPlannedSize", "assertEquals", "size", "assertEquals", "get", "getId", "executeClassSql", "retrieveCurrentAndFutureIterationsAt", "assertEquals", "get", "getId", "assertEquals", "size", "executeClassSql", "retrieveDeep", "assertNotNull", "executeClassSql", "setId", "getAllTasksForIteration", "assertEquals", "size", "executeClassSql", "retrieveDeep", "assertNotNull", "executeSql", "retrieveActiveWithUserAssigned", "assertEquals", "size", "executeClassSql", "countIterationStoriesByState", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "executeClassSql", "getTotalAvailability", "asList", "assertEquals", "size", "assertEquals", "get", "assertEquals", "get"], "SCS_VariableDeclaration": ["Iteration", "Iteration", "DateTime", "DateTime", "User", "List", "DateTime", "List", "Iteration", "Iteration", "List", "Iteration", "List", "Map", "Map"], "SCS_MemberReference": ["iteration", "iteration", "startDate", "endDate", "user", "startDate", "actual", "iter", "actual", "NOT_STARTED", "STARTED", "PENDING", "BLOCKED", "IMPLEMENTED", "DONE"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.db;\n\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.joda.time.DateTime;\nimport org.junit.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.StoryState;\nimport fi.hut.soberit.agilefant.model.Task;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.test.AbstractHibernateTests;\nimport fi.hut.soberit.agilefant.util.Pair;\n\nimport static org.junit.Assert.*;\n\n@ContextConfiguration\n@Transactional\npublic class IterationDAOTest extends  AbstractHibernateTests {\n    @Autowired\n    private IterationDAO iterationDAO;\n\n    @Test\n    public void testGetCountOfDoneAndAllTasks() {\n        executeClassSql();\n        Iteration iteration = iterationDAO.get(1);\n        assertEquals(Pair.create(2, 4), iterationDAO\n                .getCountOfDoneAndAllTasks(iteration));\n    }\n\n    @Test\n    public void testGetCountOfDoneAndAllStories() {\n        executeClassSql();\n        Iteration iteration = iterationDAO.get(1);\n        assertEquals(Pair.create(1, 2), iterationDAO\n                .getCountOfDoneAndAllStories(iteration));\n    }\n\n    @Test\n    public void testRetrieveEmptyIterationsWithPlannedSize() {\n        executeClassSql();\n        DateTime startDate = new DateTime(2009, 6, 4, 0, 0, 0, 0);\n        DateTime endDate = new DateTime(2009, 6, 15, 0, 0, 0, 0);\n        User user = new User();\n        user.setId(1);\n        List<Iteration> actual = iterationDAO\n                .retrieveEmptyIterationsWithPlannedSize(startDate,\n                        endDate, user);\n        assertEquals(1, actual.size());\n        assertEquals(4, actual.get(0).getId());\n    }\n\n    @Test\n    public void testRetrieveCurrentAndFutureIterationsAt() {\n        executeClassSql();\n        DateTime startDate = new DateTime(2009, 8, 1, 0, 0, 0, 0);\n        List<Iteration> actual = iterationDAO\n                .retrieveCurrentAndFutureIterationsAt(startDate);\n\n        assertEquals(3, actual.get(0).getId());\n        assertEquals(1, actual.size());\n    }\n    \n    @Test\n    public void testRetrieveDeep_emptyIteration() {\n        executeClassSql();\n        Iteration actual = iterationDAO.retrieveDeep(3);\n        assertNotNull(actual);\n    }\n    \n    @Test\n    public void testgetAllTasksForIteration() {\n        executeClassSql();\n        Iteration iter = new Iteration();\n        iter.setId(3);\n        List<Task> tasks = iterationDAO.getAllTasksForIteration(iter);\n        assertEquals(2, tasks.size());\n    }\n    \n    @Test\n    public void testRetrieveDeep() {\n        executeClassSql();\n        Iteration actual = iterationDAO.retrieveDeep(1);\n        assertNotNull(actual);    \n        \n    }\n\n    @Test\n    public void testRetrieveActiveWithUserAssigned() {\n        executeSql(\"classpath:fi/hut/soberit/agilefant/db/IterationDAOTest-assignments-data.sql\");\n        List<Iteration> iterations = iterationDAO.retrieveActiveWithUserAssigned(1);\n        assertEquals(2, iterations.size());\n    }\n    \n    @Test\n    public void testCountIterationStoriesByState() {\n        executeClassSql();\n        Map<StoryState, Integer> data = iterationDAO.countIterationStoriesByState(3);\n        assertEquals(new Integer(0), data.get(StoryState.NOT_STARTED));\n        assertEquals(new Integer(1), data.get(StoryState.STARTED));\n        assertEquals(new Integer(2), data.get(StoryState.PENDING));\n        assertEquals(new Integer(3), data.get(StoryState.BLOCKED));\n        assertEquals(new Integer(4), data.get(StoryState.IMPLEMENTED));\n        assertEquals(new Integer(5), data.get(StoryState.DONE));\n    }\n\n    @Test\n    public void testGetTotalAvailability() {\n        executeClassSql();\n        Map<Integer, Integer> result = iterationDAO.getTotalAvailability(new HashSet<Integer>(Arrays.asList(1, 2)));\n        assertEquals(2, result.size());\n        assertEquals(new Integer(100), (Integer)result.get(1));\n        assertEquals(new Integer(100), (Integer)result.get(2));\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\IterationHistoryEntryDAOTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["IterationHistoryEntryDAOTest"], "AN": ["iterationHistoryEntryDAO"], "SCS_VariableDeclarator": ["iterationHistoryEntryDAO", "entry", "entry", "sums", "sums", "actualEntries"], "MN": ["testRetrieveLatest", "testRetrieveLatest_noHistory", "testCalculateCurrentHistoryData", "testCalculateCurrentHistoryData_noTasks", "testGetHistoryEntriesForIteration"], "PN": [], "SCS_ClassReference": ["", "iterationHistoryEntryDAO", "", "entry", "", "iterationHistoryEntryDAO", "", "", "iterationHistoryEntryDAO", "", "sums.first", null, "", "sums.second", null, "", "iterationHistoryEntryDAO", "", "sums", null, null, "", "sums", null, null, "", "iterationHistoryEntryDAO", "", "", "actualEntries", null, "", "actualEntries", null, "", "actualEntries"], "SCS_MethodInvocation": ["executeClassSql", "retrieveLatest", "assertEquals", "getId", "executeClassSql", "retrieveLatest", "assertNull", "executeClassSql", "calculateCurrentHistoryData", "assertEquals", "getMinorUnits", "longValue", "assertEquals", "getMinorUnits", "longValue", "executeClassSql", "calculateCurrentHistoryData", "assertEquals", "getFirst", "getMinorUnits", "longValue", "assertEquals", "getSecond", "getMinorUnits", "longValue", "executeClassSql", "getHistoryEntriesForIteration", "assertNotNull", "assertEquals", "get", "getEffortLeftSum", "assertEquals", "get", "getOriginalEstimateSum", "assertEquals", "size"], "SCS_VariableDeclaration": ["IterationHistoryEntry", "IterationHistoryEntry", "Pair", "Pair", "List"], "SCS_MemberReference": ["entry", "actualEntries"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.db;\n\nimport static org.junit.Assert.*;\n\nimport java.util.List;\n\nimport org.junit.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport fi.hut.soberit.agilefant.model.ExactEstimate;\nimport fi.hut.soberit.agilefant.model.IterationHistoryEntry;\nimport fi.hut.soberit.agilefant.test.AbstractHibernateTests;\nimport fi.hut.soberit.agilefant.util.Pair;\n@ContextConfiguration\n@Transactional\npublic class IterationHistoryEntryDAOTest extends AbstractHibernateTests {\n    \n    @Autowired\n    private IterationHistoryEntryDAO iterationHistoryEntryDAO;\n\n    @Test\n    public void testRetrieveLatest() {\n        executeClassSql();\n        IterationHistoryEntry entry = iterationHistoryEntryDAO.retrieveLatest(1);\n        assertEquals(4, entry.getId());\n    }\n\n    @Test\n    public void testRetrieveLatest_noHistory() {\n        executeClassSql();\n        IterationHistoryEntry entry = iterationHistoryEntryDAO.retrieveLatest(2);\n        assertNull(entry);\n    }\n    \n    @Test\n    public void testCalculateCurrentHistoryData() {\n        executeClassSql();\n        Pair<ExactEstimate, ExactEstimate> sums = iterationHistoryEntryDAO.\n                calculateCurrentHistoryData(1);\n        assertEquals(140L, sums.first.getMinorUnits().longValue());\n        assertEquals(240L, sums.second.getMinorUnits().longValue());\n    }\n\n    @Test\n    public void testCalculateCurrentHistoryData_noTasks() {\n        executeClassSql();\n        Pair<ExactEstimate, ExactEstimate> sums = iterationHistoryEntryDAO.calculateCurrentHistoryData(2);\n        assertEquals(0L, sums.getFirst().getMinorUnits().longValue());\n        assertEquals(0L, sums.getSecond().getMinorUnits().longValue());\n    }\n\n    @Test\n    public void testGetHistoryEntriesForIteration() {\n        executeClassSql();\n        List<IterationHistoryEntry> actualEntries\n            = iterationHistoryEntryDAO.getHistoryEntriesForIteration(1);\n        assertNotNull(actualEntries);\n        assertEquals(60, actualEntries.get(0).getEffortLeftSum());\n        assertEquals(60, actualEntries.get(0).getOriginalEstimateSum());\n        assertEquals(4, actualEntries.size());\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\LabelDAOTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["LabelDAOTest"], "AN": ["labelDAO"], "SCS_VariableDeclarator": ["labelDAO", "story", "story", "list", "list", "list", "label"], "MN": ["duplicateLabelExists", "noDuplicateLabelExists", "testSearchLabel", "testSearchLabel_NotFound", "testSearchLabel_MultipleFound"], "PN": [], "SCS_ClassReference": ["", "story", "", null, "", "story", "", null, "", null, "", "list", "", "list", null, "", "list", null, "", null, "", "list", "", null, "", "list", "", "label", null, "label", null], "SCS_MethodInvocation": ["executeClassSql", "setId", "assertEquals", "labelExists", "executeClassSql", "setId", "assertEquals", "labelExists", "executeClassSql", "lookupLabelsLike", "assertEquals", "size", "assertEquals", "get", "getName", "assertEquals", "get", "getId", "executeClassSql", "lookupLabelsLike", "assertTrue", "isEmpty", "executeClassSql", "lookupLabelsLike", "assertEquals", "size", "assertTrue", "getName", "equals", "getName", "equals"], "SCS_VariableDeclaration": ["Story", "Story", "List", "List", "List", "Label"], "SCS_MemberReference": ["labelDAO", "story", "labelDAO", "story", "labelDAO", "labelDAO", "labelDAO", "list"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.db;\n\nimport java.util.List;\n\nimport org.junit.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.transaction.annotation.Transactional;\nimport static org.junit.Assert.*;\n\nimport fi.hut.soberit.agilefant.model.Label;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.test.AbstractHibernateTests;\n\n@ContextConfiguration\n@Transactional\npublic class LabelDAOTest extends AbstractHibernateTests {\n\n    @Autowired\n    private LabelDAO labelDAO;\n    \n    @Test\n    public void duplicateLabelExists(){\n        executeClassSql();\n        Story story = new Story();\n        story.setId(1);\n        assertEquals(true, this.labelDAO.labelExists(\"Kissa\", story));\n    }\n    \n    @Test\n    public void noDuplicateLabelExists(){\n        executeClassSql();\n        Story story = new Story();\n        story.setId(1);\n        assertEquals(false, this.labelDAO.labelExists(\"Katti\", story));\n    }\n    \n    @Test\n    public void testSearchLabel(){\n        executeClassSql();\n        List<Label> list = this.labelDAO.lookupLabelsLike(\"Kis\");\n        assertEquals(1, list.size());\n        assertEquals(\"kissa\", list.get(0).getName());\n        assertEquals(1, list.get(0).getId());\n    }\n    \n    @Test\n    public void testSearchLabel_NotFound() {\n        executeClassSql();\n        List<Label> list = this.labelDAO.lookupLabelsLike(\"Watti\");\n        assertTrue(list.isEmpty());\n    }\n    \n    @Test\n    public void testSearchLabel_MultipleFound() {\n        executeClassSql();\n        List<Label> list = this.labelDAO.lookupLabelsLike(\"Ma\");\n        assertEquals(2, list.size());\n        for(Label label : list ) {\n            assertTrue(label.getName().equals(\"matti\") || label.getName().equals(\"mauno\")); \n        }\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\ProductDAOTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["ProductDAOTest"], "AN": ["productDAO"], "SCS_VariableDeclarator": ["productDAO", "actual", "product", "actual", "storyIds", "story", "product", "actual", "product", "actual"], "MN": ["testRetrieveBacklogTree", "testRetrieveLeafStories", "testRetrieveScheduleStartAndEnd", "testRetrieveScheduleStartAndEnd_empty"], "PN": [], "SCS_ClassReference": ["", null, "", "actual", "", "product", null, "storyIds", "story", "", "storyIds", "", "storyIds", "", "storyIds", "", "storyIds", "", "storyIds", "", "storyIds", "", "actual", "", "product", null, "", "", "", "product", null, "", ""], "SCS_MethodInvocation": ["executeClassSql", "retrieveBacklogTree", "assertEquals", "size", "executeClassSql", "setId", "retrieveLeafStories", "add", "getId", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertEquals", "size", "executeClassSql", "setId", "retrieveScheduleStartAndEnd", "assertEquals", "assertEquals", "executeClassSql", "setId", "retrieveScheduleStartAndEnd", "assertNull", "assertNull"], "SCS_VariableDeclaration": ["List", "Product", "List", "List", "Story", "Product", "Pair", "Product", "Pair"], "SCS_MemberReference": ["productDAO", "productDAO", "product", "actual", "productDAO", "product", "first", "second", "productDAO", "product", "first", "second"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.db;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.joda.time.DateTime;\nimport org.junit.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.transaction.annotation.Transactional;\nimport static org.junit.Assert.*;\nimport fi.hut.soberit.agilefant.model.Product;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.test.AbstractHibernateTests;\nimport fi.hut.soberit.agilefant.util.Pair;\n\n@ContextConfiguration\n@Transactional\npublic class ProductDAOTest extends AbstractHibernateTests {\n\n    @Autowired\n    private ProductDAO productDAO;\n    \n    @Test\n    public void testRetrieveBacklogTree() {\n        executeClassSql();\n        List<Product> actual = this.productDAO.retrieveBacklogTree();\n        assertEquals(2, actual.size());    \n    }\n    \n    @Test\n    public void testRetrieveLeafStories() {\n        executeClassSql();\n        Product product = new Product();\n        product.setId(1);\n        List<Story> actual = this.productDAO.retrieveLeafStories(product);\n        List<Integer> storyIds = new ArrayList<Integer>();\n        for(Story story : actual) {\n            storyIds.add(story.getId());\n        }\n        assertTrue(storyIds.contains(2));\n        assertTrue(storyIds.contains(4));\n        assertTrue(storyIds.contains(5));\n        assertTrue(storyIds.contains(6));\n        assertTrue(storyIds.contains(7));\n        assertTrue(storyIds.contains(8));\n        assertEquals(6, actual.size());\n    }\n    \n    @Test\n    public void testRetrieveScheduleStartAndEnd() {\n        executeClassSql();\n        Product product = new Product();\n        product.setId(1);\n        Pair<DateTime, DateTime> actual = this.productDAO.retrieveScheduleStartAndEnd(product);\n        assertEquals(new DateTime(2010,1,1,0,0,0,0), actual.first);\n        assertEquals(new DateTime(2010,12,1,0,0,0,0), actual.second);\n    }\n    \n    @Test\n    public void testRetrieveScheduleStartAndEnd_empty() {\n        executeClassSql();\n        Product product = new Product();\n        product.setId(2);\n        Pair<DateTime, DateTime> actual = this.productDAO.retrieveScheduleStartAndEnd(product);\n        assertNull(actual.first);\n        assertNull(actual.second);\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\ProjectDAOTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["ProjectDAOTest"], "AN": ["projectDAO"], "SCS_VariableDeclarator": ["projectDAO", "proj", "proj", "user", "user", "proj", "startDate", "endDate", "projects", "project", "startDate", "endDate", "projects", "project", "project", "projects", "lowest", "highest", "project", "projects", "actual"], "MN": ["testGetAssignedUsers_noAssignees", "testGetAssignedUsers_hasAssignees", "testGetProjectsWithUserAssigned_noAssignments", "testGetProjectsWithUserAssigned_hasAssignments", "testGetProject", "testGetUnrankedProjects", "testGetRankedProjects", "testGetMaxRankedProject", "testIncreaseRankedProjectsRank", "testRetrieveActiveWithUserAssigned", "testCalculateStoryMetrics"], "PN": [], "SCS_ClassReference": ["", "proj", "", "projectDAO", null, "", "proj", "", "projectDAO", null, "", "user", "", "projectDAO", null, "", "user", "", "projectDAO", null, "", "projectDAO", "", "", "proj", null, "", "projectDAO", "", "", "projects", "", "project", "", "project", null, "startDate", "", "project", null, "endDate", "", "projectDAO", "", "", "projects", "", "project", "", "project", null, "startDate", "", "project", null, "endDate", "", "projectDAO", "", "", "project", null, "", "projectDAO", "projectDAO", "project", "project", "project", "project", "", "", "", "projectDAO", "", "projects", "", "projectDAO", "", "actual", "", "actual", "", "actual", "", "actual"], "SCS_MethodInvocation": ["executeClassSql", "setId", "assertEquals", "getAssignedUsers", "size", "executeClassSql", "setId", "assertEquals", "getAssignedUsers", "size", "executeClassSql", "setId", "assertEquals", "getProjectsWithUserAssigned", "size", "executeClassSql", "setId", "assertEquals", "getProjectsWithUserAssigned", "size", "executeClassSql", "get", "assertNotNull", "assertEquals", "getAssignments", "size", "executeSql", "getUnrankedProjects", "assertNotNull", "assertEquals", "size", "assertTrue", "getRank", "assertFalse", "getEndDate", "isBefore", "toDateTimeAtStartOfDay", "assertFalse", "getStartDate", "isAfter", "toDateTimeAtStartOfDay", "executeSql", "getRankedProjects", "assertNotNull", "assertEquals", "size", "assertTrue", "getRank", "assertFalse", "getEndDate", "isBefore", "toDateTimeAtStartOfDay", "assertFalse", "getStartDate", "isAfter", "toDateTimeAtStartOfDay", "executeSql", "getMaxRankedProject", "assertNotNull", "assertEquals", "getRank", "intValue", "executeClassSql", "increaseRankedProjectRanks", "getAll", "getRank", "getRank", "getRank", "getRank", "assertEquals", "assertEquals", "executeSql", "retrieveActiveWithUserAssigned", "assertEquals", "size", "executeClassSql", "calculateProjectStoryMetrics", "assertEquals", "getCompletedStoryPoints", "assertEquals", "getStoryPoints", "assertEquals", "getNumberOfDoneStories", "assertEquals", "getNumberOfStories"], "SCS_VariableDeclaration": ["Project", "Project", "User", "User", "Project", "LocalDate", "LocalDate", "Collection", "Project", "LocalDate", "LocalDate", "List", "Project", "Project", "Collection", "int", "int", "Project", "List", "ProjectMetrics"], "SCS_MemberReference": ["proj", "proj", "user", "user", "proj", "startDate", "endDate", "projects", "projects", "startDate", "endDate", "projects", "projects", "project", "MAX_VALUE", "MIN_VALUE", "projects", "lowest", "lowest", "highest", "highest", "lowest", "highest"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.db;\n\nimport static org.junit.Assert.*;\n\nimport java.util.Collection;\nimport java.util.List;\n\nimport org.joda.time.LocalDate;\nimport org.junit.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport fi.hut.soberit.agilefant.model.Project;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.test.AbstractHibernateTests;\nimport fi.hut.soberit.agilefant.transfer.ProjectMetrics;\n\n@ContextConfiguration\n@Transactional\npublic class ProjectDAOTest extends AbstractHibernateTests {\n\n    @Autowired\n    private ProjectDAO projectDAO;\n    \n    @Test\n    public void testGetAssignedUsers_noAssignees() {\n        executeClassSql();\n        Project proj = new Project();\n        proj.setId(3);\n        assertEquals(0, projectDAO.getAssignedUsers(proj).size());\n    }\n    \n    @Test\n    public void testGetAssignedUsers_hasAssignees() {\n        executeClassSql();\n        Project proj = new Project();\n        proj.setId(1);\n        assertEquals(2, projectDAO.getAssignedUsers(proj).size());\n    }\n    \n    @Test \n    public void testGetProjectsWithUserAssigned_noAssignments() {\n        executeClassSql();\n        User user = new User();\n        user.setId(2);\n        assertEquals(0, projectDAO.getProjectsWithUserAssigned(user).size());\n    }\n    \n    @Test \n    public void testGetProjectsWithUserAssigned_hasAssignments() {\n        executeClassSql();\n        User user = new User();\n        user.setId(1);\n        assertEquals(2, projectDAO.getProjectsWithUserAssigned(user).size());\n    }\n    \n    @Test \n    public void testGetProject() {\n        executeClassSql();\n        Project proj = projectDAO.get(1);\n        assertNotNull(proj);\n        assertEquals(2, proj.getAssignments().size());\n    }\n    \n    @Test\n    public void testGetUnrankedProjects() {\n        executeSql(\"classpath:fi/hut/soberit/agilefant/db/ProjectDAOTest-portfolio-data.sql\");\n        LocalDate startDate = new LocalDate(2009, 10, 1);\n        LocalDate endDate = new LocalDate(2009, 12, 30);\n        Collection<Project> projects = projectDAO.getUnrankedProjects(startDate, endDate);\n        assertNotNull(projects);\n        assertEquals(1, projects.size());\n        \n        for (Project project : projects) {\n          assertTrue(project.getRank() < 1);\n          assertFalse(project.getEndDate().isBefore(startDate.toDateTimeAtStartOfDay()));\n          assertFalse(project.getStartDate().isAfter(endDate.toDateTimeAtStartOfDay()));\n        }\n        \n        \n    }\n    \n    @Test\n    public void testGetRankedProjects() {\n        executeSql(\"classpath:fi/hut/soberit/agilefant/db/ProjectDAOTest-portfolio-data.sql\");\n        LocalDate startDate = new LocalDate(2009, 10, 1);\n        LocalDate endDate = new LocalDate(2009, 12, 30);\n        List<Project> projects = projectDAO.getRankedProjects(startDate, endDate);\n        assertNotNull(projects);\n        assertEquals(4, projects.size());\n        \n        for (Project project : projects) {\n          assertTrue(project.getRank() > 0);\n          assertFalse(project.getEndDate().isBefore(startDate.toDateTimeAtStartOfDay()));\n          assertFalse(project.getStartDate().isAfter(endDate.toDateTimeAtStartOfDay()));\n        }      \n        \n    }\n    \n    @Test\n    public void testGetMaxRankedProject() {\n        executeSql(\"classpath:fi/hut/soberit/agilefant/db/ProjectDAOTest-portfolio-data.sql\");\n        Project project = projectDAO.getMaxRankedProject();\n        assertNotNull(project);\n        assertEquals(6, project.getRank().intValue());       \n    }\n    \n    @Test\n    public void testIncreaseRankedProjectsRank() {\n        executeClassSql();\n        projectDAO.increaseRankedProjectRanks();\n        Collection<Project> projects = projectDAO.getAll();\n        int lowest = Integer.MAX_VALUE;\n        int highest = Integer.MIN_VALUE;\n        for (Project project : projects) {\n            if (project.getRank() < lowest) {\n                lowest = project.getRank();\n            }\n            if (project.getRank() > highest) {\n                highest = project.getRank();\n            }\n        }\n        assertEquals(2, lowest);\n        assertEquals(4, highest);\n    }\n    \n    @Test\n    public void testRetrieveActiveWithUserAssigned() {\n        executeSql(\"classpath:fi/hut/soberit/agilefant/db/ProjectDAOTest-assignments-data.sql\");\n        List<Project> projects = projectDAO.retrieveActiveWithUserAssigned(1);\n        assertEquals(2, projects.size());\n    }\n    \n    @Test\n    public void testCalculateStoryMetrics() {\n        executeClassSql();\n        ProjectMetrics actual = projectDAO.calculateProjectStoryMetrics(3);\n        assertEquals(10110, actual.getCompletedStoryPoints());\n        assertEquals(11110, actual.getStoryPoints());\n        assertEquals(3, actual.getNumberOfDoneStories());\n        assertEquals(4, actual.getNumberOfStories());\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\SettingDAOTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["SettingDAOTest"], "AN": ["testable"], "SCS_VariableDeclarator": ["testable", "actual"], "MN": ["getByName", "getByName_noSuchSetting"], "PN": [], "SCS_ClassReference": ["", "testable", "", "actual", "", "", "testable"], "SCS_MethodInvocation": ["executeClassSql", "getByName", "assertEquals", "getValue", "executeClassSql", "assertNull", "getByName"], "SCS_VariableDeclaration": ["Setting"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.db;\n\nimport org.junit.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport static org.junit.Assert.*;\n\nimport fi.hut.soberit.agilefant.model.Setting;\nimport fi.hut.soberit.agilefant.test.AbstractHibernateTests;\n\n@ContextConfiguration\n@Transactional\npublic class SettingDAOTest extends AbstractHibernateTests {\n    \n    @Autowired    \n    private SettingDAO testable;\n    \n    @Test\n    public void getByName() {\n        executeClassSql();\n        Setting actual = testable.getByName(\"sampleSetting\");\n        assertEquals(\"test\", actual.getValue());\n    }\n    \n    @Test\n    public void getByName_noSuchSetting() {\n        executeClassSql();\n        assertNull(testable.getByName(\"noSuchSetting\"));\n    }\n    \n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\StoryDAOTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["StoryDAOTest"], "AN": ["storyDAO"], "SCS_VariableDeclarator": ["storyDAO", "storyIds", "actual", "actual", "start", "interval", "user", "actual", "actualIds", "t", "expectedIds", "start", "interval", "user", "actual", "start", "interval", "user", "actual", "actualIds", "t", "expectedIds", "stories", "search", "stories", "search", "stories", "actualMetrics", "actualMetrics"], "MN": ["testGetStoryPointSumByIteration_secondBacklog", "testRemoveStoryWithStoryHourEntries", "testRemoveStoryWithTaskHourEntries", "testGetNumberOfResponsiblesByTask", "testGetNumberOfResponsiblesByStory_noStory", "testGetAllIterationStoriesByResponsibleAndInterval", "testGetAllIterationStoriesByResponsibleAndInterval_user_hasNoAssigned", "testGetAllIterationStoriesByResponsibleAndInterval_standaloneIteration", "testRetrieveActiveIterationStoriesWithUserResponsible", "testSearchByName", "testSearchByName_notFound", "testCalculateMetrics", "testCalculateMetrics_noTasks"], "PN": [], "SCS_ClassReference": ["", "", "storyDAO", "", "storyDAO", "", "", "", "storyDAO", "", "", "", "Arrays", null, "", "actual", "", "actual", "", null, "", "actual", null, "", "actual", "", "start", "user", null, "actualIds", "t", "Arrays", "", "", "start", "user", null, "", "actual", "", "start", "user", null, "actualIds", "t", "Arrays", "", "", "storyDAO", "", "stories", "", "stories", null, "", "storyDAO", "", "stories", "", "stories", null, "", "storyDAO", "", "stories", "", "storyDAO", "", "actualMetrics", "", "actualMetrics", "", "storyDAO", "", "actualMetrics", "", "actualMetrics"], "SCS_MethodInvocation": ["executeClassSql", "assertEquals", "getStoryPointSumByIteration", "executeClassSql", "remove", "forceFlush", "fail", "executeClassSql", "remove", "forceFlush", "fail", "executeClassSql", "asList", "getNumOfResponsiblesByStory", "assertEquals", "size", "assertEquals", "get", "executeClassSql", "getNumOfResponsiblesByStory", "assertEquals", "size", "getNumOfResponsiblesByStory", "assertEquals", "size", "executeClassSql", "plusDays", "setId", "getAllIterationStoriesByResponsibleAndInterval", "add", "getId", "asList", "assertEquals", "executeClassSql", "plusDays", "setId", "getAllIterationStoriesByResponsibleAndInterval", "assertEquals", "size", "executeClassSql", "plusDays", "setId", "getAllIterationStoriesByResponsibleAndInterval", "add", "getId", "asList", "assertEquals", "executeSql", "retrieveActiveIterationStoriesWithUserResponsible", "assertEquals", "size", "assertEquals", "get", "getId", "executeClassSql", "searchByName", "assertEquals", "size", "assertEquals", "get", "getId", "executeClassSql", "searchByName", "assertEquals", "size", "executeClassSql", "calculateMetrics", "assertEquals", "getEffortLeft", "assertEquals", "getOriginalEstimate", "executeClassSql", "calculateMetrics", "assertEquals", "getEffortLeft", "assertEquals", "getOriginalEstimate"], "SCS_VariableDeclaration": ["Set", "Map", "Map", "DateTime", "Interval", "User", "Collection", "HashSet", "Story", "HashSet", "DateTime", "Interval", "User", "Collection", "DateTime", "Interval", "User", "Collection", "HashSet", "Story", "HashSet", "List", "String", "List", "String", "List", "StoryMetrics", "StoryMetrics"], "SCS_MemberReference": ["storyDAO", "storyIds", "storyDAO", "actual", "storyDAO", "start", "storyDAO", "user", "interval", "actual", "expectedIds", "actualIds", "start", "storyDAO", "user", "interval", "start", "storyDAO", "user", "interval", "actual", "expectedIds", "actualIds", "search", "search"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.db;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\n\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\nimport org.hibernate.exception.ConstraintViolationException;\nimport org.joda.time.DateTime;\nimport org.joda.time.Interval;\nimport org.junit.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.test.AbstractHibernateTests;\nimport fi.hut.soberit.agilefant.util.StoryMetrics;\n\n@ContextConfiguration\n@Transactional\npublic class StoryDAOTest extends AbstractHibernateTests {\n\n    @Autowired\n    private StoryDAO storyDAO;\n    \n    \n    @Test\n    public void testGetStoryPointSumByIteration_secondBacklog() {\n        executeClassSql();\n        assertEquals(33, storyDAO.getStoryPointSumByIteration(3));\n    }\n    \n    @Test\n    public void testRemoveStoryWithStoryHourEntries() {\n        executeClassSql();\n        try {\n            storyDAO.remove(2);\n            forceFlush();\n            fail(\"Exception not thrown.\");\n        } catch (ConstraintViolationException cve) {}\n    }\n    \n    @Test\n    public void testRemoveStoryWithTaskHourEntries() {\n        executeClassSql();\n        try {\n            storyDAO.remove(3);\n            forceFlush();\n            fail(\"Exception not thrown.\");\n        } catch (ConstraintViolationException cve) {}\n    }\n    \n    @Test\n    public void testGetNumberOfResponsiblesByTask() {\n        executeClassSql();\n        Set<Integer> storyIds = new HashSet<Integer>(Arrays.asList(1, 2, 3));\n        Map<Integer, Integer> actual = this.storyDAO\n                .getNumOfResponsiblesByStory(storyIds);\n        assertEquals(1, actual.size());\n        assertEquals(1, (int) actual.get(1));\n    }\n    \n    @Test\n    public void testGetNumberOfResponsiblesByStory_noStory() {\n        executeClassSql();\n        Map<Integer, Integer> actual = this.storyDAO.getNumOfResponsiblesByStory(null);\n        assertEquals(0, actual.size());\n        actual = this.storyDAO.getNumOfResponsiblesByStory(new HashSet<Integer>());\n        assertEquals(0, actual.size());\n    }\n\n\n   @Test\n   public void testGetAllIterationStoriesByResponsibleAndInterval() {\n       executeClassSql();\n       DateTime start = new DateTime(2009,6,10,1,0,0,0);\n       Interval interval = new Interval(start, start.plusDays(5));\n       User user = new User();\n       user.setId(1);\n       Collection<Story> actual = this.storyDAO.getAllIterationStoriesByResponsibleAndInterval(user, interval);\n      \n       HashSet<Integer> actualIds = new HashSet<Integer>();\n       for (Story t: actual) {\n           actualIds.add(t.getId()); \n       }\n       \n       HashSet<Integer> expectedIds = new HashSet<Integer>(\n           Arrays.asList(6,7)\n       );        \n       assertEquals(expectedIds, actualIds);\n   }\n       \n   @Test\n   public void testGetAllIterationStoriesByResponsibleAndInterval_user_hasNoAssigned() {\n       executeClassSql();\n       DateTime start = new DateTime(2009,6,10,1,0,0,0);\n       Interval interval = new Interval(start, start.plusDays(5));\n       User user = new User();\n       user.setId(3);\n      \n       Collection<Story> actual = this.storyDAO.getAllIterationStoriesByResponsibleAndInterval(user, interval);\n       assertEquals(0, actual.size());\n   }\n\n   @Test\n   public void testGetAllIterationStoriesByResponsibleAndInterval_standaloneIteration() {\n       executeClassSql();\n       DateTime start = new DateTime(2009,6,10,1,0,0,0);\n       Interval interval = new Interval(start, start.plusDays(5));\n       User user = new User();\n       user.setId(2);\n       Collection<Story> actual = this.storyDAO.getAllIterationStoriesByResponsibleAndInterval(user, interval);\n      \n       HashSet<Integer> actualIds = new HashSet<Integer>();\n       for (Story t: actual) {\n           actualIds.add(t.getId()); \n       }\n       \n       HashSet<Integer> expectedIds = new HashSet<Integer>(Arrays.asList(6,10));        \n       assertEquals(expectedIds, actualIds);\n   }\n   @Test\n   public void testRetrieveActiveIterationStoriesWithUserResponsible() {\n       executeSql(\"classpath:fi/hut/soberit/agilefant/db/StoryDAOTest-assignments-data.sql\");\n       List<Story> stories = storyDAO.retrieveActiveIterationStoriesWithUserResponsible(1);\n       assertEquals(1, stories.size());\n       assertEquals(1, stories.get(0).getId());\n   }\n\n   @Test\n   public void testSearchByName() {\n       String search  = \"9\";\n       executeClassSql();\n       List<Story> stories = storyDAO.searchByName(search);\n       assertEquals(1, stories.size());\n       assertEquals(9, stories.get(0).getId());\n   }\n\n   @Test\n   public void testSearchByName_notFound() {\n       String search  = \"not found string\";\n       executeClassSql();\n       List<Story> stories = storyDAO.searchByName(search);\n       assertEquals(0, stories.size());\n   }\n   \n   \n   @Test\n   public void testCalculateMetrics() {\n       executeClassSql();\n       StoryMetrics actualMetrics = storyDAO.calculateMetrics(100);\n       assertEquals(150L, actualMetrics.getEffortLeft());\n       assertEquals(400L, actualMetrics.getOriginalEstimate());\n   }\n   \n   @Test\n   public void testCalculateMetrics_noTasks() {\n       executeClassSql();\n       StoryMetrics actualMetrics = storyDAO.calculateMetrics(4);\n       assertEquals(0L, actualMetrics.getEffortLeft());\n       assertEquals(0L, actualMetrics.getOriginalEstimate());    \n   }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\StoryHierarchyDAOTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["StoryHierarchyDAOTest"], "AN": ["testable", "project", "emptyProject", "product", "emptyProduct"], "SCS_VariableDeclarator": ["testable", "project", "emptyProject", "product", "emptyProduct", "actualStoryIds", "actual", "story", "actualStoryIds", "actual", "story", "actual", "actual", "emptyIteration", "actualStoryIds", "actual", "story", "actual"], "MN": ["setUp_data", "tearDown", "testRetrieveProjectRootStories", "testRetrieveProjectLeafStories", "testRetrieveProjectRootStories_empty", "testRetrieveProjectLeafStories_empty", "testTotalLeafStoryPoints", "testTotaDonelLeafStoryPoints", "testTotalRootStoryPoints", "testTotalLeafStoryPoints_empty", "testTotaDonelLeafStoryPoints_empty", "testTotaDonelLeafStoryPoints_emptyIteration", "testTotalRootStoryPoints_empty", "testRetrieveProductRootStories", "testRetrieveProductRootStories_emptyProduct", "testMaximumTreeRank"], "PN": [], "SCS_MemberReference": ["product", "emptyProduct", "project", "emptyProject", "product", "emptyProduct", "project", "emptyProject", "testable", "actual", "testable", "project", "actual", "testable", "testable", "emptyProject", "testable", "project", "testable", "project", "testable", "project", "testable", "emptyProject", "testable", "emptyProject", "testable", "emptyIteration", "testable", "emptyProject", "testable", "actual", "testable", "testable"], "SCS_ClassReference": ["product", "emptyProduct", "project", "emptyProject", "", null, "project", "", "actual", "actualStoryIds", "story", "", "actualStoryIds", "", "actualStoryIds", "", "actualStoryIds", "", "actualStoryIds", "", null, "", "actual", "actualStoryIds", "story", "", "actualStoryIds", "", "actualStoryIds", "", "actualStoryIds", "", "actualStoryIds", "", "actualStoryIds", "", null, "emptyProject", "", "actual", "", null, "", "actual", "", "", null, "", "", null, "", "", null, "", "", null, "", "", null, "", "emptyIteration", "", null, "", "", null, "", null, "product", "", "actual", "actualStoryIds", "story", "", "actualStoryIds", "", "actualStoryIds", "", "actualStoryIds", "", "actualStoryIds", "", "actualStoryIds", "", null, "emptyProduct", "", "actual", "", "", null, "product"], "SCS_MethodInvocation": ["setId", "setId", "setId", "setId", "executeClassSql", "retrieveProjectRootStories", "getId", "assertEquals", "size", "add", "getId", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "executeClassSql", "retrieveProjectLeafStories", "assertEquals", "size", "add", "getId", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "executeClassSql", "retrieveProjectRootStories", "getId", "assertEquals", "size", "executeClassSql", "retrieveProjectLeafStories", "assertEquals", "size", "executeClassSql", "assertEquals", "totalLeafStoryPoints", "executeClassSql", "assertEquals", "totalLeafDoneStoryPoints", "executeClassSql", "assertEquals", "totalRootStoryPoints", "executeClassSql", "assertEquals", "totalLeafStoryPoints", "executeClassSql", "assertEquals", "totalLeafDoneStoryPoints", "executeClassSql", "setId", "assertEquals", "totalLeafDoneStoryPoints", "executeClassSql", "assertEquals", "totalRootStoryPoints", "executeClassSql", "retrieveProductRootStories", "getId", "assertEquals", "size", "add", "getId", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "executeClassSql", "retrieveProductRootStories", "getId", "assertEquals", "size", "executeClassSql", "assertEquals", "getMaximumTreeRank", "getId"], "SCS_VariableDeclaration": ["Set", "List", "Story", "Set", "List", "Story", "List", "List", "Iteration", "Set", "List", "Story", "List"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.db;\n\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.Product;\nimport fi.hut.soberit.agilefant.model.Project;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.test.AbstractHibernateTests;\nimport static org.junit.Assert.*;\n\n@ContextConfiguration\n@Transactional\npublic class StoryHierarchyDAOTest extends AbstractHibernateTests {\n    @Autowired\n    private StoryHierarchyDAO testable;\n    private Project project;\n    private Project emptyProject;\n    private Product product;\n    private Product emptyProduct;\n    \n    @Before\n    public void setUp_data() {\n        product = new Product();\n        product.setId(1);\n        emptyProduct = new Product();\n        emptyProduct.setId(11);\n        project = new Project();\n        project.setId(2);\n        emptyProject = new Project();\n        emptyProject.setId(5);\n    }\n    \n    @After\n    public void tearDown() {\n        product = null;\n        emptyProduct = null;\n        project = null;\n        emptyProject = null;\n    }\n    \n    \n    @Test\n    public void testRetrieveProjectRootStories() {\n       executeClassSql();\n       Set<Integer> actualStoryIds = new HashSet<Integer>();\n       List<Story> actual = this.testable.retrieveProjectRootStories(project.getId());\n       assertEquals(4, actual.size());\n       for(Story story : actual) {\n           actualStoryIds.add(story.getId());\n       }\n       assertTrue(actualStoryIds.contains(21));\n       assertTrue(actualStoryIds.contains(24));\n       assertTrue(actualStoryIds.contains(33));\n       assertTrue(actualStoryIds.contains(34));\n    }\n    \n    \n    @Test\n    public void testRetrieveProjectLeafStories() {\n        executeClassSql();\n        Set<Integer> actualStoryIds = new HashSet<Integer>();\n        List<Story> actual = this.testable.retrieveProjectLeafStories(project);\n\n        assertEquals(5, actual.size());\n        for(Story story : actual) {\n            actualStoryIds.add(story.getId());\n        }\n       assertTrue(actualStoryIds.contains(24));\n       assertTrue(actualStoryIds.contains(31));\n       assertTrue(actualStoryIds.contains(32));\n       assertTrue(actualStoryIds.contains(33));\n       assertTrue(actualStoryIds.contains(34));\n    }\n    \n    @Test\n    public void testRetrieveProjectRootStories_empty() {\n        executeClassSql();\n        List<Story> actual = this.testable.retrieveProjectRootStories(emptyProject.getId());\n        assertEquals(0, actual.size());\n\n    }\n    \n    @Test\n    public void testRetrieveProjectLeafStories_empty() {\n        executeClassSql();\n        List<Story> actual = this.testable.retrieveProjectLeafStories(emptyProject);\n        assertEquals(0, actual.size());\n    }\n    \n    @Test\n    public void testTotalLeafStoryPoints() {\n        executeClassSql();\n        assertEquals(140l, this.testable.totalLeafStoryPoints(project));\n    }\n    @Test\n    public void testTotaDonelLeafStoryPoints() {\n        executeClassSql();\n        assertEquals(30l, this.testable.totalLeafDoneStoryPoints(project));\n    }\n    @Test\n    public void testTotalRootStoryPoints() {\n        executeClassSql();\n        assertEquals(120l, this.testable.totalRootStoryPoints(project));\n    }\n    @Test\n    public void testTotalLeafStoryPoints_empty() {\n        executeClassSql();\n        assertEquals(0l, this.testable.totalLeafStoryPoints(emptyProject));\n    }\n    @Test\n    public void testTotaDonelLeafStoryPoints_empty() {\n        executeClassSql();\n        assertEquals(0l, this.testable.totalLeafDoneStoryPoints(emptyProject));\n    }\n    @Test\n    public void testTotaDonelLeafStoryPoints_emptyIteration() {\n        executeClassSql();\n        Iteration emptyIteration = new Iteration();\n        emptyIteration.setId(666);\n        assertEquals(0l, this.testable.totalLeafDoneStoryPoints(emptyIteration));\n    }    \n    @Test\n    public void testTotalRootStoryPoints_empty() {\n        executeClassSql();\n        assertEquals(0l, this.testable.totalRootStoryPoints(emptyProject));\n    }\n    \n    @Test\n    public void testRetrieveProductRootStories() {\n        executeClassSql();\n        Set<Integer> actualStoryIds = new HashSet<Integer>();\n        List<Story> actual = this.testable.retrieveProductRootStories(product.getId());\n        assertEquals(5, actual.size());\n        for(Story story : actual) {\n            actualStoryIds.add(story.getId());\n        }\n       assertTrue(actualStoryIds.contains(11));\n       assertTrue(actualStoryIds.contains(14));\n       assertTrue(actualStoryIds.contains(24));\n       assertTrue(actualStoryIds.contains(41));\n       assertTrue(actualStoryIds.contains(33));\n    }\n    \n    @Test\n    public void testRetrieveProductRootStories_emptyProduct() {\n        executeClassSql();\n        List<Story> actual = this.testable.retrieveProductRootStories(emptyProduct.getId());\n        assertEquals(0, actual.size());\n    }\n    \n    @Test\n    public void testMaximumTreeRank() {\n        executeClassSql();\n        assertEquals(5, this.testable.getMaximumTreeRank(product.getId()));\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\StoryRankDAOTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["StoryRankDAOTest"], "AN": ["storyRankDAO"], "SCS_VariableDeclarator": ["storyRankDAO", "backlog", "story", "actual", "story1", "story2", "story3", "story4", "actual", "actual", "sr"], "MN": ["testGetByStoryAndBacklog", "testGetIterationRanksForStories", "testGetIterationRanksForStories_noStories", "checkRankExists"], "PN": ["actual", "storyId", "backlogId", "rank"], "SCS_ClassReference": ["", "backlog", "story", "storyRankDAO", "", "actual", "", "story1", "story2", "story3", "story4", "storyRankDAO", "Arrays", "", "actual", "", "", "", "", "", "", "", "", "", "storyRankDAO", "", "actual", "sr", null, "sr", null, "sr"], "SCS_MethodInvocation": ["executeClassSql", "setId", "setId", "retrieveByBacklogAndStory", "assertEquals", "getId", "executeClassSql", "setId", "setId", "setId", "setId", "getIterationRanksForStories", "asList", "assertEquals", "size", "assertTrue", "checkRankExists", "assertTrue", "checkRankExists", "assertTrue", "checkRankExists", "assertTrue", "checkRankExists", "executeClassSql", "getIterationRanksForStories", "assertTrue", "isEmpty", "getStory", "getId", "getBacklog", "getId", "getRank"], "SCS_VariableDeclaration": ["Backlog", "Story", "StoryRank", "Story", "Story", "Story", "Story", "Collection", "Collection", "StoryRank"], "SCS_MemberReference": ["backlog", "story", "story1", "story2", "story3", "story4", "actual", "actual", "actual", "actual", "actual", "storyId", "backlogId", "rank"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.db;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\n\nimport org.junit.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport fi.hut.soberit.agilefant.model.Backlog;\nimport fi.hut.soberit.agilefant.model.Project;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.StoryRank;\nimport fi.hut.soberit.agilefant.test.AbstractHibernateTests;\n\nimport static org.junit.Assert.*;\n\n@ContextConfiguration\n@Transactional\npublic class StoryRankDAOTest extends AbstractHibernateTests {\n\n    @Autowired\n    private StoryRankDAO storyRankDAO;\n\n\n    @Test\n    public void testGetByStoryAndBacklog() {\n        executeClassSql();\n        Backlog backlog = new Project();\n        backlog.setId(1);\n        Story story = new Story();\n        story.setId(1);\n        StoryRank actual = storyRankDAO.retrieveByBacklogAndStory(backlog,\n                story);\n        assertEquals(1, actual.getId());\n    }\n    \n    @Test\n    public void testGetIterationRanksForStories() {\n        executeClassSql();\n        Story story1 = new Story();\n        Story story2 = new Story();\n        Story story3 = new Story();\n        Story story4 = new Story();\n        story1.setId(1);\n        story2.setId(2);\n        story3.setId(3);\n        story4.setId(4);\n        \n        Collection<StoryRank> actual = storyRankDAO.getIterationRanksForStories(Arrays.asList(story1, story2, story3, story4));\n                \n        assertEquals(4, actual.size());\n        assertTrue(checkRankExists(actual, 1, 100, 0));\n        assertTrue(checkRankExists(actual, 2, 100, 1));\n        assertTrue(checkRankExists(actual, 3, 101, 0));\n        assertTrue(checkRankExists(actual, 4, 101, 1));\n    }\n\n    @Test\n    public void testGetIterationRanksForStories_noStories() {\n        executeClassSql();\n        Collection<StoryRank> actual = storyRankDAO.getIterationRanksForStories(new ArrayList<Story>());\n        assertTrue(actual.isEmpty());\n    }\n    private boolean checkRankExists(Collection<StoryRank> actual, int storyId, int backlogId, int rank) {\n        for (StoryRank sr : actual) {\n            if (sr.getStory().getId() == storyId && sr.getBacklog().getId() == backlogId && sr.getRank() == rank) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\TaskDAOTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["TaskDAOTest"], "AN": ["taskDAO", "iter", "story"], "SCS_VariableDeclarator": ["taskDAO", "start", "interval", "user", "actual", "start", "user", "interval", "actual", "start", "user", "interval", "actual", "start", "user", "interval", "actual", "start", "user", "interval", "actual", "start", "user", "interval", "actual", "taskIds", "actual", "start", "user", "interval", "actual", "start", "user", "interval", "actual", "start", "user", "interval", "actual", "iter", "story", "actual", "actual", "actual", "actual", "actual", "actual", "actual", "actual", "actual", "actual", "actual", "actual", "start", "interval", "user", "actual", "actualIds", "t", "expectedIds", "start", "interval", "user", "actual"], "MN": ["testGetIterationTasksWithEffortLeft", "testGetIterationTasksWithEffortLeft_notInTimeframe", "testGetStoryTasksWithEffortLeft", "testGetStoryTasksWithEffortLeft_beginsWithin", "testGetStoryTasksWithEffortLeft_EndsWithin", "testGetStoryTasksWithEffortLeft_notInTimeframe", "testGetNumOfResponsiblesByTask", "testGetUnassignedStoryTasksWithEffortLeft", "testGetUnassignedStoryTasksWithEffortLeftWithNullEffortSpent", "testGetUnassignedIterationTasksWithEffortLeft", "setUp", "testGetTasksWithRankBetween_iterationTop", "testGetTasksWithRankBetween_iterationBottom", "testGetTasksWithRankBetween_iterationEmptyCollection", "testGetTasksWithRankBetween_storyTop", "testGetTasksWithRankBetween_storyBottom", "testGetTasksWithRankBetween_storyEmptyCollection", "testGetNextTaskInRank_iteration", "testGetNextTaskInRank_iteration_largeCap", "testGetNextTaskInRank_iteration_notFound", "testGetNextTaskInRank_story", "testGetNextTaskInRank_story_largeCap", "testGetNextTaskInRank_story_notFound", "testGetLastTaskInRank_iteration", "testGetLastTaskInRank_story", "testGetAllIterationAndStoryTasks", "testGetAllIterationAndStoryTasks_user_hasNoAssigned"], "PN": [], "SCS_ClassReference": ["", "start", "user", null, "", "actual", "", "user", "start", null, "", "actual", "", "user", "start", null, "", "actual", "", "user", "start", null, "", "actual", "", "user", "start", null, "", "actual", "", "user", "start", null, "", "actual", "", "Arrays", null, "", "actual", "", "actual", "", "actual", "", "actual", "", "actual", "", "user", "start", null, "", "actual", "", "actual", null, "", "actual", "", "actual", "", "user", "start", null, "", "actual", "", "user", "start", null, "", "actual", "", "actual", null, "", "actual", "", "actual", "iter", "", "taskDAO", "", "actual", "iter", "", "taskDAO", "", "actual", "iter", "", "taskDAO", "", "actual", "story", "", "taskDAO", "", "actual", "story", "", "taskDAO", "", "actual", "story", "", "taskDAO", "", "actual", "iter", "", "taskDAO", "", "actual", null, "iter", "", "taskDAO", "", "actual", "", "actual", null, "iter", "", "", "taskDAO", "story", "", "taskDAO", "", "actual", null, "", "actual", "story", "", "taskDAO", "", "actual", "", "actual", null, "story", "", "", "taskDAO", "iter", "", "taskDAO", "", "actual", "", "actual", null, "story", "", "taskDAO", "", "actual", "", "actual", null, "", "start", "user", null, "actualIds", "t", "Arrays", "", "", "start", "user", null, "", "actual"], "SCS_MethodInvocation": ["executeClassSql", "plusDays", "setId", "getIterationTasksWithEffortLeft", "assertEquals", "size", "executeClassSql", "setId", "plusDays", "getIterationTasksWithEffortLeft", "assertEquals", "size", "executeClassSql", "setId", "plusDays", "getStoryTasksWithEffortLeft", "assertEquals", "size", "executeClassSql", "setId", "plusDays", "getStoryTasksWithEffortLeft", "assertEquals", "size", "executeClassSql", "setId", "plusDays", "getStoryTasksWithEffortLeft", "assertEquals", "size", "executeClassSql", "setId", "plusDays", "getStoryTasksWithEffortLeft", "assertEquals", "size", "executeClassSql", "asList", "getNumOfResponsiblesByTask", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "executeClassSql", "setId", "plusDays", "getUnassignedStoryTasksWithEffortLeft", "assertEquals", "size", "assertEquals", "get", "intValue", "assertEquals", "get", "assertEquals", "get", "executeClassSql", "setId", "plusDays", "getUnassignedStoryTasksWithEffortLeft", "assertTrue", "isEmpty", "executeClassSql", "setId", "plusDays", "getUnassignedIterationTasksWithEffortLeft", "assertEquals", "size", "assertEquals", "get", "intValue", "assertEquals", "get", "assertEquals", "get", "setId", "executeClassSql", "getTasksWithRankBetween", "assertEquals", "size", "setId", "executeClassSql", "getTasksWithRankBetween", "assertEquals", "size", "setId", "executeClassSql", "getTasksWithRankBetween", "assertEquals", "size", "setId", "executeClassSql", "getTasksWithRankBetween", "assertEquals", "size", "setId", "executeClassSql", "getTasksWithRankBetween", "assertEquals", "size", "setId", "executeClassSql", "getTasksWithRankBetween", "assertEquals", "size", "setId", "executeClassSql", "getNextTaskInRank", "assertEquals", "getRank", "intValue", "setId", "executeClassSql", "getNextTaskInRank", "assertEquals", "getId", "assertEquals", "getRank", "intValue", "setId", "executeClassSql", "assertNull", "getNextTaskInRank", "setId", "executeClassSql", "getNextTaskInRank", "assertEquals", "getRank", "intValue", "assertEquals", "getId", "setId", "executeClassSql", "getNextTaskInRank", "assertEquals", "getId", "assertEquals", "getRank", "intValue", "setId", "executeClassSql", "assertNull", "getNextTaskInRank", "setId", "executeClassSql", "getLastTaskInRank", "assertEquals", "getId", "assertEquals", "getRank", "intValue", "setId", "executeClassSql", "getLastTaskInRank", "assertEquals", "getId", "assertEquals", "getRank", "intValue", "executeClassSql", "plusDays", "setId", "getAllIterationAndStoryTasks", "add", "getId", "asList", "assertEquals", "executeClassSql", "plusDays", "setId", "getAllIterationAndStoryTasks", "assertEquals", "size"], "SCS_VariableDeclaration": ["DateTime", "Interval", "User", "List", "DateTime", "User", "Interval", "List", "DateTime", "User", "Interval", "List", "DateTime", "User", "Interval", "List", "DateTime", "User", "Interval", "List", "DateTime", "User", "Interval", "List", "Set", "Map", "DateTime", "User", "Interval", "List", "DateTime", "User", "Interval", "List", "DateTime", "User", "Interval", "List", "Collection", "Collection", "Collection", "Collection", "Collection", "Collection", "Task", "Task", "Task", "Task", "Task", "Task", "DateTime", "Interval", "User", "List", "HashSet", "Task", "HashSet", "DateTime", "Interval", "User", "List"], "SCS_MemberReference": ["start", "taskDAO", "user", "interval", "start", "taskDAO", "user", "interval", "start", "taskDAO", "user", "interval", "start", "taskDAO", "user", "interval", "start", "taskDAO", "user", "interval", "start", "taskDAO", "user", "interval", "taskDAO", "taskIds", "start", "taskDAO", "user", "interval", "effortLeft", "availability", "iterationId", "start", "taskDAO", "user", "interval", "start", "taskDAO", "user", "interval", "effortLeft", "availability", "iterationId", "iter", "story", "iter", "iter", "iter", "story", "story", "story", "iter", "iter", "iter", "story", "story", "story", "iter", "story", "start", "taskDAO", "user", "interval", "actual", "expectedIds", "actualIds", "start", "taskDAO", "user", "interval"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.db;\n\nimport static org.junit.Assert.*;\n\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\nimport org.joda.time.DateTime;\nimport org.joda.time.Interval;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.Task;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.test.AbstractHibernateTests;\nimport fi.hut.soberit.agilefant.transfer.UnassignedLoadTO;\n\n@ContextConfiguration\n@Transactional\npublic class TaskDAOTest extends AbstractHibernateTests {\n\n    @Autowired  \n    private TaskDAO taskDAO;\n    \n    \n    @Test\n    public void testGetIterationTasksWithEffortLeft() {\n        executeClassSql();\n        DateTime start = new DateTime(2009,6,10,1,0,0,0);\n        Interval interval = new Interval(start, start.plusDays(5));\n        User user = new User();\n        user.setId(1);\n        List<Task> actual = this.taskDAO.getIterationTasksWithEffortLeft(user, interval);\n        assertEquals(2, actual.size());\n    }\n    \n    @Test\n    public void testGetIterationTasksWithEffortLeft_notInTimeframe() {\n        executeClassSql();\n        DateTime start = new DateTime(2008,6,10,1,0,0,0);\n        User user = new User();\n        user.setId(1);\n        Interval interval = new Interval(start, start.plusDays(5));\n        List<Task> actual = this.taskDAO.getIterationTasksWithEffortLeft(user, interval);\n        assertEquals(0, actual.size());\n    }\n    \n    @Test\n    public void testGetStoryTasksWithEffortLeft() {\n        executeClassSql();\n        DateTime start = new DateTime(2009,6,10,1,0,0,0);\n        User user = new User();\n        user.setId(1);\n        Interval interval = new Interval(start, start.plusDays(5));\n        List<Task> actual = this.taskDAO.getStoryTasksWithEffortLeft(user, interval);\n        assertEquals(3, actual.size());\n    }\n    \n    @Test\n    public void testGetStoryTasksWithEffortLeft_beginsWithin() {\n        executeClassSql();\n        DateTime start = new DateTime(2009,5,15,1,0,0,0);\n        User user = new User();\n        user.setId(1);\n        Interval interval = new Interval(start, start.plusDays(6));\n        List<Task> actual = this.taskDAO.getStoryTasksWithEffortLeft(user, interval);\n        assertEquals(3, actual.size());\n    }\n    \n    @Test\n    public void testGetStoryTasksWithEffortLeft_EndsWithin() {\n        executeClassSql();\n        DateTime start = new DateTime(2009,6,29,1,0,0,0);\n        User user = new User();\n        user.setId(1);\n        Interval interval = new Interval(start, start.plusDays(5));\n        List<Task> actual = this.taskDAO.getStoryTasksWithEffortLeft(user, interval);\n        assertEquals(3, actual.size());\n    }\n    \n    @Test\n    public void testGetStoryTasksWithEffortLeft_notInTimeframe() {\n        executeClassSql();\n        DateTime start = new DateTime(2008,6,10,1,0,0,0);\n        User user = new User();\n        user.setId(1);\n        Interval interval = new Interval(start, start.plusDays(5));\n        List<Task> actual = this.taskDAO.getStoryTasksWithEffortLeft(user, interval);\n        assertEquals(0, actual.size());\n    }\n    \n    @Test\n    public void testGetNumOfResponsiblesByTask() {\n        executeClassSql();\n        Set<Integer> taskIds = new HashSet<Integer>(Arrays.asList(1,2,3,4,5));\n        Map<Integer, Integer> actual = this.taskDAO.getNumOfResponsiblesByTask(taskIds);\n        assertEquals(1, (int)actual.get(1));\n        assertEquals(2, (int)actual.get(2));\n        assertEquals(1, (int)actual.get(3));\n        assertEquals(2, (int)actual.get(4));\n        assertEquals(1, (int)actual.get(5));\n    }\n    \n    @Test\n    public void testGetUnassignedStoryTasksWithEffortLeft() {\n        executeClassSql();\n        DateTime start = new DateTime(2009,6,10,1,0,0,0);\n        User user = new User();\n        user.setId(1);\n        Interval interval = new Interval(start, start.plusDays(5));\n        List<UnassignedLoadTO> actual = this.taskDAO.getUnassignedStoryTasksWithEffortLeft(user, interval);\n        assertEquals(1, actual.size());\n        assertEquals(60000, actual.get(0).effortLeft.intValue());\n        assertEquals(100, actual.get(0).availability);\n        assertEquals(1, actual.get(0).iterationId);\n    }\n    \n    @Test\n    public void testGetUnassignedStoryTasksWithEffortLeftWithNullEffortSpent() {\n        executeClassSql();\n        DateTime start = new DateTime(2009,6,10,1,0,0,0);\n        User user = new User();\n        user.setId(3);\n        Interval interval = new Interval(start, start.plusDays(5));\n        List<UnassignedLoadTO> actual = this.taskDAO.getUnassignedStoryTasksWithEffortLeft(user, interval);\n        assertTrue(actual.isEmpty());\n    }    \n    \n    @Test\n    public void testGetUnassignedIterationTasksWithEffortLeft() {\n        executeClassSql();\n        DateTime start = new DateTime(2009,6,10,1,0,0,0);\n        User user = new User();\n        user.setId(1);\n        Interval interval = new Interval(start, start.plusDays(5));\n        List<UnassignedLoadTO> actual = this.taskDAO.getUnassignedIterationTasksWithEffortLeft(user, interval);\n        assertEquals(2, actual.size());\n        assertEquals(970, actual.get(0).effortLeft.intValue());\n        assertEquals(100, actual.get(0).availability);\n        assertEquals(1, actual.get(0).iterationId);\n    }\n    \n    Iteration iter;\n    Story story;\n    \n    @Before\n    public void setUp() {\n        iter = new Iteration();\n        story = new Story();\n    }\n    \n    @Test\n    public void testGetTasksWithRankBetween_iterationTop() {\n        iter.setId(1);\n        executeClassSql();\n        Collection<Task> actual = taskDAO.getTasksWithRankBetween(0, 2, iter, null);\n        assertEquals(3, actual.size());\n    }\n    \n    @Test\n    public void testGetTasksWithRankBetween_iterationBottom() {\n        iter.setId(1);\n        executeClassSql();\n        Collection<Task> actual = taskDAO.getTasksWithRankBetween(3, 6, iter, null);\n        assertEquals(1, actual.size());\n    }\n    \n    @Test\n    public void testGetTasksWithRankBetween_iterationEmptyCollection() {\n        iter.setId(1);\n        executeClassSql();\n        Collection<Task> actual = taskDAO.getTasksWithRankBetween(2, 0, iter, null);\n        assertEquals(0, actual.size());\n    }\n    \n    @Test\n    public void testGetTasksWithRankBetween_storyTop() {\n        story.setId(1);\n        executeClassSql();\n        Collection<Task> actual = taskDAO.getTasksWithRankBetween(0, 0, null, story);\n        assertEquals(1, actual.size());\n    }\n    \n    @Test\n    public void testGetTasksWithRankBetween_storyBottom() {\n        story.setId(3);\n        executeClassSql();\n        Collection<Task> actual = taskDAO.getTasksWithRankBetween(1, 5, null, story);\n        assertEquals(1, actual.size());\n    }\n    \n    @Test\n    public void testGetTasksWithRankBetween_storyEmptyCollection() {\n        story.setId(1);\n        executeClassSql();\n        Collection<Task> actual = taskDAO.getTasksWithRankBetween(2, 1, null, story);\n        assertEquals(0, actual.size());\n    }\n    \n    \n    @Test\n    public void testGetNextTaskInRank_iteration() {\n        iter.setId(1);\n        executeClassSql();\n        Task actual = taskDAO.getNextTaskInRank(0, iter, null);       \n        assertEquals(1, actual.getRank().intValue());\n    }\n    \n    @Test\n    public void testGetNextTaskInRank_iteration_largeCap() {\n        iter.setId(3);\n        executeClassSql();\n        Task actual = taskDAO.getNextTaskInRank(25, iter, null);       \n        assertEquals(17, actual.getId());\n        assertEquals(1500, actual.getRank().intValue());\n    }\n    \n    @Test\n    public void testGetNextTaskInRank_iteration_notFound() {\n        iter.setId(1);\n        executeClassSql();\n        assertNull(taskDAO.getNextTaskInRank(999, iter, null));\n    }\n    \n    @Test\n    public void testGetNextTaskInRank_story() {\n        story.setId(55);\n        executeClassSql();\n        Task actual = taskDAO.getNextTaskInRank(0, null, story);\n        assertEquals(1, actual.getRank().intValue());\n        assertEquals(21, actual.getId());\n    }\n    \n    @Test\n    public void testGetNextTaskInRank_story_largeCap() {\n        story.setId(55);\n        executeClassSql();\n        Task actual = taskDAO.getNextTaskInRank(25, null, story);\n        \n        assertEquals(22, actual.getId());\n        assertEquals(666, actual.getRank().intValue());\n    }\n    \n    @Test\n    public void testGetNextTaskInRank_story_notFound() {\n        story.setId(55);\n        executeClassSql();\n        assertNull(taskDAO.getNextTaskInRank(999, null, story));\n    }\n    \n    @Test\n    public void testGetLastTaskInRank_iteration() {\n        iter.setId(3);\n        executeClassSql();\n        Task actual = taskDAO.getLastTaskInRank(null, iter);\n        assertEquals(17, actual.getId());\n        assertEquals(1500, actual.getRank().intValue());\n    }\n    \n    @Test\n    public void testGetLastTaskInRank_story() {\n        story.setId(55);\n        executeClassSql();\n        Task actual = taskDAO.getLastTaskInRank(story, null);\n        assertEquals(22, actual.getId());\n        assertEquals(666, actual.getRank().intValue());\n    }\n    \n    @Test\n    public void testGetAllIterationAndStoryTasks() {\n        executeClassSql();\n        DateTime start = new DateTime(2009,6,10,1,0,0,0);\n        Interval interval = new Interval(start, start.plusDays(5));\n        User user = new User();\n        user.setId(1);\n        List<Task> actual = this.taskDAO.getAllIterationAndStoryTasks(user, interval);\n       \n        HashSet<Integer> actualIds = new HashSet<Integer>();\n        for (Task t: actual) {\n            actualIds.add(t.getId()); \n        }\n        \n        HashSet<Integer> expectedIds = new HashSet<Integer>(\n            Arrays.asList(2,3,4)\n        );        \n        assertEquals(expectedIds, actualIds);\n    }\n        \n    @Test\n    public void testGetAllIterationAndStoryTasks_user_hasNoAssigned() {\n        executeClassSql();\n        DateTime start = new DateTime(2009,6,10,1,0,0,0);\n        Interval interval = new Interval(start, start.plusDays(5));\n        User user = new User();\n        user.setId(4);\n       \n        List<Task> actual = this.taskDAO.getAllIterationAndStoryTasks(user, interval);\n        assertEquals(0, actual.size());\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\TaskHourEntryDAOTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["TaskHourEntryDAOTest"], "AN": ["testable"], "SCS_VariableDeclarator": ["testable", "task", "returned", "task", "returned"], "MN": ["retrieveByTask", "retrieveByTask_noEntries"], "PN": [], "SCS_ClassReference": ["", "task", "testable", "", "returned", "", "task", "testable", "", "returned"], "SCS_MethodInvocation": ["executeClassSql", "setId", "retrieveByTask", "assertEquals", "size", "executeClassSql", "setId", "retrieveByTask", "assertEquals", "size"], "SCS_VariableDeclaration": ["Task", "List", "Task", "List"], "SCS_MemberReference": ["task", "task"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.db;\n\nimport java.util.List;\n\nimport org.junit.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport fi.hut.soberit.agilefant.model.Task;\nimport fi.hut.soberit.agilefant.model.TaskHourEntry;\nimport fi.hut.soberit.agilefant.test.AbstractHibernateTests;\n\nimport static org.junit.Assert.*;\n\n@ContextConfiguration\n@Transactional\npublic class TaskHourEntryDAOTest extends AbstractHibernateTests {\n    \n    @Autowired    \n    private TaskHourEntryDAO testable;\n    \n    @Test\n    public void retrieveByTask() {\n        executeClassSql();\n        Task task = new Task();\n        task.setId(1);\n        List<TaskHourEntry> returned = testable.retrieveByTask(task);\n        assertEquals(2, returned.size());\n    }\n    \n    @Test\n    public void retrieveByTask_noEntries() {\n        executeClassSql();\n        Task task = new Task();\n        task.setId(7);\n        List<TaskHourEntry> returned = testable.retrieveByTask(task);\n        assertEquals(0, returned.size());\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\UserDAOTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["UserDAOTest"], "AN": ["userDAO"], "SCS_VariableDeclarator": ["userDAO", "users", "foundIds", "user", "users", "users", "foundIds", "user", "search", "users", "search", "users", "users"], "MN": ["testGetByLoginName", "testGetByLoginName_ignoreCase", "testGetByLoginName_notFound", "testGetByLoginNameIgnoreCase_sameCase", "testGetByLoginNameIgnoreCase_caseInsensitive", "testGetByLoginNameIgnoreCase_notFound", "testListUsersByEnabledStatus_enabled", "testListUsersByEnabledStatus_nousers", "testListUsersByEnabledStatus_disabled", "testSearchByName", "testSearchByName_notFound", "testGetMultipleWithMultipleTeams"], "PN": [], "SCS_ClassReference": ["", "", "userDAO", null, "", "", "userDAO", "", "", "userDAO", "", "", "userDAO", null, "", "", "userDAO", null, "", "", "userDAO", "", "userDAO", "", "users", "foundIds", "user", "", "foundIds", "", "foundIds", "", "foundIds", "userDAO", "", "users", "", "userDAO", "", "users", "foundIds", "user", "", "foundIds", "", "userDAO", "", "users", "", "userDAO", "", "users", "", "userDAO", "Arrays", "", "users"], "SCS_MethodInvocation": ["executeClassSql", "assertEquals", "getByLoginName", "getId", "executeClassSql", "assertNull", "getByLoginName", "executeClassSql", "assertNull", "getByLoginName", "executeClassSql", "assertEquals", "getByLoginNameIgnoreCase", "getId", "executeClassSql", "assertEquals", "getByLoginNameIgnoreCase", "getId", "executeClassSql", "assertNull", "getByLoginNameIgnoreCase", "executeClassSql", "listUsersByEnabledStatus", "assertEquals", "size", "add", "getId", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "listUsersByEnabledStatus", "assertEquals", "size", "executeClassSql", "listUsersByEnabledStatus", "assertEquals", "size", "add", "getId", "assertTrue", "contains", "executeClassSql", "searchByName", "assertEquals", "size", "executeClassSql", "searchByName", "assertEquals", "size", "executeClassSql", "getMultiple", "asList", "assertEquals", "size"], "SCS_VariableDeclaration": ["List", "List", "User", "List", "List", "List", "User", "String", "List", "String", "List", "Collection"], "SCS_MemberReference": ["users", "users", "search", "search"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.db;\n\nimport static org.junit.Assert.*;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.List;\n\nimport org.junit.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.test.AbstractHibernateTests;\n\n@ContextConfiguration\n@Transactional\npublic class UserDAOTest extends AbstractHibernateTests {\n    \n    @Autowired\n    private UserDAO userDAO;\n    \n    @Test\n    public void testGetByLoginName() {\n        executeClassSql();\n        assertEquals(4, userDAO.getByLoginName(\"user4\").getId());\n    }\n    \n    @Test\n    public void testGetByLoginName_ignoreCase() {\n        executeClassSql();\n        assertNull(userDAO.getByLoginName(\"User4\"));\n    }\n    \n    @Test\n    public void testGetByLoginName_notFound() {\n        executeClassSql();\n        assertNull(userDAO.getByLoginName(\"usernotfound\"));\n    }\n    \n    @Test\n    public void testGetByLoginNameIgnoreCase_sameCase() {\n        executeClassSql();\n        assertEquals(4, userDAO.getByLoginNameIgnoreCase(\"user4\").getId());\n    }\n    \n    @Test\n    public void testGetByLoginNameIgnoreCase_caseInsensitive() {\n        executeClassSql();\n        assertEquals(4, userDAO.getByLoginNameIgnoreCase(\"User4\").getId());\n    }\n    \n    @Test\n    public void testGetByLoginNameIgnoreCase_notFound() {\n        executeClassSql();\n        assertNull(userDAO.getByLoginNameIgnoreCase(\"usernotfound\"));\n    }\n\n    @Test\n    public void testListUsersByEnabledStatus_enabled() {\n        executeClassSql();\n        List<User> users = userDAO.listUsersByEnabledStatus(true);\n        assertEquals(3, users.size());\n        List<Integer> foundIds = new ArrayList<Integer>();\n        for (User user : users) {\n            foundIds.add(user.getId());\n        }\n        assertTrue(foundIds.contains(1));\n        assertTrue(foundIds.contains(2));\n        assertTrue(foundIds.contains(4));\n    }\n\n    @Test\n    public void testListUsersByEnabledStatus_nousers() {\n        List<User> users = userDAO.listUsersByEnabledStatus(true);\n        assertEquals(0, users.size());\n    }\n\n    @Test\n    public void testListUsersByEnabledStatus_disabled() {\n        executeClassSql();\n        List<User> users = userDAO.listUsersByEnabledStatus(false);\n        assertEquals(1, users.size());\n        List<Integer> foundIds = new ArrayList<Integer>();\n        for (User user : users) {\n            foundIds.add(user.getId());\n        }\n        assertTrue(foundIds.contains(3));\n    }\n    \n    @Test\n    public void testSearchByName() {\n        String search  = \"full\";\n        executeClassSql();\n        List<User> users = userDAO.searchByName(search);\n        assertEquals(1, users.size());\n    }\n\n    @Test\n    public void testSearchByName_notFound() {\n        String search  = \"not found string\";\n        executeClassSql();\n        List<User> users = userDAO.searchByName(search);\n        assertEquals(0, users.size());\n    }\n    \n    @Test\n    public void testGetMultipleWithMultipleTeams() {\n        executeClassSql();\n        Collection<User> users = userDAO.getMultiple(Arrays.asList(1));\n        assertEquals(1, users.size());\n    }\n    \n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\WhatsNextEntryDAOTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["WhatsNextEntryDAOTest"], "AN": ["testable", "user1", "user2", "user3", "task4"], "SCS_VariableDeclarator": ["testable", "user1", "user2", "user3", "task4", "e", "t", "e", "entries", "ids", "entry", "entries", "task", "entry", "task", "entry", "entries", "entries", "returnValue"], "MN": ["setUp_data", "testGetLastTaskInRank", "testGetLastTaskInRank_notFound", "testGetTasksWithRankBetween", "testGetTasksWithRankBetween_notFound", "testGetWhatsNextEntryFor", "testGetWhatsNextEntryFor_notFound", "testGetWhatsNextEntriesFor", "testGetWhatsNextEntriesFor_notFound", "testRemoveAllByTask", "testGetTopmostWorkQueueEntries"], "PN": [], "SCS_MemberReference": ["user1", "user2", "user3", "task4", "user1", "user3", "e", "user1", "entries", "user3", "user1", "task", "user3", "task", "entry", "user1", "user3", "user1", "task4", "user2", "task4", "task4", "user1", "task4", "user2", "task4"], "SCS_ClassReference": ["user1", "user2", "user3", "task4", "", "testable", "e", "", "t", "testable", "", "testable", "", "entries", "Arrays", "ids", "entry", "", "ids", "testable", "", "entries", "task", "testable", "", "entry", "task", "testable", "", "testable", "", "entries", "testable", "", "entries", "", "testable", "", "testable", "testable", "", "testable", "", "testable", "testable", "", "returnValue"], "SCS_MethodInvocation": ["setId", "setId", "setId", "setId", "executeClassSql", "getLastTaskInRank", "getTask", "assertEquals", "getId", "getLastTaskInRank", "assertNull", "getTasksWithRankBetween", "assertEquals", "size", "asList", "remove", "getId", "assertEquals", "size", "getTasksWithRankBetween", "assertEquals", "size", "setId", "getWhatsNextEntryFor", "assertEquals", "getId", "setId", "getWhatsNextEntryFor", "assertNull", "getWhatsNextEntriesFor", "assertEquals", "size", "getWhatsNextEntriesFor", "assertEquals", "size", "assertNotNull", "getWhatsNextEntryFor", "assertNotNull", "getWhatsNextEntryFor", "removeAllByTask", "assertNull", "getWhatsNextEntryFor", "assertNull", "getWhatsNextEntryFor", "getTopmostWorkQueueEntries", "assertEquals", "size"], "SCS_VariableDeclaration": ["WhatsNextEntry", "Task", "WhatsNextEntry", "Collection", "ArrayList", "WhatsNextEntry", "Collection", "Task", "WhatsNextEntry", "Task", "WhatsNextEntry", "Collection", "Collection", "Map"], "CO": ["//    private Task createTask(int id) {", "//        Task returned = new Task();", "//        returned.setId(id);", "//        return returned;", "//    }", "//", "// task 5 would be returned if it were not done already!", "// Ranks: 2,3,5", "// all ids found.", "// tasks #1 and #5 are out because they've been done already!"], "CODE": "package fi.hut.soberit.agilefant.db;\n\nimport static org.junit.Assert.*;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport fi.hut.soberit.agilefant.model.Task;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.model.WhatsNextEntry;\nimport fi.hut.soberit.agilefant.test.AbstractHibernateTests;\n\n@ContextConfiguration\n@Transactional\npublic class WhatsNextEntryDAOTest extends AbstractHibernateTests {\n\n    @Autowired  \n    private WhatsNextEntryDAO testable;\n    private User user1;\n    private User user2;\n    private User user3;\n    private Task task4;\n    \n    @Before\n    public void setUp_data() {\n        user1 = new User();\n        user1.setId(1);\n\n        user2 = new User();\n        user2.setId(2);\n\n        user3 = new User();\n        user3.setId(3);\n\n        task4 = new Task();\n        task4.setId(4);\n        \n        executeClassSql();\n    }\n    \n    //    private Task createTask(int id) {\n    //        Task returned = new Task();\n    //        returned.setId(id);\n    //        return returned;\n    //    }\n    //\n    \n    @Test\n    public void testGetLastTaskInRank() {\n        WhatsNextEntry e = testable.getLastTaskInRank(user1);\n        Task t = e.getTask();\n\n        // task 5 would be returned if it were not done already!\n        assertEquals(4, t.getId());\n    }\n    \n    @Test\n    public void testGetLastTaskInRank_notFound() {\n        WhatsNextEntry e = testable.getLastTaskInRank(user3);\n        assertNull(e);\n    }\n    \n    @Test\n    public void testGetTasksWithRankBetween() {\n        // Ranks: 2,3,5\n        Collection<WhatsNextEntry> entries= testable.getTasksWithRankBetween(2, 5, user1);\n        assertEquals(3, entries.size());\n        \n        ArrayList<Integer> ids = new ArrayList<Integer>(Arrays.asList(new Integer[]{ 4, 7, 8 }));\n        for (WhatsNextEntry entry: entries) {\n            ids.remove((Integer)entry.getId());\n        }\n        \n        // all ids found.\n        \n        assertEquals(0, ids.size());\n    }\n    \n    @Test\n    public void testGetTasksWithRankBetween_notFound() {\n        Collection<WhatsNextEntry> entries= testable.getTasksWithRankBetween(2, 5, user3);\n        assertEquals(0, entries.size());\n    }\n    \n    @Test\n    public void testGetWhatsNextEntryFor() {\n        Task task = new Task();\n        task.setId(3);\n        WhatsNextEntry entry = testable.getWhatsNextEntryFor(user1, task);\n        assertEquals(4, entry.getId());\n    }\n    \n    @Test\n    public void testGetWhatsNextEntryFor_notFound() {\n        Task task = new Task();\n        task.setId(3);\n        WhatsNextEntry entry = testable.getWhatsNextEntryFor(user3, task);\n        assertNull(entry);\n    }\n    \n    @Test\n    public void testGetWhatsNextEntriesFor() {\n        Collection<WhatsNextEntry> entries = testable.getWhatsNextEntriesFor(user1);\n        \n        // tasks #1 and #5 are out because they've been done already!\n        assertEquals(3, entries.size());\n    }\n    \n    @Test\n    public void testGetWhatsNextEntriesFor_notFound() {\n        Collection<WhatsNextEntry> entries = testable.getWhatsNextEntriesFor(user3);\n        assertEquals(0, entries.size());\n    }\n    \n    @Test\n    public void testRemoveAllByTask() {\n        assertNotNull(testable.getWhatsNextEntryFor(user1, task4));\n        assertNotNull(testable.getWhatsNextEntryFor(user2, task4));\n\n        testable.removeAllByTask(task4);\n\n        assertNull(testable.getWhatsNextEntryFor(user1, task4));\n        assertNull(testable.getWhatsNextEntryFor(user2, task4));\n    }\n\n    @Test\n    public void testGetTopmostWorkQueueEntries() {\n        Map<User, List<Task>> returnValue = testable.getTopmostWorkQueueEntries();\n        assertEquals(2, returnValue.size());\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\WidgetCollectionDAOTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["WidgetCollectionDAOTest"], "AN": ["testable"], "SCS_VariableDeclarator": ["testable", "list"], "MN": ["setUp_data", "getCollections"], "PN": [], "SCS_ClassReference": ["", "testable", "", "list", "", "list", null, "", "list", null, "", "list", null], "SCS_MethodInvocation": ["executeClassSql", "getCollections", "assertEquals", "size", "assertEquals", "get", "getName", "assertEquals", "get", "getName", "assertEquals", "get", "getName"], "SCS_VariableDeclaration": ["List"], "CO": ["// Check for alphabetical order"], "CODE": "package fi.hut.soberit.agilefant.db;\n\nimport java.util.List;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport fi.hut.soberit.agilefant.model.WidgetCollection;\nimport fi.hut.soberit.agilefant.test.AbstractHibernateTests;\n\nimport static org.junit.Assert.*;\n\n@ContextConfiguration\n@Transactional\npublic class WidgetCollectionDAOTest extends AbstractHibernateTests {\n    \n    @Autowired\n    private WidgetCollectionDAO testable;\n    \n    @Before\n    public void setUp_data() {\n        executeClassSql();\n    }\n    \n    @Test\n    public void getCollections() {\n        List<WidgetCollection> list = testable.getCollections();\n        \n        assertEquals(3, list.size());\n        // Check for alphabetical order\n        assertEquals(\"A: Second\", list.get(0).getName());\n        assertEquals(\"B: First\", list.get(1).getName());\n        assertEquals(\"C: User first\", list.get(2).getName());\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\history\\\\BacklogHistoryDAOTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["BacklogHistoryDAOTest"], "AN": ["backlogHistoryDAO"], "SCS_VariableDeclarator": ["backlogHistoryDAO", "backlog", "actual", "backlog", "actual"], "MN": ["testRetrieveAddedStories", "testRetrieveDeletedStories"], "PN": [], "SCS_ClassReference": ["", "backlog", null, "", "actual", null, "", "actual", null, "", "actual", null, "", "actual", null, null, "", "actual", null, "", "actual", null, null, "", "backlog", null, "", "actual", null, "", "actual", null, null], "SCS_MethodInvocation": ["executeClassSql", "setId", "retrieveAddedStories", "assertEquals", "get", "getRevisionType", "assertEquals", "get", "getRevisionType", "assertEquals", "get", "getRevisionType", "assertEquals", "get", "getRevision", "getId", "assertEquals", "get", "getRevisionType", "assertEquals", "get", "getRevision", "getId", "executeClassSql", "setId", "retrieveDeletedStories", "assertEquals", "get", "getRevisionType", "assertEquals", "get", "getRevision", "getId"], "SCS_VariableDeclaration": ["Backlog", "List", "Backlog", "List"], "SCS_MemberReference": ["backlogHistoryDAO", "backlog", "ADD", "ADD", "ADD", "ADD", "backlogHistoryDAO", "backlog", "DEL"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.db.history;\n\nimport static org.junit.Assert.assertEquals;\n\nimport java.util.List;\n\nimport org.hibernate.envers.RevisionType;\nimport org.junit.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport fi.hut.soberit.agilefant.model.Backlog;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.test.AbstractHibernateTests;\nimport fi.hut.soberit.agilefant.transfer.AgilefantHistoryEntry;\n\n@ContextConfiguration\n@Transactional\npublic class BacklogHistoryDAOTest extends AbstractHibernateTests {\n\n    @Autowired\n    private BacklogHistoryDAO backlogHistoryDAO;\n    \n    @Test\n    public void testRetrieveAddedStories() {\n        executeClassSql();\n        Backlog backlog = new Iteration();\n        backlog.setId(1);\n        List<AgilefantHistoryEntry> actual = this.backlogHistoryDAO.retrieveAddedStories(backlog);\n\n        assertEquals(RevisionType.ADD, actual.get(0).getRevisionType());\n        assertEquals(RevisionType.ADD, actual.get(1).getRevisionType());\n        assertEquals(RevisionType.ADD, actual.get(2).getRevisionType());\n        assertEquals(1, actual.get(2).getRevision().getId());\n        \n        assertEquals(RevisionType.ADD, actual.get(3).getRevisionType());\n        assertEquals(2, actual.get(3).getRevision().getId());\n    }\n    \n    @Test\n    public void testRetrieveDeletedStories() {\n        executeClassSql();\n        Backlog backlog = new Iteration();\n        backlog.setId(1);\n        List<AgilefantHistoryEntry> actual = this.backlogHistoryDAO.retrieveDeletedStories(backlog);\n        \n        assertEquals(RevisionType.DEL, actual.get(0).getRevisionType());\n        assertEquals(3, actual.get(0).getRevision().getId());\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\db\\\\history\\\\StoryHistoryDAOTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["StoryHistoryDAOTest"], "AN": ["storyHistoryDAO"], "SCS_VariableDeclarator": ["storyHistoryDAO", "actual", "actual", "actual", "actual"], "MN": ["testRetrieveClosestRevision_inial", "testRetrieveClosestRevision_second", "testRetrieveClosestRevision_last", "testRetrieveClosestRevision_bigger"], "PN": [], "SCS_ClassReference": ["", null, "", "actual", "", null, "", "actual", "", null, "", "actual", "", null, "", "actual"], "SCS_MethodInvocation": ["executeClassSql", "retrieveClosestRevision", "assertEquals", "getState", "executeClassSql", "retrieveClosestRevision", "assertEquals", "getState", "executeClassSql", "retrieveClosestRevision", "assertEquals", "getState", "executeClassSql", "retrieveClosestRevision", "assertEquals", "getState"], "SCS_VariableDeclaration": ["Story", "Story", "Story", "Story"], "SCS_MemberReference": ["storyHistoryDAO", "NOT_STARTED", "storyHistoryDAO", "PENDING", "storyHistoryDAO", "IMPLEMENTED", "storyHistoryDAO", "IMPLEMENTED"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.db.history;\n\nimport static org.junit.Assert.assertEquals;\n\nimport org.junit.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.StoryState;\nimport fi.hut.soberit.agilefant.test.AbstractHibernateTests;\n\n@ContextConfiguration\n@Transactional\npublic class StoryHistoryDAOTest extends AbstractHibernateTests {\n    @Autowired\n    private StoryHistoryDAO storyHistoryDAO;\n    \n    @Test\n    public void testRetrieveClosestRevision_inial() {\n        executeClassSql();\n       Story actual = this.storyHistoryDAO.retrieveClosestRevision(1, 1);\n       assertEquals(StoryState.NOT_STARTED, actual.getState());\n    }\n    \n    @Test\n    public void testRetrieveClosestRevision_second() {\n        executeClassSql();\n       Story actual = this.storyHistoryDAO.retrieveClosestRevision(1, 2);\n       assertEquals(StoryState.PENDING, actual.getState());\n    }\n    @Test\n    public void testRetrieveClosestRevision_last() {\n        executeClassSql();\n       Story actual = this.storyHistoryDAO.retrieveClosestRevision(1, 3);\n       assertEquals(StoryState.IMPLEMENTED, actual.getState());\n    }\n    \n    @Test\n    public void testRetrieveClosestRevision_bigger() {\n        executeClassSql();\n       Story actual = this.storyHistoryDAO.retrieveClosestRevision(1, 8);\n       assertEquals(StoryState.IMPLEMENTED, actual.getState());\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\integration\\\\StorySplitIntegrationTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["StorySplitIntegrationTest"], "MN": ["testDummy"], "PN": [], "CO": ["/**\n * Integration test class for story splitting.\n * <p>\n * Must use the jUnit 3 notation, because DAO tests\n * do not yet support jUnit 4.\n * \n * @author rjokelai\n */", "/*\n@ContextConfiguration\n@Transactional\npublic class StorySplitIntegrationTest extends AbstractHibernateTests {\n   \n    @Autowired\n    private StorySplitBusiness storySplitBusiness;\n    \n    @Autowired\n    private StoryDAO storyDAO;\n    \n    @Before\n    public void setUp() {\n        executeClassSql();       \n    }\n    \n    @Test\n    public void testSplitStory_get() {\n        Story actual = storySplitBusiness.getStory(1);        \n        assertEquals(\"Persisted story\", actual.getName());\n    }\n\n}\n*/"], "CODE": "package fi.hut.soberit.agilefant.integration;\n\nimport org.junit.Test;\n\n/**\n * Integration test class for story splitting.\n * <p>\n * Must use the jUnit 3 notation, because DAO tests\n * do not yet support jUnit 4.\n * \n * @author rjokelai\n */\npublic class StorySplitIntegrationTest {\n    @Test\n    public void testDummy() {\n        \n    }\n}\n/*\n@ContextConfiguration\n@Transactional\npublic class StorySplitIntegrationTest extends AbstractHibernateTests {\n   \n    @Autowired\n    private StorySplitBusiness storySplitBusiness;\n    \n    @Autowired\n    private StoryDAO storyDAO;\n    \n    @Before\n    public void setUp() {\n        executeClassSql();       \n    }\n    \n    @Test\n    public void testSplitStory_get() {\n        Story actual = storySplitBusiness.getStory(1);        \n        assertEquals(\"Persisted story\", actual.getName());\n    }\n\n}\n*/", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\security\\\\RestrictActionPathFilterTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["RestrictActionPathFilterTest"], "AN": ["request", "response", "filter"], "SCS_VariableDeclarator": ["request", "response", "filter"], "MN": ["setup", "testValidPath", "doFilter", "doFilter", "testInvalidPath", "doFilter"], "PN": ["request", "response", "request", "response", "request", "response"], "SCS_MemberReference": ["request", "response", "filter", "request", "request", "response", "response", "request", "request", "response", "response", "request", "request", "response"], "SCS_ClassReference": [null, "filter", "Assert", null, null, "filter", "Assert", null, "AccessDeniedException", null, "filter", "Assert"], "SCS_MethodInvocation": ["setServletPath", "doFilter", "assertEquals", "getStatus", "setServletPath", "doFilter", "assertEquals", "getStatus", "setServletPath", "doFilter", "fail"], "CO": ["/**\n * Unit test for RestrictActionPathFilter\n * \n * @author vsseppa\n */", "/**\n\t * Test valid paths.\n\t * Should not throw an exception.\n\t */", "/**\n\t * Test invalid path.\n\t * Must throw AccessDeniedException\n\t */"], "CODE": "package fi.hut.soberit.agilefant.security;\n\nimport java.io.IOException;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.ServletResponse;\n\nimport org.junit.Assert;\nimport org.junit.Before;\n\nimport org.junit.Test;\nimport org.springframework.mock.web.MockHttpServletRequest;\nimport org.springframework.mock.web.MockHttpServletResponse;\nimport org.springframework.mock.web.MockFilterChain;\nimport org.springframework.security.access.AccessDeniedException;\n\n/**\n * Unit test for RestrictActionPathFilter\n * \n * @author vsseppa\n */\npublic class RestrictActionPathFilterTest {\n\t\n\tprivate MockHttpServletRequest request;\n\tprivate MockHttpServletResponse response;\n\t\n\tprivate RestrictActionPathFilter filter;\n\t\n\t@Before\n\tpublic void setup() {\n\t\tthis.request = new MockHttpServletRequest();\n\t\tthis.response = new MockHttpServletResponse();\t\t\n\t\tthis.filter = new RestrictActionPathFilter();\n\t}\n\t\n\t/**\n\t * Test valid paths.\n\t * Should not throw an exception.\n\t */\n\t@Test\n\tpublic void testValidPath() throws Exception {\n\t\t\n\t\tthis.request.setServletPath(\"/validpath.action\");\n\n\t\tfilter.doFilter(request, response, new MockFilterChain() {\n\t\t\t@Override\n\t\t\tpublic void doFilter(ServletRequest request, ServletResponse response) throws IOException, ServletException {\n\t\t\t}\n\t\t});\n\t\t\n\t\tAssert.assertEquals(200, this.response.getStatus());\n\t\t\n\t\tthis.request.setServletPath(\"/ajax/anothervalidpath.action\");\n\t\t\n\t\tfilter.doFilter(request, response, new MockFilterChain() {\n\t\t\t@Override\n\t\t\tpublic void doFilter(ServletRequest request, ServletResponse response) throws IOException, ServletException {\n\t\t\t}\n\t\t});\n\t\t\n\t\tAssert.assertEquals(200, this.response.getStatus());\n\t}\n\t\n\t/**\n\t * Test invalid path.\n\t * Must throw AccessDeniedException\n\t */\n\t@Test(expected = AccessDeniedException.class)\n\tpublic void testInvalidPath() throws Exception {\n\t\t\n\t\tthis.request.setServletPath(\"/invalid/path.action\");\n\t\t\n\t\tfilter.doFilter(request, response, new MockFilterChain() {\n\t\t\t@Override\n\t\t\tpublic void doFilter(ServletRequest request, ServletResponse response) throws IOException, ServletException {\n\t\t\t\tAssert.fail();\n\t\t\t}\n\t\t});\n\t}\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\test\\\\AbstractHibernateTests.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["AbstractHibernateTests"], "AN": ["applicationContext", "simpleJdbcTemplate", "sessionFactory"], "SCS_VariableDeclarator": ["applicationContext", "simpleJdbcTemplate", "sessionFactory", "callerFromStackTrace", "builder", "resource"], "MN": ["forceFlush", "executeClassSql", "executeSql"], "PN": ["location"], "SCS_ClassReference": ["sessionFactory", null, null, "builder", "builder", "callerFromStackTrace", null, "builder", "", "builder", "applicationContext", "SimpleJdbcTestUtils"], "SCS_MethodInvocation": ["getCurrentSession", "flush", "getStackTrace", "append", "append", "getClassName", "replace", "append", "executeSql", "toString", "getResource", "executeSqlScript"], "SCS_VariableDeclaration": ["StackTraceElement", "StringBuilder", "Resource"], "SCS_MemberReference": ["location", "simpleJdbcTemplate", "resource"], "CO": ["/**\n     * Executes an SQL script from the classpath. The expected\n     * script file name is 'the/package/of/the/class/ClassName-data.sql'\n     * \n     * If the SQL script does not exist, this method will throw an exception\n     */", "/**\n     * Executes an SQL script from a location. The location is a standard\n     * spring resource (for example classpath:test.sql, file:/home/jorma/test.sql).\n     * \n     * @param location SQL script location\n     */"], "CODE": "package fi.hut.soberit.agilefant.test;\n\nimport org.hibernate.SessionFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.core.io.Resource;\nimport org.springframework.jdbc.core.simple.SimpleJdbcTemplate;\nimport org.springframework.test.context.junit4.AbstractTransactionalJUnit4SpringContextTests;\nimport org.springframework.test.jdbc.SimpleJdbcTestUtils;\n\npublic abstract class AbstractHibernateTests extends\n        AbstractTransactionalJUnit4SpringContextTests {\n\n    @Autowired\n    protected ApplicationContext applicationContext;\n\n    @Autowired\n    protected SimpleJdbcTemplate simpleJdbcTemplate;\n\n    @Autowired\n    protected SessionFactory sessionFactory;\n\n    protected void forceFlush() {\n        sessionFactory.getCurrentSession().flush();\n    }\n\n    /**\n     * Executes an SQL script from the classpath. The expected\n     * script file name is 'the/package/of/the/class/ClassName-data.sql'\n     * \n     * If the SQL script does not exist, this method will throw an exception\n     */\n    protected void executeClassSql() {\n        final StackTraceElement callerFromStackTrace = new Throwable()\n                .getStackTrace()[1];\n        StringBuilder builder = new StringBuilder();\n        builder.append(\"classpath:\");\n        builder.append(callerFromStackTrace.getClassName().replace('.', '/'));\n        builder.append(\"-data.sql\");\n        executeSql(builder.toString());\n    }\n\n    /**\n     * Executes an SQL script from a location. The location is a standard\n     * spring resource (for example classpath:test.sql, file:/home/jorma/test.sql).\n     * \n     * @param location SQL script location\n     */\n    protected void executeSql(String location) {\n        Resource resource = applicationContext.getResource(location);\n        SimpleJdbcTestUtils.executeSqlScript(simpleJdbcTemplate, resource,\n                false);\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\test\\\\GetterSetterTester.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["GetterSetterTester"], "AN": ["targetClass", "target", "testValues", "exceptions"], "SCS_VariableDeclarator": ["targetClass", "target", "testValues", "exceptions", "exception", "methods", "method", "fieldName", "field", "generatedValue"], "SCS_ClassReference": ["testValues", "String", "testValues", "Integer", "testValues", "testValues", "Long", "testValues", "testValues", "Boolean", "testValues", "testValues", "List", "testValues", "Collection", "testValues", "Set", "testValues", "Map", "exceptions", "target", "testValues", "exceptions", "targetClass", "method", null, "exceptions", "method", "fieldName", "method", null, null, "fieldName", "method", null, "targetClass", "fieldName", "targetClass", "field", "testValues", "field", "field", null, "targetClass", "field", "targetClass", "method", null, "targetClass", "method", "targetClass", "method"], "SCS_MethodInvocation": ["put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "add", "getClass", "put", "add", "getMethods", "getName", "startsWith", "contains", "getName", "append", "getName", "substring", "toLowerCase", "append", "getName", "substring", "getDeclaredField", "toString", "getName", "setAccessible", "get", "getType", "getType", "newInstance", "getName", "set", "getName", "invoke", "equals", "getName", "getName", "getName", "getName"], "SCS_MemberReference": ["TYPE", "TYPE", "TRUE", "TYPE", "TRUE", "target", "target", "target", "targetClass", "first", "second", "newExceptions", "exception", "methods", "field", "fieldName", "e", "generatedValue", "generatedValue", "fieldName", "target", "generatedValue", "fieldName", "generatedValue", "target"], "MN": ["getInstance", "addTestValue", "addExceptions", "testGettersAndSetters"], "PN": ["target", "pair", "newExceptions"], "SCS_ConstructorDeclaration": ["GetterSetterTester"], "SCS_VariableDeclaration": ["String", "Method", "Method", "StringBuilder", "Field", "Object"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.test;\n\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\nimport fi.hut.soberit.agilefant.util.Pair;\n\n@SuppressWarnings(\"unchecked\")\npublic class GetterSetterTester<T> {\n\n    private final Class<T> targetClass;\n\n    private final T target;\n\n    private static final Map<Class<?>, Object> testValues = new HashMap<Class<?>, Object>();\n\n    private static final Set<String> exceptions = new HashSet<String>();\n\n    static {\n        testValues.put(String.class, \"TestString\");\n        testValues.put(Integer.class, 1);\n        testValues.put(Integer.TYPE, 1);\n        testValues.put(Long.class, 2L);\n        testValues.put(Long.TYPE, 2L);\n        testValues.put(Boolean.class, Boolean.TRUE);\n        testValues.put(Boolean.TYPE, Boolean.TRUE);\n        testValues.put(List.class, new ArrayList());\n        testValues.put(Collection.class, new ArrayList());\n        testValues.put(Set.class, new HashSet());\n        testValues.put(Map.class, new HashMap());\n        exceptions.add(\"getClass\");\n    }\n\n    \n    public static <T> GetterSetterTester<T> getInstance(T target) {\n        return new GetterSetterTester(target);\n    }\n    \n    public GetterSetterTester(T target) {\n        this.target = target;\n        targetClass = (Class<T>) target.getClass();\n    }\n    \n    public <ValType> void addTestValue(Pair<Class<ValType>, ? extends ValType> pair) {\n        testValues.put(pair.first, pair.second);\n    }\n    \n    public void addExceptions(String... newExceptions) {\n        for (String exception : newExceptions) {\n            exceptions.add(exception);\n        }\n    }\n    \n    public void testGettersAndSetters() {\n        Method[] methods = targetClass.getMethods();\n        for (Method method : methods) {\n            if (method.getName().startsWith(\"get\")) {\n                if (exceptions.contains(method.getName()))\n                    continue;\n                StringBuilder fieldName = new StringBuilder();\n                fieldName\n                        .append(method.getName().substring(3, 4).toLowerCase());\n                fieldName.append(method.getName().substring(4));\n                Field field;\n                try {\n                    field = targetClass.getDeclaredField(fieldName.toString());\n                } catch (Exception e) {\n                    throw new RuntimeException(\"Failed to access field \"\n                            + targetClass.getName() + \".\" + fieldName, e);\n                }\n                field.setAccessible(true);\n                Object generatedValue = testValues.get(field.getType());\n                if (generatedValue == null) {\n                    try {\n                        generatedValue = field.getType().newInstance();\n                    } catch (Exception e) {\n                        throw new RuntimeException(\n                                \"Failed to autogenerate a value for field: \"\n                                        + targetClass.getName() + \".\"\n                                        + fieldName);\n                    }\n                }\n                try {\n                    field.set(target, generatedValue);\n                } catch (Exception e) {\n                    throw new RuntimeException(\"Failed to set field \"\n                            + targetClass.getName() + \".\" + fieldName);\n                }\n                try {\n                    if (!method.invoke(target).equals(generatedValue)) {\n                        throw new RuntimeException(\n                                \"Getter did not work as expected: \"\n                                        + targetClass.getName() + \".\"\n                                        + method.getName());\n                    }\n                } catch (Exception e) {\n                    throw new RuntimeException(\"Failed to invoke getter \"\n                            + targetClass.getName() + \".\" + method.getName());\n                }\n            }\n        }\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\test\\\\Mock.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "SCS_AnnotationDeclaration": ["Mock"], "SCS_MemberReference": ["FIELD", "RUNTIME"], "CN": [], "CO": ["/**\n * Marks a field as a mock.\n * \n * The field will be mocked with EasyMock.createMock\n * and automatically autowired so it can be used in tests\n * \n * @author Joonas Javanainen\n */"], "CODE": "package fi.hut.soberit.agilefant.test;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n/**\n * Marks a field as a mock.\n * \n * The field will be mocked with EasyMock.createMock\n * and automatically autowired so it can be used in tests\n * \n * @author Joonas Javanainen\n */\n@Target(ElementType.FIELD)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface Mock {\n    boolean strict() default false;\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\test\\\\MockAutowiredAnnotationBeanPostProcessor.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["MockAutowiredAnnotationBeanPostProcessor"], "MN": ["determineRequiredStatus"], "PN": ["annotation"], "CO": ["/**\n * A custom AutowiredAnnotationBeanPostProcessor that ignores the 'required'\n * -attribute in the annotation.\n */"], "CODE": "package fi.hut.soberit.agilefant.test;\n\nimport java.lang.annotation.Annotation;\n\nimport org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor;\n\n/**\n * A custom AutowiredAnnotationBeanPostProcessor that ignores the 'required'\n * -attribute in the annotation.\n */\npublic class MockAutowiredAnnotationBeanPostProcessor extends\n        AutowiredAnnotationBeanPostProcessor {\n\n    @Override\n    protected boolean determineRequiredStatus(Annotation annotation) {\n        return false;\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\test\\\\MockContextLoader.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["MockContextLoader"], "AN": ["mockDefinitions", "mockConstructors", "beanDefinitions"], "SCS_VariableDeclarator": ["mockDefinitions", "mockConstructors", "beanDefinitions", "mockAnnotationBuilder", "beanAnnotationBuilder", "definition", "beanName", "classToMock", "beanDefinition", "definition", "beanName", "beanClass", "beanDefinition", "mockAutowiredProcessor", "field", "mockAnnotation", "beanAnnotation"], "MN": ["registerAnnotationsAsAutowired", "registerMocks", "registerBeans", "customizeContext", "registerAutowiredAnnotationBeanPostProcessor", "isGenerateDefaultLocations", "modifyLocations"], "PN": ["context", "context", "context", "context", "context", "clazz", "locations"], "SCS_VariableDeclaration": ["BeanDefinitionBuilder", "BeanDefinitionBuilder", "Map", "String", "Class", "BeanDefinition", "Map", "String", "Class", "BeanDefinition", "BeanDefinitionBuilder", "Field", "Mock", "TestedBean"], "SCS_ClassReference": ["BeanDefinitionBuilder", "AutowiredAnnotationBeanPostProcessor", "mockAnnotationBuilder", "Mock", "context", "mockAnnotationBuilder", "BeanDefinitionBuilder", "AutowiredAnnotationBeanPostProcessor", "beanAnnotationBuilder", "TestedBean", "context", "beanAnnotationBuilder", "mockDefinitions", "definition", "definition", "BeanDefinitionBuilder", null, "mockConstructors", null, null, "EasyMock", "context", "beanDefinitions", "definition", "definition", "BeanDefinitionBuilder", null, "context", "", "", "", "", "BeanDefinitionBuilder", "MockAutowiredAnnotationBeanPostProcessor", "context", "mockAutowiredProcessor", "clazz", "field", "Mock", "mockDefinitions", "field", "field", "mockAnnotation", "mockConstructors", "field", "mockConstructors", "field", "field", "TestedBean", "beanDefinitions", "field", "field"], "SCS_MethodInvocation": ["genericBeanDefinition", "addPropertyValue", "registerBeanDefinition", "getBeanDefinition", "genericBeanDefinition", "addPropertyValue", "registerBeanDefinition", "getBeanDefinition", "entrySet", "getKey", "getValue", "genericBeanDefinition", "setFactoryMethod", "get", "addConstructorArgValue", "getBeanDefinition", "registerBeanDefinition", "entrySet", "getKey", "getValue", "genericBeanDefinition", "getBeanDefinition", "registerBeanDefinition", "registerAutowiredAnnotationBeanPostProcessor", "registerAnnotationsAsAutowired", "registerMocks", "registerBeans", "genericBeanDefinition", "registerBeanDefinition", "getBeanDefinition", "getDeclaredFields", "getAnnotation", "put", "getName", "getType", "strict", "put", "getName", "put", "getName", "getAnnotation", "put", "getName", "getType"], "SCS_MemberReference": ["beanName", "classToMock", "beanName", "beanDefinition", "beanClass", "beanName", "beanDefinition", "context", "context", "context", "context", "context", "mockAnnotation", "beanAnnotation", "locations"], "CO": ["/**\n * A Spring ContextLoader that makes wiring mocks and real beans easy.\n * \n * @author Joonas Javanainen\n */", "/**\n     * Registers TestedBean and Mock annotations as Autowired annotations\n     * \n     * @param context\n     */", "/**\n     * Registers bean definitions based on all detected mock annotations\n     * @param context\n     */", "/**\n     * Registers bean definitions based on all detected bean annotations\n     * @param context\n     */", "/**\n     * Default XML context configurations are disabled because\n     * usually they are not needed with mock-heavy tests.\n     */", "/**\n     * Detects TestedBean and Mock annotations and collects them for later use.\n     */"], "CODE": "package fi.hut.soberit.agilefant.test;\n\nimport java.lang.reflect.Field;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.easymock.EasyMock;\nimport org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor;\nimport org.springframework.beans.factory.config.BeanDefinition;\nimport org.springframework.beans.factory.support.BeanDefinitionBuilder;\nimport org.springframework.context.support.GenericApplicationContext;\nimport org.springframework.test.context.support.GenericXmlContextLoader;\n\n/**\n * A Spring ContextLoader that makes wiring mocks and real beans easy.\n * \n * @author Joonas Javanainen\n */\npublic class MockContextLoader extends GenericXmlContextLoader {\n\n    private Map<String, Class<?>> mockDefinitions = new HashMap<String, Class<?>>();\n    private Map<String, String> mockConstructors = new HashMap<String, String>();\n    private Map<String, Class<?>> beanDefinitions = new HashMap<String, Class<?>>();\n\n    /**\n     * Registers TestedBean and Mock annotations as Autowired annotations\n     * \n     * @param context\n     */\n    private void registerAnnotationsAsAutowired(\n            GenericApplicationContext context) {\n        BeanDefinitionBuilder mockAnnotationBuilder = BeanDefinitionBuilder\n                .genericBeanDefinition(AutowiredAnnotationBeanPostProcessor.class);\n        mockAnnotationBuilder.addPropertyValue(\"autowiredAnnotationType\", Mock.class);\n        context.registerBeanDefinition(\"mockAutowiredBeanPostProcessor\",\n                mockAnnotationBuilder.getBeanDefinition());\n        \n        BeanDefinitionBuilder beanAnnotationBuilder = BeanDefinitionBuilder\n                .genericBeanDefinition(AutowiredAnnotationBeanPostProcessor.class);\n        beanAnnotationBuilder.addPropertyValue(\"autowiredAnnotationType\", TestedBean.class);\n        context.registerBeanDefinition(\"beanAutowiredBeanPostProcessor\",\n                beanAnnotationBuilder.getBeanDefinition());\n    }\n\n    /**\n     * Registers bean definitions based on all detected mock annotations\n     * @param context\n     */\n    protected void registerMocks(GenericApplicationContext context) {\n        for (Map.Entry<String, Class<?>> definition : mockDefinitions\n                .entrySet()) {\n            String beanName = definition.getKey();\n            Class<?> classToMock = definition.getValue();\n            BeanDefinition beanDefinition = BeanDefinitionBuilder\n                    .genericBeanDefinition(EasyMock.class).setFactoryMethod(\n                            mockConstructors.get(beanName)).addConstructorArgValue(classToMock)\n                    .getBeanDefinition();\n            context.registerBeanDefinition(beanName, beanDefinition);\n        }\n    }\n\n    /**\n     * Registers bean definitions based on all detected bean annotations\n     * @param context\n     */\n    protected void registerBeans(GenericApplicationContext context) {\n        for (Map.Entry<String, Class<?>> definition : beanDefinitions\n                .entrySet()) {\n            String beanName = definition.getKey();\n            Class<?> beanClass = definition.getValue();\n            BeanDefinition beanDefinition = BeanDefinitionBuilder\n                    .genericBeanDefinition(beanClass).getBeanDefinition();\n            context.registerBeanDefinition(beanName, beanDefinition);\n        }\n    }\n\n    @Override\n    protected void customizeContext(GenericApplicationContext context) {\n        registerAutowiredAnnotationBeanPostProcessor(context);\n        registerAnnotationsAsAutowired(context);\n        registerMocks(context);\n        registerBeans(context);\n\n        super.customizeContext(context);\n    }\n\n    private void registerAutowiredAnnotationBeanPostProcessor(\n            GenericApplicationContext context) {\n        BeanDefinitionBuilder mockAutowiredProcessor = BeanDefinitionBuilder.genericBeanDefinition(MockAutowiredAnnotationBeanPostProcessor.class);\n        context.registerBeanDefinition(\"autowiredAnnotationBeanPostProcessor\", mockAutowiredProcessor.getBeanDefinition());\n    }\n\n    /**\n     * Default XML context configurations are disabled because\n     * usually they are not needed with mock-heavy tests.\n     */\n    @Override\n    protected boolean isGenerateDefaultLocations() {\n        return false;\n    }\n\n    /**\n     * Detects TestedBean and Mock annotations and collects them for later use.\n     */\n    public String[] modifyLocations(Class<?> clazz, String... locations) {\n        for (Field field : clazz.getDeclaredFields()) {\n            Mock mockAnnotation = field.getAnnotation(Mock.class);\n            if (mockAnnotation != null) {\n                mockDefinitions.put(field.getName(), field.getType());\n                if(mockAnnotation.strict()) {\n                    mockConstructors.put(field.getName(), \"createStrictMock\");\n                } else {\n                    mockConstructors.put(field.getName(), \"createMock\");\n                }\n            }\n            TestedBean beanAnnotation = field.getAnnotation(TestedBean.class);\n            if (beanAnnotation != null) {\n                beanDefinitions.put(field.getName(), field.getType());\n            }\n        }\n        return locations;\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\test\\\\MockedTestCase.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["MockedTestCase"], "MN": ["setUpMocks", "findMockedFields", "verifyAll", "replayAll", "clearLoggedInUser", "setAuthentication", "getAuthentication", "setCurrentUser", "setAuthentication", "getAuthentication", "getName", "setAuthenticated", "isAuthenticated", "getPrincipal", "getDetails", "getCredentials", "getAuthorities"], "PN": ["arg0", "user", "arg0", "arg0"], "SCS_VariableDeclaration": ["List", "Field", "boolean", "Object", "Object", "AgilefantUserDetails"], "SCS_VariableDeclarator": ["mocks", "field", "access", "obj", "obj", "ud"], "SCS_ClassReference": [null, null, "field", "Mock", "field", "field", "mocks", "field", "Assert", "field", null, "EasyMock", null, "EasyMock", "SecurityUtil", "SecurityContextHolder", "SecurityUtil", "SecurityContextHolder"], "SCS_MethodInvocation": ["getClass", "getDeclaredFields", "isAnnotationPresent", "isAccessible", "setAccessible", "add", "get", "fail", "setAccessible", "findMockedFields", "verify", "findMockedFields", "replay", "setLoggedUser", "setContext", "setLoggedUser", "setContext"], "SCS_MemberReference": ["access", "mocks", "obj", "obj", "user", "user", "ud"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.test;\n\nimport java.lang.reflect.Field;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.easymock.EasyMock;\nimport org.junit.After;\nimport org.junit.Assert;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.GrantedAuthority;\nimport org.springframework.security.core.context.SecurityContext;\nimport org.springframework.security.core.context.SecurityContextHolder;\n\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.security.AgilefantUserDetails;\nimport fi.hut.soberit.agilefant.security.SecurityUtil;\n\npublic class MockedTestCase {\n\n    public void setUpMocks() {\n\n    }\n\n    protected List<Object> findMockedFields() {\n        List<Object> mocks = new ArrayList<Object>();\n        for (Field field : this.getClass().getDeclaredFields()) {\n            if (field.isAnnotationPresent(Mock.class)) {\n                boolean access = field.isAccessible();\n                try {\n                    field.setAccessible(true);\n                    mocks.add(field.get(this));\n                } catch (Exception e) {\n                    Assert.fail(\"Mock test runner failed\");\n                } finally {\n                    field.setAccessible(access);\n                }\n            }\n        }\n        return mocks;\n    }\n\n    protected void verifyAll() {\n        for (Object obj : this.findMockedFields()) {\n            EasyMock.verify(obj);\n        }\n    }\n\n    protected void replayAll() {\n        for (Object obj : this.findMockedFields()) {\n            EasyMock.replay(obj);\n        }\n    }\n    \n    @After\n    @SuppressWarnings(\"serial\")\n    public void clearLoggedInUser() {\n        SecurityUtil.setLoggedUser(null);\n        SecurityContextHolder.setContext(new SecurityContext() {\n            public void setAuthentication(Authentication arg0) {\n            }      \n            public Authentication getAuthentication() {\n                return null;\n            }\n        });\n    }\n\n    @SuppressWarnings(\"serial\")\n    protected void setCurrentUser(User user) {\n        SecurityUtil.setLoggedUser(user);\n        final AgilefantUserDetails ud = new AgilefantUserDetails(user);\n        SecurityContextHolder.setContext(new SecurityContext() {\n            public void setAuthentication(Authentication arg0) {\n            }      \n            public Authentication getAuthentication() {\n                return new Authentication() {\n\n                    public String getName() {\n                        return null;\n                    }\n\n                    public void setAuthenticated(boolean arg0)\n                            throws IllegalArgumentException {\n                    }\n\n                    public boolean isAuthenticated() {\n                        return false;\n                    }\n\n                    public Object getPrincipal() {\n                        return null;\n                    }\n\n                    public Object getDetails() {\n                        return ud;\n                    }\n\n                    public Object getCredentials() {\n                        return null;\n                    }\n\n                    public List<? extends GrantedAuthority> getAuthorities() {\n                        return null;\n                    }\n                };\n            }\n        });\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\test\\\\SampleDAO.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["SampleDAO"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.test;\n\nimport fi.hut.soberit.agilefant.db.GenericDAO;\n\npublic interface SampleDAO extends GenericDAO<SampleEntity> {\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\test\\\\SampleDAOHibernate.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["SampleDAOHibernate"], "SCS_ConstructorDeclaration": ["SampleDAOHibernate"], "SCS_ClassReference": ["SampleEntity"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.test;\n\nimport fi.hut.soberit.agilefant.db.hibernate.GenericDAOHibernate;\n\npublic class SampleDAOHibernate extends GenericDAOHibernate<SampleEntity>\n        implements SampleDAO {\n\n    public SampleDAOHibernate() {\n        super(SampleEntity.class);\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\test\\\\SampleEntity.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["SampleEntity"], "AN": ["id", "name"], "SCS_VariableDeclarator": ["id", "name"], "MN": ["setName", "getName", "getId", "setId"], "PN": ["name", "id"], "SCS_MemberReference": ["name", "name", "name", "id", "id", "id"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.test;\n\nimport javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.Id;\nimport javax.persistence.Table;\n\n@Entity\n@Table(name = \"samples\")\npublic class SampleEntity {\n\n    private int id;\n\n    private String name;\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    @Id\n    @GeneratedValue\n    public int getId() {\n        return id;\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\test\\\\SpringAssertions.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["SpringAssertions"], "MN": ["assertNoScopeAnnotation", "assertScopeAnnotation"], "PN": ["clazz", "scope", "clazz"], "SCS_VariableDeclaration": ["Scope", "Scope"], "SCS_VariableDeclarator": ["scopeAnnotation", "scopeAnnotation"], "SCS_ClassReference": ["clazz", "Scope", "", "clazz", "Scope", "", "", "scopeAnnotation"], "SCS_MethodInvocation": ["getAnnotation", "assertNull", "getAnnotation", "assertNotNull", "assertEquals", "value"], "SCS_MemberReference": ["scopeAnnotation", "scopeAnnotation", "scope"], "SCS_ConstructorDeclaration": ["SpringAssertions"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.test;\n\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNull;\n\nimport javax.transaction.NotSupportedException;\n\nimport org.springframework.context.annotation.Scope;\n\npublic final class SpringAssertions {\n\n    public static void assertNoScopeAnnotation(Class<?> clazz) {\n        Scope scopeAnnotation = clazz.getAnnotation(Scope.class);\n        assertNull(scopeAnnotation);\n    }\n\n    public static void assertScopeAnnotation(String scope, Class<?> clazz) {\n        Scope scopeAnnotation = clazz.getAnnotation(Scope.class);\n        assertNotNull(scopeAnnotation);\n        assertEquals(scope, scopeAnnotation.value());\n    }\n\n    private SpringAssertions() throws NotSupportedException {\n        throw new NotSupportedException(\"Utility class constructor called\");\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\test\\\\TestedBean.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "SCS_AnnotationDeclaration": ["TestedBean"], "SCS_MemberReference": ["FIELD", "RUNTIME"], "CN": [], "CO": ["/**\n * Marks a field as a real bean that is intended to be tested.\n * \n * Adds a default Spring bean definition of the field's type into\n * the test context and automatically autowires the instantiated\n * bean so it can be used in tests.\n * \n * @author Joonas Javanainen\n */"], "CODE": "package fi.hut.soberit.agilefant.test;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n/**\n * Marks a field as a real bean that is intended to be tested.\n * \n * Adds a default Spring bean definition of the field's type into\n * the test context and automatically autowires the instantiated\n * bean so it can be used in tests.\n * \n * @author Joonas Javanainen\n */\n@Target(ElementType.FIELD)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface TestedBean {\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\util\\\\BacklogConverterTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["BacklogConverterTest"], "AN": ["testable", "backlogBusiness", "backlog"], "SCS_VariableDeclarator": ["testable", "backlogBusiness", "backlog", "returned", "str"], "MN": ["setUp", "replayAll", "verifyAll", "testConvertFromString_withValidId", "testConvertFromString_invalidId", "testConvertFromString_notFound", "testConvertToString"], "PN": [], "SCS_MemberReference": ["testable", "backlogBusiness", "backlog", "backlogBusiness", "backlogBusiness", "backlogBusiness", "backlog", "backlog", "returned", "backlog", "str"], "SCS_ClassReference": ["", "BacklogBusiness", "backlog", "testable", "", "", "", null, "backlogBusiness", "", "testable", "Backlog", "", "", "NumberFormatException", "testable", "Backlog", "ObjectNotFoundException", "", null, "backlogBusiness", "", "testable", "Backlog", "testable", "", "backlog"], "SCS_MethodInvocation": ["createStrictMock", "setId", "setBacklogBusiness", "replay", "verify", "expect", "andReturn", "retrieve", "replayAll", "convertFromString", "verifyAll", "assertSame", "convertFromString", "expect", "andThrow", "retrieve", "replayAll", "convertFromString", "convertToString", "assertEquals", "toString"], "SCS_VariableDeclaration": ["Backlog", "String"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.util;\n\nimport static org.easymock.EasyMock.*;\nimport static org.junit.Assert.*;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport fi.hut.soberit.agilefant.business.BacklogBusiness;\nimport fi.hut.soberit.agilefant.exception.ObjectNotFoundException;\nimport fi.hut.soberit.agilefant.model.Backlog;\nimport fi.hut.soberit.agilefant.model.Product;\n\npublic class BacklogConverterTest {\n    BacklogConverter testable;\n    BacklogBusiness backlogBusiness;\n    private Backlog backlog;\n    \n    @Before\n    public void setUp() {\n        testable = new BacklogConverter();\n        backlogBusiness = createStrictMock(BacklogBusiness.class);\n        \n        backlog = new Product();\n        backlog.setId(5);\n        \n        testable.setBacklogBusiness(backlogBusiness);\n    }\n    \n    private void replayAll() {\n        replay(backlogBusiness);\n    }\n\n    private void verifyAll() {\n        verify(backlogBusiness);\n    }\n    \n    @Test\n    public void testConvertFromString_withValidId() {\n        expect(backlogBusiness.retrieve(5)).andReturn(backlog);\n        replayAll();\n        Backlog returned = (Backlog)testable.convertFromString(null, new String[] { \"5\" }, Backlog.class);\n        \n        verifyAll();\n        assertSame(backlog, returned);\n    }\n\n    @Test(expected = NumberFormatException.class)\n    public void testConvertFromString_invalidId() {\n        testable.convertFromString(null, new String[] { \"5sadf\u00c3\u00b6wq3rio\" }, Backlog.class);\n    }\n\n    @Test(expected = ObjectNotFoundException.class)\n    public void testConvertFromString_notFound() {\n        expect(backlogBusiness.retrieve(5)).andThrow(new ObjectNotFoundException());\n        replayAll();\n        testable.convertFromString(null, new String[] { \"5\" }, Backlog.class);\n    }\n    \n    @Test\n    public void testConvertToString() {\n        String str = testable.convertToString(null, backlog);\n        assertEquals(str, backlog.toString());\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\util\\\\BeanCopierTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["BeanCopierTest", "A", "B"], "MN": ["testCopyFields", "testCopyFields_toInherited", "testCopyFields_nullCollection", "getFoo", "setFoo", "setEe", "getEe", "setColl", "getColl", "getBar", "setBar"], "PN": ["foo", "ee", "coll", "bar"], "SCS_VariableDeclaration": ["A", "A", "A", "B", "A", "A"], "SCS_VariableDeclarator": ["source", "dest", "source", "dest", "source", "dest", "foo", "ee", "coll", "bar"], "SCS_ClassReference": ["source", "source", "source", "Arrays", "BeanCopier", "", "dest", null, "source", null, "source", "", "dest", "", "source", "", "dest", null, null, "source", "dest", "BeanCopier", "source", "", "dest", "", "source", "", "dest", "source", "dest", "BeanCopier", "", "dest"], "SCS_MethodInvocation": ["setFoo", "setEe", "setColl", "asList", "copy", "assertEquals", "getColl", "size", "getColl", "add", "setFoo", "assertEquals", "getFoo", "assertEquals", "getFoo", "assertEquals", "getEe", "getMinorUnits", "longValue", "setFoo", "setBar", "copy", "setFoo", "assertEquals", "getFoo", "assertEquals", "getFoo", "assertEquals", "getBar", "setColl", "setColl", "copy", "assertNull", "getColl"], "SCS_MemberReference": ["source", "dest", "source", "dest", "source", "dest", "foo", "foo", "foo", "ee", "ee", "ee", "coll", "coll", "coll", "bar", "bar", "bar"], "AN": ["foo", "ee", "coll", "bar"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.util;\n\nimport static org.junit.Assert.*;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\n\nimport org.junit.Test;\n\nimport fi.hut.soberit.agilefant.model.ExactEstimate;\n\npublic class BeanCopierTest {\n\n    @Test\n    public void testCopyFields() {\n        A source = new A();\n        source.setFoo(\"Hello\");\n        source.setEe(new ExactEstimate(200L));\n        source.setColl(new ArrayList<Integer>(Arrays.asList(123, 222, 433)));\n        A dest = new A();\n        \n        BeanCopier.copy(source, dest);\n        \n        assertEquals(3, dest.getColl().size());\n        source.getColl().add(1986);\n        source.setFoo(\"Bar\");\n        \n        assertEquals(\"Hello\", dest.getFoo());\n        assertEquals(\"Bar\", source.getFoo());\n        assertEquals(200L, dest.getEe().getMinorUnits().longValue());\n    }\n    \n    @Test\n    public void testCopyFields_toInherited() {\n        A source = new A();\n        source.setFoo(\"Hello\");\n        B dest = new B();\n        dest.setBar(123);\n        \n        BeanCopier.copy(source, dest);\n        \n        source.setFoo(\"Bar\");\n        \n        assertEquals(\"Hello\", dest.getFoo());\n        assertEquals(\"Bar\", source.getFoo());\n        assertEquals(new Integer(123), dest.getBar());\n    }\n    \n    @Test\n    public void testCopyFields_nullCollection() {\n        A source = new A();\n        source.setColl(null);\n        A dest = new A();\n        dest.setColl(new ArrayList<Integer>());\n        \n        BeanCopier.copy(source, dest);\n        \n        assertNull(dest.getColl());\n    }\n    \n    \n    class A {\n        private String foo;\n        private ExactEstimate ee;\n        private Collection<Integer> coll;\n        \n        public String getFoo() {\n            return foo;\n        }\n        \n        public void setFoo(String foo) {\n            this.foo = foo;\n        }\n\n        public void setEe(ExactEstimate ee) {\n            this.ee = ee;\n        }\n\n        public ExactEstimate getEe() {\n            return ee;\n        }\n\n        public void setColl(Collection<Integer> coll) {\n            this.coll = coll;\n        }\n\n        public Collection<Integer> getColl() {\n            return coll;\n        }\n\n    }\n    \n    class B extends A {\n        private Integer bar;\n        \n        public Integer getBar() {\n            return bar;\n        }\n        \n        public void setBar(Integer bar) {\n            this.bar = bar;\n        }\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\util\\\\DateTimeUtilsTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["DateTimeUtilsTest"], "MN": ["testRoundToNearestMidnight_millisecondBeforeNoon", "testRoundToNearestMidnight_noon", "testRoundToNearestMidnight_millisecondAfterNoon", "testRoundToNearestMidnight_millisecondBeforeMidnight", "testRoundToNearestMidnight_midnight", "testRoundToNearestMidnight_millisecondAfterMidnight", "testRoundToNearestMidnight_null", "assertDateEquals"], "PN": ["original", "year", "month", "day", "hour", "minutes", "seconds", "millis"], "SCS_VariableDeclaration": ["DateTime", "DateTime", "DateTime", "DateTime", "DateTime", "DateTime", "DateTime"], "SCS_VariableDeclarator": ["original", "original", "original", "original", "original", "original", "actual"], "SCS_ClassReference": ["", "", "", "", "", "", "", "DateTimeUtils", "DateTimeUtils", "", "actual", "", "actual", "", "actual", "", "actual", "", "actual", "", "actual", "", "actual"], "SCS_MethodInvocation": ["assertDateEquals", "assertDateEquals", "assertDateEquals", "assertDateEquals", "assertDateEquals", "assertDateEquals", "assertNull", "roundToNearestMidnight", "roundToNearestMidnight", "assertEquals", "getYear", "assertEquals", "getMonthOfYear", "assertEquals", "getDayOfMonth", "assertEquals", "getHourOfDay", "assertEquals", "getMinuteOfHour", "assertEquals", "getSecondOfMinute", "assertEquals", "getMillisOfSecond"], "SCS_MemberReference": ["original", "original", "original", "original", "original", "original", "original", "year", "month", "day", "hour", "minutes", "seconds", "millis"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.util;\n\nimport org.joda.time.DateTime;\nimport org.junit.Test;\n\nimport static org.junit.Assert.*;\n\npublic class DateTimeUtilsTest {\n\n    @Test\n    public void testRoundToNearestMidnight_millisecondBeforeNoon() {\n        DateTime original = new DateTime(2010, 02, 05, 11, 59, 59, 999);\n        assertDateEquals(original, 2010, 2, 5, 0, 0, 0, 0);\n    }\n    \n    @Test\n    public void testRoundToNearestMidnight_noon() {\n        DateTime original = new DateTime(2010, 02, 05, 12, 0, 0, 0);\n        assertDateEquals(original, 2010, 2, 6, 0, 0, 0, 0);\n    }\n    \n    @Test\n    public void testRoundToNearestMidnight_millisecondAfterNoon() {\n        DateTime original = new DateTime(2010, 02, 05, 12, 0, 0, 1);\n        assertDateEquals(original, 2010, 2, 6, 0, 0, 0, 0);\n    }\n    \n    @Test\n    public void testRoundToNearestMidnight_millisecondBeforeMidnight() {\n        DateTime original = new DateTime(2010, 02, 05, 23, 59, 59, 999);\n        assertDateEquals(original, 2010, 2, 6, 0, 0, 0, 0);\n    }\n    \n    @Test\n    public void testRoundToNearestMidnight_midnight() {\n        DateTime original = new DateTime(2010, 02, 06, 0, 0, 0, 0);\n        assertDateEquals(original, 2010, 2, 6, 0, 0, 0, 0);\n    }\n    \n    @Test\n    public void testRoundToNearestMidnight_millisecondAfterMidnight() {\n        DateTime original = new DateTime(2010, 2, 6, 0, 0, 0, 1);\n        assertDateEquals(original, 2010, 2, 6, 0, 0, 0, 0);\n    }\n    \n    @Test\n    public void testRoundToNearestMidnight_null() {\n        assertNull(DateTimeUtils.roundToNearestMidnight(null));\n    }\n\n    \n    private void assertDateEquals(DateTime original, int year, int month,\n            int day, int hour, int minutes, int seconds, int millis) {\n        DateTime actual = DateTimeUtils.roundToNearestMidnight(original);\n        assertEquals(year, actual.getYear());\n        assertEquals(month, actual.getMonthOfYear());\n        assertEquals(day, actual.getDayOfMonth());\n        assertEquals(hour, actual.getHourOfDay());\n        assertEquals(minutes, actual.getMinuteOfHour());\n        assertEquals(seconds, actual.getSecondOfMinute());\n        assertEquals(millis, actual.getMillisOfSecond());\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\util\\\\ExactEstimateUtilsTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["ExactEstimateUtilsTest"], "MN": ["testConvertFromString", "testConvertSignedFromString", "testValidHours", "testValidHoursWithWhitespace", "testValidHoursWithDecimalsAsComma", "testValidHoursWithDecimalsAsPeriod", "testValidMinutes", "testValidHoursAndMinutes", "testValidHoursAndMinutesWithWhitespace", "testWithoutUnit", "testWithoutMinuteUnit", "testWithoutSignedMinuteUnit"], "PN": ["expected", "input", "expected", "input"], "SCS_ClassReference": ["", "ExactEstimateUtils", null, null, "", "ExactEstimateUtils", null, null, "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "ExactEstimateUtils", null, null, "IllegalArgumentException", "ExactEstimateUtils", null, "IllegalArgumentException", "ExactEstimateUtils", null], "SCS_MethodInvocation": ["assertEquals", "convertFromString", "getMinorUnits", "longValue", "assertEquals", "convertSignedFromString", "getMinorUnits", "longValue", "testConvertFromString", "testConvertSignedFromString", "testConvertFromString", "testConvertSignedFromString", "testConvertFromString", "testConvertSignedFromString", "testConvertFromString", "testConvertSignedFromString", "testConvertFromString", "testConvertSignedFromString", "testConvertFromString", "testConvertSignedFromString", "testConvertFromString", "testConvertSignedFromString", "testConvertFromString", "testConvertSignedFromString", "assertEquals", "convertFromString", "getMinorUnits", "longValue", "convertFromString", "getMinorUnits", "convertSignedFromString", "getMinorUnits"], "SCS_MemberReference": ["expected", "input", "expected", "input"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.util;\n\nimport static org.junit.Assert.*;\n\nimport org.junit.Test;\n\npublic class ExactEstimateUtilsTest {\n\n    private void testConvertFromString(long expected, String input) {\n        assertEquals(expected, ExactEstimateUtils.convertFromString(input)\n                .getMinorUnits().longValue());\n    }\n    \n    private void testConvertSignedFromString(long expected, String input) {\n        assertEquals(expected, ExactEstimateUtils.convertSignedFromString(input)\n                .getMinorUnits().longValue());\n    }\n    @Test\n    public void testValidHours() {\n        testConvertFromString(60L, \"1h\");\n        testConvertSignedFromString(-60L, \"-1h\");\n    }\n\n    @Test\n    public void testValidHoursWithWhitespace() {\n        testConvertFromString(60L, \"  1h   \");\n        testConvertSignedFromString(-60L, \"  -1h   \");\n    }\n\n    @Test\n    public void testValidHoursWithDecimalsAsComma() {\n        testConvertFromString(90L, \"1,5h\");\n        testConvertSignedFromString(-90L, \"-1,5h\");\n    }\n\n    @Test\n    public void testValidHoursWithDecimalsAsPeriod() {\n        testConvertFromString(90L, \"1.5h\");\n        testConvertSignedFromString(-90L, \"-1.5h\");\n    }\n\n    @Test\n    public void testValidMinutes() {\n        testConvertFromString(15L, \"15min\");\n        testConvertSignedFromString(-15L, \"-15min\");\n    }\n\n    @Test\n    public void testValidHoursAndMinutes() {\n        testConvertFromString(105L, \"1.5h15min\");\n        testConvertSignedFromString(-105L, \"-1.5h15min\");\n    }\n\n    @Test\n    public void testValidHoursAndMinutesWithWhitespace() {\n        testConvertFromString(105L, \"   1.5h   15min        \");\n        testConvertSignedFromString(-105L, \"   -1.5h   15min        \");\n    }\n\n    @Test\n    public void testWithoutUnit() {\n        testConvertFromString(60L, \"1\");\n        testConvertSignedFromString(-60L, \"-1\");\n        assertEquals(60L, ExactEstimateUtils.convertFromString(\"1\").getMinorUnits().longValue());\n    }\n\n    @Test(expected = IllegalArgumentException.class)\n    public void testWithoutMinuteUnit() {\n        ExactEstimateUtils.convertFromString(\"1h 15\").getMinorUnits();\n    }\n    \n    @Test(expected = IllegalArgumentException.class)\n    public void testWithoutSignedMinuteUnit() {\n        ExactEstimateUtils.convertSignedFromString(\"-1h 15\").getMinorUnits();\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\util\\\\MinorUnitsParserTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["MinorUnitsParserTest"], "AN": ["mup"], "SCS_VariableDeclarator": ["mup", "actual", "actual", "actual", "actual", "actual", "actual"], "MN": ["testParseLongValue", "testParseHourValue", "testParseHourValueWithDecimals", "testParseHourValueWithDecimalsAndMajorUnits", "testConvertFromWholeString", "testConvertOnlyMinors"], "PN": [], "SCS_VariableDeclaration": ["long", "long", "long", "long", "long", "long"], "SCS_ClassReference": ["mup", "", "mup", "", "mup", "", "mup", "", "mup", "", "mup", "", "mup", ""], "SCS_MethodInvocation": ["convertFromString", "assertEquals", "convertFromString", "assertEquals", "convertFromString", "assertEquals", "convertFromString", "assertEquals", "convertFromString", "assertEquals", "convertFromString", "assertEquals", "convertFromString", "assertEquals"], "SCS_MemberReference": ["actual", "actual", "actual", "actual", "actual", "actual", "actual", "actual"], "CO": ["/**\n     * Set up to hours and minutes\n     */", "/**\n     * Should convert 2 -> 2h\n     */", "/**\n     * Should convert 2h -> 2h\n     */", "/**\n     * Should convert 2.5 -> 2h 30min\n     * Should convert 1,75 -> 1h 45min\n     */", "//        actual = mup.convertFromString(\"1,75\");", "//        assertEquals(105, actual);", "/**\n     * Should convert 2.5h -> 2h 30min\n     * Should convert 3,5h -> 3h 30min\n     */", "/**\n     * Should convert 2h 10min -> 2h 10min\n     */", "/**\n     * Should convert 15min -> 15min\n     */"], "CODE": "package fi.hut.soberit.agilefant.util;\n\nimport static org.junit.Assert.*;\n\nimport org.junit.Test;\n\npublic class MinorUnitsParserTest {\n\n    /**\n     * Set up to hours and minutes\n     */\n    MinorUnitsParser mup = new MinorUnitsParser(\"h\", \"min\", 60);\n    \n    @Test\n    /**\n     * Should convert 2 -> 2h\n     */\n    public void testParseLongValue() {\n       long actual = mup.convertFromString(\"2\");\n       assertEquals(120, actual);\n    }\n    \n    @Test\n    /**\n     * Should convert 2h -> 2h\n     */\n    public void testParseHourValue() {\n        long actual = mup.convertFromString(\"2h\");\n        assertEquals(120, actual); \n    }\n    \n    @Test\n    /**\n     * Should convert 2.5 -> 2h 30min\n     * Should convert 1,75 -> 1h 45min\n     */\n    public void testParseHourValueWithDecimals() {\n        long actual = mup.convertFromString(\"2.5\");\n        assertEquals(150, actual);\n        \n//        actual = mup.convertFromString(\"1,75\");\n//        assertEquals(105, actual);\n    }\n    \n    @Test\n    /**\n     * Should convert 2.5h -> 2h 30min\n     * Should convert 3,5h -> 3h 30min\n     */\n    public void testParseHourValueWithDecimalsAndMajorUnits() {\n        long actual = mup.convertFromString(\"2.5h\");\n        assertEquals(150, actual);\n        \n        actual = mup.convertFromString(\"3,5h\");\n        assertEquals(210, actual);\n    }\n    \n    @Test\n    /**\n     * Should convert 2h 10min -> 2h 10min\n     */\n    public void testConvertFromWholeString() {\n        long actual = mup.convertFromString(\"2h 10min\");\n        assertEquals(130, actual);\n    }\n    \n    @Test\n    /**\n     * Should convert 15min -> 15min\n     */\n    public void testConvertOnlyMinors() {\n        long actual = mup.convertFromString(\"15min\");\n        assertEquals(15, actual);\n    }\n    \n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\util\\\\NamedObjectComparatorTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["NamedObjectComparatorTest", "ObjectWithName"], "AN": ["comparator", "name"], "SCS_VariableDeclarator": ["comparator", "name", "withName", "withName", "nameA", "nameB"], "SCS_ConstructorDeclaration": ["ObjectWithName"], "SCS_MemberReference": ["name", "name", "name", "comparator", "withName", "withName", "withName", "withName", "nameA", "nameB"], "MN": ["getName", "getId", "setUp", "compare_nulls", "compare_oneNull", "compare_equal", "compare_notEqual"], "PN": [], "SCS_ClassReference": ["", "comparator", "", "comparator", "", "comparator", "", "comparator", "", "comparator"], "SCS_MethodInvocation": ["assertEquals", "compare", "assertEquals", "compare", "assertEquals", "compare", "assertEquals", "compare", "assertEquals", "compare"], "SCS_VariableDeclaration": ["ObjectWithName", "ObjectWithName", "ObjectWithName", "ObjectWithName"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.util;\n\nimport static org.junit.Assert.*;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport fi.hut.soberit.agilefant.model.NamedObject;\n\npublic class NamedObjectComparatorTest {\n\n    private NamedObjectComparator comparator;\n    private class ObjectWithName implements NamedObject {\n        private String name;\n        public ObjectWithName(String name) {\n            this.name = name;\n        }\n        public String getName() {\n            return name;\n        }\n        \n        public int getId() {\n            return 1;\n        }\n    }\n    \n    @Before\n    public void setUp() {\n        comparator = new NamedObjectComparator();\n    }\n    \n    @Test\n    public void compare_nulls() {\n        assertEquals(0, comparator.compare(null, null));\n    }\n    \n    @Test\n    public void compare_oneNull() {\n        ObjectWithName withName = new ObjectWithName(\"aaaaaa\");\n        assertEquals(-1, comparator.compare(null, withName));\n        assertEquals(1, comparator.compare(withName, null));\n    }\n    \n    @Test\n    public void compare_equal() {\n        ObjectWithName withName = new ObjectWithName(\"aaaaaa\");\n        assertEquals(0, comparator.compare(withName, withName));\n    }\n    \n    @Test\n    public void compare_notEqual() {\n        ObjectWithName nameA = new ObjectWithName(\"aaaaaa\");\n        ObjectWithName nameB = new ObjectWithName(\"bbbbbb\");\n        assertEquals(-1, comparator.compare(nameA, nameB));\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\util\\\\StoryTreeIntegrityUtilsTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["StoryTreeIntegrityUtilsTest"], "AN": ["fatalError", "nonFatalError"], "SCS_VariableDeclarator": ["fatalError", "nonFatalError", "source", "target", "list", "list"], "MN": ["setUp", "testGetFatalMessages", "testGetFatalMessages_noFatals"], "PN": [], "SCS_VariableDeclaration": ["Story", "Story", "List", "List"], "SCS_ClassReference": ["source", "target", "Arrays", "StoryTreeIntegrityUtils", "", "list", "", "list", "Arrays", "StoryTreeIntegrityUtils", "", "list", "", "list"], "SCS_MethodInvocation": ["setName", "setName", "asList", "getFatalMessages", "assertEquals", "size", "assertTrue", "contains", "asList", "getFatalMessages", "assertEquals", "size", "assertFalse", "contains"], "SCS_MemberReference": ["fatalError", "source", "target", "TARGET_PARENT_DEEPER_IN_HIERARCHY", "nonFatalError", "source", "target", "CHILD_IN_WRONG_BRANCH", "fatalError", "nonFatalError", "list", "fatalError", "nonFatalError", "nonFatalError", "list", "fatalError"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.util;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport fi.hut.soberit.agilefant.model.Story;\n\nimport static org.junit.Assert.*;\n\npublic class StoryTreeIntegrityUtilsTest {\n\n    StoryTreeIntegrityMessage fatalError;\n    StoryTreeIntegrityMessage nonFatalError;\n    \n    @Before\n    public void setUp() {\n        Story source = new Story();\n        source.setName(\"Source\");\n        Story target = new Story();\n        target.setName(\"Target\");\n        \n        fatalError = new StoryTreeIntegrityMessage(source, target,\n                StoryHierarchyIntegrityViolationType.TARGET_PARENT_DEEPER_IN_HIERARCHY);\n        \n        nonFatalError = new StoryTreeIntegrityMessage(source, target,\n                StoryHierarchyIntegrityViolationType.CHILD_IN_WRONG_BRANCH);\n    }\n    \n    @Test\n    public void testGetFatalMessages() {\n        List<StoryTreeIntegrityMessage> list = new ArrayList<StoryTreeIntegrityMessage>(\n                Arrays.asList(fatalError, nonFatalError));\n        StoryTreeIntegrityUtils.getFatalMessages(list);\n        \n        assertEquals(1, list.size());\n        assertTrue(list.contains(fatalError));\n    }\n    \n    @Test\n    public void testGetFatalMessages_noFatals() {\n        List<StoryTreeIntegrityMessage> list = new ArrayList<StoryTreeIntegrityMessage>(\n                Arrays.asList(nonFatalError, nonFatalError));\n        StoryTreeIntegrityUtils.getFatalMessages(list);\n        \n        assertEquals(2, list.size());\n        assertFalse(list.contains(fatalError));\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\util\\\\TimesheetDataTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["TimesheetDataTest"], "AN": ["backlogEntry1", "backlogEntry2", "storyEntry1", "storyEntry2", "taskEntry1", "taskEntry2", "tsData"], "SCS_VariableDeclarator": ["backlogEntry1", "backlogEntry2", "storyEntry1", "storyEntry2", "taskEntry1", "taskEntry2", "tsData", "backlog", "story", "task", "node", "node", "node", "node", "node", "node", "node", "node", "node"], "MN": ["resetTsData", "testAddBacklogEntry_newBacklog", "testAddBacklogEntry_existingBacklog", "testAddStoryEntry_newStory", "testAddStoryEntry_existingStory", "testAddTaskEntry_newTask", "testAddTaskEntry_existingTask", "addNode_Backlog", "addNode_Story", "addNode_Task"], "PN": [], "SCS_VariableDeclaration": ["Backlog", "Story", "Task", "TimesheetNode", "TimesheetNode", "TimesheetNode", "TimesheetNode", "TimesheetNode", "TimesheetNode", "BacklogTimesheetNode", "StoryTimesheetNode", "TaskTimesheetNode"], "SCS_ClassReference": ["backlog", "story", "task", null, null, null, null, null, null, null, null, "", "", "node", null, null, null, null, "", "", "node", null, null, null, "", "", "node", null, null, null, null, "", "", "node", null, null, null, "", "", "node", null, null, null, null, "", "", "node", null, null, null, "", null, null, null, "", null, null, null, "", null], "SCS_MethodInvocation": ["setId", "setId", "setId", "setBacklog", "setBacklog", "setStory", "setStory", "setTask", "setTask", "addEntry", "getBacklogNode", "assertNotNull", "assertEquals", "getHourEntries", "size", "addEntry", "addEntry", "getBacklogNode", "assertNotNull", "assertEquals", "getHourEntries", "size", "addEntry", "getStoryNode", "assertNotNull", "assertEquals", "getHourEntries", "size", "addEntry", "addEntry", "getStoryNode", "assertNotNull", "assertEquals", "getHourEntries", "size", "addEntry", "getTaskNode", "assertNotNull", "assertEquals", "getHourEntries", "size", "addEntry", "addEntry", "getTaskNode", "assertNotNull", "assertEquals", "getHourEntries", "size", "getBacklog", "addNode", "assertNotNull", "getBacklogNode", "getStory", "addNode", "assertNotNull", "getStoryNode", "getTask", "addNode", "assertNotNull", "getTaskNode"], "SCS_MemberReference": ["backlogEntry1", "backlog", "backlogEntry2", "backlog", "storyEntry1", "story", "storyEntry2", "story", "taskEntry1", "task", "taskEntry2", "task", "tsData", "tsData", "backlogEntry1", "tsData", "node", "tsData", "backlogEntry1", "tsData", "backlogEntry2", "tsData", "node", "tsData", "storyEntry1", "tsData", "node", "tsData", "storyEntry1", "tsData", "storyEntry2", "tsData", "node", "tsData", "taskEntry1", "tsData", "node", "tsData", "taskEntry1", "tsData", "taskEntry2", "tsData", "node", "backlogEntry1", "tsData", "node", "tsData", "storyEntry1", "tsData", "node", "tsData", "taskEntry1", "tsData", "node", "tsData"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.util;\n\nimport static org.junit.Assert.*;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport fi.hut.soberit.agilefant.model.Backlog;\nimport fi.hut.soberit.agilefant.model.BacklogHourEntry;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.StoryHourEntry;\nimport fi.hut.soberit.agilefant.model.Task;\nimport fi.hut.soberit.agilefant.model.TaskHourEntry;\nimport fi.hut.soberit.agilefant.transfer.BacklogTimesheetNode;\nimport fi.hut.soberit.agilefant.transfer.StoryTimesheetNode;\nimport fi.hut.soberit.agilefant.transfer.TaskTimesheetNode;\n\npublic class TimesheetDataTest {\n\n    private BacklogHourEntry backlogEntry1 = new BacklogHourEntry();\n    private BacklogHourEntry backlogEntry2 = new BacklogHourEntry();\n    \n    private StoryHourEntry storyEntry1 = new StoryHourEntry();\n    private StoryHourEntry storyEntry2 = new StoryHourEntry();;\n    \n    private TaskHourEntry taskEntry1 = new TaskHourEntry();\n    private TaskHourEntry taskEntry2 = new TaskHourEntry();\n    \n    private TimesheetData tsData;\n    \n    @Before\n    public void resetTsData() {\n        Backlog backlog = new Iteration();\n        Story story = new Story();\n        Task task = new Task();\n        \n        backlog.setId(1);\n        story.setId(1);\n        task.setId(1);\n        \n        this.backlogEntry1.setBacklog(backlog);\n        this.backlogEntry2.setBacklog(backlog);\n        this.storyEntry1.setStory(story);\n        this.storyEntry2.setStory(story);\n        this.taskEntry1.setTask(task);\n        this.taskEntry2.setTask(task);\n        this.tsData = new TimesheetData();\n    }\n    \n    @Test\n    public void testAddBacklogEntry_newBacklog() {\n        this.tsData.addEntry(this.backlogEntry1);\n        TimesheetNode node = this.tsData.getBacklogNode(1);\n        assertNotNull(node);\n        assertEquals(1, node.getHourEntries().size());\n        \n    }\n    @Test\n    public void testAddBacklogEntry_existingBacklog() {\n        this.tsData.addEntry(this.backlogEntry1);\n        this.tsData.addEntry(this.backlogEntry2);\n        TimesheetNode node = this.tsData.getBacklogNode(1);\n        assertNotNull(node);\n        assertEquals(2, node.getHourEntries().size());\n    }\n    \n    @Test\n    public void testAddStoryEntry_newStory() {\n        this.tsData.addEntry(this.storyEntry1);\n        TimesheetNode node = this.tsData.getStoryNode(1);\n        assertNotNull(node);\n        assertEquals(1, node.getHourEntries().size());\n    }\n    @Test\n    public void testAddStoryEntry_existingStory() {\n        this.tsData.addEntry(this.storyEntry1);\n        this.tsData.addEntry(this.storyEntry2);\n        TimesheetNode node = this.tsData.getStoryNode(1);\n        assertNotNull(node);\n        assertEquals(2, node.getHourEntries().size());\n    }\n    \n    @Test\n    public void testAddTaskEntry_newTask() {\n        this.tsData.addEntry(this.taskEntry1);\n        TimesheetNode node = this.tsData.getTaskNode(1);\n        assertNotNull(node);\n        assertEquals(1, node.getHourEntries().size());\n    }\n    @Test\n    public void testAddTaskEntry_existingTask() {\n        this.tsData.addEntry(this.taskEntry1);\n        this.tsData.addEntry(this.taskEntry2);\n        TimesheetNode node = this.tsData.getTaskNode(1);\n        assertNotNull(node);\n        assertEquals(2, node.getHourEntries().size());\n    }\n    \n    @Test\n    public void addNode_Backlog() {\n        BacklogTimesheetNode node = new BacklogTimesheetNode(this.backlogEntry1.getBacklog());\n        this.tsData.addNode(node);\n        assertNotNull(this.tsData.getBacklogNode(1));\n    }    \n    \n    @Test\n    public void addNode_Story() {\n        StoryTimesheetNode node = new StoryTimesheetNode(this.storyEntry1.getStory());\n        this.tsData.addNode(node);\n        assertNotNull(this.tsData.getStoryNode(1));\n    }\n    \n    @Test\n    public void addNode_Task() {\n        TaskTimesheetNode node = new TaskTimesheetNode(this.taskEntry1.getTask());\n        this.tsData.addNode(node);\n        assertNotNull(this.tsData.getTaskNode(1));\n    }\n    \n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\util\\\\TimesheetExportRowDataTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["TimesheetExportRowDataTest"], "AN": ["testable", "iteration", "project", "product", "story", "task"], "SCS_VariableDeclarator": ["testable", "iteration", "project", "product", "story", "task", "entry", "entry", "entry", "entry", "entry", "entry"], "MN": ["setUp", "backlogCompare", "storyTaskCompare", "testAddIterationTask", "testAddTask", "testAddStory", "testAddIterationEntry", "testAddIterationProject", "testAddIterationProduct"], "PN": ["bl1", "bl2", "bl3", "story", "task"], "SCS_MemberReference": ["testable", "product", "project", "iteration", "story", "task", "product", "project", "iteration", "project", "bl1", "testable", "bl2", "testable", "bl3", "testable", "story", "task", "task", "iteration", "task", "testable", "entry", "iteration", "project", "product", "task", "task", "story", "task", "testable", "entry", "iteration", "project", "product", "story", "task", "story", "testable", "entry", "iteration", "project", "product", "story", "iteration", "testable", "entry", "iteration", "project", "product", "project", "testable", "entry", "project", "product", "product", "testable", "entry", "product"], "SCS_ClassReference": ["project", "iteration", "story", "story", "", null, "", null, "", null, "", "testable", "", "testable", null, "entry", null, null, null, "entry", null, null, "entry", null, null, "entry", null, null, "entry", null, null, "entry", null, null], "SCS_MethodInvocation": ["setParent", "setParent", "setIteration", "setBacklog", "assertEquals", "getIteration", "assertEquals", "getProject", "assertEquals", "getProduct", "assertEquals", "getStory", "assertEquals", "getTask", "setIteration", "setTask", "backlogCompare", "storyTaskCompare", "setStory", "setTask", "backlogCompare", "storyTaskCompare", "setStory", "backlogCompare", "storyTaskCompare", "setBacklog", "backlogCompare", "storyTaskCompare", "setBacklog", "backlogCompare", "storyTaskCompare", "setBacklog", "backlogCompare", "storyTaskCompare"], "SCS_VariableDeclaration": ["TaskHourEntry", "TaskHourEntry", "StoryHourEntry", "BacklogHourEntry", "BacklogHourEntry", "BacklogHourEntry"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.util;\n\nimport static org.junit.Assert.*;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport fi.hut.soberit.agilefant.model.Backlog;\nimport fi.hut.soberit.agilefant.model.BacklogHourEntry;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.Product;\nimport fi.hut.soberit.agilefant.model.Project;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.StoryHourEntry;\nimport fi.hut.soberit.agilefant.model.Task;\nimport fi.hut.soberit.agilefant.model.TaskHourEntry;\n\npublic class TimesheetExportRowDataTest {\n\n    private TimesheetExportRowData testable;\n    private Iteration iteration;\n    private Project project;\n    private Product product;\n    private Story story;\n    private Task task;\n    \n    @Before\n    public void setUp() {\n        testable = null;\n        product = new Product();\n        project = new Project();\n        iteration = new Iteration();\n        story = new Story();\n        task = new Task();\n        \n        project.setParent(product);\n        iteration.setParent(project);\n        story.setIteration(iteration);\n        story.setBacklog(project);\n    }\n    \n    private void backlogCompare(Backlog bl1, Backlog bl2, Backlog bl3) {\n        assertEquals(bl1, this.testable.getIteration());\n        assertEquals(bl2, this.testable.getProject());\n        assertEquals(bl3, this.testable.getProduct());\n    }\n    private void storyTaskCompare(Story story, Task task) {\n        assertEquals(story, testable.getStory());\n        assertEquals(task, testable.getTask());\n    }\n    @Test\n    public void testAddIterationTask() {\n        TaskHourEntry entry = new TaskHourEntry();\n        this.task.setIteration(this.iteration);\n        entry.setTask(this.task);\n        this.testable = new TimesheetExportRowData(entry);\n        this.backlogCompare(iteration, project, product);\n        this.storyTaskCompare(null, task);\n    }\n    \n    @Test\n    public void testAddTask() {\n        TaskHourEntry entry = new TaskHourEntry();\n        this.task.setStory(this.story);\n        entry.setTask(this.task);\n        this.testable = new TimesheetExportRowData(entry);\n        this.backlogCompare(iteration, project, product);\n        this.storyTaskCompare(story, task);\n\n    }\n    \n    @Test\n    public void testAddStory() {\n        StoryHourEntry entry = new StoryHourEntry();\n        entry.setStory(this.story);\n        this.testable = new TimesheetExportRowData(entry);\n        this.backlogCompare(iteration, project, product);\n        this.storyTaskCompare(story, null);\n\n    }\n    \n    @Test\n    public void testAddIterationEntry() {\n        BacklogHourEntry entry = new BacklogHourEntry();\n        entry.setBacklog(this.iteration);\n        this.testable = new TimesheetExportRowData(entry);\n        this.backlogCompare(iteration, project, product);\n        this.storyTaskCompare(null, null);\n\n    }\n    \n    @Test\n    public void testAddIterationProject() {\n        BacklogHourEntry entry = new BacklogHourEntry();\n        entry.setBacklog(this.project);\n        this.testable = new TimesheetExportRowData(entry);\n        this.backlogCompare(null, project, product);\n        this.storyTaskCompare(null, null);\n\n    }\n    \n    @Test\n    public void testAddIterationProduct() {\n        BacklogHourEntry entry = new BacklogHourEntry();\n        entry.setBacklog(this.product);\n        this.testable = new TimesheetExportRowData(entry);\n        this.backlogCompare(null, null, product);\n        this.storyTaskCompare(null, null);\n\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\util\\\\TimesheetNodeTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["TimesheetNodeTest", "TimesheetStaticTestNode", "TimesheetTestNode"], "MN": ["calculateEffortSum", "getChildren", "getId", "getName", "getHasChildren", "getChildren", "getId", "getName", "getHasChildren", "testCalculateEffortSum"], "PN": [], "SCS_ClassReference": ["Collections", "children", "children", "children", "he", null, "", "testable", "", "testable", "", "testable"], "SCS_MethodInvocation": ["emptyList", "add", "add", "add", "setMinutesSpent", "add", "assertEquals", "getEffortSum", "assertEquals", "calculateEffortSum", "assertEquals", "getEffortSum"], "AN": ["children"], "SCS_VariableDeclarator": ["children", "he", "testable"], "SCS_ConstructorDeclaration": ["TimesheetTestNode"], "SCS_VariableDeclaration": ["HourEntry", "TimesheetTestNode"], "SCS_MemberReference": ["hourEntries", "he", "children"], "CO": ["//before calculation", "//calculation must return (for chaining)"], "CODE": "package fi.hut.soberit.agilefant.util;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\nimport junit.framework.TestCase;\nimport fi.hut.soberit.agilefant.model.HourEntry;\n\npublic class TimesheetNodeTest extends TestCase {\n\n    class TimesheetStaticTestNode extends TimesheetNode {\n        \n        @Override\n        public long calculateEffortSum() {\n            return 450L;\n        }\n        @Override\n        public List<? extends TimesheetNode> getChildren() {\n            return Collections.emptyList();\n        }\n\n        @Override\n        public int getId() {\n            return 0;\n        }\n\n        @Override\n        public String getName() {\n            return null;\n        }\n\n        @Override\n        public boolean getHasChildren() {\n            return false;\n        }\n        \n    }\n    \n    class TimesheetTestNode extends TimesheetNode {\n        private List<TimesheetNode> children = new ArrayList<TimesheetNode>();\n        public TimesheetTestNode() {\n            children.add(new TimesheetStaticTestNode());\n            children.add(new TimesheetStaticTestNode());\n            children.add(new TimesheetStaticTestNode());\n            HourEntry he = new HourEntry();\n            he.setMinutesSpent(6500);\n            this.hourEntries.add(he);\n        }\n        @Override\n        public List<? extends TimesheetNode> getChildren() {\n            return this.children;\n        }\n\n        @Override\n        public int getId() {\n            return 0;\n        }\n\n        @Override\n        public String getName() {\n            return null;\n        }\n\n        @Override\n        public boolean getHasChildren() {\n            return true;\n        }   \n    }\n    \n    public void testCalculateEffortSum() {\n        TimesheetTestNode testable = new TimesheetTestNode();\n        assertEquals(0L, testable.getEffortSum()); //before calculation\n        assertEquals(7850L, testable.calculateEffortSum()); //calculation must return (for chaining)\n        assertEquals(7850L, testable.getEffortSum());\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\util\\\\UserConverterTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["UserConverterTest"], "AN": ["testable", "userBusiness", "user"], "SCS_VariableDeclarator": ["testable", "userBusiness", "user", "returned", "str"], "MN": ["setUp", "replayAll", "verifyAll", "testConvertFromString_withValidId", "testConvertFromString_withNull", "testConvertFromString_invalidId", "testConvertFromString_notFound", "testConvertToString"], "PN": [], "SCS_MemberReference": ["testable", "userBusiness", "user", "userBusiness", "userBusiness", "userBusiness", "user", "user", "returned", "user", "str"], "SCS_ClassReference": ["", "UserBusiness", "user", "testable", "", "", "", null, "userBusiness", "", "testable", "User", "", "", "", "", "testable", "User", "", "NumberFormatException", "testable", "User", "ObjectNotFoundException", "", null, "userBusiness", "", "testable", "User", "testable", "", "user"], "SCS_MethodInvocation": ["createStrictMock", "setId", "setUserBusiness", "replay", "verify", "expect", "andReturn", "retrieve", "replayAll", "convertFromString", "verifyAll", "assertSame", "replayAll", "assertNull", "convertFromString", "verifyAll", "convertFromString", "expect", "andThrow", "retrieve", "replayAll", "convertFromString", "convertToString", "assertEquals", "toString"], "SCS_VariableDeclaration": ["User", "String"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.util;\n\nimport static org.easymock.EasyMock.*;\nimport static org.junit.Assert.*;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport fi.hut.soberit.agilefant.business.UserBusiness;\nimport fi.hut.soberit.agilefant.exception.ObjectNotFoundException;\nimport fi.hut.soberit.agilefant.model.User;\n\npublic class UserConverterTest {\n    UserConverter testable;\n    UserBusiness userBusiness;\n    private User user;\n    \n    @Before\n    public void setUp() {\n        testable = new UserConverter();\n        userBusiness = createStrictMock(UserBusiness.class);\n        \n        user = new User();\n        user.setId(5);\n        \n        testable.setUserBusiness(userBusiness);\n    }\n    \n    private void replayAll() {\n        replay(userBusiness);\n    }\n\n    private void verifyAll() {\n        verify(userBusiness);\n    }\n    \n    @Test\n    public void testConvertFromString_withValidId() {\n        expect(userBusiness.retrieve(5)).andReturn(user);\n        replayAll();\n        User returned = (User)testable.convertFromString(null, new String[] { \"5\" }, User.class);\n        \n        verifyAll();\n        assertSame(user, returned);\n    }\n    \n    @Test\n    public void testConvertFromString_withNull() {\n        replayAll();\n        assertNull(testable.convertFromString(null, new String[] { \"null\" }, User.class));\n        verifyAll();\n    }\n\n    @Test(expected = NumberFormatException.class)\n    public void testConvertFromString_invalidId() {\n        testable.convertFromString(null, new String[] { \"5sadf\u00c3\u00b6wq3rio\" }, User.class);\n    }\n\n    @Test(expected = ObjectNotFoundException.class)\n    public void testConvertFromString_notFound() {\n        expect(userBusiness.retrieve(5)).andThrow(new ObjectNotFoundException());\n        replayAll();\n        testable.convertFromString(null, new String[] { \"5\" }, User.class);\n    }\n    \n    @Test\n    public void testConvertToString() {\n        String str = testable.convertToString(null, user);\n        assertEquals(str, user.toString());\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\AjaxExceptionHandlerTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["AjaxExceptionHandlerTest"], "AN": ["ajaxExceptionHandler"], "SCS_VariableDeclarator": ["ajaxExceptionHandler", "onfe", "onfe"], "MN": ["setUp_handler", "getText", "handle_genericException", "handle_objectNotFound", "handleObjectNotFoundException_withI18nKey", "handleObjectNotFoundException_withoutI18nKey"], "PN": ["aTextName"], "SCS_MemberReference": ["ajaxExceptionHandler", "aTextName", "genericExceptionResult", "objectNotFoundResult", "objectNotFoundResult", "onfe", "objectNotFoundResult", "onfe"], "SCS_ClassReference": ["ajaxExceptionHandler", "", "ajaxExceptionHandler", "", "ajaxExceptionHandler", "ajaxExceptionHandler", "User", "", "ajaxExceptionHandler", "", "ajaxExceptionHandler", "", "ajaxExceptionHandler", "", "ajaxExceptionHandler", "", "ajaxExceptionHandler", "", "ajaxExceptionHandler"], "SCS_MethodInvocation": ["setException", "assertEquals", "handle", "assertEquals", "getErrorMessage", "setException", "assertEquals", "handle", "assertEquals", "getErrorMessage", "assertEquals", "handleObjectNotFoundException", "assertEquals", "getErrorMessage", "assertEquals", "handleObjectNotFoundException", "assertEquals", "getErrorMessage"], "SCS_VariableDeclaration": ["ObjectNotFoundException", "ObjectNotFoundException"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport static org.junit.Assert.*;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport fi.hut.soberit.agilefant.exception.ObjectNotFoundException;\nimport fi.hut.soberit.agilefant.model.User;\n\npublic class AjaxExceptionHandlerTest {\n    \n    private AjaxExceptionHandler ajaxExceptionHandler;\n    \n    @SuppressWarnings(\"serial\")\n    @Before\n    public void setUp_handler() {\n        ajaxExceptionHandler = new AjaxExceptionHandler() {\n            @Override\n            public String getText(String aTextName) {\n                return \"msg_\" + aTextName;\n            }\n        };\n    }\n    \n    @Test\n    public void handle_genericException() {\n        ajaxExceptionHandler.setException(new Exception(\"Some exception\"));\n        \n        assertEquals(AjaxExceptionHandler.genericExceptionResult,\n                ajaxExceptionHandler.handle());\n        \n        assertEquals(\"Some exception\", ajaxExceptionHandler.getErrorMessage());\n    }\n    \n    @Test\n    public void handle_objectNotFound() {\n        ajaxExceptionHandler.setException(new ObjectNotFoundException(\"Not found!\", User.class));\n        \n        assertEquals(AjaxExceptionHandler.objectNotFoundResult,\n                ajaxExceptionHandler.handle());\n        \n        assertEquals(\"msg_user.notFound\", ajaxExceptionHandler.getErrorMessage());\n    }\n    \n    @Test\n    public void handleObjectNotFoundException_withI18nKey() {\n        ObjectNotFoundException onfe\n            = new ObjectNotFoundException(\"Text not found\", \"text.notFound\");\n        \n        assertEquals(AjaxExceptionHandler.objectNotFoundResult,\n                ajaxExceptionHandler.handleObjectNotFoundException(onfe));\n        \n        assertEquals(\"msg_text.notFound\", ajaxExceptionHandler.getErrorMessage());\n    }\n    \n    @Test\n    public void handleObjectNotFoundException_withoutI18nKey() {\n        ObjectNotFoundException onfe\n            = new ObjectNotFoundException(\"Text not found\");\n        \n        assertEquals(AjaxExceptionHandler.objectNotFoundResult, \n                ajaxExceptionHandler.handleObjectNotFoundException(onfe));\n        assertEquals(\"msg_unknown.notFound\", ajaxExceptionHandler.getErrorMessage());\n    }\n    \n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\AssignmentActionTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["AssignmentActionTest"], "AN": ["testable", "assignment", "assignmentBusiness"], "SCS_VariableDeclarator": ["testable", "assignment", "assignmentBusiness"], "MN": ["setUp", "testModifyAssignment", "testModifyAssignment_nonExisting", "testDelete", "testDelete_notFound", "testInitializePrefetchedData"], "PN": [], "SCS_MemberReference": ["testable", "assignmentBusiness", "assignmentBusiness", "assignment", "assignment", "assignment", "assignmentBusiness", "assignmentBusiness", "assignmentBusiness", "assignmentBusiness", "assignmentBusiness", "assignmentBusiness", "assignmentBusiness", "assignmentBusiness", "assignment", "assignmentBusiness", "assignmentBusiness", "assignment"], "SCS_ClassReference": ["", "AssignmentBusiness", "testable", "assignment", "assignment", "testable", "assignment", "assignment", "", null, "assignmentBusiness", "assignment", "", "testable", "testable", "", "ObjectNotFoundException", "", null, "assignmentBusiness", "", "testable", "testable", "", "assignmentBusiness", "", "testable", "testable", "", "ObjectNotFoundException", "assignmentBusiness", "", null, "", "testable", "testable", "", "", null, "assignmentBusiness", "", "testable", "", "", "testable"], "SCS_MethodInvocation": ["createStrictMock", "setAssignmentBusiness", "setPersonalLoad", "setAvailability", "setAssignment", "setPersonalLoad", "setAvailability", "expect", "andReturn", "store", "getPersonalLoad", "replay", "setAssignmentId", "modify", "verify", "expect", "andThrow", "store", "replay", "setAssignmentId", "modify", "verify", "delete", "replay", "setAssignmentId", "delete", "verify", "delete", "expectLastCall", "andThrow", "replay", "setAssignmentId", "delete", "verify", "expect", "andReturn", "retrieve", "replay", "initializePrefetchedData", "verify", "assertEquals", "getAssignment"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport static org.easymock.EasyMock.*;\nimport static org.junit.Assert.*;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport fi.hut.soberit.agilefant.business.AssignmentBusiness;\nimport fi.hut.soberit.agilefant.exception.ObjectNotFoundException;\nimport fi.hut.soberit.agilefant.model.Assignment;\nimport fi.hut.soberit.agilefant.model.SignedExactEstimate;\n\npublic class AssignmentActionTest {\n\n    private AssignmentAction testable;\n    private Assignment assignment;\n    private AssignmentBusiness assignmentBusiness;\n\n    @Before\n    public void setUp() {\n        testable = new AssignmentAction();\n        assignmentBusiness = createStrictMock(AssignmentBusiness.class);\n        testable.setAssignmentBusiness(assignmentBusiness);\n        assignment = new Assignment();\n        assignment.setPersonalLoad(null);\n        assignment.setAvailability((short) 0);\n        testable.setAssignment(assignment);\n    }\n\n    @Test\n    public void testModifyAssignment() {\n        assignment.setPersonalLoad(new SignedExactEstimate(3400));\n        assignment.setAvailability((short) 400);\n        expect(\n                assignmentBusiness.store(313, assignment.getPersonalLoad(),\n                        (short) 400)).andReturn(assignment);\n        replay(assignmentBusiness);\n        testable.setAssignmentId(313);\n        testable.modify();\n        verify(assignmentBusiness);\n    }\n\n    @Test(expected = ObjectNotFoundException.class)\n    public void testModifyAssignment_nonExisting() {\n        expect(assignmentBusiness.store(313, null, (short) 0)).andThrow(\n                new ObjectNotFoundException());\n        replay(assignmentBusiness);\n        testable.setAssignmentId(313);\n        testable.modify();\n        verify(assignmentBusiness);\n    }\n\n    @Test\n    public void testDelete() {\n        assignmentBusiness.delete(313);\n        replay(assignmentBusiness);\n        testable.setAssignmentId(313);\n        testable.delete();\n        verify(assignmentBusiness);\n    }\n\n    @Test(expected = ObjectNotFoundException.class)\n    public void testDelete_notFound() {\n        assignmentBusiness.delete(313);\n        expectLastCall().andThrow(new ObjectNotFoundException());\n        replay(assignmentBusiness);\n        testable.setAssignmentId(313);\n        testable.delete();\n        verify(assignmentBusiness);\n    }\n    \n    @Test\n    public void testInitializePrefetchedData() {\n        expect(assignmentBusiness.retrieve(123)).andReturn(assignment);\n        replay(assignmentBusiness);\n        testable.initializePrefetchedData(123);\n        verify(assignmentBusiness);\n        assertEquals(assignment, testable.getAssignment());\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\AutocompleteActionTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["AutocompleteActionTest"], "AN": ["autocompleteAction", "toBusiness", "node"], "SCS_VariableDeclarator": ["autocompleteAction", "toBusiness", "node", "list", "list", "list", "list"], "MN": ["setUp", "setUp_data", "replayAll", "verifyAll", "testUserTeamData", "testBacklogData", "testProductData", "testProjectData", "testTeamData", "testCurrentIterationData"], "PN": [], "SCS_MemberReference": ["autocompleteAction", "toBusiness", "toBusiness", "node", "toBusiness", "toBusiness", "node", "node", "node", "node", "list", "SUCCESS", "list", "node", "node", "list", "SUCCESS", "list", "node", "node", "list", "SUCCESS", "list", "node", "node", "node", "list", "SUCCESS", "list"], "SCS_ClassReference": ["", "TransferObjectBusiness", "autocompleteAction", "Class", "", "", "", null, "Arrays", "toBusiness", "", null, "Arrays", "toBusiness", "", "autocompleteAction", "", "autocompleteAction", null, "", "autocompleteAction", "Arrays", "", null, "toBusiness", "", "", "autocompleteAction", "", "", "autocompleteAction", "Arrays", "", null, "toBusiness", "", "", "autocompleteAction", "", "", "autocompleteAction", "Arrays", "", null, "toBusiness", "", "", "autocompleteAction", "", "", "autocompleteAction", "", null, "Arrays", "toBusiness", "", "autocompleteAction", "", "autocompleteAction", null, "", "Arrays", "", null, "toBusiness", "", "", "autocompleteAction", "", "", "autocompleteAction"], "SCS_MethodInvocation": ["createMock", "setTransferObjectBusiness", "replay", "verify", "expect", "andReturn", "asList", "constructUserAutocompleteData", "expect", "andReturn", "asList", "constructTeamAutocompleteData", "replayAll", "userTeamData", "assertEquals", "getAutocompleteData", "size", "verifyAll", "setBacklogId", "asList", "expect", "andReturn", "constructBacklogAutocompleteData", "replayAll", "assertEquals", "backlogData", "verifyAll", "assertEquals", "getAutocompleteData", "asList", "expect", "andReturn", "constructProductAutocompleteData", "replayAll", "assertEquals", "productData", "verifyAll", "assertEquals", "getAutocompleteData", "asList", "expect", "andReturn", "constructProjectAutocompleteData", "replayAll", "assertEquals", "projectData", "verifyAll", "assertEquals", "getAutocompleteData", "expect", "andReturn", "asList", "constructTeamAutocompleteData", "replayAll", "teamData", "assertEquals", "getAutocompleteData", "size", "verifyAll", "asList", "expect", "andReturn", "constructCurrentIterationAutocompleteData", "replayAll", "assertEquals", "currentIterationData", "verifyAll", "assertEquals", "getAutocompleteData"], "SCS_VariableDeclaration": ["List", "List", "List", "List"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport static org.easymock.EasyMock.*;\nimport static org.junit.Assert.*;\n\nimport java.util.Arrays;\nimport java.util.List;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport com.opensymphony.xwork2.Action;\n\nimport fi.hut.soberit.agilefant.business.TransferObjectBusiness;\nimport fi.hut.soberit.agilefant.transfer.AutocompleteDataNode;\n\npublic class AutocompleteActionTest {\n\n    private AutocompleteAction autocompleteAction;\n    private TransferObjectBusiness toBusiness;\n    \n    AutocompleteDataNode node;\n    \n    @Before\n    public void setUp() {\n        autocompleteAction = new AutocompleteAction();\n        toBusiness = createMock(TransferObjectBusiness.class);\n        autocompleteAction.setTransferObjectBusiness(toBusiness);\n    }\n    \n    @Before\n    public void setUp_data() {\n        node = new AutocompleteDataNode(Class.class, 1, \"\");\n    }\n\n    private void replayAll() {\n        replay(toBusiness);\n    }\n    \n    private void verifyAll() {\n        verify(toBusiness);\n    }\n\n    @Test\n    public void testUserTeamData() {\n        \n        expect(toBusiness.constructUserAutocompleteData()).andReturn(Arrays.asList(node));\n        expect(toBusiness.constructTeamAutocompleteData(true)).andReturn(Arrays.asList(node));\n        \n        replayAll();\n        autocompleteAction.userTeamData();\n        assertEquals(2, autocompleteAction.getAutocompleteData().size());\n        verifyAll();\n    }\n    \n    @Test\n    public void testBacklogData() {\n        autocompleteAction.setBacklogId(123);\n        List<AutocompleteDataNode> list = Arrays.asList(node, node);\n        expect(toBusiness.constructBacklogAutocompleteData(123)).andReturn(list);\n        \n        replayAll();\n        assertEquals(Action.SUCCESS, autocompleteAction.backlogData());\n        verifyAll();\n        \n        assertEquals(list, autocompleteAction.getAutocompleteData());\n    }\n    \n    @Test\n    public void testProductData() {\n        List<AutocompleteDataNode> list = Arrays.asList(node, node);\n        expect(toBusiness.constructProductAutocompleteData()).andReturn(list);\n        \n        replayAll();\n        assertEquals(Action.SUCCESS, autocompleteAction.productData());\n        verifyAll();\n        \n        assertEquals(list, autocompleteAction.getAutocompleteData());\n    }\n    \n    @Test\n    public void testProjectData() {\n        List<AutocompleteDataNode> list = Arrays.asList(node, node);\n        expect(toBusiness.constructProjectAutocompleteData()).andReturn(list);\n        \n        replayAll();\n        assertEquals(Action.SUCCESS, autocompleteAction.projectData());\n        verifyAll();\n        \n        assertEquals(list, autocompleteAction.getAutocompleteData());\n    }\n    \n    @Test\n    public void testTeamData() {\n        expect(toBusiness.constructTeamAutocompleteData(false)).andReturn(Arrays.asList(node));\n        \n        replayAll();\n        autocompleteAction.teamData();\n        assertEquals(1, autocompleteAction.getAutocompleteData().size());\n        verifyAll();\n    }\n\n    @Test\n    public void testCurrentIterationData() {\n        List<AutocompleteDataNode> list = Arrays.asList(node, node);\n        expect(toBusiness.constructCurrentIterationAutocompleteData()).andReturn(list);\n        \n        replayAll();\n        assertEquals(Action.SUCCESS, autocompleteAction.currentIterationData());\n        verifyAll();\n        \n        assertEquals(list, autocompleteAction.getAutocompleteData());\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\BacklogActionTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["BacklogActionTest"], "AN": ["backlogAction", "backlogBusiness", "product", "stories"], "SCS_VariableDeclarator": ["backlogAction", "backlogBusiness", "product", "stories", "childBacklogs"], "MN": ["setUp_dependencies", "replayAll", "verifyAll", "setUp", "testRetrieveStories", "testRetrieveStories_noSuchBacklog", "testRetrieveSubBacklogs"], "PN": [], "SCS_MemberReference": ["backlogBusiness", "backlogBusiness", "backlogBusiness", "backlogBusiness", "product", "stories", "stories", "product", "SUCCESS", "stories", "product", "childBacklogs", "product", "SUCCESS", "childBacklogs"], "SCS_ClassReference": ["", "BacklogBusiness", "backlogAction", "", "", "product", "Arrays", "product", "backlogAction", "product", "", null, "backlogBusiness", "product", "", "", "backlogAction", "", "backlogAction", "", "ObjectNotFoundException", "backlogAction", "", null, "backlogBusiness", "", "backlogAction", "", "backlogAction", "product", "childBacklogs", "Arrays", "", null, "backlogBusiness", "product", "", null, "backlogBusiness", "", "", "backlogAction", "", "backlogAction", ""], "SCS_MethodInvocation": ["createMock", "setBacklogBusiness", "replay", "verify", "setId", "asList", "setStories", "setBacklogId", "getId", "expect", "andReturn", "retrieve", "getId", "replayAll", "assertEquals", "retrieveStories", "assertEquals", "getStories", "verifyAll", "setBacklogId", "expect", "andThrow", "retrieve", "replayAll", "retrieveStories", "verifyAll", "setBacklogId", "getId", "addAll", "asList", "expect", "andReturn", "retrieveIfExists", "getId", "expect", "andReturn", "getChildBacklogs", "replayAll", "assertEquals", "retrieveSubBacklogs", "assertEquals", "getBacklogs", "verifyAll"], "SCS_VariableDeclaration": ["Collection"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport static org.easymock.EasyMock.*;\nimport static org.junit.Assert.*;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.HashSet;\nimport java.util.Set;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport com.opensymphony.xwork2.Action;\n\nimport fi.hut.soberit.agilefant.business.BacklogBusiness;\nimport fi.hut.soberit.agilefant.exception.ObjectNotFoundException;\nimport fi.hut.soberit.agilefant.model.Backlog;\nimport fi.hut.soberit.agilefant.model.Product;\nimport fi.hut.soberit.agilefant.model.Project;\nimport fi.hut.soberit.agilefant.model.Story;\n\npublic class BacklogActionTest {\n\n    private BacklogAction backlogAction = new BacklogAction();\n    private BacklogBusiness backlogBusiness;\n    \n    private Product product;\n    private Set<Story> stories;\n    \n    @Before\n    public void setUp_dependencies() {\n        backlogBusiness = createMock(BacklogBusiness.class);\n        backlogAction.setBacklogBusiness(backlogBusiness);\n    }\n    \n    private void replayAll() {\n        replay(backlogBusiness);\n    }\n    \n    private void verifyAll() {\n        verify(backlogBusiness);\n    }\n\n    \n    @Before\n    public void setUp() {\n        product = new Product();\n        product.setId(1235);\n        \n        stories = new HashSet<Story>(Arrays.asList(new Story(), new Story()));\n        product.setStories(stories);\n    }\n    \n    @Test\n    public void testRetrieveStories() {\n        backlogAction.setBacklogId(product.getId());\n        \n        expect(backlogBusiness.retrieve(product.getId())).andReturn(product);\n        replayAll();\n        \n        assertEquals(Action.SUCCESS, backlogAction.retrieveStories());\n        assertEquals(stories, backlogAction.getStories());\n        \n        verifyAll();\n    }\n\n    @Test(expected = ObjectNotFoundException.class)\n    public void testRetrieveStories_noSuchBacklog() {\n        backlogAction.setBacklogId(-1);\n        \n        expect(backlogBusiness.retrieve(-1))\n            .andThrow(new ObjectNotFoundException(\"Not found\"));\n        replayAll();\n        \n        backlogAction.retrieveStories();\n        \n        verifyAll();\n    }\n    \n    @Test\n    public void testRetrieveSubBacklogs() {\n        backlogAction.setBacklogId(product.getId());\n        Collection<Backlog> childBacklogs = new ArrayList<Backlog>(); \n            \n        childBacklogs.addAll(Arrays.asList(new Project(), new Project()));\n        \n        expect(backlogBusiness.retrieveIfExists(product.getId()))\n            .andReturn(product);\n        expect(backlogBusiness.getChildBacklogs(product)) \n            .andReturn(childBacklogs);\n        replayAll();\n        \n        assertEquals(Action.SUCCESS, backlogAction.retrieveSubBacklogs());\n        assertEquals(childBacklogs, backlogAction.getBacklogs());\n        \n        verifyAll();\n    }\n    \n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\ChartActionTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["ChartActionTest"], "AN": ["chartAction", "iterationBurndownBusiness", "iterationBusiness", "iteration"], "SCS_VariableDeclarator": ["chartAction", "iterationBurndownBusiness", "iterationBusiness", "iteration", "expected", "expected", "expected"], "MN": ["setUp", "testGetIterationBurndown", "testGetSmallIterationBurndown", "testGetCustomIterationBurndown"], "PN": [], "SCS_MemberReference": ["iterationBurndownBusiness", "iterationBurndownBusiness", "iterationBusiness", "iterationBusiness", "iteration", "iteration", "expected", "iteration", "iterationBusiness", "iterationBurndownBusiness", "SUCCESS", "expected", "iterationBusiness", "iterationBurndownBusiness", "iteration", "expected", "iteration", "iterationBusiness", "iterationBurndownBusiness", "SUCCESS", "expected", "iterationBusiness", "iterationBurndownBusiness", "iteration", "expected", "iteration", "iterationBusiness", "iterationBurndownBusiness", "SUCCESS", "expected", "iterationBusiness", "iterationBurndownBusiness"], "SCS_ClassReference": ["", "IterationBurndownBusiness", "chartAction", "", "IterationBusiness", "chartAction", "iteration", "chartAction", "iteration", "", null, "iterationBusiness", "iteration", "", null, "iterationBurndownBusiness", "", "", "chartAction", "", "chartAction", "", "chartAction", "iteration", "", null, "iterationBusiness", "iteration", "", null, "iterationBurndownBusiness", "", "", "chartAction", "", "chartAction", "", "chartAction", "iteration", "chartAction", "chartAction", "", null, "iterationBusiness", "iteration", "", null, "iterationBurndownBusiness", "", "", "chartAction", "", "chartAction", ""], "SCS_MethodInvocation": ["createMock", "setIterationBurndownBusiness", "createMock", "setIterationBusiness", "setId", "setBacklogId", "getId", "expect", "andReturn", "retrieve", "getId", "expect", "andReturn", "getIterationBurndown", "replay", "assertEquals", "getIterationBurndown", "assertEquals", "getResult", "verify", "setBacklogId", "getId", "expect", "andReturn", "retrieve", "getId", "expect", "andReturn", "getSmallIterationBurndown", "replay", "assertEquals", "getSmallIterationBurndown", "assertEquals", "getResult", "verify", "setBacklogId", "getId", "setCustomBdWidth", "setCustomBdHeight", "expect", "andReturn", "retrieve", "getId", "expect", "andReturn", "getCustomIterationBurndown", "replay", "assertEquals", "getCustomIterationBurndown", "assertEquals", "getResult", "verify"], "SCS_VariableDeclaration": ["byte", "byte", "byte"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport static org.easymock.EasyMock.*;\nimport static org.junit.Assert.*;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport com.opensymphony.xwork2.Action;\n\nimport fi.hut.soberit.agilefant.business.IterationBurndownBusiness;\nimport fi.hut.soberit.agilefant.business.IterationBusiness;\nimport fi.hut.soberit.agilefant.model.Iteration;\n\npublic class ChartActionTest {\n\n    ChartAction chartAction = new ChartAction();\n    IterationBurndownBusiness iterationBurndownBusiness;\n    IterationBusiness iterationBusiness;\n    Iteration iteration;\n\n    @Before\n    public void setUp() {\n        iterationBurndownBusiness = createMock(IterationBurndownBusiness.class);\n        chartAction.setIterationBurndownBusiness(iterationBurndownBusiness);\n\n        iterationBusiness = createMock(IterationBusiness.class);\n        chartAction.setIterationBusiness(iterationBusiness);\n        \n        iteration = new Iteration();\n        iteration.setId(100);\n    }\n\n    @Test\n    public void testGetIterationBurndown() {\n        byte[] expected = new byte[100];\n\n        chartAction.setBacklogId(iteration.getId());\n        expect(iterationBusiness.retrieve(iteration.getId())).andReturn(\n                iteration);\n        expect(iterationBurndownBusiness.getIterationBurndown(iteration, 0))\n                .andReturn(expected);\n        replay(iterationBusiness, iterationBurndownBusiness);\n\n        assertEquals(Action.SUCCESS, chartAction.getIterationBurndown());\n        assertEquals(expected, chartAction.getResult());\n        \n        \n        verify(iterationBusiness, iterationBurndownBusiness);\n    }\n\n    @Test\n    public void testGetSmallIterationBurndown() {\n        byte[] expected = new byte[100];\n\n        chartAction.setBacklogId(iteration.getId());\n        expect(iterationBusiness.retrieve(iteration.getId())).andReturn(\n                iteration);\n        expect(iterationBurndownBusiness.getSmallIterationBurndown(iteration, 0))\n                .andReturn(expected);\n        replay(iterationBusiness, iterationBurndownBusiness);\n\n        assertEquals(Action.SUCCESS, chartAction.getSmallIterationBurndown());\n        assertEquals(expected, chartAction.getResult());\n        \n        \n        verify(iterationBusiness, iterationBurndownBusiness);\n    }\n    \n        @Test\n    public void testGetCustomIterationBurndown() {\n        byte[] expected = new byte[100];\n\n        chartAction.setBacklogId(iteration.getId());\n        chartAction.setCustomBdWidth(100);\n        chartAction.setCustomBdHeight(100);\n        expect(iterationBusiness.retrieve(iteration.getId())).andReturn(\n                iteration);\n        expect(iterationBurndownBusiness.getCustomIterationBurndown(iteration, 100, 100, 0))\n                .andReturn(expected);\n        replay(iterationBusiness, iterationBurndownBusiness);\n\n        assertEquals(Action.SUCCESS, chartAction.getCustomIterationBurndown());\n        assertEquals(expected, chartAction.getResult());\n        \n      \n        verify(iterationBusiness, iterationBurndownBusiness);    \n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\DailyWorkActionTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["DailyWorkActionTest"], "AN": ["testable", "dailyWorkBusiness", "userBusiness", "taskBusiness", "transferObjectBusiness", "LOGGED_IN_USER"], "SCS_VariableDeclarator": ["testable", "dailyWorkBusiness", "userBusiness", "taskBusiness", "transferObjectBusiness", "LOGGED_IN_USER", "USER_ID", "user", "returnedList", "assignedWork", "user", "task", "taskTO", "user", "task", "entry", "taskTO", "task", "rankUnder", "user", "USER_ID", "user", "returnedList", "USER_ID", "user", "assignedWork", "USER_ID", "user", "assignedWork"], "MN": ["setUp_dependencies", "getLoggedInUserId", "replayAll", "verifyAll", "testRetrieve", "testDeleteFromQueue", "testAddToQueue", "testRankQueueTaskAndMoveUnder", "testRetrieveWorkQueue", "testRetrieveAssignedTasks", "testRetrieveAssignedStories"], "PN": [], "SCS_MemberReference": ["testable", "LOGGED_IN_USER", "dailyWorkBusiness", "dailyWorkBusiness", "userBusiness", "userBusiness", "taskBusiness", "taskBusiness", "transferObjectBusiness", "transferObjectBusiness", "dailyWorkBusiness", "taskBusiness", "userBusiness", "transferObjectBusiness", "dailyWorkBusiness", "taskBusiness", "userBusiness", "transferObjectBusiness", "USER_ID", "user", "USER_ID", "returnedList", "user", "assignedWork", "user", "user", "SUCCESS", "returnedList", "user", "USER_ID", "LOGGED_IN_USER", "user", "LOGGED_IN_USER", "task", "user", "task", "task", "taskTO", "task", "taskTO", "user", "task", "entry", "user", "task", "task", "taskTO", "task", "taskTO", "user", "task", "rankUnder", "task", "user", "task", "rankUnder", "USER_ID", "user", "USER_ID", "returnedList", "user", "SUCCESS", "returnedList", "USER_ID", "user", "USER_ID", "assignedWork", "user", "user", "SUCCESS", "user", "USER_ID", "USER_ID", "user", "USER_ID", "assignedWork", "user", "SUCCESS", "user", "USER_ID"], "SCS_ClassReference": ["", "DailyWorkBusiness", "testable", "", "UserBusiness", "testable", "", "TaskBusiness", "testable", "", "TransferObjectBusiness", "testable", "", "", "testable", "Arrays", "", null, "userBusiness", "", null, "dailyWorkBusiness", "", null, "dailyWorkBusiness", "", null, "testable", "dailyWorkBusiness", "", "", "testable", "", "", "testable", "", "testable", "", "testable", "", "assignedWork", "testable", "user", "task", "testable", "", null, "userBusiness", "", null, "taskBusiness", "dailyWorkBusiness", "", null, "transferObjectBusiness", "", "testable", "", "", "testable", "user", "task", "testable", "testable", "", null, "userBusiness", "", null, "taskBusiness", "", null, "dailyWorkBusiness", "", null, "transferObjectBusiness", "", "testable", "", "", "testable", "task", "rankUnder", "user", "testable", "testable", "testable", "", null, "userBusiness", "", null, "taskBusiness", "", null, "taskBusiness", "", null, "dailyWorkBusiness", "", "testable", "", "testable", "Arrays", "", null, "userBusiness", "", null, "dailyWorkBusiness", "", "", "testable", "", "", "testable", "testable", "", null, "userBusiness", "", null, "dailyWorkBusiness", "", null, "testable", "dailyWorkBusiness", "", "", "testable", "", "", "testable", "", "testable", "testable", "", null, "userBusiness", "", null, "dailyWorkBusiness", "", "", "testable", "", "", "testable", "", "testable", "", "assignedWork", "testable"], "SCS_MethodInvocation": ["createStrictMock", "setDailyWorkBusiness", "createStrictMock", "setUserBusiness", "createStrictMock", "setTaskBusiness", "createStrictMock", "setTransferObjectBusiness", "replay", "verify", "setUserId", "asList", "expect", "andReturn", "retrieve", "expect", "andReturn", "getQueuedTasksForUser", "expect", "andReturn", "getAssignedWorkFor", "expect", "andReturn", "getStories", "getQueuedStoriesForUser", "replayAll", "assertEquals", "retrieve", "verifyAll", "assertEquals", "getQueuedTasks", "assertEquals", "getUser", "assertEquals", "getUserId", "assertSame", "getTasksWithoutStory", "getTasksWithoutStory", "setId", "setId", "setTaskId", "expect", "andReturn", "retrieve", "expect", "andReturn", "retrieve", "removeFromWhatsNext", "expect", "andReturn", "constructTaskTO", "replayAll", "deleteFromWorkQueue", "verifyAll", "assertSame", "getTask", "setId", "setId", "setTaskId", "setUserId", "expect", "andReturn", "retrieve", "expect", "andReturn", "retrieve", "expect", "andReturn", "addToWhatsNext", "expect", "andReturn", "constructTaskTO", "replayAll", "addToWorkQueue", "verifyAll", "assertSame", "getTask", "setId", "setId", "setId", "setTaskId", "setRankUnderId", "setUserId", "expect", "andReturn", "retrieve", "expect", "andReturn", "retrieve", "expect", "andReturn", "retrieveIfExists", "expect", "andReturn", "rankUnderTaskOnWhatsNext", "replayAll", "rankQueueTaskAndMoveUnder", "verifyAll", "setUserId", "asList", "expect", "andReturn", "retrieve", "expect", "andReturn", "getQueuedTasksForUser", "replayAll", "assertEquals", "retrieveWorkQueue", "verifyAll", "assertEquals", "getQueuedTasks", "setUserId", "expect", "andReturn", "retrieve", "expect", "andReturn", "getAssignedWorkFor", "expect", "andReturn", "getStories", "getQueuedStoriesForUser", "replayAll", "assertEquals", "retrieveAssignedStories", "verifyAll", "assertEquals", "getUser", "assertEquals", "getUserId", "setUserId", "expect", "andReturn", "retrieve", "expect", "andReturn", "getAssignedWorkFor", "replayAll", "assertEquals", "retrieveAssignedTasks", "verifyAll", "assertEquals", "getUser", "assertEquals", "getUserId", "assertSame", "getTasksWithoutStory", "getTasksWithoutStory"], "SCS_VariableDeclaration": ["int", "User", "Collection", "AssignedWorkTO", "User", "Task", "TaskTO", "User", "Task", "WhatsNextEntry", "TaskTO", "Task", "Task", "User", "int", "User", "Collection", "int", "User", "AssignedWorkTO", "int", "User", "AssignedWorkTO"], "CO": ["//assertSame(assignedWork.getStories(), testable.getStories());", "// This is to be provided in JSON", "// This is to be provided in JSON", "//assertSame(assignedWork.getStories(), testable.getStories());"], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport static org.easymock.EasyMock.createStrictMock;\nimport static org.easymock.EasyMock.expect;\nimport static org.easymock.EasyMock.replay;\nimport static org.easymock.EasyMock.verify;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertSame;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\n\nimport org.easymock.EasyMock;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport com.opensymphony.xwork2.Action;\n\nimport fi.hut.soberit.agilefant.business.DailyWorkBusiness;\nimport fi.hut.soberit.agilefant.business.TaskBusiness;\nimport fi.hut.soberit.agilefant.business.TransferObjectBusiness;\nimport fi.hut.soberit.agilefant.business.UserBusiness;\nimport fi.hut.soberit.agilefant.model.StoryRank;\nimport fi.hut.soberit.agilefant.model.Task;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.model.WhatsNextEntry;\nimport fi.hut.soberit.agilefant.transfer.AssignedWorkTO;\nimport fi.hut.soberit.agilefant.transfer.DailyWorkTaskTO;\nimport fi.hut.soberit.agilefant.transfer.StoryTO;\nimport fi.hut.soberit.agilefant.transfer.TaskTO;\n\npublic class DailyWorkActionTest {\n    private DailyWorkAction testable;\n\n        \n    private DailyWorkBusiness dailyWorkBusiness;\n    private UserBusiness userBusiness;\n    private TaskBusiness taskBusiness;\n    private TransferObjectBusiness transferObjectBusiness;\n\n    protected int LOGGED_IN_USER = 456;\n    \n    @SuppressWarnings(\"serial\")\n    @Before\n    public void setUp_dependencies() {\n        testable = new DailyWorkAction() {\n            @Override\n            protected int getLoggedInUserId() {\n                return LOGGED_IN_USER;\n            }\n        };\n        \n        dailyWorkBusiness = createStrictMock(DailyWorkBusiness.class);\n        testable.setDailyWorkBusiness(dailyWorkBusiness);\n\n        userBusiness = createStrictMock(UserBusiness.class);\n        testable.setUserBusiness(userBusiness);\n\n        taskBusiness = createStrictMock(TaskBusiness.class);\n        testable.setTaskBusiness(taskBusiness);\n        \n        transferObjectBusiness = createStrictMock(TransferObjectBusiness.class);\n        testable.setTransferObjectBusiness(transferObjectBusiness);\n    }\n    \n    private void replayAll() {\n        replay(dailyWorkBusiness, taskBusiness, userBusiness, transferObjectBusiness);\n    }\n\n    private void verifyAll() {\n        verify(dailyWorkBusiness, taskBusiness, userBusiness, transferObjectBusiness);\n    }\n    \n    @Test\n    public void testRetrieve() {\n        final int USER_ID = 42;\n        User user = new User(); \n        testable.setUserId(USER_ID);\n\n        Collection<DailyWorkTaskTO> returnedList  = Arrays.asList(\n            new DailyWorkTaskTO(new Task(), 1), \n            new DailyWorkTaskTO(new Task(), 2), \n            new DailyWorkTaskTO(new Task(), 4)\n        );\n\n        expect(userBusiness.retrieve(USER_ID)).andReturn(user);\n        expect(dailyWorkBusiness.getQueuedTasksForUser(user))\n            .andReturn(returnedList);\n\n        AssignedWorkTO assignedWork = new AssignedWorkTO();\n        expect(dailyWorkBusiness.getAssignedWorkFor(user))\n            .andReturn(assignedWork);\n        \n        expect(dailyWorkBusiness.getQueuedStoriesForUser(user)).andReturn(testable.getStories());\n        \n        replayAll();\n\n        assertEquals(Action.SUCCESS, testable.retrieve());\n\n        verifyAll();\n\n        assertEquals(returnedList,  testable.getQueuedTasks());\n                \n        assertEquals(user, testable.getUser());\n        assertEquals(USER_ID, testable.getUserId());\n        //assertSame(assignedWork.getStories(), testable.getStories());\n        assertSame(assignedWork.getTasksWithoutStory(), testable.getTasksWithoutStory());\n    }\n    \n    @Test\n    public void testDeleteFromQueue() {\n        User user = new User();\n        user.setId(LOGGED_IN_USER);\n        \n        Task task = new Task();\n        task.setId(1);\n        \n        testable.setTaskId(1);\n        \n        expect(userBusiness.retrieve(LOGGED_IN_USER)).andReturn(user);\n        expect(taskBusiness.retrieve(1)).andReturn(task);\n        dailyWorkBusiness.removeFromWhatsNext(user, task);\n        \n        TaskTO taskTO = new TaskTO(task);\n        expect(transferObjectBusiness.constructTaskTO(task)).andReturn(taskTO);\n\n        replayAll();\n        testable.deleteFromWorkQueue();\n        \n        verifyAll();\n        \n        // This is to be provided in JSON\n        assertSame(taskTO, testable.getTask());\n    }\n\n    @Test\n    public void testAddToQueue() {\n        User user = new User();\n        user.setId(3);\n        \n        Task task = new Task();\n        task.setId(1);\n        \n        testable.setTaskId(1);\n        testable.setUserId(3);\n        \n        expect(userBusiness.retrieve(3)).andReturn(user);\n        expect(taskBusiness.retrieve(1)).andReturn(task);\n        \n        WhatsNextEntry entry = new WhatsNextEntry();\n        expect(dailyWorkBusiness.addToWhatsNext(user, task)).andReturn(entry);\n\n        TaskTO taskTO = new TaskTO(task);\n        expect(transferObjectBusiness.constructTaskTO(task)).andReturn(taskTO);\n\n        replayAll();\n        testable.addToWorkQueue();\n        \n        verifyAll();\n        \n        // This is to be provided in JSON\n        assertSame(taskTO, testable.getTask());\n    }\n    \n    @Test\n    public void testRankQueueTaskAndMoveUnder() {\n        Task task = new Task();\n        task.setId(1);\n        \n        Task rankUnder = new Task();\n        rankUnder.setId(2);\n        \n        User user = new User();\n        user.setId(3);\n        \n        testable.setTaskId(1);\n        testable.setRankUnderId(2);\n        testable.setUserId(3);\n\n        expect(userBusiness.retrieve(3)).andReturn(user);\n        expect(taskBusiness.retrieve(1)).andReturn(task);\n        expect(taskBusiness.retrieveIfExists(2)).andReturn(rankUnder);\n        expect(dailyWorkBusiness.rankUnderTaskOnWhatsNext(user, task, rankUnder)).andReturn(new DailyWorkTaskTO(task));\n        \n        replayAll();\n        \n        testable.rankQueueTaskAndMoveUnder();\n        \n        verifyAll();\n    }\n    \n    @Test\n    public void testRetrieveWorkQueue() {\n        final int USER_ID = 42;\n        User user = new User(); \n        testable.setUserId(USER_ID);\n\n        Collection<DailyWorkTaskTO> returnedList  = Arrays.asList(\n            new DailyWorkTaskTO(new Task(), 1), \n            new DailyWorkTaskTO(new Task(), 2), \n            new DailyWorkTaskTO(new Task(), 4)\n        );\n\n        expect(userBusiness.retrieve(USER_ID)).andReturn(user);\n        expect(dailyWorkBusiness.getQueuedTasksForUser(user))\n            .andReturn(returnedList);\n        \n        replayAll();\n\n        assertEquals(Action.SUCCESS, testable.retrieveWorkQueue());\n\n        verifyAll();\n\n        assertEquals(returnedList,  testable.getQueuedTasks());\n    }\n    \n    @Test\n    public void testRetrieveAssignedTasks() {\n        final int USER_ID = 42;\n        User user = new User(); \n        testable.setUserId(USER_ID);\n\n        expect(userBusiness.retrieve(USER_ID)).andReturn(user);\n\n        AssignedWorkTO assignedWork = new AssignedWorkTO();\n        expect(dailyWorkBusiness.getAssignedWorkFor(user))\n            .andReturn(assignedWork);\n        \n        expect(dailyWorkBusiness.getQueuedStoriesForUser(user)).andReturn(testable.getStories());\n        \n        replayAll();\n\n        assertEquals(Action.SUCCESS, testable.retrieveAssignedStories());\n\n        verifyAll();\n                \n        assertEquals(user, testable.getUser());\n        assertEquals(USER_ID, testable.getUserId());\n        //assertSame(assignedWork.getStories(), testable.getStories());\n    }\n    \n    @Test\n    public void testRetrieveAssignedStories() {\n        final int USER_ID = 42;\n        User user = new User(); \n        testable.setUserId(USER_ID);\n\n        expect(userBusiness.retrieve(USER_ID)).andReturn(user);\n\n        AssignedWorkTO assignedWork = new AssignedWorkTO();\n        expect(dailyWorkBusiness.getAssignedWorkFor(user))\n            .andReturn(assignedWork);\n        \n        replayAll();\n\n        assertEquals(Action.SUCCESS, testable.retrieveAssignedTasks());\n\n        verifyAll();\n\n                \n        assertEquals(user, testable.getUser());\n        assertEquals(USER_ID, testable.getUserId());\n        assertSame(assignedWork.getTasksWithoutStory(), testable.getTasksWithoutStory());\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\HolidayActionTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["HolidayActionTest"], "SCS_ClassReference": ["SpringJUnit4ClassRunner", "MockContextLoader", "SpringAssertions", "HolidayAction", "holidayBusiness", "", "holidayAction", "", "holidayAction", "", "", null, "holidayBusiness", "", "holidayAction", "", "holidayAction", "", "", null, "userBusiness", "", null, "holidayBusiness", "", "holidayAction", "", "holidayAction", "", "", "holidayAction"], "AN": ["holidayAction", "userBusiness", "holidayBusiness", "holiday"], "SCS_VariableDeclarator": ["holidayAction", "userBusiness", "holidayBusiness", "holiday", "user", "holidays"], "MN": ["setUp", "testSpringScope", "testStore", "testRetrieve", "testFutureUserHolidays"], "PN": [], "SCS_MemberReference": ["holiday", "holiday", "holiday", "SUCCESS", "holiday", "SUCCESS", "user", "holidays", "user", "SUCCESS", "holidays"], "SCS_MethodInvocation": ["assertScopeAnnotation", "store", "replayAll", "setHoliday", "assertEquals", "store", "verifyAll", "expect", "andReturn", "retrieve", "replayAll", "setHolidayId", "assertEquals", "retrieve", "verifyAll", "expect", "andReturn", "retrieve", "expect", "andReturn", "retrieveFutureHolidaysByUser", "replayAll", "setUserId", "assertEquals", "futureUserHolidays", "verifyAll", "assertEquals", "getUserHolidays"], "SCS_VariableDeclaration": ["User", "List"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.test.annotation.DirtiesContext;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n\nimport com.opensymphony.xwork2.Action;\n\nimport static org.easymock.EasyMock.*;\nimport static org.junit.Assert.*;\n\nimport fi.hut.soberit.agilefant.business.HolidayBusiness;\nimport fi.hut.soberit.agilefant.business.UserBusiness;\nimport fi.hut.soberit.agilefant.model.Holiday;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.test.Mock;\nimport fi.hut.soberit.agilefant.test.MockContextLoader;\nimport fi.hut.soberit.agilefant.test.MockedTestCase;\nimport fi.hut.soberit.agilefant.test.SpringAssertions;\nimport fi.hut.soberit.agilefant.test.TestedBean;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(loader = MockContextLoader.class)\npublic class HolidayActionTest extends MockedTestCase {\n\n    @TestedBean\n    private HolidayAction holidayAction;\n    \n    @Mock(strict=true)\n    private UserBusiness userBusiness;\n    \n    @Mock(strict=true)\n    private HolidayBusiness holidayBusiness;\n    \n    private Holiday holiday;\n    \n    @Before\n    public void setUp() {\n        this.holiday = new Holiday();\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testSpringScope() {\n        SpringAssertions.assertScopeAnnotation(\"prototype\",\n                HolidayAction.class);\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testStore() {\n        holidayBusiness.store(holiday);\n        replayAll();\n        holidayAction.setHoliday(this.holiday);\n        assertEquals(Action.SUCCESS, holidayAction.store());\n        verifyAll();\n    }\n    \n    @Test \n    @DirtiesContext\n    public void testRetrieve() {\n        expect(holidayBusiness.retrieve(10)).andReturn(this.holiday);\n        replayAll();\n        holidayAction.setHolidayId(10);\n        assertEquals(Action.SUCCESS, holidayAction.retrieve());\n        verifyAll();\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testFutureUserHolidays() {\n        User user = new User();\n        List<Holiday> holidays = new ArrayList<Holiday>();\n        expect(userBusiness.retrieve(4)).andReturn(user);\n        expect(holidayBusiness.retrieveFutureHolidaysByUser(user)).andReturn(holidays);\n        replayAll();\n        holidayAction.setUserId(4);\n        assertEquals(Action.SUCCESS, holidayAction.futureUserHolidays());\n        verifyAll();\n        assertEquals(holidays, holidayAction.getUserHolidays());\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\HourEntryActionTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["HourEntryActionTest"], "AN": ["hourEntryAction", "hourEntryBusiness", "hourEntry", "user"], "SCS_VariableDeclarator": ["hourEntryAction", "hourEntryBusiness", "hourEntry", "user", "effortEntry", "userIds", "effortEntry", "userIds", "hourEntries", "hourEntries", "hourEntries", "hourEntries", "hourEntries", "hourEntries"], "MN": ["setUp_dependencies", "replayAll", "verifyAll", "setUp_data", "testDelete_nonExistentHourEntry", "testDelete_happyCase", "testRetrieve_noSuchHourEntry", "testLogStoryEffort", "testLogTaskEffort", "testRetrieveBacklogHourEntries", "testRetrieveBacklogHourEntries_withLimit", "testRetrieveStoryHourEntries", "testRetrieveStoryHourEntries_withLimit", "testRetrieveTaskHourEntries", "testRetrieveTaskHourEntries_withLimit"], "PN": [], "SCS_MemberReference": ["hourEntryAction", "hourEntryBusiness", "hourEntryBusiness", "hourEntryBusiness", "hourEntryBusiness", "user", "hourEntry", "hourEntry", "SUCCESS", "effortEntry", "userIds", "effortEntry", "userIds", "effortEntry", "userIds", "effortEntry", "userIds", "hourEntries", "SUCCESS", "hourEntries", "hourEntries", "SUCCESS", "hourEntries", "hourEntries", "SUCCESS", "hourEntries", "hourEntries", "SUCCESS", "hourEntries", "hourEntries", "SUCCESS", "hourEntries", "hourEntries", "SUCCESS", "hourEntries"], "SCS_ClassReference": ["", "HourEntryBusiness", "hourEntryAction", "", "", "user", "hourEntry", "ObjectNotFoundException", "hourEntryAction", "", null, "hourEntryBusiness", "", "hourEntryAction", "", "hourEntryAction", "hourEntry", "", null, "hourEntryBusiness", "hourEntry", "hourEntryBusiness", "hourEntry", "", "", "hourEntryAction", "", "ObjectNotFoundException", "hourEntryAction", "", null, "hourEntryBusiness", "", "hourEntryAction", "", "hourEntryBusiness", "", "hourEntryAction", "hourEntryAction", "hourEntryAction", "hourEntryAction", "", "hourEntryBusiness", "", "hourEntryAction", "hourEntryAction", "hourEntryAction", "hourEntryAction", "", "hourEntryAction", "", null, "hourEntryBusiness", "", "", "hourEntryAction", "", "hourEntryAction", "", "hourEntryAction", "hourEntryAction", "", null, "hourEntryBusiness", "", "", "hourEntryAction", "", "hourEntryAction", "", "hourEntryAction", "", null, "hourEntryBusiness", "", "", "hourEntryAction", "", "hourEntryAction", "", "hourEntryAction", "hourEntryAction", "", null, "hourEntryBusiness", "", "", "hourEntryAction", "", "hourEntryAction", "", "hourEntryAction", "", null, "hourEntryBusiness", "", "", "hourEntryAction", "", "hourEntryAction", "", "hourEntryAction", "hourEntryAction", "", null, "hourEntryBusiness", "", "", "hourEntryAction", "", "hourEntryAction", ""], "SCS_MethodInvocation": ["createMock", "setHourEntryBusiness", "replay", "verify", "setId", "setId", "setHourEntryId", "expect", "andThrow", "retrieve", "replayAll", "delete", "verifyAll", "setHourEntryId", "getId", "expect", "andReturn", "retrieve", "getId", "delete", "getId", "replayAll", "assertEquals", "delete", "verifyAll", "setHourEntryId", "expect", "andThrow", "retrieve", "replayAll", "retrieve", "verifyAll", "logStoryEffort", "replayAll", "setParentObjectId", "setHourEntry", "setUserIds", "logStoryEffort", "verifyAll", "logTaskEffort", "replayAll", "setParentObjectId", "setHourEntry", "setUserIds", "logTaskEffort", "verifyAll", "setParentObjectId", "expect", "andReturn", "retrieveBacklogHourEntries", "replayAll", "assertEquals", "retrieveBacklogHourEntries", "assertSame", "getHourEntries", "verifyAll", "setParentObjectId", "setLimited", "expect", "andReturn", "retrieveBacklogHourEntries", "replayAll", "assertEquals", "retrieveBacklogHourEntries", "assertSame", "getHourEntries", "verifyAll", "setParentObjectId", "expect", "andReturn", "retrieveStoryHourEntries", "replayAll", "assertEquals", "retrieveStoryHourEntries", "assertSame", "getHourEntries", "verifyAll", "setParentObjectId", "setLimited", "expect", "andReturn", "retrieveStoryHourEntries", "replayAll", "assertEquals", "retrieveStoryHourEntries", "assertSame", "getHourEntries", "verifyAll", "setParentObjectId", "expect", "andReturn", "retrieveTaskHourEntries", "replayAll", "assertEquals", "retrieveTaskHourEntries", "assertSame", "getHourEntries", "verifyAll", "setParentObjectId", "setLimited", "expect", "andReturn", "retrieveTaskHourEntries", "replayAll", "assertEquals", "retrieveTaskHourEntries", "assertSame", "getHourEntries", "verifyAll"], "SCS_VariableDeclaration": ["HourEntry", "Set", "HourEntry", "Set", "List", "List", "List", "List", "List", "List"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport static org.easymock.EasyMock.*;\nimport static org.junit.Assert.*;\n\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport com.opensymphony.xwork2.Action;\n\nimport fi.hut.soberit.agilefant.business.HourEntryBusiness;\nimport fi.hut.soberit.agilefant.exception.ObjectNotFoundException;\nimport fi.hut.soberit.agilefant.model.HourEntry;\nimport fi.hut.soberit.agilefant.model.User;\n\npublic class HourEntryActionTest {\n    \n    private HourEntryAction hourEntryAction;\n\n    private HourEntryBusiness hourEntryBusiness;\n    \n    private HourEntry hourEntry;\n    private User user;\n    \n    @Before\n    public void setUp_dependencies() {\n        hourEntryAction = new HourEntryAction();\n        \n        hourEntryBusiness = createMock(HourEntryBusiness.class);\n        hourEntryAction.setHourEntryBusiness(hourEntryBusiness);\n    }\n    \n    private void replayAll() {\n        replay(hourEntryBusiness);\n    }\n    \n    private void verifyAll() {\n        verify(hourEntryBusiness);\n    }\n    \n    @Before\n    public void setUp_data() {\n        user = new User();\n        user.setId(10);\n\n        hourEntry = new HourEntry();\n        hourEntry.setId(1);\n    }\n    \n    @Test(expected = ObjectNotFoundException.class)\n    public void testDelete_nonExistentHourEntry() {\n        hourEntryAction.setHourEntryId(-1);\n        expect(hourEntryBusiness.retrieve(-1))\n            .andThrow(new ObjectNotFoundException());\n        replayAll();\n        \n        hourEntryAction.delete();\n        \n        verifyAll();\n    }\n    \n    @Test\n    public void testDelete_happyCase() {\n        hourEntryAction.setHourEntryId(hourEntry.getId());\n        \n        expect(hourEntryBusiness.retrieve(hourEntry.getId())).andReturn(hourEntry);\n        hourEntryBusiness.delete(hourEntry.getId());\n        replayAll();\n        \n        assertEquals(Action.SUCCESS, hourEntryAction.delete());\n        \n        verifyAll();\n    }\n    \n    @Test(expected = ObjectNotFoundException.class)\n    public void testRetrieve_noSuchHourEntry() {\n        hourEntryAction.setHourEntryId(-1);\n        expect(hourEntryBusiness.retrieve(-1)).andThrow(new ObjectNotFoundException());\n        replayAll();\n        \n        hourEntryAction.retrieve();\n        \n        verifyAll();\n    }  \n    \n    @Test\n    public void testLogStoryEffort() {\n        HourEntry effortEntry = new HourEntry();\n        Set<Integer> userIds = new HashSet<Integer>();\n        hourEntryBusiness.logStoryEffort(1, effortEntry, userIds);\n        replayAll();\n        hourEntryAction.setParentObjectId(1);\n        hourEntryAction.setHourEntry(effortEntry);\n        hourEntryAction.setUserIds(userIds);\n        hourEntryAction.logStoryEffort();\n        verifyAll();\n    }\n    \n    @Test\n    public void testLogTaskEffort() {\n        HourEntry effortEntry = new HourEntry();\n        Set<Integer> userIds = new HashSet<Integer>();\n        hourEntryBusiness.logTaskEffort(1, effortEntry, userIds);\n        replayAll();\n        hourEntryAction.setParentObjectId(1);\n        hourEntryAction.setHourEntry(effortEntry);\n        hourEntryAction.setUserIds(userIds);\n        hourEntryAction.logTaskEffort();\n        verifyAll();\n    }\n    \n    @Test\n    public void testRetrieveBacklogHourEntries() {\n        List<HourEntry> hourEntries = new ArrayList<HourEntry>();\n        hourEntryAction.setParentObjectId(100);\n        expect(hourEntryBusiness.retrieveBacklogHourEntries(100, false)).andReturn(hourEntries);\n        replayAll();\n        assertEquals(Action.SUCCESS, hourEntryAction.retrieveBacklogHourEntries());\n        assertSame(hourEntries, hourEntryAction.getHourEntries());\n        verifyAll();\n    }\n\n    @Test\n    public void testRetrieveBacklogHourEntries_withLimit() {\n        List<HourEntry> hourEntries = new ArrayList<HourEntry>();\n        hourEntryAction.setParentObjectId(100);\n        hourEntryAction.setLimited(true);\n        expect(hourEntryBusiness.retrieveBacklogHourEntries(100, true)).andReturn(hourEntries);\n        replayAll();\n        assertEquals(Action.SUCCESS, hourEntryAction.retrieveBacklogHourEntries());\n        assertSame(hourEntries, hourEntryAction.getHourEntries());\n        verifyAll();\n    }\n\n    @Test\n    public void testRetrieveStoryHourEntries() {\n        List<HourEntry> hourEntries = new ArrayList<HourEntry>();\n        hourEntryAction.setParentObjectId(100);\n        expect(hourEntryBusiness.retrieveStoryHourEntries(100, false)).andReturn(hourEntries);\n        replayAll();\n        assertEquals(Action.SUCCESS, hourEntryAction.retrieveStoryHourEntries());\n        assertSame(hourEntries, hourEntryAction.getHourEntries());\n        verifyAll();\n    }\n\n    @Test\n    public void testRetrieveStoryHourEntries_withLimit() {\n        List<HourEntry> hourEntries = new ArrayList<HourEntry>();\n        hourEntryAction.setParentObjectId(100);\n        hourEntryAction.setLimited(true);\n        expect(hourEntryBusiness.retrieveStoryHourEntries(100, true)).andReturn(hourEntries);\n        replayAll();\n        assertEquals(Action.SUCCESS, hourEntryAction.retrieveStoryHourEntries());\n        assertSame(hourEntries, hourEntryAction.getHourEntries());\n        verifyAll();\n    }\n\n    @Test\n    public void testRetrieveTaskHourEntries() {\n        List<HourEntry> hourEntries = new ArrayList<HourEntry>();\n        hourEntryAction.setParentObjectId(100);\n        expect(hourEntryBusiness.retrieveTaskHourEntries(100, false)).andReturn(hourEntries);\n        replayAll();\n        assertEquals(Action.SUCCESS, hourEntryAction.retrieveTaskHourEntries());\n        assertSame(hourEntries, hourEntryAction.getHourEntries());\n        verifyAll();\n    }\n\n    @Test\n    public void testRetrieveTaskHourEntries_withLimit() {\n        List<HourEntry> hourEntries = new ArrayList<HourEntry>();\n        hourEntryAction.setParentObjectId(100);\n        hourEntryAction.setLimited(true);\n        expect(hourEntryBusiness.retrieveTaskHourEntries(100, true)).andReturn(hourEntries);\n        replayAll();\n        assertEquals(Action.SUCCESS, hourEntryAction.retrieveTaskHourEntries());\n        assertSame(hourEntries, hourEntryAction.getHourEntries());\n        verifyAll();\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\IterationActionTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["IterationActionTest"], "AN": ["iterationAction", "iterationBusiness", "storyBusiness"], "SCS_VariableDeclarator": ["iterationAction", "iterationBusiness", "storyBusiness", "parent", "iter", "iter", "iter", "parent", "iter", "iter2", "transfer", "iter", "assignments"], "MN": ["setUp", "verifyAll", "replayAll", "testRetrieve", "testFetchIterationData", "testDelete_success", "testDelete_failure", "testDelete_noSuchIteration", "testDelete_forbidden", "testStore", "testIterationAssignments"], "PN": [], "SCS_MemberReference": ["iterationAction", "iterationBusiness", "storyBusiness", "iterationBusiness", "storyBusiness", "iterationBusiness", "storyBusiness", "iterationBusiness", "storyBusiness", "parent", "iter", "iter", "iter", "SUCCESS", "parent", "iter", "iter", "SUCCESS", "parent", "iter", "parent", "ERROR", "iter2", "transfer", "iter", "iter", "transfer", "iter", "assignments", "iter", "assignments"], "SCS_ClassReference": ["iterationAction", "", "IterationBusiness", "", "StoryBusiness", "iterationAction", "iterationAction", "", "", "iter", "", null, "iterationBusiness", "", null, "storyBusiness", "", null, "iterationBusiness", "", "", "iterationAction", "", "", "iterationAction", "iterationAction", "", null, "iterationBusiness", "", null, "iterationBusiness", "", "", "iterationAction", "", "", "IterationTO", "iterationAction", null, "iter", "", null, "iterationBusiness", "iterationBusiness", "", "iterationAction", "", "iterationAction", "", "iterationAction", "", "", "iterationAction", "", "iterationAction", "", "ObjectNotFoundException", "iterationAction", "iterationBusiness", "", null, "iterationBusiness", "", "iterationAction", "iterationAction", "", "ConstraintViolationException", "iterationBusiness", "", null, "", null, "iterationBusiness", "", "iterationAction", "iterationAction", "", "", null, "iterationBusiness", "", "iterationAction", "iterationAction", "iterationAction", "iterationAction", "", "iterationAction", "", "", null, "iterationBusiness", "", null, "iterationBusiness", "", "iterationAction", "iterationAction", "", "", "iterationAction"], "SCS_MethodInvocation": ["setIterationId", "createMock", "createMock", "setIterationBusiness", "setStoryBusiness", "verify", "replay", "setParent", "expect", "andReturn", "retrieve", "expect", "andReturn", "retrieveStoriesInIteration", "expect", "andReturn", "getIterationMetrics", "replayAll", "assertEquals", "retrieve", "verifyAll", "assertEquals", "getParentBacklog", "setIterationId", "expect", "andReturn", "retrieve", "expect", "andReturn", "getIterationContents", "replayAll", "assertEquals", "fetchIterationData", "verifyAll", "assertEquals", "getIteration", "getClass", "setParent", "expect", "andReturn", "retrieve", "deleteAndUpdateHistory", "replayAll", "setConfirmationString", "assertEquals", "delete", "assertEquals", "getParentBacklog", "verifyAll", "replayAll", "setConfirmationString", "assertEquals", "delete", "verifyAll", "setIterationId", "deleteAndUpdateHistory", "expect", "andThrow", "retrieve", "replayAll", "setConfirmationString", "delete", "verifyAll", "deleteAndUpdateHistory", "expectLastCall", "andThrow", "expect", "andReturn", "retrieve", "replayAll", "setConfirmationString", "delete", "verifyAll", "expect", "andReturn", "store", "replayAll", "setIteration", "setIterationId", "setParentBacklogId", "store", "assertEquals", "getIteration", "verifyAll", "expect", "andReturn", "retrieve", "expect", "andReturn", "calculateAssignedLoadPerAssignee", "replayAll", "setIterationId", "iterationAssignments", "verifyAll", "assertSame", "getAssignments"], "SCS_VariableDeclaration": ["Project", "Iteration", "Iteration", "Iteration", "Project", "Iteration", "Iteration", "IterationTO", "Iteration", "Set"], "CO": ["/**\n * Struts test case extends jUnit 3's <code>TestCase</code>.\n * Therefore, the tests must be written in jUnit 3 style.\n */", "// Class under test", "// Dependencies"], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport static org.easymock.EasyMock.*;\nimport static org.junit.Assert.*;\n\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Set;\n\nimport org.hibernate.exception.ConstraintViolationException;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport com.opensymphony.xwork2.Action;\n\nimport fi.hut.soberit.agilefant.business.IterationBusiness;\nimport fi.hut.soberit.agilefant.business.StoryBusiness;\nimport fi.hut.soberit.agilefant.exception.ObjectNotFoundException;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.Project;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.transfer.AssignmentTO;\nimport fi.hut.soberit.agilefant.transfer.IterationMetrics;\nimport fi.hut.soberit.agilefant.transfer.IterationTO;\n\n/**\n * Struts test case extends jUnit 3's <code>TestCase</code>.\n * Therefore, the tests must be written in jUnit 3 style.\n */\npublic class IterationActionTest {\n    \n    // Class under test\n    IterationAction iterationAction;\n    \n    // Dependencies\n    IterationBusiness iterationBusiness;\n    \n    StoryBusiness storyBusiness;\n    \n    @Before\n    public void setUp() {\n        iterationAction = new IterationAction();\n        iterationAction.setIterationId(1);\n        iterationBusiness = createMock(IterationBusiness.class);\n        storyBusiness = createMock(StoryBusiness.class);\n        iterationAction.setIterationBusiness(iterationBusiness);\n        iterationAction.setStoryBusiness(storyBusiness);\n    }\n    \n    private void verifyAll() {\n        verify(iterationBusiness, storyBusiness);\n    }\n\n    private void replayAll() {\n        replay(iterationBusiness, storyBusiness);\n    }\n    \n    @Test\n    public void testRetrieve() {\n        Project parent = new Project();\n        Iteration iter = new Iteration();\n        iter.setParent(parent);\n               \n        expect(iterationBusiness.retrieve(1)).andReturn(iter);\n        expect(storyBusiness.retrieveStoriesInIteration(iter)).andReturn(new ArrayList<Story>());\n        expect(iterationBusiness.getIterationMetrics(iter)).andReturn(\n                new IterationMetrics());\n        replayAll();\n        assertEquals(Action.SUCCESS, iterationAction.retrieve());\n        verifyAll();\n        \n        assertEquals(parent, iterationAction.getParentBacklog());\n    }\n    \n    @Test\n    public void testFetchIterationData() {\n        Iteration iter = new Iteration();\n        \n        iterationAction.setIterationId(123);\n        \n        expect(iterationBusiness.retrieve(123)).andReturn(iter);\n        expect(iterationBusiness.getIterationContents(123)).andReturn(new IterationTO(iter));\n        \n        replayAll();\n        assertEquals(Action.SUCCESS, iterationAction.fetchIterationData());\n        verifyAll();\n        \n        assertEquals(IterationTO.class, iterationAction.getIteration().getClass());\n    }\n    \n    @Test\n    public void testDelete_success() {\n        Iteration iter = new Iteration();\n        Project parent = new Project(); \n        iter.setParent(parent);\n        expect(iterationBusiness.retrieve(1)).andReturn(iter);        \n        iterationBusiness.deleteAndUpdateHistory(1);\n        replayAll();\n        iterationAction.setConfirmationString(\"yes\");\n        assertEquals(\"redirect-parent\", iterationAction.delete());\n        assertEquals(parent, iterationAction.getParentBacklog());\n        verifyAll();    \n    }\n    \n    @Test\n    public void testDelete_failure() {\n        replayAll();\n        iterationAction.setConfirmationString(\"no\");\n        assertEquals(Action.ERROR, iterationAction.delete());\n        \n        verifyAll();    \n    }\n\n    \n    @Test(expected = ObjectNotFoundException.class)\n    public void testDelete_noSuchIteration() {\n        iterationAction.setIterationId(-1);\n        iterationBusiness.deleteAndUpdateHistory(-1);\n        expect(iterationBusiness.retrieve(-1)).andThrow(new ObjectNotFoundException());\n        replayAll();\n        iterationAction.setConfirmationString(\"yes\");\n        iterationAction.delete();\n        \n        verifyAll();    \n    }\n    \n    @Test(expected = ConstraintViolationException.class)\n    public void testDelete_forbidden() {\n        iterationBusiness.deleteAndUpdateHistory(1);\n        expectLastCall().andThrow(new ConstraintViolationException(null, null, null));\n        expect(iterationBusiness.retrieve(1)).andReturn(new Iteration());\n        replayAll();\n        iterationAction.setConfirmationString(\"yes\");\n        iterationAction.delete();\n        \n        verifyAll(); \n    }\n    \n    @Test\n    public void testStore() {\n        Iteration iter = new Iteration();\n        Iteration iter2 = new Iteration();\n        IterationTO transfer = new IterationTO(iter2);\n        expect(iterationBusiness.store(1, 2, iter, null, null)).andReturn(transfer);\n        replayAll();\n        iterationAction.setIteration(iter);\n        iterationAction.setIterationId(1);\n        iterationAction.setParentBacklogId(2);\n        iterationAction.store();\n        assertEquals(transfer, iterationAction.getIteration());\n        verifyAll();\n    }\n    \n    @Test\n    public void testIterationAssignments() {\n        Iteration iter = new Iteration();\n        Set<AssignmentTO> assignments = new HashSet<AssignmentTO>();\n        \n        expect(iterationBusiness.retrieve(1)).andReturn(iter);\n        expect(iterationBusiness.calculateAssignedLoadPerAssignee(iter)).andReturn(assignments);\n        replayAll();\n        iterationAction.setIterationId(1);\n        iterationAction.iterationAssignments();\n        verifyAll();\n        assertSame(assignments, iterationAction.getAssignments());\n    }\n    \n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\IterationHistoryActionTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["IterationHistoryActionTest"], "SCS_ClassReference": ["SpringJUnit4ClassRunner", "MockContextLoader", "", null, "iterationBusiness", "", null, "iterationBusiness", "", null, "iterationBusiness", "", null, "iterationBusiness", "", "iterationHistoryAction", "", "iterationHistoryAction", "", "", "iterationHistoryAction"], "AN": ["iterationHistoryAction", "iterationBusiness"], "SCS_VariableDeclarator": ["iterationHistoryAction", "iterationBusiness", "iter", "items"], "MN": ["testExecute"], "PN": [], "SCS_VariableDeclaration": ["Iteration", "List"], "SCS_MethodInvocation": ["expect", "andReturn", "retrieve", "expect", "andReturn", "retrieveChangesInIterationStories", "expect", "andReturn", "retrieveChangesInIterationTasks", "expect", "andReturn", "renderSortedTaskAndStoryRevisions", "replayAll", "setIterationId", "assertEquals", "execute", "verifyAll", "assertEquals", "getStoryHistory"], "SCS_MemberReference": ["iter", "items", "iter", "iter", "iter", "SUCCESS", "items"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport static org.easymock.EasyMock.expect;\nimport static org.junit.Assert.assertEquals;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.test.annotation.DirtiesContext;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n\nimport com.opensymphony.xwork2.ActionSupport;\n\nimport fi.hut.soberit.agilefant.business.IterationBusiness;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.test.Mock;\nimport fi.hut.soberit.agilefant.test.MockContextLoader;\nimport fi.hut.soberit.agilefant.test.MockedTestCase;\nimport fi.hut.soberit.agilefant.test.TestedBean;\nimport fi.hut.soberit.agilefant.transfer.AgilefantHistoryEntry;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(loader = MockContextLoader.class)\npublic class IterationHistoryActionTest extends MockedTestCase {\n\n    @TestedBean\n    private IterationHistoryAction iterationHistoryAction;\n    @Mock\n    private IterationBusiness iterationBusiness;\n    \n    @Test\n    @DirtiesContext\n    public void testExecute() {\n        Iteration iter = new Iteration();\n        List<AgilefantHistoryEntry> items = new ArrayList<AgilefantHistoryEntry>();\n        \n        expect(iterationBusiness.retrieve(1)).andReturn(iter);\n        expect(iterationBusiness.retrieveChangesInIterationStories(iter)).andReturn(items);\n        expect(iterationBusiness.retrieveChangesInIterationTasks(iter)).andReturn(new ArrayList<AgilefantHistoryEntry>());\n        expect(iterationBusiness.renderSortedTaskAndStoryRevisions(iter)).andReturn(null);\n        replayAll();\n        iterationHistoryAction.setIterationId(1);\n        assertEquals(ActionSupport.SUCCESS, iterationHistoryAction.execute());\n        verifyAll();\n        assertEquals(items, iterationHistoryAction.getStoryHistory());\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\LabelActionTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["LabelActionTest"], "SCS_ClassReference": ["SpringJUnit4ClassRunner", "MockContextLoader", "story", "iter", "labelNames", "labelNames", "labelBusiness", "labelAction", "labelAction", "", "", "labelAction", "", "", null, "labelBusiness", "labelAction", "", "", "labelAction", "", "labelAction", ""], "AN": ["labelAction", "storyBusiness", "labelBusiness", "backlogBusiness", "labelNames", "storyId", "story", "iter"], "SCS_VariableDeclarator": ["labelAction", "storyBusiness", "labelBusiness", "backlogBusiness", "labelNames", "storyId", "story", "iter", "storyId", "labelList"], "MN": ["setUp", "testAddLabels", "testLookupLabels"], "PN": [], "SCS_MemberReference": ["labelNames", "story", "iter", "labelNames", "storyId", "labelNames", "storyId", "SUCCESS", "labelList", "SUCCESS", "labelList"], "SCS_MethodInvocation": ["setId", "setId", "add", "add", "createStoryLabels", "setLabelNames", "setStoryId", "replayAll", "assertEquals", "addStoryLabels", "verifyAll", "expect", "andReturn", "lookupLabelsLike", "setLabelName", "replayAll", "assertEquals", "lookupLabels", "assertSame", "getLabels", "verifyAll"], "SCS_VariableDeclaration": ["Integer", "ArrayList"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport static org.easymock.EasyMock.expect;\nimport static org.junit.Assert.*;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.test.annotation.DirtiesContext;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n\nimport com.opensymphony.xwork2.Action;\n\nimport fi.hut.soberit.agilefant.business.BacklogBusiness;\nimport fi.hut.soberit.agilefant.business.LabelBusiness;\nimport fi.hut.soberit.agilefant.business.StoryBusiness;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.Label;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.test.Mock;\nimport fi.hut.soberit.agilefant.test.MockContextLoader;\nimport fi.hut.soberit.agilefant.test.MockedTestCase;\nimport fi.hut.soberit.agilefant.test.TestedBean;\n\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(loader = MockContextLoader.class)\npublic class LabelActionTest extends MockedTestCase {\n\n    @TestedBean\n    LabelAction labelAction;\n    \n    @Mock\n    StoryBusiness storyBusiness;\n    \n    @Mock\n    LabelBusiness labelBusiness;\n        \n    @Mock\n    BacklogBusiness backlogBusiness;\n    \n    List<String> labelNames;\n    Integer storyId;\n    \n    Story story;\n    Iteration iter;\n          \n    @Before\n    public void setUp() {\n        labelNames = new ArrayList<String>();\n        story = new Story();\n        story.setId(1);\n        iter = new Iteration();\n        iter.setId(6446);\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testAddLabels() {\n        Integer storyId = 1;\n        labelNames.add(\"Kissa\");\n        labelNames.add(\"Koira\");\n        labelBusiness.createStoryLabels(labelNames, storyId);\n        labelAction.setLabelNames(labelNames);\n        labelAction.setStoryId(storyId);\n        replayAll();\n        assertEquals(Action.SUCCESS, labelAction.addStoryLabels());\n        verifyAll();\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testLookupLabels() {\n        ArrayList<Label> labelList = new ArrayList<Label>();\n        expect(labelBusiness.lookupLabelsLike(\"K\")).andReturn(labelList);\n        labelAction.setLabelName(\"K\");\n        replayAll();\n        assertEquals(Action.SUCCESS, labelAction.lookupLabels());\n        assertSame(labelList, labelAction.getLabels());\n        verifyAll();\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\LoginContextActionTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["LoginContextActionTest"], "SCS_ClassReference": ["SpringJUnit4ClassRunner", "MockContextLoader", "", null, "loginBusiness", "EasyMock", "User", "", null, "settingBusiness", "loginBusiness", "", "Login", "", "", "testable", "", "", null, "loginBusiness", "EasyMock", "User", "", null, "settingBusiness", "loginBusiness", "", "Login", "", "", "testable", "", "", null, "loginBusiness", "EasyMock", "User", "loginBusiness", "", "Login", "", "", "testable", "", "", null, "loginBusiness", "EasyMock", "User", "loginBusiness", "", "Login", "", "", "testable", ""], "AN": ["testable", "settingBusiness", "backlogBusiness", "userBusiness", "loginBusiness"], "SCS_VariableDeclarator": ["testable", "settingBusiness", "backlogBusiness", "userBusiness", "loginBusiness"], "MN": ["testLoginContext_dailyWorkEnabled", "testLoginContext_dailyWorkDisabled", "testLoginContext_noBacklogs_dailyWorkDisabled", "testLoginContext_noBacklogs_dailyWorkEnabled"], "PN": [], "SCS_MethodInvocation": ["expect", "andReturn", "retrieveLoginCountByUser", "anyObject", "expect", "andReturn", "isDailyWork", "store", "anyObject", "replayAll", "assertEquals", "execute", "verifyAll", "expect", "andReturn", "retrieveLoginCountByUser", "anyObject", "expect", "andReturn", "isDailyWork", "store", "anyObject", "replayAll", "assertEquals", "execute", "verifyAll", "expect", "andReturn", "retrieveLoginCountByUser", "anyObject", "store", "anyObject", "replayAll", "assertEquals", "execute", "verifyAll", "expect", "andReturn", "retrieveLoginCountByUser", "anyObject", "store", "anyObject", "replayAll", "assertEquals", "execute", "verifyAll"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport static org.easymock.EasyMock.*;\nimport static org.junit.Assert.*;\n\nimport org.easymock.EasyMock;\nimport org.easymock.IAnswer;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.test.annotation.DirtiesContext;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n\nimport fi.hut.soberit.agilefant.business.BacklogBusiness;\nimport fi.hut.soberit.agilefant.business.LoginBusiness;\nimport fi.hut.soberit.agilefant.business.SettingBusiness;\nimport fi.hut.soberit.agilefant.business.UserBusiness;\nimport fi.hut.soberit.agilefant.model.Login;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.test.Mock;\nimport fi.hut.soberit.agilefant.test.MockContextLoader;\nimport fi.hut.soberit.agilefant.test.MockedTestCase;\nimport fi.hut.soberit.agilefant.test.TestedBean;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(loader = MockContextLoader.class)\npublic class LoginContextActionTest extends MockedTestCase {\n\n    @TestedBean\n    private LoginContextAction testable;\n    \n    @Mock\n    private SettingBusiness settingBusiness;\n    \n    @Mock\n    private BacklogBusiness backlogBusiness;\n    \n    @Mock\n    private UserBusiness userBusiness;\n    \n    @Mock\n    private LoginBusiness loginBusiness;\n    \n    \n    @Test\n    @DirtiesContext\n    public void testLoginContext_dailyWorkEnabled() {\n        expect(loginBusiness.retrieveLoginCountByUser(EasyMock.anyObject(User.class))).andReturn(10);\n        expect(settingBusiness.isDailyWork()).andReturn(true);\n        loginBusiness.store(anyObject(Login.class));\n        replayAll();\n        assertEquals(\"dailyWork\", testable.execute());\n        verifyAll();\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testLoginContext_dailyWorkDisabled() {\n        expect(loginBusiness.retrieveLoginCountByUser(EasyMock.anyObject(User.class))).andReturn(10);\n        expect(settingBusiness.isDailyWork()).andReturn(false);\n        loginBusiness.store(anyObject(Login.class));\n        replayAll();\n        assertEquals(\"selectBacklog\", testable.execute());\n        verifyAll();\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testLoginContext_noBacklogs_dailyWorkDisabled() {\n        expect(loginBusiness.retrieveLoginCountByUser(EasyMock.anyObject(User.class))).andReturn(0);\n        loginBusiness.store(anyObject(Login.class));\n        replayAll();\n        assertEquals(\"help\", testable.execute());\n        verifyAll();\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testLoginContext_noBacklogs_dailyWorkEnabled() {\n        expect(loginBusiness.retrieveLoginCountByUser(EasyMock.anyObject(User.class))).andReturn(0);\n        loginBusiness.store(anyObject(Login.class));\n        replayAll();\n        assertEquals(\"help\", testable.execute());\n        verifyAll();\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\MenuActionTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["MenuActionTest"], "AN": ["menuAction", "menuBusiness"], "SCS_VariableDeclarator": ["menuAction", "menuBusiness"], "MN": ["setUp_dependencies", "replayAll", "verifyAll", "testConstructBacklogMenuData", "testConstructAssignmentData"], "PN": [], "SCS_MemberReference": ["menuAction", "menuBusiness", "menuBusiness", "menuBusiness", "menuBusiness", "SUCCESS", "SUCCESS"], "SCS_ClassReference": ["", "MenuBusiness", "menuAction", "", "", "", null, "Arrays", "menuBusiness", "", "", "menuAction", "", "", null, "Arrays", "menuBusiness", "SecurityUtil", "", "", "menuAction", ""], "SCS_MethodInvocation": ["createStrictMock", "setMenuBusiness", "replay", "verify", "expect", "andReturn", "asList", "constructBacklogMenuData", "replayAll", "assertEquals", "constructBacklogMenuData", "verifyAll", "expect", "andReturn", "asList", "constructMyAssignmentsData", "getLoggedUser", "replayAll", "assertEquals", "constructAssignmentData", "verifyAll"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport static org.easymock.EasyMock.createStrictMock;\nimport static org.easymock.EasyMock.expect;\nimport static org.easymock.EasyMock.replay;\nimport static org.easymock.EasyMock.verify;\nimport static org.junit.Assert.assertEquals;\n\nimport java.util.Arrays;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport com.opensymphony.xwork2.Action;\n\nimport fi.hut.soberit.agilefant.business.MenuBusiness;\nimport fi.hut.soberit.agilefant.security.SecurityUtil;\nimport fi.hut.soberit.agilefant.transfer.MenuDataNode;\n\npublic class MenuActionTest {\n\n    MenuAction menuAction;\n    \n    MenuBusiness menuBusiness;\n    \n    @Before\n    public void setUp_dependencies() {\n        menuAction = new MenuAction();\n        \n        menuBusiness = createStrictMock(MenuBusiness.class);\n        menuAction.setMenuBusiness(menuBusiness);\n    }\n    \n    private void replayAll() {\n        replay(menuBusiness);\n    }\n\n    private void verifyAll() {\n        verify(menuBusiness);\n    }\n    \n    @Test\n    public void testConstructBacklogMenuData() {\n        expect(menuBusiness.constructBacklogMenuData()).andReturn(\n                Arrays.asList(new MenuDataNode()));\n        replayAll();\n        assertEquals(Action.SUCCESS, menuAction.constructBacklogMenuData());\n        verifyAll();\n    }\n    \n    @Test\n    public void testConstructAssignmentData() {\n        expect(menuBusiness.constructMyAssignmentsData(SecurityUtil.getLoggedUser())).andReturn(Arrays.asList(new MenuDataNode()));\n        replayAll();\n        assertEquals(Action.SUCCESS, menuAction.constructAssignmentData());\n        verifyAll();\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\MultipleStoryActionTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["MultipleStoryActionTest"], "SCS_ClassReference": ["SpringJUnit4ClassRunner", "MockContextLoader", "Arrays", "storyBatchBusiness", "", "multipleStoryAction", "multipleStoryAction", "multipleStoryAction", "multipleStoryAction", ""], "AN": ["multipleStoryAction", "storyBatchBusiness"], "SCS_VariableDeclarator": ["multipleStoryAction", "storyBatchBusiness", "labels", "storyIds"], "MN": ["testUpdateMultipleStories"], "PN": [], "SCS_VariableDeclaration": ["List", "Set"], "SCS_MethodInvocation": ["asList", "modifyMultiple", "replayAll", "setLabelNames", "setStoryIds", "setState", "updateMultipleStories", "verifyAll"], "SCS_MemberReference": ["storyIds", "STARTED", "labels", "labels", "storyIds", "STARTED"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.test.annotation.DirtiesContext;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n\nimport fi.hut.soberit.agilefant.business.StoryBatchBusiness;\nimport fi.hut.soberit.agilefant.model.StoryState;\nimport fi.hut.soberit.agilefant.test.Mock;\nimport fi.hut.soberit.agilefant.test.MockContextLoader;\nimport fi.hut.soberit.agilefant.test.MockedTestCase;\nimport fi.hut.soberit.agilefant.test.TestedBean;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(loader = MockContextLoader.class)\npublic class MultipleStoryActionTest  extends MockedTestCase {\n\n    @TestedBean\n    private MultipleStoryAction multipleStoryAction;\n    @Mock\n    private StoryBatchBusiness storyBatchBusiness;\n    \n    @Test\n    @DirtiesContext\n    public void testUpdateMultipleStories() {\n        List<String> labels = new ArrayList<String>();\n        Set<Integer> storyIds = new HashSet<Integer>(Arrays.asList(1,2));\n        \n        storyBatchBusiness.modifyMultiple(storyIds, StoryState.STARTED, labels);\n        \n        replayAll();\n        multipleStoryAction.setLabelNames(labels);\n        multipleStoryAction.setStoryIds(storyIds);\n        multipleStoryAction.setState(StoryState.STARTED);\n        \n        multipleStoryAction.updateMultipleStories();\n        verifyAll();\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\PasswordActionTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["PasswordActionTest"], "AN": ["TESTUSER_ID", "userBusiness", "passwordBusiness", "action"], "SCS_VariableDeclarator": ["TESTUSER_ID", "userBusiness", "passwordBusiness", "action", "user"], "MN": ["setUp", "createTestUser", "runTest", "testGenerate", "testGenerateWithUnknownName", "testGenerateWithWrongEmail"], "PN": ["returnedUser", "name", "email", "result"], "SCS_MemberReference": ["userBusiness", "passwordBusiness", "action", "userBusiness", "passwordBusiness", "TESTUSER_ID", "user", "returnedUser", "name", "passwordBusiness", "userBusiness", "name", "email", "result", "passwordBusiness", "userBusiness", "TESTUSER_ID", "SUCCESS", "ERROR", "ERROR"], "SCS_ClassReference": ["", "UserBusiness", "", "PasswordBusiness", "action", "action", "user", "user", "user", "", null, "userBusiness", "", "action", "action", "", "action", "", "passwordBusiness", "", "", "", "", ""], "SCS_MethodInvocation": ["createMock", "createMock", "setUserBusiness", "setPasswordBusiness", "setEmail", "setLoginName", "setId", "expect", "andReturn", "retrieveByLoginName", "replay", "setName", "setEmail", "assertEquals", "generate", "verify", "generateAndMailPassword", "runTest", "createTestUser", "runTest", "runTest", "createTestUser"], "SCS_VariableDeclaration": ["User"], "CO": ["// For simplicity this class does not extend SpringTestCase"], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport static org.easymock.EasyMock.*;\nimport junit.framework.TestCase;\n\nimport com.opensymphony.xwork2.Action;\n\nimport fi.hut.soberit.agilefant.business.PasswordBusiness;\nimport fi.hut.soberit.agilefant.business.UserBusiness;\nimport fi.hut.soberit.agilefant.model.User;\n\npublic class PasswordActionTest extends TestCase {\n    // For simplicity this class does not extend SpringTestCase\n\n    private final static int TESTUSER_ID = 100;\n\n    private UserBusiness userBusiness;\n\n    private PasswordBusiness passwordBusiness;\n\n    private PasswordAction action;\n\n    @Override\n    public void setUp() {\n        userBusiness = createMock(UserBusiness.class);\n        passwordBusiness = createMock(PasswordBusiness.class);\n        action = new PasswordAction();\n        action.setUserBusiness(userBusiness);\n        action.setPasswordBusiness(passwordBusiness);\n    }\n\n    private User createTestUser() {\n        User user = new User();\n        user.setEmail(\"keimo.lantio@somewhere.com\");\n        user.setLoginName(\"keimolantio\");\n        user.setId(TESTUSER_ID);\n        return user;\n    }\n\n    private void runTest(User returnedUser, String name, String email, String result) {\n        expect(userBusiness.retrieveByLoginName(name)).andReturn(returnedUser);\n        replay(passwordBusiness, userBusiness);\n\n        action.setName(name);\n        action.setEmail(email);\n\n        assertEquals(result, action.generate());\n        verify(passwordBusiness, userBusiness);\n    }\n    \n    public void testGenerate() {\n        passwordBusiness.generateAndMailPassword(TESTUSER_ID);\n        runTest(createTestUser(), \"keimolantio\", \"keimo.lantio@somewhere.com\", Action.SUCCESS);\n    }\n\n    public void testGenerateWithUnknownName() {\n        runTest(null, \"leimokantio\", \"keimo.lantio@somewhere.com\", Action.ERROR);\n    }\n\n    public void testGenerateWithWrongEmail() {\n        runTest(createTestUser(), \"keimolantio\", \"leimo.kantio@somewhere.com\", Action.ERROR);\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\PortletActionTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["PortletActionTest"], "SCS_ClassReference": ["SpringJUnit4ClassRunner", "MockContextLoader", "testable", "", null, "Arrays", "widgetCollectionBusiness", "", null, "widgetCollectionBusiness", "", null, "agilefantWidgetBusiness", "", "", "testable", "", "", "testable", null, "", "testable", "testable", "widgetCollectionBusiness", "", "", "testable", "", "collection", "", null, "widgetCollectionBusiness", "", "", "testable", "", "", "testable", "", "testable"], "AN": ["testable", "agilefantWidgetBusiness", "widgetCollectionBusiness"], "SCS_VariableDeclarator": ["testable", "agilefantWidgetBusiness", "widgetCollectionBusiness", "collection", "collection", "collection"], "MN": ["testRetrieve", "testStore", "testCreate"], "PN": [], "SCS_VariableDeclaration": ["WidgetCollection", "WidgetCollection", "WidgetCollection"], "SCS_MethodInvocation": ["setCollectionId", "expect", "andReturn", "asList", "getCollections", "expect", "andReturn", "retrieve", "expect", "andReturn", "generateWidgetGrid", "replayAll", "assertEquals", "retrieve", "verifyAll", "assertEquals", "getCollections", "size", "assertSame", "getContents", "setCollection", "store", "replayAll", "assertEquals", "store", "verifyAll", "setId", "expect", "andReturn", "createPortfolio", "replayAll", "assertEquals", "create", "verifyAll", "assertEquals", "getCollectionId", "assertSame", "getCollection"], "SCS_MemberReference": ["collection", "collection", "collection", "SUCCESS", "collection", "collection", "collection", "SUCCESS", "collection", "SUCCESS", "collection"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport static org.easymock.EasyMock.expect;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertSame;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.test.annotation.DirtiesContext;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n\nimport com.opensymphony.xwork2.Action;\n\nimport fi.hut.soberit.agilefant.business.AgilefantWidgetBusiness;\nimport fi.hut.soberit.agilefant.business.WidgetCollectionBusiness;\nimport fi.hut.soberit.agilefant.model.AgilefantWidget;\nimport fi.hut.soberit.agilefant.model.WidgetCollection;\nimport fi.hut.soberit.agilefant.test.Mock;\nimport fi.hut.soberit.agilefant.test.MockContextLoader;\nimport fi.hut.soberit.agilefant.test.MockedTestCase;\nimport fi.hut.soberit.agilefant.test.TestedBean;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(loader = MockContextLoader.class)\npublic class PortletActionTest extends MockedTestCase {\n\n    @TestedBean\n    private PortletAction testable;\n\n    @Mock\n    private AgilefantWidgetBusiness agilefantWidgetBusiness;\n\n    @Mock\n    private WidgetCollectionBusiness widgetCollectionBusiness;\n\n    @Test\n    @DirtiesContext\n    public void testRetrieve() {\n        WidgetCollection collection = new WidgetCollection();\n        testable.setCollectionId(123);\n\n        expect(widgetCollectionBusiness.getCollections()).andReturn(\n                new ArrayList<WidgetCollection>(Arrays.asList(collection,\n                        new WidgetCollection())));\n\n        expect(widgetCollectionBusiness.retrieve(123)).andReturn(collection);\n        expect(agilefantWidgetBusiness.generateWidgetGrid(collection, 2))\n                .andReturn(new ArrayList<List<AgilefantWidget>>());\n\n        replayAll();\n        assertEquals(Action.SUCCESS, testable.retrieve());\n        verifyAll();\n\n        assertEquals(2, testable.getCollections().size());\n        assertSame(collection, testable.getContents());\n    }\n\n    @Test\n    @DirtiesContext\n    public void testStore() {\n        WidgetCollection collection = new WidgetCollection();\n        testable.setCollection(collection);\n        widgetCollectionBusiness.store(collection);\n        replayAll();\n        assertEquals(Action.SUCCESS, testable.store());\n        verifyAll();\n    }\n\n    @Test\n    @DirtiesContext\n    public void testCreate() {\n        WidgetCollection collection = new WidgetCollection();\n        collection.setId(558);\n        expect(widgetCollectionBusiness.createPortfolio())\n                .andReturn(collection);\n\n        replayAll();\n        assertEquals(Action.SUCCESS, testable.create());\n        verifyAll();\n\n        assertEquals(558, testable.getCollectionId());\n        assertSame(collection, testable.getCollection());\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\PrefetchInterceptorTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["PrefetchInterceptorTest", "okIdAction", "invalidTypeAction"], "AN": ["prefetchInterceptor", "mockInvocation", "mockContext", "parameters", "validObjectId", "testId", "calledWith", "invalidTestId", "calledWith"], "SCS_VariableDeclarator": ["prefetchInterceptor", "mockInvocation", "mockContext", "parameters", "validObjectId", "testId", "calledWith", "invalidTestId", "calledWith", "mockAction", "mockAction"], "MN": ["initializePrefetchedData", "initializePrefetchedData", "setUp_data", "setUp_dependencies", "notSingleFieldEditable", "happyCase", "incorrectIdException"], "PN": ["objectId", "objectId"], "SCS_MemberReference": ["calledWith", "objectId", "calledWith", "objectId", "validObjectId", "parameters", "prefetchInterceptor", "mockInvocation", "mockContext", "SUCCESS", "mockInvocation", "mockContext", "mockInvocation", "mockInvocation", "mockContext", "mockAction", "mockContext", "parameters", "SUCCESS", "mockInvocation", "mockContext", "mockInvocation", "validObjectId", "calledWith", "mockInvocation", "mockContext", "mockAction", "mockContext", "parameters", "mockInvocation", "mockContext", "mockInvocation", "calledWith", "mockInvocation", "mockContext"], "SCS_ClassReference": ["parameters", "parameters", "", "ActionInvocation", "", "ActionContext", "", null, "mockInvocation", "", null, "mockInvocation", "", "prefetchInterceptor", "", "", null, null, "mockInvocation", "", null, "mockInvocation", "", null, "mockContext", "", null, "mockInvocation", "", "prefetchInterceptor", "", "", "IllegalArgumentException", "", null, null, "mockInvocation", "", null, "mockInvocation", "", null, "mockContext", "", "prefetchInterceptor", "", ""], "SCS_MethodInvocation": ["put", "put", "createStrictMock", "createStrictMock", "expect", "andReturn", "getAction", "expect", "andReturn", "invoke", "replay", "intercept", "verify", "expect", "andReturn", "times", "getAction", "expect", "andReturn", "getInvocationContext", "expect", "andReturn", "getParameters", "expect", "andReturn", "invoke", "replay", "intercept", "assertEquals", "verify", "expect", "andReturn", "times", "getAction", "expect", "andReturn", "getInvocationContext", "expect", "andReturn", "getParameters", "replay", "intercept", "assertEquals", "verify"], "SCS_VariableDeclaration": ["okIdAction", "invalidTypeAction"], "CO": ["/*\n     * Need inline classes to test against annotated fields \n     */"], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport static org.easymock.EasyMock.*;\nimport static org.easymock.classextension.EasyMock.*;\nimport static org.junit.Assert.*;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport com.opensymphony.xwork2.Action;\nimport com.opensymphony.xwork2.ActionContext;\nimport com.opensymphony.xwork2.ActionInvocation;\n\nimport fi.hut.soberit.agilefant.annotations.PrefetchId;\n\npublic class PrefetchInterceptorTest {\n\n    PrefetchInterceptor prefetchInterceptor;\n    \n    ActionInvocation mockInvocation;\n    ActionContext mockContext;\n    \n    Map<String, Object> parameters;\n    int validObjectId;\n    \n    /*\n     * Need inline classes to test against annotated fields \n     */\n    \n    @SuppressWarnings(\"unused\")\n    private class okIdAction implements Prefetching {       \n        @PrefetchId\n        private int testId;\n        public int calledWith = 0;\n        public void initializePrefetchedData(int objectId) {\n            calledWith = objectId;\n        }\n    }\n    \n    @SuppressWarnings(\"unused\")\n    private class invalidTypeAction implements Prefetching {\n        @PrefetchId\n        private int invalidTestId;\n        public int calledWith = 0;\n        public void initializePrefetchedData(int objectId) {\n            calledWith = objectId;\n        }\n    }\n    \n    @Before\n    public void setUp_data() {\n        validObjectId = 2003;\n        \n        parameters = new HashMap<String, Object>();\n        parameters.put(\"testId\", new String[] { \"2003\" });\n        parameters.put(\"invalidTestId\", new String[] { \"this is bullshit\" });\n    }\n    \n    @Before\n    public void setUp_dependencies() {\n        prefetchInterceptor = new PrefetchInterceptor();\n        \n        mockInvocation = createStrictMock(ActionInvocation.class);\n        \n        mockContext = createStrictMock(ActionContext.class);\n    }\n\n    @Test\n    public void notSingleFieldEditable() throws Exception {\n        expect(mockInvocation.getAction()).andReturn(new Object());\n        expect(mockInvocation.invoke()).andReturn(Action.SUCCESS);\n        replay(mockInvocation, mockContext);\n        \n        prefetchInterceptor.intercept(mockInvocation);\n        \n        verify(mockInvocation, mockContext);\n    }\n    \n    @Test\n    public void happyCase() throws Exception {\n        okIdAction mockAction = new okIdAction();\n        expect(mockInvocation.getAction()).andReturn(mockAction).times(2);\n        expect(mockInvocation.getInvocationContext()).andReturn(mockContext);\n        expect(mockContext.getParameters()).andReturn(parameters);\n        \n        expect(mockInvocation.invoke()).andReturn(Action.SUCCESS);\n        \n        replay(mockInvocation, mockContext);\n        \n        prefetchInterceptor.intercept(mockInvocation);\n        assertEquals(validObjectId, mockAction.calledWith);\n\n        \n        verify(mockInvocation, mockContext);\n    }\n    \n    @Test(expected = IllegalArgumentException.class)\n    public void incorrectIdException() throws Exception {\n        invalidTypeAction mockAction = new invalidTypeAction();\n        expect(mockInvocation.getAction()).andReturn(mockAction).times(2);\n        expect(mockInvocation.getInvocationContext()).andReturn(mockContext);\n        expect(mockContext.getParameters()).andReturn(parameters);\n                                \n        replay(mockInvocation, mockContext);\n        \n        prefetchInterceptor.intercept(mockInvocation);\n        assertEquals(0, mockAction.calledWith);\n        \n        verify(mockInvocation, mockContext);\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\ProductActionTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["ProductActionTest"], "AN": ["productAction", "productBusiness", "storyBusiness", "product"], "SCS_VariableDeclarator": ["productAction", "productBusiness", "storyBusiness", "product", "allProductList", "schedule", "prodTO"], "MN": ["setUp", "initData", "replayAll", "verifyAll", "testRetrieveAll", "testRetrieve", "testDelete", "testStore", "testRetrieveLeafStories"], "PN": [], "SCS_MemberReference": ["productBusiness", "storyBusiness", "productBusiness", "storyBusiness", "product", "productBusiness", "storyBusiness", "productBusiness", "storyBusiness", "allProductList", "SUCCESS", "allProductList", "product", "product", "schedule", "product", "product", "first", "second", "product", "product", "product", "product", "product", "product", "prodTO", "product", "prodTO"], "SCS_ClassReference": ["", "ProductBusiness", "", "StoryBusiness", "productAction", "productAction", "", "", "productAction", "allProductList", "", null, "productBusiness", "", "", "productAction", "", "productAction", "", "productAction", "", null, "productBusiness", "", null, "storyBusiness", "", null, "productBusiness", "", "productAction", "", "productAction", "", "DateTimeUtils", "productAction", "", "DateTimeUtils", "productAction", "", "productAction", "productBusiness", "", "productAction", "", "productAction", "productAction", "", null, "productBusiness", "", "productAction", "", "productAction", "", "productAction", "", null, "productBusiness", "", null, "productBusiness", "", "productAction", "", "", "productAction"], "SCS_MethodInvocation": ["createMock", "createMock", "setProductBusiness", "setStoryBusiness", "replay", "verify", "getProducts", "add", "expect", "andReturn", "retrieveAll", "replayAll", "assertEquals", "retrieveAll", "assertEquals", "getProducts", "verifyAll", "setProductId", "expect", "andReturn", "retrieve", "expect", "andReturn", "retrieveStoriesInBacklog", "expect", "andReturn", "calculateProductSchedule", "replayAll", "retrieve", "assertEquals", "getProduct", "assertEquals", "roundToNearestMidnight", "getScheduleStart", "assertEquals", "roundToNearestMidnight", "getScheduleEnd", "verifyAll", "setProductId", "delete", "replayAll", "delete", "verifyAll", "setProductId", "setProduct", "expect", "andReturn", "store", "replayAll", "store", "assertEquals", "getProduct", "verifyAll", "setProductId", "expect", "andReturn", "retrieve", "expect", "andReturn", "retrieveLeafStoriesOnly", "replayAll", "retrieveLeafStories", "verifyAll", "assertSame", "getProduct"], "SCS_VariableDeclaration": ["Collection", "Pair", "ProductTO"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport static org.easymock.EasyMock.createMock;\nimport static org.easymock.EasyMock.expect;\nimport static org.easymock.EasyMock.replay;\nimport static org.easymock.EasyMock.verify;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertSame;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\n\nimport org.joda.time.DateTime;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport com.opensymphony.xwork2.Action;\n\nimport fi.hut.soberit.agilefant.business.ProductBusiness;\nimport fi.hut.soberit.agilefant.business.StoryBusiness;\nimport fi.hut.soberit.agilefant.model.Product;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.transfer.ProductTO;\nimport fi.hut.soberit.agilefant.util.DateTimeUtils;\nimport fi.hut.soberit.agilefant.util.Pair;\n\npublic class ProductActionTest {\n\n    ProductAction productAction = new ProductAction();\n    ProductBusiness productBusiness;\n    StoryBusiness storyBusiness;\n    Product product;\n\n    @Before\n    public void setUp() {\n        productBusiness = createMock(ProductBusiness.class);\n        storyBusiness = createMock(StoryBusiness.class);\n        productAction.setProductBusiness(productBusiness);    \n        productAction.setStoryBusiness(storyBusiness);\n    }\n\n    @Before\n    public void initData() {\n        product = new Product();\n    }\n\n    private void replayAll() {\n        replay(productBusiness, storyBusiness);\n    }\n\n    private void verifyAll() {\n        verify(productBusiness, storyBusiness);\n    }\n\n    @Test\n    public void testRetrieveAll() {\n        Collection<Product> allProductList = productAction.getProducts();\n        allProductList.add(new Product());\n\n        expect(productBusiness.retrieveAll()).andReturn(allProductList);\n        replayAll();\n\n        assertEquals(Action.SUCCESS, productAction.retrieveAll());\n        assertEquals(allProductList, productAction.getProducts());\n\n        verifyAll();\n    }\n\n    @Test\n    public void testRetrieve() {\n        productAction.setProductId(1);\n        Pair<DateTime, DateTime> schedule = new Pair<DateTime, DateTime>(new DateTime(), new DateTime());\n        expect(productBusiness.retrieve(1)).andReturn(product);\n        expect(storyBusiness.retrieveStoriesInBacklog(product)).andReturn(new ArrayList<Story>());\n        expect(productBusiness.calculateProductSchedule(product)).andReturn(schedule);\n        replayAll();\n        productAction.retrieve();\n        assertEquals(product, productAction.getProduct());\n        assertEquals(DateTimeUtils.roundToNearestMidnight(schedule.first), productAction.getScheduleStart());\n        assertEquals(DateTimeUtils.roundToNearestMidnight(schedule.second), productAction.getScheduleEnd());\n        verifyAll();\n    }\n\n    @Test\n    public void testDelete() {\n        productAction.setProductId(1);\n        productBusiness.delete(1);\n        replayAll();\n        productAction.delete();\n        verifyAll();\n    }\n\n    @Test\n    public void testStore() {\n        productAction.setProductId(1);\n        productAction.setProduct(product);\n        expect(productBusiness.store(1, product, null)).andReturn(product);\n        replayAll();\n        productAction.store();\n        assertEquals(product, productAction.getProduct());\n        verifyAll();\n    }\n    \n    @Test\n    public void testRetrieveLeafStories() {\n        ProductTO prodTO = new ProductTO(product);\n        productAction.setProductId(1);\n        expect(productBusiness.retrieve(1)).andReturn(product);\n        expect(productBusiness.retrieveLeafStoriesOnly(product)).andReturn(prodTO);\n        replayAll();\n        productAction.retrieveLeafStories();\n        verifyAll();\n        assertSame(prodTO, productAction.getProduct());\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\ProjectActionTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["ProjectActionTest"], "AN": ["projectAction", "projectBusiness", "storyBusiness", "project", "projectDataContainer"], "SCS_VariableDeclarator": ["projectAction", "projectBusiness", "storyBusiness", "project", "projectDataContainer", "metrics", "projTO", "dummy", "proj", "parent", "proj", "prod"], "MN": ["setUp_dependencies", "setUp_data", "verifyAll", "replayAll", "testProjectMetrics", "testProjectData", "testProjectData_notFound", "testCreate", "testRetrieve", "testStore", "testDelete_success", "testDelete_failure", "testDelete_noSuchIteration", "testDelete_forbidden", "testInitializePrefetchData"], "PN": [], "SCS_MemberReference": ["projectAction", "projectBusiness", "storyBusiness", "projectBusiness", "storyBusiness", "project", "projectBusiness", "storyBusiness", "projectBusiness", "storyBusiness", "project", "metrics", "project", "SUCCESS", "metrics", "project", "projTO", "SUCCESS", "projTO", "project", "project", "project", "project", "dummy", "project", "dummy", "parent", "proj", "SUCCESS", "ERROR", "prod", "proj", "project", "project"], "SCS_ClassReference": ["projectAction", "", "ProjectBusiness", "", "StoryBusiness", "projectAction", "projectAction", "project", "", "", "projectAction", "project", "", null, "projectBusiness", "project", "", null, "projectBusiness", "", "", "projectAction", "", "projectAction", "", "projectAction", "project", "", null, "projectBusiness", "project", "", "", "projectAction", "", "projectAction", "", "ObjectNotFoundException", "projectAction", "", null, "projectBusiness", "", "projectAction", "", "projectAction", "projectAction", "", "projectAction", "", "projectAction", null, "", "projectAction", null, "projectAction", "", null, "projectBusiness", "", null, "storyBusiness", "", null, "projectBusiness", "", null, "projectBusiness", "", "projectAction", "", "projectAction", "", "projectAction", "projectAction", "projectAction", "", null, "projectBusiness", "", "projectAction", "", "projectAction", "", "parent", "proj", "", null, "projectBusiness", "projectBusiness", "", "projectAction", "", "projectAction", "", "projectAction", "", "", "projectAction", "", "projectAction", "", "ObjectNotFoundException", "projectAction", "projectBusiness", "", null, "projectBusiness", "", "projectAction", "projectAction", "", "ConstraintViolationException", "prod", "proj", "", null, "projectBusiness", "projectBusiness", "", null, "", null, "projectBusiness", "", "projectAction", "projectAction", "", "", null, "projectBusiness", "", "projectAction", "", "projectAction", ""], "SCS_MethodInvocation": ["setProjectId", "createMock", "createMock", "setProjectBusiness", "setStoryBusiness", "setId", "verify", "replay", "setProjectId", "getId", "expect", "andReturn", "retrieve", "getId", "expect", "andReturn", "getProjectMetrics", "replayAll", "assertEquals", "projectMetrics", "assertEquals", "getProjectMetrics", "verifyAll", "setProjectId", "getId", "expect", "andReturn", "getProjectData", "getId", "replayAll", "assertEquals", "projectData", "assertEquals", "getProject", "verifyAll", "setProjectId", "expect", "andThrow", "getProjectData", "replayAll", "projectData", "verifyAll", "setProject", "create", "assertNotNull", "getProject", "assertNotNull", "getProject", "getStartDate", "assertNotNull", "getProject", "getEndDate", "setProjectId", "expect", "andReturn", "retrieve", "expect", "andReturn", "retrieveStoriesInBacklog", "expect", "andReturn", "retrieveLeafStories", "expect", "andReturn", "retrieveProjectIterations", "replayAll", "retrieve", "assertEquals", "getProject", "verifyAll", "setProductId", "setProjectId", "setProject", "expect", "andReturn", "store", "replayAll", "store", "assertEquals", "getProject", "verifyAll", "setId", "setParent", "expect", "andReturn", "retrieve", "delete", "replayAll", "setConfirmationString", "assertEquals", "delete", "assertEquals", "getProductId", "verifyAll", "replayAll", "setConfirmationString", "assertEquals", "delete", "verifyAll", "setProjectId", "delete", "expect", "andThrow", "retrieve", "replayAll", "setConfirmationString", "delete", "verifyAll", "setId", "setParent", "expect", "andReturn", "retrieve", "delete", "expectLastCall", "andThrow", "expect", "andReturn", "retrieve", "replayAll", "setConfirmationString", "delete", "verifyAll", "expect", "andReturn", "retrieve", "replayAll", "initializePrefetchedData", "assertEquals", "getProject", "verifyAll"], "SCS_VariableDeclaration": ["ProjectMetrics", "ProjectTO", "ProjectTO", "Project", "Product", "Project", "Product"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport static org.easymock.EasyMock.*;\nimport static org.junit.Assert.*;\n\nimport java.util.ArrayList;\n\nimport org.hibernate.exception.ConstraintViolationException;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport com.opensymphony.xwork2.Action;\n\nimport fi.hut.soberit.agilefant.business.ProjectBusiness;\nimport fi.hut.soberit.agilefant.business.StoryBusiness;\nimport fi.hut.soberit.agilefant.exception.ObjectNotFoundException;\nimport fi.hut.soberit.agilefant.model.Product;\nimport fi.hut.soberit.agilefant.model.Project;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.transfer.IterationTO;\nimport fi.hut.soberit.agilefant.transfer.ProjectDataContainer;\nimport fi.hut.soberit.agilefant.transfer.ProjectMetrics;\nimport fi.hut.soberit.agilefant.transfer.ProjectTO;\nimport fi.hut.soberit.agilefant.transfer.StoryTO;\nimport fi.hut.soberit.agilefant.util.StoryFilters;\n\npublic class ProjectActionTest {\n\n    ProjectAction projectAction;\n    ProjectBusiness projectBusiness;\n    StoryBusiness storyBusiness;\n\n    Project project;\n    ProjectDataContainer projectDataContainer;\n\n    @Before\n    public void setUp_dependencies() {\n        \n        projectAction = new ProjectAction();\n        projectAction.setProjectId(1);\n        projectBusiness = createMock(ProjectBusiness.class);\n        storyBusiness = createMock(StoryBusiness.class);\n        projectAction.setProjectBusiness(projectBusiness);\n        projectAction.setStoryBusiness(storyBusiness);\n    }\n\n    @Before\n    public void setUp_data() {\n        project = new Project();\n        project.setId(1);\n    }\n\n    private void verifyAll() {\n        verify(projectBusiness, storyBusiness);\n    }\n\n    private void replayAll() {\n        replay(projectBusiness, storyBusiness);\n    }\n\n    @Test\n    public void testProjectMetrics() {\n        ProjectMetrics metrics = new ProjectMetrics();\n        projectAction.setProjectId(project.getId());\n        expect(projectBusiness.retrieve(project.getId())).andReturn(project);\n        expect(projectBusiness.getProjectMetrics(project)).andReturn(metrics);\n        replayAll();\n\n        assertEquals(Action.SUCCESS, projectAction.projectMetrics());\n        assertEquals(metrics, projectAction.getProjectMetrics());\n\n        verifyAll();\n    }\n\n\n    @Test\n    public void testProjectData() {\n        ProjectTO projTO = new ProjectTO(project);\n        projectAction.setProjectId(project.getId());\n        expect(projectBusiness.getProjectData(project.getId())).andReturn(projTO);\n        replayAll();\n        assertEquals(Action.SUCCESS, projectAction.projectData());\n        assertEquals(projTO, projectAction.getProject());\n        verifyAll();\n    }\n    \n    @Test(expected = ObjectNotFoundException.class)\n    public void testProjectData_notFound() {\n        projectAction.setProjectId(-1);\n        expect(projectBusiness.getProjectData(-1)).andThrow(new ObjectNotFoundException());\n        replayAll();\n        projectAction.projectData();\n        verifyAll();\n    }\n    \n    @Test\n    public void testCreate() {\n        projectAction.setProject(null);\n        projectAction.create();\n        assertNotNull(projectAction.getProject());\n        assertNotNull(projectAction.getProject().getStartDate());\n        assertNotNull(projectAction.getProject().getEndDate());\n    }\n\n    @Test\n    public void testRetrieve() {\n        projectAction.setProjectId(1);\n        expect(projectBusiness.retrieve(1)).andReturn(project);\n        expect(storyBusiness.retrieveStoriesInBacklog(project)).andReturn(new ArrayList<Story>());\n        expect(projectBusiness.retrieveLeafStories(1, new StoryFilters())).andReturn(new ArrayList<StoryTO>());\n        expect(projectBusiness.retrieveProjectIterations(1)).andReturn(new ArrayList<IterationTO>());\n        replayAll();\n        projectAction.retrieve();\n        assertEquals(project, projectAction.getProject());\n        verifyAll();\n    }\n\n    @Test\n    public void testStore() {\n        ProjectTO dummy = new ProjectTO(new Project());\n        projectAction.setProductId(313);\n        projectAction.setProjectId(1);\n        projectAction.setProject(project);\n        expect(projectBusiness.store(1, 313, project, null)).andReturn(dummy);\n        replayAll();\n        projectAction.store();\n        assertEquals(dummy, projectAction.getProject());\n        verifyAll();\n    }\n    \n    @Test\n    public void testDelete_success() {\n        Project proj = new Project();\n        Product parent = new Product();\n        parent.setId(123);\n        proj.setParent(parent);\n        \n        expect(projectBusiness.retrieve(1)).andReturn(proj);\n        projectBusiness.delete(1);\n        replayAll();\n        projectAction.setConfirmationString(\"yes\");\n        assertEquals(Action.SUCCESS, projectAction.delete());\n        assertEquals(123, projectAction.getProductId());\n        verifyAll();    \n    }\n    \n    @Test\n    public void testDelete_failure() {\n\n        replayAll();\n        projectAction.setConfirmationString(\"no\");\n        assertEquals(Action.ERROR, projectAction.delete());\n        \n        verifyAll();    \n    }\n\n    \n    @Test(expected = ObjectNotFoundException.class)\n    public void testDelete_noSuchIteration() {\n        projectAction.setProjectId(-1);\n        projectBusiness.delete(-1);\n        expect(projectBusiness.retrieve(-1)).andThrow(new ObjectNotFoundException());\n        replayAll();\n        projectAction.setConfirmationString(\"yes\");\n        projectAction.delete();\n        \n        verifyAll();    \n    }\n    \n    @Test(expected = ConstraintViolationException.class)\n    public void testDelete_forbidden() {\n        Project proj = new Project();\n        Product prod = new Product();\n        prod.setId(123);\n        proj.setParent(prod);\n        expect(projectBusiness.retrieve(1)).andReturn(proj);\n        projectBusiness.delete(1);\n        expectLastCall().andThrow(new ConstraintViolationException(null, null, null));\n        expect(projectBusiness.retrieve(1)).andReturn(new Project());\n        replayAll();\n        projectAction.setConfirmationString(\"yes\");\n        projectAction.delete();\n        \n        verifyAll(); \n    }\n\n    @Test\n    public void testInitializePrefetchData() {\n        expect(projectBusiness.retrieve(123)).andReturn(project);\n        replayAll();\n        projectAction.initializePrefetchedData(123);\n        assertEquals(project, projectAction.getProject());\n        verifyAll();\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\ProjectPortfolioActionTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["ProjectPortfolioActionTest"], "SCS_ClassReference": ["SpringJUnit4ClassRunner", "MockContextLoader", "SpringAssertions", "ProjectPortfolioAction", "", null, "widgetCollectionBusiness", "", "", "projectPortfolioAction", "", "", null, "portfolioBusiness", "", "", "projectPortfolioAction", "", "projectPortfolioAction", ""], "AN": ["projectPortfolioAction", "portfolioBusiness", "widgetCollectionBusiness"], "SCS_VariableDeclarator": ["projectPortfolioAction", "portfolioBusiness", "widgetCollectionBusiness", "portfolioTO"], "MN": ["testSpringScope", "testRetrieve", "testPortfolioData"], "PN": [], "SCS_MethodInvocation": ["assertScopeAnnotation", "expect", "andReturn", "getCollections", "replayAll", "assertEquals", "retrieve", "verifyAll", "expect", "andReturn", "getPortfolioData", "replayAll", "assertEquals", "portfolioData", "assertSame", "getPortfolioData", "verifyAll"], "SCS_MemberReference": ["SUCCESS", "portfolioTO", "SUCCESS", "portfolioTO"], "SCS_VariableDeclaration": ["PortfolioTO"], "CO": ["// ProjectPortfolioAction should", "// + have Scope annotation with \"prototype\" value", "//    // retrieve() should", "//    // + return Action.SUCCESS", "// portfolioData() should", "// + retrieve a PortfolioTO from PortfolioBusiness", "// + set PortfolioTO field", "// + return Action.SUCCESS"], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport java.util.ArrayList;\n\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.test.annotation.DirtiesContext;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n\nimport com.opensymphony.xwork2.Action;\n\nimport fi.hut.soberit.agilefant.business.PortfolioBusiness;\nimport fi.hut.soberit.agilefant.business.WidgetCollectionBusiness;\nimport fi.hut.soberit.agilefant.model.WidgetCollection;\nimport fi.hut.soberit.agilefant.test.Mock;\nimport fi.hut.soberit.agilefant.test.MockContextLoader;\nimport fi.hut.soberit.agilefant.test.MockedTestCase;\nimport fi.hut.soberit.agilefant.test.SpringAssertions;\nimport fi.hut.soberit.agilefant.test.TestedBean;\nimport fi.hut.soberit.agilefant.transfer.PortfolioTO;\n\nimport static org.junit.Assert.*;\n\nimport static org.easymock.EasyMock.*;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(loader = MockContextLoader.class)\npublic class ProjectPortfolioActionTest extends MockedTestCase {\n\n    @TestedBean\n    private ProjectPortfolioAction projectPortfolioAction;\n\n    @Mock\n    private PortfolioBusiness portfolioBusiness;\n    \n    @Mock\n    private WidgetCollectionBusiness widgetCollectionBusiness;\n\n    // ProjectPortfolioAction should\n    // + have Scope annotation with \"prototype\" value\n    @Test\n    @DirtiesContext\n    public void testSpringScope() {\n        SpringAssertions.assertScopeAnnotation(\"prototype\",\n                ProjectPortfolioAction.class);\n    }\n\n//    // retrieve() should\n//    // + return Action.SUCCESS\n    @Test\n    @DirtiesContext\n    public void testRetrieve() {\n        expect(widgetCollectionBusiness.getCollections())\n            .andReturn(new ArrayList<WidgetCollection>());\n        \n        replayAll();\n        assertEquals(Action.SUCCESS, projectPortfolioAction.retrieve());\n        verifyAll();\n    }\n\n    // portfolioData() should\n    // + retrieve a PortfolioTO from PortfolioBusiness\n    // + set PortfolioTO field\n    // + return Action.SUCCESS\n    @Test\n    @DirtiesContext\n    public void testPortfolioData() {\n        PortfolioTO portfolioTO = new PortfolioTO();\n        \n        expect(portfolioBusiness.getPortfolioData()).andReturn(portfolioTO);\n        replayAll();\n\n        assertEquals(Action.SUCCESS, projectPortfolioAction.portfolioData());\n        assertSame(portfolioTO, projectPortfolioAction.getPortfolioData());\n        verifyAll();\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\ResolveSearchResultActionTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["ResolveSearchResultActionTest"], "SCS_ClassReference": ["SpringJUnit4ClassRunner", "MockContextLoader", "story", "resolveSearchResultAction", "Story", null, "resolveSearchResultAction", "", null, "storyBusiness", "", "", "resolveSearchResultAction", "", "story", "resolveSearchResultAction", "Story", null, "resolveSearchResultAction", "", null, "storyBusiness", "", "", "resolveSearchResultAction", "", "story", "resolveSearchResultAction", "Story", null, "resolveSearchResultAction", "", null, "storyBusiness", "", "", "resolveSearchResultAction", "", "resolveSearchResultAction", "Iteration", null, "resolveSearchResultAction", "", "", "resolveSearchResultAction", "", "resolveSearchResultAction", "Project", null, "resolveSearchResultAction", "", "", "resolveSearchResultAction", "", "resolveSearchResultAction", "Product", null, "resolveSearchResultAction", "", "", "resolveSearchResultAction", ""], "AN": ["resolveSearchResultAction", "storyBusiness", "taskBusiness"], "SCS_VariableDeclarator": ["resolveSearchResultAction", "storyBusiness", "taskBusiness", "story", "story", "story"], "MN": ["testExecute_storyInIteration", "testExecute_storyInProject", "testExecute_storyInProduct", "testExecute_iteration", "testExecute_project", "testExecute_product"], "PN": [], "SCS_VariableDeclaration": ["Story", "Story", "Story"], "SCS_MethodInvocation": ["setIteration", "setTargetClassName", "getCanonicalName", "setTargetObjectId", "expect", "andReturn", "retrieve", "replayAll", "assertEquals", "execute", "verifyAll", "setBacklog", "setTargetClassName", "getCanonicalName", "setTargetObjectId", "expect", "andReturn", "retrieve", "replayAll", "assertEquals", "execute", "verifyAll", "setBacklog", "setTargetClassName", "getCanonicalName", "setTargetObjectId", "expect", "andReturn", "retrieve", "replayAll", "assertEquals", "execute", "verifyAll", "setTargetClassName", "getCanonicalName", "setTargetObjectId", "replayAll", "assertEquals", "execute", "verifyAll", "setTargetClassName", "getCanonicalName", "setTargetObjectId", "replayAll", "assertEquals", "execute", "verifyAll", "setTargetClassName", "getCanonicalName", "setTargetObjectId", "replayAll", "assertEquals", "execute", "verifyAll"], "SCS_MemberReference": ["story", "story", "story"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.test.annotation.DirtiesContext;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n\nimport fi.hut.soberit.agilefant.business.StoryBusiness;\nimport fi.hut.soberit.agilefant.business.TaskBusiness;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.Product;\nimport fi.hut.soberit.agilefant.model.Project;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.test.Mock;\nimport fi.hut.soberit.agilefant.test.MockContextLoader;\nimport fi.hut.soberit.agilefant.test.MockedTestCase;\nimport fi.hut.soberit.agilefant.test.TestedBean;\n\nimport static org.junit.Assert.*;\nimport static org.easymock.EasyMock.*;\n\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(loader = MockContextLoader.class)\npublic class ResolveSearchResultActionTest extends MockedTestCase {\n\n    @TestedBean\n    private ResolveSearchResultAction resolveSearchResultAction;\n    @Mock\n    private StoryBusiness storyBusiness;\n    @Mock\n    private TaskBusiness taskBusiness;\n    \n    @Test\n    @DirtiesContext\n    public void testExecute_storyInIteration() {\n        Story story = new Story();\n        story.setIteration(new Iteration());\n        resolveSearchResultAction.setTargetClassName(Story.class.getCanonicalName());\n        resolveSearchResultAction.setTargetObjectId(15);\n        \n        expect(storyBusiness.retrieve(15)).andReturn(story);\n        replayAll();\n        assertEquals(\"iteration\", resolveSearchResultAction.execute());\n        verifyAll();\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testExecute_storyInProject() {\n        Story story = new Story();\n        story.setBacklog(new Project());\n        resolveSearchResultAction.setTargetClassName(Story.class.getCanonicalName());\n        resolveSearchResultAction.setTargetObjectId(15);\n        \n        expect(storyBusiness.retrieve(15)).andReturn(story);\n        replayAll();\n        assertEquals(\"project\", resolveSearchResultAction.execute());\n        verifyAll();\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testExecute_storyInProduct() {\n        Story story = new Story();\n        story.setBacklog(new Product());\n        resolveSearchResultAction.setTargetClassName(Story.class.getCanonicalName());\n        resolveSearchResultAction.setTargetObjectId(15);\n        \n        expect(storyBusiness.retrieve(15)).andReturn(story);\n        replayAll();\n        assertEquals(\"product\", resolveSearchResultAction.execute());\n        verifyAll();\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testExecute_iteration() {\n        resolveSearchResultAction.setTargetClassName(Iteration.class.getCanonicalName());\n        resolveSearchResultAction.setTargetObjectId(15);\n        replayAll();\n        assertEquals(\"iteration\", resolveSearchResultAction.execute());\n        verifyAll();\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testExecute_project() {\n        resolveSearchResultAction.setTargetClassName(Project.class.getCanonicalName());\n        resolveSearchResultAction.setTargetObjectId(15);\n        replayAll();\n        assertEquals(\"project\", resolveSearchResultAction.execute());\n        verifyAll();\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testExecute_product() {\n        resolveSearchResultAction.setTargetClassName(Product.class.getCanonicalName());\n        resolveSearchResultAction.setTargetObjectId(15);\n        replayAll();\n        assertEquals(\"product\", resolveSearchResultAction.execute());\n        verifyAll();\n    }\n    \n    \n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\SearchActionTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["SearchActionTest"], "SCS_ClassReference": ["SpringJUnit4ClassRunner", "MockContextLoader", "searchAction", "", null, "searchBusiness", "", "searchAction", "", "searchAction", "", "searchAction", "", null, "searchBusiness", "", "searchAction", "", "searchAction", "", "searchAction", "", null, "searchBusiness", "", "searchAction", "", "searchAction", "", "searchAction", "", null, "searchBusiness", "", "searchAction", "", "searchAction", "", "searchAction", "", null, "searchBusiness", "", "searchAction", "", "searchAction", ""], "AN": ["searchAction", "searchBusiness"], "SCS_VariableDeclarator": ["searchAction", "searchBusiness", "result", "result", "result", "result", "result"], "MN": ["testExecute", "testSearchIterations", "testSearchProjects", "testSearchStories", "testSearchUsers"], "PN": [], "SCS_VariableDeclaration": ["List", "List", "List", "List", "List"], "SCS_MethodInvocation": ["setTerm", "expect", "andReturn", "searchStoriesAndBacklog", "replayAll", "execute", "assertEquals", "getResults", "verifyAll", "setTerm", "expect", "andReturn", "searchIterations", "replayAll", "searchIterations", "assertEquals", "getResults", "verifyAll", "setTerm", "expect", "andReturn", "searchProjects", "replayAll", "searchProjects", "assertEquals", "getResults", "verifyAll", "setTerm", "expect", "andReturn", "searchStories", "replayAll", "searchStories", "assertEquals", "getResults", "verifyAll", "setTerm", "expect", "andReturn", "searchUsers", "replayAll", "searchUsers", "assertEquals", "getResults", "verifyAll"], "SCS_MemberReference": ["result", "result", "result", "result", "result", "result", "result", "result", "result", "result"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.test.annotation.DirtiesContext;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n\nimport fi.hut.soberit.agilefant.business.SearchBusiness;\nimport fi.hut.soberit.agilefant.test.Mock;\nimport fi.hut.soberit.agilefant.test.MockContextLoader;\nimport fi.hut.soberit.agilefant.test.MockedTestCase;\nimport fi.hut.soberit.agilefant.test.TestedBean;\nimport fi.hut.soberit.agilefant.transfer.SearchResultRow;\n\nimport static org.junit.Assert.*;\nimport static org.easymock.EasyMock.*;\n\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(loader = MockContextLoader.class)\npublic class SearchActionTest extends MockedTestCase {\n\n    @TestedBean\n    private SearchAction searchAction;\n    @Mock\n    private SearchBusiness searchBusiness;\n    \n    @Test\n    @DirtiesContext\n    public void testExecute() {\n        List<SearchResultRow> result = new ArrayList<SearchResultRow>();\n        searchAction.setTerm(\"foo\");\n        expect(searchBusiness.searchStoriesAndBacklog(\"foo\")).andReturn(result);\n        replayAll();\n        searchAction.execute();\n        assertEquals(result, searchAction.getResults());\n        verifyAll();\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testSearchIterations() {\n        List<SearchResultRow> result = new ArrayList<SearchResultRow>();\n        searchAction.setTerm(\"foo\");\n        expect(searchBusiness.searchIterations(\"foo\")).andReturn(result);\n        replayAll();\n        searchAction.searchIterations();\n        assertEquals(result, searchAction.getResults());\n        verifyAll();\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testSearchProjects() {\n        List<SearchResultRow> result = new ArrayList<SearchResultRow>();\n        searchAction.setTerm(\"foo\");\n        expect(searchBusiness.searchProjects(\"foo\")).andReturn(result);\n        replayAll();\n        searchAction.searchProjects();\n        assertEquals(result, searchAction.getResults());\n        verifyAll();\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testSearchStories() {\n        List<SearchResultRow> result = new ArrayList<SearchResultRow>();\n        searchAction.setTerm(\"foo\");\n        expect(searchBusiness.searchStories(\"foo\")).andReturn(result);\n        replayAll();\n        searchAction.searchStories();\n        assertEquals(result, searchAction.getResults());\n        verifyAll();\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testSearchUsers() {\n        List<SearchResultRow> result = new ArrayList<SearchResultRow>();\n        searchAction.setTerm(\"foo\");\n        expect(searchBusiness.searchUsers(\"foo\")).andReturn(result);\n        replayAll();\n        searchAction.searchUsers();\n        assertEquals(result, searchAction.getResults());\n        verifyAll();\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\SecurityInterceptorTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["SecurityInterceptorTest"], "MN": ["testStub", "main", "testSetAdmin", "testSetTeam", "testSetAccessRights", "testChangeIteration", "testGetIteration"], "PN": ["args"], "SCS_ClassReference": ["", "", "e", "nvps", "nvps", "httpost", "httpclient", "System.out", "response", "httpclient", "unvps", "unvps", "uhttpost", "uhttpclient", "uhttpclient", "System.out", "response2", "response2", null, "in", "System.out", "in", "httpclient", null, "uhttpclient", null, "nvps", "nvps", "httpost", "httpclient", "System.out", "response", "httpclient", "unvps", "unvps", "unvps", "uhttpost", "uhttpclient", "uhttpclient", "System.out", "response2", "response2", null, "in", "System.out", "in", "httpclient", null, "uhttpclient", null, "nvps", "nvps", "httpost", "httpclient", "System.out", "response", "httpclient", "unvps", "unvps", "unvps", "unvps", "uhttpost", "uhttpclient", "uhttpclient", "System.out", "response2", "response2", null, "in", "System.out", "in", "httpclient", null, "uhttpclient", null, "nvps", "nvps", "httpost", "httpclient", "System.out", "response", "httpclient", "unvps", "unvps", "uhttpost", "uhttpclient", "uhttpclient", "System.out", "response2", "response2", null, "in", "System.out", "in", "httpclient", null, "uhttpclient", null, "nvps", "nvps", "httpost", "httpclient", "System.out", "response", "httpclient", "unvps", "uhttpost", "uhttpclient", "uhttpclient", "System.out", "response2", "response2", null, "in", "System.out", "in", "httpclient", null, "uhttpclient", null], "SCS_MethodInvocation": ["assertTrue", "testSetAdmin", "printStackTrace", "add", "add", "setEntity", "execute", "println", "getStatusLine", "getCookieStore", "add", "add", "setEntity", "setCookieStore", "execute", "println", "getStatusLine", "getEntity", "getContent", "readLine", "println", "close", "getConnectionManager", "shutdown", "getConnectionManager", "shutdown", "add", "add", "setEntity", "execute", "println", "getStatusLine", "getCookieStore", "add", "add", "add", "setEntity", "setCookieStore", "execute", "println", "getStatusLine", "getEntity", "getContent", "readLine", "println", "close", "getConnectionManager", "shutdown", "getConnectionManager", "shutdown", "add", "add", "setEntity", "execute", "println", "getStatusLine", "getCookieStore", "add", "add", "add", "add", "setEntity", "setCookieStore", "execute", "println", "getStatusLine", "getEntity", "getContent", "readLine", "println", "close", "getConnectionManager", "shutdown", "getConnectionManager", "shutdown", "add", "add", "setEntity", "execute", "println", "getStatusLine", "getCookieStore", "add", "add", "setEntity", "setCookieStore", "execute", "println", "getStatusLine", "getEntity", "getContent", "readLine", "println", "close", "getConnectionManager", "shutdown", "getConnectionManager", "shutdown", "add", "add", "setEntity", "execute", "println", "getStatusLine", "getCookieStore", "add", "setEntity", "setCookieStore", "execute", "println", "getStatusLine", "getEntity", "getContent", "readLine", "println", "close", "getConnectionManager", "shutdown", "getConnectionManager", "shutdown"], "SCS_VariableDeclaration": ["DefaultHttpClient", "DefaultHttpClient", "HttpPost", "List", "HttpResponse", "CookieStore", "HttpPost", "List", "HttpResponse", "BufferedReader", "String", "DefaultHttpClient", "DefaultHttpClient", "HttpPost", "List", "HttpResponse", "CookieStore", "HttpPost", "List", "HttpResponse", "BufferedReader", "String", "DefaultHttpClient", "DefaultHttpClient", "HttpPost", "List", "HttpResponse", "CookieStore", "HttpPost", "List", "HttpResponse", "BufferedReader", "String", "DefaultHttpClient", "DefaultHttpClient", "HttpPost", "List", "HttpResponse", "CookieStore", "HttpPost", "List", "HttpResponse", "BufferedReader", "String", "DefaultHttpClient", "DefaultHttpClient", "HttpPost", "List", "HttpResponse", "CookieStore", "HttpPost", "List", "HttpResponse", "BufferedReader", "String"], "SCS_VariableDeclarator": ["httpclient", "uhttpclient", "httpost", "nvps", "response", "cookies", "uhttpost", "unvps", "response2", "in", "line", "httpclient", "uhttpclient", "httpost", "nvps", "response", "cookies", "uhttpost", "unvps", "response2", "in", "line", "httpclient", "uhttpclient", "httpost", "nvps", "response", "cookies", "uhttpost", "unvps", "response2", "in", "line", "httpclient", "uhttpclient", "httpost", "nvps", "response", "cookies", "uhttpost", "unvps", "response2", "in", "line", "httpclient", "uhttpclient", "httpost", "nvps", "response", "cookies", "uhttpost", "unvps", "response2", "in", "line"], "SCS_MemberReference": ["nvps", "UTF_8", "httpost", "unvps", "UTF_8", "cookies", "uhttpost", "line", "line", "nvps", "UTF_8", "httpost", "unvps", "UTF_8", "cookies", "uhttpost", "line", "line", "nvps", "UTF_8", "httpost", "unvps", "UTF_8", "cookies", "uhttpost", "line", "line", "nvps", "UTF_8", "httpost", "unvps", "UTF_8", "cookies", "uhttpost", "line", "line", "nvps", "UTF_8", "httpost", "unvps", "UTF_8", "cookies", "uhttpost", "line", "line"], "CO": ["//testSetTeam();", "//testSetAccessRights();", "//testGetIteration();", "//testChangeIteration();", "// When HttpClient instance is no longer needed,", "// shut down the connection manager to ensure", "// immediate deallocation of all system resources", "// When HttpClient instance is no longer needed,", "// shut down the connection manager to ensure", "// immediate deallocation of all system resources", "// When HttpClient instance is no longer needed,", "// shut down the connection manager to ensure", "// immediate deallocation of all system resources", "// When HttpClient instance is no longer needed,", "// shut down the connection manager to ensure", "// immediate deallocation of all system resources", "// When HttpClient instance is no longer needed,", "// shut down the connection manager to ensure", "// immediate deallocation of all system resources"], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport static org.junit.Assert.assertTrue;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.apache.http.HttpResponse;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.ClientProtocolException;\nimport org.apache.http.client.CookieStore;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.protocol.HTTP;\nimport org.junit.Test;\n\nimport fi.hut.soberit.agilefant.test.MockedTestCase;\n\npublic class SecurityInterceptorTest extends MockedTestCase {\n    \n    @Test\n    public void testStub(){\n        assertTrue(true);\n    }\n    \n    public static void main(String[] args) {\n        try{\n            testSetAdmin();\n            //testSetTeam();\n            //testSetAccessRights();\n            //testGetIteration();\n            //testChangeIteration();\n        } catch(Exception e){\n            e.printStackTrace();\n        }\n    }    \n    private static void testSetAdmin() throws ClientProtocolException, IOException {\n        DefaultHttpClient httpclient = new DefaultHttpClient();\n        DefaultHttpClient uhttpclient = new DefaultHttpClient();\n        \n        HttpPost httpost = new HttpPost(\"http://localhost:8080/agilefant/j_spring_security_check\");\n\n        List <NameValuePair> nvps = new ArrayList <NameValuePair>();\n        nvps.add(new BasicNameValuePair(\"j_username\", \"test\"));\n        nvps.add(new BasicNameValuePair(\"j_password\", \"test\"));\n\n        httpost.setEntity(new UrlEncodedFormEntity(nvps, HTTP.UTF_8));\n        HttpResponse response = httpclient.execute(httpost);\n\n        System.out.println(\"Login form status: \" + response.getStatusLine());\n        CookieStore cookies = httpclient.getCookieStore();\n        \n        HttpPost uhttpost = new HttpPost(\"http://localhost:8080/agilefant/ajax/storeUser.action\");\n        \n        List <NameValuePair> unvps = new ArrayList <NameValuePair>();\n        unvps.add(new BasicNameValuePair(\"userId\", \"50\"));\n        unvps.add(new BasicNameValuePair(\"user.admin\", \"true\"));\n        \n        uhttpost.setEntity(new UrlEncodedFormEntity(unvps, HTTP.UTF_8));\n              \n        uhttpclient.setCookieStore(cookies);\n        HttpResponse response2 = uhttpclient.execute(uhttpost);\n        \n        System.out.println(\"Change admin status: \" + response2.getStatusLine());\n        \n        BufferedReader in = new BufferedReader(new InputStreamReader(response2.getEntity().getContent()));\n        String line = null;\n        while((line = in.readLine()) != null) {\n            System.out.println(line);\n        }\n        in.close();\n        \n        // When HttpClient instance is no longer needed,\n        // shut down the connection manager to ensure\n        // immediate deallocation of all system resources\n        httpclient.getConnectionManager().shutdown();\n        uhttpclient.getConnectionManager().shutdown();   \n    }\n    \n    private static void testSetTeam() throws ClientProtocolException, IOException {\n        DefaultHttpClient httpclient = new DefaultHttpClient();\n        DefaultHttpClient uhttpclient = new DefaultHttpClient();\n        \n        HttpPost httpost = new HttpPost(\"http://localhost:8080/agilefant/j_spring_security_check\");\n\n        List <NameValuePair> nvps = new ArrayList <NameValuePair>();\n        nvps.add(new BasicNameValuePair(\"j_username\", \"test\"));\n        nvps.add(new BasicNameValuePair(\"j_password\", \"test\"));\n\n        httpost.setEntity(new UrlEncodedFormEntity(nvps, HTTP.UTF_8));\n        HttpResponse response = httpclient.execute(httpost);\n\n        System.out.println(\"Login form status: \" + response.getStatusLine());\n        CookieStore cookies = httpclient.getCookieStore();\n        \n        HttpPost uhttpost = new HttpPost(\"http://localhost:8080/agilefant/ajax/storeUser.action\");\n        \n        List <NameValuePair> unvps = new ArrayList <NameValuePair>();\n        unvps.add(new BasicNameValuePair(\"userId\", \"50\"));\n        unvps.add(new BasicNameValuePair(\"teamIds\", \"3\"));\n        unvps.add(new BasicNameValuePair(\"teamsChanged\", \"true\"));\n        \n        uhttpost.setEntity(new UrlEncodedFormEntity(unvps, HTTP.UTF_8));\n              \n        uhttpclient.setCookieStore(cookies);\n        HttpResponse response2 = uhttpclient.execute(uhttpost);\n        \n        System.out.println(\"Change admin status: \" + response2.getStatusLine());\n        \n        BufferedReader in = new BufferedReader(new InputStreamReader(response2.getEntity().getContent()));\n        String line = null;\n        while((line = in.readLine()) != null) {\n            System.out.println(line);\n        }\n        in.close();\n        \n        // When HttpClient instance is no longer needed,\n        // shut down the connection manager to ensure\n        // immediate deallocation of all system resources\n        httpclient.getConnectionManager().shutdown();\n        uhttpclient.getConnectionManager().shutdown();   \n    }\n    \n    private static void testSetAccessRights() throws ClientProtocolException, IOException {\n        DefaultHttpClient httpclient = new DefaultHttpClient();\n        DefaultHttpClient uhttpclient = new DefaultHttpClient();\n        \n        HttpPost httpost = new HttpPost(\"http://localhost:8080/agilefant/j_spring_security_check\");\n\n        List <NameValuePair> nvps = new ArrayList <NameValuePair>();\n        nvps.add(new BasicNameValuePair(\"j_username\", \"test\"));\n        nvps.add(new BasicNameValuePair(\"j_password\", \"test\"));\n\n        httpost.setEntity(new UrlEncodedFormEntity(nvps, HTTP.UTF_8));\n        HttpResponse response = httpclient.execute(httpost);\n\n        System.out.println(\"Login form status: \" + response.getStatusLine());\n        CookieStore cookies = httpclient.getCookieStore();\n        \n        HttpPost uhttpost = new HttpPost(\"http://localhost:8080/agilefant/ajax/storeProduct.action\");\n        \n        List <NameValuePair> unvps = new ArrayList <NameValuePair>();\n        unvps.add(new BasicNameValuePair(\"productId\", \"1\"));\n        unvps.add(new BasicNameValuePair(\"teamIds\", \"6\"));\n        unvps.add(new BasicNameValuePair(\"teamIds\", \"3\"));\n        unvps.add(new BasicNameValuePair(\"teamsChanged\", \"true\"));\n        \n        uhttpost.setEntity(new UrlEncodedFormEntity(unvps, HTTP.UTF_8));\n              \n        uhttpclient.setCookieStore(cookies);\n        HttpResponse response2 = uhttpclient.execute(uhttpost);\n        \n        System.out.println(\"Change admin status: \" + response2.getStatusLine());\n        \n        BufferedReader in = new BufferedReader(new InputStreamReader(response2.getEntity().getContent()));\n        String line = null;\n        while((line = in.readLine()) != null) {\n            System.out.println(line);\n        }\n        in.close();\n        \n        // When HttpClient instance is no longer needed,\n        // shut down the connection manager to ensure\n        // immediate deallocation of all system resources\n        httpclient.getConnectionManager().shutdown();\n        uhttpclient.getConnectionManager().shutdown();   \n    }\n    \n    private static void testChangeIteration() throws ClientProtocolException, IOException {\n        DefaultHttpClient httpclient = new DefaultHttpClient();\n        DefaultHttpClient uhttpclient = new DefaultHttpClient();\n        \n        HttpPost httpost = new HttpPost(\"http://localhost:8080/agilefant/j_spring_security_check\");\n\n        List <NameValuePair> nvps = new ArrayList <NameValuePair>();\n        nvps.add(new BasicNameValuePair(\"j_username\", \"test\"));\n        nvps.add(new BasicNameValuePair(\"j_password\", \"test\"));\n\n        httpost.setEntity(new UrlEncodedFormEntity(nvps, HTTP.UTF_8));\n        HttpResponse response = httpclient.execute(httpost);\n\n        System.out.println(\"Login form status: \" + response.getStatusLine());\n        CookieStore cookies = httpclient.getCookieStore();\n        \n        HttpPost uhttpost = new HttpPost(\"http://localhost:8080/agilefant/ajax/storeIteration.action\");\n        \n        List <NameValuePair> unvps = new ArrayList <NameValuePair>();\n        unvps.add(new BasicNameValuePair(\"iterationId\", \"33\"));\n        unvps.add(new BasicNameValuePair(\"iteration.backlogSize\", \"75\"));\n        \n        uhttpost.setEntity(new UrlEncodedFormEntity(unvps, HTTP.UTF_8));\n              \n        uhttpclient.setCookieStore(cookies);\n        HttpResponse response2 = uhttpclient.execute(uhttpost);\n        \n        System.out.println(\"Change iteration size status: \" + response2.getStatusLine());\n        \n        BufferedReader in = new BufferedReader(new InputStreamReader(response2.getEntity().getContent()));\n        String line = null;\n        while((line = in.readLine()) != null) {\n            System.out.println(line);\n        }\n        in.close();\n        \n        // When HttpClient instance is no longer needed,\n        // shut down the connection manager to ensure\n        // immediate deallocation of all system resources\n        httpclient.getConnectionManager().shutdown();\n        uhttpclient.getConnectionManager().shutdown();   \n    }\n\n    private static void testGetIteration() throws ClientProtocolException, IOException {\n        DefaultHttpClient httpclient = new DefaultHttpClient();\n        DefaultHttpClient uhttpclient = new DefaultHttpClient();\n        \n        HttpPost httpost = new HttpPost(\"http://localhost:8080/agilefant/j_spring_security_check\");\n\n        List <NameValuePair> nvps = new ArrayList <NameValuePair>();\n        nvps.add(new BasicNameValuePair(\"j_username\", \"test\"));\n        nvps.add(new BasicNameValuePair(\"j_password\", \"test\"));\n\n        httpost.setEntity(new UrlEncodedFormEntity(nvps, HTTP.UTF_8));\n        HttpResponse response = httpclient.execute(httpost);\n\n        System.out.println(\"Login form status: \" + response.getStatusLine());\n        CookieStore cookies = httpclient.getCookieStore();\n        \n        HttpPost uhttpost = new HttpPost(\"http://localhost:8080/agilefant/ajax/iterationData.action\");\n        \n        List <NameValuePair> unvps = new ArrayList <NameValuePair>();\n        unvps.add(new BasicNameValuePair(\"iterationId\", \"33\"));\n        \n        uhttpost.setEntity(new UrlEncodedFormEntity(unvps, HTTP.UTF_8));\n              \n        uhttpclient.setCookieStore(cookies);\n        HttpResponse response2 = uhttpclient.execute(uhttpost);\n        \n        System.out.println(\"Get iteration status: \" + response2.getStatusLine());\n        \n        BufferedReader in = new BufferedReader(new InputStreamReader(response2.getEntity().getContent()));\n        String line = null;\n        while((line = in.readLine()) != null) {\n            System.out.println(line);\n        }\n        in.close();\n        \n        // When HttpClient instance is no longer needed,\n        // shut down the connection manager to ensure\n        // immediate deallocation of all system resources\n        httpclient.getConnectionManager().shutdown();\n        uhttpclient.getConnectionManager().shutdown();   \n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\SettingActionTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["SettingActionTest"], "AN": ["testable", "settingBusiness"], "SCS_VariableDeclarator": ["testable", "settingBusiness"], "MN": ["setUp", "testValidateLoadMeterValues", "testInitilizeEmptyLoadMeterValues_empty", "testInitilizeEmptyLoadMeterValues"], "PN": [], "SCS_ClassReference": ["e", "", "SettingBusiness", "testable", "testable", "testable", "testable", "testable", "testable", "", "testable", "testable", "", "testable", "testable", "", "testable", "testable", "", "testable", "testable", "", "testable", "testable", "", "testable", "testable", "", "testable", "", "testable", "", "testable", "", "testable", "", "testable", "testable", "testable", "testable", "testable", "testable", "testable", "", "testable", "", "testable", "", "testable", "", "testable", "", "testable"], "SCS_MethodInvocation": ["printStackTrace", "createMock", "setSettingBusiness", "setRangeLow", "setOptimalLow", "setOptimalHigh", "setCriticalLow", "setRangeHigh", "assertFalse", "validateLoadMeterValues", "setRangeLow", "assertFalse", "validateLoadMeterValues", "setOptimalLow", "assertFalse", "validateLoadMeterValues", "setOptimalHigh", "assertFalse", "validateLoadMeterValues", "setCriticalLow", "assertFalse", "validateLoadMeterValues", "setRangeHigh", "assertTrue", "validateLoadMeterValues", "initilizeEmptyLoadMeterValues", "assertEquals", "getCriticalLow", "assertEquals", "getOptimalHigh", "assertEquals", "getOptimalLow", "assertEquals", "getRangeHigh", "assertEquals", "getRangeLow", "setRangeLow", "setOptimalLow", "setOptimalHigh", "setCriticalLow", "setRangeHigh", "initilizeEmptyLoadMeterValues", "assertEquals", "getCriticalLow", "assertEquals", "getOptimalHigh", "assertEquals", "getOptimalLow", "assertEquals", "getRangeHigh", "assertEquals", "getRangeLow"], "SCS_MemberReference": ["settingBusiness", "testable", "settingBusiness", "DEFAULT_CRITICAL_LOW", "DEFAULT_OPTIMAL_HIGH", "DEFAULT_OPTIMAL_LOW", "DEFAULT_RANGE_HIGH", "DEFAULT_RANGE_LOW"], "CO": ["/**\n * StrutsTestCase extends jUnit 3's <code>TestCase</code>.\n * Therefore, the tests must be written in jUnit 3 style.\n */"], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport static org.easymock.EasyMock.*;\n\nimport org.apache.struts2.StrutsTestCase;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport fi.hut.soberit.agilefant.business.SettingBusiness;\n\n/**\n * StrutsTestCase extends jUnit 3's <code>TestCase</code>.\n * Therefore, the tests must be written in jUnit 3 style.\n */\n\npublic class SettingActionTest extends StrutsTestCase {\n    public SettingAction testable;\n    public SettingBusiness settingBusiness;\n        \n    @Before\n    public void setUp() {\n        try {\n            super.setUp();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        settingBusiness = createMock(SettingBusiness.class);\n        testable = new SettingAction();\n        testable.setSettingBusiness(settingBusiness);\n    }\n    \n    @Test\n    public void testValidateLoadMeterValues() {\n        testable.setRangeLow(50);\n        testable.setOptimalLow(40);\n        testable.setOptimalHigh(30);\n        testable.setCriticalLow(20);\n        testable.setRangeHigh(10);\n        \n        assertFalse(testable.validateLoadMeterValues());\n        testable.setRangeLow(10);\n        \n        assertFalse(testable.validateLoadMeterValues());\n        testable.setOptimalLow(20);\n        \n        assertFalse(testable.validateLoadMeterValues());\n        testable.setOptimalHigh(30);\n        \n        assertFalse(testable.validateLoadMeterValues());\n        testable.setCriticalLow(40);\n        \n        assertFalse(testable.validateLoadMeterValues());\n        testable.setRangeHigh(50);\n        \n        assertTrue(testable.validateLoadMeterValues());\n    }\n    \n    @Test\n    public void testInitilizeEmptyLoadMeterValues_empty() {\n        testable.initilizeEmptyLoadMeterValues();\n        assertEquals(SettingBusiness.DEFAULT_CRITICAL_LOW, testable.getCriticalLow());\n        assertEquals(SettingBusiness.DEFAULT_OPTIMAL_HIGH, testable.getOptimalHigh());\n        assertEquals(SettingBusiness.DEFAULT_OPTIMAL_LOW, testable.getOptimalLow());\n        assertEquals(SettingBusiness.DEFAULT_RANGE_HIGH, testable.getRangeHigh());\n        assertEquals(SettingBusiness.DEFAULT_RANGE_LOW, testable.getRangeLow());\n    }\n    \n    @Test\n    public void testInitilizeEmptyLoadMeterValues() {\n        testable.setRangeLow(5);\n        testable.setOptimalLow(3);\n        testable.setOptimalHigh(2);\n        testable.setCriticalLow(1);\n        testable.setRangeHigh(4);\n        testable.initilizeEmptyLoadMeterValues();\n        assertEquals(1, testable.getCriticalLow());\n        assertEquals(2, testable.getOptimalHigh());\n        assertEquals(3, testable.getOptimalLow());\n        assertEquals(4, testable.getRangeHigh());\n        assertEquals(5, testable.getRangeLow());\n    }\n\n\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\SpentEffortActionTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["SpentEffortActionTest"], "AN": ["testable", "heBusiness"], "SCS_VariableDeclarator": ["testable", "heBusiness", "middle", "firstWeek", "lastWeek", "actual", "initWeek", "initYear", "actual", "current", "currentWeek", "nextWeek", "previousWeek", "nextWeekYear", "previousWeekYear", "currentYear", "actual", "startDate", "entries", "day"], "MN": ["setUp", "testInitializeWeekSelection", "getSelectedDate", "getSelectedDate_currentDate", "testGetDaySumsByWeek", "testGetHourEntriesByUserAndDay"], "PN": [], "SCS_MemberReference": ["testable", "heBusiness", "heBusiness", "UTC", "WEEKS_IN_WEEK_SELECTION", "WEEKS_IN_WEEK_SELECTION", "middle", "actual", "WEEKS_IN_WEEK_SELECTION", "firstWeek", "lastWeek", "WEEKS_IN_WEEK_SELECTION", "initWeek", "initYear", "initYear", "initWeek", "initWeek", "initYear", "initWeek", "initYear", "MONDAY", "currentYear", "currentWeek", "nextWeek", "nextWeekYear", "previousWeek", "previousWeekYear", "entries", "UTC", "UTC", "heBusiness", "SUCCESS", "WEEKS_IN_WEEK_SELECTION", "heBusiness", "day", "UTC", "heBusiness", "SUCCESS", "heBusiness"], "SCS_ClassReference": ["", "HourEntryBusiness", "testable", "testable", "", "testable", null, "testable", "testable", "", "", "actual", "", "actual", null, "", "actual", null, "testable", "testable", "testable", "", "actual", "", "actual", "", "testable", null, "", "testable", null, "", "testable", null, "", "testable", null, "current", "current", null, "current", null, "current", null, null, "current", null, "current", "testable", "", "actual", "", "actual", "", "testable", null, "", "testable", null, "", "testable", null, "", "testable", null, "Collections", "", null, "heBusiness", "startDate", "testable", "testable", "", null, "heBusiness", "startDate", "testable", "testable", "", "testable", "testable", "testable", "", "testable", "", "testable", null, "", "testable", null, "", "testable", null, "", "testable", "testable", "testable", null, "", null, "heBusiness", "testable", "testable", "", "", "testable", "", "testable", ""], "SCS_MethodInvocation": ["createMock", "setHourEntryBusiness", "setServerTimeZone", "assertEquals", "getWeeks", "size", "initializeWeekSelection", "getWeeks", "assertNotNull", "assertEquals", "size", "assertEquals", "get", "getWeekOfWeekyear", "assertEquals", "get", "getWeekOfWeekyear", "setWeek", "setYear", "getSelectedDate", "assertEquals", "getYear", "assertEquals", "getWeekOfWeekyear", "assertEquals", "getNextWeek", "getWeekOfWeekyear", "assertEquals", "getNextWeek", "getYear", "assertEquals", "getPrevWeek", "getWeekOfWeekyear", "assertEquals", "getPrevWeek", "getYear", "getWeekOfWeekyear", "plusWeeks", "getWeekOfWeekyear", "minusWeeks", "getWeekOfWeekyear", "withDayOfWeek", "plusWeeks", "getYear", "minusWeeks", "getWeekyear", "getWeekyear", "getSelectedDate", "assertEquals", "getWeekyear", "assertEquals", "getWeekOfWeekyear", "assertEquals", "getNextWeek", "getWeekOfWeekyear", "assertEquals", "getNextWeek", "getYear", "assertEquals", "getPrevWeek", "getWeekOfWeekyear", "assertEquals", "getPrevWeek", "getWeekyear", "emptyList", "expect", "andReturn", "getDailySpentEffortByWeek", "toLocalDate", "getUserHourTimeZone", "getUserMinuteTimeZone", "expect", "andReturn", "calculateWeekSum", "toLocalDate", "getUserHourTimeZone", "getUserMinuteTimeZone", "replay", "setYear", "setWeek", "setUserId", "assertEquals", "getDaySumsByWeek", "assertEquals", "getNextWeek", "getWeekOfWeekyear", "assertEquals", "getPrevWeek", "getWeekOfWeekyear", "assertEquals", "getWeeks", "size", "verify", "setUserId", "setYear", "setDay", "toLocalDate", "expect", "andReturn", "getEntriesByUserAndDay", "getUserHourTimeZone", "getUserMinuteTimeZone", "replay", "assertEquals", "getHourEntriesByUserAndDay", "assertEquals", "getEffortEntries", "verify"], "SCS_VariableDeclaration": ["DateTime", "int", "int", "List", "int", "int", "DateTime", "LocalDate", "int", "int", "int", "int", "int", "int", "DateTime", "DateTime", "List", "LocalDate"], "CO": ["//check that initializeWeekSelection and getSelectedDate have been called"], "CODE": "package fi.hut.soberit.agilefant.web;\nimport static org.easymock.EasyMock.*;\nimport static org.junit.Assert.*;\n\nimport java.util.Collections;\nimport java.util.List;\n\nimport org.joda.time.DateTime;\nimport org.joda.time.DateTimeConstants;\nimport org.joda.time.DateTimeZone;\nimport org.joda.time.LocalDate;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport com.opensymphony.xwork2.Action;\n\nimport fi.hut.soberit.agilefant.business.HourEntryBusiness;\nimport fi.hut.soberit.agilefant.transfer.DailySpentEffort;\npublic class SpentEffortActionTest {\n\n    private SpentEffortAction testable;\n    private HourEntryBusiness heBusiness;\n    \n    @Before\n    public void setUp() {\n        testable = new SpentEffortAction();\n        heBusiness = createMock(HourEntryBusiness.class);\n        testable.setHourEntryBusiness(heBusiness);\n        testable.setServerTimeZone(DateTimeZone.UTC);\n    }\n    @Test\n    public void testInitializeWeekSelection() {\n        DateTime middle = new DateTime(2009,6,1,0,0,0,0);\n        final int firstWeek = 23 - SpentEffortAction.WEEKS_IN_WEEK_SELECTION/2;\n        final int lastWeek = 23 + SpentEffortAction.WEEKS_IN_WEEK_SELECTION/2;\n        \n        assertEquals(0, testable.getWeeks().size());\n        \n        testable.initializeWeekSelection(middle);\n        List<LocalDate> actual = testable.getWeeks();\n        assertNotNull(actual);\n        assertEquals(SpentEffortAction.WEEKS_IN_WEEK_SELECTION, actual.size());\n        assertEquals(firstWeek, actual.get(0).getWeekOfWeekyear());\n        assertEquals(lastWeek, actual.get(SpentEffortAction.WEEKS_IN_WEEK_SELECTION-1).getWeekOfWeekyear());\n        \n    }\n    @Test\n    public void getSelectedDate() {\n        final int initWeek = 23;\n        final int initYear = 2009;\n        testable.setWeek(initWeek);\n        testable.setYear(initYear);\n        DateTime actual = testable.getSelectedDate();\n        assertEquals(initYear, actual.getYear());\n        assertEquals(initWeek, actual.getWeekOfWeekyear());\n        assertEquals(initWeek + 1, testable.getNextWeek().getWeekOfWeekyear());\n        assertEquals(initYear, testable.getNextWeek().getYear());\n        assertEquals(initWeek - 1, testable.getPrevWeek().getWeekOfWeekyear());\n        assertEquals(initYear, testable.getPrevWeek().getYear());\n        \n    }\n    \n    @Test\n    public void getSelectedDate_currentDate() {\n        LocalDate current = new LocalDate();\n        int currentWeek = current.getWeekOfWeekyear();\n        int nextWeek = current.plusWeeks(1).getWeekOfWeekyear();\n        int previousWeek = current.minusWeeks(1).getWeekOfWeekyear();\n        int nextWeekYear = current.withDayOfWeek(DateTimeConstants.MONDAY).plusWeeks(1).getYear();\n        int previousWeekYear = current.minusWeeks(1).getWeekyear();\n        int currentYear = current.getWeekyear();\n        DateTime actual = testable.getSelectedDate();\n        assertEquals(currentYear, actual.getWeekyear());\n        assertEquals(currentWeek, actual.getWeekOfWeekyear());\n        assertEquals(nextWeek, testable.getNextWeek().getWeekOfWeekyear());\n        assertEquals(nextWeekYear, testable.getNextWeek().getYear());\n        assertEquals(previousWeek, testable.getPrevWeek().getWeekOfWeekyear());\n        assertEquals(previousWeekYear, testable.getPrevWeek().getWeekyear());\n    }\n    \n    @Test\n    public void testGetDaySumsByWeek() {\n        DateTime startDate = new DateTime(2009,6,1,0,0,0,0);\n        List<DailySpentEffort> entries = Collections.emptyList();\n        \n        expect(heBusiness.getDailySpentEffortByWeek(startDate.toLocalDate(), 11, testable.getUserHourTimeZone(), testable.getUserMinuteTimeZone(), DateTimeZone.UTC)).andReturn(entries);\n        expect(heBusiness.calculateWeekSum(startDate.toLocalDate(), 11, testable.getUserHourTimeZone(), testable.getUserMinuteTimeZone(), DateTimeZone.UTC)).andReturn(0L);\n        replay(heBusiness);\n        testable.setYear(2009);\n        testable.setWeek(23);\n        testable.setUserId(11);\n        assertEquals(Action.SUCCESS, testable.getDaySumsByWeek());\n        //check that initializeWeekSelection and getSelectedDate have been called\n        assertEquals(24, testable.getNextWeek().getWeekOfWeekyear());\n        assertEquals(22, testable.getPrevWeek().getWeekOfWeekyear());\n        assertEquals(SpentEffortAction.WEEKS_IN_WEEK_SELECTION, testable.getWeeks().size());\n        verify(heBusiness);\n    }\n    @Test\n    public void testGetHourEntriesByUserAndDay() {\n        testable.setUserId(42);\n        testable.setYear(2009);\n        testable.setDay(153);\n        LocalDate day = new DateTime(2009,6,2,0,0,0,0).toLocalDate();\n        expect(heBusiness.getEntriesByUserAndDay(day, 42,testable.getUserHourTimeZone(),testable.getUserMinuteTimeZone(), DateTimeZone.UTC)).andReturn(null);\n        replay(heBusiness);\n        assertEquals(Action.SUCCESS, testable.getHourEntriesByUserAndDay());\n        assertEquals(null, testable.getEffortEntries());\n        verify(heBusiness);\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\StoryActionTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["StoryActionTest"], "SCS_ClassReference": ["SpringJUnit4ClassRunner", "MockContextLoader", "story", "iter", "storyAction", "story", "", null, "storyBusiness", "story", "", "", "storyAction", "", "storyAction", null, "", "ObjectNotFoundException", "storyAction", "", null, "storyBusiness", "", "storyAction", "", "returnedStory", "returnedStory", "rank", "", null, "storyBusiness", "storyAction", "storyAction", "storyAction", "", null, "storyRankBusiness", "returnedStory", "", "storyAction", "", "storyAction", "", "", "storyAction", "", "storyAction", null, "", "storyAction", "storyAction", "storyAction", "story", "storyAction", "storyAction", "", null, "storyBusiness", "story", "", "", "storyAction", "", "storyAction", "storyAction", "story", "storyAction", "storyAction", "", null, "storyBusiness", "story", "storyAction", "", "", "storyAction", "", "storyAction", "story", "storyAction", "iter", "", null, "storyBusiness", "story", "", null, "backlogBusiness", "iter", "storyBusiness", "", "", "storyAction", "", "storyAction", "story", "storyAction", "iter", "", null, "storyBusiness", "story", "", null, "backlogBusiness", "iter", "storyBusiness", "", "", "storyAction", "", "storyAction", "story", "storyAction", "iter", "", null, "storyBusiness", "story", "", null, "backlogBusiness", "iter", "storyBusiness", "", "", "storyAction", "", "storyAction", "story", "storyBusiness", "story", "", "", "storyAction", "", "storyAction", "story", "storyAction", "storyAction", "storyAction", "storyAction", "storyBusiness", "story", "", "", "storyAction", "", "newStory", "", null, "storyBusiness", "newStory", "", "storyAction", "newStory", "", "storyAction", "", "ObjectNotFoundException", "", null, "storyBusiness", "", "storyAction", "", "storyAction", "storyAction", "storyAction", "", null, "storyBusiness", "", null, "storyBusiness", "", null, "backlogBusiness", "", null, "storyBusiness", "", "", "storyAction", "", "", "storyAction", "storyAction", "storyAction", "storyAction", "", null, "storyBusiness", "", null, "storyBusiness", "", null, "backlogBusiness", "", null, "storyBusiness", "", "", "storyAction", "", "", "storyAction", "ObjectNotFoundException", "storyAction", "", null, "storyBusiness", "", "storyAction", "", "storyAction", "storyAction", "", null, "storyBusiness", "", null, "backlogBusiness", "", null, "storyBusiness", "", "", "storyAction", "", "", "storyAction", "storyAction", "storyAction", "", null, "storyBusiness", "", null, "backlogBusiness", "", null, "storyBusiness", "", "", "storyAction", "", "", "storyAction", "Collections", "", null, "storyBusiness", "", "storyAction", "storyAction", "storyAction", "storyAction", "storyAction", "", "storyAction", "Collections", "", null, "storyBusiness", "", "storyAction", "storyAction", "storyAction", "storyAction", "storyAction", "", "", "storyAction"], "AN": ["storyAction", "storyBusiness", "labelBusiness", "backlogBusiness", "storyRankBusiness", "story", "iter"], "SCS_VariableDeclarator": ["storyAction", "storyBusiness", "labelBusiness", "backlogBusiness", "storyRankBusiness", "story", "iter", "storyTo", "returnedStory", "labelNames", "rank", "newStory", "lower", "upper", "returned", "targetStory", "story", "returned", "returned", "returned", "data", "res", "userIds", "labelNames", "data", "res", "userIds", "labelNames"], "MN": ["setUp", "testRetrieve", "testRetrieve_noSuchStory", "testCreate", "testStore", "testStore_changeResponsibles", "testMoveStory", "testSaveMoveSignleStory", "testMoveStoryAndChildren", "testDelete", "testDelete_withChoices", "testInitializePrefetchingData", "testInitializePrefetchingData_noSuchStory", "testRankUnder", "testRankOver", "testRankUnder_notFound", "testRankStoryToTop", "testRankStoryToBottom", "testCreateStoryUnder", "testCreateStorySibling"], "PN": [], "SCS_MemberReference": ["story", "iter", "story", "storyTo", "SUCCESS", "returnedStory", "labelNames", "rank", "returnedStory", "labelNames", "SUCCESS", "story", "story", "story", "story", "story", "story", "SUCCESS", "story", "iter", "story", "iter", "SUCCESS", "story", "iter", "story", "iter", "SUCCESS", "story", "iter", "story", "iter", "SUCCESS", "SUCCESS", "MOVE", "MOVE", "DELETE", "DELETE", "MOVE", "MOVE", "DELETE", "DELETE", "SUCCESS", "newStory", "newStory", "lower", "upper", "iter", "returned", "lower", "upper", "iter", "SUCCESS", "returned", "story", "targetStory", "iter", "returned", "story", "targetStory", "iter", "SUCCESS", "returned", "story", "iter", "returned", "story", "iter", "SUCCESS", "returned", "story", "iter", "returned", "story", "iter", "SUCCESS", "returned", "res", "data", "userIds", "labelNames", "labelNames", "data", "labelNames", "res", "data", "userIds", "labelNames", "data", "labelNames", "res"], "SCS_MethodInvocation": ["setId", "setId", "setStoryId", "getId", "expect", "andReturn", "retrieveStoryWithMetrics", "getId", "replayAll", "assertEquals", "retrieve", "assertEquals", "getStory", "getId", "verifyAll", "setStoryId", "expect", "andThrow", "retrieveStoryWithMetrics", "replayAll", "retrieve", "verifyAll", "setName", "setBacklog", "setRank", "expect", "andReturn", "create", "getStory", "getBacklogId", "getUserIds", "expect", "andReturn", "getRankByBacklog", "getBacklog", "replayAll", "setLabelNames", "assertEquals", "create", "verifyAll", "assertTrue", "getStory", "assertSame", "getStory", "getName", "assertEquals", "getStory", "setStory", "setStoryId", "getId", "setUsersChanged", "setTasksToDone", "expect", "andReturn", "store", "getId", "replayAll", "assertEquals", "store", "verifyAll", "setStory", "setStoryId", "getId", "setUsersChanged", "setTasksToDone", "expect", "andReturn", "store", "getId", "getUserIds", "replayAll", "assertEquals", "store", "verifyAll", "setStoryId", "getId", "setBacklogId", "getId", "expect", "andReturn", "retrieve", "getId", "expect", "andReturn", "retrieve", "getId", "moveStoryAway", "replayAll", "assertEquals", "moveStoryAway", "verifyAll", "setStoryId", "getId", "setBacklogId", "getId", "expect", "andReturn", "retrieve", "getId", "expect", "andReturn", "retrieve", "getId", "moveSingleStoryToBacklog", "replayAll", "assertEquals", "safeMoveSingleStory", "verifyAll", "setStoryId", "getId", "setBacklogId", "getId", "expect", "andReturn", "retrieve", "getId", "expect", "andReturn", "retrieve", "getId", "moveStoryAndChildren", "replayAll", "assertEquals", "moveStoryAndChildren", "verifyAll", "setStoryId", "getId", "deleteAndUpdateHistory", "getId", "replayAll", "assertEquals", "delete", "verifyAll", "setStoryId", "getId", "setTaskHandlingChoice", "setStoryHourEntryHandlingChoice", "setTaskHourEntryHandlingChoice", "setChildHandlingChoice", "deleteAndUpdateHistory", "getId", "replayAll", "assertEquals", "delete", "verifyAll", "setId", "expect", "andReturn", "retrieveDetached", "getId", "replayAll", "initializePrefetchedData", "getId", "assertEquals", "getStory", "verifyAll", "expect", "andThrow", "retrieveDetached", "replayAll", "initializePrefetchedData", "verifyAll", "setStoryId", "setTargetStoryId", "setBacklogId", "expect", "andReturn", "retrieve", "expect", "andReturn", "retrieveIfExists", "expect", "andReturn", "retrieveIfExists", "expect", "andReturn", "rankStoryUnder", "replayAll", "assertEquals", "rankStoryUnder", "verifyAll", "assertEquals", "getStory", "setStoryId", "setTargetStoryId", "setBacklogId", "expect", "andReturn", "retrieve", "expect", "andReturn", "retrieveIfExists", "expect", "andReturn", "retrieveIfExists", "expect", "andReturn", "rankStoryOver", "replayAll", "assertEquals", "rankStoryOver", "verifyAll", "assertEquals", "getStory", "setStoryId", "expect", "andThrow", "retrieve", "replayAll", "rankStoryUnder", "verifyAll", "setStoryId", "setBacklogId", "expect", "andReturn", "retrieve", "expect", "andReturn", "retrieve", "expect", "andReturn", "rankStoryToTop", "replayAll", "assertEquals", "rankStoryToTop", "verifyAll", "assertSame", "getStory", "setStoryId", "setBacklogId", "expect", "andReturn", "retrieve", "expect", "andReturn", "retrieve", "expect", "andReturn", "rankStoryToBottom", "replayAll", "assertEquals", "rankStoryToBottom", "verifyAll", "assertSame", "getStory", "emptySet", "expect", "andReturn", "createStoryUnder", "replayAll", "setLabelNames", "setStory", "setStoryId", "setBacklogId", "createStoryUnder", "verifyAll", "setLabelNames", "emptySet", "expect", "andReturn", "createStorySibling", "replayAll", "setStory", "setStoryId", "setBacklogId", "setLabelNames", "createStorySibling", "verifyAll", "assertEquals", "getStory"], "SCS_VariableDeclaration": ["StoryTO", "Story", "List", "StoryRank", "Story", "Story", "Story", "Story", "Story", "Story", "Story", "Story", "Story", "Story", "Story", "Set", "List", "Story", "Story", "Set", "List"], "CO": ["/*\n     * TEST DELETION\n     */"], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport static org.easymock.EasyMock.expect;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertSame;\nimport static org.junit.Assert.assertTrue;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Set;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.test.annotation.DirtiesContext;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n\nimport com.opensymphony.xwork2.Action;\n\nimport fi.hut.soberit.agilefant.business.BacklogBusiness;\nimport fi.hut.soberit.agilefant.business.LabelBusiness;\nimport fi.hut.soberit.agilefant.business.StoryBusiness;\nimport fi.hut.soberit.agilefant.business.StoryRankBusiness;\nimport fi.hut.soberit.agilefant.exception.ObjectNotFoundException;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.Project;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.StoryRank;\nimport fi.hut.soberit.agilefant.test.Mock;\nimport fi.hut.soberit.agilefant.test.MockContextLoader;\nimport fi.hut.soberit.agilefant.test.MockedTestCase;\nimport fi.hut.soberit.agilefant.test.TestedBean;\nimport fi.hut.soberit.agilefant.transfer.StoryTO;\nimport fi.hut.soberit.agilefant.util.ChildHandlingChoice;\nimport fi.hut.soberit.agilefant.util.HourEntryHandlingChoice;\nimport fi.hut.soberit.agilefant.util.TaskHandlingChoice;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(loader = MockContextLoader.class)\npublic class StoryActionTest extends MockedTestCase {\n\n    @TestedBean\n    StoryAction storyAction;\n    \n    @Mock\n    StoryBusiness storyBusiness;\n    \n    @Mock\n    LabelBusiness labelBusiness;\n    \n    @Mock\n    BacklogBusiness backlogBusiness;\n    \n    @Mock\n    StoryRankBusiness storyRankBusiness;\n    \n    Story story;\n    Iteration iter;\n    \n\n    @Before\n    public void setUp() {\n        story = new Story();\n        story.setId(1234);\n        iter = new Iteration();\n        iter.setId(6446);\n    }\n\n    \n    @Test\n    @DirtiesContext\n    public void testRetrieve() {\n        storyAction.setStoryId(story.getId());\n        StoryTO storyTo = new StoryTO(story);\n        expect(storyBusiness.retrieveStoryWithMetrics(story.getId())).andReturn(storyTo);\n       \n        replayAll();\n        \n        assertEquals(Action.SUCCESS, storyAction.retrieve());\n        assertEquals(1234, storyAction.getStory().getId());\n        \n        verifyAll();\n    }\n\n    @Test(expected = ObjectNotFoundException.class)\n    @DirtiesContext\n    public void testRetrieve_noSuchStory() {\n        storyAction.setStoryId(-1);\n        expect(storyBusiness.retrieveStoryWithMetrics(-1)).andThrow(new ObjectNotFoundException());\n        replayAll();\n        \n        storyAction.retrieve();\n        \n        verifyAll();\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testCreate() {\n        Story returnedStory = new Story();\n        returnedStory.setName(\"Tested story\");\n        returnedStory.setBacklog(new Project());\n        List<String> labelNames = new ArrayList<String>();\n        \n        StoryRank rank = new StoryRank();\n        rank.setRank(222);\n        \n        expect(storyBusiness.create(storyAction.getStory(), storyAction.getBacklogId(), 0, storyAction.getUserIds(), labelNames)).andReturn(returnedStory);\n        expect(storyRankBusiness.getRankByBacklog(returnedStory, returnedStory.getBacklog())).andReturn(rank);\n        \n        replayAll();\n        storyAction.setLabelNames(labelNames);\n        assertEquals(Action.SUCCESS, storyAction.create());\n        verifyAll();\n        \n        assertTrue(storyAction.getStory() instanceof StoryTO);\n        assertSame(\"Tested story\", storyAction.getStory().getName());\n        assertEquals(new Integer(222), ((StoryTO)storyAction.getStory()).getRank());\n    }\n    \n    \n    @Test\n    @DirtiesContext\n    public void testStore() {\n        storyAction.setStory(story);\n        storyAction.setStoryId(story.getId());\n        storyAction.setUsersChanged(false);\n        storyAction.setTasksToDone(true);\n        \n        expect(storyBusiness.store(story.getId(), story, null, null, true))\n                .andReturn(story);\n        replayAll();\n        assertEquals(\"success_withTasks\", storyAction.store());\n        verifyAll();\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testStore_changeResponsibles() {\n        storyAction.setStory(story);\n        storyAction.setStoryId(story.getId());\n        storyAction.setUsersChanged(true);\n        storyAction.setTasksToDone(false);\n        \n        expect(storyBusiness.store(story.getId(), story, null, storyAction.getUserIds(), false))\n                .andReturn(story);\n        replayAll();\n        assertEquals(Action.SUCCESS, storyAction.store());\n        verifyAll();\n    }\n    \n        \n    @Test\n    @DirtiesContext\n    public void testMoveStory() {\n        storyAction.setStoryId(story.getId());\n        storyAction.setBacklogId(iter.getId());\n        \n        expect(storyBusiness.retrieve(story.getId())).andReturn(story);\n        expect(backlogBusiness.retrieve(iter.getId())).andReturn(iter);\n        storyBusiness.moveStoryAway(story, iter);\n        replayAll();\n        assertEquals(Action.SUCCESS, storyAction.moveStoryAway());\n        verifyAll();\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testSaveMoveSignleStory() {\n        storyAction.setStoryId(story.getId());\n        storyAction.setBacklogId(iter.getId());\n        \n        expect(storyBusiness.retrieve(story.getId())).andReturn(story);\n        expect(backlogBusiness.retrieve(iter.getId())).andReturn(iter);\n        storyBusiness.moveSingleStoryToBacklog(story, iter);\n        replayAll();\n        assertEquals(Action.SUCCESS, storyAction.safeMoveSingleStory());\n        verifyAll();\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testMoveStoryAndChildren() {\n        storyAction.setStoryId(story.getId());\n        storyAction.setBacklogId(iter.getId());\n        \n        expect(storyBusiness.retrieve(story.getId())).andReturn(story);\n        expect(backlogBusiness.retrieve(iter.getId())).andReturn(iter);\n        storyBusiness.moveStoryAndChildren(story, iter);\n        replayAll();\n        assertEquals(Action.SUCCESS, storyAction.moveStoryAndChildren());\n        verifyAll();\n    }\n\n    /*\n     * TEST DELETION\n     */\n    \n    @Test\n    @DirtiesContext\n    public void testDelete() {\n       storyAction.setStoryId(story.getId());\n       storyBusiness.deleteAndUpdateHistory(story.getId(), null, null, null, null);\n       replayAll();\n       \n       assertEquals(Action.SUCCESS, storyAction.delete());\n       \n       verifyAll();\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testDelete_withChoices() {\n       storyAction.setStoryId(story.getId());\n       storyAction.setTaskHandlingChoice(TaskHandlingChoice.MOVE);\n       storyAction.setStoryHourEntryHandlingChoice(HourEntryHandlingChoice.MOVE);\n       storyAction.setTaskHourEntryHandlingChoice(HourEntryHandlingChoice.DELETE);\n       storyAction.setChildHandlingChoice(ChildHandlingChoice.DELETE);\n       storyBusiness.deleteAndUpdateHistory(story.getId(), TaskHandlingChoice.MOVE, HourEntryHandlingChoice.MOVE, HourEntryHandlingChoice.DELETE, ChildHandlingChoice.DELETE);\n       replayAll();\n       \n       assertEquals(Action.SUCCESS, storyAction.delete());\n       \n       verifyAll();\n    }\n\n    @Test\n    @DirtiesContext\n    public void testInitializePrefetchingData() {\n        Story newStory = new Story();\n        newStory.setId(2222);\n        expect(storyBusiness.retrieveDetached(newStory.getId())).andReturn(newStory);\n        \n        replayAll();\n        \n        storyAction.initializePrefetchedData(newStory.getId());\n        assertEquals(newStory, storyAction.getStory());\n        \n        verifyAll();\n    }\n    \n    @Test(expected = ObjectNotFoundException.class)\n    @DirtiesContext\n    public void testInitializePrefetchingData_noSuchStory() {\n        expect(storyBusiness.retrieveDetached(-1)).andThrow(new ObjectNotFoundException());\n        \n        replayAll();\n        \n        storyAction.initializePrefetchedData(-1);\n        \n        verifyAll();\n    }\n    \n    \n    @Test\n    @DirtiesContext\n    public void testRankUnder() {\n        storyAction.setStoryId(123);\n        storyAction.setTargetStoryId(666);\n        storyAction.setBacklogId(222);\n        \n        Story lower = new Story();\n        Story upper = new Story();\n        Story returned = new Story();\n        \n        expect(storyBusiness.retrieve(123)).andReturn(lower);\n        expect(storyBusiness.retrieveIfExists(666)).andReturn(upper);\n        expect(backlogBusiness.retrieveIfExists(222)).andReturn(iter);\n        expect(storyBusiness.rankStoryUnder(lower, upper, iter)).andReturn(returned);\n        \n        replayAll();\n        assertEquals(Action.SUCCESS, storyAction.rankStoryUnder());\n        verifyAll();\n        \n        assertEquals(returned, storyAction.getStory());\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testRankOver() {\n        storyAction.setStoryId(123);\n        storyAction.setTargetStoryId(666);\n        storyAction.setBacklogId(222);\n        \n        Story targetStory = new Story();\n        Story story = new Story();\n        Story returned = new Story();\n        \n        expect(storyBusiness.retrieve(123)).andReturn(story);\n        expect(storyBusiness.retrieveIfExists(666)).andReturn(targetStory);\n        expect(backlogBusiness.retrieveIfExists(222)).andReturn(iter);\n        expect(storyBusiness.rankStoryOver(story, targetStory, iter)).andReturn(returned);\n        \n        replayAll();\n        assertEquals(Action.SUCCESS, storyAction.rankStoryOver());\n        verifyAll();\n        \n        assertEquals(returned, storyAction.getStory());\n    }\n    \n    @Test(expected = ObjectNotFoundException.class)\n    @DirtiesContext\n    public void testRankUnder_notFound() {\n        storyAction.setStoryId(-1);\n        expect(storyBusiness.retrieve(-1)).andThrow(new ObjectNotFoundException());\n        replayAll();\n        storyAction.rankStoryUnder();\n        verifyAll();\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testRankStoryToTop() {\n        Story returned = new Story();\n        \n        storyAction.setStoryId(123);\n        storyAction.setBacklogId(222);\n        expect(storyBusiness.retrieve(123)).andReturn(story);\n        expect(backlogBusiness.retrieve(222)).andReturn(iter);\n        expect(storyBusiness.rankStoryToTop(story, iter)).andReturn(returned);\n        replayAll();\n        assertEquals(Action.SUCCESS, storyAction.rankStoryToTop());\n        verifyAll();\n        assertSame(returned, storyAction.getStory());\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testRankStoryToBottom() {\n        Story returned = new Story();\n        \n        storyAction.setStoryId(123);\n        storyAction.setBacklogId(222);\n        expect(storyBusiness.retrieve(123)).andReturn(story);\n        expect(backlogBusiness.retrieve(222)).andReturn(iter);\n        expect(storyBusiness.rankStoryToBottom(story, iter)).andReturn(returned);\n        replayAll();\n        assertEquals(Action.SUCCESS, storyAction.rankStoryToBottom());\n        verifyAll();\n        assertSame(returned, storyAction.getStory());\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testCreateStoryUnder() {\n        Story data = new Story();\n        Story res = new Story();\n        Set<Integer> userIds = Collections.emptySet();\n        List<String> labelNames = new ArrayList<String>();\n        \n        expect(storyBusiness.createStoryUnder(1, 654, data, userIds, labelNames)).andReturn(res);\n        replayAll();\n        storyAction.setLabelNames(labelNames);\n        storyAction.setStory(data);\n        storyAction.setStoryId(1);\n        storyAction.setBacklogId(654);\n        storyAction.createStoryUnder();\n        verifyAll();\n        storyAction.setLabelNames(labelNames);\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testCreateStorySibling() {\n        Story data = new Story();\n        Story res = new Story();\n        Set<Integer> userIds = Collections.emptySet();\n        List<String> labelNames = new ArrayList<String>();\n        \n        expect(storyBusiness.createStorySibling(1, 654, data, userIds, labelNames)).andReturn(res);\n        replayAll();\n        storyAction.setStory(data);\n        storyAction.setStoryId(1);\n        storyAction.setBacklogId(654);\n        storyAction.setLabelNames(labelNames);\n        storyAction.createStorySibling();\n        verifyAll();\n        assertEquals(res, storyAction.getStory());\n    }\n    \n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\StoryHierarchyActionTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["StoryHierarchyActionTest"], "SCS_ClassReference": ["SpringJUnit4ClassRunner", "MockContextLoader", "storyHierarchyAction", "", null, "storyBusiness", "", null, "storyHierarchyBusiness", "", "", "storyHierarchyAction", "", "", "storyHierarchyAction", "", null, "storyBusiness", "", null, "storyBusiness", "storyHierarchyBusiness", "storyHierarchyAction", "storyHierarchyAction", "", "", "storyHierarchyAction", "", "", null, "storyBusiness", "", null, "storyBusiness", "", null, "storyBusiness", "story1", "story2", "story3", "storyHierarchyBusiness", "storyHierarchyBusiness", "storyHierarchyAction", "story3", "storyHierarchyAction", "story1", "story2", "", "", "storyHierarchyAction", "", "", null, "storyBusiness", "", null, "storyBusiness", "", null, "storyBusiness", "story1", "story2", "story3", "storyHierarchyBusiness", "storyHierarchyBusiness", "storyHierarchyAction", "story3", "storyHierarchyAction", "story1", "story2", "", "", "storyHierarchyAction", "", "", null, "storyBusiness", "", null, "storyBusiness", "", null, "storyBusiness", "story1", "story2", "story3", "storyHierarchyBusiness", "storyHierarchyBusiness", "storyHierarchyAction", "story3", "storyHierarchyAction", "story1", "story2", "", "", "storyHierarchyAction", "", "", null, "storyBusiness", "", null, "storyBusiness", "storyHierarchyBusiness", "storyHierarchyAction", "storyHierarchyAction", "", "", "storyHierarchyAction", "", "", null, "storyBusiness", "", null, "storyBusiness", "storyHierarchyBusiness", "storyHierarchyAction", "storyHierarchyAction", "", "", "storyHierarchyAction", "", "Arrays", "storyHierarchyAction", "", null, "storyHierarchyBusiness", "EasyMock", "EasyMock", "StoryFilters", "", null, "storyBusiness", "story", "", "", "storyHierarchyAction", "", "", "storyHierarchyAction", "", null, "storyBusiness", "", null, "storyHierarchyBusiness", "", null, "", null, "", "", "storyHierarchyAction"], "AN": ["storyHierarchyAction", "storyBusiness", "storyHierarchyBusiness"], "SCS_VariableDeclarator": ["storyHierarchyAction", "storyBusiness", "storyHierarchyBusiness", "story", "expected", "story", "story1", "story2", "story3", "story1", "story2", "story3", "story1", "story2", "story3", "story", "story", "story", "stories", "story", "metrics"], "MN": ["testRecurseHierarchyAsList", "testMoveUnder", "moveMultiple", "moveMultipleBefore", "moveMultipleAfter", "testMoveBefore", "testMoveAfter", "testRetrieveProductRootStories", "testRetrieveBranchMetrics"], "PN": [], "SCS_VariableDeclaration": ["Story", "StoryTO", "Story", "Story", "Story", "Story", "Story", "Story", "Story", "Story", "Story", "Story", "Story", "Story", "Story", "List", "Story", "StoryTreeBranchMetrics"], "SCS_MemberReference": ["story", "story", "expected", "story", "SUCCESS", "expected", "story", "story", "story", "story", "SUCCESS", "story3", "story1", "story2", "story1", "story3", "story2", "story3", "SUCCESS", "story3", "story1", "story2", "story1", "story3", "story2", "story3", "SUCCESS", "story3", "story1", "story2", "story1", "story3", "story2", "story3", "SUCCESS", "story", "story", "story", "story", "SUCCESS", "story", "story", "story", "story", "SUCCESS", "story", "stories", "story", "SUCCESS", "stories", "story", "metrics", "story", "storyHierarchyAction", "SUCCESS", "storyHierarchyAction", "metrics"], "SCS_MethodInvocation": ["setStoryId", "expect", "andReturn", "retrieve", "expect", "andReturn", "recurseHierarchy", "replayAll", "assertEquals", "recurseHierarchyAsList", "verifyAll", "assertEquals", "getTopmostStory", "expect", "andReturn", "retrieve", "expect", "andReturn", "retrieve", "moveUnder", "setStoryId", "setReferenceStoryId", "replayAll", "assertEquals", "moveStoryUnder", "verifyAll", "expect", "andReturn", "retrieve", "expect", "andReturn", "retrieve", "expect", "andReturn", "retrieve", "setId", "setId", "setId", "moveUnder", "moveUnder", "setReferenceStoryId", "getId", "setStoryIds", "getId", "getId", "replayAll", "assertEquals", "moveMultipleUnder", "verifyAll", "expect", "andReturn", "retrieve", "expect", "andReturn", "retrieve", "expect", "andReturn", "retrieve", "setId", "setId", "setId", "moveBefore", "moveBefore", "setReferenceStoryId", "getId", "setStoryIds", "getId", "getId", "replayAll", "assertEquals", "moveMultipleBefore", "verifyAll", "expect", "andReturn", "retrieve", "expect", "andReturn", "retrieve", "expect", "andReturn", "retrieve", "setId", "setId", "setId", "moveAfter", "moveAfter", "setReferenceStoryId", "getId", "setStoryIds", "getId", "getId", "replayAll", "assertEquals", "moveMultipleAfter", "verifyAll", "expect", "andReturn", "retrieve", "expect", "andReturn", "retrieve", "moveBefore", "setStoryId", "setReferenceStoryId", "replayAll", "assertEquals", "moveStoryBefore", "verifyAll", "expect", "andReturn", "retrieve", "expect", "andReturn", "retrieve", "moveAfter", "setStoryId", "setReferenceStoryId", "replayAll", "assertEquals", "moveStoryAfter", "verifyAll", "asList", "setProductId", "expect", "andReturn", "retrieveProductRootStories", "eq", "isA", "expect", "andReturn", "retrieve", "getId", "replayAll", "assertEquals", "retrieveProductRootStories", "verifyAll", "assertEquals", "getStories", "expect", "andReturn", "retrieve", "expect", "andReturn", "calculateStoryTreeMetrics", "replayAll", "setStoryId", "assertEquals", "retrieveBranchMetrics", "verifyAll", "assertEquals", "getBranchMetrics"], "CO": ["//    @Test", "//    @DirtiesContext", "//    public void testMoveUnder_integrityErrorThrown() {", "//        Story story = new Story();", "//        Story story2 = new Story();", "//        expect(storyBusiness.retrieve(1)).andReturn(story);", "//        expect(storyBusiness.retrieve(2)).andReturn(story2);", "//        ", "//        storyHierarchyBusiness.moveUnder(story, story2);", "//        expectLastCall().andThrow(new StoryTreeIntegrityViolationException(", "//                Arrays.asList(new StoryTreeIntegrityMessage(story, story2, StoryHierarchyIntegrityViolationType.PARENT_DEEPER_IN_HIERARCHY))));", "//        ", "//        storyHierarchyAction.setStoryId(1);", "//        storyHierarchyAction.setReferenceStoryId(2);", "//        ", "//        replayAll();", "//        assertEquals(Action.ERROR, storyHierarchyAction.moveStoryUnder());", "//        verifyAll();", "//        ", "//        assertEquals(1, storyHierarchyAction.getIntegrityErrors().size());", "//    }"], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport org.easymock.EasyMock;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.test.annotation.DirtiesContext;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n\nimport com.opensymphony.xwork2.Action;\n\nimport fi.hut.soberit.agilefant.business.StoryBusiness;\nimport fi.hut.soberit.agilefant.business.StoryHierarchyBusiness;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.test.Mock;\nimport fi.hut.soberit.agilefant.test.MockContextLoader;\nimport fi.hut.soberit.agilefant.test.MockedTestCase;\nimport fi.hut.soberit.agilefant.test.TestedBean;\nimport fi.hut.soberit.agilefant.transfer.StoryTO;\nimport fi.hut.soberit.agilefant.transfer.StoryTreeBranchMetrics;\nimport fi.hut.soberit.agilefant.util.StoryFilters;\n\nimport static org.junit.Assert.*;\n\nimport static org.easymock.EasyMock.*;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(loader = MockContextLoader.class)\npublic class StoryHierarchyActionTest extends MockedTestCase {\n    \n    @TestedBean\n    private StoryHierarchyAction storyHierarchyAction;\n    \n    @Mock(strict=true)\n    private StoryBusiness storyBusiness;\n    \n    @Mock\n    private StoryHierarchyBusiness storyHierarchyBusiness;\n    \n    @Test\n    @DirtiesContext\n    public void testRecurseHierarchyAsList() {\n        Story story = new Story();\n        StoryTO expected = new StoryTO(story);\n        storyHierarchyAction.setStoryId(123);\n        \n        expect(storyBusiness.retrieve(123)).andReturn(story);\n        expect(storyHierarchyBusiness.recurseHierarchy(story)).andReturn(expected);\n        \n        replayAll();\n        assertEquals(Action.SUCCESS, storyHierarchyAction.recurseHierarchyAsList());\n        verifyAll();\n\n        assertEquals(expected, storyHierarchyAction.getTopmostStory());\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testMoveUnder() {\n        Story story = new Story();\n        expect(storyBusiness.retrieve(1)).andReturn(story);\n        expect(storyBusiness.retrieve(2)).andReturn(story);\n        storyHierarchyBusiness.moveUnder(story, story);\n        \n        storyHierarchyAction.setStoryId(1);\n        storyHierarchyAction.setReferenceStoryId(2);\n        \n        replayAll();\n        assertEquals(Action.SUCCESS, storyHierarchyAction.moveStoryUnder());\n        verifyAll();\n    }\n    \n    @Test\n    @DirtiesContext\n    public void moveMultiple() {\n        Story story1 = new Story();\n        Story story2 = new Story();\n        Story story3 = new Story();\n        expect(storyBusiness.retrieve(3)).andReturn(story3);\n        expect(storyBusiness.retrieve(1)).andReturn(story1);\n        expect(storyBusiness.retrieve(2)).andReturn(story2);\n        story1.setId(1);\n        story2.setId(2);\n        story3.setId(3);\n\n        storyHierarchyBusiness.moveUnder(story1, story3);\n        storyHierarchyBusiness.moveUnder(story2, story3);\n        \n        storyHierarchyAction.setReferenceStoryId(story3.getId());\n        storyHierarchyAction.setStoryIds(new Integer[]{ story1.getId(), story2.getId() });\n        \n        replayAll();\n        assertEquals(Action.SUCCESS, storyHierarchyAction.moveMultipleUnder());\n        verifyAll();\n    }\n    \n    @Test\n    @DirtiesContext\n    public void moveMultipleBefore() {\n        Story story1 = new Story();\n        Story story2 = new Story();\n        Story story3 = new Story();\n        expect(storyBusiness.retrieve(3)).andReturn(story3);\n        expect(storyBusiness.retrieve(1)).andReturn(story1);\n        expect(storyBusiness.retrieve(2)).andReturn(story2);\n        story1.setId(1);\n        story2.setId(2);\n        story3.setId(3);\n        \n        storyHierarchyBusiness.moveBefore(story1, story3);\n        storyHierarchyBusiness.moveBefore(story2, story3);\n        \n        storyHierarchyAction.setReferenceStoryId(story3.getId());\n        storyHierarchyAction.setStoryIds(new Integer[]{ story1.getId(), story2.getId() });\n        \n        replayAll();\n        assertEquals(Action.SUCCESS, storyHierarchyAction.moveMultipleBefore());\n        verifyAll();\n    }\n    \n    @Test\n    @DirtiesContext\n    public void moveMultipleAfter() {\n        Story story1 = new Story();\n        Story story2 = new Story();\n        Story story3 = new Story();\n        expect(storyBusiness.retrieve(3)).andReturn(story3);\n        expect(storyBusiness.retrieve(1)).andReturn(story1);\n        expect(storyBusiness.retrieve(2)).andReturn(story2);\n        story1.setId(1);\n        story2.setId(2);\n        story3.setId(3);\n        \n        storyHierarchyBusiness.moveAfter(story1, story3);\n        storyHierarchyBusiness.moveAfter(story2, story3);\n        \n        storyHierarchyAction.setReferenceStoryId(story3.getId());\n        storyHierarchyAction.setStoryIds(new Integer[]{ story1.getId(), story2.getId() });\n        \n        replayAll();\n        assertEquals(Action.SUCCESS, storyHierarchyAction.moveMultipleAfter());\n        verifyAll();\n    }\n\n//    @Test\n//    @DirtiesContext\n//    public void testMoveUnder_integrityErrorThrown() {\n//        Story story = new Story();\n//        Story story2 = new Story();\n//        expect(storyBusiness.retrieve(1)).andReturn(story);\n//        expect(storyBusiness.retrieve(2)).andReturn(story2);\n//        \n//        storyHierarchyBusiness.moveUnder(story, story2);\n//        expectLastCall().andThrow(new StoryTreeIntegrityViolationException(\n//                Arrays.asList(new StoryTreeIntegrityMessage(story, story2, StoryHierarchyIntegrityViolationType.PARENT_DEEPER_IN_HIERARCHY))));\n//        \n//        storyHierarchyAction.setStoryId(1);\n//        storyHierarchyAction.setReferenceStoryId(2);\n//        \n//        replayAll();\n//        assertEquals(Action.ERROR, storyHierarchyAction.moveStoryUnder());\n//        verifyAll();\n//        \n//        assertEquals(1, storyHierarchyAction.getIntegrityErrors().size());\n//    }\n    \n    @Test\n    @DirtiesContext\n    public void testMoveBefore() {\n        Story story = new Story();\n        expect(storyBusiness.retrieve(1)).andReturn(story);\n        expect(storyBusiness.retrieve(2)).andReturn(story);\n        storyHierarchyBusiness.moveBefore(story, story);\n        \n        storyHierarchyAction.setStoryId(1);\n        storyHierarchyAction.setReferenceStoryId(2);\n        \n        replayAll();\n        assertEquals(Action.SUCCESS, storyHierarchyAction.moveStoryBefore());\n        verifyAll();\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testMoveAfter() {\n        Story story = new Story();\n        expect(storyBusiness.retrieve(1)).andReturn(story);\n        expect(storyBusiness.retrieve(2)).andReturn(story);\n        storyHierarchyBusiness.moveAfter(story, story);\n        \n        storyHierarchyAction.setStoryId(1);\n        storyHierarchyAction.setReferenceStoryId(2);\n        \n        replayAll();\n        assertEquals(Action.SUCCESS, storyHierarchyAction.moveStoryAfter());\n        verifyAll();\n    }\n\n    @Test\n    @DirtiesContext\n    public void testRetrieveProductRootStories() {\n        Story story = new Story();\n        List<Story> stories = new ArrayList<Story>(Arrays.asList(story));\n        \n        storyHierarchyAction.setProductId(123);\n        expect(storyHierarchyBusiness.retrieveProductRootStories(EasyMock.eq(123), EasyMock.isA(StoryFilters.class)))\n        .andReturn(stories);\n        expect(storyBusiness.retrieve(story.getId()))\n        .andReturn(story);\n        \n        replayAll();\n        assertEquals(Action.SUCCESS, storyHierarchyAction.retrieveProductRootStories());\n        verifyAll();\n        \n        assertEquals(stories, storyHierarchyAction.getStories());\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testRetrieveBranchMetrics() {\n        Story story = new Story();\n        StoryTreeBranchMetrics metrics = new StoryTreeBranchMetrics();\n        expect(storyBusiness.retrieve(55)).andReturn(story);\n        expect(storyHierarchyBusiness.calculateStoryTreeMetrics(story)).andReturn(metrics);\n        \n        replayAll();\n        this.storyHierarchyAction.setStoryId(55);\n        assertEquals(Action.SUCCESS, this.storyHierarchyAction.retrieveBranchMetrics());\n        verifyAll();\n        assertEquals(metrics, storyHierarchyAction.getBranchMetrics());\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\StoryTreeIntegrityActionTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["StoryTreeIntegrityActionTest"], "SCS_ClassReference": ["SpringJUnit4ClassRunner", "MockContextLoader", "testable", "testable", "Arrays", "", null, "storyBusiness", "", null, "backlogBusiness", "", null, "storyTreeIntegrityBusiness", "", null, "storyTreeIntegrityBusiness", "", null, "storyTreeIntegrityBusiness", "", "", "testable", "", "", "testable", "", "testable", "", "testable", "testable", "testable", "Arrays", "", null, "storyBusiness", "", null, "backlogBusiness", "", null, "storyTreeIntegrityBusiness", "", null, "storyTreeIntegrityBusiness", "", null, "storyTreeIntegrityBusiness", "", "", "testable", "", "", "testable", null, "", "testable", null, "", "testable", "testable", "testable", "Arrays", "", null, "storyBusiness", "", null, "storyBusiness", "", null, "storyTreeIntegrityBusiness", "", "", "testable", "", "", "testable"], "AN": ["testable", "storyTreeIntegrityBusiness", "storyBusiness", "backlogBusiness", "iterationBusiness"], "SCS_VariableDeclarator": ["testable", "storyTreeIntegrityBusiness", "storyBusiness", "backlogBusiness", "iterationBusiness", "story", "newBacklog", "data", "messages", "story", "newBacklog", "data", "fatal", "messages", "story", "targetStory", "messages"], "MN": ["testCheckChangeBacklog", "testCheckChangeBacklog_fatalError", "testCheckChangeParentStory"], "PN": [], "SCS_VariableDeclaration": ["Story", "Backlog", "MoveStoryNode", "List", "Story", "Backlog", "MoveStoryNode", "StoryTreeIntegrityMessage", "List", "Story", "Story", "List"], "SCS_MethodInvocation": ["setStoryId", "setBacklogId", "asList", "expect", "andReturn", "retrieve", "expect", "andReturn", "retrieve", "expect", "andReturn", "checkChangeBacklog", "expect", "andReturn", "generateChangedStoryTree", "expect", "andReturn", "hasParentStoryConflict", "replayAll", "assertEquals", "checkChangeBacklog", "verifyAll", "assertSame", "getData", "assertSame", "getMessages", "assertTrue", "isParentStoryConflict", "setStoryId", "setBacklogId", "asList", "expect", "andReturn", "retrieve", "expect", "andReturn", "retrieve", "expect", "andReturn", "checkChangeBacklog", "expect", "andReturn", "generateChangedStoryTree", "expect", "andReturn", "hasParentStoryConflict", "replayAll", "assertEquals", "checkChangeBacklog", "verifyAll", "assertTrue", "getMessages", "contains", "assertEquals", "getMessages", "size", "assertFalse", "isParentStoryConflict", "setStoryId", "setTargetStoryId", "asList", "expect", "andReturn", "retrieve", "expect", "andReturn", "retrieve", "expect", "andReturn", "checkChangeParentStory", "replayAll", "assertEquals", "checkChangeParentStory", "verifyAll", "assertSame", "getMessages"], "SCS_MemberReference": ["story", "newBacklog", "messages", "story", "newBacklog", "data", "story", "messages", "story", "newBacklog", "SUCCESS", "data", "messages", "MOVE_TO_ITERATION_HAS_CHILDREN", "fatal", "story", "newBacklog", "messages", "story", "newBacklog", "data", "story", "messages", "story", "newBacklog", "fatal", "story", "targetStory", "messages", "story", "targetStory", "SUCCESS", "messages"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.test.annotation.DirtiesContext;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n\nimport com.opensymphony.xwork2.Action;\n\nimport fi.hut.soberit.agilefant.business.BacklogBusiness;\nimport fi.hut.soberit.agilefant.business.IterationBusiness;\nimport fi.hut.soberit.agilefant.business.StoryBusiness;\nimport fi.hut.soberit.agilefant.business.StoryTreeIntegrityBusiness;\nimport fi.hut.soberit.agilefant.model.Backlog;\nimport fi.hut.soberit.agilefant.model.Project;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.test.Mock;\nimport fi.hut.soberit.agilefant.test.MockContextLoader;\nimport fi.hut.soberit.agilefant.test.MockedTestCase;\nimport fi.hut.soberit.agilefant.test.TestedBean;\nimport fi.hut.soberit.agilefant.transfer.MoveStoryNode;\nimport fi.hut.soberit.agilefant.util.StoryHierarchyIntegrityViolationType;\nimport fi.hut.soberit.agilefant.util.StoryTreeIntegrityMessage;\n\nimport static org.junit.Assert.*;\n\nimport static org.easymock.EasyMock.*;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(loader = MockContextLoader.class)\npublic class StoryTreeIntegrityActionTest extends MockedTestCase {\n\n    @TestedBean\n    StoryTreeIntegrityAction testable;\n    \n    @Mock\n    StoryTreeIntegrityBusiness storyTreeIntegrityBusiness;\n    \n    @Mock\n    StoryBusiness storyBusiness;\n    \n    @Mock\n    BacklogBusiness backlogBusiness;\n    \n    @Mock\n    IterationBusiness iterationBusiness;\n\n    @Test\n    @DirtiesContext\n    public void testCheckChangeBacklog() {\n        Story story = new Story();\n        Backlog newBacklog = new Project();\n        MoveStoryNode data = new MoveStoryNode();\n        \n        testable.setStoryId(222);\n        testable.setBacklogId(66);\n        \n        List<StoryTreeIntegrityMessage> messages = new ArrayList<StoryTreeIntegrityMessage>(\n                Arrays.asList(new StoryTreeIntegrityMessage(null, null, null),\n                        new StoryTreeIntegrityMessage(null, null, null)));\n        \n        expect(storyBusiness.retrieve(222)).andReturn(story);\n        expect(backlogBusiness.retrieve(66)).andReturn(newBacklog);\n        expect(storyTreeIntegrityBusiness.checkChangeBacklog(story, newBacklog))\n            .andReturn(messages);\n                \n        expect(storyTreeIntegrityBusiness.generateChangedStoryTree(story, messages))\n            .andReturn(data);\n        \n        expect(storyTreeIntegrityBusiness.hasParentStoryConflict(story, newBacklog))\n            .andReturn(true);\n        \n        replayAll();\n        assertEquals(Action.SUCCESS, testable.checkChangeBacklog());\n        verifyAll();\n        \n        assertSame(data, testable.getData());\n        assertSame(messages, testable.getMessages());\n        assertTrue(testable.isParentStoryConflict());\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testCheckChangeBacklog_fatalError() {\n        Story story = new Story();\n        Backlog newBacklog = new Project();\n        MoveStoryNode data = new MoveStoryNode();\n        \n        testable.setStoryId(222);\n        testable.setBacklogId(66);\n        \n        StoryTreeIntegrityMessage fatal = new StoryTreeIntegrityMessage(null, null, StoryHierarchyIntegrityViolationType.MOVE_TO_ITERATION_HAS_CHILDREN);\n        List<StoryTreeIntegrityMessage> messages = new ArrayList<StoryTreeIntegrityMessage>(\n                Arrays.asList(fatal, new StoryTreeIntegrityMessage(null, null, null)));\n        \n        expect(storyBusiness.retrieve(222)).andReturn(story);\n        expect(backlogBusiness.retrieve(66)).andReturn(newBacklog);\n        expect(storyTreeIntegrityBusiness.checkChangeBacklog(story, newBacklog))\n            .andReturn(messages);\n        \n        expect(storyTreeIntegrityBusiness.generateChangedStoryTree(story, messages))\n            .andReturn(data);\n        \n        expect(storyTreeIntegrityBusiness.hasParentStoryConflict(story, newBacklog))\n            .andReturn(false);\n        \n        replayAll();\n        assertEquals(\"fatalConstraint\", testable.checkChangeBacklog());\n        verifyAll();\n        \n        assertTrue(testable.getMessages().contains(fatal));\n        assertEquals(1, testable.getMessages().size());\n        assertFalse(testable.isParentStoryConflict());\n    }\n\n    \n    @Test\n    @DirtiesContext\n    public void testCheckChangeParentStory() {\n        Story story = new Story();\n        Story targetStory = new Story();\n        \n        testable.setStoryId(222);\n        testable.setTargetStoryId(632);\n        \n        List<StoryTreeIntegrityMessage> messages = new ArrayList<StoryTreeIntegrityMessage>(\n                Arrays.asList(new StoryTreeIntegrityMessage(null, null, null),\n                        new StoryTreeIntegrityMessage(null, null, null)));\n        \n        expect(storyBusiness.retrieve(222)).andReturn(story);\n        expect(storyBusiness.retrieve(632)).andReturn(targetStory);\n        expect(storyTreeIntegrityBusiness.checkChangeParentStory(story, targetStory))\n            .andReturn(messages);\n        \n        replayAll();\n        assertEquals(Action.SUCCESS, testable.checkChangeParentStory());\n        verifyAll();\n        \n        assertSame(messages, testable.getMessages());\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\TaskActionTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["TaskActionTest"], "SCS_ClassReference": ["SpringJUnit4ClassRunner", "MockContextLoader", "user1", "user2", "task", "testable", "testable", "task", "SecurityUtil", "", null, "transferObjectBusiness", "", null, "taskBusiness", "task", "", "", "", "testable", "", "testable", "", "ObjectNotFoundException", "testable", "", null, "taskBusiness", "", "testable", "", "testable", "testable", "testable", "", null, "taskBusiness", "", "", "", "testable", "", "ObjectNotFoundException", "testable", "testable", "", null, "taskBusiness", "", "testable", "", "testable", "testable", "testable", "Arrays", "", null, "taskBusiness", "", "", "testable", "", "", "task", null, "testable", "testable", "testable", "Arrays", "", null, "taskBusiness", "", "", "testable", "", "", "task", null, "testable", "testable", "", null, "taskBusiness", "", "", "", "testable", "", "user", "SecurityUtil", "testable", "", null, "taskBusiness", "", "", "", "testable", "", "user", "SecurityUtil", "testable", "", null, "taskBusiness", "", "", "", "testable", "", "taskBusiness", "task", "", "", "testable", "", "ObjectNotFoundException", "testable", "taskBusiness", "", null, "", "testable", "", "testable", "taskBusiness", "task", "", "", "testable", "", "testable", "taskBusiness", "task", "", "", "testable", "", "story", "testable", "story", "testable", "testable", "task", "", null, "taskBusiness", "task", "", null, "taskBusiness", "story", "", "", "", "testable", "", "testable", "", "iter", "testable", "testable", "iter", "testable", "task", "", null, "taskBusiness", "task", "", null, "taskBusiness", "iter", "", "", "", "testable", "", "testable", "", "ObjectNotFoundException", "testable", "", null, "taskBusiness", "", "testable", "", "ObjectNotFoundException", "testable", "task", "testable", "testable", "", null, "taskBusiness", "task", "", null, "taskBusiness", "", "testable", "", "", null, "taskBusiness", "task", "", null, "taskBusiness", "task", "", "", "", "testable", "", "ObjectNotFoundException", "testable", "", null, "taskBusiness", "", "testable", "", "", null, "taskBusiness", "", "testable", "", "testable", "", "ObjectNotFoundException", "", null, "taskBusiness", "", "testable", "", "testable", "testable", "testable", "testable", "", null, "taskBusiness", "", null, "taskBusiness", "", null, "taskBusiness", "", "", "testable", "", "testable", "", "ObjectNotFoundException", "testable", "", null, "taskBusiness", "", "testable", "", "testable", "", null, "taskBusiness", "", "", "testable", "", "task", "task", "", null, "taskBusiness", "task", "", null, "storyHierarchyBusiness", "", "", "testable", "", "", "testable", "task", "task", "", null, "taskBusiness", "task", "", "", "testable", "", "", "testable"], "AN": ["testable", "taskBusiness", "transferObjectBusiness", "storyHierarchyBusiness", "task", "user2", "user1"], "SCS_VariableDeclarator": ["testable", "taskBusiness", "transferObjectBusiness", "storyHierarchyBusiness", "task", "user2", "user1", "user", "user", "story", "iter", "expected", "returned", "parent", "parentTo"], "MN": ["setUp", "tearDown", "expectPopulateJsonData", "testRetrieve", "testRetrieve_noSuchTask", "testAjaxStoreTask_newTask", "testAjaxStoreTask_error", "testStoreTask_dontUpdateUsers", "testStoreTask_updateUsers", "testAjaxStoreTask_storyToStarted", "testAjaxStoreTask_alwaysStoryToStarted", "testAjaxStoreTask_neverStoryToStarted", "testDeleteTask", "testDeleteTask_noSuchTask", "testDeleteTask_moveChoice", "testDeleteTask_deleteChoice", "testMoveTask_toStory", "testMoveTask_toIteration", "testMoveTask_noSuchTask", "testMoveTask_bothIdsGiven", "testResetOriginalEstimate", "testResetOriginalEstimate_noSuchTask", "testInitializePrefetchedData_happyCase", "testInitializePrefetchedData_objectNotFound", "testRankUnder_noParentChange", "testRankUnder_iteration", "testRankUnder_objectNotFound", "testDeleteTaskForm", "testGetTaskContext_underStory", "testGetTaskContext_underIteration"], "PN": [], "SCS_MemberReference": ["user1", "user2", "task", "task", "task", "task", "task", "SUCCESS", "task", "task", "SUCCESS", "task", "user1", "user2", "task", "task", "user1", "user2", "task", "task", "task", "task", "always", "user", "task", "task", "never", "user", "task", "task", "SUCCESS", "MOVE", "MOVE", "SUCCESS", "DELETE", "DELETE", "SUCCESS", "task", "task", "task", "SUCCESS", "task", "task", "task", "SUCCESS", "task", "task", "task", "task", "SUCCESS", "expected", "expected", "task", "returned", "task", "SUCCESS", "returned", "task", "SUCCESS", "parent", "parent", "task", "parentTo", "parent", "SUCCESS", "parentTo", "task", "SUCCESS"], "SCS_MethodInvocation": ["setId", "setId", "setId", "setTask", "setTaskId", "getId", "setLoggedUser", "expect", "andReturn", "constructTaskTO", "expect", "andReturn", "retrieve", "getId", "expectPopulateJsonData", "replayAll", "assertEquals", "retrieve", "assertTrue", "getTask", "verifyAll", "setTaskId", "expect", "andThrow", "retrieve", "replayAll", "retrieve", "verifyAll", "setStoryId", "setIterationId", "setResponsiblesChanged", "expect", "andReturn", "storeTask", "expectPopulateJsonData", "replayAll", "assertEquals", "store", "verifyAll", "setIterationId", "setResponsiblesChanged", "expect", "andThrow", "storeTask", "replayAll", "store", "verifyAll", "setResponsiblesChanged", "setIterationId", "setNewResponsibles", "asList", "expect", "andReturn", "storeTask", "expectPopulateJsonData", "replayAll", "store", "verifyAll", "assertEquals", "getResponsibles", "size", "setResponsiblesChanged", "setIterationId", "setNewResponsibles", "asList", "expect", "andReturn", "storeTask", "expectPopulateJsonData", "replayAll", "store", "verifyAll", "assertEquals", "getResponsibles", "size", "setStoryId", "setStoryToStarted", "expect", "andReturn", "storeTask", "expectPopulateJsonData", "replayAll", "assertEquals", "store", "verifyAll", "setMarkStoryStarted", "setLoggedUser", "setStoryId", "expect", "andReturn", "storeTask", "expectPopulateJsonData", "replayAll", "assertEquals", "store", "verifyAll", "setMarkStoryStarted", "setLoggedUser", "setStoryId", "expect", "andReturn", "storeTask", "expectPopulateJsonData", "replayAll", "assertEquals", "store", "verifyAll", "deleteAndUpdateHistory", "getId", "replayAll", "assertEquals", "delete", "verifyAll", "setTaskId", "deleteAndUpdateHistory", "expectLastCall", "andThrow", "replayAll", "delete", "verifyAll", "setHourEntryHandlingChoice", "deleteAndUpdateHistory", "getId", "replayAll", "assertEquals", "delete", "verifyAll", "setHourEntryHandlingChoice", "deleteAndUpdateHistory", "getId", "replayAll", "assertEquals", "delete", "verifyAll", "setId", "setStoryId", "getId", "setIterationId", "setTaskId", "getId", "expect", "andReturn", "retrieve", "getId", "expect", "andReturn", "move", "getId", "expectPopulateJsonData", "replayAll", "assertEquals", "move", "assertTrue", "getTask", "verifyAll", "setId", "setStoryId", "setIterationId", "getId", "setTaskId", "getId", "expect", "andReturn", "retrieve", "getId", "expect", "andReturn", "move", "getId", "expectPopulateJsonData", "replayAll", "assertEquals", "move", "assertTrue", "getTask", "verifyAll", "setTaskId", "expect", "andThrow", "retrieve", "replayAll", "move", "verifyAll", "setTaskId", "getId", "setStoryId", "setIterationId", "expect", "andReturn", "retrieve", "getId", "expect", "andThrow", "move", "replayAll", "move", "verifyAll", "expect", "andReturn", "retrieve", "getId", "expect", "andReturn", "resetOriginalEstimate", "getId", "expectPopulateJsonData", "replayAll", "assertEquals", "resetOriginalEstimate", "verifyAll", "setTaskId", "expect", "andThrow", "retrieve", "replayAll", "resetOriginalEstimate", "verifyAll", "expect", "andReturn", "retrieveDetached", "replayAll", "initializePrefetchedData", "assertEquals", "getTask", "verifyAll", "expect", "andThrow", "retrieveDetached", "replayAll", "initializePrefetchedData", "verifyAll", "setTaskId", "setRankUnderId", "setIterationId", "setStoryId", "expect", "andReturn", "retrieve", "expect", "andReturn", "retrieveIfExists", "expect", "andReturn", "rankAndMove", "replayAll", "assertEquals", "rankUnder", "assertSame", "getTask", "verifyAll", "setTaskId", "expect", "andThrow", "retrieve", "replayAll", "rankUnder", "verifyAll", "setTaskId", "expect", "andReturn", "retrieve", "replayAll", "assertEquals", "deleteTaskForm", "verifyAll", "setStory", "setIteration", "expect", "andReturn", "retrieve", "getId", "expect", "andReturn", "recurseHierarchy", "replayAll", "assertEquals", "getTaskContext", "verifyAll", "assertEquals", "getParentStory", "setStory", "setIteration", "expect", "andReturn", "retrieve", "getId", "replayAll", "assertEquals", "getTaskContext", "verifyAll", "assertNull", "getParentStory"], "SCS_VariableDeclaration": ["User", "User", "Story", "Iteration", "Task", "Task", "Story", "StoryTO"], "CO": ["/*\n     * TEST RETRIEVING.\n     */", "/*\n     * TEST STORING.\n     */", "/*\n     * TEST DELETING\n     */", "/*\n     * TEST MOVING\n     */", "/*\n     * TEST RESETING ORIGINAL ESTIMATE\n     */", "/*\n     * TEST PREFETCHING\n     */", "/*\n     * TEST RANKING \n     */", "//expect(taskBusiness.rankUnderTask(task, null)).andReturn(returned);", "/*\n     * TEST CONTEXT FETCHING\n     */"], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport static org.easymock.EasyMock.*;\nimport static org.junit.Assert.*;\n\nimport java.util.Arrays;\nimport java.util.HashSet;\n\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.test.annotation.DirtiesContext;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n\nimport com.opensymphony.xwork2.Action;\n\nimport fi.hut.soberit.agilefant.business.StoryHierarchyBusiness;\nimport fi.hut.soberit.agilefant.business.TaskBusiness;\nimport fi.hut.soberit.agilefant.business.TransferObjectBusiness;\nimport fi.hut.soberit.agilefant.exception.ObjectNotFoundException;\nimport fi.hut.soberit.agilefant.model.Iteration;\nimport fi.hut.soberit.agilefant.model.Story;\nimport fi.hut.soberit.agilefant.model.Task;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.security.SecurityUtil;\nimport fi.hut.soberit.agilefant.test.Mock;\nimport fi.hut.soberit.agilefant.test.MockContextLoader;\nimport fi.hut.soberit.agilefant.test.MockedTestCase;\nimport fi.hut.soberit.agilefant.test.TestedBean;\nimport fi.hut.soberit.agilefant.transfer.StoryTO;\nimport fi.hut.soberit.agilefant.transfer.TaskTO;\nimport fi.hut.soberit.agilefant.util.HourEntryHandlingChoice;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(loader = MockContextLoader.class)\npublic class TaskActionTest extends MockedTestCase {\n\n    @TestedBean\n    private TaskAction testable;\n    \n    @Mock\n    private TaskBusiness taskBusiness;\n    \n    @Mock\n    private TransferObjectBusiness transferObjectBusiness;\n    \n    @Mock\n    private StoryHierarchyBusiness storyHierarchyBusiness;\n    \n    private Task task;\n    private User user2;\n    private User user1;\n    \n    \n    @Before\n    public void setUp() {\n        user1 = new User();\n        user1.setId(1);\n        \n        user2 = new User();\n        user2.setId(2);\n        \n        task = new Task();\n        task.setId(444);\n        testable.setTask(task);\n        testable.setTaskId(task.getId());\n    }\n    \n    @After\n    public void tearDown() {\n        SecurityUtil.setLoggedUser(null);\n    }\n    \n    private void expectPopulateJsonData() {\n        expect(transferObjectBusiness.constructTaskTO(task)).andReturn(new TaskTO(task));\n    }\n    \n\n    \n    \n    /*\n     * TEST RETRIEVING.\n     */\n    @Test\n    @DirtiesContext\n    public void testRetrieve() {\n        expect(taskBusiness.retrieve(task.getId())).andReturn(task);\n        expectPopulateJsonData();\n        replayAll();\n        \n        assertEquals(Action.SUCCESS, testable.retrieve());\n        assertTrue(testable.getTask() instanceof TaskTO);\n        \n        verifyAll(); \n    }\n\n    \n    @Test(expected = ObjectNotFoundException.class)\n    @DirtiesContext\n    public void testRetrieve_noSuchTask() {\n        testable.setTaskId(-1);\n        expect(taskBusiness.retrieve(-1)).andThrow(new ObjectNotFoundException());\n        replayAll();\n        \n        testable.retrieve();\n        \n        verifyAll();\n    }\n    \n    \n    /*\n     * TEST STORING.\n     */\n    \n    @Test\n    @DirtiesContext\n    public void testAjaxStoreTask_newTask() {\n        testable.setStoryId(null);\n        testable.setIterationId(2);\n        testable.setResponsiblesChanged(true);\n        expect(taskBusiness.storeTask(task, 2, null, false))\n            .andReturn(task);\n        expectPopulateJsonData();\n        replayAll();\n        \n        assertEquals(Action.SUCCESS, testable.store());\n        \n        verifyAll();\n    }\n    \n    @Test(expected = ObjectNotFoundException.class)\n    @DirtiesContext\n    public void testAjaxStoreTask_error() {\n        testable.setIterationId(2);\n        testable.setResponsiblesChanged(true);\n        \n        expect(taskBusiness.storeTask(task, 2, null, false))\n            .andThrow(new ObjectNotFoundException(\"Iteration not found\"));\n        replayAll();\n        \n        testable.store();\n        \n        verifyAll();\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testStoreTask_dontUpdateUsers() {\n        testable.setResponsiblesChanged(false);\n        testable.setIterationId(2);\n        testable.setNewResponsibles(new HashSet<User>(Arrays.asList(user1, user2)));\n        \n        expect(taskBusiness.storeTask(task, 2, null, false))\n            .andReturn(task);\n        \n        expectPopulateJsonData();\n        \n        replayAll();\n        testable.store();\n        verifyAll();\n        \n        assertEquals(0, task.getResponsibles().size());\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testStoreTask_updateUsers() {\n        testable.setResponsiblesChanged(true);\n        testable.setIterationId(2);\n        testable.setNewResponsibles(new HashSet<User>(Arrays.asList(user1, user2)));\n        \n        expect(taskBusiness.storeTask(task, 2, null, false))\n            .andReturn(task);\n        \n        expectPopulateJsonData();\n        \n        replayAll();\n        testable.store();\n        verifyAll();\n        \n        assertEquals(2, task.getResponsibles().size());\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testAjaxStoreTask_storyToStarted() {\n        testable.setStoryId(3);\n        testable.setStoryToStarted(true);\n        expect(taskBusiness.storeTask(task, null, 3, true))\n            .andReturn(task);\n        expectPopulateJsonData();\n        replayAll();\n        \n        assertEquals(\"success_withStory\", testable.store());\n        \n        verifyAll();\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testAjaxStoreTask_alwaysStoryToStarted() {\n        User user = new User();\n        user.setMarkStoryStarted(User.UserSettingType.always);\n        SecurityUtil.setLoggedUser(user);\n        \n        testable.setStoryId(3);\n        expect(taskBusiness.storeTask(task, null, 3, true))\n            .andReturn(task);\n        expectPopulateJsonData();\n        replayAll();\n        \n        assertEquals(\"success_withStory\", testable.store());\n        \n        verifyAll();\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testAjaxStoreTask_neverStoryToStarted() {\n        User user = new User();\n        user.setMarkStoryStarted(User.UserSettingType.never);\n        SecurityUtil.setLoggedUser(user);\n        \n        testable.setStoryId(3);\n        expect(taskBusiness.storeTask(task, null, 3, false))\n            .andReturn(task);\n        expectPopulateJsonData();\n        replayAll();\n        \n        assertEquals(\"success\", testable.store());\n        \n        verifyAll();\n    }\n    \n    \n    /*\n     * TEST DELETING\n     */\n    \n    @Test\n    @DirtiesContext\n    public void testDeleteTask() {\n       taskBusiness.deleteAndUpdateHistory(task.getId(), null);\n       replayAll();\n       \n       assertEquals(Action.SUCCESS, testable.delete());\n       \n       verifyAll();\n    }\n    \n    @Test(expected = ObjectNotFoundException.class)\n    @DirtiesContext\n    public void testDeleteTask_noSuchTask() {\n        testable.setTaskId(-1);\n        taskBusiness.deleteAndUpdateHistory(-1, null);\n        expectLastCall().andThrow(new ObjectNotFoundException());        \n        replayAll();\n        \n        testable.delete();\n        \n        verifyAll();\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testDeleteTask_moveChoice() {\n       testable.setHourEntryHandlingChoice(HourEntryHandlingChoice.MOVE);\n       taskBusiness.deleteAndUpdateHistory(task.getId(), HourEntryHandlingChoice.MOVE);\n       replayAll();\n       \n       assertEquals(Action.SUCCESS, testable.delete());\n       \n       verifyAll();\n    }\n\n    @Test\n    @DirtiesContext\n    public void testDeleteTask_deleteChoice() {\n       testable.setHourEntryHandlingChoice(HourEntryHandlingChoice.DELETE);\n       taskBusiness.deleteAndUpdateHistory(task.getId(), HourEntryHandlingChoice.DELETE);\n       replayAll();\n       \n       assertEquals(Action.SUCCESS, testable.delete());\n       \n       verifyAll();\n    }\n    \n    /*\n     * TEST MOVING\n     */\n    @Test\n    @DirtiesContext\n    public void testMoveTask_toStory() {\n        Story story = new Story();\n        story.setId(3);\n        \n        testable.setStoryId(story.getId());\n        testable.setIterationId(null);\n        testable.setTaskId(task.getId());\n        \n        expect(taskBusiness.retrieve(task.getId())).andReturn(task);\n        expect(taskBusiness.move(task, null, story.getId())).andReturn(task);\n        expectPopulateJsonData();\n        \n        replayAll();\n\n        assertEquals(Action.SUCCESS, testable.move());\n        assertTrue(testable.getTask() instanceof TaskTO);\n        \n        verifyAll();\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testMoveTask_toIteration() {\n        Iteration iter = new Iteration();\n        iter.setId(333);\n        \n        testable.setStoryId(null);\n        testable.setIterationId(iter.getId());\n        testable.setTaskId(task.getId());\n        \n        expect(taskBusiness.retrieve(task.getId())).andReturn(task);\n        expect(taskBusiness.move(task, iter.getId(), null)).andReturn(task);\n        expectPopulateJsonData();\n        \n        replayAll();\n\n        assertEquals(Action.SUCCESS, testable.move());\n        assertTrue(testable.getTask() instanceof TaskTO);\n        \n        verifyAll();\n    }\n    \n    @Test(expected = ObjectNotFoundException.class)\n    @DirtiesContext\n    public void testMoveTask_noSuchTask() {\n        testable.setTaskId(-1);\n        expect(taskBusiness.retrieve(-1)).andThrow(new ObjectNotFoundException());\n        replayAll();\n        \n        testable.move();\n        \n        verifyAll();\n    }\n    \n    @Test(expected = ObjectNotFoundException.class)\n    @DirtiesContext\n    public void testMoveTask_bothIdsGiven() {\n        testable.setTaskId(task.getId());\n        testable.setStoryId(123);\n        testable.setIterationId(1233);\n        \n        expect(taskBusiness.retrieve(task.getId())).andReturn(task);\n        expect(taskBusiness.move(task, 1233, 123)).andThrow(new ObjectNotFoundException());\n        replayAll();\n        \n        testable.move();\n        \n        verifyAll();\n    }\n    \n    /*\n     * TEST RESETING ORIGINAL ESTIMATE\n     */\n    @Test\n    @DirtiesContext\n    public void testResetOriginalEstimate() {\n        expect(taskBusiness.retrieve(task.getId())).andReturn(task);\n        expect(taskBusiness.resetOriginalEstimate(task.getId())).andReturn(task);\n        expectPopulateJsonData();\n        replayAll();\n        \n        assertEquals(Action.SUCCESS, testable.resetOriginalEstimate());\n        \n        verifyAll();\n    }\n    \n    @Test(expected = ObjectNotFoundException.class)\n    @DirtiesContext\n    public void testResetOriginalEstimate_noSuchTask() {\n        testable.setTaskId(-1);\n        expect(taskBusiness.retrieve(-1)).andThrow(new ObjectNotFoundException());\n        replayAll();\n        \n        testable.resetOriginalEstimate();\n        \n        verifyAll();\n    }\n    \n    \n    /*\n     * TEST PREFETCHING\n     */\n    \n    @Test\n    @DirtiesContext\n    public void testInitializePrefetchedData_happyCase() {\n        Task expected = new Task();\n        expect(taskBusiness.retrieveDetached(123)).andReturn(expected);\n        replayAll();\n        \n        testable.initializePrefetchedData(123);\n        assertEquals(expected, testable.getTask());\n        \n        verifyAll();\n    }\n    \n    @Test(expected = ObjectNotFoundException.class)\n    @DirtiesContext\n    public void testInitializePrefetchedData_objectNotFound() {\n        expect(taskBusiness.retrieveDetached(-1)).andThrow(new ObjectNotFoundException());\n        replayAll();\n        \n        testable.initializePrefetchedData(-1);\n        \n        verifyAll();\n    }\n    \n    /*\n     * TEST RANKING \n     */\n    @Test\n    @DirtiesContext\n    public void testRankUnder_noParentChange() {\n        testable.setTaskId(222);\n        testable.setRankUnderId(651);\n        testable.setIterationId(null);\n        testable.setStoryId(null);\n        \n        Task returned = new Task();\n        \n        expect(taskBusiness.retrieve(222)).andReturn(task);\n        expect(taskBusiness.retrieveIfExists(651)).andReturn(null);\n        expect(taskBusiness.rankAndMove(task, null, null, null))\n            .andReturn(returned);\n        //expect(taskBusiness.rankUnderTask(task, null)).andReturn(returned);\n        \n        replayAll();\n        \n        assertEquals(Action.SUCCESS, testable.rankUnder());\n        assertSame(returned, testable.getTask());\n        \n        verifyAll();\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testRankUnder_iteration() {\n        \n    }\n    \n    @Test(expected = ObjectNotFoundException.class)\n    @DirtiesContext\n    public void testRankUnder_objectNotFound() {\n        testable.setTaskId(-1);\n        expect(taskBusiness.retrieve(-1)).andThrow(new ObjectNotFoundException());\n        \n        replayAll();\n        \n        testable.rankUnder();\n        \n        verifyAll();\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testDeleteTaskForm() {\n        testable.setTaskId(10);\n        expect(taskBusiness.retrieve(10)).andReturn(task);\n        \n        replayAll();\n        \n        assertEquals(Action.SUCCESS, testable.deleteTaskForm());\n        \n        verifyAll();\n    }\n    \n    /*\n     * TEST CONTEXT FETCHING\n     */\n    @Test\n    @DirtiesContext\n    public void testGetTaskContext_underStory() {\n        Story parent = new Story();\n        StoryTO parentTo = new StoryTO(parent);\n        task.setStory(parent);\n        task.setIteration(null);\n        \n        expect(taskBusiness.retrieve(task.getId())).andReturn(task);\n        expect(storyHierarchyBusiness.recurseHierarchy(parent)).andReturn(parentTo);\n        \n        replayAll();\n        assertEquals(Action.SUCCESS, testable.getTaskContext());\n        verifyAll();\n        \n        assertEquals(parentTo, testable.getParentStory());\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testGetTaskContext_underIteration() {\n        task.setStory(null);\n        task.setIteration(new Iteration());\n        \n        expect(taskBusiness.retrieve(task.getId())).andReturn(task);\n        \n        replayAll();\n        assertEquals(Action.SUCCESS, testable.getTaskContext());\n        verifyAll();\n        \n        assertNull(testable.getParentStory());\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\TaskSplitActionTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["TaskSplitActionTest"], "AN": ["testable", "taskBusiness", "taskSplitBusiness"], "SCS_VariableDeclarator": ["testable", "taskBusiness", "taskSplitBusiness", "task", "tasks", "task"], "MN": ["setUp_dependencies", "replayAll", "verifyAll", "testSplit", "testPrefetch"], "PN": [], "SCS_MemberReference": ["testable", "taskBusiness", "taskBusiness", "taskSplitBusiness", "taskSplitBusiness", "taskBusiness", "taskSplitBusiness", "taskBusiness", "taskSplitBusiness", "task", "tasks", "task", "task", "SUCCESS", "tasks", "task", "task"], "SCS_ClassReference": ["", "TaskBusiness", "testable", "", "TaskSplitBusiness", "testable", "", "", "testable", "testable", "tasks", "testable", "", null, "taskSplitBusiness", "testable", "", "", "testable", "", "testable", "", "", null, "taskBusiness", "", "testable", "testable", "", "", "testable"], "SCS_MethodInvocation": ["createStrictMock", "setTaskBusiness", "createStrictMock", "setTaskSplitBusiness", "replay", "verify", "setOriginalTaskId", "setOriginal", "add", "setNewTasks", "expect", "andReturn", "splitTask", "getNewTasks", "replayAll", "assertEquals", "split", "assertEquals", "getNewTasks", "verifyAll", "expect", "andReturn", "retrieveDetached", "replayAll", "setOriginalTaskId", "initializePrefetchedData", "verifyAll", "assertEquals", "getOriginal"], "SCS_VariableDeclaration": ["Task", "ArrayList", "Task"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport static org.easymock.EasyMock.*;\nimport static org.junit.Assert.*;\n\nimport java.util.ArrayList;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport com.opensymphony.xwork2.Action;\n\nimport fi.hut.soberit.agilefant.business.TaskBusiness;\nimport fi.hut.soberit.agilefant.business.TaskSplitBusiness;\nimport fi.hut.soberit.agilefant.model.Task;\n\npublic class TaskSplitActionTest {\n\n    TaskSplitAction testable;\n    \n    TaskBusiness taskBusiness;\n    \n    TaskSplitBusiness taskSplitBusiness;\n    \n    @Before\n    public void setUp_dependencies() {\n        testable = new TaskSplitAction();\n        \n        taskBusiness = createStrictMock(TaskBusiness.class);\n        testable.setTaskBusiness(taskBusiness);\n        \n        taskSplitBusiness = createStrictMock(TaskSplitBusiness.class);\n        testable.setTaskSplitBusiness(taskSplitBusiness);\n    }\n    \n    private void replayAll() {\n        replay(taskBusiness, taskSplitBusiness);\n    }\n    \n    private void verifyAll() {\n        verify(taskBusiness, taskSplitBusiness);\n    }    \n    \n    @Test\n    public void testSplit() {\n        testable.setOriginalTaskId(123);\n        Task task = new Task();\n        testable.setOriginal(task);\n        \n        ArrayList<Task> tasks = new ArrayList<Task>();\n        tasks.add(new Task());\n        testable.setNewTasks(tasks);\n        \n        expect(taskSplitBusiness.splitTask(task, testable.getNewTasks())).andReturn(task);\n        \n        replayAll();\n        assertEquals(Action.SUCCESS, testable.split());\n        assertEquals(testable.getNewTasks(), tasks);\n        verifyAll();\n    }\n    \n    @Test\n    public void testPrefetch() {\n        Task task = new Task();\n        expect(taskBusiness.retrieveDetached(123)).andReturn(task);\n        replayAll();\n        testable.setOriginalTaskId(123);\n        testable.initializePrefetchedData(123);\n        verifyAll();\n        assertEquals(task, testable.getOriginal());\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\TeamActionTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["TeamActionTest"], "AN": ["teamAction", "teamBusiness", "team1", "team2", "user1", "user2"], "SCS_VariableDeclarator": ["teamAction", "teamBusiness", "team1", "team2", "user1", "user2", "userList", "teamList", "returned", "userIds", "returned"], "MN": ["setUp_dependencies", "replayAll", "verifyAll", "setUp_data", "testRetrieveAll", "testRetrieve", "testRetrieve_notFound", "testStore", "testStore_doNotChangeUsers"], "PN": [], "SCS_MemberReference": ["teamAction", "teamBusiness", "teamBusiness", "teamBusiness", "teamBusiness", "team1", "team2", "user1", "user2", "user1", "user1", "user2", "userList", "team1", "team2", "teamList", "SUCCESS", "teamList", "team2", "SUCCESS", "team2", "SUCCESS", "team1", "userIds", "returned", "team1", "userIds", "SUCCESS", "returned", "team1", "returned", "team1", "SUCCESS", "returned"], "SCS_ClassReference": ["", "TeamBusiness", "teamAction", "", "", "team1", "team2", "user1", "user2", "SecurityUtil", "userList", "userList", "team1", "Arrays", "", null, "teamBusiness", "EasyMock", "", "", "teamAction", "", "teamAction", "", "teamAction", "", null, "teamBusiness", "", "", "teamAction", "", "", "teamAction", "ObjectNotFoundException", "teamAction", "", null, "teamBusiness", "", "", "teamAction", "", "teamAction", "Arrays", "teamAction", "teamAction", "", null, "teamBusiness", "", "", "teamAction", "", "", "teamAction", "teamAction", "teamAction", "Arrays", "teamAction", "", null, "teamBusiness", "", "", "teamAction", "", "", "teamAction"], "SCS_MethodInvocation": ["createStrictMock", "setTeamBusiness", "replay", "verify", "setName", "setName", "setAdmin", "setAdmin", "setLoggedUser", "add", "add", "setUsers", "asList", "expect", "andReturn", "withUsers", "anyObject", "replayAll", "assertEquals", "retrieveAll", "assertEquals", "getTeamList", "verifyAll", "setTeamId", "expect", "andReturn", "retrieve", "replayAll", "assertEquals", "retrieve", "verifyAll", "assertEquals", "getTeam", "setTeamId", "expect", "andThrow", "retrieve", "replayAll", "assertEquals", "retrieve", "verifyAll", "setTeam", "asList", "setUserIds", "setUsersChanged", "expect", "andReturn", "storeTeam", "replayAll", "assertEquals", "store", "verifyAll", "assertEquals", "getTeam", "setTeam", "setUserIds", "asList", "setUsersChanged", "expect", "andReturn", "storeTeam", "replayAll", "assertEquals", "store", "verifyAll", "assertEquals", "getTeam"], "SCS_VariableDeclaration": ["Collection", "Collection", "Team", "Set", "Team"], "CO": ["// Class under test", "// Dependencies", "// Test data"], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport static org.easymock.EasyMock.*;\nimport static org.junit.Assert.*;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.HashSet;\nimport java.util.Set;\n\nimport org.easymock.EasyMock;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport com.opensymphony.xwork2.Action;\n\nimport fi.hut.soberit.agilefant.business.TeamBusiness;\nimport fi.hut.soberit.agilefant.exception.ObjectNotFoundException;\nimport fi.hut.soberit.agilefant.model.Team;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.security.SecurityUtil;\n\nimport fi.hut.soberit.agilefant.business.TeamBusiness.Call;\n\npublic class TeamActionTest {\n    \n    // Class under test\n    TeamAction teamAction;\n    \n    // Dependencies\n    TeamBusiness teamBusiness;\n    \n    // Test data\n    Team team1;\n    Team team2;\n    \n    User user1;\n    User user2;\n    \n    @Before\n    public void setUp_dependencies() {\n        teamAction = new TeamAction();\n        \n        teamBusiness = createStrictMock(TeamBusiness.class);\n        teamAction.setTeamBusiness(teamBusiness);\n    }\n    \n    private void replayAll() {\n        replay(teamBusiness);\n    }\n    \n    private void verifyAll() {\n        verify(teamBusiness);\n    }\n    \n    @Before\n    public void setUp_data() {\n        team1 = new Team();\n        team1.setName(\"First team\");\n        team2 = new Team();\n        team2.setName(\"Second team\");\n        \n        user1 = new User();\n        user1.setAdmin(true);\n        user2 = new User();\n        user2.setAdmin(false);\n        \n        SecurityUtil.setLoggedUser(user1);\n        \n        Collection<User> userList = new ArrayList<User>();\n        userList.add(user1);\n        userList.add(user2);\n        team1.setUsers(userList);\n    }\n    \n    @Test\n    public void testRetrieveAll() {\n        Collection<Team> teamList = Arrays.asList(team1, team2);\n        expect(teamBusiness.withUsers((Call)EasyMock.anyObject())).andReturn(teamList);\n        replayAll();\n        \n        assertEquals(Action.SUCCESS, teamAction.retrieveAll());\n        assertEquals(teamList, teamAction.getTeamList());\n        \n        verifyAll();\n    }\n    \n    @Test\n    public void testRetrieve() {\n        teamAction.setTeamId(123);\n        expect(teamBusiness.retrieve(123)).andReturn(team2);\n        \n        replayAll();\n        assertEquals(Action.SUCCESS, teamAction.retrieve());\n        verifyAll();\n        \n        assertEquals(team2, teamAction.getTeam());\n    }\n    \n    @Test(expected = ObjectNotFoundException.class)\n    public void testRetrieve_notFound() {\n        teamAction.setTeamId(-1);\n        expect(teamBusiness.retrieve(-1)).andThrow(new ObjectNotFoundException());\n        \n        replayAll();\n        assertEquals(Action.SUCCESS, teamAction.retrieve());\n        verifyAll();\n    }\n    \n    @Test\n    public void testStore() {\n        teamAction.setTeam(team1);\n        Team returned = new Team();\n        Set<Integer> userIds = new HashSet<Integer>(Arrays.asList(1,2,3));\n        teamAction.setUserIds(userIds);\n        teamAction.setUsersChanged(true);\n        expect(teamBusiness.storeTeam(team1, userIds, null, null)).andReturn(returned);\n        \n        replayAll();\n        assertEquals(Action.SUCCESS, teamAction.store());\n        verifyAll();\n        \n        assertEquals(returned, teamAction.getTeam());\n    }\n    \n    @Test\n    public void testStore_doNotChangeUsers() {\n        teamAction.setTeam(team1);\n        Team returned = new Team();\n        teamAction.setUserIds(new HashSet<Integer>(Arrays.asList(1,2,3)));\n        teamAction.setUsersChanged(false);\n        expect(teamBusiness.storeTeam(team1, null, null, null)).andReturn(returned);\n        \n        replayAll();\n        assertEquals(Action.SUCCESS, teamAction.store());\n        verifyAll();\n        \n        assertEquals(returned, teamAction.getTeam());\n    }\n}", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\TimesheetActionTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["TimesheetActionTest"], "AN": ["userIds", "startDate", "endDate", "timesheetAction", "timesheetBusiness", "productBusiness"], "SCS_VariableDeclarator": ["userIds", "startDate", "endDate", "timesheetAction", "timesheetBusiness", "productBusiness", "productIds", "rootNodes", "productIds", "rootNodes", "productIds", "rootNodes", "projectIds", "productIds", "backlogIds", "projectIds", "productIds", "backlogIds", "productIds", "backlogIds", "iterationIds", "projectIds", "backlogIds", "iterationIds", "projectIds", "backlogIds", "userIds", "user1", "user2", "userBusiness", "actual"], "MN": ["setUp", "testGenerateTree_noBacklogsSelected", "testGenerateTree", "testGenerateTree_emptyDates", "testGetSelectedBacklogs_selectedProjects", "testGetSelectedBacklogs_selectedOngoinProjects", "testGetSelectedBacklogs_selectedProducts", "testGetSelectedBacklogs_selectedIterations", "testGetSelectedBacklogs_selectedOngoingIterations", "getSelectedUsers_noUsers", "getSelectedUsers"], "PN": [], "SCS_MemberReference": ["userIds", "startDate", "endDate", "timesheetAction", "timesheetBusiness", "timesheetBusiness", "productBusiness", "productBusiness", "userIds", "productIds", "rootNodes", "productIds", "startDate", "endDate", "userIds", "rootNodes", "timesheetBusiness", "SUCCESS", "rootNodes", "timesheetBusiness", "userIds", "productIds", "rootNodes", "productIds", "startDate", "endDate", "userIds", "rootNodes", "timesheetBusiness", "SUCCESS", "rootNodes", "timesheetBusiness", "userIds", "productIds", "rootNodes", "productIds", "userIds", "rootNodes", "timesheetBusiness", "SUCCESS", "rootNodes", "timesheetBusiness", "productIds", "projectIds", "projectIds", "backlogIds", "productIds", "projectIds", "projectIds", "backlogIds", "productIds", "productIds", "backlogIds", "projectIds", "iterationIds", "iterationIds", "backlogIds", "projectIds", "iterationIds", "iterationIds", "backlogIds", "userBusiness", "userIds", "user1", "user2", "userBusiness", "userBusiness"], "SCS_ClassReference": ["Arrays", "", "TimesheetBusiness", "timesheetAction", "", "ProductBusiness", "timesheetAction", "Collections", "timesheetAction", "timesheetAction", "timesheetAction", "timesheetAction", "Collections", "", null, "timesheetBusiness", "", null, "timesheetBusiness", "", "", "timesheetAction", "", "timesheetAction", "", "timesheetAction", "", "Arrays", "timesheetAction", "timesheetAction", "timesheetAction", "timesheetAction", "Collections", "", null, "timesheetBusiness", "", null, "timesheetBusiness", "", "", "timesheetAction", "", "timesheetAction", "", "timesheetAction", "", "Arrays", "timesheetAction", "timesheetAction", "timesheetAction", "timesheetAction", "Collections", "", null, "timesheetBusiness", "", null, "timesheetBusiness", "", "", "timesheetAction", "", "timesheetAction", "", "timesheetAction", "", "Arrays", "Arrays", "timesheetAction", "timesheetAction", "timesheetAction", "timesheetAction", "", "Arrays", "Arrays", "timesheetAction", "timesheetAction", "timesheetAction", "timesheetAction", "", "Arrays", "timesheetAction", "timesheetAction", "timesheetAction", "", "Arrays", "Arrays", "timesheetAction", "timesheetAction", "timesheetAction", "timesheetAction", "", "Arrays", "Arrays", "timesheetAction", "timesheetAction", "timesheetAction", "timesheetAction", "", "timesheetAction", "", "timesheetAction", "", "timesheetAction", null, "Arrays", "", "UserBusiness", "timesheetAction", "timesheetAction", "", null, "userBusiness", "", null, "userBusiness", "", null, "userBusiness", "", "timesheetAction", "", "actual", ""], "SCS_MethodInvocation": ["asList", "createMock", "setTimesheetBusiness", "createMock", "setProductBusiness", "emptySet", "setUserIds", "setStartDate", "setEndDate", "setProductIds", "emptyList", "expect", "andReturn", "getRootNodes", "expect", "andReturn", "getRootNodeSum", "replay", "assertEquals", "generateTree", "assertEquals", "getProducts", "assertEquals", "getEffortSum", "verify", "asList", "setUserIds", "setStartDate", "setEndDate", "setProductIds", "emptyList", "expect", "andReturn", "getRootNodes", "expect", "andReturn", "getRootNodeSum", "replay", "assertEquals", "generateTree", "assertEquals", "getProducts", "assertEquals", "getEffortSum", "verify", "asList", "setUserIds", "setStartDate", "setEndDate", "setProductIds", "emptyList", "expect", "andReturn", "getRootNodes", "expect", "andReturn", "getRootNodeSum", "replay", "assertEquals", "generateTree", "assertEquals", "getProducts", "assertEquals", "getEffortSum", "verify", "asList", "asList", "setProductIds", "setOnlyOngoing", "setProjectIds", "getSelectedBacklogs", "assertEquals", "asList", "asList", "setProductIds", "setOnlyOngoing", "setProjectIds", "getSelectedBacklogs", "assertEquals", "asList", "setProductIds", "setOnlyOngoing", "getSelectedBacklogs", "assertEquals", "asList", "asList", "setProjectIds", "setOnlyOngoing", "setIterationIds", "getSelectedBacklogs", "assertEquals", "asList", "asList", "setProjectIds", "setOnlyOngoing", "setIterationIds", "getSelectedBacklogs", "assertEquals", "setUserIds", "assertNotNull", "getSelectedUsers", "assertEquals", "getSelectedUsers", "size", "asList", "createMock", "setUserBusiness", "setUserIds", "expect", "andReturn", "retrieve", "expect", "andReturn", "retrieve", "expect", "andReturn", "retrieve", "replay", "getSelectedUsers", "assertEquals", "size", "verify"], "SCS_VariableDeclaration": ["Set", "List", "Set", "List", "Set", "List", "Set", "Set", "Set", "Set", "Set", "Set", "Set", "Set", "Set", "Set", "Set", "Set", "Set", "Set", "Set", "User", "User", "UserBusiness", "List"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport static org.easymock.EasyMock.*;\nimport static org.junit.Assert.*;\n\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport org.joda.time.DateTime;\nimport org.joda.time.DateTimeZone;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport com.opensymphony.xwork2.Action;\n\nimport fi.hut.soberit.agilefant.business.ProductBusiness;\nimport fi.hut.soberit.agilefant.business.TimesheetBusiness;\nimport fi.hut.soberit.agilefant.business.UserBusiness;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.transfer.BacklogTimesheetNode;\n\n\npublic class TimesheetActionTest {\n    \n    private Set<Integer> userIds;\n    private DateTime startDate;\n    private DateTime endDate;\n    private TimesheetAction timesheetAction;\n    private TimesheetBusiness timesheetBusiness;\n    private ProductBusiness productBusiness;\n    \n    @Before\n    public void setUp() {\n        this.userIds = new HashSet<Integer>(Arrays.asList(1,2,3));\n        this.startDate = new DateTime(2009,1,1,1,1,0,0);\n        this.endDate = new DateTime(2009,5,1,1,1,0,0);\n        timesheetAction = new TimesheetAction();\n        timesheetBusiness = createMock(TimesheetBusiness.class);\n        timesheetAction.setTimesheetBusiness(timesheetBusiness);\n        productBusiness = createMock(ProductBusiness.class);\n        timesheetAction.setProductBusiness(productBusiness);\n    }\n    \n    @Test\n    public void testGenerateTree_noBacklogsSelected() {\n        Set<Integer> productIds = Collections.emptySet();\n        timesheetAction.setUserIds(userIds);\n        timesheetAction.setStartDate(new DateTime(2009,1,1,1,1,0,0));\n        timesheetAction.setEndDate(new DateTime(2009,5,1,1,1,0,0));\n        timesheetAction.setProductIds(productIds);\n        List<BacklogTimesheetNode> rootNodes = Collections.emptyList();\n        expect(timesheetBusiness.getRootNodes(productIds, startDate, endDate, null, userIds)).andReturn(rootNodes);\n        expect(timesheetBusiness.getRootNodeSum(rootNodes)).andReturn(500L);\n        replay(timesheetBusiness);\n        assertEquals(Action.SUCCESS, timesheetAction.generateTree());\n        assertEquals(rootNodes, timesheetAction.getProducts());\n        assertEquals(500L, timesheetAction.getEffortSum());\n        verify(timesheetBusiness);\n    }\n    \n    @Test\n    public void testGenerateTree() {\n        Set<Integer> productIds = new HashSet<Integer>(Arrays.asList(4,5));\n        timesheetAction.setUserIds(userIds);\n        timesheetAction.setStartDate(new DateTime(2009,1,1,1,1,0,0));\n        timesheetAction.setEndDate(new DateTime(2009,5,1,1,1,0,0));\n        timesheetAction.setProductIds(productIds);\n        \n        List<BacklogTimesheetNode> rootNodes = Collections.emptyList();\n        expect(timesheetBusiness.getRootNodes(productIds, startDate, endDate, null, userIds)).andReturn(rootNodes);\n        expect(timesheetBusiness.getRootNodeSum(rootNodes)).andReturn(500L);\n        replay(timesheetBusiness);\n        assertEquals(Action.SUCCESS, timesheetAction.generateTree());\n        assertEquals(rootNodes, timesheetAction.getProducts());\n        assertEquals(500L, timesheetAction.getEffortSum());\n        verify(timesheetBusiness);\n    }\n    \n    @Test\n    public void testGenerateTree_emptyDates() {\n        Set<Integer> productIds = new HashSet<Integer>(Arrays.asList(4,5));\n        timesheetAction.setUserIds(userIds);\n        timesheetAction.setStartDate(null);\n        timesheetAction.setEndDate(null);\n        timesheetAction.setProductIds(productIds);\n        \n        List<BacklogTimesheetNode> rootNodes = Collections.emptyList();\n        expect(timesheetBusiness.getRootNodes(productIds, null, null, null, userIds)).andReturn(rootNodes);\n        expect(timesheetBusiness.getRootNodeSum(rootNodes)).andReturn(500L);\n        replay(timesheetBusiness);\n        assertEquals(Action.SUCCESS, timesheetAction.generateTree());\n        assertEquals(rootNodes, timesheetAction.getProducts());\n        assertEquals(500L, timesheetAction.getEffortSum());\n        verify(timesheetBusiness);\n    }\n    \n    @Test\n    public void testGetSelectedBacklogs_selectedProjects() {\n        Set<Integer> projectIds = new HashSet<Integer>(Arrays.asList(1,2,3));\n        Set<Integer> productIds = new HashSet<Integer>(Arrays.asList(4,5));\n        timesheetAction.setProductIds(productIds);\n        timesheetAction.setOnlyOngoing(false);\n        timesheetAction.setProjectIds(projectIds);\n        Set<Integer> backlogIds = timesheetAction.getSelectedBacklogs();\n        assertEquals(projectIds, backlogIds);\n    }\n    @Test\n    public void testGetSelectedBacklogs_selectedOngoinProjects() {\n        Set<Integer> projectIds = new HashSet<Integer>(Arrays.asList(1,2,3));\n        Set<Integer> productIds = new HashSet<Integer>(Arrays.asList(4,5));\n        timesheetAction.setProductIds(productIds);\n        timesheetAction.setOnlyOngoing(true);\n        timesheetAction.setProjectIds(projectIds);\n        Set<Integer> backlogIds = timesheetAction.getSelectedBacklogs();\n        assertEquals(projectIds, backlogIds);\n    }\n    \n    @Test\n    public void testGetSelectedBacklogs_selectedProducts() {\n        Set<Integer> productIds = new HashSet<Integer>(Arrays.asList(4,5));\n        timesheetAction.setProductIds(productIds);\n        timesheetAction.setOnlyOngoing(true);\n        Set<Integer> backlogIds = timesheetAction.getSelectedBacklogs();\n        assertEquals(productIds, backlogIds);\n    }\n    \n    @Test\n    public void testGetSelectedBacklogs_selectedIterations() {\n        Set<Integer> iterationIds = new HashSet<Integer>(Arrays.asList(1,2,3));\n        Set<Integer> projectIds = new HashSet<Integer>(Arrays.asList(4,5));\n        timesheetAction.setProjectIds(projectIds);\n        timesheetAction.setOnlyOngoing(false);\n        timesheetAction.setIterationIds(iterationIds);\n        Set<Integer> backlogIds = timesheetAction.getSelectedBacklogs();\n        assertEquals(iterationIds, backlogIds);\n    }\n    \n    @Test\n    public void testGetSelectedBacklogs_selectedOngoingIterations() {\n        Set<Integer> iterationIds = new HashSet<Integer>(Arrays.asList(1,2,3));\n        Set<Integer> projectIds = new HashSet<Integer>(Arrays.asList(4,5));\n        timesheetAction.setProjectIds(projectIds);\n        timesheetAction.setOnlyOngoing(true);\n        timesheetAction.setIterationIds(iterationIds);\n        Set<Integer> backlogIds = timesheetAction.getSelectedBacklogs();\n        assertEquals(iterationIds, backlogIds);\n    }\n    @Test\n    public void getSelectedUsers_noUsers() {\n        timesheetAction.setUserIds(new HashSet<Integer>());\n        assertNotNull(timesheetAction.getSelectedUsers());\n        assertEquals(0, timesheetAction.getSelectedUsers().size());\n    }\n    @Test\n    public void getSelectedUsers() {\n        Set<Integer> userIds = new HashSet<Integer>(Arrays.asList(1,2,3));\n        User user1 = new User();\n        User user2 = new User();\n        UserBusiness userBusiness = createMock(UserBusiness.class);\n        timesheetAction.setUserBusiness(userBusiness);\n        timesheetAction.setUserIds(userIds);\n        expect(userBusiness.retrieve(1)).andReturn(user1);\n        expect(userBusiness.retrieve(2)).andReturn(user2);\n        expect(userBusiness.retrieve(3)).andReturn(null);\n        replay(userBusiness);\n        List<User> actual = timesheetAction.getSelectedUsers();\n        assertEquals(2, actual.size());\n        verify(userBusiness);\n        \n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\UserActionTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["UserActionTest"], "AN": ["userAction", "userBusiness", "user"], "SCS_VariableDeclarator": ["userAction", "userBusiness", "user", "userList", "returned", "returned", "teamIds"], "MN": ["setUp_dependencies", "getLoggedInUserId", "replayAll", "verifyAll", "setUp_data", "testExecute_defaultUser", "testExecute_userSet", "testRetrieve", "testRetrieve_noSuchUser", "testRetrieveAll", "testStore", "testStore_changeTeams", "testDelete", "testCheckUserName_userExists", "testCheckUserName_userDoesNotExists"], "PN": [], "SCS_MemberReference": ["userAction", "userBusiness", "userBusiness", "userBusiness", "userBusiness", "user", "SUCCESS", "SUCCESS", "user", "user", "SUCCESS", "user", "user", "user", "userList", "SUCCESS", "userList", "user", "returned", "user", "SUCCESS", "returned", "user", "teamIds", "returned", "user", "teamIds", "SUCCESS", "returned", "user", "SUCCESS", "SUCCESS", "SUCCESS"], "SCS_ClassReference": ["", "UserBusiness", "userAction", "", "", "user", "userAction", "", "userAction", "", "userAction", "userAction", "", "userAction", "", "userAction", "SecurityUtil", "userAction", "user", "", null, "userBusiness", "user", "", "", "userAction", "", "userAction", "", "SecurityUtil", "ObjectNotFoundException", "SecurityUtil", "userAction", "", null, "userBusiness", "", "userAction", "", "SecurityUtil", "SecurityUtil", "Arrays", "", null, "userBusiness", "", "", "userAction", "", "userAction", "", "SecurityUtil", "userAction", "userAction", "Arrays", "userAction", "userAction", "userAction", "", null, "userBusiness", "", "", "userAction", "", "", "userAction", "userAction", "Arrays", "userAction", "userAction", "", null, "userBusiness", "", "", "userAction", "", "", "userAction", "userAction", "user", "", null, "userBusiness", "user", "", "", "userAction", "", "userAction", "", null, "userBusiness", "", "", "userAction", "", "", "userAction", "userAction", "", null, "userBusiness", "", "", "userAction", "", "", "userAction"], "SCS_MethodInvocation": ["createStrictMock", "setUserBusiness", "replay", "verify", "setId", "setUserId", "assertEquals", "execute", "assertEquals", "getUserId", "setUserId", "assertEquals", "execute", "assertEquals", "getUserId", "setLoggedUser", "setUserId", "getId", "expect", "andReturn", "retrieve", "getId", "replayAll", "assertEquals", "retrieve", "assertEquals", "getUser", "verifyAll", "clearLoggedUser", "setLoggedUser", "setUserId", "expect", "andThrow", "retrieve", "replayAll", "retrieve", "verifyAll", "clearLoggedUser", "setLoggedUser", "asList", "expect", "andReturn", "retrieveAll", "replayAll", "assertEquals", "retrieveAll", "assertEquals", "getUsers", "verifyAll", "clearLoggedUser", "setUser", "setTeamIds", "asList", "setTeamsChanged", "setPassword1", "setPassword2", "expect", "andReturn", "storeUser", "replayAll", "assertEquals", "store", "verifyAll", "assertEquals", "getUser", "setUser", "asList", "setTeamIds", "setTeamsChanged", "expect", "andReturn", "storeUser", "replayAll", "assertEquals", "store", "verifyAll", "assertEquals", "getUser", "setUserId", "getId", "expect", "andReturn", "retrieve", "getId", "replayAll", "assertEquals", "delete", "verifyAll", "setLoginName", "expect", "andReturn", "isLoginNameUnique", "replayAll", "assertEquals", "checkLoginName", "verifyAll", "assertFalse", "isValid", "setLoginName", "expect", "andReturn", "isLoginNameUnique", "replayAll", "assertEquals", "checkLoginName", "verifyAll", "assertTrue", "isValid"], "SCS_VariableDeclaration": ["Collection", "User", "User", "Set"], "CO": ["// Class under test", "// Dependencies", "// Test data", "/* \n         * Should actually be same, or error is thrown.\n         * Used for testing purposes.\n         */"], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport static org.easymock.EasyMock.*;\nimport static org.junit.Assert.*;\n\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.HashSet;\nimport java.util.Set;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport com.opensymphony.xwork2.Action;\n\nimport fi.hut.soberit.agilefant.business.UserBusiness;\nimport fi.hut.soberit.agilefant.exception.ObjectNotFoundException;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.security.SecurityUtil;\n\npublic class UserActionTest {\n    \n    // Class under test\n    UserAction userAction;\n    \n    // Dependencies\n    UserBusiness userBusiness;\n    \n    // Test data\n    User user;\n    \n    @SuppressWarnings(\"serial\")\n    @Before\n    public void setUp_dependencies() {\n        userAction = new UserAction() {\n            @Override\n            protected int getLoggedInUserId() {\n                return 817;\n            }\n        };\n        \n        userBusiness = createStrictMock(UserBusiness.class);\n        userAction.setUserBusiness(userBusiness);\n    }\n    \n    private void replayAll() {\n        replay(userBusiness);\n    }\n    \n    private void verifyAll() {\n        verify(userBusiness);\n    }\n    \n    @Before\n    public void setUp_data() {\n        user = new User();\n        user.setId(11);\n    }\n    \n    @Test\n    public void testExecute_defaultUser() {\n        userAction.setUserId(0);\n        assertEquals(Action.SUCCESS, userAction.execute());\n        assertEquals(817, userAction.getUserId());\n    }\n    \n    @Test\n    public void testExecute_userSet() {\n        userAction.setUserId(555);\n        assertEquals(Action.SUCCESS, userAction.execute());\n        assertEquals(555, userAction.getUserId());\n    }\n\n    @Test\n    public void testRetrieve() {\n        try {\n            SecurityUtil.setLoggedUser(user);\n            userAction.setUserId(user.getId());\n\n            expect(userBusiness.retrieve(user.getId())).andReturn(user);\n\n            replayAll();\n            assertEquals(Action.SUCCESS, userAction.retrieve());\n            assertEquals(user, userAction.getUser());\n            verifyAll();\n        } finally {\n            SecurityUtil.clearLoggedUser();\n        }\n    }\n\n    @Test(expected = ObjectNotFoundException.class)\n    public void testRetrieve_noSuchUser() {\n        try {\n            SecurityUtil.setLoggedUser(user);\n            userAction.setUserId(-1);\n\n            expect(userBusiness.retrieve(-1)).andThrow(new ObjectNotFoundException());\n            replayAll();\n\n            userAction.retrieve();\n\n            verifyAll();\n        } finally {\n            SecurityUtil.clearLoggedUser();\n        }\n    }\n\n    @Test\n    public void testRetrieveAll() {\n        try {\n            SecurityUtil.setLoggedUser(user);\n            Collection<User> userList = Arrays.asList(new User(), new User());\n            expect(userBusiness.retrieveAll()).andReturn(userList);\n            replayAll();\n\n            assertEquals(Action.SUCCESS, userAction.retrieveAll());\n            assertEquals(userList, userAction.getUsers());\n\n            verifyAll();\n        } finally {\n            SecurityUtil.clearLoggedUser();\n        }\n    }\n\n    @Test\n    public void testStore() {\n        User returned = new User();\n        userAction.setUser(user);\n        userAction.setTeamIds(new HashSet<Integer>(Arrays.asList(1,2,3)));\n        userAction.setTeamsChanged(false);\n        \n        /* \n         * Should actually be same, or error is thrown.\n         * Used for testing purposes.\n         */\n        userAction.setPassword1(\"new password\");\n        userAction.setPassword2(\"new password 2\");\n        expect(userBusiness.storeUser(user, null, \"new password\", \"new password 2\")).andReturn(returned);\n        \n        replayAll();\n        assertEquals(Action.SUCCESS, userAction.store());\n        verifyAll();\n        \n        assertEquals(returned, userAction.getUser());\n    }\n    \n    @Test\n    public void testStore_changeTeams() {\n        User returned = new User();\n        userAction.setUser(user);\n        Set<Integer> teamIds = new HashSet<Integer>(Arrays.asList(1,2,3));\n        userAction.setTeamIds(teamIds);\n        userAction.setTeamsChanged(true);\n\n        expect(userBusiness.storeUser(user, teamIds, null, null)).andReturn(returned);\n        \n        replayAll();\n        assertEquals(Action.SUCCESS, userAction.store());\n        verifyAll();\n        \n        assertEquals(returned, userAction.getUser());\n    }\n    \n    @Test\n    public void testDelete() {\n        userAction.setUserId(user.getId());\n        expect(userBusiness.retrieve(user.getId())).andReturn(user);\n        replayAll();\n        assertEquals(Action.SUCCESS, userAction.delete());\n        verifyAll();\n    }\n    \n    @Test\n    public void testCheckUserName_userExists() {\n        userAction.setLoginName(\"paavo\");\n        expect(userBusiness.isLoginNameUnique(\"paavo\")).andReturn(false);\n        replayAll();\n        assertEquals(Action.SUCCESS, userAction.checkLoginName());\n        verifyAll();\n        assertFalse(userAction.isValid());\n    }\n    \n    @Test\n    public void testCheckUserName_userDoesNotExists() {\n        userAction.setLoginName(\"minna\");\n        expect(userBusiness.isLoginNameUnique(\"minna\")).andReturn(true);\n        replayAll();\n        assertEquals(Action.SUCCESS, userAction.checkLoginName());\n        verifyAll();\n        assertTrue(userAction.isValid());\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\UserLoadActionTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["UserLoadActionTest"], "AN": ["userLoadAction", "userBusiness", "personalLoadBusiness"], "SCS_VariableDeclarator": ["userLoadAction", "userBusiness", "personalLoadBusiness", "user", "loadData", "user", "limits"], "MN": ["setUp", "replayAll", "verifyAll", "testRetrieveUserLoad", "testDailyLoadLimits"], "PN": [], "SCS_MemberReference": ["userLoadAction", "userBusiness", "personalLoadBusiness", "personalLoadBusiness", "userBusiness", "userBusiness", "personalLoadBusiness", "userBusiness", "personalLoadBusiness", "user", "loadData", "user", "DEFAULT_LOAD_INTERVAL_LENGTH", "SUCCESS", "user", "limits", "user", "limits"], "SCS_ClassReference": ["", "UserBusiness", "", "PersonalLoadBusiness", "userLoadAction", "userLoadAction", "", "", "", null, "userBusiness", "", null, "personalLoadBusiness", "userLoadAction", "", "", "userLoadAction", "", "userLoadAction", "", "", null, "userBusiness", "", null, "personalLoadBusiness", "", "userLoadAction", "userLoadAction", "", "userLoadAction", ""], "SCS_MethodInvocation": ["createStrictMock", "createStrictMock", "setPersonalLoadBusiness", "setUserBusiness", "replay", "verify", "expect", "andReturn", "retrieve", "expect", "andReturn", "retrieveUserLoad", "setUserId", "replayAll", "assertEquals", "retrieveUserLoad", "assertNotNull", "getUserLoadData", "verifyAll", "expect", "andReturn", "retrieve", "expect", "andReturn", "getDailyLoadLimitsByUser", "replayAll", "setUserId", "dailyLoadLimits", "assertEquals", "getLoadLimits", "verifyAll"], "SCS_VariableDeclaration": ["User", "ComputedLoadData", "User", "UserLoadLimits"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.web;\nimport static org.easymock.EasyMock.*;\nimport static org.junit.Assert.*;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport com.opensymphony.xwork2.Action;\n\nimport fi.hut.soberit.agilefant.business.PersonalLoadBusiness;\nimport fi.hut.soberit.agilefant.business.UserBusiness;\nimport fi.hut.soberit.agilefant.model.User;\nimport fi.hut.soberit.agilefant.transfer.ComputedLoadData;\nimport fi.hut.soberit.agilefant.transfer.UserLoadLimits;\n\npublic class UserLoadActionTest {\n    private UserLoadAction userLoadAction;\n    private UserBusiness userBusiness;\n    private PersonalLoadBusiness personalLoadBusiness;\n    \n    @Before\n    public void setUp() {\n        this.userLoadAction = new UserLoadAction();\n        this.userBusiness = createStrictMock(UserBusiness.class);\n        this.personalLoadBusiness = createStrictMock(PersonalLoadBusiness.class);\n        userLoadAction.setPersonalLoadBusiness(personalLoadBusiness);\n        userLoadAction.setUserBusiness(userBusiness);\n    }\n    private void replayAll() {\n        replay(userBusiness, personalLoadBusiness);\n    }\n    private void verifyAll() {\n        verify(userBusiness, personalLoadBusiness);\n    }\n    \n    @Test\n    public void testRetrieveUserLoad() {\n        User user = new User();\n        ComputedLoadData loadData = new ComputedLoadData();\n        expect(userBusiness.retrieve(1)).andReturn(user);\n        expect(personalLoadBusiness.retrieveUserLoad(user, UserLoadAction.DEFAULT_LOAD_INTERVAL_LENGTH)).andReturn(loadData);\n        userLoadAction.setUserId(1);\n        replayAll();\n        assertEquals(Action.SUCCESS, userLoadAction.retrieveUserLoad());\n        assertNotNull(userLoadAction.getUserLoadData());\n        verifyAll();\n    }\n    \n    @Test\n    public void testDailyLoadLimits() {\n        User user = new User();\n        UserLoadLimits limits = new UserLoadLimits();\n        expect(userBusiness.retrieve(1)).andReturn(user);\n        expect(personalLoadBusiness.getDailyLoadLimitsByUser(user)).andReturn(limits);\n        replayAll();\n        userLoadAction.setUserId(1);\n        userLoadAction.dailyLoadLimits();\n        assertEquals(limits, userLoadAction.getLoadLimits());\n        verifyAll();\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='C:\\\\Users\\\\Amir\\\\Desktop\\\\PJ\\\\MonoMicroPJ\\\\MonoMicro\\\\agilefant-3.5.4\\\\webapp\\\\src\\\\test\\\\java\\\\fi\\\\hut\\\\soberit\\\\agilefant\\\\web\\\\WidgetActionTest.java' mode='r' encoding='cp1252'>": {"py/object": "collections.defaultdict", "CN": ["WidgetActionTest"], "SCS_ClassReference": ["SpringJUnit4ClassRunner", "MockContextLoader", "testable", "testable", "testable", "testable", "testable", "", null, "agilefantWidgetBusiness", "", "", "testable", "", "", "testable", "testable", "agilefantWidgetBusiness", "", "", "testable", "", "testable", "testable", "testable", "", null, "agilefantWidgetBusiness", "agilefantWidgetBusiness", "", "", "testable", ""], "AN": ["testable", "agilefantWidgetBusiness"], "SCS_VariableDeclarator": ["testable", "agilefantWidgetBusiness", "widget", "widget"], "MN": ["testCreate", "testDelete", "testMove"], "PN": [], "SCS_MethodInvocation": ["setType", "setObjectId", "setCollectionId", "setPosition", "setListNumber", "expect", "andReturn", "create", "replayAll", "assertEquals", "create", "verifyAll", "assertSame", "getWidget", "setWidgetId", "delete", "replayAll", "assertEquals", "delete", "verifyAll", "setWidgetId", "setPosition", "setListNumber", "expect", "andReturn", "retrieve", "move", "replayAll", "assertEquals", "move", "verifyAll"], "SCS_VariableDeclaration": ["AgilefantWidget", "AgilefantWidget"], "SCS_MemberReference": ["widget", "SUCCESS", "widget", "SUCCESS", "widget", "widget", "SUCCESS"], "CO": [], "CODE": "package fi.hut.soberit.agilefant.web;\n\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.test.annotation.DirtiesContext;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n\nimport com.opensymphony.xwork2.Action;\n\nimport fi.hut.soberit.agilefant.business.AgilefantWidgetBusiness;\nimport fi.hut.soberit.agilefant.model.AgilefantWidget;\nimport fi.hut.soberit.agilefant.test.Mock;\nimport fi.hut.soberit.agilefant.test.MockContextLoader;\nimport fi.hut.soberit.agilefant.test.MockedTestCase;\nimport fi.hut.soberit.agilefant.test.TestedBean;\n\nimport static org.junit.Assert.*;\n\nimport static org.easymock.EasyMock.*;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(loader = MockContextLoader.class)\npublic class WidgetActionTest extends MockedTestCase {\n\n    @TestedBean\n    private WidgetAction testable;\n    \n    @Mock\n    private AgilefantWidgetBusiness agilefantWidgetBusiness;\n    \n    @Test\n    @DirtiesContext\n    public void testCreate() {\n        testable.setType(\"text\");\n        testable.setObjectId(122);\n        testable.setCollectionId(5);\n        testable.setPosition(2);\n        testable.setListNumber(1);\n        \n        AgilefantWidget widget = new AgilefantWidget();\n        expect(agilefantWidgetBusiness.create(\"text\", 122, 5)).andReturn(widget);\n        \n        replayAll();\n        assertEquals(Action.SUCCESS, testable.create());\n        verifyAll();\n        \n        assertSame(widget, testable.getWidget());\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testDelete() {\n        testable.setWidgetId(123);\n        \n        agilefantWidgetBusiness.delete(123);\n        replayAll();\n        assertEquals(Action.SUCCESS, testable.delete());\n        verifyAll();\n    }\n    \n    @Test\n    @DirtiesContext\n    public void testMove() {\n        AgilefantWidget widget = new AgilefantWidget();\n        testable.setWidgetId(123);\n        testable.setPosition(0);\n        testable.setListNumber(2);\n        \n        expect(agilefantWidgetBusiness.retrieve(123)).andReturn(widget);\n        agilefantWidgetBusiness.move(widget, 0, 2);\n        replayAll();\n        assertEquals(Action.SUCCESS, testable.move());\n        verifyAll();\n    }\n}\n", "default_factory": {"py/type": "builtins.list"}}}, "all_classes": [{"py/tuple": [1, "agilefantwidgetbusiness", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [2, "assignmentbusiness", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [3, "authorizationbusiness", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [4, "backlogbusiness", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [5, "backloghistoryentrybusiness", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [6, "dailyworkbusiness", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [7, "exportimportbusiness", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [8, "organizationdumpto", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [9, "agilefantwidgetandref", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [10, "exportiterationbusiness", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [11, "genericbusiness", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [12, "holidaybusiness", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [13, "hourentrybusiness", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [57, "iterationburndownbusiness", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [58, "iterationbusiness", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [59, "iterationhistoryentrybusiness", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [60, "labelbusiness", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [61, "loginbusiness", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [62, "menubusiness", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [63, "notificationbusiness", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [64, "passwordbusiness", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [65, "personalloadbusiness", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [66, "portfoliobusiness", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [67, "productbusiness", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [68, "projectburnupbusiness", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [69, "projectbusiness", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [70, "rankingbusiness", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [71, "rankunderdelegate", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [72, "searchbusiness", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [73, "settingbusiness", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [74, "storyaccessbusiness", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [75, "storybatchbusiness", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [76, "storybusiness", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [77, "storyfilterbusiness", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [78, "storyhierarchybusiness", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [79, "storyrankbusiness", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [80, "storytreeintegritybusiness", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [81, "taskbusiness", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [82, "tasksplitbusiness", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [83, "teambusiness", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [84, "call", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [85, "timesheetbusiness", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [86, "timesheetexportbusiness", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [87, "transferobjectbusiness", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [88, "userbusiness", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [89, "widgetcollectionbusiness", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [14, "agilefantwidgetbusinessimpl", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business\\impl"]}, {"py/tuple": [15, "assignmentbusinessimpl", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business\\impl"]}, {"py/tuple": [16, "authorizationbusinessimpl", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business\\impl"]}, {"py/tuple": [17, "backlogbusinessimpl", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business\\impl"]}, {"py/tuple": [18, "backloghistoryentrybusinessimpl", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business\\impl"]}, {"py/tuple": [19, "dailyworkbusinessimpl", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business\\impl"]}, {"py/tuple": [20, "exportimportbusinessimpl", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business\\impl"]}, {"py/tuple": [21, "exportiterationbusinessimpl", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business\\impl"]}, {"py/tuple": [22, "sheetstyles", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business\\impl"]}, {"py/tuple": [23, "genericbusinessimpl", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business\\impl"]}, {"py/tuple": [24, "holidaybusinessimpl", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business\\impl"]}, {"py/tuple": [25, "hourentrybusinessimpl", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business\\impl"]}, {"py/tuple": [26, "iterationburndownbusinessimpl", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business\\impl"]}, {"py/tuple": [27, "iterationbusinessimpl", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business\\impl"]}, {"py/tuple": [28, "iterationhistoryentrybusinessimpl", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business\\impl"]}, {"py/tuple": [29, "labelbusinessimpl", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business\\impl"]}, {"py/tuple": [30, "loginbusinessimpl", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business\\impl"]}, {"py/tuple": [31, "menubusinessimpl", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business\\impl"]}, {"py/tuple": [32, "notificationemailsender", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business\\impl"]}, {"py/tuple": [33, "passwordbusinessimpl", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business\\impl"]}, {"py/tuple": [34, "personalloadbusinessimpl", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business\\impl"]}, {"py/tuple": [35, "portfoliobusinessimpl", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business\\impl"]}, {"py/tuple": [36, "productbusinessimpl", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business\\impl"]}, {"py/tuple": [37, "projectburnupbusinessimpl", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business\\impl"]}, {"py/tuple": [38, "projectbusinessimpl", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business\\impl"]}, {"py/tuple": [39, "rankingbusinessimpl", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business\\impl"]}, {"py/tuple": [40, "searchbusinessimpl", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business\\impl"]}, {"py/tuple": [41, "settingbusinessimpl", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business\\impl"]}, {"py/tuple": [42, "storyaccessbusinessimp", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business\\impl"]}, {"py/tuple": [43, "storybatchbusinessimpl", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business\\impl"]}, {"py/tuple": [44, "storybusinessimpl", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business\\impl"]}, {"py/tuple": [45, "storyfilterbusinessimpl", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business\\impl"]}, {"py/tuple": [46, "storyhierarchybusinessimpl", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business\\impl"]}, {"py/tuple": [47, "storyrankbusinessimpl", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business\\impl"]}, {"py/tuple": [48, "storytreeintegritybusinessimpl", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business\\impl"]}, {"py/tuple": [49, "taskbusinessimpl", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business\\impl"]}, {"py/tuple": [50, "tasksplitbusinessimpl", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business\\impl"]}, {"py/tuple": [51, "teambusinessimpl", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business\\impl"]}, {"py/tuple": [52, "timesheetbusinessimpl", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business\\impl"]}, {"py/tuple": [53, "timesheetexportbusinessimpl", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business\\impl"]}, {"py/tuple": [54, "transferobjectbusinessimpl", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business\\impl"]}, {"py/tuple": [55, "userbusinessimpl", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business\\impl"]}, {"py/tuple": [56, "widgetcollectionbusinessimpl", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\business\\impl"]}, {"py/tuple": [90, "bootstrapperlistener", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\config"]}, {"py/tuple": [91, "businessconfiguration", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\config"]}, {"py/tuple": [92, "configfactorybean", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\config"]}, {"py/tuple": [93, "daoconfiguration", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\config"]}, {"py/tuple": [94, "databaseinitializer", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\config"]}, {"py/tuple": [95, "datasourcefactorybean", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\config"]}, {"py/tuple": [96, "exportimportconfiguration", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\config"]}, {"py/tuple": [97, "initjfreechartslistener", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\config"]}, {"py/tuple": [98, "masterconfiguration", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\config"]}, {"py/tuple": [99, "restconfiguration", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\config"]}, {"py/tuple": [100, "transactionconfiguration", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\config"]}, {"py/tuple": [101, "utilconfiguration", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\config"]}, {"py/tuple": [102, "webconfiguration", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\config"]}, {"py/tuple": [103, "applicationcontextholder", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\core"]}, {"py/tuple": [104, "applicationcontextprovider", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\core"]}, {"py/tuple": [105, "agilefantwidgetdao", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\db"]}, {"py/tuple": [106, "assignmentdao", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\db"]}, {"py/tuple": [107, "backlogdao", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\db"]}, {"py/tuple": [108, "backloghistoryentrydao", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\db"]}, {"py/tuple": [109, "backloghourentrydao", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\db"]}, {"py/tuple": [110, "genericdao", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\db"]}, {"py/tuple": [157, "holidaydao", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\db"]}, {"py/tuple": [158, "hourentrydao", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\db"]}, {"py/tuple": [159, "iterationdao", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\db"]}, {"py/tuple": [160, "iterationhistoryentrydao", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\db"]}, {"py/tuple": [161, "labeldao", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\db"]}, {"py/tuple": [162, "logindao", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\db"]}, {"py/tuple": [163, "productdao", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\db"]}, {"py/tuple": [164, "projectdao", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\db"]}, {"py/tuple": [165, "settingdao", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\db"]}, {"py/tuple": [166, "storyaccessdao", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\db"]}, {"py/tuple": [167, "storydao", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\db"]}, {"py/tuple": [168, "storyhierarchydao", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\db"]}, {"py/tuple": [169, "storyhourentrydao", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\db"]}, {"py/tuple": [170, "storyrankdao", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\db"]}, {"py/tuple": [171, "taskdao", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\db"]}, {"py/tuple": [172, "taskhourentrydao", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\db"]}, {"py/tuple": [173, "teamdao", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\db"]}, {"py/tuple": [174, "userdao", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\db"]}, {"py/tuple": [175, "whatsnextentrydao", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\db"]}, {"py/tuple": [176, "whatsnextstoryentrydao", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\db"]}, {"py/tuple": [177, "widgetcollectiondao", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\db"]}, {"py/tuple": [111, "agilefantwidgetdaohibernate", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\db\\hibernate"]}, {"py/tuple": [112, "assignmentdaohibernate", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\db\\hibernate"]}, {"py/tuple": [113, "backlogdaohibernate", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\db\\hibernate"]}, {"py/tuple": [114, "backloghistoryentrydaohibernate", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\db\\hibernate"]}, {"py/tuple": [115, "backloghourentrydaohibernate", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\db\\hibernate"]}, {"py/tuple": [116, "emailvalidator", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\db\\hibernate"]}, {"py/tuple": [117, "genericdaohibernate", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\db\\hibernate"]}, {"py/tuple": [118, "holidaydaohibernate", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\db\\hibernate"]}, {"py/tuple": [119, "hourentrydaohibernate", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\db\\hibernate"]}, {"py/tuple": [120, "iterationdaohelpers", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\db\\hibernate"]}, {"py/tuple": [121, "iterationdaohibernate", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\db\\hibernate"]}, {"py/tuple": [122, "iterationhistoryentrydaohibernate", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\db\\hibernate"]}, {"py/tuple": [123, "labeldaohibernate", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\db\\hibernate"]}, {"py/tuple": [124, "logindaohibernate", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\db\\hibernate"]}, {"py/tuple": [127, "productdaohibernate", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\db\\hibernate"]}, {"py/tuple": [128, "projectdaohibernate", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\db\\hibernate"]}, {"py/tuple": [129, "settingdaohibernate", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\db\\hibernate"]}, {"py/tuple": [130, "storyaccessdaohibernate", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\db\\hibernate"]}, {"py/tuple": [131, "storydaohibernate", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\db\\hibernate"]}, {"py/tuple": [132, "storyhierarchydaohibernate", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\db\\hibernate"]}, {"py/tuple": [133, "storyhourentrydaohibernate", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\db\\hibernate"]}, {"py/tuple": [134, "storyrankdaohibernate", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\db\\hibernate"]}, {"py/tuple": [135, "stringescapefilter", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\db\\hibernate"]}, {"py/tuple": [136, "stringtruncatefilter", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\db\\hibernate"]}, {"py/tuple": [137, "taskdaohibernate", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\db\\hibernate"]}, {"py/tuple": [138, "taskhourentrydaohibernate", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\db\\hibernate"]}, {"py/tuple": [139, "teamdaohibernate", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\db\\hibernate"]}, {"py/tuple": [140, "textusertype", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\db\\hibernate"]}, {"py/tuple": [141, "truncatedstringusertype", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\db\\hibernate"]}, {"py/tuple": [142, "userdaohibernate", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\db\\hibernate"]}, {"py/tuple": [143, "usertypefilter", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\db\\hibernate"]}, {"py/tuple": [144, "varcharusertype", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\db\\hibernate"]}, {"py/tuple": [145, "whatsnextentrydaohibernate", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\db\\hibernate"]}, {"py/tuple": [146, "whatsnextstoryentrydaohibernate", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\db\\hibernate"]}, {"py/tuple": [147, "widgetcollectiondaohibernate", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\db\\hibernate"]}, {"py/tuple": [125, "hibernateeventwiring", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\db\\hibernate\\notification"]}, {"py/tuple": [126, "notificationeventlistener", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\db\\hibernate\\notification"]}, {"py/tuple": [148, "backloghistorydao", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\db\\history"]}, {"py/tuple": [149, "generichistorydao", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\db\\history"]}, {"py/tuple": [155, "storyhistorydao", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\db\\history"]}, {"py/tuple": [156, "taskhistorydao", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\db\\history"]}, {"py/tuple": [150, "agilefantrevisionlistener", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\db\\history\\impl"]}, {"py/tuple": [151, "backloghistorydaoimpl", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\db\\history\\impl"]}, {"py/tuple": [152, "generichistorydaoimpl", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\db\\history\\impl"]}, {"py/tuple": [153, "storyhistorydaoimpl", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\db\\history\\impl"]}, {"py/tuple": [154, "taskhistorydaoimpl", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\db\\history\\impl"]}, {"py/tuple": [178, "objectnotfoundexception", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\exception"]}, {"py/tuple": [179, "operationnotpermittedexception", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\exception"]}, {"py/tuple": [180, "productranknotsupportedexception", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\exception"]}, {"py/tuple": [181, "storytreeintegrityviolationexception", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\exception"]}, {"py/tuple": [182, "exportimport", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\exportimport"]}, {"py/tuple": [183, "importexportmodule", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\exportimport"]}, {"py/tuple": [184, "exportablemodel", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\exportimport"]}, {"py/tuple": [185, "exportablebacklog", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\exportimport"]}, {"py/tuple": [186, "exportableuser", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\exportimport"]}, {"py/tuple": [187, "exportableproduct", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\exportimport"]}, {"py/tuple": [188, "exportableproject", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\exportimport"]}, {"py/tuple": [189, "exportableiteration", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\exportimport"]}, {"py/tuple": [190, "exportablestory", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\exportimport"]}, {"py/tuple": [191, "exportabletask", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\exportimport"]}, {"py/tuple": [192, "exportablewidgetcollection", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\exportimport"]}, {"py/tuple": [193, "exportableagilefantwidget", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\exportimport"]}, {"py/tuple": [194, "versionmismatchexception", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\exportimport"]}, {"py/tuple": [195, "exportdata", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\exportimport"]}, {"py/tuple": [196, "xmlbackupper", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\exportimport"]}, {"py/tuple": [197, "xmlbackupstreamgenerator", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\exportimport"]}, {"py/tuple": [198, "v1_11__hashpasswordswithbcrypt", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\flyway"]}, {"py/tuple": [199, "agilefantrevisionentity", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\model"]}, {"py/tuple": [200, "agilefantwidget", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\model"]}, {"py/tuple": [201, "assignment", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\model"]}, {"py/tuple": [202, "backlog", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\model"]}, {"py/tuple": [203, "backloghistoryentry", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\model"]}, {"py/tuple": [204, "backloghourentry", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\model"]}, {"py/tuple": [205, "exactdoubleestimate", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\model"]}, {"py/tuple": [206, "exactestimate", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\model"]}, {"py/tuple": [207, "holiday", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\model"]}, {"py/tuple": [208, "holidayanomaly", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\model"]}, {"py/tuple": [209, "hourentry", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\model"]}, {"py/tuple": [210, "iteration", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\model"]}, {"py/tuple": [211, "iterationhistoryentry", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\model"]}, {"py/tuple": [212, "label", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\model"]}, {"py/tuple": [213, "labelcontainer", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\model"]}, {"py/tuple": [214, "login", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\model"]}, {"py/tuple": [215, "namedobject", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\model"]}, {"py/tuple": [218, "product", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\model"]}, {"py/tuple": [219, "project", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\model"]}, {"py/tuple": [220, "rankable", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\model"]}, {"py/tuple": [221, "schedulable", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\model"]}, {"py/tuple": [222, "setting", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\model"]}, {"py/tuple": [223, "signedexactestimate", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\model"]}, {"py/tuple": [224, "standaloneiteration", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\model"]}, {"py/tuple": [225, "story", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\model"]}, {"py/tuple": [226, "storyaccess", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\model"]}, {"py/tuple": [227, "storyhourentry", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\model"]}, {"py/tuple": [228, "storyrank", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\model"]}, {"py/tuple": [229, "task", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\model"]}, {"py/tuple": [230, "taskcontainer", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\model"]}, {"py/tuple": [231, "taskhourentry", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\model"]}, {"py/tuple": [232, "team", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\model"]}, {"py/tuple": [233, "timesheetloggable", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\model"]}, {"py/tuple": [234, "user", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\model"]}, {"py/tuple": [235, "whatsnextentry", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\model"]}, {"py/tuple": [236, "whatsnextstoryentry", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\model"]}, {"py/tuple": [237, "widgetcollection", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\model"]}, {"py/tuple": [216, "notificationconfiguration", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\model\\notification"]}, {"py/tuple": [217, "notificationevent", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\model\\notification"]}, {"py/tuple": [238, "invalidreadonlyaccessexception", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\readonly"]}, {"py/tuple": [239, "readonlyfilter", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\readonly"]}, {"py/tuple": [240, "tokenfilter", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\readonly"]}, {"py/tuple": [241, "authenticationresource", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\remote"]}, {"py/tuple": [242, "iterationresource", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\remote"]}, {"py/tuple": [243, "productresource", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\remote"]}, {"py/tuple": [244, "projectresource", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\remote"]}, {"py/tuple": [245, "storyresource", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\remote"]}, {"py/tuple": [246, "timesheetresource", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\remote"]}, {"py/tuple": [247, "agilefantuserdetails", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\security"]}, {"py/tuple": [248, "agilefantuserdetailsservice", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\security"]}, {"py/tuple": [249, "agilefantdataaccessexception", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\security"]}, {"py/tuple": [250, "remoteservicesfilter", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\security"]}, {"py/tuple": [251, "restrictactionpathfilter", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\security"]}, {"py/tuple": [252, "securityutil", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\security"]}, {"py/tuple": [253, "setupuserfilter", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\security"]}, {"py/tuple": [254, "wrappingmd5passwordencoder", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\security"]}, {"py/tuple": [255, "agilefanthistoryentry", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\transfer"]}, {"py/tuple": [256, "assignedworkto", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\transfer"]}, {"py/tuple": [257, "assignmentto", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\transfer"]}, {"py/tuple": [258, "autocompletedatanode", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\transfer"]}, {"py/tuple": [259, "backloginfocollectionto", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\transfer"]}, {"py/tuple": [260, "backloginfoto", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\transfer"]}, {"py/tuple": [261, "backlogloadcontainer", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\transfer"]}, {"py/tuple": [262, "backlogtimesheetnode", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\transfer"]}, {"py/tuple": [263, "computedloaddata", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\transfer"]}, {"py/tuple": [264, "dailyspenteffort", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\transfer"]}, {"py/tuple": [265, "dailyuserspenteffortto", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\transfer"]}, {"py/tuple": [266, "dailyworktaskto", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\transfer"]}, {"py/tuple": [267, "historyrowto", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\transfer"]}, {"py/tuple": [268, "hourentrydelta", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\transfer"]}, {"py/tuple": [269, "intervalloadcontainer", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\transfer"]}, {"py/tuple": [270, "iterationloadcontainer", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\transfer"]}, {"py/tuple": [271, "iterationmetrics", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\transfer"]}, {"py/tuple": [272, "iterationto", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\transfer"]}, {"py/tuple": [273, "leafstorycontainer", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\transfer"]}, {"py/tuple": [274, "menudatanode", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\transfer"]}, {"py/tuple": [275, "movestorynode", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\transfer"]}, {"py/tuple": [276, "portfolioto", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\transfer"]}, {"py/tuple": [277, "productto", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\transfer"]}, {"py/tuple": [278, "projectdatacontainer", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\transfer"]}, {"py/tuple": [279, "projectloadcontainer", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\transfer"]}, {"py/tuple": [280, "projectmetrics", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\transfer"]}, {"py/tuple": [281, "projectto", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\transfer"]}, {"py/tuple": [282, "scheduled", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\transfer"]}, {"py/tuple": [283, "searchresultrow", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\transfer"]}, {"py/tuple": [284, "storyaccesscloudto", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\transfer"]}, {"py/tuple": [285, "storytimesheetnode", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\transfer"]}, {"py/tuple": [286, "storyto", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\transfer"]}, {"py/tuple": [287, "storytreebranchmetrics", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\transfer"]}, {"py/tuple": [288, "tasktimesheetnode", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\transfer"]}, {"py/tuple": [289, "taskto", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\transfer"]}, {"py/tuple": [290, "timesheetreportto", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\transfer"]}, {"py/tuple": [291, "unassignedloadto", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\transfer"]}, {"py/tuple": [292, "userloadlimits", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\transfer"]}, {"py/tuple": [293, "agilefantbuild", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\util"]}, {"py/tuple": [294, "gitinformation", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\util"]}, {"py/tuple": [295, "agilefantbuildinitializer", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\util"]}, {"py/tuple": [296, "backlogconverter", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\util"]}, {"py/tuple": [297, "beancopier", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\util"]}, {"py/tuple": [298, "customxysteprenderer", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\util"]}, {"py/tuple": [299, "graphics2dwrapper", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\util"]}, {"py/tuple": [300, "datetimeconverter", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\util"]}, {"py/tuple": [301, "datetimeutils", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\util"]}, {"py/tuple": [302, "dbconnectioninfo", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\util"]}, {"py/tuple": [303, "enumconverter", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\util"]}, {"py/tuple": [304, "exactestimateconverter", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\util"]}, {"py/tuple": [305, "exactestimateutils", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\util"]}, {"py/tuple": [306, "minorunitsparser", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\util"]}, {"py/tuple": [307, "myassignmentsmenubuilder", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\util"]}, {"py/tuple": [308, "namedobjectcomparator", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\util"]}, {"py/tuple": [309, "onlydateconverter", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\util"]}, {"py/tuple": [310, "pair", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\util"]}, {"py/tuple": [311, "projectburnupdata", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\util"]}, {"py/tuple": [312, "entry", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\util"]}, {"py/tuple": [313, "signedexactestimateconverter", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\util"]}, {"py/tuple": [314, "storycomparator", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\util"]}, {"py/tuple": [315, "storyfilters", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\util"]}, {"py/tuple": [316, "storymetrics", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\util"]}, {"py/tuple": [317, "storytreeintegritymessage", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\util"]}, {"py/tuple": [318, "storytreeintegrityutils", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\util"]}, {"py/tuple": [319, "timesheetdata", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\util"]}, {"py/tuple": [320, "timesheetexportrowdata", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\util"]}, {"py/tuple": [321, "timesheetexportrowdatacomparator", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\util"]}, {"py/tuple": [322, "timesheetnode", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\util"]}, {"py/tuple": [323, "tokengenerator", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\util"]}, {"py/tuple": [324, "transactionloggeraspect", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\util"]}, {"py/tuple": [325, "txcounter", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\util"]}, {"py/tuple": [326, "triple", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\util"]}, {"py/tuple": [327, "userconverter", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\util"]}, {"py/tuple": [328, "xmldatetimeadapter", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\util"]}, {"py/tuple": [329, "xmlexactestimateadapter", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\util"]}, {"py/tuple": [330, "accessaction", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [331, "ajaxexceptionhandler", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [332, "assignmentaction", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [333, "authorizationinterceptor", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [334, "autocompleteaction", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [335, "backlogaction", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [336, "chartaction", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [338, "contextaware", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [339, "contextviewaction", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [340, "crudaction", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [341, "dailyworkaction", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [342, "databaseexportaction", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [343, "exceptionhandler", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [344, "exportiterationaction", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [345, "fileuploadaction", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [348, "holidayaction", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [349, "hourentryaction", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [350, "iterationaction", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [351, "iterationhistoryaction", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [352, "labelaction", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [353, "logincontextaction", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [354, "menuaction", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [355, "multiplestoryaction", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [356, "passwordaction", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [357, "portletaction", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [358, "prefetching", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [359, "prefetchinterceptor", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [360, "productaction", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [361, "projectaction", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [362, "projectportfolioaction", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [363, "referenceidaction", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [364, "refreshuserinterceptor", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [365, "resolvesearchresultaction", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [366, "roiterationaction", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [367, "searchaction", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [368, "securityinterceptor", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [369, "settingaction", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [370, "settingsinterceptor", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [371, "spenteffortaction", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [372, "storyaccessaction", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [373, "storyaction", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [374, "storyhierarchyaction", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [375, "storylistaction", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [376, "storytreeintegrityaction", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [383, "taskaction", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [384, "tasksplitaction", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [385, "teamaction", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [386, "timesheetaction", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [387, "useraction", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [388, "userloadaction", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [389, "widgetaction", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [337, "contextviewinterceptor", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\web\\context"]}, {"py/tuple": [346, "responseheaderfilter", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\web\\filters"]}, {"py/tuple": [347, "aeffunctions", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\web\\function"]}, {"py/tuple": [377, "csstag", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\web\\tag"]}, {"py/tuple": [378, "currentbacklogtag", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\web\\tag"]}, {"py/tuple": [379, "existingobjectstag", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\web\\tag"]}, {"py/tuple": [380, "javascripttag", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\web\\tag"]}, {"py/tuple": [381, "springtagsupport", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\web\\tag"]}, {"py/tuple": [382, "staticresourcetag", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\web\\tag"]}, {"py/tuple": [390, "commonwidget", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\web\\widgets"]}, {"py/tuple": [391, "iterationmetricswidget", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\web\\widgets"]}, {"py/tuple": [392, "projectmetricswidget", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\web\\widgets"]}, {"py/tuple": [393, "storywidget", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\web\\widgets"]}, {"py/tuple": [394, "userloadwidget", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\main\\java\\fi\\hut\\soberit\\agilefant\\web\\widgets"]}, {"py/tuple": [395, "agilefantwidgetbusinesstest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [396, "assignmentbusinesstest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [397, "backlogbusinesstest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [398, "backloghistoryentrybusinesstest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [399, "dailyworkbusinesstest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [400, "holidaybusinesstest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [401, "hourentrybusinesstest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [404, "iterationassignedloadtest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [405, "iterationburndownbusinesstest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [406, "iterationbusinesstest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [407, "iterationhistoryentrybusinesstest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [408, "labelbusinesstest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [409, "menubusinesstest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [410, "personalloadbusinesstest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [411, "portfoliobusinesstest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [412, "productbusinesstest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [413, "projectburnupbusinesstest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [414, "projectbusinessrankingtest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [415, "projectdefinition", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [416, "mockprojectdao", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [417, "projectbusinesstest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [418, "rankingbusinesstest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [419, "searchbusinesstest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [420, "settingbusinesstest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [421, "settingequals", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [422, "storybatchbusinesstest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [423, "storybusinesscreatestorytest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [424, "storybusinesstest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [425, "storyfilterbusinesstest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [426, "storyhierarchybusinesstest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [427, "storyrankbusinesstest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [428, "storytreeintegritybusinessbuildchangetreetest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [429, "taskbusinesstest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [430, "tasksplitbusinesstest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [431, "teambusinesstest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [432, "timesheetbusinesstest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [433, "timesheettestnode", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [434, "timesheetexportbusinesstest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [435, "transferobjectbusinesstest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [436, "userbusinesstest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [437, "widgetcollectionbusinesstest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\business"]}, {"py/tuple": [402, "storybusinessimpltest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\business\\impl"]}, {"py/tuple": [403, "storytreeintegritybusinesstest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\business\\impl"]}, {"py/tuple": [438, "assignmentdaotest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\db"]}, {"py/tuple": [439, "backlogdaotest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\db"]}, {"py/tuple": [440, "backloghistoryentrydaotest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\db"]}, {"py/tuple": [441, "backloghourentrydaotest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\db"]}, {"py/tuple": [442, "genericdaotest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\db"]}, {"py/tuple": [445, "holidaydaotest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\db"]}, {"py/tuple": [446, "hourentrydaotest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\db"]}, {"py/tuple": [447, "iterationdaotest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\db"]}, {"py/tuple": [448, "iterationhistoryentrydaotest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\db"]}, {"py/tuple": [449, "labeldaotest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\db"]}, {"py/tuple": [450, "productdaotest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\db"]}, {"py/tuple": [451, "projectdaotest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\db"]}, {"py/tuple": [452, "settingdaotest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\db"]}, {"py/tuple": [453, "storydaotest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\db"]}, {"py/tuple": [454, "storyhierarchydaotest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\db"]}, {"py/tuple": [455, "storyrankdaotest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\db"]}, {"py/tuple": [456, "taskdaotest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\db"]}, {"py/tuple": [457, "taskhourentrydaotest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\db"]}, {"py/tuple": [458, "userdaotest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\db"]}, {"py/tuple": [459, "whatsnextentrydaotest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\db"]}, {"py/tuple": [460, "widgetcollectiondaotest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\db"]}, {"py/tuple": [443, "backloghistorydaotest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\db\\history"]}, {"py/tuple": [444, "storyhistorydaotest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\db\\history"]}, {"py/tuple": [461, "storysplitintegrationtest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\integration"]}, {"py/tuple": [462, "restrictactionpathfiltertest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\security"]}, {"py/tuple": [463, "abstracthibernatetests", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\test"]}, {"py/tuple": [464, "gettersettertester", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\test"]}, {"py/tuple": [465, "mockautowiredannotationbeanpostprocessor", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\test"]}, {"py/tuple": [466, "mockcontextloader", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\test"]}, {"py/tuple": [467, "mockedtestcase", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\test"]}, {"py/tuple": [468, "sampledao", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\test"]}, {"py/tuple": [469, "sampledaohibernate", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\test"]}, {"py/tuple": [470, "sampleentity", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\test"]}, {"py/tuple": [471, "springassertions", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\test"]}, {"py/tuple": [472, "backlogconvertertest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\util"]}, {"py/tuple": [473, "beancopiertest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\util"]}, {"py/tuple": [474, "a", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\util"]}, {"py/tuple": [475, "b", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\util"]}, {"py/tuple": [476, "datetimeutilstest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\util"]}, {"py/tuple": [477, "exactestimateutilstest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\util"]}, {"py/tuple": [478, "minorunitsparsertest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\util"]}, {"py/tuple": [479, "namedobjectcomparatortest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\util"]}, {"py/tuple": [480, "objectwithname", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\util"]}, {"py/tuple": [481, "storytreeintegrityutilstest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\util"]}, {"py/tuple": [482, "timesheetdatatest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\util"]}, {"py/tuple": [483, "timesheetexportrowdatatest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\util"]}, {"py/tuple": [484, "timesheetnodetest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\util"]}, {"py/tuple": [485, "timesheetstatictestnode", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\util"]}, {"py/tuple": [486, "timesheettestnode", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\util"]}, {"py/tuple": [487, "userconvertertest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\util"]}, {"py/tuple": [488, "ajaxexceptionhandlertest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [489, "assignmentactiontest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [490, "autocompleteactiontest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [491, "backlogactiontest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [492, "chartactiontest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [493, "dailyworkactiontest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [494, "holidayactiontest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [495, "hourentryactiontest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [496, "iterationactiontest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [497, "iterationhistoryactiontest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [498, "labelactiontest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [499, "logincontextactiontest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [500, "menuactiontest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [501, "multiplestoryactiontest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [502, "passwordactiontest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [503, "portletactiontest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [504, "prefetchinterceptortest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [505, "okidaction", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [506, "invalidtypeaction", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [507, "productactiontest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [508, "projectactiontest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [509, "projectportfolioactiontest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [510, "resolvesearchresultactiontest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [511, "searchactiontest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [512, "securityinterceptortest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [513, "settingactiontest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [514, "spenteffortactiontest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [515, "storyactiontest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [516, "storyhierarchyactiontest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [517, "storytreeintegrityactiontest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [518, "taskactiontest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [519, "tasksplitactiontest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [520, "teamactiontest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [521, "timesheetactiontest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [522, "useractiontest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [523, "userloadactiontest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\web"]}, {"py/tuple": [524, "widgetactiontest", "C:\\Users\\Amir\\Desktop\\PJ\\MonoMicroPJ\\MonoMicro\\agilefant-3.5.4\\webapp\\src\\test\\java\\fi\\hut\\soberit\\agilefant\\web"]}], "interface_relations": [{"py/tuple": [1, "fi.hut.soberit.agilefant.business", 200, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [2, "fi.hut.soberit.agilefant.business", 201, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [4, "fi.hut.soberit.agilefant.business", 218, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 266, "fi.hut.soberit.agilefant.transfer"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 266, "fi.hut.soberit.agilefant.transfer"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 235, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 286, "fi.hut.soberit.agilefant.transfer"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 286, "fi.hut.soberit.agilefant.transfer"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 236, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 256, "fi.hut.soberit.agilefant.transfer"]}, {"py/tuple": [7, "fi.hut.soberit.agilefant.business", 8, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [34, "fi.hut.soberit.agilefant.business.impl", 171, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [34, "fi.hut.soberit.agilefant.business.impl", 167, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [40, "fi.hut.soberit.agilefant.business.impl", 215, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [58, "fi.hut.soberit.agilefant.business", 272, "fi.hut.soberit.agilefant.transfer"]}, {"py/tuple": [58, "fi.hut.soberit.agilefant.business", 271, "fi.hut.soberit.agilefant.transfer"]}, {"py/tuple": [58, "fi.hut.soberit.agilefant.business", 206, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [58, "fi.hut.soberit.agilefant.business", 272, "fi.hut.soberit.agilefant.transfer"]}, {"py/tuple": [58, "fi.hut.soberit.agilefant.business", 272, "fi.hut.soberit.agilefant.transfer"]}, {"py/tuple": [58, "fi.hut.soberit.agilefant.business", 272, "fi.hut.soberit.agilefant.transfer"]}, {"py/tuple": [58, "fi.hut.soberit.agilefant.business", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [59, "fi.hut.soberit.agilefant.business", 206, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [59, "fi.hut.soberit.agilefant.business", 211, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [65, "fi.hut.soberit.agilefant.business", 263, "fi.hut.soberit.agilefant.transfer"]}, {"py/tuple": [65, "fi.hut.soberit.agilefant.business", 292, "fi.hut.soberit.agilefant.transfer"]}, {"py/tuple": [66, "fi.hut.soberit.agilefant.business", 276, "fi.hut.soberit.agilefant.transfer"]}, {"py/tuple": [67, "fi.hut.soberit.agilefant.business", 218, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [67, "fi.hut.soberit.agilefant.business", 277, "fi.hut.soberit.agilefant.transfer"]}, {"py/tuple": [69, "fi.hut.soberit.agilefant.business", 281, "fi.hut.soberit.agilefant.transfer"]}, {"py/tuple": [69, "fi.hut.soberit.agilefant.business", 280, "fi.hut.soberit.agilefant.transfer"]}, {"py/tuple": [69, "fi.hut.soberit.agilefant.business", 281, "fi.hut.soberit.agilefant.transfer"]}, {"py/tuple": [69, "fi.hut.soberit.agilefant.business", 219, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [69, "fi.hut.soberit.agilefant.business", 219, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [69, "fi.hut.soberit.agilefant.business", 219, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [72, "fi.hut.soberit.agilefant.business", 215, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [72, "fi.hut.soberit.agilefant.business", 215, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 316, "fi.hut.soberit.agilefant.util"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 286, "fi.hut.soberit.agilefant.transfer"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [78, "fi.hut.soberit.agilefant.business", 286, "fi.hut.soberit.agilefant.transfer"]}, {"py/tuple": [78, "fi.hut.soberit.agilefant.business", 287, "fi.hut.soberit.agilefant.transfer"]}, {"py/tuple": [79, "fi.hut.soberit.agilefant.business", 228, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [79, "fi.hut.soberit.agilefant.business", 228, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [80, "fi.hut.soberit.agilefant.business", 275, "fi.hut.soberit.agilefant.transfer"]}, {"py/tuple": [81, "fi.hut.soberit.agilefant.business", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [81, "fi.hut.soberit.agilefant.business", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [81, "fi.hut.soberit.agilefant.business", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [81, "fi.hut.soberit.agilefant.business", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [81, "fi.hut.soberit.agilefant.business", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [81, "fi.hut.soberit.agilefant.business", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [82, "fi.hut.soberit.agilefant.business", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [83, "fi.hut.soberit.agilefant.business", 232, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [83, "fi.hut.soberit.agilefant.business", 232, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [85, "fi.hut.soberit.agilefant.business", 319, "fi.hut.soberit.agilefant.util"]}, {"py/tuple": [87, "fi.hut.soberit.agilefant.business", 289, "fi.hut.soberit.agilefant.transfer"]}, {"py/tuple": [87, "fi.hut.soberit.agilefant.business", 286, "fi.hut.soberit.agilefant.transfer"]}, {"py/tuple": [87, "fi.hut.soberit.agilefant.business", 272, "fi.hut.soberit.agilefant.transfer"]}, {"py/tuple": [87, "fi.hut.soberit.agilefant.business", 281, "fi.hut.soberit.agilefant.transfer"]}, {"py/tuple": [87, "fi.hut.soberit.agilefant.business", 266, "fi.hut.soberit.agilefant.transfer"]}, {"py/tuple": [87, "fi.hut.soberit.agilefant.business", 286, "fi.hut.soberit.agilefant.transfer"]}, {"py/tuple": [87, "fi.hut.soberit.agilefant.business", 256, "fi.hut.soberit.agilefant.transfer"]}, {"py/tuple": [88, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [88, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [88, "fi.hut.soberit.agilefant.business", 206, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [88, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [89, "fi.hut.soberit.agilefant.business", 237, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [108, "fi.hut.soberit.agilefant.db", 203, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [108, "fi.hut.soberit.agilefant.db", 311, "fi.hut.soberit.agilefant.util"]}, {"py/tuple": [155, "fi.hut.soberit.agilefant.db.history", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [159, "fi.hut.soberit.agilefant.db", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [159, "fi.hut.soberit.agilefant.db", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [160, "fi.hut.soberit.agilefant.db", 211, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [160, "fi.hut.soberit.agilefant.db", 211, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [164, "fi.hut.soberit.agilefant.db", 219, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [164, "fi.hut.soberit.agilefant.db", 219, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [164, "fi.hut.soberit.agilefant.db", 280, "fi.hut.soberit.agilefant.transfer"]}, {"py/tuple": [165, "fi.hut.soberit.agilefant.db", 222, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [167, "fi.hut.soberit.agilefant.db", 316, "fi.hut.soberit.agilefant.util"]}, {"py/tuple": [170, "fi.hut.soberit.agilefant.db", 228, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [171, "fi.hut.soberit.agilefant.db", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [171, "fi.hut.soberit.agilefant.db", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [173, "fi.hut.soberit.agilefant.db", 232, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [174, "fi.hut.soberit.agilefant.db", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [174, "fi.hut.soberit.agilefant.db", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [175, "fi.hut.soberit.agilefant.db", 235, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [175, "fi.hut.soberit.agilefant.db", 235, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [176, "fi.hut.soberit.agilefant.db", 236, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [176, "fi.hut.soberit.agilefant.db", 236, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [255, "fi.hut.soberit.agilefant.transfer", 215, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [283, "fi.hut.soberit.agilefant.transfer", 215, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [386, "fi.hut.soberit.agilefant.web", 85, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [386, "fi.hut.soberit.agilefant.web", 67, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [14, "fi.hut.soberit.agilefant.business.impl", 1, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [15, "fi.hut.soberit.agilefant.business.impl", 2, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [16, "fi.hut.soberit.agilefant.business.impl", 3, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [17, "fi.hut.soberit.agilefant.business.impl", 4, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [18, "fi.hut.soberit.agilefant.business.impl", 5, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [19, "fi.hut.soberit.agilefant.business.impl", 6, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [20, "fi.hut.soberit.agilefant.business.impl", 7, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [21, "fi.hut.soberit.agilefant.business.impl", 10, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [89, "fi.hut.soberit.agilefant.business", 11, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [89, "fi.hut.soberit.agilefant.business", 11, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [88, "fi.hut.soberit.agilefant.business", 11, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [88, "fi.hut.soberit.agilefant.business", 11, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [83, "fi.hut.soberit.agilefant.business", 11, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [83, "fi.hut.soberit.agilefant.business", 11, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [81, "fi.hut.soberit.agilefant.business", 11, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [81, "fi.hut.soberit.agilefant.business", 11, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 11, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 11, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [74, "fi.hut.soberit.agilefant.business", 11, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [74, "fi.hut.soberit.agilefant.business", 11, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [73, "fi.hut.soberit.agilefant.business", 11, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [73, "fi.hut.soberit.agilefant.business", 11, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [69, "fi.hut.soberit.agilefant.business", 11, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [69, "fi.hut.soberit.agilefant.business", 11, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [67, "fi.hut.soberit.agilefant.business", 11, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [67, "fi.hut.soberit.agilefant.business", 11, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [61, "fi.hut.soberit.agilefant.business", 11, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [61, "fi.hut.soberit.agilefant.business", 11, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [60, "fi.hut.soberit.agilefant.business", 11, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [60, "fi.hut.soberit.agilefant.business", 11, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [59, "fi.hut.soberit.agilefant.business", 11, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [59, "fi.hut.soberit.agilefant.business", 11, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [58, "fi.hut.soberit.agilefant.business", 11, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [58, "fi.hut.soberit.agilefant.business", 11, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [23, "fi.hut.soberit.agilefant.business.impl", 11, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [13, "fi.hut.soberit.agilefant.business", 11, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [13, "fi.hut.soberit.agilefant.business", 11, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [12, "fi.hut.soberit.agilefant.business", 11, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [12, "fi.hut.soberit.agilefant.business", 11, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [5, "fi.hut.soberit.agilefant.business", 11, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [5, "fi.hut.soberit.agilefant.business", 11, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [4, "fi.hut.soberit.agilefant.business", 11, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [4, "fi.hut.soberit.agilefant.business", 11, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [2, "fi.hut.soberit.agilefant.business", 11, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [2, "fi.hut.soberit.agilefant.business", 11, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [1, "fi.hut.soberit.agilefant.business", 11, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [1, "fi.hut.soberit.agilefant.business", 11, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [24, "fi.hut.soberit.agilefant.business.impl", 12, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [25, "fi.hut.soberit.agilefant.business.impl", 13, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [26, "fi.hut.soberit.agilefant.business.impl", 57, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [27, "fi.hut.soberit.agilefant.business.impl", 58, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [28, "fi.hut.soberit.agilefant.business.impl", 59, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [29, "fi.hut.soberit.agilefant.business.impl", 60, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [30, "fi.hut.soberit.agilefant.business.impl", 61, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [31, "fi.hut.soberit.agilefant.business.impl", 62, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [32, "fi.hut.soberit.agilefant.business.impl", 63, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [33, "fi.hut.soberit.agilefant.business.impl", 64, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [34, "fi.hut.soberit.agilefant.business.impl", 65, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [35, "fi.hut.soberit.agilefant.business.impl", 66, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [36, "fi.hut.soberit.agilefant.business.impl", 67, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [37, "fi.hut.soberit.agilefant.business.impl", 68, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [38, "fi.hut.soberit.agilefant.business.impl", 69, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [39, "fi.hut.soberit.agilefant.business.impl", 70, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [40, "fi.hut.soberit.agilefant.business.impl", 72, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [41, "fi.hut.soberit.agilefant.business.impl", 73, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [42, "fi.hut.soberit.agilefant.business.impl", 74, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [43, "fi.hut.soberit.agilefant.business.impl", 75, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [44, "fi.hut.soberit.agilefant.business.impl", 76, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [45, "fi.hut.soberit.agilefant.business.impl", 77, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [46, "fi.hut.soberit.agilefant.business.impl", 78, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [47, "fi.hut.soberit.agilefant.business.impl", 79, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [48, "fi.hut.soberit.agilefant.business.impl", 80, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [49, "fi.hut.soberit.agilefant.business.impl", 81, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [50, "fi.hut.soberit.agilefant.business.impl", 82, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [51, "fi.hut.soberit.agilefant.business.impl", 83, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [52, "fi.hut.soberit.agilefant.business.impl", 85, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [53, "fi.hut.soberit.agilefant.business.impl", 86, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [54, "fi.hut.soberit.agilefant.business.impl", 87, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [55, "fi.hut.soberit.agilefant.business.impl", 88, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [56, "fi.hut.soberit.agilefant.business.impl", 89, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [111, "fi.hut.soberit.agilefant.db.hibernate", 105, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [112, "fi.hut.soberit.agilefant.db.hibernate", 106, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [113, "fi.hut.soberit.agilefant.db.hibernate", 107, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [114, "fi.hut.soberit.agilefant.db.hibernate", 108, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [115, "fi.hut.soberit.agilefant.db.hibernate", 109, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [468, "fi.hut.soberit.agilefant.test", 110, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [468, "fi.hut.soberit.agilefant.test", 110, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [177, "fi.hut.soberit.agilefant.db", 110, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [177, "fi.hut.soberit.agilefant.db", 110, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [176, "fi.hut.soberit.agilefant.db", 110, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [176, "fi.hut.soberit.agilefant.db", 110, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [175, "fi.hut.soberit.agilefant.db", 110, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [175, "fi.hut.soberit.agilefant.db", 110, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [174, "fi.hut.soberit.agilefant.db", 110, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [174, "fi.hut.soberit.agilefant.db", 110, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [173, "fi.hut.soberit.agilefant.db", 110, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [173, "fi.hut.soberit.agilefant.db", 110, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [172, "fi.hut.soberit.agilefant.db", 110, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [172, "fi.hut.soberit.agilefant.db", 110, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [171, "fi.hut.soberit.agilefant.db", 110, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [171, "fi.hut.soberit.agilefant.db", 110, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [170, "fi.hut.soberit.agilefant.db", 110, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [170, "fi.hut.soberit.agilefant.db", 110, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [169, "fi.hut.soberit.agilefant.db", 110, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [169, "fi.hut.soberit.agilefant.db", 110, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [167, "fi.hut.soberit.agilefant.db", 110, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [167, "fi.hut.soberit.agilefant.db", 110, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [166, "fi.hut.soberit.agilefant.db", 110, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [166, "fi.hut.soberit.agilefant.db", 110, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [165, "fi.hut.soberit.agilefant.db", 110, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [165, "fi.hut.soberit.agilefant.db", 110, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [164, "fi.hut.soberit.agilefant.db", 110, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [164, "fi.hut.soberit.agilefant.db", 110, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [163, "fi.hut.soberit.agilefant.db", 110, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [163, "fi.hut.soberit.agilefant.db", 110, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [162, "fi.hut.soberit.agilefant.db", 110, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [162, "fi.hut.soberit.agilefant.db", 110, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [161, "fi.hut.soberit.agilefant.db", 110, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [161, "fi.hut.soberit.agilefant.db", 110, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [160, "fi.hut.soberit.agilefant.db", 110, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [160, "fi.hut.soberit.agilefant.db", 110, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [159, "fi.hut.soberit.agilefant.db", 110, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [159, "fi.hut.soberit.agilefant.db", 110, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [158, "fi.hut.soberit.agilefant.db", 110, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [158, "fi.hut.soberit.agilefant.db", 110, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [157, "fi.hut.soberit.agilefant.db", 110, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [157, "fi.hut.soberit.agilefant.db", 110, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [117, "fi.hut.soberit.agilefant.db.hibernate", 110, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [109, "fi.hut.soberit.agilefant.db", 110, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [109, "fi.hut.soberit.agilefant.db", 110, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [108, "fi.hut.soberit.agilefant.db", 110, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [108, "fi.hut.soberit.agilefant.db", 110, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [107, "fi.hut.soberit.agilefant.db", 110, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [107, "fi.hut.soberit.agilefant.db", 110, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [106, "fi.hut.soberit.agilefant.db", 110, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [106, "fi.hut.soberit.agilefant.db", 110, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [105, "fi.hut.soberit.agilefant.db", 110, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [105, "fi.hut.soberit.agilefant.db", 110, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [151, "fi.hut.soberit.agilefant.db.history.impl", 148, "fi.hut.soberit.agilefant.db.history"]}, {"py/tuple": [156, "fi.hut.soberit.agilefant.db.history", 149, "fi.hut.soberit.agilefant.db.history"]}, {"py/tuple": [156, "fi.hut.soberit.agilefant.db.history", 149, "fi.hut.soberit.agilefant.db.history"]}, {"py/tuple": [155, "fi.hut.soberit.agilefant.db.history", 149, "fi.hut.soberit.agilefant.db.history"]}, {"py/tuple": [155, "fi.hut.soberit.agilefant.db.history", 149, "fi.hut.soberit.agilefant.db.history"]}, {"py/tuple": [152, "fi.hut.soberit.agilefant.db.history.impl", 149, "fi.hut.soberit.agilefant.db.history"]}, {"py/tuple": [148, "fi.hut.soberit.agilefant.db.history", 149, "fi.hut.soberit.agilefant.db.history"]}, {"py/tuple": [148, "fi.hut.soberit.agilefant.db.history", 149, "fi.hut.soberit.agilefant.db.history"]}, {"py/tuple": [153, "fi.hut.soberit.agilefant.db.history.impl", 155, "fi.hut.soberit.agilefant.db.history"]}, {"py/tuple": [154, "fi.hut.soberit.agilefant.db.history.impl", 156, "fi.hut.soberit.agilefant.db.history"]}, {"py/tuple": [118, "fi.hut.soberit.agilefant.db.hibernate", 157, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [119, "fi.hut.soberit.agilefant.db.hibernate", 158, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [121, "fi.hut.soberit.agilefant.db.hibernate", 159, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [122, "fi.hut.soberit.agilefant.db.hibernate", 160, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [123, "fi.hut.soberit.agilefant.db.hibernate", 161, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [124, "fi.hut.soberit.agilefant.db.hibernate", 162, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [127, "fi.hut.soberit.agilefant.db.hibernate", 163, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [128, "fi.hut.soberit.agilefant.db.hibernate", 164, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [129, "fi.hut.soberit.agilefant.db.hibernate", 165, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [130, "fi.hut.soberit.agilefant.db.hibernate", 166, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [131, "fi.hut.soberit.agilefant.db.hibernate", 167, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [132, "fi.hut.soberit.agilefant.db.hibernate", 168, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [133, "fi.hut.soberit.agilefant.db.hibernate", 169, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [134, "fi.hut.soberit.agilefant.db.hibernate", 170, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [137, "fi.hut.soberit.agilefant.db.hibernate", 171, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [138, "fi.hut.soberit.agilefant.db.hibernate", 172, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [139, "fi.hut.soberit.agilefant.db.hibernate", 173, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [142, "fi.hut.soberit.agilefant.db.hibernate", 174, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [145, "fi.hut.soberit.agilefant.db.hibernate", 175, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [146, "fi.hut.soberit.agilefant.db.hibernate", 176, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [147, "fi.hut.soberit.agilefant.db.hibernate", 177, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [193, "fi.hut.soberit.agilefant.exportimport", 184, "fi.hut.soberit.agilefant.exportimport"]}, {"py/tuple": [192, "fi.hut.soberit.agilefant.exportimport", 184, "fi.hut.soberit.agilefant.exportimport"]}, {"py/tuple": [191, "fi.hut.soberit.agilefant.exportimport", 184, "fi.hut.soberit.agilefant.exportimport"]}, {"py/tuple": [190, "fi.hut.soberit.agilefant.exportimport", 184, "fi.hut.soberit.agilefant.exportimport"]}, {"py/tuple": [186, "fi.hut.soberit.agilefant.exportimport", 184, "fi.hut.soberit.agilefant.exportimport"]}, {"py/tuple": [185, "fi.hut.soberit.agilefant.exportimport", 184, "fi.hut.soberit.agilefant.exportimport"]}, {"py/tuple": [185, "fi.hut.soberit.agilefant.exportimport", 184, "fi.hut.soberit.agilefant.exportimport"]}, {"py/tuple": [189, "fi.hut.soberit.agilefant.exportimport", 185, "fi.hut.soberit.agilefant.exportimport"]}, {"py/tuple": [188, "fi.hut.soberit.agilefant.exportimport", 185, "fi.hut.soberit.agilefant.exportimport"]}, {"py/tuple": [187, "fi.hut.soberit.agilefant.exportimport", 185, "fi.hut.soberit.agilefant.exportimport"]}, {"py/tuple": [105, "fi.hut.soberit.agilefant.db", 200, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [1, "fi.hut.soberit.agilefant.business", 200, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [106, "fi.hut.soberit.agilefant.db", 201, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [2, "fi.hut.soberit.agilefant.business", 201, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [148, "fi.hut.soberit.agilefant.db.history", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [107, "fi.hut.soberit.agilefant.db", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [4, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [108, "fi.hut.soberit.agilefant.db", 203, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [5, "fi.hut.soberit.agilefant.business", 203, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [109, "fi.hut.soberit.agilefant.db", 204, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [157, "fi.hut.soberit.agilefant.db", 207, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [12, "fi.hut.soberit.agilefant.business", 207, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [158, "fi.hut.soberit.agilefant.db", 209, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [13, "fi.hut.soberit.agilefant.business", 209, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [159, "fi.hut.soberit.agilefant.db", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [156, "fi.hut.soberit.agilefant.db.history", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [58, "fi.hut.soberit.agilefant.business", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [160, "fi.hut.soberit.agilefant.db", 211, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [59, "fi.hut.soberit.agilefant.business", 211, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [161, "fi.hut.soberit.agilefant.db", 212, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [60, "fi.hut.soberit.agilefant.business", 212, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [225, "fi.hut.soberit.agilefant.model", 213, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [162, "fi.hut.soberit.agilefant.db", 214, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [61, "fi.hut.soberit.agilefant.business", 214, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [480, "fi.hut.soberit.agilefant.util", 215, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [479, "fi.hut.soberit.agilefant.util", 215, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [308, "fi.hut.soberit.agilefant.util", 215, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [234, "fi.hut.soberit.agilefant.model", 215, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [229, "fi.hut.soberit.agilefant.model", 215, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [225, "fi.hut.soberit.agilefant.model", 215, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [212, "fi.hut.soberit.agilefant.model", 215, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [202, "fi.hut.soberit.agilefant.model", 215, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [163, "fi.hut.soberit.agilefant.db", 218, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [67, "fi.hut.soberit.agilefant.business", 218, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [164, "fi.hut.soberit.agilefant.db", 219, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [69, "fi.hut.soberit.agilefant.business", 219, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [236, "fi.hut.soberit.agilefant.model", 220, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [235, "fi.hut.soberit.agilefant.model", 220, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [229, "fi.hut.soberit.agilefant.model", 220, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [219, "fi.hut.soberit.agilefant.model", 220, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [282, "fi.hut.soberit.agilefant.transfer", 221, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [282, "fi.hut.soberit.agilefant.transfer", 221, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [224, "fi.hut.soberit.agilefant.model", 221, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [219, "fi.hut.soberit.agilefant.model", 221, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [210, "fi.hut.soberit.agilefant.model", 221, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [165, "fi.hut.soberit.agilefant.db", 222, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [73, "fi.hut.soberit.agilefant.business", 222, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [167, "fi.hut.soberit.agilefant.db", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [155, "fi.hut.soberit.agilefant.db.history", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [166, "fi.hut.soberit.agilefant.db", 226, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [74, "fi.hut.soberit.agilefant.business", 226, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [169, "fi.hut.soberit.agilefant.db", 227, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [170, "fi.hut.soberit.agilefant.db", 228, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [171, "fi.hut.soberit.agilefant.db", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [81, "fi.hut.soberit.agilefant.business", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [225, "fi.hut.soberit.agilefant.model", 230, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [224, "fi.hut.soberit.agilefant.model", 230, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [210, "fi.hut.soberit.agilefant.model", 230, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [172, "fi.hut.soberit.agilefant.db", 231, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [173, "fi.hut.soberit.agilefant.db", 232, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [83, "fi.hut.soberit.agilefant.business", 232, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [229, "fi.hut.soberit.agilefant.model", 233, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [225, "fi.hut.soberit.agilefant.model", 233, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [202, "fi.hut.soberit.agilefant.model", 233, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [174, "fi.hut.soberit.agilefant.db", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [88, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [175, "fi.hut.soberit.agilefant.db", 235, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [176, "fi.hut.soberit.agilefant.db", 236, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [177, "fi.hut.soberit.agilefant.db", 237, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [89, "fi.hut.soberit.agilefant.business", 237, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [281, "fi.hut.soberit.agilefant.transfer", 273, "fi.hut.soberit.agilefant.transfer"]}, {"py/tuple": [277, "fi.hut.soberit.agilefant.transfer", 273, "fi.hut.soberit.agilefant.transfer"]}, {"py/tuple": [272, "fi.hut.soberit.agilefant.transfer", 273, "fi.hut.soberit.agilefant.transfer"]}, {"py/tuple": [281, "fi.hut.soberit.agilefant.transfer", 282, "fi.hut.soberit.agilefant.transfer"]}, {"py/tuple": [272, "fi.hut.soberit.agilefant.transfer", 282, "fi.hut.soberit.agilefant.transfer"]}, {"py/tuple": [362, "fi.hut.soberit.agilefant.web", 338, "fi.hut.soberit.agilefant.web"]}, {"py/tuple": [361, "fi.hut.soberit.agilefant.web", 338, "fi.hut.soberit.agilefant.web"]}, {"py/tuple": [360, "fi.hut.soberit.agilefant.web", 338, "fi.hut.soberit.agilefant.web"]}, {"py/tuple": [357, "fi.hut.soberit.agilefant.web", 338, "fi.hut.soberit.agilefant.web"]}, {"py/tuple": [350, "fi.hut.soberit.agilefant.web", 338, "fi.hut.soberit.agilefant.web"]}, {"py/tuple": [389, "fi.hut.soberit.agilefant.web", 340, "fi.hut.soberit.agilefant.web"]}, {"py/tuple": [387, "fi.hut.soberit.agilefant.web", 340, "fi.hut.soberit.agilefant.web"]}, {"py/tuple": [385, "fi.hut.soberit.agilefant.web", 340, "fi.hut.soberit.agilefant.web"]}, {"py/tuple": [383, "fi.hut.soberit.agilefant.web", 340, "fi.hut.soberit.agilefant.web"]}, {"py/tuple": [373, "fi.hut.soberit.agilefant.web", 340, "fi.hut.soberit.agilefant.web"]}, {"py/tuple": [366, "fi.hut.soberit.agilefant.web", 340, "fi.hut.soberit.agilefant.web"]}, {"py/tuple": [361, "fi.hut.soberit.agilefant.web", 340, "fi.hut.soberit.agilefant.web"]}, {"py/tuple": [360, "fi.hut.soberit.agilefant.web", 340, "fi.hut.soberit.agilefant.web"]}, {"py/tuple": [357, "fi.hut.soberit.agilefant.web", 340, "fi.hut.soberit.agilefant.web"]}, {"py/tuple": [350, "fi.hut.soberit.agilefant.web", 340, "fi.hut.soberit.agilefant.web"]}, {"py/tuple": [349, "fi.hut.soberit.agilefant.web", 340, "fi.hut.soberit.agilefant.web"]}, {"py/tuple": [330, "fi.hut.soberit.agilefant.web", 340, "fi.hut.soberit.agilefant.web"]}, {"py/tuple": [506, "fi.hut.soberit.agilefant.web", 358, "fi.hut.soberit.agilefant.web"]}, {"py/tuple": [505, "fi.hut.soberit.agilefant.web", 358, "fi.hut.soberit.agilefant.web"]}, {"py/tuple": [504, "fi.hut.soberit.agilefant.web", 358, "fi.hut.soberit.agilefant.web"]}, {"py/tuple": [504, "fi.hut.soberit.agilefant.web", 358, "fi.hut.soberit.agilefant.web"]}, {"py/tuple": [387, "fi.hut.soberit.agilefant.web", 358, "fi.hut.soberit.agilefant.web"]}, {"py/tuple": [385, "fi.hut.soberit.agilefant.web", 358, "fi.hut.soberit.agilefant.web"]}, {"py/tuple": [384, "fi.hut.soberit.agilefant.web", 358, "fi.hut.soberit.agilefant.web"]}, {"py/tuple": [383, "fi.hut.soberit.agilefant.web", 358, "fi.hut.soberit.agilefant.web"]}, {"py/tuple": [373, "fi.hut.soberit.agilefant.web", 358, "fi.hut.soberit.agilefant.web"]}, {"py/tuple": [366, "fi.hut.soberit.agilefant.web", 358, "fi.hut.soberit.agilefant.web"]}, {"py/tuple": [361, "fi.hut.soberit.agilefant.web", 358, "fi.hut.soberit.agilefant.web"]}, {"py/tuple": [360, "fi.hut.soberit.agilefant.web", 358, "fi.hut.soberit.agilefant.web"]}, {"py/tuple": [357, "fi.hut.soberit.agilefant.web", 358, "fi.hut.soberit.agilefant.web"]}, {"py/tuple": [350, "fi.hut.soberit.agilefant.web", 358, "fi.hut.soberit.agilefant.web"]}, {"py/tuple": [349, "fi.hut.soberit.agilefant.web", 358, "fi.hut.soberit.agilefant.web"]}, {"py/tuple": [348, "fi.hut.soberit.agilefant.web", 358, "fi.hut.soberit.agilefant.web"]}, {"py/tuple": [332, "fi.hut.soberit.agilefant.web", 358, "fi.hut.soberit.agilefant.web"]}, {"py/tuple": [330, "fi.hut.soberit.agilefant.web", 358, "fi.hut.soberit.agilefant.web"]}, {"py/tuple": [469, "fi.hut.soberit.agilefant.test", 468, "fi.hut.soberit.agilefant.test"]}, {"py/tuple": [468, "fi.hut.soberit.agilefant.test", 470, "fi.hut.soberit.agilefant.test"]}, {"py/tuple": [1, "fi.hut.soberit.agilefant.business", 200, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [1, "fi.hut.soberit.agilefant.business", 237, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [2, "fi.hut.soberit.agilefant.business", 223, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [2, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [2, "fi.hut.soberit.agilefant.business", 223, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [2, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [3, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [3, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [4, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [4, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [4, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [4, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [4, "fi.hut.soberit.agilefant.business", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [4, "fi.hut.soberit.agilefant.business", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [4, "fi.hut.soberit.agilefant.business", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [4, "fi.hut.soberit.agilefant.business", 221, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [4, "fi.hut.soberit.agilefant.business", 221, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [4, "fi.hut.soberit.agilefant.business", 221, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [4, "fi.hut.soberit.agilefant.business", 221, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [4, "fi.hut.soberit.agilefant.business", 221, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [4, "fi.hut.soberit.agilefant.business", 221, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 87, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 87, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 171, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 171, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 175, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 175, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 176, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 176, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 81, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 81, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 70, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 70, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 167, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 167, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [7, "fi.hut.soberit.agilefant.business", 8, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [12, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [13, "fi.hut.soberit.agilefant.business", 209, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [13, "fi.hut.soberit.agilefant.business", 209, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [13, "fi.hut.soberit.agilefant.business", 209, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [13, "fi.hut.soberit.agilefant.business", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [13, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [13, "fi.hut.soberit.agilefant.business", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [13, "fi.hut.soberit.agilefant.business", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [13, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [13, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [14, "fi.hut.soberit.agilefant.business.impl", 89, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [14, "fi.hut.soberit.agilefant.business.impl", 105, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [14, "fi.hut.soberit.agilefant.business.impl", 105, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [15, "fi.hut.soberit.agilefant.business.impl", 106, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [15, "fi.hut.soberit.agilefant.business.impl", 88, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [15, "fi.hut.soberit.agilefant.business.impl", 106, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [15, "fi.hut.soberit.agilefant.business.impl", 88, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [16, "fi.hut.soberit.agilefant.business.impl", 4, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [16, "fi.hut.soberit.agilefant.business.impl", 58, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [16, "fi.hut.soberit.agilefant.business.impl", 88, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [17, "fi.hut.soberit.agilefant.business.impl", 107, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [17, "fi.hut.soberit.agilefant.business.impl", 163, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [17, "fi.hut.soberit.agilefant.business.impl", 2, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [17, "fi.hut.soberit.agilefant.business.impl", 167, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [17, "fi.hut.soberit.agilefant.business.impl", 76, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [17, "fi.hut.soberit.agilefant.business.impl", 148, "fi.hut.soberit.agilefant.db.history"]}, {"py/tuple": [17, "fi.hut.soberit.agilefant.business.impl", 107, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [17, "fi.hut.soberit.agilefant.business.impl", 221, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [17, "fi.hut.soberit.agilefant.business.impl", 221, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [17, "fi.hut.soberit.agilefant.business.impl", 221, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [18, "fi.hut.soberit.agilefant.business.impl", 108, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [18, "fi.hut.soberit.agilefant.business.impl", 168, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [18, "fi.hut.soberit.agilefant.business.impl", 107, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [18, "fi.hut.soberit.agilefant.business.impl", 108, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [18, "fi.hut.soberit.agilefant.business.impl", 168, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [18, "fi.hut.soberit.agilefant.business.impl", 107, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [19, "fi.hut.soberit.agilefant.business.impl", 171, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [19, "fi.hut.soberit.agilefant.business.impl", 167, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [19, "fi.hut.soberit.agilefant.business.impl", 170, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [19, "fi.hut.soberit.agilefant.business.impl", 175, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [19, "fi.hut.soberit.agilefant.business.impl", 176, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [19, "fi.hut.soberit.agilefant.business.impl", 70, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [19, "fi.hut.soberit.agilefant.business.impl", 81, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [19, "fi.hut.soberit.agilefant.business.impl", 76, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [19, "fi.hut.soberit.agilefant.business.impl", 87, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [19, "fi.hut.soberit.agilefant.business.impl", 171, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [19, "fi.hut.soberit.agilefant.business.impl", 167, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [19, "fi.hut.soberit.agilefant.business.impl", 175, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [19, "fi.hut.soberit.agilefant.business.impl", 176, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [19, "fi.hut.soberit.agilefant.business.impl", 70, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [19, "fi.hut.soberit.agilefant.business.impl", 81, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [19, "fi.hut.soberit.agilefant.business.impl", 76, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [19, "fi.hut.soberit.agilefant.business.impl", 87, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [19, "fi.hut.soberit.agilefant.business.impl", 170, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [20, "fi.hut.soberit.agilefant.business.impl", 106, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [20, "fi.hut.soberit.agilefant.business.impl", 108, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [20, "fi.hut.soberit.agilefant.business.impl", 109, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [20, "fi.hut.soberit.agilefant.business.impl", 157, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [20, "fi.hut.soberit.agilefant.business.impl", 158, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [20, "fi.hut.soberit.agilefant.business.impl", 159, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [20, "fi.hut.soberit.agilefant.business.impl", 160, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [20, "fi.hut.soberit.agilefant.business.impl", 161, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [20, "fi.hut.soberit.agilefant.business.impl", 163, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [20, "fi.hut.soberit.agilefant.business.impl", 164, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [20, "fi.hut.soberit.agilefant.business.impl", 165, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [20, "fi.hut.soberit.agilefant.business.impl", 167, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [20, "fi.hut.soberit.agilefant.business.impl", 166, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [20, "fi.hut.soberit.agilefant.business.impl", 169, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [20, "fi.hut.soberit.agilefant.business.impl", 170, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [20, "fi.hut.soberit.agilefant.business.impl", 171, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [20, "fi.hut.soberit.agilefant.business.impl", 172, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [20, "fi.hut.soberit.agilefant.business.impl", 173, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [20, "fi.hut.soberit.agilefant.business.impl", 174, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [20, "fi.hut.soberit.agilefant.business.impl", 175, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [20, "fi.hut.soberit.agilefant.business.impl", 176, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [20, "fi.hut.soberit.agilefant.business.impl", 177, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [20, "fi.hut.soberit.agilefant.business.impl", 105, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [20, "fi.hut.soberit.agilefant.business.impl", 58, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [20, "fi.hut.soberit.agilefant.business.impl", 88, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [20, "fi.hut.soberit.agilefant.business.impl", 73, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [20, "fi.hut.soberit.agilefant.business.impl", 83, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [21, "fi.hut.soberit.agilefant.business.impl", 58, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [21, "fi.hut.soberit.agilefant.business.impl", 73, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [21, "fi.hut.soberit.agilefant.business.impl", 57, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [24, "fi.hut.soberit.agilefant.business.impl", 157, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [24, "fi.hut.soberit.agilefant.business.impl", 157, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [25, "fi.hut.soberit.agilefant.business.impl", 158, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [25, "fi.hut.soberit.agilefant.business.impl", 76, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [25, "fi.hut.soberit.agilefant.business.impl", 81, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [25, "fi.hut.soberit.agilefant.business.impl", 88, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [25, "fi.hut.soberit.agilefant.business.impl", 4, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [25, "fi.hut.soberit.agilefant.business.impl", 109, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [25, "fi.hut.soberit.agilefant.business.impl", 158, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [25, "fi.hut.soberit.agilefant.business.impl", 109, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [25, "fi.hut.soberit.agilefant.business.impl", 76, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [25, "fi.hut.soberit.agilefant.business.impl", 88, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [25, "fi.hut.soberit.agilefant.business.impl", 81, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [25, "fi.hut.soberit.agilefant.business.impl", 4, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [26, "fi.hut.soberit.agilefant.business.impl", 59, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [26, "fi.hut.soberit.agilefant.business.impl", 13, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [26, "fi.hut.soberit.agilefant.business.impl", 58, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [26, "fi.hut.soberit.agilefant.business.impl", 73, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [26, "fi.hut.soberit.agilefant.business.impl", 59, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [26, "fi.hut.soberit.agilefant.business.impl", 13, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [26, "fi.hut.soberit.agilefant.business.impl", 58, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [26, "fi.hut.soberit.agilefant.business.impl", 73, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [27, "fi.hut.soberit.agilefant.business.impl", 159, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [27, "fi.hut.soberit.agilefant.business.impl", 87, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [27, "fi.hut.soberit.agilefant.business.impl", 76, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [27, "fi.hut.soberit.agilefant.business.impl", 13, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [27, "fi.hut.soberit.agilefant.business.impl", 5, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [27, "fi.hut.soberit.agilefant.business.impl", 59, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [27, "fi.hut.soberit.agilefant.business.impl", 160, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [27, "fi.hut.soberit.agilefant.business.impl", 4, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [27, "fi.hut.soberit.agilefant.business.impl", 2, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [27, "fi.hut.soberit.agilefant.business.impl", 79, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [27, "fi.hut.soberit.agilefant.business.impl", 81, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [27, "fi.hut.soberit.agilefant.business.impl", 83, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [27, "fi.hut.soberit.agilefant.business.impl", 148, "fi.hut.soberit.agilefant.db.history"]}, {"py/tuple": [27, "fi.hut.soberit.agilefant.business.impl", 155, "fi.hut.soberit.agilefant.db.history"]}, {"py/tuple": [27, "fi.hut.soberit.agilefant.business.impl", 156, "fi.hut.soberit.agilefant.db.history"]}, {"py/tuple": [27, "fi.hut.soberit.agilefant.business.impl", 159, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [28, "fi.hut.soberit.agilefant.business.impl", 160, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [28, "fi.hut.soberit.agilefant.business.impl", 159, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [28, "fi.hut.soberit.agilefant.business.impl", 160, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [28, "fi.hut.soberit.agilefant.business.impl", 159, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [29, "fi.hut.soberit.agilefant.business.impl", 161, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [29, "fi.hut.soberit.agilefant.business.impl", 76, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [29, "fi.hut.soberit.agilefant.business.impl", 161, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [30, "fi.hut.soberit.agilefant.business.impl", 162, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [30, "fi.hut.soberit.agilefant.business.impl", 162, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [31, "fi.hut.soberit.agilefant.business.impl", 159, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [31, "fi.hut.soberit.agilefant.business.impl", 164, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [31, "fi.hut.soberit.agilefant.business.impl", 167, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [31, "fi.hut.soberit.agilefant.business.impl", 67, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [31, "fi.hut.soberit.agilefant.business.impl", 58, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [31, "fi.hut.soberit.agilefant.business.impl", 87, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [31, "fi.hut.soberit.agilefant.business.impl", 88, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [31, "fi.hut.soberit.agilefant.business.impl", 3, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [31, "fi.hut.soberit.agilefant.business.impl", 67, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [31, "fi.hut.soberit.agilefant.business.impl", 58, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [31, "fi.hut.soberit.agilefant.business.impl", 87, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [31, "fi.hut.soberit.agilefant.business.impl", 159, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [31, "fi.hut.soberit.agilefant.business.impl", 164, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [31, "fi.hut.soberit.agilefant.business.impl", 167, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [31, "fi.hut.soberit.agilefant.business.impl", 88, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [31, "fi.hut.soberit.agilefant.business.impl", 3, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [33, "fi.hut.soberit.agilefant.business.impl", 174, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [33, "fi.hut.soberit.agilefant.business.impl", 174, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [34, "fi.hut.soberit.agilefant.business.impl", 171, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [34, "fi.hut.soberit.agilefant.business.impl", 167, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [34, "fi.hut.soberit.agilefant.business.impl", 88, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [34, "fi.hut.soberit.agilefant.business.impl", 159, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [34, "fi.hut.soberit.agilefant.business.impl", 106, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [34, "fi.hut.soberit.agilefant.business.impl", 73, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [34, "fi.hut.soberit.agilefant.business.impl", 221, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [34, "fi.hut.soberit.agilefant.business.impl", 171, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [34, "fi.hut.soberit.agilefant.business.impl", 167, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [34, "fi.hut.soberit.agilefant.business.impl", 88, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [34, "fi.hut.soberit.agilefant.business.impl", 159, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [34, "fi.hut.soberit.agilefant.business.impl", 106, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [34, "fi.hut.soberit.agilefant.business.impl", 73, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [35, "fi.hut.soberit.agilefant.business.impl", 164, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [35, "fi.hut.soberit.agilefant.business.impl", 73, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [35, "fi.hut.soberit.agilefant.business.impl", 3, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [35, "fi.hut.soberit.agilefant.business.impl", 164, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [35, "fi.hut.soberit.agilefant.business.impl", 73, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [36, "fi.hut.soberit.agilefant.business.impl", 163, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [36, "fi.hut.soberit.agilefant.business.impl", 69, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [36, "fi.hut.soberit.agilefant.business.impl", 58, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [36, "fi.hut.soberit.agilefant.business.impl", 76, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [36, "fi.hut.soberit.agilefant.business.impl", 13, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [36, "fi.hut.soberit.agilefant.business.impl", 87, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [36, "fi.hut.soberit.agilefant.business.impl", 83, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [36, "fi.hut.soberit.agilefant.business.impl", 3, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [36, "fi.hut.soberit.agilefant.business.impl", 163, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [36, "fi.hut.soberit.agilefant.business.impl", 282, "fi.hut.soberit.agilefant.transfer"]}, {"py/tuple": [36, "fi.hut.soberit.agilefant.business.impl", 282, "fi.hut.soberit.agilefant.transfer"]}, {"py/tuple": [37, "fi.hut.soberit.agilefant.business.impl", 108, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [38, "fi.hut.soberit.agilefant.business.impl", 164, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [38, "fi.hut.soberit.agilefant.business.impl", 67, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [38, "fi.hut.soberit.agilefant.business.impl", 2, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [38, "fi.hut.soberit.agilefant.business.impl", 4, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [38, "fi.hut.soberit.agilefant.business.impl", 87, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [38, "fi.hut.soberit.agilefant.business.impl", 70, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [38, "fi.hut.soberit.agilefant.business.impl", 73, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [38, "fi.hut.soberit.agilefant.business.impl", 76, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [38, "fi.hut.soberit.agilefant.business.impl", 13, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [38, "fi.hut.soberit.agilefant.business.impl", 58, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [38, "fi.hut.soberit.agilefant.business.impl", 5, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [38, "fi.hut.soberit.agilefant.business.impl", 79, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [38, "fi.hut.soberit.agilefant.business.impl", 77, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [38, "fi.hut.soberit.agilefant.business.impl", 73, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [38, "fi.hut.soberit.agilefant.business.impl", 70, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [38, "fi.hut.soberit.agilefant.business.impl", 164, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [38, "fi.hut.soberit.agilefant.business.impl", 2, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [38, "fi.hut.soberit.agilefant.business.impl", 76, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [38, "fi.hut.soberit.agilefant.business.impl", 13, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [38, "fi.hut.soberit.agilefant.business.impl", 58, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [38, "fi.hut.soberit.agilefant.business.impl", 5, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [38, "fi.hut.soberit.agilefant.business.impl", 79, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [39, "fi.hut.soberit.agilefant.business.impl", 220, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [39, "fi.hut.soberit.agilefant.business.impl", 220, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [39, "fi.hut.soberit.agilefant.business.impl", 220, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [39, "fi.hut.soberit.agilefant.business.impl", 220, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [39, "fi.hut.soberit.agilefant.business.impl", 220, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [39, "fi.hut.soberit.agilefant.business.impl", 220, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [39, "fi.hut.soberit.agilefant.business.impl", 220, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [39, "fi.hut.soberit.agilefant.business.impl", 220, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [39, "fi.hut.soberit.agilefant.business.impl", 220, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [39, "fi.hut.soberit.agilefant.business.impl", 220, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [39, "fi.hut.soberit.agilefant.business.impl", 220, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [39, "fi.hut.soberit.agilefant.business.impl", 71, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [40, "fi.hut.soberit.agilefant.business.impl", 167, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [40, "fi.hut.soberit.agilefant.business.impl", 107, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [40, "fi.hut.soberit.agilefant.business.impl", 174, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [40, "fi.hut.soberit.agilefant.business.impl", 171, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [40, "fi.hut.soberit.agilefant.business.impl", 3, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [40, "fi.hut.soberit.agilefant.business.impl", 215, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [41, "fi.hut.soberit.agilefant.business.impl", 165, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [41, "fi.hut.soberit.agilefant.business.impl", 165, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [42, "fi.hut.soberit.agilefant.business.impl", 166, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [42, "fi.hut.soberit.agilefant.business.impl", 76, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [42, "fi.hut.soberit.agilefant.business.impl", 88, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [42, "fi.hut.soberit.agilefant.business.impl", 155, "fi.hut.soberit.agilefant.db.history"]}, {"py/tuple": [43, "fi.hut.soberit.agilefant.business.impl", 76, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [43, "fi.hut.soberit.agilefant.business.impl", 60, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [44, "fi.hut.soberit.agilefant.business.impl", 167, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [44, "fi.hut.soberit.agilefant.business.impl", 4, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [44, "fi.hut.soberit.agilefant.business.impl", 58, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [44, "fi.hut.soberit.agilefant.business.impl", 159, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [44, "fi.hut.soberit.agilefant.business.impl", 174, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [44, "fi.hut.soberit.agilefant.business.impl", 158, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [44, "fi.hut.soberit.agilefant.business.impl", 59, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [44, "fi.hut.soberit.agilefant.business.impl", 5, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [44, "fi.hut.soberit.agilefant.business.impl", 79, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [44, "fi.hut.soberit.agilefant.business.impl", 87, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [44, "fi.hut.soberit.agilefant.business.impl", 13, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [44, "fi.hut.soberit.agilefant.business.impl", 81, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [44, "fi.hut.soberit.agilefant.business.impl", 78, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [44, "fi.hut.soberit.agilefant.business.impl", 80, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [44, "fi.hut.soberit.agilefant.business.impl", 60, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [44, "fi.hut.soberit.agilefant.business.impl", 167, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [44, "fi.hut.soberit.agilefant.business.impl", 174, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [44, "fi.hut.soberit.agilefant.business.impl", 159, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [44, "fi.hut.soberit.agilefant.business.impl", 5, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [44, "fi.hut.soberit.agilefant.business.impl", 59, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [44, "fi.hut.soberit.agilefant.business.impl", 158, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [44, "fi.hut.soberit.agilefant.business.impl", 4, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [44, "fi.hut.soberit.agilefant.business.impl", 87, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [44, "fi.hut.soberit.agilefant.business.impl", 13, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [44, "fi.hut.soberit.agilefant.business.impl", 81, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [44, "fi.hut.soberit.agilefant.business.impl", 79, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [44, "fi.hut.soberit.agilefant.business.impl", 78, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [46, "fi.hut.soberit.agilefant.business.impl", 168, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [46, "fi.hut.soberit.agilefant.business.impl", 76, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [46, "fi.hut.soberit.agilefant.business.impl", 4, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [46, "fi.hut.soberit.agilefant.business.impl", 77, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [46, "fi.hut.soberit.agilefant.business.impl", 80, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [47, "fi.hut.soberit.agilefant.business.impl", 170, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [47, "fi.hut.soberit.agilefant.business.impl", 4, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [47, "fi.hut.soberit.agilefant.business.impl", 170, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [48, "fi.hut.soberit.agilefant.business.impl", 4, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [49, "fi.hut.soberit.agilefant.business.impl", 58, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [49, "fi.hut.soberit.agilefant.business.impl", 76, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [49, "fi.hut.soberit.agilefant.business.impl", 59, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [49, "fi.hut.soberit.agilefant.business.impl", 6, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [49, "fi.hut.soberit.agilefant.business.impl", 70, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [49, "fi.hut.soberit.agilefant.business.impl", 13, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [49, "fi.hut.soberit.agilefant.business.impl", 171, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [49, "fi.hut.soberit.agilefant.business.impl", 171, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [49, "fi.hut.soberit.agilefant.business.impl", 58, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [49, "fi.hut.soberit.agilefant.business.impl", 76, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [49, "fi.hut.soberit.agilefant.business.impl", 59, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [49, "fi.hut.soberit.agilefant.business.impl", 70, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [49, "fi.hut.soberit.agilefant.business.impl", 6, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [49, "fi.hut.soberit.agilefant.business.impl", 13, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [50, "fi.hut.soberit.agilefant.business.impl", 81, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [50, "fi.hut.soberit.agilefant.business.impl", 81, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [51, "fi.hut.soberit.agilefant.business.impl", 173, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [51, "fi.hut.soberit.agilefant.business.impl", 88, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [51, "fi.hut.soberit.agilefant.business.impl", 67, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [51, "fi.hut.soberit.agilefant.business.impl", 58, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [51, "fi.hut.soberit.agilefant.business.impl", 173, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [51, "fi.hut.soberit.agilefant.business.impl", 88, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [52, "fi.hut.soberit.agilefant.business.impl", 158, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [52, "fi.hut.soberit.agilefant.business.impl", 158, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [53, "fi.hut.soberit.agilefant.business.impl", 158, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [53, "fi.hut.soberit.agilefant.business.impl", 158, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [54, "fi.hut.soberit.agilefant.business.impl", 4, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [54, "fi.hut.soberit.agilefant.business.impl", 67, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [54, "fi.hut.soberit.agilefant.business.impl", 69, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [54, "fi.hut.soberit.agilefant.business.impl", 13, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [54, "fi.hut.soberit.agilefant.business.impl", 88, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [54, "fi.hut.soberit.agilefant.business.impl", 83, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [54, "fi.hut.soberit.agilefant.business.impl", 58, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [54, "fi.hut.soberit.agilefant.business.impl", 76, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [54, "fi.hut.soberit.agilefant.business.impl", 3, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [54, "fi.hut.soberit.agilefant.business.impl", 221, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [54, "fi.hut.soberit.agilefant.business.impl", 13, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [54, "fi.hut.soberit.agilefant.business.impl", 88, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [54, "fi.hut.soberit.agilefant.business.impl", 83, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [54, "fi.hut.soberit.agilefant.business.impl", 4, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [54, "fi.hut.soberit.agilefant.business.impl", 58, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [54, "fi.hut.soberit.agilefant.business.impl", 67, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [54, "fi.hut.soberit.agilefant.business.impl", 69, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [54, "fi.hut.soberit.agilefant.business.impl", 76, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [54, "fi.hut.soberit.agilefant.business.impl", 3, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [55, "fi.hut.soberit.agilefant.business.impl", 174, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [55, "fi.hut.soberit.agilefant.business.impl", 83, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [55, "fi.hut.soberit.agilefant.business.impl", 174, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [55, "fi.hut.soberit.agilefant.business.impl", 83, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [56, "fi.hut.soberit.agilefant.business.impl", 177, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [56, "fi.hut.soberit.agilefant.business.impl", 177, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [57, "fi.hut.soberit.agilefant.business", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [57, "fi.hut.soberit.agilefant.business", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [57, "fi.hut.soberit.agilefant.business", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [58, "fi.hut.soberit.agilefant.business", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [58, "fi.hut.soberit.agilefant.business", 211, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [58, "fi.hut.soberit.agilefant.business", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [58, "fi.hut.soberit.agilefant.business", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [58, "fi.hut.soberit.agilefant.business", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [58, "fi.hut.soberit.agilefant.business", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [58, "fi.hut.soberit.agilefant.business", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [58, "fi.hut.soberit.agilefant.business", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [58, "fi.hut.soberit.agilefant.business", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [58, "fi.hut.soberit.agilefant.business", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [59, "fi.hut.soberit.agilefant.business", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [59, "fi.hut.soberit.agilefant.business", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [59, "fi.hut.soberit.agilefant.business", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [59, "fi.hut.soberit.agilefant.business", 206, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [59, "fi.hut.soberit.agilefant.business", 206, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [61, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [61, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [62, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [63, "fi.hut.soberit.agilefant.business", 217, "fi.hut.soberit.agilefant.model.notification"]}, {"py/tuple": [63, "fi.hut.soberit.agilefant.business", 217, "fi.hut.soberit.agilefant.model.notification"]}, {"py/tuple": [65, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [65, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [67, "fi.hut.soberit.agilefant.business", 218, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [67, "fi.hut.soberit.agilefant.business", 218, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [67, "fi.hut.soberit.agilefant.business", 218, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [67, "fi.hut.soberit.agilefant.business", 218, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [67, "fi.hut.soberit.agilefant.business", 218, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [68, "fi.hut.soberit.agilefant.business", 219, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [68, "fi.hut.soberit.agilefant.business", 219, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [69, "fi.hut.soberit.agilefant.business", 219, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [69, "fi.hut.soberit.agilefant.business", 219, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [69, "fi.hut.soberit.agilefant.business", 219, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [69, "fi.hut.soberit.agilefant.business", 219, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [69, "fi.hut.soberit.agilefant.business", 219, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [69, "fi.hut.soberit.agilefant.business", 219, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [69, "fi.hut.soberit.agilefant.business", 219, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [69, "fi.hut.soberit.agilefant.business", 315, "fi.hut.soberit.agilefant.util"]}, {"py/tuple": [70, "fi.hut.soberit.agilefant.business", 220, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [70, "fi.hut.soberit.agilefant.business", 220, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [70, "fi.hut.soberit.agilefant.business", 220, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [70, "fi.hut.soberit.agilefant.business", 220, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [70, "fi.hut.soberit.agilefant.business", 220, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [70, "fi.hut.soberit.agilefant.business", 220, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [70, "fi.hut.soberit.agilefant.business", 220, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [70, "fi.hut.soberit.agilefant.business", 220, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [70, "fi.hut.soberit.agilefant.business", 71, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [70, "fi.hut.soberit.agilefant.business", 71, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [74, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [74, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [74, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [77, "fi.hut.soberit.agilefant.business", 315, "fi.hut.soberit.agilefant.util"]}, {"py/tuple": [77, "fi.hut.soberit.agilefant.business", 315, "fi.hut.soberit.agilefant.util"]}, {"py/tuple": [78, "fi.hut.soberit.agilefant.business", 315, "fi.hut.soberit.agilefant.util"]}, {"py/tuple": [78, "fi.hut.soberit.agilefant.business", 219, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [78, "fi.hut.soberit.agilefant.business", 315, "fi.hut.soberit.agilefant.util"]}, {"py/tuple": [78, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [78, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [78, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [78, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [78, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [78, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [78, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [78, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [78, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [78, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [78, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [79, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [79, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [79, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [79, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [79, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [79, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [79, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [79, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [79, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [79, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [79, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [79, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [79, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [79, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [79, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [79, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [79, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [79, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [79, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [80, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [80, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [80, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [80, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [80, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [80, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [80, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [80, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [80, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [80, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [80, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [81, "fi.hut.soberit.agilefant.business", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [81, "fi.hut.soberit.agilefant.business", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [81, "fi.hut.soberit.agilefant.business", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [81, "fi.hut.soberit.agilefant.business", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [81, "fi.hut.soberit.agilefant.business", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [81, "fi.hut.soberit.agilefant.business", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [81, "fi.hut.soberit.agilefant.business", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [81, "fi.hut.soberit.agilefant.business", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [81, "fi.hut.soberit.agilefant.business", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [81, "fi.hut.soberit.agilefant.business", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [81, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [81, "fi.hut.soberit.agilefant.business", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [82, "fi.hut.soberit.agilefant.business", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [83, "fi.hut.soberit.agilefant.business", 232, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [85, "fi.hut.soberit.agilefant.business", 319, "fi.hut.soberit.agilefant.util"]}, {"py/tuple": [87, "fi.hut.soberit.agilefant.business", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [87, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [87, "fi.hut.soberit.agilefant.business", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [87, "fi.hut.soberit.agilefant.business", 219, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [87, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [87, "fi.hut.soberit.agilefant.business", 235, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [87, "fi.hut.soberit.agilefant.business", 236, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [88, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [88, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [88, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [89, "fi.hut.soberit.agilefant.business", 237, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [89, "fi.hut.soberit.agilefant.business", 200, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [89, "fi.hut.soberit.agilefant.business", 237, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [89, "fi.hut.soberit.agilefant.business", 200, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [106, "fi.hut.soberit.agilefant.db", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [107, "fi.hut.soberit.agilefant.db", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [107, "fi.hut.soberit.agilefant.db", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [109, "fi.hut.soberit.agilefant.db", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [126, "fi.hut.soberit.agilefant.db.hibernate.notification", 63, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [148, "fi.hut.soberit.agilefant.db.history", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [148, "fi.hut.soberit.agilefant.db.history", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [148, "fi.hut.soberit.agilefant.db.history", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [155, "fi.hut.soberit.agilefant.db.history", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [156, "fi.hut.soberit.agilefant.db.history", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [157, "fi.hut.soberit.agilefant.db", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [158, "fi.hut.soberit.agilefant.db", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [158, "fi.hut.soberit.agilefant.db", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [159, "fi.hut.soberit.agilefant.db", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [159, "fi.hut.soberit.agilefant.db", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [159, "fi.hut.soberit.agilefant.db", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [159, "fi.hut.soberit.agilefant.db", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [159, "fi.hut.soberit.agilefant.db", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [159, "fi.hut.soberit.agilefant.db", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [159, "fi.hut.soberit.agilefant.db", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [161, "fi.hut.soberit.agilefant.db", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [162, "fi.hut.soberit.agilefant.db", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [162, "fi.hut.soberit.agilefant.db", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [163, "fi.hut.soberit.agilefant.db", 218, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [163, "fi.hut.soberit.agilefant.db", 218, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [164, "fi.hut.soberit.agilefant.db", 219, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [164, "fi.hut.soberit.agilefant.db", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [166, "fi.hut.soberit.agilefant.db", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [167, "fi.hut.soberit.agilefant.db", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [167, "fi.hut.soberit.agilefant.db", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [167, "fi.hut.soberit.agilefant.db", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [168, "fi.hut.soberit.agilefant.db", 219, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [168, "fi.hut.soberit.agilefant.db", 219, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [168, "fi.hut.soberit.agilefant.db", 219, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [168, "fi.hut.soberit.agilefant.db", 219, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [168, "fi.hut.soberit.agilefant.db", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [168, "fi.hut.soberit.agilefant.db", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [168, "fi.hut.soberit.agilefant.db", 219, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [170, "fi.hut.soberit.agilefant.db", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [170, "fi.hut.soberit.agilefant.db", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [170, "fi.hut.soberit.agilefant.db", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [171, "fi.hut.soberit.agilefant.db", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [171, "fi.hut.soberit.agilefant.db", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [171, "fi.hut.soberit.agilefant.db", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [171, "fi.hut.soberit.agilefant.db", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [171, "fi.hut.soberit.agilefant.db", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [171, "fi.hut.soberit.agilefant.db", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [171, "fi.hut.soberit.agilefant.db", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [171, "fi.hut.soberit.agilefant.db", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [171, "fi.hut.soberit.agilefant.db", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [171, "fi.hut.soberit.agilefant.db", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [171, "fi.hut.soberit.agilefant.db", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [171, "fi.hut.soberit.agilefant.db", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [171, "fi.hut.soberit.agilefant.db", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [172, "fi.hut.soberit.agilefant.db", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [175, "fi.hut.soberit.agilefant.db", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [175, "fi.hut.soberit.agilefant.db", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [175, "fi.hut.soberit.agilefant.db", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [175, "fi.hut.soberit.agilefant.db", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [175, "fi.hut.soberit.agilefant.db", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [175, "fi.hut.soberit.agilefant.db", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [176, "fi.hut.soberit.agilefant.db", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [176, "fi.hut.soberit.agilefant.db", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [176, "fi.hut.soberit.agilefant.db", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [176, "fi.hut.soberit.agilefant.db", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [176, "fi.hut.soberit.agilefant.db", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [176, "fi.hut.soberit.agilefant.db", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [196, "fi.hut.soberit.agilefant.exportimport", 7, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [197, "fi.hut.soberit.agilefant.exportimport", 7, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [239, "fi.hut.soberit.agilefant.readonly", 58, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [240, "fi.hut.soberit.agilefant.readonly", 58, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [241, "fi.hut.soberit.agilefant.remote", 88, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [242, "fi.hut.soberit.agilefant.remote", 58, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [243, "fi.hut.soberit.agilefant.remote", 67, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [244, "fi.hut.soberit.agilefant.remote", 69, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [245, "fi.hut.soberit.agilefant.remote", 76, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [246, "fi.hut.soberit.agilefant.remote", 85, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [248, "fi.hut.soberit.agilefant.security", 88, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [248, "fi.hut.soberit.agilefant.security", 88, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [252, "fi.hut.soberit.agilefant.security", 88, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [253, "fi.hut.soberit.agilefant.security", 88, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [255, "fi.hut.soberit.agilefant.transfer", 215, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [255, "fi.hut.soberit.agilefant.transfer", 215, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [255, "fi.hut.soberit.agilefant.transfer", 215, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [283, "fi.hut.soberit.agilefant.transfer", 215, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [283, "fi.hut.soberit.agilefant.transfer", 215, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [283, "fi.hut.soberit.agilefant.transfer", 215, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [296, "fi.hut.soberit.agilefant.util", 4, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [296, "fi.hut.soberit.agilefant.util", 4, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [308, "fi.hut.soberit.agilefant.util", 215, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [308, "fi.hut.soberit.agilefant.util", 215, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [323, "fi.hut.soberit.agilefant.util", 58, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [327, "fi.hut.soberit.agilefant.util", 88, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [327, "fi.hut.soberit.agilefant.util", 88, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [332, "fi.hut.soberit.agilefant.web", 2, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [332, "fi.hut.soberit.agilefant.web", 2, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [333, "fi.hut.soberit.agilefant.web", 4, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [333, "fi.hut.soberit.agilefant.web", 58, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [333, "fi.hut.soberit.agilefant.web", 3, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [334, "fi.hut.soberit.agilefant.web", 87, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [334, "fi.hut.soberit.agilefant.web", 87, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [335, "fi.hut.soberit.agilefant.web", 4, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [335, "fi.hut.soberit.agilefant.web", 58, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [335, "fi.hut.soberit.agilefant.web", 3, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [335, "fi.hut.soberit.agilefant.web", 4, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [336, "fi.hut.soberit.agilefant.web", 57, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [336, "fi.hut.soberit.agilefant.web", 68, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [336, "fi.hut.soberit.agilefant.web", 58, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [336, "fi.hut.soberit.agilefant.web", 69, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [336, "fi.hut.soberit.agilefant.web", 57, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [336, "fi.hut.soberit.agilefant.web", 58, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [336, "fi.hut.soberit.agilefant.web", 68, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [337, "fi.hut.soberit.agilefant.web.context", 338, "fi.hut.soberit.agilefant.web"]}, {"py/tuple": [341, "fi.hut.soberit.agilefant.web", 6, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [341, "fi.hut.soberit.agilefant.web", 88, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [341, "fi.hut.soberit.agilefant.web", 81, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [341, "fi.hut.soberit.agilefant.web", 76, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [341, "fi.hut.soberit.agilefant.web", 87, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [341, "fi.hut.soberit.agilefant.web", 83, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [341, "fi.hut.soberit.agilefant.web", 88, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [341, "fi.hut.soberit.agilefant.web", 6, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [341, "fi.hut.soberit.agilefant.web", 81, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [341, "fi.hut.soberit.agilefant.web", 87, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [342, "fi.hut.soberit.agilefant.web", 7, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [342, "fi.hut.soberit.agilefant.web", 67, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [342, "fi.hut.soberit.agilefant.web", 58, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [342, "fi.hut.soberit.agilefant.web", 88, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [344, "fi.hut.soberit.agilefant.web", 10, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [347, "fi.hut.soberit.agilefant.web.function", 221, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [348, "fi.hut.soberit.agilefant.web", 12, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [348, "fi.hut.soberit.agilefant.web", 88, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [349, "fi.hut.soberit.agilefant.web", 13, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [349, "fi.hut.soberit.agilefant.web", 13, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [350, "fi.hut.soberit.agilefant.web", 58, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [350, "fi.hut.soberit.agilefant.web", 76, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [350, "fi.hut.soberit.agilefant.web", 58, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [350, "fi.hut.soberit.agilefant.web", 76, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [351, "fi.hut.soberit.agilefant.web", 58, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [352, "fi.hut.soberit.agilefant.web", 60, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [352, "fi.hut.soberit.agilefant.web", 60, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [353, "fi.hut.soberit.agilefant.web", 73, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [353, "fi.hut.soberit.agilefant.web", 4, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [353, "fi.hut.soberit.agilefant.web", 88, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [353, "fi.hut.soberit.agilefant.web", 61, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [354, "fi.hut.soberit.agilefant.web", 62, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [354, "fi.hut.soberit.agilefant.web", 62, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [355, "fi.hut.soberit.agilefant.web", 75, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [356, "fi.hut.soberit.agilefant.web", 64, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [356, "fi.hut.soberit.agilefant.web", 88, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [356, "fi.hut.soberit.agilefant.web", 64, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [356, "fi.hut.soberit.agilefant.web", 88, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [357, "fi.hut.soberit.agilefant.web", 1, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [357, "fi.hut.soberit.agilefant.web", 89, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [359, "fi.hut.soberit.agilefant.web", 358, "fi.hut.soberit.agilefant.web"]}, {"py/tuple": [359, "fi.hut.soberit.agilefant.web", 358, "fi.hut.soberit.agilefant.web"]}, {"py/tuple": [360, "fi.hut.soberit.agilefant.web", 67, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [360, "fi.hut.soberit.agilefant.web", 58, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [360, "fi.hut.soberit.agilefant.web", 4, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [360, "fi.hut.soberit.agilefant.web", 76, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [360, "fi.hut.soberit.agilefant.web", 3, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [360, "fi.hut.soberit.agilefant.web", 67, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [360, "fi.hut.soberit.agilefant.web", 76, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [361, "fi.hut.soberit.agilefant.web", 69, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [361, "fi.hut.soberit.agilefant.web", 76, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [361, "fi.hut.soberit.agilefant.web", 58, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [361, "fi.hut.soberit.agilefant.web", 69, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [361, "fi.hut.soberit.agilefant.web", 76, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [362, "fi.hut.soberit.agilefant.web", 66, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [362, "fi.hut.soberit.agilefant.web", 89, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [362, "fi.hut.soberit.agilefant.web", 66, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [363, "fi.hut.soberit.agilefant.web", 72, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [363, "fi.hut.soberit.agilefant.web", 215, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [363, "fi.hut.soberit.agilefant.web", 215, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [364, "fi.hut.soberit.agilefant.web", 88, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [364, "fi.hut.soberit.agilefant.web", 88, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [365, "fi.hut.soberit.agilefant.web", 76, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [365, "fi.hut.soberit.agilefant.web", 81, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [366, "fi.hut.soberit.agilefant.web", 58, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [366, "fi.hut.soberit.agilefant.web", 58, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [367, "fi.hut.soberit.agilefant.web", 72, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [368, "fi.hut.soberit.agilefant.web", 4, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [368, "fi.hut.soberit.agilefant.web", 58, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [368, "fi.hut.soberit.agilefant.web", 76, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [368, "fi.hut.soberit.agilefant.web", 81, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [368, "fi.hut.soberit.agilefant.web", 88, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [368, "fi.hut.soberit.agilefant.web", 3, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [369, "fi.hut.soberit.agilefant.web", 73, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [369, "fi.hut.soberit.agilefant.web", 73, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [370, "fi.hut.soberit.agilefant.web", 73, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [370, "fi.hut.soberit.agilefant.web", 73, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [371, "fi.hut.soberit.agilefant.web", 13, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [371, "fi.hut.soberit.agilefant.web", 13, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [372, "fi.hut.soberit.agilefant.web", 74, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [373, "fi.hut.soberit.agilefant.web", 76, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [373, "fi.hut.soberit.agilefant.web", 79, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [373, "fi.hut.soberit.agilefant.web", 4, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [373, "fi.hut.soberit.agilefant.web", 76, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [373, "fi.hut.soberit.agilefant.web", 4, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [374, "fi.hut.soberit.agilefant.web", 76, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [374, "fi.hut.soberit.agilefant.web", 78, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [374, "fi.hut.soberit.agilefant.web", 76, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [374, "fi.hut.soberit.agilefant.web", 78, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [375, "fi.hut.soberit.agilefant.web", 69, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [375, "fi.hut.soberit.agilefant.web", 79, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [376, "fi.hut.soberit.agilefant.web", 80, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [376, "fi.hut.soberit.agilefant.web", 76, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [376, "fi.hut.soberit.agilefant.web", 4, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [376, "fi.hut.soberit.agilefant.web", 58, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [376, "fi.hut.soberit.agilefant.web", 80, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [378, "fi.hut.soberit.agilefant.web.tag", 4, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [379, "fi.hut.soberit.agilefant.web.tag", 67, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [379, "fi.hut.soberit.agilefant.web.tag", 69, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [379, "fi.hut.soberit.agilefant.web.tag", 58, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [383, "fi.hut.soberit.agilefant.web", 81, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [383, "fi.hut.soberit.agilefant.web", 87, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [383, "fi.hut.soberit.agilefant.web", 78, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [383, "fi.hut.soberit.agilefant.web", 81, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [383, "fi.hut.soberit.agilefant.web", 87, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [384, "fi.hut.soberit.agilefant.web", 81, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [384, "fi.hut.soberit.agilefant.web", 82, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [384, "fi.hut.soberit.agilefant.web", 81, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [384, "fi.hut.soberit.agilefant.web", 82, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [385, "fi.hut.soberit.agilefant.web", 83, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [385, "fi.hut.soberit.agilefant.web", 88, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [385, "fi.hut.soberit.agilefant.web", 83, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [386, "fi.hut.soberit.agilefant.web", 85, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [386, "fi.hut.soberit.agilefant.web", 86, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [386, "fi.hut.soberit.agilefant.web", 88, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [386, "fi.hut.soberit.agilefant.web", 4, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [386, "fi.hut.soberit.agilefant.web", 67, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [386, "fi.hut.soberit.agilefant.web", 3, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [386, "fi.hut.soberit.agilefant.web", 85, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [386, "fi.hut.soberit.agilefant.web", 67, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [386, "fi.hut.soberit.agilefant.web", 4, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [386, "fi.hut.soberit.agilefant.web", 88, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [386, "fi.hut.soberit.agilefant.web", 86, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [387, "fi.hut.soberit.agilefant.web", 88, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [387, "fi.hut.soberit.agilefant.web", 83, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [387, "fi.hut.soberit.agilefant.web", 88, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [388, "fi.hut.soberit.agilefant.web", 65, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [388, "fi.hut.soberit.agilefant.web", 88, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [388, "fi.hut.soberit.agilefant.web", 65, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [388, "fi.hut.soberit.agilefant.web", 88, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [389, "fi.hut.soberit.agilefant.web", 1, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [391, "fi.hut.soberit.agilefant.web.widgets", 58, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [391, "fi.hut.soberit.agilefant.web.widgets", 3, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [392, "fi.hut.soberit.agilefant.web.widgets", 69, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [392, "fi.hut.soberit.agilefant.web.widgets", 3, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [393, "fi.hut.soberit.agilefant.web.widgets", 76, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [393, "fi.hut.soberit.agilefant.web.widgets", 3, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [394, "fi.hut.soberit.agilefant.web.widgets", 88, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [394, "fi.hut.soberit.agilefant.web.widgets", 3, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [395, "fi.hut.soberit.agilefant.business", 105, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [395, "fi.hut.soberit.agilefant.business", 89, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [396, "fi.hut.soberit.agilefant.business", 88, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [396, "fi.hut.soberit.agilefant.business", 106, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [397, "fi.hut.soberit.agilefant.business", 107, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [397, "fi.hut.soberit.agilefant.business", 163, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [397, "fi.hut.soberit.agilefant.business", 167, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [397, "fi.hut.soberit.agilefant.business", 76, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [397, "fi.hut.soberit.agilefant.business", 148, "fi.hut.soberit.agilefant.db.history"]}, {"py/tuple": [397, "fi.hut.soberit.agilefant.business", 2, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [398, "fi.hut.soberit.agilefant.business", 108, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [398, "fi.hut.soberit.agilefant.business", 168, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [398, "fi.hut.soberit.agilefant.business", 107, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [399, "fi.hut.soberit.agilefant.business", 171, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [399, "fi.hut.soberit.agilefant.business", 175, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [399, "fi.hut.soberit.agilefant.business", 70, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [399, "fi.hut.soberit.agilefant.business", 81, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [399, "fi.hut.soberit.agilefant.business", 87, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [399, "fi.hut.soberit.agilefant.business", 170, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [399, "fi.hut.soberit.agilefant.business", 167, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [400, "fi.hut.soberit.agilefant.business", 157, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [401, "fi.hut.soberit.agilefant.business", 109, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [401, "fi.hut.soberit.agilefant.business", 158, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [401, "fi.hut.soberit.agilefant.business", 76, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [401, "fi.hut.soberit.agilefant.business", 88, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [401, "fi.hut.soberit.agilefant.business", 81, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [401, "fi.hut.soberit.agilefant.business", 4, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [403, "fi.hut.soberit.agilefant.business.impl", 4, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [404, "fi.hut.soberit.agilefant.business", 83, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [404, "fi.hut.soberit.agilefant.business", 159, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [404, "fi.hut.soberit.agilefant.business", 87, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [404, "fi.hut.soberit.agilefant.business", 76, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [404, "fi.hut.soberit.agilefant.business", 13, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [404, "fi.hut.soberit.agilefant.business", 5, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [404, "fi.hut.soberit.agilefant.business", 59, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [404, "fi.hut.soberit.agilefant.business", 160, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [404, "fi.hut.soberit.agilefant.business", 4, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [404, "fi.hut.soberit.agilefant.business", 2, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [404, "fi.hut.soberit.agilefant.business", 73, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [404, "fi.hut.soberit.agilefant.business", 79, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [404, "fi.hut.soberit.agilefant.business", 81, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [404, "fi.hut.soberit.agilefant.business", 148, "fi.hut.soberit.agilefant.db.history"]}, {"py/tuple": [404, "fi.hut.soberit.agilefant.business", 155, "fi.hut.soberit.agilefant.db.history"]}, {"py/tuple": [404, "fi.hut.soberit.agilefant.business", 156, "fi.hut.soberit.agilefant.db.history"]}, {"py/tuple": [405, "fi.hut.soberit.agilefant.business", 59, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [405, "fi.hut.soberit.agilefant.business", 13, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [405, "fi.hut.soberit.agilefant.business", 58, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [405, "fi.hut.soberit.agilefant.business", 73, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [406, "fi.hut.soberit.agilefant.business", 87, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [406, "fi.hut.soberit.agilefant.business", 76, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [406, "fi.hut.soberit.agilefant.business", 13, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [406, "fi.hut.soberit.agilefant.business", 159, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [406, "fi.hut.soberit.agilefant.business", 160, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [406, "fi.hut.soberit.agilefant.business", 59, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [406, "fi.hut.soberit.agilefant.business", 4, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [406, "fi.hut.soberit.agilefant.business", 2, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [406, "fi.hut.soberit.agilefant.business", 5, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [406, "fi.hut.soberit.agilefant.business", 79, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [406, "fi.hut.soberit.agilefant.business", 81, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [406, "fi.hut.soberit.agilefant.business", 155, "fi.hut.soberit.agilefant.db.history"]}, {"py/tuple": [406, "fi.hut.soberit.agilefant.business", 148, "fi.hut.soberit.agilefant.db.history"]}, {"py/tuple": [406, "fi.hut.soberit.agilefant.business", 83, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [406, "fi.hut.soberit.agilefant.business", 156, "fi.hut.soberit.agilefant.db.history"]}, {"py/tuple": [407, "fi.hut.soberit.agilefant.business", 160, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [407, "fi.hut.soberit.agilefant.business", 159, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [408, "fi.hut.soberit.agilefant.business", 161, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [408, "fi.hut.soberit.agilefant.business", 76, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [409, "fi.hut.soberit.agilefant.business", 67, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [409, "fi.hut.soberit.agilefant.business", 58, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [409, "fi.hut.soberit.agilefant.business", 164, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [409, "fi.hut.soberit.agilefant.business", 159, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [409, "fi.hut.soberit.agilefant.business", 167, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [409, "fi.hut.soberit.agilefant.business", 87, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [409, "fi.hut.soberit.agilefant.business", 88, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [409, "fi.hut.soberit.agilefant.business", 3, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [410, "fi.hut.soberit.agilefant.business", 88, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [410, "fi.hut.soberit.agilefant.business", 171, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [410, "fi.hut.soberit.agilefant.business", 167, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [410, "fi.hut.soberit.agilefant.business", 159, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [410, "fi.hut.soberit.agilefant.business", 106, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [410, "fi.hut.soberit.agilefant.business", 73, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [411, "fi.hut.soberit.agilefant.business", 73, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [411, "fi.hut.soberit.agilefant.business", 164, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [411, "fi.hut.soberit.agilefant.business", 3, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [412, "fi.hut.soberit.agilefant.business", 163, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [412, "fi.hut.soberit.agilefant.business", 76, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [412, "fi.hut.soberit.agilefant.business", 58, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [412, "fi.hut.soberit.agilefant.business", 69, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [412, "fi.hut.soberit.agilefant.business", 13, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [412, "fi.hut.soberit.agilefant.business", 87, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [412, "fi.hut.soberit.agilefant.business", 83, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [412, "fi.hut.soberit.agilefant.business", 3, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [414, "fi.hut.soberit.agilefant.business", 73, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [414, "fi.hut.soberit.agilefant.business", 164, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [417, "fi.hut.soberit.agilefant.business", 164, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [417, "fi.hut.soberit.agilefant.business", 107, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [417, "fi.hut.soberit.agilefant.business", 67, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [417, "fi.hut.soberit.agilefant.business", 87, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [417, "fi.hut.soberit.agilefant.business", 73, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [417, "fi.hut.soberit.agilefant.business", 70, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [417, "fi.hut.soberit.agilefant.business", 2, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [417, "fi.hut.soberit.agilefant.business", 5, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [417, "fi.hut.soberit.agilefant.business", 58, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [417, "fi.hut.soberit.agilefant.business", 76, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [417, "fi.hut.soberit.agilefant.business", 13, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [417, "fi.hut.soberit.agilefant.business", 79, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [417, "fi.hut.soberit.agilefant.business", 77, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [417, "fi.hut.soberit.agilefant.business", 4, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [418, "fi.hut.soberit.agilefant.business", 220, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [418, "fi.hut.soberit.agilefant.business", 220, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [418, "fi.hut.soberit.agilefant.business", 220, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [418, "fi.hut.soberit.agilefant.business", 220, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [419, "fi.hut.soberit.agilefant.business", 167, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [419, "fi.hut.soberit.agilefant.business", 107, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [419, "fi.hut.soberit.agilefant.business", 171, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [419, "fi.hut.soberit.agilefant.business", 174, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [419, "fi.hut.soberit.agilefant.business", 3, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [420, "fi.hut.soberit.agilefant.business", 165, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [422, "fi.hut.soberit.agilefant.business", 60, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [422, "fi.hut.soberit.agilefant.business", 76, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [423, "fi.hut.soberit.agilefant.business", 59, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [423, "fi.hut.soberit.agilefant.business", 5, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [423, "fi.hut.soberit.agilefant.business", 167, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [423, "fi.hut.soberit.agilefant.business", 4, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [423, "fi.hut.soberit.agilefant.business", 159, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [423, "fi.hut.soberit.agilefant.business", 174, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [423, "fi.hut.soberit.agilefant.business", 158, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [423, "fi.hut.soberit.agilefant.business", 58, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [423, "fi.hut.soberit.agilefant.business", 69, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [423, "fi.hut.soberit.agilefant.business", 155, "fi.hut.soberit.agilefant.db.history"]}, {"py/tuple": [423, "fi.hut.soberit.agilefant.business", 79, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [423, "fi.hut.soberit.agilefant.business", 87, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [423, "fi.hut.soberit.agilefant.business", 13, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [423, "fi.hut.soberit.agilefant.business", 81, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [423, "fi.hut.soberit.agilefant.business", 78, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [423, "fi.hut.soberit.agilefant.business", 60, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [423, "fi.hut.soberit.agilefant.business", 80, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [424, "fi.hut.soberit.agilefant.business", 167, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [424, "fi.hut.soberit.agilefant.business", 159, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [424, "fi.hut.soberit.agilefant.business", 174, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [424, "fi.hut.soberit.agilefant.business", 59, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [424, "fi.hut.soberit.agilefant.business", 4, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [424, "fi.hut.soberit.agilefant.business", 5, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [424, "fi.hut.soberit.agilefant.business", 59, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [424, "fi.hut.soberit.agilefant.business", 79, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [424, "fi.hut.soberit.agilefant.business", 87, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [424, "fi.hut.soberit.agilefant.business", 158, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [424, "fi.hut.soberit.agilefant.business", 81, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [424, "fi.hut.soberit.agilefant.business", 13, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [424, "fi.hut.soberit.agilefant.business", 78, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [426, "fi.hut.soberit.agilefant.business", 168, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [426, "fi.hut.soberit.agilefant.business", 76, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [426, "fi.hut.soberit.agilefant.business", 4, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [426, "fi.hut.soberit.agilefant.business", 77, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [426, "fi.hut.soberit.agilefant.business", 80, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [427, "fi.hut.soberit.agilefant.business", 170, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [428, "fi.hut.soberit.agilefant.business", 4, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [429, "fi.hut.soberit.agilefant.business", 58, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [429, "fi.hut.soberit.agilefant.business", 59, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [429, "fi.hut.soberit.agilefant.business", 13, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [429, "fi.hut.soberit.agilefant.business", 76, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [429, "fi.hut.soberit.agilefant.business", 171, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [429, "fi.hut.soberit.agilefant.business", 6, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [430, "fi.hut.soberit.agilefant.business", 81, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [431, "fi.hut.soberit.agilefant.business", 173, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [431, "fi.hut.soberit.agilefant.business", 88, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [432, "fi.hut.soberit.agilefant.business", 158, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [432, "fi.hut.soberit.agilefant.business", 85, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [432, "fi.hut.soberit.agilefant.business", 85, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [432, "fi.hut.soberit.agilefant.business", 85, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [432, "fi.hut.soberit.agilefant.business", 85, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [432, "fi.hut.soberit.agilefant.business", 85, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [432, "fi.hut.soberit.agilefant.business", 85, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [434, "fi.hut.soberit.agilefant.business", 158, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [434, "fi.hut.soberit.agilefant.business", 158, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [435, "fi.hut.soberit.agilefant.business", 13, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [435, "fi.hut.soberit.agilefant.business", 88, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [435, "fi.hut.soberit.agilefant.business", 83, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [435, "fi.hut.soberit.agilefant.business", 4, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [435, "fi.hut.soberit.agilefant.business", 67, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [435, "fi.hut.soberit.agilefant.business", 69, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [435, "fi.hut.soberit.agilefant.business", 58, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [435, "fi.hut.soberit.agilefant.business", 3, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [435, "fi.hut.soberit.agilefant.business", 76, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [436, "fi.hut.soberit.agilefant.business", 174, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [436, "fi.hut.soberit.agilefant.business", 83, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [437, "fi.hut.soberit.agilefant.business", 177, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [437, "fi.hut.soberit.agilefant.business", 1, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [438, "fi.hut.soberit.agilefant.db", 106, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [439, "fi.hut.soberit.agilefant.db", 107, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [440, "fi.hut.soberit.agilefant.db", 108, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [441, "fi.hut.soberit.agilefant.db", 109, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [442, "fi.hut.soberit.agilefant.db", 468, "fi.hut.soberit.agilefant.test"]}, {"py/tuple": [443, "fi.hut.soberit.agilefant.db.history", 148, "fi.hut.soberit.agilefant.db.history"]}, {"py/tuple": [444, "fi.hut.soberit.agilefant.db.history", 155, "fi.hut.soberit.agilefant.db.history"]}, {"py/tuple": [446, "fi.hut.soberit.agilefant.db", 158, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [447, "fi.hut.soberit.agilefant.db", 159, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [448, "fi.hut.soberit.agilefant.db", 160, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [449, "fi.hut.soberit.agilefant.db", 161, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [450, "fi.hut.soberit.agilefant.db", 163, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [451, "fi.hut.soberit.agilefant.db", 164, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [452, "fi.hut.soberit.agilefant.db", 165, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [453, "fi.hut.soberit.agilefant.db", 167, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [454, "fi.hut.soberit.agilefant.db", 168, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [455, "fi.hut.soberit.agilefant.db", 170, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [456, "fi.hut.soberit.agilefant.db", 171, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [457, "fi.hut.soberit.agilefant.db", 172, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [458, "fi.hut.soberit.agilefant.db", 174, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [459, "fi.hut.soberit.agilefant.db", 175, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [460, "fi.hut.soberit.agilefant.db", 177, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [472, "fi.hut.soberit.agilefant.util", 4, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [487, "fi.hut.soberit.agilefant.util", 88, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [489, "fi.hut.soberit.agilefant.web", 2, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [490, "fi.hut.soberit.agilefant.web", 87, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [491, "fi.hut.soberit.agilefant.web", 4, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [492, "fi.hut.soberit.agilefant.web", 57, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [492, "fi.hut.soberit.agilefant.web", 58, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [493, "fi.hut.soberit.agilefant.web", 6, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [493, "fi.hut.soberit.agilefant.web", 88, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [493, "fi.hut.soberit.agilefant.web", 81, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [493, "fi.hut.soberit.agilefant.web", 87, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [494, "fi.hut.soberit.agilefant.web", 88, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [494, "fi.hut.soberit.agilefant.web", 12, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [495, "fi.hut.soberit.agilefant.web", 13, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [496, "fi.hut.soberit.agilefant.web", 58, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [496, "fi.hut.soberit.agilefant.web", 76, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [497, "fi.hut.soberit.agilefant.web", 58, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [498, "fi.hut.soberit.agilefant.web", 76, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [498, "fi.hut.soberit.agilefant.web", 60, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [498, "fi.hut.soberit.agilefant.web", 4, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [499, "fi.hut.soberit.agilefant.web", 73, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [499, "fi.hut.soberit.agilefant.web", 4, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [499, "fi.hut.soberit.agilefant.web", 88, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [499, "fi.hut.soberit.agilefant.web", 61, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [500, "fi.hut.soberit.agilefant.web", 62, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [501, "fi.hut.soberit.agilefant.web", 75, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [502, "fi.hut.soberit.agilefant.web", 88, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [502, "fi.hut.soberit.agilefant.web", 64, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [503, "fi.hut.soberit.agilefant.web", 1, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [503, "fi.hut.soberit.agilefant.web", 89, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [507, "fi.hut.soberit.agilefant.web", 67, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [507, "fi.hut.soberit.agilefant.web", 76, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [508, "fi.hut.soberit.agilefant.web", 69, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [508, "fi.hut.soberit.agilefant.web", 76, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [509, "fi.hut.soberit.agilefant.web", 66, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [509, "fi.hut.soberit.agilefant.web", 89, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [510, "fi.hut.soberit.agilefant.web", 76, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [510, "fi.hut.soberit.agilefant.web", 81, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [511, "fi.hut.soberit.agilefant.web", 72, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [513, "fi.hut.soberit.agilefant.web", 73, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [514, "fi.hut.soberit.agilefant.web", 13, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [515, "fi.hut.soberit.agilefant.web", 76, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [515, "fi.hut.soberit.agilefant.web", 60, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [515, "fi.hut.soberit.agilefant.web", 4, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [515, "fi.hut.soberit.agilefant.web", 79, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [516, "fi.hut.soberit.agilefant.web", 76, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [516, "fi.hut.soberit.agilefant.web", 78, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [517, "fi.hut.soberit.agilefant.web", 80, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [517, "fi.hut.soberit.agilefant.web", 76, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [517, "fi.hut.soberit.agilefant.web", 4, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [517, "fi.hut.soberit.agilefant.web", 58, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [518, "fi.hut.soberit.agilefant.web", 81, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [518, "fi.hut.soberit.agilefant.web", 87, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [518, "fi.hut.soberit.agilefant.web", 78, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [519, "fi.hut.soberit.agilefant.web", 81, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [519, "fi.hut.soberit.agilefant.web", 82, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [520, "fi.hut.soberit.agilefant.web", 83, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [521, "fi.hut.soberit.agilefant.web", 85, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [521, "fi.hut.soberit.agilefant.web", 67, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [521, "fi.hut.soberit.agilefant.web", 88, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [522, "fi.hut.soberit.agilefant.web", 88, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [523, "fi.hut.soberit.agilefant.web", 88, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [523, "fi.hut.soberit.agilefant.web", 65, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [524, "fi.hut.soberit.agilefant.web", 1, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [7, "fi.hut.soberit.agilefant.business", 200, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [7, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [7, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [7, "fi.hut.soberit.agilefant.business", 219, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [7, "fi.hut.soberit.agilefant.business", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [7, "fi.hut.soberit.agilefant.business", 200, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [7, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [7, "fi.hut.soberit.agilefant.business", 200, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [7, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [7, "fi.hut.soberit.agilefant.business", 200, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [7, "fi.hut.soberit.agilefant.business", 219, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [7, "fi.hut.soberit.agilefant.business", 200, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [7, "fi.hut.soberit.agilefant.business", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [1, "fi.hut.soberit.agilefant.business", 200, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [1, "fi.hut.soberit.agilefant.business", 237, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [2, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [2, "fi.hut.soberit.agilefant.business", 223, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [2, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [3, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [4, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [4, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [4, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [4, "fi.hut.soberit.agilefant.business", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [4, "fi.hut.soberit.agilefant.business", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [4, "fi.hut.soberit.agilefant.business", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [4, "fi.hut.soberit.agilefant.business", 221, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [4, "fi.hut.soberit.agilefant.business", 221, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [4, "fi.hut.soberit.agilefant.business", 221, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [4, "fi.hut.soberit.agilefant.business", 221, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [4, "fi.hut.soberit.agilefant.business", 221, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [4, "fi.hut.soberit.agilefant.business", 221, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 87, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 87, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 171, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 171, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 175, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 175, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 176, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 176, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 81, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 81, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 70, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 70, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 167, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 167, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [7, "fi.hut.soberit.agilefant.business", 8, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [13, "fi.hut.soberit.agilefant.business", 209, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [13, "fi.hut.soberit.agilefant.business", 209, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [13, "fi.hut.soberit.agilefant.business", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [13, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [13, "fi.hut.soberit.agilefant.business", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [13, "fi.hut.soberit.agilefant.business", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [13, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [13, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [36, "fi.hut.soberit.agilefant.business.impl", 282, "fi.hut.soberit.agilefant.transfer"]}, {"py/tuple": [36, "fi.hut.soberit.agilefant.business.impl", 282, "fi.hut.soberit.agilefant.transfer"]}, {"py/tuple": [57, "fi.hut.soberit.agilefant.business", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [57, "fi.hut.soberit.agilefant.business", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [58, "fi.hut.soberit.agilefant.business", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [58, "fi.hut.soberit.agilefant.business", 211, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [58, "fi.hut.soberit.agilefant.business", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [58, "fi.hut.soberit.agilefant.business", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [58, "fi.hut.soberit.agilefant.business", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [58, "fi.hut.soberit.agilefant.business", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [58, "fi.hut.soberit.agilefant.business", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [58, "fi.hut.soberit.agilefant.business", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [58, "fi.hut.soberit.agilefant.business", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [58, "fi.hut.soberit.agilefant.business", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [59, "fi.hut.soberit.agilefant.business", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [59, "fi.hut.soberit.agilefant.business", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [59, "fi.hut.soberit.agilefant.business", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [59, "fi.hut.soberit.agilefant.business", 206, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [59, "fi.hut.soberit.agilefant.business", 206, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [61, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [62, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [63, "fi.hut.soberit.agilefant.business", 217, "fi.hut.soberit.agilefant.model.notification"]}, {"py/tuple": [65, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [67, "fi.hut.soberit.agilefant.business", 218, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [67, "fi.hut.soberit.agilefant.business", 218, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [67, "fi.hut.soberit.agilefant.business", 218, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [67, "fi.hut.soberit.agilefant.business", 218, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [67, "fi.hut.soberit.agilefant.business", 218, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [68, "fi.hut.soberit.agilefant.business", 219, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [69, "fi.hut.soberit.agilefant.business", 219, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [69, "fi.hut.soberit.agilefant.business", 219, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [69, "fi.hut.soberit.agilefant.business", 219, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [69, "fi.hut.soberit.agilefant.business", 219, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [69, "fi.hut.soberit.agilefant.business", 219, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [69, "fi.hut.soberit.agilefant.business", 219, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [69, "fi.hut.soberit.agilefant.business", 315, "fi.hut.soberit.agilefant.util"]}, {"py/tuple": [70, "fi.hut.soberit.agilefant.business", 220, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [70, "fi.hut.soberit.agilefant.business", 220, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [70, "fi.hut.soberit.agilefant.business", 220, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [70, "fi.hut.soberit.agilefant.business", 220, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [70, "fi.hut.soberit.agilefant.business", 71, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [70, "fi.hut.soberit.agilefant.business", 71, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [74, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [74, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [77, "fi.hut.soberit.agilefant.business", 315, "fi.hut.soberit.agilefant.util"]}, {"py/tuple": [78, "fi.hut.soberit.agilefant.business", 219, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [78, "fi.hut.soberit.agilefant.business", 315, "fi.hut.soberit.agilefant.util"]}, {"py/tuple": [78, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [78, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [78, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [78, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [78, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [78, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [78, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [78, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [78, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [78, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [78, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [79, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [79, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [79, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [79, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [79, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [79, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [79, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [79, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [79, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [79, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [79, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [79, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [79, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [79, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [79, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [79, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [79, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [79, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [80, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [80, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [80, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [80, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [80, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [80, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [80, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [80, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [80, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [81, "fi.hut.soberit.agilefant.business", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [81, "fi.hut.soberit.agilefant.business", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [81, "fi.hut.soberit.agilefant.business", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [81, "fi.hut.soberit.agilefant.business", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [81, "fi.hut.soberit.agilefant.business", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [81, "fi.hut.soberit.agilefant.business", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [81, "fi.hut.soberit.agilefant.business", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [81, "fi.hut.soberit.agilefant.business", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [81, "fi.hut.soberit.agilefant.business", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [81, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [81, "fi.hut.soberit.agilefant.business", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [85, "fi.hut.soberit.agilefant.business", 319, "fi.hut.soberit.agilefant.util"]}, {"py/tuple": [87, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [87, "fi.hut.soberit.agilefant.business", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [87, "fi.hut.soberit.agilefant.business", 219, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [87, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [87, "fi.hut.soberit.agilefant.business", 235, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [87, "fi.hut.soberit.agilefant.business", 236, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [88, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [88, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [89, "fi.hut.soberit.agilefant.business", 237, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [89, "fi.hut.soberit.agilefant.business", 200, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [89, "fi.hut.soberit.agilefant.business", 237, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [89, "fi.hut.soberit.agilefant.business", 200, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [107, "fi.hut.soberit.agilefant.db", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [148, "fi.hut.soberit.agilefant.db.history", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [148, "fi.hut.soberit.agilefant.db.history", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [155, "fi.hut.soberit.agilefant.db.history", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [158, "fi.hut.soberit.agilefant.db", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [159, "fi.hut.soberit.agilefant.db", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [159, "fi.hut.soberit.agilefant.db", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [159, "fi.hut.soberit.agilefant.db", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [159, "fi.hut.soberit.agilefant.db", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [159, "fi.hut.soberit.agilefant.db", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [159, "fi.hut.soberit.agilefant.db", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [162, "fi.hut.soberit.agilefant.db", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [163, "fi.hut.soberit.agilefant.db", 218, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [163, "fi.hut.soberit.agilefant.db", 218, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [164, "fi.hut.soberit.agilefant.db", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [167, "fi.hut.soberit.agilefant.db", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [167, "fi.hut.soberit.agilefant.db", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [167, "fi.hut.soberit.agilefant.db", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [168, "fi.hut.soberit.agilefant.db", 219, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [168, "fi.hut.soberit.agilefant.db", 219, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [168, "fi.hut.soberit.agilefant.db", 219, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [168, "fi.hut.soberit.agilefant.db", 219, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [168, "fi.hut.soberit.agilefant.db", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [168, "fi.hut.soberit.agilefant.db", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [168, "fi.hut.soberit.agilefant.db", 219, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [170, "fi.hut.soberit.agilefant.db", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [171, "fi.hut.soberit.agilefant.db", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [171, "fi.hut.soberit.agilefant.db", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [171, "fi.hut.soberit.agilefant.db", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [171, "fi.hut.soberit.agilefant.db", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [171, "fi.hut.soberit.agilefant.db", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [171, "fi.hut.soberit.agilefant.db", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [171, "fi.hut.soberit.agilefant.db", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [171, "fi.hut.soberit.agilefant.db", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [171, "fi.hut.soberit.agilefant.db", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [171, "fi.hut.soberit.agilefant.db", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [171, "fi.hut.soberit.agilefant.db", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [171, "fi.hut.soberit.agilefant.db", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [175, "fi.hut.soberit.agilefant.db", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [175, "fi.hut.soberit.agilefant.db", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [175, "fi.hut.soberit.agilefant.db", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [175, "fi.hut.soberit.agilefant.db", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [175, "fi.hut.soberit.agilefant.db", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [176, "fi.hut.soberit.agilefant.db", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [176, "fi.hut.soberit.agilefant.db", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [176, "fi.hut.soberit.agilefant.db", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [176, "fi.hut.soberit.agilefant.db", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [176, "fi.hut.soberit.agilefant.db", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [1, "fi.hut.soberit.agilefant.business", 200, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [1, "fi.hut.soberit.agilefant.business", 237, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [2, "fi.hut.soberit.agilefant.business", 223, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [2, "fi.hut.soberit.agilefant.business", 223, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [2, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [2, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [3, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [3, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [4, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [4, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [4, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [4, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [4, "fi.hut.soberit.agilefant.business", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [4, "fi.hut.soberit.agilefant.business", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [4, "fi.hut.soberit.agilefant.business", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [4, "fi.hut.soberit.agilefant.business", 221, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [4, "fi.hut.soberit.agilefant.business", 221, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [4, "fi.hut.soberit.agilefant.business", 221, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [4, "fi.hut.soberit.agilefant.business", 221, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [4, "fi.hut.soberit.agilefant.business", 221, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [4, "fi.hut.soberit.agilefant.business", 221, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 87, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 87, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 171, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 171, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 175, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 175, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 176, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 176, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 81, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 81, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 70, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 70, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 167, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [6, "fi.hut.soberit.agilefant.business", 167, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [7, "fi.hut.soberit.agilefant.business", 8, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [12, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [13, "fi.hut.soberit.agilefant.business", 209, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [13, "fi.hut.soberit.agilefant.business", 209, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [13, "fi.hut.soberit.agilefant.business", 209, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [13, "fi.hut.soberit.agilefant.business", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [13, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [13, "fi.hut.soberit.agilefant.business", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [13, "fi.hut.soberit.agilefant.business", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [13, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [13, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [14, "fi.hut.soberit.agilefant.business.impl", 105, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [15, "fi.hut.soberit.agilefant.business.impl", 106, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [15, "fi.hut.soberit.agilefant.business.impl", 88, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [17, "fi.hut.soberit.agilefant.business.impl", 107, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [17, "fi.hut.soberit.agilefant.business.impl", 221, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [17, "fi.hut.soberit.agilefant.business.impl", 221, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [17, "fi.hut.soberit.agilefant.business.impl", 221, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [18, "fi.hut.soberit.agilefant.business.impl", 108, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [18, "fi.hut.soberit.agilefant.business.impl", 168, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [18, "fi.hut.soberit.agilefant.business.impl", 107, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [19, "fi.hut.soberit.agilefant.business.impl", 171, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [19, "fi.hut.soberit.agilefant.business.impl", 167, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [19, "fi.hut.soberit.agilefant.business.impl", 175, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [19, "fi.hut.soberit.agilefant.business.impl", 176, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [19, "fi.hut.soberit.agilefant.business.impl", 70, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [19, "fi.hut.soberit.agilefant.business.impl", 81, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [19, "fi.hut.soberit.agilefant.business.impl", 76, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [19, "fi.hut.soberit.agilefant.business.impl", 87, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [19, "fi.hut.soberit.agilefant.business.impl", 170, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [24, "fi.hut.soberit.agilefant.business.impl", 157, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [25, "fi.hut.soberit.agilefant.business.impl", 158, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [25, "fi.hut.soberit.agilefant.business.impl", 109, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [25, "fi.hut.soberit.agilefant.business.impl", 76, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [25, "fi.hut.soberit.agilefant.business.impl", 88, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [25, "fi.hut.soberit.agilefant.business.impl", 81, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [25, "fi.hut.soberit.agilefant.business.impl", 4, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [26, "fi.hut.soberit.agilefant.business.impl", 59, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [26, "fi.hut.soberit.agilefant.business.impl", 13, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [26, "fi.hut.soberit.agilefant.business.impl", 58, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [26, "fi.hut.soberit.agilefant.business.impl", 73, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [27, "fi.hut.soberit.agilefant.business.impl", 159, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [28, "fi.hut.soberit.agilefant.business.impl", 160, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [28, "fi.hut.soberit.agilefant.business.impl", 159, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [29, "fi.hut.soberit.agilefant.business.impl", 161, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [30, "fi.hut.soberit.agilefant.business.impl", 162, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [31, "fi.hut.soberit.agilefant.business.impl", 67, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [31, "fi.hut.soberit.agilefant.business.impl", 58, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [31, "fi.hut.soberit.agilefant.business.impl", 87, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [31, "fi.hut.soberit.agilefant.business.impl", 159, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [31, "fi.hut.soberit.agilefant.business.impl", 164, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [31, "fi.hut.soberit.agilefant.business.impl", 167, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [31, "fi.hut.soberit.agilefant.business.impl", 88, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [31, "fi.hut.soberit.agilefant.business.impl", 3, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [33, "fi.hut.soberit.agilefant.business.impl", 174, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [34, "fi.hut.soberit.agilefant.business.impl", 171, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [34, "fi.hut.soberit.agilefant.business.impl", 167, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [34, "fi.hut.soberit.agilefant.business.impl", 88, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [34, "fi.hut.soberit.agilefant.business.impl", 159, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [34, "fi.hut.soberit.agilefant.business.impl", 106, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [34, "fi.hut.soberit.agilefant.business.impl", 73, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [35, "fi.hut.soberit.agilefant.business.impl", 164, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [35, "fi.hut.soberit.agilefant.business.impl", 73, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [36, "fi.hut.soberit.agilefant.business.impl", 163, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [36, "fi.hut.soberit.agilefant.business.impl", 282, "fi.hut.soberit.agilefant.transfer"]}, {"py/tuple": [36, "fi.hut.soberit.agilefant.business.impl", 282, "fi.hut.soberit.agilefant.transfer"]}, {"py/tuple": [36, "fi.hut.soberit.agilefant.business.impl", 273, "fi.hut.soberit.agilefant.transfer"]}, {"py/tuple": [38, "fi.hut.soberit.agilefant.business.impl", 73, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [38, "fi.hut.soberit.agilefant.business.impl", 70, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [38, "fi.hut.soberit.agilefant.business.impl", 164, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [38, "fi.hut.soberit.agilefant.business.impl", 2, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [38, "fi.hut.soberit.agilefant.business.impl", 76, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [38, "fi.hut.soberit.agilefant.business.impl", 13, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [38, "fi.hut.soberit.agilefant.business.impl", 58, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [38, "fi.hut.soberit.agilefant.business.impl", 5, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [38, "fi.hut.soberit.agilefant.business.impl", 79, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [39, "fi.hut.soberit.agilefant.business.impl", 220, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [39, "fi.hut.soberit.agilefant.business.impl", 220, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [39, "fi.hut.soberit.agilefant.business.impl", 220, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [39, "fi.hut.soberit.agilefant.business.impl", 220, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [39, "fi.hut.soberit.agilefant.business.impl", 220, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [39, "fi.hut.soberit.agilefant.business.impl", 220, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [39, "fi.hut.soberit.agilefant.business.impl", 220, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [39, "fi.hut.soberit.agilefant.business.impl", 220, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [39, "fi.hut.soberit.agilefant.business.impl", 220, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [39, "fi.hut.soberit.agilefant.business.impl", 220, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [39, "fi.hut.soberit.agilefant.business.impl", 220, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [39, "fi.hut.soberit.agilefant.business.impl", 220, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [39, "fi.hut.soberit.agilefant.business.impl", 71, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [41, "fi.hut.soberit.agilefant.business.impl", 165, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [44, "fi.hut.soberit.agilefant.business.impl", 167, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [44, "fi.hut.soberit.agilefant.business.impl", 174, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [44, "fi.hut.soberit.agilefant.business.impl", 159, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [44, "fi.hut.soberit.agilefant.business.impl", 5, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [44, "fi.hut.soberit.agilefant.business.impl", 59, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [44, "fi.hut.soberit.agilefant.business.impl", 158, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [44, "fi.hut.soberit.agilefant.business.impl", 4, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [44, "fi.hut.soberit.agilefant.business.impl", 87, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [44, "fi.hut.soberit.agilefant.business.impl", 13, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [44, "fi.hut.soberit.agilefant.business.impl", 81, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [44, "fi.hut.soberit.agilefant.business.impl", 79, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [44, "fi.hut.soberit.agilefant.business.impl", 78, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [47, "fi.hut.soberit.agilefant.business.impl", 170, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [49, "fi.hut.soberit.agilefant.business.impl", 171, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [49, "fi.hut.soberit.agilefant.business.impl", 58, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [49, "fi.hut.soberit.agilefant.business.impl", 76, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [49, "fi.hut.soberit.agilefant.business.impl", 59, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [49, "fi.hut.soberit.agilefant.business.impl", 70, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [49, "fi.hut.soberit.agilefant.business.impl", 6, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [49, "fi.hut.soberit.agilefant.business.impl", 13, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [50, "fi.hut.soberit.agilefant.business.impl", 81, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [51, "fi.hut.soberit.agilefant.business.impl", 173, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [51, "fi.hut.soberit.agilefant.business.impl", 88, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [51, "fi.hut.soberit.agilefant.business.impl", 84, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [52, "fi.hut.soberit.agilefant.business.impl", 158, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [53, "fi.hut.soberit.agilefant.business.impl", 158, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [54, "fi.hut.soberit.agilefant.business.impl", 13, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [54, "fi.hut.soberit.agilefant.business.impl", 88, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [54, "fi.hut.soberit.agilefant.business.impl", 83, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [54, "fi.hut.soberit.agilefant.business.impl", 4, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [54, "fi.hut.soberit.agilefant.business.impl", 58, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [54, "fi.hut.soberit.agilefant.business.impl", 67, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [54, "fi.hut.soberit.agilefant.business.impl", 69, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [54, "fi.hut.soberit.agilefant.business.impl", 76, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [54, "fi.hut.soberit.agilefant.business.impl", 3, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [55, "fi.hut.soberit.agilefant.business.impl", 174, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [55, "fi.hut.soberit.agilefant.business.impl", 83, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [56, "fi.hut.soberit.agilefant.business.impl", 177, "fi.hut.soberit.agilefant.db"]}, {"py/tuple": [57, "fi.hut.soberit.agilefant.business", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [57, "fi.hut.soberit.agilefant.business", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [57, "fi.hut.soberit.agilefant.business", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [58, "fi.hut.soberit.agilefant.business", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [58, "fi.hut.soberit.agilefant.business", 211, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [58, "fi.hut.soberit.agilefant.business", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [58, "fi.hut.soberit.agilefant.business", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [58, "fi.hut.soberit.agilefant.business", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [58, "fi.hut.soberit.agilefant.business", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [58, "fi.hut.soberit.agilefant.business", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [58, "fi.hut.soberit.agilefant.business", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [58, "fi.hut.soberit.agilefant.business", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [58, "fi.hut.soberit.agilefant.business", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [59, "fi.hut.soberit.agilefant.business", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [59, "fi.hut.soberit.agilefant.business", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [59, "fi.hut.soberit.agilefant.business", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [59, "fi.hut.soberit.agilefant.business", 206, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [59, "fi.hut.soberit.agilefant.business", 206, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [60, "fi.hut.soberit.agilefant.business", 212, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [61, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [61, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [62, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [63, "fi.hut.soberit.agilefant.business", 217, "fi.hut.soberit.agilefant.model.notification"]}, {"py/tuple": [63, "fi.hut.soberit.agilefant.business", 217, "fi.hut.soberit.agilefant.model.notification"]}, {"py/tuple": [65, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [65, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [67, "fi.hut.soberit.agilefant.business", 218, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [67, "fi.hut.soberit.agilefant.business", 218, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [67, "fi.hut.soberit.agilefant.business", 218, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [67, "fi.hut.soberit.agilefant.business", 218, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [67, "fi.hut.soberit.agilefant.business", 218, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [67, "fi.hut.soberit.agilefant.business", 218, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [68, "fi.hut.soberit.agilefant.business", 219, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [68, "fi.hut.soberit.agilefant.business", 219, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [69, "fi.hut.soberit.agilefant.business", 219, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [69, "fi.hut.soberit.agilefant.business", 219, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [69, "fi.hut.soberit.agilefant.business", 219, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [69, "fi.hut.soberit.agilefant.business", 219, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [69, "fi.hut.soberit.agilefant.business", 219, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [69, "fi.hut.soberit.agilefant.business", 219, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [69, "fi.hut.soberit.agilefant.business", 219, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [69, "fi.hut.soberit.agilefant.business", 315, "fi.hut.soberit.agilefant.util"]}, {"py/tuple": [70, "fi.hut.soberit.agilefant.business", 220, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [70, "fi.hut.soberit.agilefant.business", 220, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [70, "fi.hut.soberit.agilefant.business", 220, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [70, "fi.hut.soberit.agilefant.business", 220, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [70, "fi.hut.soberit.agilefant.business", 220, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [70, "fi.hut.soberit.agilefant.business", 220, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [70, "fi.hut.soberit.agilefant.business", 220, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [70, "fi.hut.soberit.agilefant.business", 220, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [70, "fi.hut.soberit.agilefant.business", 71, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [70, "fi.hut.soberit.agilefant.business", 71, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [74, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [74, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [74, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [76, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [77, "fi.hut.soberit.agilefant.business", 315, "fi.hut.soberit.agilefant.util"]}, {"py/tuple": [77, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [77, "fi.hut.soberit.agilefant.business", 315, "fi.hut.soberit.agilefant.util"]}, {"py/tuple": [77, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [78, "fi.hut.soberit.agilefant.business", 315, "fi.hut.soberit.agilefant.util"]}, {"py/tuple": [78, "fi.hut.soberit.agilefant.business", 219, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [78, "fi.hut.soberit.agilefant.business", 315, "fi.hut.soberit.agilefant.util"]}, {"py/tuple": [78, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [78, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [78, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [78, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [78, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [78, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [78, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [78, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [78, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [78, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [78, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [79, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [79, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [79, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [79, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [79, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [79, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [79, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [79, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [79, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [79, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [79, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [79, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [79, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [79, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [79, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [79, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [79, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [79, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [79, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [80, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [80, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [80, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [80, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [80, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [80, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [80, "fi.hut.soberit.agilefant.business", 317, "fi.hut.soberit.agilefant.util"]}, {"py/tuple": [80, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [80, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [80, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [80, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [80, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [81, "fi.hut.soberit.agilefant.business", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [81, "fi.hut.soberit.agilefant.business", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [81, "fi.hut.soberit.agilefant.business", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [81, "fi.hut.soberit.agilefant.business", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [81, "fi.hut.soberit.agilefant.business", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [81, "fi.hut.soberit.agilefant.business", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [81, "fi.hut.soberit.agilefant.business", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [81, "fi.hut.soberit.agilefant.business", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [81, "fi.hut.soberit.agilefant.business", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [81, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [81, "fi.hut.soberit.agilefant.business", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [81, "fi.hut.soberit.agilefant.business", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [82, "fi.hut.soberit.agilefant.business", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [82, "fi.hut.soberit.agilefant.business", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [83, "fi.hut.soberit.agilefant.business", 232, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [83, "fi.hut.soberit.agilefant.business", 232, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [83, "fi.hut.soberit.agilefant.business", 84, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [83, "fi.hut.soberit.agilefant.business", 84, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [85, "fi.hut.soberit.agilefant.business", 319, "fi.hut.soberit.agilefant.util"]}, {"py/tuple": [85, "fi.hut.soberit.agilefant.business", 262, "fi.hut.soberit.agilefant.transfer"]}, {"py/tuple": [87, "fi.hut.soberit.agilefant.business", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [87, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [87, "fi.hut.soberit.agilefant.business", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [87, "fi.hut.soberit.agilefant.business", 219, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [87, "fi.hut.soberit.agilefant.business", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [87, "fi.hut.soberit.agilefant.business", 235, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [87, "fi.hut.soberit.agilefant.business", 236, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [87, "fi.hut.soberit.agilefant.business", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [87, "fi.hut.soberit.agilefant.business", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [88, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [88, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [88, "fi.hut.soberit.agilefant.business", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [89, "fi.hut.soberit.agilefant.business", 237, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [89, "fi.hut.soberit.agilefant.business", 200, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [89, "fi.hut.soberit.agilefant.business", 237, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [89, "fi.hut.soberit.agilefant.business", 200, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [106, "fi.hut.soberit.agilefant.db", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [107, "fi.hut.soberit.agilefant.db", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [107, "fi.hut.soberit.agilefant.db", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [109, "fi.hut.soberit.agilefant.db", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [148, "fi.hut.soberit.agilefant.db.history", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [148, "fi.hut.soberit.agilefant.db.history", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [148, "fi.hut.soberit.agilefant.db.history", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [155, "fi.hut.soberit.agilefant.db.history", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [156, "fi.hut.soberit.agilefant.db.history", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [157, "fi.hut.soberit.agilefant.db", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [158, "fi.hut.soberit.agilefant.db", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [158, "fi.hut.soberit.agilefant.db", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [159, "fi.hut.soberit.agilefant.db", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [159, "fi.hut.soberit.agilefant.db", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [159, "fi.hut.soberit.agilefant.db", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [159, "fi.hut.soberit.agilefant.db", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [159, "fi.hut.soberit.agilefant.db", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [159, "fi.hut.soberit.agilefant.db", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [159, "fi.hut.soberit.agilefant.db", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [161, "fi.hut.soberit.agilefant.db", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [162, "fi.hut.soberit.agilefant.db", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [162, "fi.hut.soberit.agilefant.db", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [163, "fi.hut.soberit.agilefant.db", 218, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [163, "fi.hut.soberit.agilefant.db", 218, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [164, "fi.hut.soberit.agilefant.db", 219, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [164, "fi.hut.soberit.agilefant.db", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [166, "fi.hut.soberit.agilefant.db", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [167, "fi.hut.soberit.agilefant.db", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [167, "fi.hut.soberit.agilefant.db", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [167, "fi.hut.soberit.agilefant.db", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [168, "fi.hut.soberit.agilefant.db", 219, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [168, "fi.hut.soberit.agilefant.db", 219, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [168, "fi.hut.soberit.agilefant.db", 219, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [168, "fi.hut.soberit.agilefant.db", 219, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [168, "fi.hut.soberit.agilefant.db", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [168, "fi.hut.soberit.agilefant.db", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [168, "fi.hut.soberit.agilefant.db", 219, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [170, "fi.hut.soberit.agilefant.db", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [170, "fi.hut.soberit.agilefant.db", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [170, "fi.hut.soberit.agilefant.db", 202, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [170, "fi.hut.soberit.agilefant.db", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [170, "fi.hut.soberit.agilefant.db", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [171, "fi.hut.soberit.agilefant.db", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [171, "fi.hut.soberit.agilefant.db", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [171, "fi.hut.soberit.agilefant.db", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [171, "fi.hut.soberit.agilefant.db", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [171, "fi.hut.soberit.agilefant.db", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [171, "fi.hut.soberit.agilefant.db", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [171, "fi.hut.soberit.agilefant.db", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [171, "fi.hut.soberit.agilefant.db", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [171, "fi.hut.soberit.agilefant.db", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [171, "fi.hut.soberit.agilefant.db", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [171, "fi.hut.soberit.agilefant.db", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [171, "fi.hut.soberit.agilefant.db", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [171, "fi.hut.soberit.agilefant.db", 210, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [172, "fi.hut.soberit.agilefant.db", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [175, "fi.hut.soberit.agilefant.db", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [175, "fi.hut.soberit.agilefant.db", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [175, "fi.hut.soberit.agilefant.db", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [175, "fi.hut.soberit.agilefant.db", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [175, "fi.hut.soberit.agilefant.db", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [175, "fi.hut.soberit.agilefant.db", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [176, "fi.hut.soberit.agilefant.db", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [176, "fi.hut.soberit.agilefant.db", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [176, "fi.hut.soberit.agilefant.db", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [176, "fi.hut.soberit.agilefant.db", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [176, "fi.hut.soberit.agilefant.db", 234, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [176, "fi.hut.soberit.agilefant.db", 225, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [196, "fi.hut.soberit.agilefant.exportimport", 7, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [197, "fi.hut.soberit.agilefant.exportimport", 7, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [230, "fi.hut.soberit.agilefant.model", 229, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [248, "fi.hut.soberit.agilefant.security", 88, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [255, "fi.hut.soberit.agilefant.transfer", 215, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [255, "fi.hut.soberit.agilefant.transfer", 215, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [273, "fi.hut.soberit.agilefant.transfer", 286, "fi.hut.soberit.agilefant.transfer"]}, {"py/tuple": [283, "fi.hut.soberit.agilefant.transfer", 215, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [283, "fi.hut.soberit.agilefant.transfer", 215, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [296, "fi.hut.soberit.agilefant.util", 4, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [308, "fi.hut.soberit.agilefant.util", 215, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [308, "fi.hut.soberit.agilefant.util", 215, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [327, "fi.hut.soberit.agilefant.util", 88, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [332, "fi.hut.soberit.agilefant.web", 2, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [334, "fi.hut.soberit.agilefant.web", 87, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [335, "fi.hut.soberit.agilefant.web", 4, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [336, "fi.hut.soberit.agilefant.web", 57, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [336, "fi.hut.soberit.agilefant.web", 58, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [336, "fi.hut.soberit.agilefant.web", 68, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [341, "fi.hut.soberit.agilefant.web", 88, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [341, "fi.hut.soberit.agilefant.web", 6, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [341, "fi.hut.soberit.agilefant.web", 81, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [341, "fi.hut.soberit.agilefant.web", 87, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [347, "fi.hut.soberit.agilefant.web.function", 215, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [347, "fi.hut.soberit.agilefant.web.function", 221, "fi.hut.soberit.agilefant.model"]}, {"py/tuple": [349, "fi.hut.soberit.agilefant.web", 13, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [350, "fi.hut.soberit.agilefant.web", 58, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [350, "fi.hut.soberit.agilefant.web", 76, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [352, "fi.hut.soberit.agilefant.web", 60, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [354, "fi.hut.soberit.agilefant.web", 62, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [356, "fi.hut.soberit.agilefant.web", 64, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [356, "fi.hut.soberit.agilefant.web", 88, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [359, "fi.hut.soberit.agilefant.web", 358, "fi.hut.soberit.agilefant.web"]}, {"py/tuple": [360, "fi.hut.soberit.agilefant.web", 67, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [360, "fi.hut.soberit.agilefant.web", 76, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [361, "fi.hut.soberit.agilefant.web", 69, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [361, "fi.hut.soberit.agilefant.web", 76, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [362, "fi.hut.soberit.agilefant.web", 66, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [364, "fi.hut.soberit.agilefant.web", 88, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [366, "fi.hut.soberit.agilefant.web", 58, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [369, "fi.hut.soberit.agilefant.web", 73, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [370, "fi.hut.soberit.agilefant.web", 73, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [371, "fi.hut.soberit.agilefant.web", 13, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [373, "fi.hut.soberit.agilefant.web", 76, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [373, "fi.hut.soberit.agilefant.web", 4, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [374, "fi.hut.soberit.agilefant.web", 76, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [374, "fi.hut.soberit.agilefant.web", 78, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [376, "fi.hut.soberit.agilefant.web", 80, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [383, "fi.hut.soberit.agilefant.web", 81, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [383, "fi.hut.soberit.agilefant.web", 87, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [384, "fi.hut.soberit.agilefant.web", 81, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [384, "fi.hut.soberit.agilefant.web", 82, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [385, "fi.hut.soberit.agilefant.web", 83, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [386, "fi.hut.soberit.agilefant.web", 85, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [386, "fi.hut.soberit.agilefant.web", 67, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [386, "fi.hut.soberit.agilefant.web", 4, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [386, "fi.hut.soberit.agilefant.web", 88, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [386, "fi.hut.soberit.agilefant.web", 86, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [387, "fi.hut.soberit.agilefant.web", 88, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [388, "fi.hut.soberit.agilefant.web", 65, "fi.hut.soberit.agilefant.business"]}, {"py/tuple": [388, "fi.hut.soberit.agilefant.web", 88, "fi.hut.soberit.agilefant.business"]}], "interfaces": [1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 105, 106, 107, 108, 109, 110, 148, 149, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 184, 185, 213, 215, 220, 221, 230, 233, 273, 282, 338, 340, 358, 468], "graph": {"py/object": "networkx.classes.digraph.DiGraph", "graph": {}, "_node": {"23": {}, "56": {}, "55": {}, "51": {}, "49": {}, "44": {}, "42": {}, "41": {}, "38": {}, "36": {}, "30": {}, "29": {}, "28": {}, "27": {}, "25": {}, "24": {}, "18": {}, "17": {}, "15": {}, "14": {}, "26": {}, "405": {}, "37": {}, "413": {}, "52": {}, "432": {}, "53": {}, "434": {}, "117": {}, "469": {}, "147": {}, "146": {}, "145": {}, "142": {}, "139": {}, "138": {}, "137": {}, "134": {}, "133": {}, "132": {}, "131": {}, "130": {}, "129": {}, "128": {}, "127": {}, "124": {}, "123": {}, "122": {}, "121": {}, "119": {}, "118": {}, "115": {}, "114": {}, "113": {}, "112": {}, "111": {}, "416": {}, "143": {}, "136": {}, "135": {}, "152": {}, "154": {}, "153": {}, "151": {}, "200": {}, "193": {}, "201": {}, "257": {}, "202": {}, "219": {}, "218": {}, "210": {}, "209": {}, "231": {}, "227": {}, "204": {}, "272": {}, "224": {}, "189": {}, "277": {}, "187": {}, "281": {}, "188": {}, "225": {}, "286": {}, "190": {}, "229": {}, "289": {}, "191": {}, "234": {}, "186": {}, "237": {}, "192": {}, "261": {}, "279": {}, "270": {}, "262": {}, "433": {}, "266": {}, "322": {}, "486": {}, "485": {}, "288": {}, "285": {}, "381": {}, "379": {}, "378": {}, "382": {}, "380": {}, "377": {}, "390": {}, "394": {}, "393": {}, "392": {}, "391": {}, "463": {}, "460": {}, "459": {}, "458": {}, "457": {}, "456": {}, "455": {}, "454": {}, "453": {}, "452": {}, "451": {}, "450": {}, "449": {}, "448": {}, "447": {}, "446": {}, "444": {}, "443": {}, "442": {}, "441": {}, "440": {}, "439": {}, "438": {}, "467": {}, "524": {}, "518": {}, "517": {}, "516": {}, "515": {}, "512": {}, "511": {}, "510": {}, "509": {}, "503": {}, "501": {}, "499": {}, "498": {}, "497": {}, "494": {}, "437": {}, "429": {}, "428": {}, "426": {}, "423": {}, "422": {}, "419": {}, "417": {}, "412": {}, "408": {}, "406": {}, "404": {}, "403": {}, "400": {}, "397": {}, "395": {}, "474": {}, "475": {}, "1": {}, "2": {}, "4": {}, "6": {}, "235": {}, "236": {}, "256": {}, "7": {}, "8": {}, "9": {}, "19": {}, "20": {}, "21": {}, "22": {}, "211": {}, "206": {}, "205": {}, "271": {}, "31": {}, "274": {}, "34": {}, "263": {}, "292": {}, "171": {}, "167": {}, "35": {}, "276": {}, "280": {}, "40": {}, "215": {}, "222": {}, "316": {}, "46": {}, "287": {}, "47": {}, "228": {}, "48": {}, "275": {}, "317": {}, "50": {}, "232": {}, "319": {}, "54": {}, "58": {}, "59": {}, "65": {}, "66": {}, "67": {}, "69": {}, "72": {}, "76": {}, "78": {}, "79": {}, "80": {}, "81": {}, "82": {}, "83": {}, "85": {}, "87": {}, "88": {}, "89": {}, "93": {}, "94": {}, "98": {}, "92": {}, "95": {}, "302": {}, "108": {}, "203": {}, "311": {}, "155": {}, "159": {}, "160": {}, "164": {}, "165": {}, "170": {}, "173": {}, "174": {}, "175": {}, "176": {}, "182": {}, "223": {}, "207": {}, "208": {}, "212": {}, "214": {}, "226": {}, "241": {}, "242": {}, "243": {}, "259": {}, "244": {}, "245": {}, "246": {}, "290": {}, "252": {}, "255": {}, "199": {}, "267": {}, "283": {}, "284": {}, "305": {}, "307": {}, "320": {}, "329": {}, "332": {}, "335": {}, "341": {}, "348": {}, "349": {}, "268": {}, "350": {}, "353": {}, "357": {}, "360": {}, "361": {}, "362": {}, "364": {}, "366": {}, "373": {}, "374": {}, "315": {}, "375": {}, "376": {}, "383": {}, "384": {}, "385": {}, "386": {}, "387": {}, "388": {}, "389": {}, "401": {}, "414": {}, "415": {}, "420": {}, "435": {}, "258": {}, "502": {}, "16": {}, "3": {}, "5": {}, "10": {}, "11": {}, "74": {}, "73": {}, "61": {}, "60": {}, "13": {}, "12": {}, "57": {}, "62": {}, "32": {}, "63": {}, "33": {}, "64": {}, "68": {}, "39": {}, "70": {}, "43": {}, "75": {}, "45": {}, "77": {}, "86": {}, "105": {}, "106": {}, "107": {}, "109": {}, "468": {}, "110": {}, "177": {}, "172": {}, "169": {}, "166": {}, "163": {}, "162": {}, "161": {}, "158": {}, "157": {}, "148": {}, "156": {}, "149": {}, "168": {}, "184": {}, "185": {}, "213": {}, "480": {}, "479": {}, "308": {}, "220": {}, "282": {}, "221": {}, "314": {}, "230": {}, "233": {}, "273": {}, "321": {}, "338": {}, "340": {}, "330": {}, "506": {}, "358": {}, "505": {}, "504": {}, "470": {}, "323": {}, "264": {}, "217": {}, "216": {}, "269": {}, "298": {}, "71": {}, "125": {}, "126": {}, "291": {}, "150": {}, "195": {}, "196": {}, "197": {}, "239": {}, "240": {}, "247": {}, "248": {}, "253": {}, "260": {}, "293": {}, "294": {}, "296": {}, "306": {}, "324": {}, "325": {}, "327": {}, "331": {}, "178": {}, "333": {}, "334": {}, "336": {}, "337": {}, "342": {}, "344": {}, "347": {}, "351": {}, "352": {}, "354": {}, "355": {}, "356": {}, "359": {}, "363": {}, "365": {}, "367": {}, "368": {}, "369": {}, "370": {}, "371": {}, "372": {}, "181": {}, "396": {}, "398": {}, "399": {}, "402": {}, "407": {}, "409": {}, "410": {}, "411": {}, "418": {}, "421": {}, "424": {}, "425": {}, "427": {}, "430": {}, "431": {}, "436": {}, "462": {}, "251": {}, "472": {}, "473": {}, "478": {}, "481": {}, "482": {}, "483": {}, "484": {}, "487": {}, "488": {}, "489": {}, "490": {}, "491": {}, "492": {}, "493": {}, "495": {}, "496": {}, "500": {}, "507": {}, "508": {}, "278": {}, "513": {}, "514": {}, "519": {}, "520": {}, "521": {}, "522": {}, "523": {}, "84": {}, "310": {}, "318": {}, "464": {}}, "_adj": {"23": {"56": {"inheritance": {"weight": 8.5}}, "55": {"inheritance": {"weight": 8.5}}, "51": {"inheritance": {"weight": 8.5}}, "49": {"inheritance": {"weight": 8.5}}, "44": {"inheritance": {"weight": 8.5}}, "42": {"inheritance": {"weight": 8.5}}, "41": {"inheritance": {"weight": 8.5}}, "38": {"inheritance": {"weight": 8.5}}, "36": {"inheritance": {"weight": 8.5}}, "30": {"inheritance": {"weight": 8.5}}, "29": {"inheritance": {"weight": 8.5}}, "28": {"inheritance": {"weight": 8.5}}, "27": {"inheritance": {"weight": 8.5}}, "25": {"inheritance": {"weight": 8.5}}, "24": {"inheritance": {"weight": 8.5}}, "18": {"inheritance": {"weight": 8.5}}, "17": {"inheritance": {"weight": 8.5}}, "15": {"inheritance": {"weight": 8.5}}, "14": {"inheritance": {"weight": 8.5}}, "11": {"implement": {"weight": 2}}}, "56": {"237": {"return": {"weight": 1}, "is_of_type": {"weight": 6}, "has_parameter": {"weight": 7.0}}, "89": {"implement": {"weight": 2}}, "177": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "200": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 7.0}}}, "55": {"234": {"return": {"weight": 4}, "is_of_type": {"weight": 24}, "has_parameter": {"weight": 24.5}}, "206": {"return": {"weight": 1}}, "88": {"implement": {"weight": 2}}, "174": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "83": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}}, "51": {"232": {"return": {"weight": 2}, "is_of_type": {"weight": 4}, "has_parameter": {"weight": 7.0}}, "83": {"implement": {"weight": 2}}, "173": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "88": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "67": {"is_of_type": {"weight": 2}}, "58": {"is_of_type": {"weight": 2}}, "234": {"is_of_type": {"weight": 2}}, "84": {"has_parameter": {"weight": 3.5}}}, "49": {"229": {"return": {"weight": 7}, "is_of_type": {"weight": 42}, "has_parameter": {"weight": 59.5}}, "81": {"implement": {"weight": 2}}, "58": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "76": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "59": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "6": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "70": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "13": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "171": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "225": {"is_of_type": {"weight": 8}, "has_parameter": {"weight": 3.5}}, "210": {"is_of_type": {"weight": 6}, "has_parameter": {"weight": 3.5}}, "234": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}}, "44": {"225": {"return": {"weight": 13}, "is_of_type": {"weight": 132}, "has_parameter": {"weight": 175.0}}, "202": {"return": {"weight": 2}, "is_of_type": {"weight": 88}, "has_parameter": {"weight": 91.0}}, "316": {"return": {"weight": 2}, "is_of_type": {"weight": 2}}, "286": {"return": {"weight": 1}, "is_of_type": {"weight": 2}}, "76": {"implement": {"weight": 2}}, "167": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "4": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "58": {"is_of_type": {"weight": 2}}, "159": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "174": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "158": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "59": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "5": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "79": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "87": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "13": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "81": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "78": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "80": {"is_of_type": {"weight": 2}}, "60": {"is_of_type": {"weight": 2}}, "210": {"is_of_type": {"weight": 38}, "has_parameter": {"weight": 14.0}}, "234": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}}, "42": {"74": {"implement": {"weight": 2}}, "166": {"is_of_type": {"weight": 2}}, "76": {"is_of_type": {"weight": 2}}, "88": {"is_of_type": {"weight": 2}}, "155": {"is_of_type": {"weight": 2}}, "225": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "234": {"is_of_type": {"weight": 10}, "has_parameter": {"weight": 7.0}}, "226": {"is_of_type": {"weight": 2}}}, "41": {"222": {"return": {"weight": 1}, "is_of_type": {"weight": 30}}, "73": {"implement": {"weight": 2}}, "165": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}}, "38": {"280": {"return": {"weight": 1}, "is_of_type": {"weight": 2}}, "281": {"return": {"weight": 2}, "is_of_type": {"weight": 4}}, "219": {"return": {"weight": 4}, "is_of_type": {"weight": 46}, "has_parameter": {"weight": 35.0}}, "69": {"implement": {"weight": 2}}, "164": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "67": {"is_of_type": {"weight": 2}}, "2": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "4": {"is_of_type": {"weight": 2}}, "87": {"is_of_type": {"weight": 2}}, "70": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "73": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "76": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "13": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "58": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "5": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "79": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "77": {"is_of_type": {"weight": 2}}, "316": {"is_of_type": {"weight": 2}}, "218": {"is_of_type": {"weight": 2}}, "315": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "286": {"is_of_type": {"weight": 2}}, "289": {"is_of_type": {"weight": 2}}, "272": {"is_of_type": {"weight": 2}}}, "36": {"218": {"return": {"weight": 1}, "is_of_type": {"weight": 18}, "has_parameter": {"weight": 24.5}}, "277": {"return": {"weight": 1}, "is_of_type": {"weight": 2}}, "202": {"return": {"weight": 1}, "is_of_type": {"weight": 12}, "has_parameter": {"weight": 14.0}}, "67": {"implement": {"weight": 2}}, "163": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "69": {"is_of_type": {"weight": 2}}, "58": {"is_of_type": {"weight": 2}}, "76": {"is_of_type": {"weight": 2}}, "13": {"is_of_type": {"weight": 2}}, "87": {"is_of_type": {"weight": 2}}, "83": {"is_of_type": {"weight": 2}}, "3": {"is_of_type": {"weight": 2}}, "210": {"is_of_type": {"weight": 2}}, "282": {"is_of_type": {"weight": 8}, "has_parameter": {"weight": 7.0}}, "272": {"is_of_type": {"weight": 2}}, "273": {"has_parameter": {"weight": 3.5}}}, "30": {"61": {"implement": {"weight": 2}}, "162": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "234": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 7.0}}}, "29": {"60": {"implement": {"weight": 2}}, "161": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "76": {"is_of_type": {"weight": 2}}, "212": {"is_of_type": {"weight": 10}, "has_parameter": {"weight": 10.5}}, "225": {"is_of_type": {"weight": 4}}, "234": {"is_of_type": {"weight": 2}}}, "28": {"206": {"return": {"weight": 1}, "is_of_type": {"weight": 4}, "has_parameter": {"weight": 7.0}}, "211": {"return": {"weight": 1}, "is_of_type": {"weight": 6}}, "59": {"implement": {"weight": 2}}, "160": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "159": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "210": {"is_of_type": {"weight": 8}, "has_parameter": {"weight": 10.5}}}, "27": {"272": {"return": {"weight": 4}, "is_of_type": {"weight": 4}}, "206": {"return": {"weight": 2}, "is_of_type": {"weight": 2}}, "205": {"return": {"weight": 1}}, "271": {"return": {"weight": 1}, "is_of_type": {"weight": 2}}, "210": {"return": {"weight": 2}, "is_of_type": {"weight": 38}, "has_parameter": {"weight": 49.0}}, "58": {"implement": {"weight": 2}}, "159": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "87": {"is_of_type": {"weight": 2}}, "76": {"is_of_type": {"weight": 2}}, "13": {"is_of_type": {"weight": 2}}, "5": {"is_of_type": {"weight": 2}}, "59": {"is_of_type": {"weight": 2}}, "160": {"is_of_type": {"weight": 2}}, "4": {"is_of_type": {"weight": 2}}, "2": {"is_of_type": {"weight": 2}}, "79": {"is_of_type": {"weight": 2}}, "81": {"is_of_type": {"weight": 2}}, "83": {"is_of_type": {"weight": 2}}, "148": {"is_of_type": {"weight": 2}}, "155": {"is_of_type": {"weight": 2}}, "156": {"is_of_type": {"weight": 2}}, "202": {"is_of_type": {"weight": 10}, "has_parameter": {"weight": 7.0}}, "286": {"is_of_type": {"weight": 2}}, "289": {"is_of_type": {"weight": 4}}, "211": {"is_of_type": {"weight": 8}, "has_parameter": {"weight": 3.5}}, "257": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "223": {"is_of_type": {"weight": 2}}, "225": {"is_of_type": {"weight": 4}}, "234": {"has_parameter": {"weight": 3.5}}}, "25": {"13": {"implement": {"weight": 2}}, "158": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "76": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "81": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "88": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "4": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "109": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "209": {"is_of_type": {"weight": 10}, "has_parameter": {"weight": 17.5}}, "202": {"is_of_type": {"weight": 6}, "has_parameter": {"weight": 7.0}}, "204": {"is_of_type": {"weight": 4}}, "225": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "227": {"is_of_type": {"weight": 4}}, "229": {"is_of_type": {"weight": 2}}, "231": {"is_of_type": {"weight": 2}}, "234": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}, "210": {"is_of_type": {"weight": 6}, "has_parameter": {"weight": 10.5}}, "264": {"is_of_type": {"weight": 4}}}, "24": {"12": {"implement": {"weight": 2}}, "157": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "234": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}}, "18": {"5": {"implement": {"weight": 2}}, "108": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "168": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "107": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "202": {"is_of_type": {"weight": 2}}, "219": {"is_of_type": {"weight": 2}}, "203": {"is_of_type": {"weight": 2}}}, "17": {"218": {"return": {"weight": 1}}, "4": {"implement": {"weight": 2}}, "107": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "163": {"is_of_type": {"weight": 2}}, "2": {"is_of_type": {"weight": 2}}, "167": {"is_of_type": {"weight": 2}}, "76": {"is_of_type": {"weight": 2}}, "148": {"is_of_type": {"weight": 2}}, "202": {"is_of_type": {"weight": 14}, "has_parameter": {"weight": 14.0}}, "221": {"is_of_type": {"weight": 6}, "has_parameter": {"weight": 10.5}}, "210": {"is_of_type": {"weight": 6}, "has_parameter": {"weight": 10.5}}, "225": {"is_of_type": {"weight": 2}}}, "15": {"201": {"return": {"weight": 1}, "is_of_type": {"weight": 4}}, "2": {"implement": {"weight": 2}}, "106": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "88": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "223": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 7.0}}, "202": {"is_of_type": {"weight": 8}, "has_parameter": {"weight": 14.0}}, "234": {"is_of_type": {"weight": 2}}}, "14": {"200": {"return": {"weight": 1}, "is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "1": {"implement": {"weight": 2}}, "89": {"is_of_type": {"weight": 2}}, "105": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "237": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}}, "26": {"405": {"inheritance": {"weight": 8.5}}, "211": {"return": {"weight": 1}, "is_of_type": {"weight": 40}, "has_parameter": {"weight": 52.5}}, "206": {"return": {"weight": 1}, "is_of_type": {"weight": 24}, "has_parameter": {"weight": 17.5}}, "57": {"implement": {"weight": 2}}, "59": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "13": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "58": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "73": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "210": {"is_of_type": {"weight": 16}, "has_parameter": {"weight": 28.0}}, "264": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}}, "405": {"26": {"is_of_type": {"weight": 2}}, "59": {"is_of_type": {"weight": 2}}, "13": {"is_of_type": {"weight": 2}}, "58": {"is_of_type": {"weight": 2}}, "73": {"is_of_type": {"weight": 2}}, "210": {"is_of_type": {"weight": 2}}, "206": {"is_of_type": {"weight": 22}, "has_parameter": {"weight": 7.0}}, "211": {"is_of_type": {"weight": 36}}}, "37": {"413": {"inheritance": {"weight": 8.5}}, "68": {"implement": {"weight": 2}}, "108": {"is_of_type": {"weight": 2}}, "219": {"is_of_type": {"weight": 8}, "has_parameter": {"weight": 14.0}}, "311": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "298": {"is_of_type": {"weight": 4}}}, "413": {"311": {"is_of_type": {"weight": 6}}}, "52": {"432": {"inheritance": {"weight": 8.5}}, "319": {"return": {"weight": 2}, "is_of_type": {"weight": 22}, "has_parameter": {"weight": 28.0}}, "85": {"implement": {"weight": 2}}, "158": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "288": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 7.0}}, "225": {"is_of_type": {"weight": 4}}, "285": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "210": {"is_of_type": {"weight": 2}}, "262": {"is_of_type": {"weight": 8}, "has_parameter": {"weight": 7.0}}, "202": {"is_of_type": {"weight": 4}}}, "432": {"158": {"is_of_type": {"weight": 2}}, "204": {"is_of_type": {"weight": 2}}, "227": {"is_of_type": {"weight": 2}}, "231": {"is_of_type": {"weight": 4}}, "319": {"is_of_type": {"weight": 24}}, "218": {"is_of_type": {"weight": 8}}, "219": {"is_of_type": {"weight": 10}}, "210": {"is_of_type": {"weight": 14}}, "225": {"is_of_type": {"weight": 8}}, "229": {"is_of_type": {"weight": 16}}, "85": {"is_of_type": {"weight": 12}}, "262": {"is_of_type": {"weight": 30}}, "285": {"is_of_type": {"weight": 10}}, "288": {"is_of_type": {"weight": 16}}, "202": {"is_of_type": {"weight": 4}}}, "53": {"434": {"inheritance": {"weight": 8.5}}, "86": {"implement": {"weight": 2}}, "158": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "320": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 7.0}}}, "434": {"218": {"is_of_type": {"weight": 2}}, "219": {"is_of_type": {"weight": 2}}, "210": {"is_of_type": {"weight": 2}}, "225": {"is_of_type": {"weight": 2}}, "229": {"is_of_type": {"weight": 4}}, "234": {"is_of_type": {"weight": 2}}, "204": {"is_of_type": {"weight": 2}}, "231": {"is_of_type": {"weight": 2}}, "227": {"is_of_type": {"weight": 2}}, "158": {"is_of_type": {"weight": 4}}, "320": {"is_of_type": {"weight": 4}}}, "117": {"469": {"inheritance": {"weight": 8.5}}, "147": {"inheritance": {"weight": 8.5}}, "146": {"inheritance": {"weight": 8.5}}, "145": {"inheritance": {"weight": 8.5}}, "142": {"inheritance": {"weight": 8.5}}, "139": {"inheritance": {"weight": 8.5}}, "138": {"inheritance": {"weight": 8.5}}, "137": {"inheritance": {"weight": 8.5}}, "134": {"inheritance": {"weight": 8.5}}, "133": {"inheritance": {"weight": 8.5}}, "132": {"inheritance": {"weight": 8.5}}, "131": {"inheritance": {"weight": 8.5}}, "130": {"inheritance": {"weight": 8.5}}, "129": {"inheritance": {"weight": 8.5}}, "128": {"inheritance": {"weight": 8.5}}, "127": {"inheritance": {"weight": 8.5}}, "124": {"inheritance": {"weight": 8.5}}, "123": {"inheritance": {"weight": 8.5}}, "122": {"inheritance": {"weight": 8.5}}, "121": {"inheritance": {"weight": 8.5}}, "119": {"inheritance": {"weight": 8.5}}, "118": {"inheritance": {"weight": 8.5}}, "115": {"inheritance": {"weight": 8.5}}, "114": {"inheritance": {"weight": 8.5}}, "113": {"inheritance": {"weight": 8.5}}, "112": {"inheritance": {"weight": 8.5}}, "111": {"inheritance": {"weight": 8.5}}, "110": {"implement": {"weight": 2}}}, "469": {"468": {"implement": {"weight": 2}}}, "147": {"177": {"implement": {"weight": 2}}}, "146": {"236": {"return": {"weight": 2}}, "176": {"implement": {"weight": 2}}, "234": {"is_of_type": {"weight": 10}, "has_parameter": {"weight": 14.0}}, "225": {"is_of_type": {"weight": 8}, "has_parameter": {"weight": 10.5}}}, "145": {"235": {"return": {"weight": 2}}, "175": {"implement": {"weight": 2}}, "234": {"is_of_type": {"weight": 10}, "has_parameter": {"weight": 14.0}}, "229": {"is_of_type": {"weight": 8}, "has_parameter": {"weight": 10.5}}}, "142": {"234": {"return": {"weight": 2}}, "174": {"implement": {"weight": 2}}}, "139": {"232": {"return": {"weight": 1}}, "173": {"implement": {"weight": 2}}}, "138": {"172": {"implement": {"weight": 2}}, "229": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}}, "137": {"229": {"return": {"weight": 2}}, "171": {"implement": {"weight": 2}}, "234": {"is_of_type": {"weight": 14}, "has_parameter": {"weight": 24.5}}, "291": {"is_of_type": {"weight": 2}}, "210": {"is_of_type": {"weight": 8}, "has_parameter": {"weight": 14.0}}, "225": {"is_of_type": {"weight": 8}, "has_parameter": {"weight": 14.0}}}, "134": {"228": {"return": {"weight": 1}}, "170": {"implement": {"weight": 2}}, "202": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 7.0}}, "225": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 10.5}}}, "133": {"169": {"implement": {"weight": 2}}}, "132": {"168": {"implement": {"weight": 2}}, "219": {"is_of_type": {"weight": 14}, "has_parameter": {"weight": 24.5}}, "210": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 7.0}}, "225": {"is_of_type": {"weight": 2}}, "46": {"is_of_type": {"weight": 2}}, "287": {"is_of_type": {"weight": 2}}}, "131": {"316": {"return": {"weight": 1}, "is_of_type": {"weight": 2}}, "167": {"implement": {"weight": 2}}, "234": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}, "210": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}, "202": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}}, "130": {"166": {"implement": {"weight": 2}}, "234": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}}, "129": {"222": {"return": {"weight": 1}}, "165": {"implement": {"weight": 2}}}, "128": {"416": {"inheritance": {"weight": 8.5}}, "219": {"return": {"weight": 2}, "is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}, "280": {"return": {"weight": 1}, "is_of_type": {"weight": 2}}, "164": {"implement": {"weight": 2}}, "234": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}}, "127": {"163": {"implement": {"weight": 2}}, "218": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 7.0}}}, "124": {"162": {"implement": {"weight": 2}}, "234": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 7.0}}}, "123": {"161": {"implement": {"weight": 2}}, "225": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}, "212": {"is_of_type": {"weight": 2}}}, "122": {"211": {"return": {"weight": 3}}, "160": {"implement": {"weight": 2}}, "310": {"has_parameter": {"weight": 7.0}}, "206": {"has_parameter": {"weight": 14.0}}}, "121": {"210": {"return": {"weight": 2}, "is_of_type": {"weight": 20}, "has_parameter": {"weight": 35.0}}, "159": {"implement": {"weight": 2}}, "234": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}, "225": {"is_of_type": {"weight": 6}}, "229": {"is_of_type": {"weight": 2}}}, "119": {"158": {"implement": {"weight": 2}}, "234": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 7.0}}, "209": {"is_of_type": {"weight": 2}}}, "118": {"157": {"implement": {"weight": 2}}, "234": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}}, "115": {"109": {"implement": {"weight": 2}}, "202": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}}, "114": {"203": {"return": {"weight": 1}}, "311": {"return": {"weight": 1}}, "108": {"implement": {"weight": 2}}}, "113": {"107": {"implement": {"weight": 2}}, "202": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 7.0}}}, "112": {"106": {"implement": {"weight": 2}}, "234": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}}, "111": {"105": {"implement": {"weight": 2}}}, "416": {"219": {"return": {"weight": 2}, "is_of_type": {"weight": 2}}}, "143": {"136": {"inheritance": {"weight": 8.5}}, "135": {"inheritance": {"weight": 8.5}}}, "136": {}, "135": {}, "152": {"154": {"inheritance": {"weight": 8.5}}, "153": {"inheritance": {"weight": 8.5}}, "151": {"inheritance": {"weight": 8.5}}, "149": {"implement": {"weight": 2}}}, "154": {"156": {"implement": {"weight": 2}}, "229": {"is_of_type": {"weight": 2}}, "210": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}, "225": {"is_of_type": {"weight": 2}}, "199": {"is_of_type": {"weight": 2}}}, "153": {"225": {"return": {"weight": 1}}, "155": {"implement": {"weight": 2}}, "234": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}}, "151": {"148": {"implement": {"weight": 2}}, "202": {"is_of_type": {"weight": 6}, "has_parameter": {"weight": 10.5}}, "199": {"is_of_type": {"weight": 4}}, "225": {"is_of_type": {"weight": 2}}}, "200": {"193": {"inheritance": {"weight": 8.5}}, "237": {"return": {"weight": 1}, "is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}}, "193": {"184": {"implement": {"weight": 2}}}, "201": {"257": {"inheritance": {"weight": 8.5}}, "223": {"return": {"weight": 1}, "is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "202": {"return": {"weight": 1}, "is_of_type": {"weight": 6}, "has_parameter": {"weight": 7.0}}, "234": {"return": {"weight": 1}, "is_of_type": {"weight": 6}, "has_parameter": {"weight": 7.0}}}, "257": {"206": {"return": {"weight": 3}, "is_of_type": {"weight": 12}, "has_parameter": {"weight": 10.5}}, "223": {"return": {"weight": 2}, "is_of_type": {"weight": 8}, "has_parameter": {"weight": 7.0}}, "201": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}}, "202": {"219": {"inheritance": {"weight": 8.5}}, "218": {"inheritance": {"weight": 8.5}}, "210": {"inheritance": {"weight": 8.5}}, "215": {"implement": {"weight": 2}}, "233": {"implement": {"weight": 2}}, "225": {"has_parameter": {"weight": 3.5}}, "204": {"has_parameter": {"weight": 3.5}}, "228": {"has_parameter": {"weight": 3.5}}}, "219": {"281": {"inheritance": {"weight": 8.5}}, "188": {"inheritance": {"weight": 8.5}}, "206": {"return": {"weight": 2}, "is_of_type": {"weight": 8}, "has_parameter": {"weight": 7.0}}, "220": {"implement": {"weight": 2}}, "221": {"implement": {"weight": 2}}, "201": {"has_parameter": {"weight": 3.5}}, "203": {"has_parameter": {"weight": 3.5}}}, "218": {"277": {"inheritance": {"weight": 8.5}}, "187": {"inheritance": {"weight": 8.5}}, "232": {"has_parameter": {"weight": 3.5}}}, "210": {"272": {"inheritance": {"weight": 8.5}}, "224": {"inheritance": {"weight": 8.5}}, "189": {"inheritance": {"weight": 8.5}}, "206": {"return": {"weight": 2}, "is_of_type": {"weight": 8}, "has_parameter": {"weight": 7.0}}, "221": {"implement": {"weight": 2}}, "230": {"implement": {"weight": 2}}, "229": {"has_parameter": {"weight": 3.5}}, "201": {"has_parameter": {"weight": 3.5}}, "211": {"has_parameter": {"weight": 3.5}}, "225": {"has_parameter": {"weight": 3.5}}, "232": {"has_parameter": {"weight": 3.5}}}, "209": {"231": {"inheritance": {"weight": 8.5}}, "227": {"inheritance": {"weight": 8.5}}, "204": {"inheritance": {"weight": 8.5}}, "234": {"return": {"weight": 1}, "is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}}, "231": {"229": {"return": {"weight": 1}, "is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}}, "227": {"225": {"return": {"weight": 1}, "is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}}, "204": {"202": {"return": {"weight": 1}, "is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}}, "272": {"271": {"return": {"weight": 1}, "is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "273": {"implement": {"weight": 2}}, "282": {"implement": {"weight": 2}}, "210": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}, "286": {"has_parameter": {"weight": 7.0}}, "234": {"has_parameter": {"weight": 3.5}}}, "224": {"221": {"implement": {"weight": 2}}, "230": {"implement": {"weight": 2}}}, "189": {"185": {"implement": {"weight": 2}}}, "277": {"234": {"return": {"weight": 1}, "is_of_type": {"weight": 2}}, "273": {"implement": {"weight": 2}}, "218": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}, "286": {"has_parameter": {"weight": 3.5}}, "281": {"has_parameter": {"weight": 3.5}}, "272": {"has_parameter": {"weight": 3.5}}}, "187": {"185": {"implement": {"weight": 2}}}, "281": {"273": {"implement": {"weight": 2}}, "282": {"implement": {"weight": 2}}, "219": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}, "286": {"has_parameter": {"weight": 3.5}}, "234": {"has_parameter": {"weight": 3.5}}, "272": {"has_parameter": {"weight": 3.5}}}, "188": {"185": {"implement": {"weight": 2}}}, "225": {"286": {"inheritance": {"weight": 8.5}}, "190": {"inheritance": {"weight": 8.5}}, "202": {"return": {"weight": 1}, "is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "210": {"return": {"weight": 1}, "is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "213": {"implement": {"weight": 2}}, "215": {"implement": {"weight": 2}}, "230": {"implement": {"weight": 2}}, "233": {"implement": {"weight": 2}}, "46": {"is_of_type": {"weight": 2}}, "287": {"is_of_type": {"weight": 2}}, "229": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}, "227": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}, "212": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}, "236": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}, "234": {"has_parameter": {"weight": 3.5}}, "228": {"has_parameter": {"weight": 3.5}}, "226": {"has_parameter": {"weight": 3.5}}}, "286": {"316": {"return": {"weight": 1}, "is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "225": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 7.0}}}, "190": {"184": {"implement": {"weight": 2}}}, "229": {"289": {"inheritance": {"weight": 8.5}}, "191": {"inheritance": {"weight": 8.5}}, "210": {"return": {"weight": 1}, "is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "225": {"return": {"weight": 1}, "is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "206": {"return": {"weight": 2}, "is_of_type": {"weight": 8}, "has_parameter": {"weight": 7.0}}, "215": {"implement": {"weight": 2}}, "220": {"implement": {"weight": 2}}, "233": {"implement": {"weight": 2}}, "231": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}, "235": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}, "234": {"has_parameter": {"weight": 3.5}}}, "289": {"266": {"inheritance": {"weight": 8.5}}, "229": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}}, "191": {"184": {"implement": {"weight": 2}}}, "234": {"186": {"inheritance": {"weight": 8.5}}, "206": {"return": {"weight": 1}, "is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "215": {"implement": {"weight": 2}}, "232": {"has_parameter": {"weight": 3.5}}, "201": {"has_parameter": {"weight": 3.5}}, "225": {"has_parameter": {"weight": 3.5}}, "229": {"has_parameter": {"weight": 3.5}}, "207": {"has_parameter": {"weight": 3.5}}, "208": {"has_parameter": {"weight": 3.5}}}, "186": {"184": {"implement": {"weight": 2}}}, "237": {"192": {"inheritance": {"weight": 8.5}}, "234": {"return": {"weight": 1}, "is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "200": {"has_parameter": {"weight": 3.5}}}, "192": {"184": {"implement": {"weight": 2}}}, "261": {"279": {"inheritance": {"weight": 8.5}}, "270": {"inheritance": {"weight": 8.5}}, "202": {"return": {"weight": 1}}}, "279": {"219": {"return": {"weight": 1}, "is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "202": {"return": {"weight": 1}}}, "270": {"210": {"return": {"weight": 1}, "is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "202": {"return": {"weight": 1}}}, "262": {"433": {"inheritance": {"weight": 8.5}}, "202": {"return": {"weight": 1}, "is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "285": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}, "288": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}}, "433": {"486": {"return": {"weight": 1}}}, "266": {"229": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 7.0}}}, "322": {"486": {"inheritance": {"weight": 8.5}}, "485": {"inheritance": {"weight": 8.5}}, "288": {"inheritance": {"weight": 8.5}}, "285": {"inheritance": {"weight": 8.5}}, "262": {"inheritance": {"weight": 8.5}}, "209": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}}, "486": {"433": {"return": {"weight": 1}}, "209": {"is_of_type": {"weight": 2}}}, "485": {}, "288": {"229": {"return": {"weight": 1}, "is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}}, "285": {"225": {"return": {"weight": 1}, "is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "288": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}}, "381": {"379": {"inheritance": {"weight": 8.5}}, "378": {"inheritance": {"weight": 8.5}}}, "379": {"67": {"is_of_type": {"weight": 2}}, "69": {"is_of_type": {"weight": 2}}, "58": {"is_of_type": {"weight": 2}}}, "378": {"4": {"is_of_type": {"weight": 2}}, "202": {"is_of_type": {"weight": 2}}}, "382": {"380": {"inheritance": {"weight": 8.5}}, "377": {"inheritance": {"weight": 8.5}}}, "380": {}, "377": {}, "390": {"394": {"inheritance": {"weight": 8.5}}, "393": {"inheritance": {"weight": 8.5}}, "392": {"inheritance": {"weight": 8.5}}, "391": {"inheritance": {"weight": 8.5}}}, "394": {"234": {"return": {"weight": 1}, "is_of_type": {"weight": 4}}, "88": {"is_of_type": {"weight": 2}}, "3": {"is_of_type": {"weight": 2}}}, "393": {"225": {"return": {"weight": 1}, "is_of_type": {"weight": 2}}, "316": {"return": {"weight": 1}, "is_of_type": {"weight": 2}}, "76": {"is_of_type": {"weight": 2}}, "3": {"is_of_type": {"weight": 2}}, "234": {"is_of_type": {"weight": 2}}}, "392": {"219": {"return": {"weight": 1}, "is_of_type": {"weight": 2}}, "280": {"return": {"weight": 1}, "is_of_type": {"weight": 2}}, "69": {"is_of_type": {"weight": 2}}, "3": {"is_of_type": {"weight": 2}}, "234": {"is_of_type": {"weight": 2}}}, "391": {"210": {"return": {"weight": 1}, "is_of_type": {"weight": 2}}, "271": {"return": {"weight": 1}, "is_of_type": {"weight": 2}}, "58": {"is_of_type": {"weight": 2}}, "3": {"is_of_type": {"weight": 2}}, "234": {"is_of_type": {"weight": 2}}}, "463": {"460": {"inheritance": {"weight": 8.5}}, "459": {"inheritance": {"weight": 8.5}}, "458": {"inheritance": {"weight": 8.5}}, "457": {"inheritance": {"weight": 8.5}}, "456": {"inheritance": {"weight": 8.5}}, "455": {"inheritance": {"weight": 8.5}}, "454": {"inheritance": {"weight": 8.5}}, "453": {"inheritance": {"weight": 8.5}}, "452": {"inheritance": {"weight": 8.5}}, "451": {"inheritance": {"weight": 8.5}}, "450": {"inheritance": {"weight": 8.5}}, "449": {"inheritance": {"weight": 8.5}}, "448": {"inheritance": {"weight": 8.5}}, "447": {"inheritance": {"weight": 8.5}}, "446": {"inheritance": {"weight": 8.5}}, "444": {"inheritance": {"weight": 8.5}}, "443": {"inheritance": {"weight": 8.5}}, "442": {"inheritance": {"weight": 8.5}}, "441": {"inheritance": {"weight": 8.5}}, "440": {"inheritance": {"weight": 8.5}}, "439": {"inheritance": {"weight": 8.5}}, "438": {"inheritance": {"weight": 8.5}}}, "460": {"177": {"is_of_type": {"weight": 2}}}, "459": {"175": {"is_of_type": {"weight": 2}}, "234": {"is_of_type": {"weight": 6}}, "229": {"is_of_type": {"weight": 8}}, "235": {"is_of_type": {"weight": 8}}}, "458": {"174": {"is_of_type": {"weight": 2}}}, "457": {"172": {"is_of_type": {"weight": 2}}, "229": {"is_of_type": {"weight": 4}}}, "456": {"171": {"is_of_type": {"weight": 2}}, "234": {"is_of_type": {"weight": 22}}, "210": {"is_of_type": {"weight": 2}}, "225": {"is_of_type": {"weight": 2}}, "229": {"is_of_type": {"weight": 12}}}, "455": {"170": {"is_of_type": {"weight": 2}}, "202": {"is_of_type": {"weight": 2}}, "225": {"is_of_type": {"weight": 10}}, "228": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}}, "454": {"168": {"is_of_type": {"weight": 2}}, "219": {"is_of_type": {"weight": 4}}, "218": {"is_of_type": {"weight": 4}}, "210": {"is_of_type": {"weight": 2}}}, "453": {"167": {"is_of_type": {"weight": 2}}, "234": {"is_of_type": {"weight": 6}}, "316": {"is_of_type": {"weight": 4}}}, "452": {"165": {"is_of_type": {"weight": 2}}, "222": {"is_of_type": {"weight": 2}}}, "451": {"164": {"is_of_type": {"weight": 2}}, "219": {"is_of_type": {"weight": 8}}, "234": {"is_of_type": {"weight": 4}}, "280": {"is_of_type": {"weight": 2}}}, "450": {"163": {"is_of_type": {"weight": 2}}, "218": {"is_of_type": {"weight": 6}}}, "449": {"161": {"is_of_type": {"weight": 2}}, "225": {"is_of_type": {"weight": 4}}}, "448": {"160": {"is_of_type": {"weight": 2}}, "211": {"is_of_type": {"weight": 4}}}, "447": {"159": {"is_of_type": {"weight": 2}}, "210": {"is_of_type": {"weight": 10}}, "234": {"is_of_type": {"weight": 2}}}, "446": {"158": {"is_of_type": {"weight": 2}}}, "444": {"155": {"is_of_type": {"weight": 2}}, "225": {"is_of_type": {"weight": 8}}}, "443": {"148": {"is_of_type": {"weight": 2}}, "202": {"is_of_type": {"weight": 4}}}, "442": {"468": {"is_of_type": {"weight": 2}}, "470": {"is_of_type": {"weight": 8}, "has_parameter": {"weight": 3.5}}}, "441": {"109": {"is_of_type": {"weight": 2}}, "219": {"is_of_type": {"weight": 2}}, "218": {"is_of_type": {"weight": 2}}}, "440": {"108": {"is_of_type": {"weight": 2}}}, "439": {"107": {"is_of_type": {"weight": 2}}}, "438": {"106": {"is_of_type": {"weight": 2}}, "234": {"is_of_type": {"weight": 2}}}, "467": {"524": {"inheritance": {"weight": 8.5}}, "518": {"inheritance": {"weight": 8.5}}, "517": {"inheritance": {"weight": 8.5}}, "516": {"inheritance": {"weight": 8.5}}, "515": {"inheritance": {"weight": 8.5}}, "512": {"inheritance": {"weight": 8.5}}, "511": {"inheritance": {"weight": 8.5}}, "510": {"inheritance": {"weight": 8.5}}, "509": {"inheritance": {"weight": 8.5}}, "503": {"inheritance": {"weight": 8.5}}, "501": {"inheritance": {"weight": 8.5}}, "499": {"inheritance": {"weight": 8.5}}, "498": {"inheritance": {"weight": 8.5}}, "497": {"inheritance": {"weight": 8.5}}, "494": {"inheritance": {"weight": 8.5}}, "437": {"inheritance": {"weight": 8.5}}, "429": {"inheritance": {"weight": 8.5}}, "428": {"inheritance": {"weight": 8.5}}, "426": {"inheritance": {"weight": 8.5}}, "423": {"inheritance": {"weight": 8.5}}, "422": {"inheritance": {"weight": 8.5}}, "419": {"inheritance": {"weight": 8.5}}, "417": {"inheritance": {"weight": 8.5}}, "412": {"inheritance": {"weight": 8.5}}, "408": {"inheritance": {"weight": 8.5}}, "406": {"inheritance": {"weight": 8.5}}, "404": {"inheritance": {"weight": 8.5}}, "403": {"inheritance": {"weight": 8.5}}, "400": {"inheritance": {"weight": 8.5}}, "397": {"inheritance": {"weight": 8.5}}, "395": {"inheritance": {"weight": 8.5}}, "234": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}, "247": {"is_of_type": {"weight": 2}}}, "524": {"389": {"is_of_type": {"weight": 2}}, "1": {"is_of_type": {"weight": 2}}, "200": {"is_of_type": {"weight": 4}}}, "518": {"383": {"is_of_type": {"weight": 2}}, "81": {"is_of_type": {"weight": 2}}, "87": {"is_of_type": {"weight": 2}}, "78": {"is_of_type": {"weight": 2}}, "229": {"is_of_type": {"weight": 6}}, "234": {"is_of_type": {"weight": 8}}, "225": {"is_of_type": {"weight": 4}}, "210": {"is_of_type": {"weight": 2}}, "286": {"is_of_type": {"weight": 2}}}, "517": {"376": {"is_of_type": {"weight": 2}}, "80": {"is_of_type": {"weight": 2}}, "76": {"is_of_type": {"weight": 2}}, "4": {"is_of_type": {"weight": 2}}, "58": {"is_of_type": {"weight": 2}}, "225": {"is_of_type": {"weight": 8}}, "202": {"is_of_type": {"weight": 4}}, "275": {"is_of_type": {"weight": 4}}}, "516": {"374": {"is_of_type": {"weight": 2}}, "76": {"is_of_type": {"weight": 2}}, "78": {"is_of_type": {"weight": 2}}, "225": {"is_of_type": {"weight": 30}}, "286": {"is_of_type": {"weight": 2}}, "287": {"is_of_type": {"weight": 2}}}, "515": {"373": {"is_of_type": {"weight": 2}}, "76": {"is_of_type": {"weight": 2}}, "60": {"is_of_type": {"weight": 2}}, "4": {"is_of_type": {"weight": 2}}, "79": {"is_of_type": {"weight": 2}}, "225": {"is_of_type": {"weight": 30}}, "210": {"is_of_type": {"weight": 2}}, "286": {"is_of_type": {"weight": 2}}, "228": {"is_of_type": {"weight": 2}}}, "512": {}, "511": {"367": {"is_of_type": {"weight": 2}}, "72": {"is_of_type": {"weight": 2}}}, "510": {"365": {"is_of_type": {"weight": 2}}, "76": {"is_of_type": {"weight": 2}}, "81": {"is_of_type": {"weight": 2}}, "225": {"is_of_type": {"weight": 6}}}, "509": {"362": {"is_of_type": {"weight": 2}}, "66": {"is_of_type": {"weight": 2}}, "89": {"is_of_type": {"weight": 2}}, "276": {"is_of_type": {"weight": 2}}}, "503": {"357": {"is_of_type": {"weight": 2}}, "1": {"is_of_type": {"weight": 2}}, "89": {"is_of_type": {"weight": 2}}, "237": {"is_of_type": {"weight": 6}}}, "501": {"355": {"is_of_type": {"weight": 2}}, "75": {"is_of_type": {"weight": 2}}}, "499": {"353": {"is_of_type": {"weight": 2}}, "73": {"is_of_type": {"weight": 2}}, "4": {"is_of_type": {"weight": 2}}, "88": {"is_of_type": {"weight": 2}}, "61": {"is_of_type": {"weight": 2}}}, "498": {"352": {"is_of_type": {"weight": 2}}, "76": {"is_of_type": {"weight": 2}}, "60": {"is_of_type": {"weight": 2}}, "4": {"is_of_type": {"weight": 2}}, "225": {"is_of_type": {"weight": 2}}, "210": {"is_of_type": {"weight": 2}}}, "497": {"351": {"is_of_type": {"weight": 2}}, "58": {"is_of_type": {"weight": 2}}, "210": {"is_of_type": {"weight": 2}}}, "494": {"348": {"is_of_type": {"weight": 2}}, "88": {"is_of_type": {"weight": 2}}, "12": {"is_of_type": {"weight": 2}}, "207": {"is_of_type": {"weight": 2}}, "234": {"is_of_type": {"weight": 2}}}, "437": {"56": {"is_of_type": {"weight": 2}}, "177": {"is_of_type": {"weight": 2}}, "1": {"is_of_type": {"weight": 2}}, "237": {"is_of_type": {"weight": 2}}, "200": {"is_of_type": {"weight": 6}}}, "429": {"49": {"is_of_type": {"weight": 2}}, "58": {"is_of_type": {"weight": 2}}, "59": {"is_of_type": {"weight": 2}}, "13": {"is_of_type": {"weight": 2}}, "76": {"is_of_type": {"weight": 2}}, "171": {"is_of_type": {"weight": 2}}, "39": {"is_of_type": {"weight": 2}}, "210": {"is_of_type": {"weight": 24}, "has_parameter": {"weight": 3.5}}, "225": {"is_of_type": {"weight": 26}, "has_parameter": {"weight": 3.5}}, "229": {"is_of_type": {"weight": 78}, "has_parameter": {"weight": 3.5}}, "234": {"is_of_type": {"weight": 2}}, "6": {"is_of_type": {"weight": 2}}, "231": {"is_of_type": {"weight": 2}}, "219": {"is_of_type": {"weight": 4}}}, "428": {"275": {"return": {"weight": 1}, "is_of_type": {"weight": 10}, "has_parameter": {"weight": 3.5}}, "48": {"is_of_type": {"weight": 2}}, "4": {"is_of_type": {"weight": 2}}, "225": {"is_of_type": {"weight": 18}, "has_parameter": {"weight": 3.5}}}, "426": {"46": {"is_of_type": {"weight": 2}}, "168": {"is_of_type": {"weight": 2}}, "76": {"is_of_type": {"weight": 2}}, "4": {"is_of_type": {"weight": 2}}, "77": {"is_of_type": {"weight": 2}}, "80": {"is_of_type": {"weight": 2}}, "225": {"is_of_type": {"weight": 62}}, "219": {"is_of_type": {"weight": 10}}, "315": {"is_of_type": {"weight": 4}}, "218": {"is_of_type": {"weight": 8}}, "286": {"is_of_type": {"weight": 4}}, "287": {"is_of_type": {"weight": 2}}}, "423": {"44": {"is_of_type": {"weight": 2}}, "59": {"is_of_type": {"weight": 2}}, "5": {"is_of_type": {"weight": 2}}, "167": {"is_of_type": {"weight": 2}}, "4": {"is_of_type": {"weight": 2}}, "159": {"is_of_type": {"weight": 2}}, "174": {"is_of_type": {"weight": 2}}, "158": {"is_of_type": {"weight": 2}}, "58": {"is_of_type": {"weight": 2}}, "69": {"is_of_type": {"weight": 2}}, "155": {"is_of_type": {"weight": 2}}, "79": {"is_of_type": {"weight": 2}}, "87": {"is_of_type": {"weight": 2}}, "13": {"is_of_type": {"weight": 2}}, "81": {"is_of_type": {"weight": 2}}, "78": {"is_of_type": {"weight": 2}}, "60": {"is_of_type": {"weight": 2}}, "80": {"is_of_type": {"weight": 2}}, "225": {"is_of_type": {"weight": 70}}, "210": {"is_of_type": {"weight": 4}}, "219": {"is_of_type": {"weight": 14}}, "234": {"is_of_type": {"weight": 8}}, "202": {"is_of_type": {"weight": 4}}, "218": {"is_of_type": {"weight": 10}}, "229": {"is_of_type": {"weight": 4}}, "212": {"is_of_type": {"weight": 4}}}, "422": {"43": {"is_of_type": {"weight": 2}}, "60": {"is_of_type": {"weight": 2}}, "76": {"is_of_type": {"weight": 2}}, "225": {"is_of_type": {"weight": 12}}}, "419": {"40": {"is_of_type": {"weight": 2}}, "167": {"is_of_type": {"weight": 2}}, "107": {"is_of_type": {"weight": 2}}, "171": {"is_of_type": {"weight": 2}}, "174": {"is_of_type": {"weight": 2}}, "3": {"is_of_type": {"weight": 2}}, "232": {"is_of_type": {"weight": 2}}, "202": {"is_of_type": {"weight": 32}}, "210": {"is_of_type": {"weight": 8}}, "225": {"is_of_type": {"weight": 8}}, "234": {"is_of_type": {"weight": 14}}}, "417": {"38": {"is_of_type": {"weight": 2}}, "164": {"is_of_type": {"weight": 2}}, "107": {"is_of_type": {"weight": 2}}, "67": {"is_of_type": {"weight": 2}}, "87": {"is_of_type": {"weight": 2}}, "73": {"is_of_type": {"weight": 2}}, "70": {"is_of_type": {"weight": 2}}, "2": {"is_of_type": {"weight": 2}}, "5": {"is_of_type": {"weight": 2}}, "58": {"is_of_type": {"weight": 2}}, "76": {"is_of_type": {"weight": 2}}, "13": {"is_of_type": {"weight": 2}}, "79": {"is_of_type": {"weight": 2}}, "77": {"is_of_type": {"weight": 2}}, "4": {"is_of_type": {"weight": 2}}, "219": {"is_of_type": {"weight": 20}}, "218": {"is_of_type": {"weight": 4}}, "234": {"is_of_type": {"weight": 4}}, "225": {"is_of_type": {"weight": 10}}, "229": {"is_of_type": {"weight": 2}}, "280": {"is_of_type": {"weight": 4}}, "281": {"is_of_type": {"weight": 8}}, "210": {"is_of_type": {"weight": 2}}, "201": {"is_of_type": {"weight": 2}}, "203": {"is_of_type": {"weight": 2}}, "204": {"is_of_type": {"weight": 2}}}, "412": {"36": {"is_of_type": {"weight": 2}}, "163": {"is_of_type": {"weight": 2}}, "76": {"is_of_type": {"weight": 2}}, "58": {"is_of_type": {"weight": 2}}, "69": {"is_of_type": {"weight": 2}}, "13": {"is_of_type": {"weight": 2}}, "87": {"is_of_type": {"weight": 2}}, "83": {"is_of_type": {"weight": 2}}, "3": {"is_of_type": {"weight": 2}}, "218": {"is_of_type": {"weight": 24}}, "225": {"is_of_type": {"weight": 12}}, "219": {"is_of_type": {"weight": 10}}, "210": {"is_of_type": {"weight": 8}}, "204": {"is_of_type": {"weight": 4}}, "277": {"is_of_type": {"weight": 4}}, "281": {"is_of_type": {"weight": 4}}, "272": {"is_of_type": {"weight": 2}}}, "408": {"29": {"is_of_type": {"weight": 2}}, "161": {"is_of_type": {"weight": 2}}, "76": {"is_of_type": {"weight": 2}}, "234": {"is_of_type": {"weight": 2}}, "225": {"is_of_type": {"weight": 2}}, "212": {"is_of_type": {"weight": 2}}}, "406": {"27": {"is_of_type": {"weight": 2}}, "87": {"is_of_type": {"weight": 2}}, "76": {"is_of_type": {"weight": 2}}, "13": {"is_of_type": {"weight": 2}}, "159": {"is_of_type": {"weight": 2}}, "160": {"is_of_type": {"weight": 2}}, "59": {"is_of_type": {"weight": 2}}, "4": {"is_of_type": {"weight": 2}}, "2": {"is_of_type": {"weight": 2}}, "5": {"is_of_type": {"weight": 2}}, "79": {"is_of_type": {"weight": 2}}, "81": {"is_of_type": {"weight": 2}}, "155": {"is_of_type": {"weight": 2}}, "148": {"is_of_type": {"weight": 2}}, "83": {"is_of_type": {"weight": 2}}, "156": {"is_of_type": {"weight": 2}}, "210": {"is_of_type": {"weight": 24}}, "219": {"is_of_type": {"weight": 8}}, "272": {"is_of_type": {"weight": 6}}, "229": {"is_of_type": {"weight": 6}}, "289": {"is_of_type": {"weight": 2}}, "225": {"is_of_type": {"weight": 10}}, "286": {"is_of_type": {"weight": 4}}, "211": {"is_of_type": {"weight": 20}}, "204": {"is_of_type": {"weight": 8}}, "271": {"is_of_type": {"weight": 8}}, "234": {"is_of_type": {"weight": 2}}, "201": {"is_of_type": {"weight": 6}}, "199": {"is_of_type": {"weight": 6}}, "255": {"is_of_type": {"weight": 6}}}, "404": {"257": {"return": {"weight": 1}, "is_of_type": {"weight": 12}, "has_parameter": {"weight": 3.5}}, "27": {"is_of_type": {"weight": 2}}, "83": {"is_of_type": {"weight": 2}}, "159": {"is_of_type": {"weight": 2}}, "87": {"is_of_type": {"weight": 2}}, "76": {"is_of_type": {"weight": 2}}, "13": {"is_of_type": {"weight": 2}}, "5": {"is_of_type": {"weight": 2}}, "59": {"is_of_type": {"weight": 2}}, "160": {"is_of_type": {"weight": 2}}, "4": {"is_of_type": {"weight": 2}}, "2": {"is_of_type": {"weight": 2}}, "73": {"is_of_type": {"weight": 2}}, "79": {"is_of_type": {"weight": 2}}, "81": {"is_of_type": {"weight": 2}}, "148": {"is_of_type": {"weight": 2}}, "155": {"is_of_type": {"weight": 2}}, "156": {"is_of_type": {"weight": 2}}, "234": {"is_of_type": {"weight": 4}}, "201": {"is_of_type": {"weight": 4}}, "210": {"is_of_type": {"weight": 2}}, "225": {"is_of_type": {"weight": 4}}, "229": {"is_of_type": {"weight": 12}}}, "403": {"48": {"is_of_type": {"weight": 2}}, "4": {"is_of_type": {"weight": 2}}, "218": {"is_of_type": {"weight": 12}}, "225": {"is_of_type": {"weight": 34}, "has_parameter": {"weight": 7.0}}, "219": {"is_of_type": {"weight": 14}}, "210": {"is_of_type": {"weight": 4}}, "317": {"has_parameter": {"weight": 7.0}}}, "400": {"24": {"is_of_type": {"weight": 2}}, "157": {"is_of_type": {"weight": 2}}, "234": {"is_of_type": {"weight": 2}}}, "397": {"17": {"is_of_type": {"weight": 2}}, "107": {"is_of_type": {"weight": 2}}, "163": {"is_of_type": {"weight": 2}}, "167": {"is_of_type": {"weight": 2}}, "76": {"is_of_type": {"weight": 2}}, "148": {"is_of_type": {"weight": 2}}, "2": {"is_of_type": {"weight": 2}}, "202": {"is_of_type": {"weight": 6}}, "219": {"is_of_type": {"weight": 4}}, "210": {"is_of_type": {"weight": 32}}, "218": {"is_of_type": {"weight": 2}}, "225": {"is_of_type": {"weight": 12}}, "199": {"is_of_type": {"weight": 14}}, "255": {"is_of_type": {"weight": 14}}}, "395": {"14": {"is_of_type": {"weight": 2}}, "105": {"is_of_type": {"weight": 2}}, "89": {"is_of_type": {"weight": 2}}, "200": {"is_of_type": {"weight": 14}}, "237": {"is_of_type": {"weight": 12}}}, "474": {"475": {"inheritance": {"weight": 8.5}}, "206": {"return": {"weight": 1}, "is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}}, "475": {}, "1": {"200": {"return": {"weight": 1}, "implement": {"weight": 2}, "is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "11": {"implement": {"weight": 2}}, "237": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}}, "2": {"201": {"return": {"weight": 1}, "implement": {"weight": 2}}, "11": {"implement": {"weight": 2}}, "223": {"is_of_type": {"weight": 6}, "has_parameter": {"weight": 7.0}}, "202": {"is_of_type": {"weight": 8}, "has_parameter": {"weight": 7.0}}}, "4": {"218": {"return": {"weight": 1}}, "11": {"implement": {"weight": 2}}, "202": {"implement": {"weight": 2}, "is_of_type": {"weight": 14}, "has_parameter": {"weight": 14.0}}, "210": {"is_of_type": {"weight": 12}, "has_parameter": {"weight": 10.5}}, "221": {"is_of_type": {"weight": 12}, "has_parameter": {"weight": 10.5}}}, "6": {"266": {"return": {"weight": 2}}, "235": {"return": {"weight": 1}}, "286": {"return": {"weight": 2}}, "236": {"return": {"weight": 1}}, "256": {"return": {"weight": 1}}, "234": {"is_of_type": {"weight": 42}, "has_parameter": {"weight": 38.5}}, "229": {"is_of_type": {"weight": 24}, "has_parameter": {"weight": 21.0}}, "225": {"is_of_type": {"weight": 24}, "has_parameter": {"weight": 21.0}}, "87": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "171": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "175": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "176": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "81": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "70": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "167": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}}, "235": {"234": {"return": {"weight": 1}, "is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "229": {"return": {"weight": 1}, "is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "220": {"implement": {"weight": 2}}}, "236": {"234": {"return": {"weight": 1}, "is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "225": {"return": {"weight": 1}, "is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "220": {"implement": {"weight": 2}}}, "256": {"286": {"has_parameter": {"weight": 3.5}}, "229": {"has_parameter": {"weight": 3.5}}}, "7": {"8": {"return": {"weight": 1}, "is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "200": {"is_of_type": {"weight": 10}}, "225": {"is_of_type": {"weight": 4}}, "234": {"is_of_type": {"weight": 4}}, "219": {"is_of_type": {"weight": 4}}, "210": {"is_of_type": {"weight": 4}}}, "8": {}, "9": {"200": {"return": {"weight": 1}, "is_of_type": {"weight": 10}, "has_parameter": {"weight": 14.0}}, "225": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "234": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "219": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "210": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}}, "19": {"266": {"return": {"weight": 4}, "is_of_type": {"weight": 6}}, "235": {"return": {"weight": 1}, "is_of_type": {"weight": 16}, "has_parameter": {"weight": 14.0}}, "286": {"return": {"weight": 4}, "is_of_type": {"weight": 22}, "has_parameter": {"weight": 17.5}}, "236": {"return": {"weight": 1}, "is_of_type": {"weight": 16}, "has_parameter": {"weight": 14.0}}, "256": {"return": {"weight": 1}, "is_of_type": {"weight": 2}}, "6": {"implement": {"weight": 2}}, "171": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "167": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "170": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "175": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "176": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "70": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "81": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "76": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "87": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "234": {"is_of_type": {"weight": 22}, "has_parameter": {"weight": 38.5}}, "229": {"is_of_type": {"weight": 12}, "has_parameter": {"weight": 21.0}}, "225": {"is_of_type": {"weight": 12}, "has_parameter": {"weight": 21.0}}, "228": {"has_parameter": {"weight": 7.0}}}, "20": {"9": {"return": {"weight": 1}, "is_of_type": {"weight": 2}}, "8": {"return": {"weight": 1}, "is_of_type": {"weight": 6}, "has_parameter": {"weight": 7.0}}, "7": {"implement": {"weight": 2}}, "106": {"is_of_type": {"weight": 2}}, "108": {"is_of_type": {"weight": 2}}, "109": {"is_of_type": {"weight": 2}}, "157": {"is_of_type": {"weight": 2}}, "158": {"is_of_type": {"weight": 2}}, "159": {"is_of_type": {"weight": 2}}, "160": {"is_of_type": {"weight": 2}}, "161": {"is_of_type": {"weight": 2}}, "163": {"is_of_type": {"weight": 2}}, "164": {"is_of_type": {"weight": 2}}, "165": {"is_of_type": {"weight": 2}}, "167": {"is_of_type": {"weight": 2}}, "166": {"is_of_type": {"weight": 2}}, "169": {"is_of_type": {"weight": 2}}, "170": {"is_of_type": {"weight": 2}}, "171": {"is_of_type": {"weight": 2}}, "172": {"is_of_type": {"weight": 2}}, "173": {"is_of_type": {"weight": 2}}, "174": {"is_of_type": {"weight": 2}}, "175": {"is_of_type": {"weight": 2}}, "176": {"is_of_type": {"weight": 2}}, "177": {"is_of_type": {"weight": 2}}, "105": {"is_of_type": {"weight": 2}}, "58": {"is_of_type": {"weight": 2}}, "88": {"is_of_type": {"weight": 2}}, "73": {"is_of_type": {"weight": 2}}, "83": {"is_of_type": {"weight": 2}}, "323": {"is_of_type": {"weight": 2}}, "225": {"is_of_type": {"weight": 6}, "has_parameter": {"weight": 7.0}}, "200": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}, "210": {"is_of_type": {"weight": 2}}, "219": {"is_of_type": {"weight": 2}}, "234": {"is_of_type": {"weight": 2}}}, "21": {"22": {"return": {"weight": 1}, "is_of_type": {"weight": 18}, "has_parameter": {"weight": 24.5}}, "10": {"implement": {"weight": 2}}, "58": {"is_of_type": {"weight": 2}}, "73": {"is_of_type": {"weight": 2}}, "57": {"is_of_type": {"weight": 2}}, "272": {"is_of_type": {"weight": 14}, "has_parameter": {"weight": 21.0}}, "316": {"is_of_type": {"weight": 2}}, "271": {"is_of_type": {"weight": 2}}, "206": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}, "234": {"has_parameter": {"weight": 3.5}}, "212": {"has_parameter": {"weight": 3.5}}}, "22": {}, "211": {"210": {"return": {"weight": 1}, "is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}}, "206": {}, "205": {}, "271": {"206": {"return": {"weight": 4}, "is_of_type": {"weight": 16}, "has_parameter": {"weight": 14.0}}, "205": {"return": {"weight": 1}, "is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}}, "31": {"274": {"return": {"weight": 1}, "is_of_type": {"weight": 4}}, "62": {"implement": {"weight": 2}}, "159": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "164": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "167": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "67": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "58": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "87": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "88": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "3": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "202": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 7.0}}, "234": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}, "307": {"is_of_type": {"weight": 2}}}, "274": {}, "34": {"261": {"return": {"weight": 1}, "is_of_type": {"weight": 4}}, "263": {"return": {"weight": 2}, "is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "292": {"return": {"weight": 1}, "is_of_type": {"weight": 2}}, "171": {"return": {"weight": 1}, "is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "167": {"return": {"weight": 1}, "is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "65": {"implement": {"weight": 2}}, "88": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "159": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "106": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "73": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "234": {"is_of_type": {"weight": 26}, "has_parameter": {"weight": 45.5}}, "210": {"is_of_type": {"weight": 8}, "has_parameter": {"weight": 7.0}}, "270": {"is_of_type": {"weight": 14}, "has_parameter": {"weight": 21.0}}, "229": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}, "269": {"is_of_type": {"weight": 6}, "has_parameter": {"weight": 7.0}}, "202": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "279": {"is_of_type": {"weight": 2}}, "201": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 7.0}}, "206": {"is_of_type": {"weight": 2}}, "221": {"is_of_type": {"weight": 2}}, "291": {"has_parameter": {"weight": 3.5}}}, "263": {"269": {"has_parameter": {"weight": 3.5}}, "207": {"has_parameter": {"weight": 3.5}}}, "292": {}, "171": {"229": {"return": {"weight": 2}, "implement": {"weight": 2}}, "110": {"implement": {"weight": 2}}, "234": {"is_of_type": {"weight": 26}, "has_parameter": {"weight": 24.5}}, "210": {"is_of_type": {"weight": 12}, "has_parameter": {"weight": 10.5}}, "225": {"is_of_type": {"weight": 12}, "has_parameter": {"weight": 10.5}}}, "167": {"316": {"return": {"weight": 1}}, "110": {"implement": {"weight": 2}}, "225": {"implement": {"weight": 2}}, "234": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "210": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "202": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}}, "35": {"276": {"return": {"weight": 1}, "is_of_type": {"weight": 2}}, "66": {"implement": {"weight": 2}}, "164": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "73": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "3": {"is_of_type": {"weight": 2}}, "281": {"is_of_type": {"weight": 2}}, "219": {"has_parameter": {"weight": 3.5}}}, "276": {"219": {"has_parameter": {"weight": 7.0}}}, "280": {"206": {"return": {"weight": 3}, "is_of_type": {"weight": 12}, "has_parameter": {"weight": 10.5}}}, "40": {"215": {"return": {"weight": 1}, "is_of_type": {"weight": 2}}, "72": {"implement": {"weight": 2}}, "167": {"is_of_type": {"weight": 2}}, "107": {"is_of_type": {"weight": 2}}, "174": {"is_of_type": {"weight": 2}}, "171": {"is_of_type": {"weight": 2}}, "3": {"is_of_type": {"weight": 2}}, "202": {"is_of_type": {"weight": 8}, "has_parameter": {"weight": 7.0}}, "210": {"is_of_type": {"weight": 2}}, "283": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 10.5}}, "234": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}, "225": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}, "229": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}}, "215": {}, "222": {"202": {"return": {"weight": 1}}}, "316": {}, "46": {"286": {"return": {"weight": 1}, "is_of_type": {"weight": 8}}, "287": {"return": {"weight": 1}, "is_of_type": {"weight": 4}}, "78": {"implement": {"weight": 2}}, "168": {"is_of_type": {"weight": 2}}, "76": {"is_of_type": {"weight": 2}}, "4": {"is_of_type": {"weight": 2}}, "77": {"is_of_type": {"weight": 2}}, "80": {"is_of_type": {"weight": 2}}, "219": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}, "225": {"is_of_type": {"weight": 60}, "has_parameter": {"weight": 73.5}}, "202": {"is_of_type": {"weight": 2}}, "218": {"is_of_type": {"weight": 4}}, "315": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 7.0}}}, "287": {}, "47": {"228": {"return": {"weight": 2}, "is_of_type": {"weight": 34}, "has_parameter": {"weight": 28.0}}, "79": {"implement": {"weight": 2}}, "170": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "4": {"is_of_type": {"weight": 2}}, "225": {"is_of_type": {"weight": 20}, "has_parameter": {"weight": 35.0}}, "202": {"is_of_type": {"weight": 18}, "has_parameter": {"weight": 31.5}}, "286": {"is_of_type": {"weight": 2}}}, "228": {"225": {"return": {"weight": 1}, "is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "202": {"return": {"weight": 1}, "is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}}, "48": {"275": {"return": {"weight": 2}, "is_of_type": {"weight": 10}}, "317": {"return": {"weight": 1}, "is_of_type": {"weight": 4}, "has_parameter": {"weight": 35.0}}, "80": {"implement": {"weight": 2}}, "4": {"is_of_type": {"weight": 2}}, "225": {"is_of_type": {"weight": 52}, "has_parameter": {"weight": 73.5}}, "202": {"is_of_type": {"weight": 40}, "has_parameter": {"weight": 49.0}}, "219": {"is_of_type": {"weight": 2}}}, "275": {"225": {"return": {"weight": 1}, "is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "202": {"return": {"weight": 1}, "is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "317": {"return": {"weight": 1}, "is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}}, "317": {"225": {"return": {"weight": 2}, "is_of_type": {"weight": 8}, "has_parameter": {"weight": 7.0}}}, "50": {"229": {"return": {"weight": 1}, "is_of_type": {"weight": 4}, "has_parameter": {"weight": 14.0}}, "82": {"implement": {"weight": 2}}, "81": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}}, "232": {"234": {"has_parameter": {"weight": 3.5}}, "218": {"has_parameter": {"weight": 3.5}}, "210": {"has_parameter": {"weight": 3.5}}}, "319": {"262": {"return": {"weight": 1}, "is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "285": {"return": {"weight": 1}, "is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "288": {"return": {"weight": 1}, "is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "204": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}, "227": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}, "231": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}}, "54": {"289": {"return": {"weight": 1}, "is_of_type": {"weight": 6}, "has_parameter": {"weight": 3.5}}, "286": {"return": {"weight": 3}, "is_of_type": {"weight": 8}, "has_parameter": {"weight": 3.5}}, "272": {"return": {"weight": 1}, "is_of_type": {"weight": 2}}, "281": {"return": {"weight": 1}, "is_of_type": {"weight": 2}}, "266": {"return": {"weight": 1}, "is_of_type": {"weight": 2}}, "256": {"return": {"weight": 1}, "is_of_type": {"weight": 2}}, "234": {"return": {"weight": 1}, "is_of_type": {"weight": 10}}, "87": {"implement": {"weight": 2}}, "4": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "67": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "69": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "13": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "88": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "83": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "58": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "76": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "3": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "229": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 7.0}}, "225": {"is_of_type": {"weight": 8}, "has_parameter": {"weight": 10.5}}, "210": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}, "219": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}, "258": {"is_of_type": {"weight": 8}}, "202": {"is_of_type": {"weight": 10}, "has_parameter": {"weight": 10.5}}, "218": {"is_of_type": {"weight": 2}}, "221": {"is_of_type": {"weight": 2}}, "235": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}, "236": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}}, "58": {"272": {"return": {"weight": 4}}, "271": {"return": {"weight": 1}}, "206": {"return": {"weight": 1}}, "210": {"return": {"weight": 1}, "implement": {"weight": 2}, "is_of_type": {"weight": 36}, "has_parameter": {"weight": 31.5}}, "11": {"implement": {"weight": 2}}, "211": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}}, "59": {"206": {"return": {"weight": 1}, "is_of_type": {"weight": 8}, "has_parameter": {"weight": 7.0}}, "211": {"return": {"weight": 1}, "implement": {"weight": 2}}, "11": {"implement": {"weight": 2}}, "210": {"is_of_type": {"weight": 12}, "has_parameter": {"weight": 10.5}}}, "65": {"263": {"return": {"weight": 1}}, "292": {"return": {"weight": 1}}, "234": {"is_of_type": {"weight": 6}, "has_parameter": {"weight": 7.0}}}, "66": {"276": {"return": {"weight": 1}}}, "67": {"218": {"return": {"weight": 1}, "implement": {"weight": 2}, "is_of_type": {"weight": 20}, "has_parameter": {"weight": 21.0}}, "277": {"return": {"weight": 1}}, "11": {"implement": {"weight": 2}}}, "69": {"281": {"return": {"weight": 2}}, "280": {"return": {"weight": 1}}, "219": {"return": {"weight": 3}, "implement": {"weight": 2}, "is_of_type": {"weight": 26}, "has_parameter": {"weight": 24.5}}, "11": {"implement": {"weight": 2}}, "315": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}}, "72": {"215": {"return": {"weight": 1}}}, "76": {"225": {"return": {"weight": 11}, "implement": {"weight": 2}, "is_of_type": {"weight": 86}, "has_parameter": {"weight": 77.0}}, "316": {"return": {"weight": 1}}, "286": {"return": {"weight": 1}}, "11": {"implement": {"weight": 2}}, "202": {"is_of_type": {"weight": 32}, "has_parameter": {"weight": 28.0}}, "210": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "234": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}}, "78": {"286": {"return": {"weight": 1}}, "287": {"return": {"weight": 1}}, "315": {"is_of_type": {"weight": 6}, "has_parameter": {"weight": 7.0}}, "219": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "225": {"is_of_type": {"weight": 44}, "has_parameter": {"weight": 38.5}}}, "79": {"228": {"return": {"weight": 2}}, "202": {"is_of_type": {"weight": 34}, "has_parameter": {"weight": 31.5}}, "225": {"is_of_type": {"weight": 40}, "has_parameter": {"weight": 35.0}}}, "80": {"275": {"return": {"weight": 1}}, "225": {"is_of_type": {"weight": 30}, "has_parameter": {"weight": 28.0}}, "202": {"is_of_type": {"weight": 10}, "has_parameter": {"weight": 10.5}}, "317": {"has_parameter": {"weight": 3.5}}}, "81": {"229": {"return": {"weight": 6}, "implement": {"weight": 2}, "is_of_type": {"weight": 42}, "has_parameter": {"weight": 38.5}}, "11": {"implement": {"weight": 2}}, "234": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}}, "82": {"229": {"return": {"weight": 1}, "is_of_type": {"weight": 2}, "has_parameter": {"weight": 7.0}}}, "83": {"232": {"return": {"weight": 2}, "implement": {"weight": 2}, "is_of_type": {"weight": 2}, "has_parameter": {"weight": 7.0}}, "11": {"implement": {"weight": 2}}, "84": {"has_parameter": {"weight": 3.5}}}, "85": {"319": {"return": {"weight": 1}, "is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "262": {"has_parameter": {"weight": 3.5}}}, "87": {"289": {"return": {"weight": 1}}, "286": {"return": {"weight": 2}}, "272": {"return": {"weight": 1}}, "281": {"return": {"weight": 1}}, "266": {"return": {"weight": 1}}, "256": {"return": {"weight": 1}}, "229": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 7.0}}, "225": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 7.0}}, "210": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "219": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "202": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "235": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "236": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}}, "88": {"234": {"return": {"weight": 3}, "implement": {"weight": 2}, "is_of_type": {"weight": 10}, "has_parameter": {"weight": 10.5}}, "206": {"return": {"weight": 1}}, "11": {"implement": {"weight": 2}}}, "89": {"237": {"return": {"weight": 1}, "implement": {"weight": 2}, "is_of_type": {"weight": 8}, "has_parameter": {"weight": 7.0}}, "11": {"implement": {"weight": 2}}, "200": {"is_of_type": {"weight": 8}, "has_parameter": {"weight": 7.0}}}, "93": {"94": {"return": {"weight": 1}}}, "94": {}, "98": {"92": {"return": {"weight": 1}}, "95": {"return": {"weight": 1}}, "302": {"return": {"weight": 1}}}, "92": {}, "95": {}, "302": {}, "108": {"203": {"return": {"weight": 1}, "implement": {"weight": 2}}, "311": {"return": {"weight": 1}}, "110": {"implement": {"weight": 2}}}, "203": {"219": {"return": {"weight": 1}, "is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}}, "311": {}, "155": {"225": {"return": {"weight": 1}, "implement": {"weight": 2}}, "149": {"implement": {"weight": 2}}, "234": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}}, "159": {"210": {"return": {"weight": 2}, "implement": {"weight": 2}, "is_of_type": {"weight": 22}, "has_parameter": {"weight": 21.0}}, "110": {"implement": {"weight": 2}}, "234": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}}, "160": {"211": {"return": {"weight": 2}, "implement": {"weight": 2}}, "110": {"implement": {"weight": 2}}}, "164": {"219": {"return": {"weight": 2}, "implement": {"weight": 2}, "is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}, "280": {"return": {"weight": 1}}, "110": {"implement": {"weight": 2}}, "234": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}}, "165": {"222": {"return": {"weight": 1}, "implement": {"weight": 2}}, "110": {"implement": {"weight": 2}}}, "170": {"228": {"return": {"weight": 1}, "implement": {"weight": 2}}, "110": {"implement": {"weight": 2}}, "202": {"is_of_type": {"weight": 6}, "has_parameter": {"weight": 7.0}}, "225": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 10.5}}}, "173": {"232": {"return": {"weight": 1}, "implement": {"weight": 2}}, "110": {"implement": {"weight": 2}}}, "174": {"234": {"return": {"weight": 2}, "implement": {"weight": 2}}, "110": {"implement": {"weight": 2}}}, "175": {"235": {"return": {"weight": 2}, "implement": {"weight": 2}}, "110": {"implement": {"weight": 2}}, "234": {"is_of_type": {"weight": 14}, "has_parameter": {"weight": 14.0}}, "229": {"is_of_type": {"weight": 8}, "has_parameter": {"weight": 7.0}}}, "176": {"236": {"return": {"weight": 2}, "implement": {"weight": 2}}, "110": {"implement": {"weight": 2}}, "234": {"is_of_type": {"weight": 14}, "has_parameter": {"weight": 14.0}}, "225": {"is_of_type": {"weight": 8}, "has_parameter": {"weight": 7.0}}}, "182": {"8": {"return": {"weight": 1}, "is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "195": {"is_of_type": {"weight": 4}}}, "223": {}, "207": {"234": {"return": {"weight": 1}, "is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}}, "208": {"234": {"return": {"weight": 1}, "is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}}, "212": {"234": {"return": {"weight": 1}, "is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "225": {"return": {"weight": 1}, "is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "215": {"implement": {"weight": 2}}}, "214": {"234": {"return": {"weight": 1}, "is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}}, "226": {"225": {"return": {"weight": 1}, "is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "234": {"return": {"weight": 1}, "is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}}, "241": {"234": {"return": {"weight": 1}, "is_of_type": {"weight": 2}}, "88": {"is_of_type": {"weight": 2}}}, "242": {"272": {"return": {"weight": 1}}, "58": {"is_of_type": {"weight": 2}}}, "243": {"218": {"return": {"weight": 1}}, "259": {"return": {"weight": 2}, "is_of_type": {"weight": 4}}, "67": {"is_of_type": {"weight": 2}}}, "259": {"260": {"has_parameter": {"weight": 3.5}}}, "244": {"281": {"return": {"weight": 1}}, "259": {"return": {"weight": 2}, "is_of_type": {"weight": 4}}, "69": {"is_of_type": {"weight": 2}}}, "245": {"225": {"return": {"weight": 1}}, "76": {"is_of_type": {"weight": 2}}}, "246": {"290": {"return": {"weight": 1}, "is_of_type": {"weight": 2}}, "85": {"is_of_type": {"weight": 2}}}, "290": {"262": {"has_parameter": {"weight": 3.5}}}, "252": {"234": {"return": {"weight": 2}, "is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "247": {"is_of_type": {"weight": 2}}, "88": {"is_of_type": {"weight": 2}}}, "255": {"215": {"return": {"weight": 1}, "is_of_type": {"weight": 6}, "has_parameter": {"weight": 7.0}}, "199": {"return": {"weight": 1}, "is_of_type": {"weight": 6}, "has_parameter": {"weight": 7.0}}}, "199": {}, "267": {"199": {"return": {"weight": 1}, "is_of_type": {"weight": 6}, "has_parameter": {"weight": 7.0}}}, "283": {"215": {"return": {"weight": 1}, "is_of_type": {"weight": 6}, "has_parameter": {"weight": 7.0}}}, "284": {"225": {"return": {"weight": 1}, "is_of_type": {"weight": 6}, "has_parameter": {"weight": 7.0}}}, "305": {"206": {"return": {"weight": 1}, "is_of_type": {"weight": 4}, "has_parameter": {"weight": 7.0}}, "223": {"return": {"weight": 1}, "is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}, "306": {"is_of_type": {"weight": 2}}}, "307": {"274": {"return": {"weight": 4}, "is_of_type": {"weight": 24}, "has_parameter": {"weight": 10.5}}, "202": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}, "225": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 7.0}}, "219": {"is_of_type": {"weight": 6}, "has_parameter": {"weight": 10.5}}, "210": {"is_of_type": {"weight": 6}, "has_parameter": {"weight": 10.5}}}, "320": {"234": {"return": {"weight": 1}}, "229": {"return": {"weight": 1}, "is_of_type": {"weight": 2}}, "225": {"return": {"weight": 1}, "is_of_type": {"weight": 2}}, "210": {"return": {"weight": 1}, "is_of_type": {"weight": 2}}, "219": {"return": {"weight": 1}, "is_of_type": {"weight": 2}}, "218": {"return": {"weight": 1}, "is_of_type": {"weight": 2}}, "209": {"is_of_type": {"weight": 2}}, "231": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}, "204": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}, "227": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}, "202": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}}, "329": {"206": {"return": {"weight": 1}, "is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}}, "332": {"201": {"return": {"weight": 1}, "is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "358": {"implement": {"weight": 2}}, "2": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}}, "335": {"202": {"return": {"weight": 1}, "is_of_type": {"weight": 4}}, "4": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "58": {"is_of_type": {"weight": 2}}, "3": {"is_of_type": {"weight": 2}}}, "341": {"234": {"return": {"weight": 3}, "is_of_type": {"weight": 14}, "has_parameter": {"weight": 3.5}}, "229": {"return": {"weight": 1}, "is_of_type": {"weight": 10}, "has_parameter": {"weight": 3.5}}, "225": {"return": {"weight": 1}, "is_of_type": {"weight": 10}, "has_parameter": {"weight": 3.5}}, "6": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "88": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "81": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "76": {"is_of_type": {"weight": 2}}, "87": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "83": {"is_of_type": {"weight": 2}}, "256": {"is_of_type": {"weight": 10}, "has_parameter": {"weight": 3.5}}, "286": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 7.0}}}, "348": {"207": {"return": {"weight": 1}, "is_of_type": {"weight": 4}, "has_parameter": {"weight": 7.0}}, "358": {"implement": {"weight": 2}}, "12": {"is_of_type": {"weight": 2}}, "88": {"is_of_type": {"weight": 2}}, "234": {"is_of_type": {"weight": 2}}}, "349": {"209": {"return": {"weight": 1}, "is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "268": {"return": {"weight": 1}, "is_of_type": {"weight": 2}}, "340": {"implement": {"weight": 2}}, "358": {"implement": {"weight": 2}}, "13": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}}, "268": {}, "350": {"210": {"return": {"weight": 1}, "is_of_type": {"weight": 4}, "has_parameter": {"weight": 7.0}}, "271": {"return": {"weight": 1}, "is_of_type": {"weight": 2}}, "202": {"return": {"weight": 1}, "is_of_type": {"weight": 2}}, "338": {"implement": {"weight": 2}}, "340": {"implement": {"weight": 2}}, "358": {"implement": {"weight": 2}}, "58": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "323": {"is_of_type": {"weight": 2}}, "76": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}}, "353": {"234": {"return": {"weight": 1}, "is_of_type": {"weight": 2}}, "73": {"is_of_type": {"weight": 2}}, "4": {"is_of_type": {"weight": 2}}, "88": {"is_of_type": {"weight": 2}}, "61": {"is_of_type": {"weight": 2}}, "214": {"is_of_type": {"weight": 2}}}, "357": {"237": {"return": {"weight": 2}, "is_of_type": {"weight": 8}, "has_parameter": {"weight": 7.0}}, "338": {"implement": {"weight": 2}}, "340": {"implement": {"weight": 2}}, "358": {"implement": {"weight": 2}}, "1": {"is_of_type": {"weight": 2}}, "89": {"is_of_type": {"weight": 2}}, "234": {"is_of_type": {"weight": 2}}}, "360": {"218": {"return": {"weight": 1}, "is_of_type": {"weight": 6}, "has_parameter": {"weight": 7.0}}, "338": {"implement": {"weight": 2}}, "340": {"implement": {"weight": 2}}, "358": {"implement": {"weight": 2}}, "67": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "58": {"is_of_type": {"weight": 2}}, "4": {"is_of_type": {"weight": 2}}, "76": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "3": {"is_of_type": {"weight": 2}}}, "361": {"219": {"return": {"weight": 1}, "is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "280": {"return": {"weight": 1}, "is_of_type": {"weight": 2}}, "338": {"implement": {"weight": 2}}, "340": {"implement": {"weight": 2}}, "358": {"implement": {"weight": 2}}, "69": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "76": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "58": {"is_of_type": {"weight": 2}}, "271": {"is_of_type": {"weight": 2}}, "272": {"has_parameter": {"weight": 3.5}}}, "362": {"276": {"return": {"weight": 1}, "is_of_type": {"weight": 2}}, "338": {"implement": {"weight": 2}}, "66": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "89": {"is_of_type": {"weight": 2}}}, "364": {"234": {"return": {"weight": 1}, "is_of_type": {"weight": 2}}, "88": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}}, "366": {"210": {"return": {"weight": 1}, "is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "271": {"return": {"weight": 1}, "is_of_type": {"weight": 2}}, "340": {"implement": {"weight": 2}}, "358": {"implement": {"weight": 2}}, "58": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}}, "373": {"202": {"return": {"weight": 1}, "is_of_type": {"weight": 8}, "has_parameter": {"weight": 3.5}}, "225": {"return": {"weight": 1}, "is_of_type": {"weight": 8}, "has_parameter": {"weight": 3.5}}, "316": {"return": {"weight": 1}, "is_of_type": {"weight": 2}}, "340": {"implement": {"weight": 2}}, "358": {"implement": {"weight": 2}}, "76": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "79": {"is_of_type": {"weight": 2}}, "4": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "228": {"is_of_type": {"weight": 2}}}, "374": {"225": {"return": {"weight": 2}, "is_of_type": {"weight": 34}, "has_parameter": {"weight": 14.0}}, "315": {"return": {"weight": 1}, "is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "287": {"return": {"weight": 1}, "is_of_type": {"weight": 2}}, "76": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "78": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "181": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}}, "315": {}, "375": {"315": {"return": {"weight": 1}, "is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "69": {"is_of_type": {"weight": 2}}, "79": {"is_of_type": {"weight": 2}}, "286": {"has_parameter": {"weight": 3.5}}}, "376": {"275": {"return": {"weight": 1}, "is_of_type": {"weight": 2}}, "202": {"return": {"weight": 1}, "is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "225": {"return": {"weight": 1}, "is_of_type": {"weight": 6}}, "80": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "76": {"is_of_type": {"weight": 2}}, "4": {"is_of_type": {"weight": 2}}, "58": {"is_of_type": {"weight": 2}}}, "383": {"229": {"return": {"weight": 1}, "is_of_type": {"weight": 6}, "has_parameter": {"weight": 3.5}}, "225": {"return": {"weight": 1}, "is_of_type": {"weight": 2}}, "340": {"implement": {"weight": 2}}, "358": {"implement": {"weight": 2}}, "81": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "87": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "78": {"is_of_type": {"weight": 2}}, "234": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}}, "384": {"229": {"return": {"weight": 1}, "is_of_type": {"weight": 4}, "has_parameter": {"weight": 7.0}}, "358": {"implement": {"weight": 2}}, "81": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "82": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "234": {"has_parameter": {"weight": 3.5}}}, "385": {"232": {"return": {"weight": 1}, "is_of_type": {"weight": 4}, "has_parameter": {"weight": 7.0}}, "234": {"return": {"weight": 1}, "is_of_type": {"weight": 2}}, "340": {"implement": {"weight": 2}}, "358": {"implement": {"weight": 2}}, "83": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "88": {"is_of_type": {"weight": 2}}}, "386": {"85": {"return": {"weight": 1}, "is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "67": {"return": {"weight": 1}, "is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "86": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "88": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "4": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "3": {"is_of_type": {"weight": 2}}, "234": {"is_of_type": {"weight": 4}}, "262": {"has_parameter": {"weight": 3.5}}}, "387": {"234": {"return": {"weight": 2}, "is_of_type": {"weight": 8}, "has_parameter": {"weight": 7.0}}, "340": {"implement": {"weight": 2}}, "358": {"implement": {"weight": 2}}, "88": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "83": {"is_of_type": {"weight": 2}}}, "388": {"263": {"return": {"weight": 1}, "is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "292": {"return": {"weight": 1}, "is_of_type": {"weight": 2}}, "65": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "88": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "234": {"is_of_type": {"weight": 4}}}, "389": {"200": {"return": {"weight": 1}, "is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "340": {"implement": {"weight": 2}}, "1": {"is_of_type": {"weight": 2}}}, "401": {"209": {"return": {"weight": 1}, "is_of_type": {"weight": 34}, "has_parameter": {"weight": 7.0}}, "25": {"is_of_type": {"weight": 2}}, "109": {"is_of_type": {"weight": 2}}, "158": {"is_of_type": {"weight": 2}}, "76": {"is_of_type": {"weight": 2}}, "88": {"is_of_type": {"weight": 2}}, "81": {"is_of_type": {"weight": 2}}, "4": {"is_of_type": {"weight": 2}}, "210": {"is_of_type": {"weight": 10}}, "234": {"is_of_type": {"weight": 4}}, "225": {"is_of_type": {"weight": 4}}, "227": {"is_of_type": {"weight": 2}}, "229": {"is_of_type": {"weight": 4}}, "231": {"is_of_type": {"weight": 2}}, "204": {"is_of_type": {"weight": 2}}}, "414": {"415": {"return": {"weight": 1}}, "38": {"is_of_type": {"weight": 2}}, "73": {"is_of_type": {"weight": 2}}, "164": {"is_of_type": {"weight": 2}}, "219": {"is_of_type": {"weight": 10}}}, "415": {"219": {"return": {"weight": 1}, "is_of_type": {"weight": 2}}}, "420": {"222": {"return": {"weight": 1}, "is_of_type": {"weight": 28}, "has_parameter": {"weight": 3.5}}, "165": {"is_of_type": {"weight": 2}}, "41": {"is_of_type": {"weight": 2}}}, "435": {"258": {"return": {"weight": 1}, "is_of_type": {"weight": 10}, "has_parameter": {"weight": 3.5}}, "54": {"is_of_type": {"weight": 2}}, "13": {"is_of_type": {"weight": 2}}, "88": {"is_of_type": {"weight": 2}}, "83": {"is_of_type": {"weight": 2}}, "4": {"is_of_type": {"weight": 2}}, "67": {"is_of_type": {"weight": 2}}, "69": {"is_of_type": {"weight": 2}}, "58": {"is_of_type": {"weight": 2}}, "3": {"is_of_type": {"weight": 2}}, "219": {"is_of_type": {"weight": 6}}, "210": {"is_of_type": {"weight": 20}}, "225": {"is_of_type": {"weight": 10}}, "229": {"is_of_type": {"weight": 12}}, "234": {"is_of_type": {"weight": 18}}, "232": {"is_of_type": {"weight": 6}}, "76": {"is_of_type": {"weight": 2}}, "289": {"is_of_type": {"weight": 2}}, "316": {"is_of_type": {"weight": 2}}, "286": {"is_of_type": {"weight": 2}}, "272": {"is_of_type": {"weight": 2}}, "281": {"is_of_type": {"weight": 2}}, "202": {"is_of_type": {"weight": 14}}, "218": {"is_of_type": {"weight": 12}}, "235": {"is_of_type": {"weight": 4}}, "266": {"is_of_type": {"weight": 4}}}, "258": {}, "502": {"234": {"return": {"weight": 1}, "is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "88": {"is_of_type": {"weight": 2}}, "64": {"is_of_type": {"weight": 2}}, "356": {"is_of_type": {"weight": 2}}}, "16": {"3": {"implement": {"weight": 2}}, "4": {"is_of_type": {"weight": 2}}, "58": {"is_of_type": {"weight": 2}}, "88": {"is_of_type": {"weight": 2}}, "234": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 7.0}}, "218": {"is_of_type": {"weight": 2}}, "210": {"is_of_type": {"weight": 2}}, "232": {"is_of_type": {"weight": 4}}}, "3": {"234": {"is_of_type": {"weight": 6}, "has_parameter": {"weight": 7.0}}}, "5": {"11": {"implement": {"weight": 2}}, "203": {"implement": {"weight": 2}}}, "10": {}, "11": {}, "74": {"11": {"implement": {"weight": 2}}, "226": {"implement": {"weight": 2}}, "225": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}, "234": {"is_of_type": {"weight": 8}, "has_parameter": {"weight": 7.0}}}, "73": {"11": {"implement": {"weight": 2}}, "222": {"implement": {"weight": 2}}}, "61": {"11": {"implement": {"weight": 2}}, "214": {"implement": {"weight": 2}}, "234": {"is_of_type": {"weight": 6}, "has_parameter": {"weight": 7.0}}}, "60": {"11": {"implement": {"weight": 2}}, "212": {"implement": {"weight": 2}, "has_parameter": {"weight": 3.5}}}, "13": {"11": {"implement": {"weight": 2}}, "209": {"implement": {"weight": 2}, "is_of_type": {"weight": 10}, "has_parameter": {"weight": 10.5}}, "210": {"is_of_type": {"weight": 12}, "has_parameter": {"weight": 10.5}}, "202": {"is_of_type": {"weight": 8}, "has_parameter": {"weight": 7.0}}, "225": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}}, "12": {"11": {"implement": {"weight": 2}}, "207": {"implement": {"weight": 2}}, "234": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}}, "57": {"210": {"is_of_type": {"weight": 10}, "has_parameter": {"weight": 10.5}}}, "62": {"234": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}}, "32": {"63": {"implement": {"weight": 2}}, "217": {"is_of_type": {"weight": 14}, "has_parameter": {"weight": 24.5}}, "216": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 7.0}}, "225": {"is_of_type": {"weight": 2}}, "229": {"is_of_type": {"weight": 2}}}, "63": {"217": {"is_of_type": {"weight": 6}, "has_parameter": {"weight": 7.0}}}, "33": {"64": {"implement": {"weight": 2}}, "174": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "234": {"is_of_type": {"weight": 2}}}, "64": {}, "68": {"219": {"is_of_type": {"weight": 6}, "has_parameter": {"weight": 7.0}}}, "39": {"70": {"implement": {"weight": 2}}, "220": {"is_of_type": {"weight": 22}, "has_parameter": {"weight": 42.0}}, "71": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}}, "70": {"220": {"is_of_type": {"weight": 12}, "has_parameter": {"weight": 14.0}}, "71": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}}, "43": {"75": {"implement": {"weight": 2}}, "76": {"is_of_type": {"weight": 2}}, "60": {"is_of_type": {"weight": 2}}, "225": {"has_parameter": {"weight": 7.0}}}, "75": {}, "45": {"77": {"implement": {"weight": 2}}, "315": {"is_of_type": {"weight": 10}, "has_parameter": {"weight": 17.5}}, "286": {"is_of_type": {"weight": 2}}, "225": {"is_of_type": {"weight": 14}, "has_parameter": {"weight": 31.5}}}, "77": {"315": {"is_of_type": {"weight": 6}, "has_parameter": {"weight": 7.0}}, "225": {"has_parameter": {"weight": 7.0}}}, "86": {}, "105": {"110": {"implement": {"weight": 2}}, "200": {"implement": {"weight": 2}}}, "106": {"110": {"implement": {"weight": 2}}, "201": {"implement": {"weight": 2}}, "234": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}}, "107": {"110": {"implement": {"weight": 2}}, "202": {"implement": {"weight": 2}, "is_of_type": {"weight": 6}, "has_parameter": {"weight": 7.0}}}, "109": {"110": {"implement": {"weight": 2}}, "204": {"implement": {"weight": 2}}, "202": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}}, "468": {"110": {"implement": {"weight": 2}}, "470": {"implement": {"weight": 2}}}, "110": {}, "177": {"110": {"implement": {"weight": 2}}, "237": {"implement": {"weight": 2}}}, "172": {"110": {"implement": {"weight": 2}}, "231": {"implement": {"weight": 2}}, "229": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}}, "169": {"110": {"implement": {"weight": 2}}, "227": {"implement": {"weight": 2}}}, "166": {"110": {"implement": {"weight": 2}}, "226": {"implement": {"weight": 2}}, "234": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}}, "163": {"110": {"implement": {"weight": 2}}, "218": {"implement": {"weight": 2}, "is_of_type": {"weight": 8}, "has_parameter": {"weight": 7.0}}}, "162": {"110": {"implement": {"weight": 2}}, "214": {"implement": {"weight": 2}}, "234": {"is_of_type": {"weight": 6}, "has_parameter": {"weight": 7.0}}}, "161": {"110": {"implement": {"weight": 2}}, "212": {"implement": {"weight": 2}}, "225": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}}, "158": {"110": {"implement": {"weight": 2}}, "209": {"implement": {"weight": 2}}, "234": {"is_of_type": {"weight": 6}, "has_parameter": {"weight": 7.0}}}, "157": {"110": {"implement": {"weight": 2}}, "207": {"implement": {"weight": 2}}, "234": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}}, "148": {"149": {"implement": {"weight": 2}}, "202": {"implement": {"weight": 2}, "is_of_type": {"weight": 10}, "has_parameter": {"weight": 10.5}}}, "156": {"149": {"implement": {"weight": 2}}, "210": {"implement": {"weight": 2}, "is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}}, "149": {}, "168": {"219": {"is_of_type": {"weight": 20}, "has_parameter": {"weight": 17.5}}, "210": {"is_of_type": {"weight": 8}, "has_parameter": {"weight": 7.0}}}, "184": {}, "185": {"184": {"implement": {"weight": 2}}}, "213": {}, "480": {"215": {"implement": {"weight": 2}}}, "479": {"215": {"implement": {"weight": 2}}, "308": {"is_of_type": {"weight": 2}}, "480": {"is_of_type": {"weight": 8}}}, "308": {"215": {"implement": {"weight": 2}, "is_of_type": {"weight": 4}, "has_parameter": {"weight": 7.0}}}, "220": {}, "282": {"221": {"implement": {"weight": 2}}}, "221": {}, "314": {"225": {"implement": {"weight": 2}, "is_of_type": {"weight": 4}, "has_parameter": {"weight": 7.0}}}, "230": {"229": {"has_parameter": {"weight": 3.5}}}, "233": {}, "273": {"286": {"has_parameter": {"weight": 3.5}}}, "321": {"320": {"implement": {"weight": 2}, "is_of_type": {"weight": 4}, "has_parameter": {"weight": 7.0}}, "308": {"is_of_type": {"weight": 2}}}, "338": {}, "340": {}, "330": {"340": {"implement": {"weight": 2}}, "358": {"implement": {"weight": 2}}}, "506": {"358": {"implement": {"weight": 2}}}, "358": {}, "505": {"358": {"implement": {"weight": 2}}}, "504": {"358": {"implement": {"weight": 4}}, "359": {"is_of_type": {"weight": 2}}, "505": {"is_of_type": {"weight": 2}}, "506": {"is_of_type": {"weight": 2}}}, "470": {}, "323": {"58": {"is_of_type": {"weight": 2}}}, "264": {}, "217": {}, "216": {}, "269": {"261": {"has_parameter": {"weight": 3.5}}}, "298": {}, "71": {}, "125": {"126": {"is_of_type": {"weight": 2}}}, "126": {"63": {"is_of_type": {"weight": 2}}, "217": {"is_of_type": {"weight": 4}}}, "291": {"206": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "210": {"is_of_type": {"weight": 2}}}, "150": {"199": {"is_of_type": {"weight": 2}}, "234": {"is_of_type": {"weight": 2}}}, "195": {}, "196": {"7": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}, "182": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}, "197": {"is_of_type": {"weight": 2}}}, "197": {"7": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}, "182": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}, "8": {"is_of_type": {"weight": 2}}}, "239": {"58": {"is_of_type": {"weight": 2}}}, "240": {"58": {"is_of_type": {"weight": 2}}}, "247": {"234": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}}, "248": {"88": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "234": {"is_of_type": {"weight": 2}}}, "253": {"88": {"is_of_type": {"weight": 2}}, "234": {"is_of_type": {"weight": 2}}}, "260": {"202": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 7.0}}}, "293": {"294": {"is_of_type": {"weight": 8}, "has_parameter": {"weight": 3.5}}}, "294": {}, "296": {"4": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}}, "306": {}, "324": {"325": {"is_of_type": {"weight": 2}}}, "325": {}, "327": {"88": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}}, "331": {"178": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 7.0}}}, "178": {}, "333": {"4": {"is_of_type": {"weight": 2}}, "58": {"is_of_type": {"weight": 2}}, "3": {"is_of_type": {"weight": 2}}, "234": {"is_of_type": {"weight": 4}}, "366": {"is_of_type": {"weight": 2}}}, "334": {"87": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}}, "336": {"57": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "68": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "58": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "69": {"is_of_type": {"weight": 2}}, "210": {"is_of_type": {"weight": 12}}, "219": {"is_of_type": {"weight": 4}}}, "337": {"338": {"is_of_type": {"weight": 2}}}, "342": {"196": {"is_of_type": {"weight": 2}}, "7": {"is_of_type": {"weight": 2}}, "182": {"is_of_type": {"weight": 2}}, "67": {"is_of_type": {"weight": 2}}, "58": {"is_of_type": {"weight": 2}}, "88": {"is_of_type": {"weight": 2}}, "8": {"is_of_type": {"weight": 2}}}, "344": {"10": {"is_of_type": {"weight": 2}}}, "347": {"306": {"is_of_type": {"weight": 2}}, "206": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}, "221": {"is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}, "215": {"has_parameter": {"weight": 3.5}}, "255": {"has_parameter": {"weight": 7.0}}}, "351": {"58": {"is_of_type": {"weight": 2}}, "210": {"is_of_type": {"weight": 4}}}, "352": {"60": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}}, "354": {"62": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}}, "355": {"75": {"is_of_type": {"weight": 2}}}, "356": {"64": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "88": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "234": {"is_of_type": {"weight": 2}}}, "359": {"358": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}}, "363": {"72": {"is_of_type": {"weight": 2}}, "215": {"is_of_type": {"weight": 4}}, "202": {"is_of_type": {"weight": 4}}, "229": {"is_of_type": {"weight": 4}}, "225": {"is_of_type": {"weight": 4}}}, "365": {"76": {"is_of_type": {"weight": 2}}, "81": {"is_of_type": {"weight": 2}}, "225": {"is_of_type": {"weight": 2}}, "210": {"is_of_type": {"weight": 2}}, "229": {"is_of_type": {"weight": 2}}}, "367": {"72": {"is_of_type": {"weight": 2}}}, "368": {"4": {"is_of_type": {"weight": 2}}, "58": {"is_of_type": {"weight": 2}}, "76": {"is_of_type": {"weight": 2}}, "81": {"is_of_type": {"weight": 2}}, "88": {"is_of_type": {"weight": 2}}, "3": {"is_of_type": {"weight": 2}}, "234": {"is_of_type": {"weight": 4}}, "225": {"is_of_type": {"weight": 4}}, "229": {"is_of_type": {"weight": 2}}}, "369": {"73": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}}, "370": {"73": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}}, "371": {"13": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "264": {"has_parameter": {"weight": 3.5}}, "209": {"has_parameter": {"weight": 3.5}}}, "372": {"74": {"is_of_type": {"weight": 2}}}, "181": {"317": {"has_parameter": {"weight": 3.5}}}, "396": {"15": {"is_of_type": {"weight": 2}}, "88": {"is_of_type": {"weight": 2}}, "106": {"is_of_type": {"weight": 2}}, "201": {"is_of_type": {"weight": 8}}, "210": {"is_of_type": {"weight": 4}}, "234": {"is_of_type": {"weight": 10}}, "219": {"is_of_type": {"weight": 2}}, "218": {"is_of_type": {"weight": 2}}, "223": {"is_of_type": {"weight": 6}}}, "398": {"108": {"is_of_type": {"weight": 2}}, "168": {"is_of_type": {"weight": 2}}, "18": {"is_of_type": {"weight": 2}}, "107": {"is_of_type": {"weight": 2}}, "203": {"is_of_type": {"weight": 4}}, "219": {"is_of_type": {"weight": 6}}, "210": {"is_of_type": {"weight": 4}}, "218": {"is_of_type": {"weight": 2}}}, "399": {"19": {"is_of_type": {"weight": 2}}, "171": {"is_of_type": {"weight": 2}}, "175": {"is_of_type": {"weight": 2}}, "70": {"is_of_type": {"weight": 2}}, "81": {"is_of_type": {"weight": 2}}, "229": {"is_of_type": {"weight": 6}}, "225": {"is_of_type": {"weight": 4}}, "234": {"is_of_type": {"weight": 2}}, "218": {"is_of_type": {"weight": 2}}, "235": {"is_of_type": {"weight": 4}}, "87": {"is_of_type": {"weight": 2}}, "170": {"is_of_type": {"weight": 2}}, "167": {"is_of_type": {"weight": 2}}, "256": {"is_of_type": {"weight": 4}}, "266": {"is_of_type": {"weight": 16}}}, "402": {"44": {"is_of_type": {"weight": 2}}, "225": {"is_of_type": {"weight": 4}}, "210": {"is_of_type": {"weight": 6}}}, "407": {"28": {"is_of_type": {"weight": 2}}, "160": {"is_of_type": {"weight": 2}}, "159": {"is_of_type": {"weight": 2}}, "210": {"is_of_type": {"weight": 2}}, "211": {"is_of_type": {"weight": 6}}, "206": {"is_of_type": {"weight": 2}}}, "409": {"31": {"is_of_type": {"weight": 2}}, "67": {"is_of_type": {"weight": 2}}, "58": {"is_of_type": {"weight": 2}}, "164": {"is_of_type": {"weight": 2}}, "159": {"is_of_type": {"weight": 2}}, "167": {"is_of_type": {"weight": 2}}, "87": {"is_of_type": {"weight": 2}}, "88": {"is_of_type": {"weight": 2}}, "3": {"is_of_type": {"weight": 2}}, "218": {"is_of_type": {"weight": 4}}, "219": {"is_of_type": {"weight": 8}}, "210": {"is_of_type": {"weight": 8}}, "234": {"is_of_type": {"weight": 4}}, "232": {"is_of_type": {"weight": 2}}, "225": {"is_of_type": {"weight": 2}}, "274": {"is_of_type": {"weight": 6}, "has_parameter": {"weight": 10.5}}}, "410": {"34": {"is_of_type": {"weight": 2}}, "88": {"is_of_type": {"weight": 2}}, "171": {"is_of_type": {"weight": 2}}, "167": {"is_of_type": {"weight": 2}}, "159": {"is_of_type": {"weight": 2}}, "106": {"is_of_type": {"weight": 2}}, "73": {"is_of_type": {"weight": 2}}, "234": {"is_of_type": {"weight": 2}}, "229": {"is_of_type": {"weight": 6}}, "210": {"is_of_type": {"weight": 24}}, "219": {"is_of_type": {"weight": 2}}, "225": {"is_of_type": {"weight": 2}}, "201": {"is_of_type": {"weight": 8}}, "270": {"is_of_type": {"weight": 12}}, "269": {"is_of_type": {"weight": 14}}, "291": {"is_of_type": {"weight": 10}}, "263": {"is_of_type": {"weight": 2}}, "292": {"is_of_type": {"weight": 2}}}, "411": {"35": {"is_of_type": {"weight": 2}}, "73": {"is_of_type": {"weight": 2}}, "164": {"is_of_type": {"weight": 2}}, "3": {"is_of_type": {"weight": 2}}, "219": {"is_of_type": {"weight": 4}}, "234": {"is_of_type": {"weight": 2}}, "201": {"is_of_type": {"weight": 2}}, "276": {"is_of_type": {"weight": 2}}, "281": {"is_of_type": {"weight": 4}}}, "418": {"39": {"is_of_type": {"weight": 2}}, "220": {"is_of_type": {"weight": 8}}}, "421": {"222": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}}, "424": {"44": {"is_of_type": {"weight": 2}}, "167": {"is_of_type": {"weight": 2}}, "159": {"is_of_type": {"weight": 2}}, "174": {"is_of_type": {"weight": 2}}, "59": {"is_of_type": {"weight": 4}}, "4": {"is_of_type": {"weight": 2}}, "5": {"is_of_type": {"weight": 2}}, "79": {"is_of_type": {"weight": 2}}, "87": {"is_of_type": {"weight": 2}}, "158": {"is_of_type": {"weight": 2}}, "81": {"is_of_type": {"weight": 2}}, "13": {"is_of_type": {"weight": 2}}, "78": {"is_of_type": {"weight": 2}}, "202": {"is_of_type": {"weight": 20}, "has_parameter": {"weight": 3.5}}, "210": {"is_of_type": {"weight": 12}}, "225": {"is_of_type": {"weight": 78}, "has_parameter": {"weight": 3.5}}, "234": {"is_of_type": {"weight": 6}}, "219": {"is_of_type": {"weight": 12}}, "218": {"is_of_type": {"weight": 2}}, "229": {"is_of_type": {"weight": 14}}, "227": {"is_of_type": {"weight": 2}}, "286": {"is_of_type": {"weight": 2}}, "228": {"is_of_type": {"weight": 4}}}, "425": {"45": {"is_of_type": {"weight": 2}}, "225": {"is_of_type": {"weight": 36}}, "315": {"is_of_type": {"weight": 14}}, "212": {"is_of_type": {"weight": 2}}, "202": {"is_of_type": {"weight": 4}}}, "427": {"47": {"is_of_type": {"weight": 2}}, "170": {"is_of_type": {"weight": 2}}, "202": {"is_of_type": {"weight": 6}}, "225": {"is_of_type": {"weight": 20}}, "228": {"is_of_type": {"weight": 10}}}, "430": {"50": {"is_of_type": {"weight": 2}}, "81": {"is_of_type": {"weight": 2}}, "210": {"is_of_type": {"weight": 2}}, "229": {"is_of_type": {"weight": 2}}, "225": {"is_of_type": {"weight": 2}}, "234": {"is_of_type": {"weight": 2}}}, "431": {"51": {"is_of_type": {"weight": 2}}, "173": {"is_of_type": {"weight": 2}}, "88": {"is_of_type": {"weight": 2}}, "232": {"is_of_type": {"weight": 8}}, "234": {"is_of_type": {"weight": 2}}}, "436": {"55": {"is_of_type": {"weight": 2}}, "174": {"is_of_type": {"weight": 2}}, "83": {"is_of_type": {"weight": 2}}, "234": {"is_of_type": {"weight": 32}}, "207": {"is_of_type": {"weight": 2}}, "232": {"is_of_type": {"weight": 4}}}, "462": {"251": {"is_of_type": {"weight": 2}}}, "251": {}, "472": {"296": {"is_of_type": {"weight": 2}}, "4": {"is_of_type": {"weight": 2}}, "202": {"is_of_type": {"weight": 4}}}, "473": {"474": {"is_of_type": {"weight": 10}}, "475": {"is_of_type": {"weight": 2}}, "206": {"is_of_type": {"weight": 4}}}, "478": {"306": {"is_of_type": {"weight": 2}}}, "481": {"317": {"is_of_type": {"weight": 4}}, "225": {"is_of_type": {"weight": 4}}}, "482": {"204": {"is_of_type": {"weight": 4}}, "227": {"is_of_type": {"weight": 4}}, "231": {"is_of_type": {"weight": 4}}, "319": {"is_of_type": {"weight": 2}}, "202": {"is_of_type": {"weight": 2}}, "225": {"is_of_type": {"weight": 2}}, "229": {"is_of_type": {"weight": 2}}, "322": {"is_of_type": {"weight": 12}}, "262": {"is_of_type": {"weight": 2}}, "285": {"is_of_type": {"weight": 2}}, "288": {"is_of_type": {"weight": 2}}}, "483": {"320": {"is_of_type": {"weight": 2}}, "210": {"is_of_type": {"weight": 2}}, "219": {"is_of_type": {"weight": 2}}, "218": {"is_of_type": {"weight": 2}}, "225": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "229": {"is_of_type": {"weight": 4}, "has_parameter": {"weight": 3.5}}, "202": {"is_of_type": {"weight": 6}, "has_parameter": {"weight": 10.5}}, "231": {"is_of_type": {"weight": 4}}, "227": {"is_of_type": {"weight": 2}}, "204": {"is_of_type": {"weight": 6}}}, "484": {"486": {"is_of_type": {"weight": 2}}, "433": {"is_of_type": {"weight": 2}}, "209": {"is_of_type": {"weight": 2}}}, "487": {"327": {"is_of_type": {"weight": 2}}, "88": {"is_of_type": {"weight": 2}}, "234": {"is_of_type": {"weight": 4}}}, "488": {"331": {"is_of_type": {"weight": 2}}, "178": {"is_of_type": {"weight": 4}}}, "489": {"332": {"is_of_type": {"weight": 2}}, "201": {"is_of_type": {"weight": 2}}, "2": {"is_of_type": {"weight": 2}}}, "490": {"334": {"is_of_type": {"weight": 2}}, "87": {"is_of_type": {"weight": 2}}, "258": {"is_of_type": {"weight": 2}}}, "491": {"335": {"is_of_type": {"weight": 2}}, "4": {"is_of_type": {"weight": 2}}, "218": {"is_of_type": {"weight": 2}}}, "492": {"336": {"is_of_type": {"weight": 2}}, "57": {"is_of_type": {"weight": 2}}, "58": {"is_of_type": {"weight": 2}}, "210": {"is_of_type": {"weight": 2}}}, "493": {"341": {"is_of_type": {"weight": 2}}, "6": {"is_of_type": {"weight": 2}}, "88": {"is_of_type": {"weight": 2}}, "81": {"is_of_type": {"weight": 2}}, "87": {"is_of_type": {"weight": 2}}, "234": {"is_of_type": {"weight": 14}}, "256": {"is_of_type": {"weight": 6}}, "229": {"is_of_type": {"weight": 8}}, "289": {"is_of_type": {"weight": 4}}, "235": {"is_of_type": {"weight": 2}}}, "495": {"349": {"is_of_type": {"weight": 2}}, "13": {"is_of_type": {"weight": 2}}, "209": {"is_of_type": {"weight": 6}}, "234": {"is_of_type": {"weight": 2}}}, "496": {"350": {"is_of_type": {"weight": 2}}, "58": {"is_of_type": {"weight": 2}}, "76": {"is_of_type": {"weight": 2}}, "219": {"is_of_type": {"weight": 4}}, "210": {"is_of_type": {"weight": 12}}, "272": {"is_of_type": {"weight": 2}}}, "500": {"354": {"is_of_type": {"weight": 2}}, "62": {"is_of_type": {"weight": 2}}}, "507": {"360": {"is_of_type": {"weight": 2}}, "67": {"is_of_type": {"weight": 2}}, "76": {"is_of_type": {"weight": 2}}, "218": {"is_of_type": {"weight": 2}}, "277": {"is_of_type": {"weight": 2}}}, "508": {"361": {"is_of_type": {"weight": 2}}, "69": {"is_of_type": {"weight": 2}}, "76": {"is_of_type": {"weight": 2}}, "219": {"is_of_type": {"weight": 6}}, "278": {"is_of_type": {"weight": 2}}, "280": {"is_of_type": {"weight": 2}}, "281": {"is_of_type": {"weight": 4}}, "218": {"is_of_type": {"weight": 4}}}, "278": {"225": {"has_parameter": {"weight": 3.5}}}, "513": {"369": {"is_of_type": {"weight": 2}}, "73": {"is_of_type": {"weight": 2}}}, "514": {"371": {"is_of_type": {"weight": 2}}, "13": {"is_of_type": {"weight": 2}}}, "519": {"384": {"is_of_type": {"weight": 2}}, "81": {"is_of_type": {"weight": 2}}, "82": {"is_of_type": {"weight": 2}}, "229": {"is_of_type": {"weight": 4}}}, "520": {"385": {"is_of_type": {"weight": 2}}, "83": {"is_of_type": {"weight": 2}}, "232": {"is_of_type": {"weight": 8}}, "234": {"is_of_type": {"weight": 4}}}, "521": {"386": {"is_of_type": {"weight": 2}}, "85": {"is_of_type": {"weight": 2}}, "67": {"is_of_type": {"weight": 2}}, "234": {"is_of_type": {"weight": 4}}, "88": {"is_of_type": {"weight": 2}}}, "522": {"387": {"is_of_type": {"weight": 2}}, "88": {"is_of_type": {"weight": 2}}, "234": {"is_of_type": {"weight": 6}}}, "523": {"388": {"is_of_type": {"weight": 2}}, "88": {"is_of_type": {"weight": 2}}, "65": {"is_of_type": {"weight": 2}}, "234": {"is_of_type": {"weight": 4}}, "263": {"is_of_type": {"weight": 2}}, "292": {"is_of_type": {"weight": 2}}}, "84": {}, "310": {}, "318": {"317": {"has_parameter": {"weight": 3.5}}}, "464": {"310": {"has_parameter": {"weight": 3.5}}}}, "_succ": {"py/id": 5262}, "_pred": {"23": {}, "56": {"23": {"py/id": 5264}, "437": {"py/id": 7184}}, "55": {"23": {"py/id": 5266}, "436": {"py/id": 10327}}, "51": {"23": {"py/id": 5268}, "431": {"py/id": 10316}}, "49": {"23": {"py/id": 5270}, "429": {"py/id": 7195}}, "44": {"23": {"py/id": 5272}, "402": {"py/id": 10113}, "423": {"py/id": 7264}, "424": {"py/id": 10232}}, "42": {"23": {"py/id": 5274}}, "41": {"23": {"py/id": 5276}, "420": {"py/id": 9365}}, "38": {"23": {"py/id": 5278}, "414": {"py/id": 9346}, "417": {"py/id": 7349}}, "36": {"23": {"py/id": 5280}, "412": {"py/id": 7402}}, "30": {"23": {"py/id": 5282}}, "29": {"23": {"py/id": 5284}, "408": {"py/id": 7437}}, "28": {"23": {"py/id": 5286}, "407": {"py/id": 10120}}, "27": {"23": {"py/id": 5288}, "404": {"py/id": 7515}, "406": {"py/id": 7450}}, "25": {"23": {"py/id": 5290}, "401": {"py/id": 9315}}, "24": {"23": {"py/id": 5292}, "400": {"py/id": 7576}}, "18": {"23": {"py/id": 5294}, "398": {"py/id": 10069}}, "17": {"23": {"py/id": 5296}, "397": {"py/id": 7583}}, "15": {"23": {"py/id": 5298}, "396": {"py/id": 10046}}, "14": {"23": {"py/id": 5300}, "395": {"py/id": 7612}}, "26": {"405": {"py/id": 5864}}, "405": {"26": {"py/id": 5833}}, "37": {}, "413": {"37": {"py/id": 5882}}, "52": {}, "432": {"52": {"py/id": 5900}}, "53": {}, "434": {"53": {"py/id": 5958}}, "117": {}, "469": {"117": {"py/id": 5992}}, "147": {"117": {"py/id": 5994}}, "146": {"117": {"py/id": 5996}}, "145": {"117": {"py/id": 5998}}, "142": {"117": {"py/id": 6000}}, "139": {"117": {"py/id": 6002}}, "138": {"117": {"py/id": 6004}}, "137": {"117": {"py/id": 6006}}, "134": {"117": {"py/id": 6008}}, "133": {"117": {"py/id": 6010}}, "132": {"117": {"py/id": 6012}}, "131": {"117": {"py/id": 6014}}, "130": {"117": {"py/id": 6016}}, "129": {"117": {"py/id": 6018}}, "128": {"117": {"py/id": 6020}}, "127": {"117": {"py/id": 6022}}, "124": {"117": {"py/id": 6024}}, "123": {"117": {"py/id": 6026}}, "122": {"117": {"py/id": 6028}}, "121": {"117": {"py/id": 6030}}, "119": {"117": {"py/id": 6032}}, "118": {"117": {"py/id": 6034}}, "115": {"117": {"py/id": 6036}}, "114": {"117": {"py/id": 6038}}, "113": {"117": {"py/id": 6040}}, "112": {"117": {"py/id": 6042}}, "111": {"117": {"py/id": 6044}}, "416": {"128": {"py/id": 6164}}, "143": {}, "136": {"143": {"py/id": 6268}}, "135": {"143": {"py/id": 6270}}, "152": {}, "154": {"152": {"py/id": 6275}}, "153": {"152": {"py/id": 6277}}, "151": {"152": {"py/id": 6279}}, "200": {"1": {"py/id": 7631}, "9": {"py/id": 7753}, "14": {"py/id": 5818}, "389": {"py/id": 9302}, "105": {"py/id": 9602}, "20": {"py/id": 7897}, "56": {"py/id": 5314}, "89": {"py/id": 8580}, "395": {"py/id": 7618}, "437": {"py/id": 7192}, "524": {"py/id": 7033}, "7": {"py/id": 7741}, "237": {"py/id": 6626}}, "193": {"200": {"py/id": 6314}}, "201": {"2": {"py/id": 7642}, "15": {"py/id": 5798}, "332": {"py/id": 8891}, "106": {"py/id": 9607}, "34": {"py/id": 8042}, "257": {"py/id": 6347}, "396": {"py/id": 10052}, "404": {"py/id": 7551}, "406": {"py/id": 7504}, "410": {"py/id": 10191}, "411": {"py/id": 10216}, "417": {"py/id": 7395}, "489": {"py/id": 10434}, "210": {"py/id": 6408}, "219": {"py/id": 6380}, "234": {"py/id": 6606}}, "257": {"201": {"py/id": 6324}, "404": {"py/id": 7511}, "27": {"py/id": 5686}}, "202": {"36": {"py/id": 5552}, "44": {"py/id": 5395}, "201": {"py/id": 6330}, "204": {"py/id": 6438}, "222": {"py/id": 8149}, "225": {"py/id": 6506}, "228": {"py/id": 8210}, "261": {"py/id": 6636}, "262": {"py/id": 6655}, "270": {"py/id": 6650}, "275": {"py/id": 8239}, "279": {"py/id": 6643}, "335": {"py/id": 8901}, "350": {"py/id": 8983}, "373": {"py/id": 9114}, "376": {"py/id": 9176}, "148": {"py/id": 9701}, "107": {"py/id": 9615}, "4": {"py/id": 7658}, "2": {"py/id": 7650}, "13": {"py/id": 9503}, "15": {"py/id": 5812}, "17": {"py/id": 5786}, "18": {"py/id": 5762}, "25": {"py/id": 5719}, "27": {"py/id": 5676}, "31": {"py/id": 7980}, "34": {"py/id": 8037}, "40": {"py/id": 8130}, "46": {"py/id": 8177}, "47": {"py/id": 8200}, "48": {"py/id": 8229}, "52": {"py/id": 5924}, "54": {"py/id": 8358}, "76": {"py/id": 8452}, "79": {"py/id": 8478}, "80": {"py/id": 8490}, "87": {"py/id": 8553}, "109": {"py/id": 9624}, "113": {"py/id": 6251}, "115": {"py/id": 6238}, "131": {"py/id": 6149}, "134": {"py/id": 6113}, "151": {"py/id": 6306}, "167": {"py/id": 8085}, "170": {"py/id": 8662}, "260": {"py/id": 9859}, "307": {"py/id": 8841}, "320": {"py/id": 8882}, "363": {"py/id": 9984}, "378": {"py/id": 6720}, "397": {"py/id": 7597}, "419": {"py/id": 7340}, "423": {"py/id": 7308}, "424": {"py/id": 10258}, "425": {"py/id": 10289}, "427": {"py/id": 10296}, "432": {"py/id": 5955}, "435": {"py/id": 9414}, "443": {"py/id": 6934}, "455": {"py/id": 6864}, "472": {"py/id": 10348}, "482": {"py/id": 10374}, "483": {"py/id": 10403}, "517": {"py/id": 7067}}, "219": {"202": {"py/id": 6351}, "38": {"py/id": 5490}, "69": {"py/id": 8427}, "128": {"py/id": 6166}, "164": {"py/id": 8638}, "203": {"py/id": 8606}, "279": {"py/id": 6639}, "320": {"py/id": 8865}, "361": {"py/id": 9055}, "392": {"py/id": 6760}, "415": {"py/id": 9355}, "416": {"py/id": 6264}, "9": {"py/id": 7763}, "18": {"py/id": 5764}, "20": {"py/id": 7902}, "37": {"py/id": 5888}, "46": {"py/id": 8171}, "48": {"py/id": 8232}, "54": {"py/id": 8353}, "68": {"py/id": 9552}, "78": {"py/id": 8469}, "87": {"py/id": 8550}, "132": {"py/id": 6125}, "168": {"py/id": 9714}, "281": {"py/id": 6489}, "307": {"py/id": 8847}, "336": {"py/id": 9914}, "396": {"py/id": 10058}, "397": {"py/id": 7599}, "398": {"py/id": 10075}, "403": {"py/id": 7569}, "406": {"py/id": 7484}, "409": {"py/id": 10153}, "410": {"py/id": 10187}, "411": {"py/id": 10212}, "412": {"py/id": 7424}, "414": {"py/id": 9352}, "417": {"py/id": 7379}, "423": {"py/id": 7304}, "424": {"py/id": 10268}, "426": {"py/id": 7253}, "429": {"py/id": 7224}, "432": {"py/id": 5939}, "434": {"py/id": 5971}, "435": {"py/id": 9390}, "441": {"py/id": 6945}, "451": {"py/id": 6895}, "454": {"py/id": 6874}, "483": {"py/id": 10393}, "496": {"py/id": 10498}, "508": {"py/id": 10527}, "7": {"py/id": 7747}, "35": {"py/id": 8104}, "276": {"py/id": 8107}}, "218": {"202": {"py/id": 6353}, "4": {"py/id": 7654}, "17": {"py/id": 5769}, "36": {"py/id": 5545}, "67": {"py/id": 8413}, "243": {"py/id": 8759}, "320": {"py/id": 8868}, "360": {"py/id": 9032}, "163": {"py/id": 9662}, "16": {"py/id": 9446}, "38": {"py/id": 5533}, "46": {"py/id": 8179}, "54": {"py/id": 8361}, "127": {"py/id": 6181}, "277": {"py/id": 6472}, "396": {"py/id": 10060}, "397": {"py/id": 7603}, "398": {"py/id": 10079}, "399": {"py/id": 10098}, "403": {"py/id": 7564}, "409": {"py/id": 10151}, "412": {"py/id": 7420}, "417": {"py/id": 7381}, "423": {"py/id": 7310}, "424": {"py/id": 10270}, "426": {"py/id": 7257}, "432": {"py/id": 5937}, "434": {"py/id": 5969}, "435": {"py/id": 9416}, "441": {"py/id": 6947}, "450": {"py/id": 6904}, "454": {"py/id": 6876}, "483": {"py/id": 10395}, "491": {"py/id": 10450}, "507": {"py/id": 10516}, "508": {"py/id": 10535}, "232": {"py/id": 8265}}, "210": {"202": {"py/id": 6355}, "27": {"py/id": 5639}, "58": {"py/id": 8378}, "121": {"py/id": 6208}, "159": {"py/id": 8621}, "211": {"py/id": 7935}, "225": {"py/id": 6510}, "229": {"py/id": 6560}, "270": {"py/id": 6646}, "320": {"py/id": 8862}, "350": {"py/id": 8976}, "366": {"py/id": 9099}, "391": {"py/id": 6773}, "156": {"py/id": 9708}, "4": {"py/id": 7662}, "9": {"py/id": 7766}, "13": {"py/id": 9500}, "16": {"py/id": 9448}, "17": {"py/id": 5792}, "20": {"py/id": 7900}, "25": {"py/id": 5736}, "26": {"py/id": 5857}, "28": {"py/id": 5624}, "34": {"py/id": 8025}, "36": {"py/id": 5575}, "40": {"py/id": 8133}, "44": {"py/id": 5449}, "49": {"py/id": 5384}, "52": {"py/id": 5919}, "54": {"py/id": 8350}, "57": {"py/id": 9518}, "59": {"py/id": 8398}, "76": {"py/id": 8455}, "87": {"py/id": 8547}, "131": {"py/id": 6146}, "132": {"py/id": 6128}, "137": {"py/id": 6102}, "154": {"py/id": 6288}, "167": {"py/id": 8082}, "168": {"py/id": 9717}, "171": {"py/id": 8066}, "272": {"py/id": 6451}, "291": {"py/id": 9811}, "307": {"py/id": 8850}, "336": {"py/id": 9912}, "351": {"py/id": 9953}, "365": {"py/id": 9997}, "396": {"py/id": 10054}, "397": {"py/id": 7601}, "398": {"py/id": 10077}, "401": {"py/id": 9329}, "402": {"py/id": 10117}, "403": {"py/id": 7571}, "404": {"py/id": 7553}, "405": {"py/id": 5874}, "406": {"py/id": 7482}, "407": {"py/id": 10126}, "409": {"py/id": 10155}, "410": {"py/id": 10185}, "412": {"py/id": 7426}, "417": {"py/id": 7393}, "419": {"py/id": 7342}, "423": {"py/id": 7302}, "424": {"py/id": 10261}, "429": {"py/id": 7209}, "430": {"py/id": 10307}, "432": {"py/id": 5941}, "434": {"py/id": 5973}, "435": {"py/id": 9392}, "447": {"py/id": 6919}, "454": {"py/id": 6878}, "456": {"py/id": 6855}, "483": {"py/id": 10391}, "492": {"py/id": 10459}, "496": {"py/id": 10500}, "497": {"py/id": 7170}, "498": {"py/id": 7163}, "515": {"py/id": 7097}, "518": {"py/id": 7050}, "7": {"py/id": 7749}, "232": {"py/id": 8267}}, "209": {"349": {"py/id": 8960}, "401": {"py/id": 9311}, "158": {"py/id": 9685}, "13": {"py/id": 9496}, "25": {"py/id": 5716}, "119": {"py/id": 6227}, "320": {"py/id": 8871}, "322": {"py/id": 6683}, "486": {"py/id": 6689}, "495": {"py/id": 10487}, "484": {"py/id": 10417}, "371": {"py/id": 10037}}, "231": {"209": {"py/id": 6417}, "172": {"py/id": 9641}, "25": {"py/id": 5731}, "229": {"py/id": 6578}, "319": {"py/id": 8288}, "320": {"py/id": 8873}, "401": {"py/id": 9339}, "429": {"py/id": 7222}, "432": {"py/id": 5933}, "434": {"py/id": 5983}, "482": {"py/id": 10370}, "483": {"py/id": 10406}}, "227": {"209": {"py/id": 6419}, "169": {"py/id": 9649}, "25": {"py/id": 5727}, "225": {"py/id": 6529}, "319": {"py/id": 8285}, "320": {"py/id": 8879}, "401": {"py/id": 9335}, "424": {"py/id": 10274}, "432": {"py/id": 5931}, "434": {"py/id": 5985}, "482": {"py/id": 10368}, "483": {"py/id": 10408}}, "204": {"209": {"py/id": 6421}, "109": {"py/id": 9622}, "25": {"py/id": 5722}, "319": {"py/id": 8282}, "320": {"py/id": 8876}, "401": {"py/id": 9341}, "406": {"py/id": 7498}, "412": {"py/id": 7428}, "417": {"py/id": 7399}, "432": {"py/id": 5929}, "434": {"py/id": 5981}, "482": {"py/id": 10366}, "483": {"py/id": 10410}, "202": {"py/id": 6363}}, "272": {"210": {"py/id": 6392}, "27": {"py/id": 5628}, "54": {"py/id": 8300}, "58": {"py/id": 8372}, "87": {"py/id": 8533}, "242": {"py/id": 8754}, "21": {"py/id": 7919}, "36": {"py/id": 5580}, "38": {"py/id": 5542}, "406": {"py/id": 7486}, "412": {"py/id": 7434}, "435": {"py/id": 9410}, "496": {"py/id": 10502}, "277": {"py/id": 6479}, "281": {"py/id": 6496}, "361": {"py/id": 9078}}, "224": {"210": {"py/id": 6394}}, "189": {"210": {"py/id": 6396}}, "277": {"218": {"py/id": 6385}, "36": {"py/id": 5549}, "67": {"py/id": 8418}, "412": {"py/id": 7430}, "507": {"py/id": 10518}}, "187": {"218": {"py/id": 6387}}, "281": {"219": {"py/id": 6368}, "38": {"py/id": 5487}, "54": {"py/id": 8303}, "69": {"py/id": 8423}, "87": {"py/id": 8535}, "244": {"py/id": 8770}, "35": {"py/id": 8102}, "411": {"py/id": 10220}, "412": {"py/id": 7432}, "417": {"py/id": 7391}, "435": {"py/id": 9412}, "508": {"py/id": 10533}, "277": {"py/id": 6477}}, "188": {"219": {"py/id": 6370}}, "225": {"44": {"py/id": 5391}, "76": {"py/id": 8441}, "153": {"py/id": 6296}, "155": {"py/id": 8612}, "212": {"py/id": 8727}, "226": {"py/id": 8739}, "227": {"py/id": 6433}, "228": {"py/id": 8206}, "229": {"py/id": 6564}, "236": {"py/id": 7725}, "245": {"py/id": 8778}, "275": {"py/id": 8235}, "284": {"py/id": 8821}, "285": {"py/id": 6698}, "317": {"py/id": 8248}, "320": {"py/id": 8859}, "341": {"py/id": 8920}, "373": {"py/id": 9118}, "374": {"py/id": 9140}, "376": {"py/id": 9180}, "383": {"py/id": 9197}, "393": {"py/id": 6747}, "314": {"py/id": 9746}, "167": {"py/id": 8077}, "6": {"py/id": 7685}, "9": {"py/id": 7757}, "13": {"py/id": 9506}, "17": {"py/id": 5795}, "19": {"py/id": 7823}, "20": {"py/id": 7894}, "25": {"py/id": 5724}, "27": {"py/id": 5691}, "29": {"py/id": 5604}, "32": {"py/id": 9534}, "40": {"py/id": 8141}, "42": {"py/id": 5466}, "45": {"py/id": 9589}, "46": {"py/id": 8174}, "47": {"py/id": 8197}, "48": {"py/id": 8226}, "49": {"py/id": 5381}, "52": {"py/id": 5914}, "54": {"py/id": 8347}, "74": {"py/id": 9468}, "78": {"py/id": 8472}, "79": {"py/id": 8481}, "80": {"py/id": 8487}, "87": {"py/id": 8544}, "121": {"py/id": 6217}, "123": {"py/id": 6193}, "132": {"py/id": 6131}, "134": {"py/id": 6116}, "137": {"py/id": 6105}, "146": {"py/id": 6062}, "151": {"py/id": 6311}, "154": {"py/id": 6291}, "161": {"py/id": 9679}, "170": {"py/id": 8665}, "171": {"py/id": 8069}, "176": {"py/id": 8701}, "286": {"py/id": 6549}, "307": {"py/id": 8844}, "363": {"py/id": 9988}, "365": {"py/id": 9995}, "368": {"py/id": 10019}, "397": {"py/id": 7605}, "399": {"py/id": 10094}, "401": {"py/id": 9333}, "402": {"py/id": 10115}, "403": {"py/id": 7566}, "404": {"py/id": 7555}, "406": {"py/id": 7492}, "408": {"py/id": 7445}, "409": {"py/id": 10161}, "410": {"py/id": 10189}, "412": {"py/id": 7422}, "417": {"py/id": 7385}, "419": {"py/id": 7344}, "422": {"py/id": 7323}, "423": {"py/id": 7300}, "424": {"py/id": 10263}, "425": {"py/id": 10283}, "426": {"py/id": 7251}, "427": {"py/id": 10298}, "428": {"py/id": 7235}, "429": {"py/id": 7212}, "430": {"py/id": 10311}, "432": {"py/id": 5943}, "434": {"py/id": 5975}, "435": {"py/id": 9394}, "444": {"py/id": 6929}, "449": {"py/id": 6909}, "455": {"py/id": 6866}, "456": {"py/id": 6857}, "481": {"py/id": 10363}, "482": {"py/id": 10376}, "483": {"py/id": 10397}, "498": {"py/id": 7161}, "510": {"py/id": 7116}, "515": {"py/id": 7095}, "516": {"py/id": 7078}, "517": {"py/id": 7065}, "518": {"py/id": 7048}, "7": {"py/id": 7743}, "43": {"py/id": 9578}, "77": {"py/id": 9596}, "202": {"py/id": 6361}, "210": {"py/id": 6412}, "234": {"py/id": 6608}, "278": {"py/id": 10538}}, "286": {"225": {"py/id": 6502}, "6": {"py/id": 7673}, "19": {"py/id": 7777}, "44": {"py/id": 5402}, "46": {"py/id": 8153}, "54": {"py/id": 8296}, "76": {"py/id": 8448}, "78": {"py/id": 8462}, "87": {"py/id": 8531}, "27": {"py/id": 5679}, "38": {"py/id": 5538}, "45": {"py/id": 9587}, "47": {"py/id": 8203}, "341": {"py/id": 8943}, "406": {"py/id": 7494}, "424": {"py/id": 10276}, "426": {"py/id": 7259}, "435": {"py/id": 9408}, "515": {"py/id": 7099}, "516": {"py/id": 7080}, "518": {"py/id": 7052}, "256": {"py/id": 7732}, "272": {"py/id": 6454}, "273": {"py/id": 9755}, "277": {"py/id": 6475}, "281": {"py/id": 6492}, "375": {"py/id": 9170}}, "190": {"225": {"py/id": 6504}}, "229": {"49": {"py/id": 5354}, "50": {"py/id": 8253}, "81": {"py/id": 8496}, "82": {"py/id": 8507}, "137": {"py/id": 6093}, "171": {"py/id": 8058}, "231": {"py/id": 6428}, "235": {"py/id": 7714}, "288": {"py/id": 6693}, "320": {"py/id": 8856}, "341": {"py/id": 8916}, "383": {"py/id": 9193}, "384": {"py/id": 9216}, "6": {"py/id": 7682}, "19": {"py/id": 7820}, "25": {"py/id": 5729}, "32": {"py/id": 9536}, "34": {"py/id": 8031}, "40": {"py/id": 8144}, "54": {"py/id": 8344}, "87": {"py/id": 8541}, "121": {"py/id": 6219}, "138": {"py/id": 6089}, "145": {"py/id": 6073}, "154": {"py/id": 6286}, "172": {"py/id": 9643}, "175": {"py/id": 8689}, "225": {"py/id": 6526}, "266": {"py/id": 6669}, "289": {"py/id": 6589}, "363": {"py/id": 9986}, "365": {"py/id": 9999}, "368": {"py/id": 10021}, "399": {"py/id": 10092}, "401": {"py/id": 9337}, "404": {"py/id": 7557}, "406": {"py/id": 7488}, "410": {"py/id": 10183}, "417": {"py/id": 7387}, "423": {"py/id": 7312}, "424": {"py/id": 10272}, "429": {"py/id": 7215}, "430": {"py/id": 10309}, "432": {"py/id": 5945}, "434": {"py/id": 5977}, "435": {"py/id": 9396}, "456": {"py/id": 6859}, "457": {"py/id": 6848}, "459": {"py/id": 6838}, "482": {"py/id": 10378}, "483": {"py/id": 10400}, "493": {"py/id": 10476}, "518": {"py/id": 7044}, "519": {"py/id": 10557}, "210": {"py/id": 6406}, "230": {"py/id": 9751}, "234": {"py/id": 6610}, "256": {"py/id": 7734}}, "289": {"229": {"py/id": 6556}, "54": {"py/id": 8292}, "87": {"py/id": 8529}, "27": {"py/id": 5681}, "38": {"py/id": 5540}, "406": {"py/id": 7490}, "435": {"py/id": 9404}, "493": {"py/id": 10478}}, "191": {"229": {"py/id": 6558}}, "234": {"54": {"py/id": 8312}, "55": {"py/id": 5318}, "88": {"py/id": 8563}, "142": {"py/id": 6077}, "174": {"py/id": 8675}, "201": {"py/id": 6334}, "207": {"py/id": 8713}, "208": {"py/id": 8718}, "209": {"py/id": 6423}, "212": {"py/id": 8723}, "214": {"py/id": 8734}, "226": {"py/id": 8743}, "235": {"py/id": 7710}, "236": {"py/id": 7721}, "237": {"py/id": 6622}, "241": {"py/id": 8748}, "252": {"py/id": 8792}, "277": {"py/id": 6467}, "320": {"py/id": 8854}, "341": {"py/id": 8912}, "353": {"py/id": 9001}, "364": {"py/id": 9092}, "385": {"py/id": 9235}, "387": {"py/id": 9272}, "394": {"py/id": 6739}, "502": {"py/id": 9424}, "3": {"py/id": 9453}, "6": {"py/id": 7679}, "9": {"py/id": 7760}, "12": {"py/id": 9514}, "15": {"py/id": 5815}, "16": {"py/id": 9443}, "19": {"py/id": 7817}, "20": {"py/id": 7904}, "24": {"py/id": 5747}, "25": {"py/id": 5733}, "29": {"py/id": 5606}, "30": {"py/id": 5590}, "31": {"py/id": 7983}, "33": {"py/id": 9548}, "34": {"py/id": 8022}, "40": {"py/id": 8138}, "42": {"py/id": 5469}, "44": {"py/id": 5452}, "49": {"py/id": 5387}, "51": {"py/id": 5349}, "61": {"py/id": 9484}, "62": {"py/id": 9522}, "65": {"py/id": 8406}, "74": {"py/id": 9471}, "76": {"py/id": 8458}, "81": {"py/id": 8503}, "106": {"py/id": 9609}, "112": {"py/id": 6257}, "118": {"py/id": 6232}, "119": {"py/id": 6224}, "121": {"py/id": 6214}, "124": {"py/id": 6187}, "128": {"py/id": 6175}, "130": {"py/id": 6155}, "131": {"py/id": 6143}, "137": {"py/id": 6097}, "145": {"py/id": 6070}, "146": {"py/id": 6059}, "150": {"py/id": 9816}, "153": {"py/id": 6300}, "155": {"py/id": 8617}, "157": {"py/id": 9695}, "158": {"py/id": 9687}, "159": {"py/id": 8628}, "162": {"py/id": 9671}, "164": {"py/id": 8647}, "166": {"py/id": 9656}, "167": {"py/id": 8079}, "171": {"py/id": 8063}, "175": {"py/id": 8686}, "176": {"py/id": 8698}, "247": {"py/id": 9844}, "248": {"py/id": 9851}, "253": {"py/id": 9856}, "333": {"py/id": 9892}, "348": {"py/id": 8957}, "356": {"py/id": 9973}, "357": {"py/id": 9029}, "368": {"py/id": 10017}, "383": {"py/id": 9212}, "386": {"py/id": 9267}, "388": {"py/id": 9299}, "391": {"py/id": 6783}, "392": {"py/id": 6770}, "393": {"py/id": 6757}, "396": {"py/id": 10056}, "399": {"py/id": 10096}, "400": {"py/id": 7580}, "401": {"py/id": 9331}, "404": {"py/id": 7549}, "406": {"py/id": 7502}, "408": {"py/id": 7443}, "409": {"py/id": 10157}, "410": {"py/id": 10181}, "411": {"py/id": 10214}, "417": {"py/id": 7383}, "419": {"py/id": 7346}, "423": {"py/id": 7306}, "424": {"py/id": 10266}, "429": {"py/id": 7218}, "430": {"py/id": 10313}, "431": {"py/id": 10324}, "434": {"py/id": 5979}, "435": {"py/id": 9398}, "436": {"py/id": 10333}, "438": {"py/id": 6958}, "447": {"py/id": 6921}, "451": {"py/id": 6897}, "453": {"py/id": 6883}, "456": {"py/id": 6853}, "459": {"py/id": 6836}, "467": {"py/id": 7023}, "487": {"py/id": 10424}, "493": {"py/id": 10472}, "494": {"py/id": 7181}, "495": {"py/id": 10489}, "518": {"py/id": 7046}, "520": {"py/id": 10566}, "521": {"py/id": 10575}, "522": {"py/id": 10584}, "523": {"py/id": 10593}, "7": {"py/id": 7745}, "21": {"py/id": 7929}, "27": {"py/id": 5693}, "225": {"py/id": 6538}, "229": {"py/id": 6584}, "232": {"py/id": 8263}, "272": {"py/id": 6456}, "281": {"py/id": 6494}, "384": {"py/id": 9228}}, "186": {"234": {"py/id": 6596}}, "237": {"56": {"py/id": 5305}, "89": {"py/id": 8573}, "200": {"py/id": 6316}, "357": {"py/id": 9015}, "177": {"py/id": 9636}, "1": {"py/id": 7638}, "14": {"py/id": 5829}, "395": {"py/id": 7620}, "437": {"py/id": 7190}, "503": {"py/id": 7134}}, "192": {"237": {"py/id": 6620}}, "261": {"34": {"py/id": 7990}, "269": {"py/id": 9795}}, "279": {"261": {"py/id": 6632}, "34": {"py/id": 8040}}, "270": {"261": {"py/id": 6634}, "34": {"py/id": 8028}, "410": {"py/id": 10193}}, "262": {"322": {"py/id": 6681}, "319": {"py/id": 8270}, "52": {"py/id": 5921}, "432": {"py/id": 5949}, "482": {"py/id": 10382}, "85": {"py/id": 8526}, "290": {"py/id": 8789}, "386": {"py/id": 9269}}, "433": {"262": {"py/id": 6653}, "486": {"py/id": 6687}, "484": {"py/id": 10415}}, "266": {"289": {"py/id": 6587}, "6": {"py/id": 7669}, "19": {"py/id": 7770}, "54": {"py/id": 8306}, "87": {"py/id": 8537}, "399": {"py/id": 10110}, "435": {"py/id": 9420}}, "322": {"482": {"py/id": 10380}}, "486": {"322": {"py/id": 6673}, "433": {"py/id": 6666}, "484": {"py/id": 10413}}, "485": {"322": {"py/id": 6675}}, "288": {"322": {"py/id": 6677}, "319": {"py/id": 8278}, "52": {"py/id": 5911}, "262": {"py/id": 6662}, "285": {"py/id": 6702}, "432": {"py/id": 5953}, "482": {"py/id": 10386}}, "285": {"322": {"py/id": 6679}, "319": {"py/id": 8274}, "52": {"py/id": 5916}, "262": {"py/id": 6659}, "432": {"py/id": 5951}, "482": {"py/id": 10384}}, "381": {}, "379": {"381": {"py/id": 6706}}, "378": {"381": {"py/id": 6708}}, "382": {}, "380": {"382": {"py/id": 6723}}, "377": {"382": {"py/id": 6725}}, "390": {}, "394": {"390": {"py/id": 6730}}, "393": {"390": {"py/id": 6732}}, "392": {"390": {"py/id": 6734}}, "391": {"390": {"py/id": 6736}}, "463": {}, "460": {"463": {"py/id": 6786}}, "459": {"463": {"py/id": 6788}}, "458": {"463": {"py/id": 6790}}, "457": {"463": {"py/id": 6792}}, "456": {"463": {"py/id": 6794}}, "455": {"463": {"py/id": 6796}}, "454": {"463": {"py/id": 6798}}, "453": {"463": {"py/id": 6800}}, "452": {"463": {"py/id": 6802}}, "451": {"463": {"py/id": 6804}}, "450": {"463": {"py/id": 6806}}, "449": {"463": {"py/id": 6808}}, "448": {"463": {"py/id": 6810}}, "447": {"463": {"py/id": 6812}}, "446": {"463": {"py/id": 6814}}, "444": {"463": {"py/id": 6816}}, "443": {"463": {"py/id": 6818}}, "442": {"463": {"py/id": 6820}}, "441": {"463": {"py/id": 6822}}, "440": {"463": {"py/id": 6824}}, "439": {"463": {"py/id": 6826}}, "438": {"463": {"py/id": 6828}}, "467": {}, "524": {"467": {"py/id": 6961}}, "518": {"467": {"py/id": 6963}}, "517": {"467": {"py/id": 6965}}, "516": {"467": {"py/id": 6967}}, "515": {"467": {"py/id": 6969}}, "512": {"467": {"py/id": 6971}}, "511": {"467": {"py/id": 6973}}, "510": {"467": {"py/id": 6975}}, "509": {"467": {"py/id": 6977}}, "503": {"467": {"py/id": 6979}}, "501": {"467": {"py/id": 6981}}, "499": {"467": {"py/id": 6983}}, "498": {"467": {"py/id": 6985}}, "497": {"467": {"py/id": 6987}}, "494": {"467": {"py/id": 6989}}, "437": {"467": {"py/id": 6991}}, "429": {"467": {"py/id": 6993}}, "428": {"467": {"py/id": 6995}}, "426": {"467": {"py/id": 6997}}, "423": {"467": {"py/id": 6999}}, "422": {"467": {"py/id": 7001}}, "419": {"467": {"py/id": 7003}}, "417": {"467": {"py/id": 7005}}, "412": {"467": {"py/id": 7007}}, "408": {"467": {"py/id": 7009}}, "406": {"467": {"py/id": 7011}}, "404": {"467": {"py/id": 7013}}, "403": {"467": {"py/id": 7015}}, "400": {"467": {"py/id": 7017}}, "397": {"467": {"py/id": 7019}}, "395": {"467": {"py/id": 7021}}, "474": {"473": {"py/id": 10351}}, "475": {"474": {"py/id": 7623}, "473": {"py/id": 10353}}, "1": {"14": {"py/id": 5822}, "357": {"py/id": 9025}, "389": {"py/id": 9308}, "437": {"py/id": 7188}, "503": {"py/id": 7130}, "524": {"py/id": 7031}}, "2": {"15": {"py/id": 5801}, "17": {"py/id": 5778}, "27": {"py/id": 5662}, "38": {"py/id": 5501}, "332": {"py/id": 8897}, "397": {"py/id": 7595}, "404": {"py/id": 7535}, "406": {"py/id": 7466}, "417": {"py/id": 7363}, "489": {"py/id": 10436}}, "4": {"17": {"py/id": 5771}, "16": {"py/id": 9437}, "25": {"py/id": 5710}, "27": {"py/id": 5660}, "38": {"py/id": 5504}, "44": {"py/id": 5410}, "46": {"py/id": 8165}, "47": {"py/id": 8195}, "48": {"py/id": 8224}, "54": {"py/id": 8317}, "296": {"py/id": 9868}, "333": {"py/id": 9886}, "335": {"py/id": 8904}, "353": {"py/id": 9006}, "360": {"py/id": 9047}, "368": {"py/id": 10005}, "373": {"py/id": 9134}, "376": {"py/id": 9188}, "378": {"py/id": 6718}, "386": {"py/id": 9262}, "401": {"py/id": 9327}, "403": {"py/id": 7562}, "404": {"py/id": 7533}, "406": {"py/id": 7464}, "417": {"py/id": 7377}, "423": {"py/id": 7272}, "424": {"py/id": 10242}, "426": {"py/id": 7245}, "428": {"py/id": 7233}, "435": {"py/id": 9380}, "472": {"py/id": 10346}, "491": {"py/id": 10448}, "498": {"py/id": 7159}, "499": {"py/id": 7146}, "515": {"py/id": 7091}, "517": {"py/id": 7061}}, "6": {"19": {"py/id": 7788}, "49": {"py/id": 5369}, "341": {"py/id": 8924}, "429": {"py/id": 7220}, "493": {"py/id": 10464}}, "235": {"6": {"py/id": 7671}, "19": {"py/id": 7773}, "145": {"py/id": 6066}, "175": {"py/id": 8681}, "54": {"py/id": 8365}, "87": {"py/id": 8556}, "229": {"py/id": 6581}, "399": {"py/id": 10100}, "435": {"py/id": 9418}, "459": {"py/id": 6840}, "493": {"py/id": 10480}}, "236": {"6": {"py/id": 7675}, "19": {"py/id": 7781}, "146": {"py/id": 6055}, "176": {"py/id": 8693}, "54": {"py/id": 8368}, "87": {"py/id": 8559}, "225": {"py/id": 6535}}, "256": {"6": {"py/id": 7677}, "19": {"py/id": 7785}, "54": {"py/id": 8309}, "87": {"py/id": 8539}, "341": {"py/id": 8940}, "399": {"py/id": 10108}, "493": {"py/id": 10474}}, "7": {"20": {"py/id": 7836}, "196": {"py/id": 9820}, "197": {"py/id": 9829}, "342": {"py/id": 9922}}, "8": {"7": {"py/id": 7737}, "20": {"py/id": 7832}, "182": {"py/id": 8705}, "197": {"py/id": 9835}, "342": {"py/id": 9932}}, "9": {"20": {"py/id": 7829}}, "19": {"399": {"py/id": 10082}}, "20": {}, "21": {}, "22": {"21": {"py/id": 7907}}, "211": {"26": {"py/id": 5835}, "28": {"py/id": 5613}, "59": {"py/id": 8393}, "122": {"py/id": 6199}, "160": {"py/id": 8632}, "27": {"py/id": 5683}, "58": {"py/id": 8385}, "405": {"py/id": 5879}, "406": {"py/id": 7496}, "407": {"py/id": 10128}, "448": {"py/id": 6914}, "210": {"py/id": 6410}}, "206": {"26": {"py/id": 5839}, "27": {"py/id": 5631}, "28": {"py/id": 5609}, "55": {"py/id": 5322}, "58": {"py/id": 8376}, "59": {"py/id": 8389}, "88": {"py/id": 8568}, "210": {"py/id": 6398}, "219": {"py/id": 6372}, "229": {"py/id": 6568}, "234": {"py/id": 6598}, "257": {"py/id": 6339}, "271": {"py/id": 7942}, "280": {"py/id": 8110}, "305": {"py/id": 8826}, "329": {"py/id": 8886}, "474": {"py/id": 7625}, "21": {"py/id": 7926}, "34": {"py/id": 8045}, "291": {"py/id": 9808}, "347": {"py/id": 9940}, "405": {"py/id": 5876}, "407": {"py/id": 10130}, "473": {"py/id": 10355}, "122": {"py/id": 6205}}, "205": {"27": {"py/id": 5634}, "271": {"py/id": 7946}}, "271": {"27": {"py/id": 5636}, "58": {"py/id": 8374}, "272": {"py/id": 6443}, "350": {"py/id": 8980}, "366": {"py/id": 9103}, "391": {"py/id": 6776}, "21": {"py/id": 7924}, "361": {"py/id": 9076}, "406": {"py/id": 7500}}, "31": {"409": {"py/id": 10133}}, "274": {"31": {"py/id": 7951}, "307": {"py/id": 8837}, "409": {"py/id": 10163}}, "34": {"410": {"py/id": 10167}}, "263": {"34": {"py/id": 7993}, "65": {"py/id": 8402}, "388": {"py/id": 9286}, "410": {"py/id": 10199}, "523": {"py/id": 10595}}, "292": {"34": {"py/id": 7997}, "65": {"py/id": 8404}, "388": {"py/id": 9290}, "410": {"py/id": 10201}, "523": {"py/id": 10597}}, "171": {"34": {"py/id": 8000}, "137": {"py/id": 6095}, "6": {"py/id": 7691}, "19": {"py/id": 7790}, "20": {"py/id": 7868}, "40": {"py/id": 8126}, "49": {"py/id": 5378}, "399": {"py/id": 10084}, "410": {"py/id": 10171}, "419": {"py/id": 7332}, "429": {"py/id": 7205}, "456": {"py/id": 6851}}, "167": {"34": {"py/id": 8004}, "131": {"py/id": 6141}, "6": {"py/id": 7706}, "17": {"py/id": 5780}, "19": {"py/id": 7793}, "20": {"py/id": 7860}, "31": {"py/id": 7962}, "40": {"py/id": 8120}, "44": {"py/id": 5407}, "397": {"py/id": 7589}, "399": {"py/id": 10106}, "409": {"py/id": 10143}, "410": {"py/id": 10173}, "419": {"py/id": 7328}, "423": {"py/id": 7270}, "424": {"py/id": 10234}, "453": {"py/id": 6881}}, "35": {"411": {"py/id": 10204}}, "276": {"35": {"py/id": 8089}, "66": {"py/id": 8410}, "362": {"py/id": 9081}, "411": {"py/id": 10218}, "509": {"py/id": 7125}}, "280": {"38": {"py/id": 5484}, "69": {"py/id": 8425}, "128": {"py/id": 6170}, "164": {"py/id": 8643}, "361": {"py/id": 9059}, "392": {"py/id": 6763}, "417": {"py/id": 7389}, "451": {"py/id": 6899}, "508": {"py/id": 10531}}, "40": {"419": {"py/id": 7326}}, "215": {"40": {"py/id": 8115}, "72": {"py/id": 8438}, "255": {"py/id": 8801}, "283": {"py/id": 8816}, "480": {"py/id": 9726}, "479": {"py/id": 9729}, "308": {"py/id": 9736}, "234": {"py/id": 6602}, "229": {"py/id": 6572}, "225": {"py/id": 6516}, "212": {"py/id": 8731}, "202": {"py/id": 6357}, "363": {"py/id": 9982}, "347": {"py/id": 9946}}, "222": {"41": {"py/id": 5475}, "129": {"py/id": 6159}, "165": {"py/id": 8651}, "420": {"py/id": 9359}, "73": {"py/id": 9477}, "421": {"py/id": 10228}, "452": {"py/id": 6890}}, "316": {"44": {"py/id": 5399}, "76": {"py/id": 8446}, "131": {"py/id": 6138}, "167": {"py/id": 8073}, "286": {"py/id": 6545}, "373": {"py/id": 9122}, "393": {"py/id": 6750}, "21": {"py/id": 7922}, "38": {"py/id": 5531}, "435": {"py/id": 9406}, "453": {"py/id": 6885}}, "46": {"132": {"py/id": 6133}, "225": {"py/id": 6522}, "426": {"py/id": 7239}}, "287": {"46": {"py/id": 8156}, "78": {"py/id": 8464}, "374": {"py/id": 9148}, "132": {"py/id": 6135}, "225": {"py/id": 6524}, "426": {"py/id": 7261}, "516": {"py/id": 7082}}, "47": {"427": {"py/id": 10292}}, "228": {"47": {"py/id": 8186}, "79": {"py/id": 8476}, "134": {"py/id": 6109}, "170": {"py/id": 8657}, "373": {"py/id": 9137}, "424": {"py/id": 10278}, "427": {"py/id": 10300}, "455": {"py/id": 6868}, "515": {"py/id": 7101}, "19": {"py/id": 7826}, "202": {"py/id": 6365}, "225": {"py/id": 6540}}, "48": {"403": {"py/id": 7560}, "428": {"py/id": 7231}}, "275": {"48": {"py/id": 8215}, "80": {"py/id": 8485}, "376": {"py/id": 9173}, "428": {"py/id": 7227}, "517": {"py/id": 7069}}, "317": {"48": {"py/id": 8218}, "275": {"py/id": 8243}, "481": {"py/id": 10361}, "80": {"py/id": 8493}, "181": {"py/id": 10043}, "318": {"py/id": 10602}, "403": {"py/id": 7573}}, "50": {"430": {"py/id": 10303}}, "232": {"51": {"py/id": 5333}, "83": {"py/id": 8512}, "139": {"py/id": 6082}, "173": {"py/id": 8669}, "385": {"py/id": 9231}, "16": {"py/id": 9450}, "409": {"py/id": 10159}, "419": {"py/id": 7338}, "431": {"py/id": 10322}, "435": {"py/id": 9400}, "436": {"py/id": 10337}, "520": {"py/id": 10564}, "210": {"py/id": 6414}, "218": {"py/id": 6389}, "234": {"py/id": 6604}}, "319": {"52": {"py/id": 5902}, "85": {"py/id": 8522}, "432": {"py/id": 5935}, "482": {"py/id": 10372}}, "54": {"435": {"py/id": 9372}}, "58": {"27": {"py/id": 5643}, "16": {"py/id": 9439}, "20": {"py/id": 7884}, "21": {"py/id": 7913}, "26": {"py/id": 5851}, "31": {"py/id": 7968}, "36": {"py/id": 5563}, "38": {"py/id": 5520}, "44": {"py/id": 5413}, "49": {"py/id": 5360}, "51": {"py/id": 5347}, "54": {"py/id": 8335}, "239": {"py/id": 9838}, "240": {"py/id": 9841}, "242": {"py/id": 8756}, "323": {"py/id": 9789}, "333": {"py/id": 9888}, "335": {"py/id": 8907}, "336": {"py/id": 9907}, "342": {"py/id": 9928}, "350": {"py/id": 8992}, "351": {"py/id": 9951}, "360": {"py/id": 9045}, "361": {"py/id": 9074}, "366": {"py/id": 9110}, "368": {"py/id": 10007}, "376": {"py/id": 9190}, "379": {"py/id": 6715}, "391": {"py/id": 6779}, "405": {"py/id": 5870}, "409": {"py/id": 10137}, "412": {"py/id": 7408}, "417": {"py/id": 7367}, "423": {"py/id": 7280}, "429": {"py/id": 7197}, "435": {"py/id": 9386}, "492": {"py/id": 10457}, "496": {"py/id": 10494}, "497": {"py/id": 7168}, "517": {"py/id": 7063}}, "59": {"28": {"py/id": 5616}, "26": {"py/id": 5845}, "27": {"py/id": 5656}, "44": {"py/id": 5424}, "49": {"py/id": 5366}, "404": {"py/id": 7529}, "405": {"py/id": 5866}, "406": {"py/id": 7462}, "423": {"py/id": 7266}, "424": {"py/id": 10240}, "429": {"py/id": 7199}}, "65": {"34": {"py/id": 8008}, "388": {"py/id": 9293}, "523": {"py/id": 10591}}, "66": {"35": {"py/id": 8092}, "362": {"py/id": 9086}, "509": {"py/id": 7121}}, "67": {"386": {"py/id": 9252}, "36": {"py/id": 5556}, "31": {"py/id": 7965}, "38": {"py/id": 5499}, "51": {"py/id": 5345}, "54": {"py/id": 8320}, "243": {"py/id": 8764}, "342": {"py/id": 9926}, "360": {"py/id": 9042}, "379": {"py/id": 6711}, "409": {"py/id": 10135}, "417": {"py/id": 7355}, "435": {"py/id": 9382}, "507": {"py/id": 10512}, "521": {"py/id": 10573}}, "69": {"38": {"py/id": 5494}, "36": {"py/id": 5561}, "54": {"py/id": 8323}, "244": {"py/id": 8775}, "336": {"py/id": 9910}, "361": {"py/id": 9068}, "375": {"py/id": 9166}, "379": {"py/id": 6713}, "392": {"py/id": 6766}, "412": {"py/id": 7410}, "423": {"py/id": 7282}, "435": {"py/id": 9384}, "508": {"py/id": 10523}}, "72": {"40": {"py/id": 8118}, "363": {"py/id": 9980}, "367": {"py/id": 10002}, "511": {"py/id": 7107}}, "76": {"44": {"py/id": 5405}, "17": {"py/id": 5782}, "19": {"py/id": 7811}, "25": {"py/id": 5701}, "27": {"py/id": 5650}, "29": {"py/id": 5599}, "36": {"py/id": 5565}, "38": {"py/id": 5514}, "42": {"py/id": 5460}, "43": {"py/id": 9574}, "46": {"py/id": 8163}, "49": {"py/id": 5363}, "54": {"py/id": 8338}, "245": {"py/id": 8780}, "341": {"py/id": 8933}, "350": {"py/id": 8997}, "360": {"py/id": 9049}, "361": {"py/id": 9071}, "365": {"py/id": 9991}, "368": {"py/id": 10009}, "373": {"py/id": 9129}, "374": {"py/id": 9151}, "376": {"py/id": 9186}, "393": {"py/id": 6753}, "397": {"py/id": 7591}, "401": {"py/id": 9321}, "404": {"py/id": 7523}, "406": {"py/id": 7454}, "408": {"py/id": 7441}, "412": {"py/id": 7406}, "417": {"py/id": 7369}, "422": {"py/id": 7321}, "426": {"py/id": 7243}, "429": {"py/id": 7203}, "435": {"py/id": 9402}, "496": {"py/id": 10496}, "498": {"py/id": 7155}, "507": {"py/id": 10514}, "508": {"py/id": 10525}, "510": {"py/id": 7112}, "515": {"py/id": 7087}, "516": {"py/id": 7074}, "517": {"py/id": 7059}}, "78": {"46": {"py/id": 8159}, "44": {"py/id": 5442}, "374": {"py/id": 9154}, "383": {"py/id": 9210}, "423": {"py/id": 7294}, "424": {"py/id": 10256}, "516": {"py/id": 7076}, "518": {"py/id": 7042}}, "79": {"47": {"py/id": 8190}, "27": {"py/id": 5664}, "38": {"py/id": 5526}, "44": {"py/id": 5430}, "373": {"py/id": 9132}, "375": {"py/id": 9168}, "404": {"py/id": 7539}, "406": {"py/id": 7470}, "417": {"py/id": 7373}, "423": {"py/id": 7286}, "424": {"py/id": 10246}, "515": {"py/id": 7093}}, "80": {"48": {"py/id": 8222}, "44": {"py/id": 5445}, "46": {"py/id": 8169}, "376": {"py/id": 9183}, "423": {"py/id": 7298}, "426": {"py/id": 7249}, "517": {"py/id": 7057}}, "81": {"49": {"py/id": 5358}, "6": {"py/id": 7700}, "19": {"py/id": 7808}, "25": {"py/id": 5704}, "27": {"py/id": 5666}, "44": {"py/id": 5439}, "50": {"py/id": 8259}, "341": {"py/id": 8930}, "365": {"py/id": 9993}, "368": {"py/id": 10011}, "383": {"py/id": 9204}, "384": {"py/id": 9222}, "399": {"py/id": 10090}, "401": {"py/id": 9325}, "404": {"py/id": 7541}, "406": {"py/id": 7472}, "423": {"py/id": 7292}, "424": {"py/id": 10252}, "430": {"py/id": 10305}, "493": {"py/id": 10468}, "510": {"py/id": 7114}, "518": {"py/id": 7038}, "519": {"py/id": 10553}}, "82": {"50": {"py/id": 8257}, "384": {"py/id": 9225}, "519": {"py/id": 10555}}, "83": {"51": {"py/id": 5337}, "20": {"py/id": 7890}, "27": {"py/id": 5668}, "36": {"py/id": 5571}, "54": {"py/id": 8332}, "55": {"py/id": 5329}, "341": {"py/id": 8938}, "385": {"py/id": 9242}, "387": {"py/id": 9283}, "404": {"py/id": 7517}, "406": {"py/id": 7478}, "412": {"py/id": 7416}, "435": {"py/id": 9378}, "436": {"py/id": 10331}, "520": {"py/id": 10562}}, "85": {"386": {"py/id": 9248}, "52": {"py/id": 5906}, "246": {"py/id": 8786}, "432": {"py/id": 5947}, "521": {"py/id": 10571}}, "87": {"54": {"py/id": 8315}, "6": {"py/id": 7688}, "19": {"py/id": 7814}, "27": {"py/id": 5648}, "31": {"py/id": 7971}, "36": {"py/id": 5569}, "38": {"py/id": 5506}, "44": {"py/id": 5433}, "334": {"py/id": 9897}, "341": {"py/id": 8935}, "383": {"py/id": 9207}, "399": {"py/id": 10102}, "404": {"py/id": 7521}, "406": {"py/id": 7452}, "409": {"py/id": 10145}, "412": {"py/id": 7414}, "417": {"py/id": 7357}, "423": {"py/id": 7288}, "424": {"py/id": 10248}, "490": {"py/id": 10441}, "493": {"py/id": 10470}, "518": {"py/id": 7040}}, "88": {"55": {"py/id": 5324}, "15": {"py/id": 5806}, "16": {"py/id": 9441}, "20": {"py/id": 7886}, "25": {"py/id": 5707}, "31": {"py/id": 7974}, "34": {"py/id": 8010}, "42": {"py/id": 5462}, "51": {"py/id": 5342}, "54": {"py/id": 8329}, "241": {"py/id": 8751}, "248": {"py/id": 9848}, "252": {"py/id": 8798}, "253": {"py/id": 9854}, "327": {"py/id": 9877}, "341": {"py/id": 8927}, "342": {"py/id": 9930}, "348": {"py/id": 8955}, "353": {"py/id": 9008}, "356": {"py/id": 9970}, "364": {"py/id": 9095}, "368": {"py/id": 10013}, "385": {"py/id": 9245}, "386": {"py/id": 9259}, "387": {"py/id": 9280}, "388": {"py/id": 9296}, "394": {"py/id": 6742}, "396": {"py/id": 10048}, "401": {"py/id": 9323}, "409": {"py/id": 10147}, "410": {"py/id": 10169}, "431": {"py/id": 10320}, "435": {"py/id": 9376}, "487": {"py/id": 10422}, "493": {"py/id": 10466}, "494": {"py/id": 7175}, "499": {"py/id": 7148}, "502": {"py/id": 9428}, "521": {"py/id": 10577}, "522": {"py/id": 10582}, "523": {"py/id": 10589}}, "89": {"56": {"py/id": 5309}, "14": {"py/id": 5824}, "357": {"py/id": 9027}, "362": {"py/id": 9089}, "395": {"py/id": 7616}, "503": {"py/id": 7132}, "509": {"py/id": 7123}}, "93": {}, "94": {"93": {"py/id": 8584}}, "98": {}, "92": {"98": {"py/id": 8588}}, "95": {"98": {"py/id": 8590}}, "302": {"98": {"py/id": 8592}}, "108": {"114": {"py/id": 6246}, "18": {"py/id": 5753}, "20": {"py/id": 7840}, "37": {"py/id": 5886}, "398": {"py/id": 10065}, "440": {"py/id": 6950}}, "203": {"108": {"py/id": 8598}, "114": {"py/id": 6242}, "5": {"py/id": 9459}, "18": {"py/id": 5766}, "398": {"py/id": 10073}, "417": {"py/id": 7397}, "219": {"py/id": 6382}}, "311": {"108": {"py/id": 8601}, "114": {"py/id": 6244}, "37": {"py/id": 5891}, "413": {"py/id": 5897}}, "155": {"153": {"py/id": 6298}, "27": {"py/id": 5672}, "42": {"py/id": 5464}, "404": {"py/id": 7545}, "406": {"py/id": 7474}, "423": {"py/id": 7284}, "444": {"py/id": 6927}}, "159": {"121": {"py/id": 6212}, "20": {"py/id": 7848}, "27": {"py/id": 5645}, "28": {"py/id": 5621}, "31": {"py/id": 7956}, "34": {"py/id": 8013}, "44": {"py/id": 5415}, "404": {"py/id": 7519}, "406": {"py/id": 7458}, "407": {"py/id": 10124}, "409": {"py/id": 10141}, "410": {"py/id": 10175}, "423": {"py/id": 7274}, "424": {"py/id": 10236}, "447": {"py/id": 6917}}, "160": {"122": {"py/id": 6201}, "20": {"py/id": 7850}, "27": {"py/id": 5658}, "28": {"py/id": 5618}, "404": {"py/id": 7531}, "406": {"py/id": 7460}, "407": {"py/id": 10122}, "448": {"py/id": 6912}}, "164": {"128": {"py/id": 6173}, "20": {"py/id": 7856}, "31": {"py/id": 7959}, "35": {"py/id": 8094}, "38": {"py/id": 5496}, "409": {"py/id": 10139}, "411": {"py/id": 10208}, "414": {"py/id": 9350}, "417": {"py/id": 7351}, "451": {"py/id": 6893}}, "165": {"129": {"py/id": 6161}, "20": {"py/id": 7858}, "41": {"py/id": 5480}, "420": {"py/id": 9363}, "452": {"py/id": 6888}}, "170": {"134": {"py/id": 6111}, "19": {"py/id": 7796}, "20": {"py/id": 7866}, "47": {"py/id": 8192}, "399": {"py/id": 10104}, "427": {"py/id": 10294}, "455": {"py/id": 6862}}, "173": {"139": {"py/id": 6084}, "20": {"py/id": 7872}, "51": {"py/id": 5339}, "431": {"py/id": 10318}}, "174": {"142": {"py/id": 6079}, "20": {"py/id": 7874}, "33": {"py/id": 9545}, "40": {"py/id": 8124}, "44": {"py/id": 5418}, "55": {"py/id": 5326}, "419": {"py/id": 7334}, "423": {"py/id": 7276}, "424": {"py/id": 10238}, "436": {"py/id": 10329}, "458": {"py/id": 6843}}, "175": {"145": {"py/id": 6068}, "6": {"py/id": 7694}, "19": {"py/id": 7799}, "20": {"py/id": 7876}, "399": {"py/id": 10086}, "459": {"py/id": 6834}}, "176": {"146": {"py/id": 6057}, "6": {"py/id": 7697}, "19": {"py/id": 7802}, "20": {"py/id": 7878}}, "182": {"196": {"py/id": 9823}, "197": {"py/id": 9832}, "342": {"py/id": 9924}}, "223": {"201": {"py/id": 6326}, "257": {"py/id": 6343}, "305": {"py/id": 8830}, "2": {"py/id": 7647}, "15": {"py/id": 5809}, "27": {"py/id": 5689}, "396": {"py/id": 10062}}, "207": {"348": {"py/id": 8947}, "157": {"py/id": 9693}, "12": {"py/id": 9512}, "436": {"py/id": 10335}, "494": {"py/id": 7179}, "234": {"py/id": 6612}, "263": {"py/id": 8054}}, "208": {"234": {"py/id": 6614}}, "212": {"161": {"py/id": 9677}, "60": {"py/id": 9490}, "29": {"py/id": 5601}, "123": {"py/id": 6196}, "225": {"py/id": 6532}, "408": {"py/id": 7447}, "423": {"py/id": 7314}, "425": {"py/id": 10287}, "21": {"py/id": 7931}}, "214": {"162": {"py/id": 9669}, "61": {"py/id": 9482}, "353": {"py/id": 9012}}, "226": {"166": {"py/id": 9654}, "74": {"py/id": 9466}, "42": {"py/id": 5472}, "225": {"py/id": 6542}}, "241": {}, "242": {}, "243": {}, "259": {"243": {"py/id": 8761}, "244": {"py/id": 8772}}, "244": {}, "245": {}, "246": {}, "290": {"246": {"py/id": 8783}}, "252": {}, "255": {"397": {"py/id": 7609}, "406": {"py/id": 7508}, "347": {"py/id": 9948}}, "199": {"255": {"py/id": 8805}, "267": {"py/id": 8811}, "150": {"py/id": 9814}, "151": {"py/id": 6309}, "154": {"py/id": 6293}, "397": {"py/id": 7607}, "406": {"py/id": 7506}}, "267": {}, "283": {"40": {"py/id": 8135}}, "284": {}, "305": {}, "307": {"31": {"py/id": 7986}}, "320": {"321": {"py/id": 9758}, "53": {"py/id": 5965}, "434": {"py/id": 5989}, "483": {"py/id": 10389}}, "329": {}, "332": {"489": {"py/id": 10432}}, "335": {"491": {"py/id": 10446}}, "341": {"493": {"py/id": 10462}}, "348": {"494": {"py/id": 7173}}, "349": {"495": {"py/id": 10483}}, "268": {"349": {"py/id": 8964}}, "350": {"496": {"py/id": 10492}}, "353": {"499": {"py/id": 7142}}, "357": {"503": {"py/id": 7128}}, "360": {"507": {"py/id": 10510}}, "361": {"508": {"py/id": 10521}}, "362": {"509": {"py/id": 7119}}, "364": {}, "366": {"333": {"py/id": 9894}}, "373": {"515": {"py/id": 7085}}, "374": {"516": {"py/id": 7072}}, "315": {"374": {"py/id": 9144}, "375": {"py/id": 9162}, "38": {"py/id": 5535}, "45": {"py/id": 9584}, "46": {"py/id": 8181}, "69": {"py/id": 8434}, "77": {"py/id": 9593}, "78": {"py/id": 8466}, "425": {"py/id": 10285}, "426": {"py/id": 7255}}, "375": {}, "376": {"517": {"py/id": 7055}}, "383": {"518": {"py/id": 7036}}, "384": {"519": {"py/id": 10551}}, "385": {"520": {"py/id": 10560}}, "386": {"521": {"py/id": 10569}}, "387": {"522": {"py/id": 10580}}, "388": {"523": {"py/id": 10587}}, "389": {"524": {"py/id": 7029}}, "401": {}, "414": {}, "415": {"414": {"py/id": 9344}}, "420": {}, "435": {}, "258": {"435": {"py/id": 9368}, "54": {"py/id": 8356}, "490": {"py/id": 10443}}, "502": {}, "16": {}, "3": {"16": {"py/id": 9435}, "31": {"py/id": 7977}, "35": {"py/id": 8100}, "36": {"py/id": 5573}, "40": {"py/id": 8128}, "54": {"py/id": 8341}, "333": {"py/id": 9890}, "335": {"py/id": 8909}, "360": {"py/id": 9052}, "368": {"py/id": 10015}, "386": {"py/id": 9265}, "391": {"py/id": 6781}, "392": {"py/id": 6768}, "393": {"py/id": 6755}, "394": {"py/id": 6744}, "409": {"py/id": 10149}, "411": {"py/id": 10210}, "412": {"py/id": 7418}, "419": {"py/id": 7336}, "435": {"py/id": 9388}}, "5": {"18": {"py/id": 5751}, "27": {"py/id": 5654}, "38": {"py/id": 5523}, "44": {"py/id": 5427}, "404": {"py/id": 7527}, "406": {"py/id": 7468}, "417": {"py/id": 7365}, "423": {"py/id": 7268}, "424": {"py/id": 10244}}, "10": {"21": {"py/id": 7911}, "344": {"py/id": 9935}}, "11": {"89": {"py/id": 8578}, "88": {"py/id": 8570}, "83": {"py/id": 8517}, "81": {"py/id": 8501}, "76": {"py/id": 8450}, "74": {"py/id": 9464}, "73": {"py/id": 9475}, "69": {"py/id": 8432}, "67": {"py/id": 8420}, "61": {"py/id": 9480}, "60": {"py/id": 9488}, "59": {"py/id": 8396}, "58": {"py/id": 8383}, "23": {"py/id": 5302}, "13": {"py/id": 9494}, "12": {"py/id": 9510}, "5": {"py/id": 9457}, "4": {"py/id": 7656}, "2": {"py/id": 7645}, "1": {"py/id": 7636}}, "74": {"42": {"py/id": 5456}, "372": {"py/id": 10040}}, "73": {"41": {"py/id": 5478}, "20": {"py/id": 7888}, "21": {"py/id": 7915}, "26": {"py/id": 5854}, "34": {"py/id": 8019}, "35": {"py/id": 8097}, "38": {"py/id": 5511}, "353": {"py/id": 9004}, "369": {"py/id": 10024}, "370": {"py/id": 10028}, "404": {"py/id": 7537}, "405": {"py/id": 5872}, "410": {"py/id": 10179}, "411": {"py/id": 10206}, "414": {"py/id": 9348}, "417": {"py/id": 7359}, "499": {"py/id": 7144}, "513": {"py/id": 10543}}, "61": {"30": {"py/id": 5585}, "353": {"py/id": 9010}, "499": {"py/id": 7150}}, "60": {"29": {"py/id": 5594}, "43": {"py/id": 9576}, "44": {"py/id": 5447}, "352": {"py/id": 9956}, "422": {"py/id": 7319}, "423": {"py/id": 7296}, "498": {"py/id": 7157}, "515": {"py/id": 7089}}, "13": {"25": {"py/id": 5696}, "26": {"py/id": 5848}, "27": {"py/id": 5652}, "36": {"py/id": 5567}, "38": {"py/id": 5517}, "44": {"py/id": 5436}, "49": {"py/id": 5375}, "54": {"py/id": 8326}, "349": {"py/id": 8971}, "371": {"py/id": 10032}, "404": {"py/id": 7525}, "405": {"py/id": 5868}, "406": {"py/id": 7456}, "412": {"py/id": 7412}, "417": {"py/id": 7371}, "423": {"py/id": 7290}, "424": {"py/id": 10254}, "429": {"py/id": 7201}, "435": {"py/id": 9374}, "495": {"py/id": 10485}, "514": {"py/id": 10548}}, "12": {"24": {"py/id": 5742}, "348": {"py/id": 8953}, "494": {"py/id": 7177}}, "57": {"26": {"py/id": 5843}, "21": {"py/id": 7917}, "336": {"py/id": 9901}, "492": {"py/id": 10455}}, "62": {"31": {"py/id": 7954}, "354": {"py/id": 9960}, "500": {"py/id": 10507}}, "32": {}, "63": {"32": {"py/id": 9526}, "126": {"py/id": 9803}}, "33": {}, "64": {"33": {"py/id": 9543}, "356": {"py/id": 9967}, "502": {"py/id": 9430}}, "68": {"37": {"py/id": 5884}, "336": {"py/id": 9904}}, "39": {"418": {"py/id": 10223}, "429": {"py/id": 7207}}, "70": {"39": {"py/id": 9556}, "6": {"py/id": 7703}, "19": {"py/id": 7805}, "38": {"py/id": 5508}, "49": {"py/id": 5372}, "399": {"py/id": 10088}, "417": {"py/id": 7361}}, "43": {"422": {"py/id": 7317}}, "75": {"43": {"py/id": 9572}, "355": {"py/id": 9964}, "501": {"py/id": 7139}}, "45": {"425": {"py/id": 10281}}, "77": {"45": {"py/id": 9582}, "38": {"py/id": 5529}, "46": {"py/id": 8167}, "417": {"py/id": 7375}, "426": {"py/id": 7247}}, "86": {"53": {"py/id": 5960}, "386": {"py/id": 9256}}, "105": {"111": {"py/id": 6261}, "14": {"py/id": 5826}, "20": {"py/id": 7882}, "395": {"py/id": 7614}}, "106": {"112": {"py/id": 6255}, "15": {"py/id": 5803}, "20": {"py/id": 7838}, "34": {"py/id": 8016}, "396": {"py/id": 10050}, "410": {"py/id": 10177}, "438": {"py/id": 6956}}, "107": {"113": {"py/id": 6249}, "17": {"py/id": 5773}, "18": {"py/id": 5759}, "40": {"py/id": 8122}, "397": {"py/id": 7585}, "398": {"py/id": 10071}, "417": {"py/id": 7353}, "419": {"py/id": 7330}, "439": {"py/id": 6953}}, "109": {"115": {"py/id": 6236}, "20": {"py/id": 7842}, "25": {"py/id": 5713}, "401": {"py/id": 9317}, "441": {"py/id": 6943}}, "468": {"469": {"py/id": 6049}, "442": {"py/id": 6937}}, "110": {"468": {"py/id": 9628}, "177": {"py/id": 9634}, "176": {"py/id": 8696}, "175": {"py/id": 8684}, "174": {"py/id": 8678}, "173": {"py/id": 8672}, "172": {"py/id": 9639}, "171": {"py/id": 8061}, "170": {"py/id": 8660}, "169": {"py/id": 9647}, "167": {"py/id": 8075}, "166": {"py/id": 9652}, "165": {"py/id": 8654}, "164": {"py/id": 8645}, "163": {"py/id": 9660}, "162": {"py/id": 9667}, "161": {"py/id": 9675}, "160": {"py/id": 8635}, "159": {"py/id": 8626}, "158": {"py/id": 9683}, "157": {"py/id": 9691}, "117": {"py/id": 6046}, "109": {"py/id": 9620}, "108": {"py/id": 8603}, "107": {"py/id": 9613}, "106": {"py/id": 9605}, "105": {"py/id": 9600}}, "177": {"147": {"py/id": 6052}, "20": {"py/id": 7880}, "56": {"py/id": 5311}, "437": {"py/id": 7186}, "460": {"py/id": 6831}}, "172": {"138": {"py/id": 6087}, "20": {"py/id": 7870}, "457": {"py/id": 6846}}, "169": {"133": {"py/id": 6120}, "20": {"py/id": 7864}}, "166": {"130": {"py/id": 6153}, "20": {"py/id": 7862}, "42": {"py/id": 5458}}, "163": {"127": {"py/id": 6179}, "17": {"py/id": 5776}, "20": {"py/id": 7854}, "36": {"py/id": 5558}, "397": {"py/id": 7587}, "412": {"py/id": 7404}, "450": {"py/id": 6902}}, "162": {"124": {"py/id": 6185}, "30": {"py/id": 5587}}, "161": {"123": {"py/id": 6191}, "20": {"py/id": 7852}, "29": {"py/id": 5596}, "408": {"py/id": 7439}, "449": {"py/id": 6907}}, "158": {"119": {"py/id": 6222}, "20": {"py/id": 7846}, "25": {"py/id": 5698}, "44": {"py/id": 5421}, "52": {"py/id": 5908}, "53": {"py/id": 5962}, "401": {"py/id": 9319}, "423": {"py/id": 7278}, "424": {"py/id": 10250}, "432": {"py/id": 5927}, "434": {"py/id": 5987}, "446": {"py/id": 6924}}, "157": {"118": {"py/id": 6230}, "20": {"py/id": 7844}, "24": {"py/id": 5744}, "400": {"py/id": 7578}}, "148": {"151": {"py/id": 6304}, "17": {"py/id": 5784}, "27": {"py/id": 5670}, "397": {"py/id": 7593}, "404": {"py/id": 7543}, "406": {"py/id": 7476}, "443": {"py/id": 6932}}, "156": {"154": {"py/id": 6284}, "27": {"py/id": 5674}, "404": {"py/id": 7547}, "406": {"py/id": 7480}}, "149": {"156": {"py/id": 9706}, "155": {"py/id": 8615}, "152": {"py/id": 6281}, "148": {"py/id": 9699}}, "168": {"132": {"py/id": 6123}, "18": {"py/id": 5756}, "46": {"py/id": 8161}, "398": {"py/id": 10067}, "426": {"py/id": 7241}, "454": {"py/id": 6872}}, "184": {"193": {"py/id": 6321}, "192": {"py/id": 6629}, "191": {"py/id": 6593}, "190": {"py/id": 6553}, "186": {"py/id": 6617}, "185": {"py/id": 9722}}, "185": {"189": {"py/id": 6464}, "188": {"py/id": 6499}, "187": {"py/id": 6482}}, "213": {"225": {"py/id": 6514}}, "480": {"479": {"py/id": 9733}}, "479": {}, "308": {"321": {"py/id": 9762}, "479": {"py/id": 9731}}, "220": {"236": {"py/id": 7729}, "235": {"py/id": 7718}, "229": {"py/id": 6574}, "219": {"py/id": 6376}, "39": {"py/id": 9558}, "70": {"py/id": 9565}, "418": {"py/id": 10225}}, "282": {"281": {"py/id": 6487}, "272": {"py/id": 6449}, "36": {"py/id": 5577}}, "221": {"282": {"py/id": 9742}, "224": {"py/id": 6459}, "219": {"py/id": 6378}, "210": {"py/id": 6402}, "4": {"py/id": 7665}, "17": {"py/id": 5789}, "34": {"py/id": 8047}, "54": {"py/id": 8363}, "347": {"py/id": 9943}}, "314": {}, "230": {"225": {"py/id": 6518}, "224": {"py/id": 6461}, "210": {"py/id": 6404}}, "233": {"229": {"py/id": 6576}, "225": {"py/id": 6520}, "202": {"py/id": 6359}}, "273": {"281": {"py/id": 6485}, "277": {"py/id": 6470}, "272": {"py/id": 6447}, "36": {"py/id": 5582}}, "321": {}, "338": {"362": {"py/id": 9084}, "361": {"py/id": 9062}, "360": {"py/id": 9036}, "357": {"py/id": 9019}, "350": {"py/id": 8986}, "337": {"py/id": 9917}}, "340": {"389": {"py/id": 9306}, "387": {"py/id": 9276}, "385": {"py/id": 9238}, "383": {"py/id": 9200}, "373": {"py/id": 9125}, "366": {"py/id": 9106}, "361": {"py/id": 9064}, "360": {"py/id": 9038}, "357": {"py/id": 9021}, "350": {"py/id": 8988}, "349": {"py/id": 8967}, "330": {"py/id": 9767}}, "330": {}, "506": {"504": {"py/id": 9785}}, "358": {"506": {"py/id": 9772}, "505": {"py/id": 9776}, "504": {"py/id": 9779}, "387": {"py/id": 9278}, "385": {"py/id": 9240}, "384": {"py/id": 9220}, "383": {"py/id": 9202}, "373": {"py/id": 9127}, "366": {"py/id": 9108}, "361": {"py/id": 9066}, "360": {"py/id": 9040}, "357": {"py/id": 9023}, "350": {"py/id": 8990}, "349": {"py/id": 8969}, "348": {"py/id": 8951}, "332": {"py/id": 8895}, "330": {"py/id": 9769}, "359": {"py/id": 9976}}, "505": {"504": {"py/id": 9783}}, "504": {}, "470": {"468": {"py/id": 9630}, "442": {"py/id": 6939}}, "323": {"20": {"py/id": 7892}, "350": {"py/id": 8995}}, "264": {"25": {"py/id": 5739}, "26": {"py/id": 5860}, "371": {"py/id": 10035}}, "217": {"32": {"py/id": 9528}, "63": {"py/id": 9539}, "126": {"py/id": 9805}}, "216": {"32": {"py/id": 9531}}, "269": {"34": {"py/id": 8034}, "410": {"py/id": 10195}, "263": {"py/id": 8052}}, "298": {"37": {"py/id": 5894}}, "71": {"39": {"py/id": 9561}, "70": {"py/id": 9568}}, "125": {}, "126": {"125": {"py/id": 9800}}, "291": {"137": {"py/id": 6100}, "410": {"py/id": 10197}, "34": {"py/id": 8049}}, "150": {}, "195": {"182": {"py/id": 8709}}, "196": {"342": {"py/id": 9920}}, "197": {"196": {"py/id": 9826}}, "239": {}, "240": {}, "247": {"252": {"py/id": 8796}, "467": {"py/id": 7026}}, "248": {}, "253": {}, "260": {"259": {"py/id": 8767}}, "293": {}, "294": {"293": {"py/id": 9863}}, "296": {"472": {"py/id": 10344}}, "306": {"305": {"py/id": 8834}, "347": {"py/id": 9938}, "478": {"py/id": 10358}}, "324": {}, "325": {"324": {"py/id": 9873}}, "327": {"487": {"py/id": 10420}}, "331": {"488": {"py/id": 10427}}, "178": {"331": {"py/id": 9881}, "488": {"py/id": 10429}}, "333": {}, "334": {"490": {"py/id": 10439}}, "336": {"492": {"py/id": 10453}}, "337": {}, "342": {}, "344": {}, "347": {}, "351": {"497": {"py/id": 7166}}, "352": {"498": {"py/id": 7153}}, "354": {"500": {"py/id": 10505}}, "355": {"501": {"py/id": 7137}}, "356": {"502": {"py/id": 9432}}, "359": {"504": {"py/id": 9781}}, "363": {}, "365": {"510": {"py/id": 7110}}, "367": {"511": {"py/id": 7105}}, "368": {}, "369": {"513": {"py/id": 10541}}, "370": {}, "371": {"514": {"py/id": 10546}}, "372": {}, "181": {"374": {"py/id": 9157}}, "396": {}, "398": {}, "399": {}, "402": {}, "407": {}, "409": {}, "410": {}, "411": {}, "418": {}, "421": {}, "424": {}, "425": {}, "427": {}, "430": {}, "431": {}, "436": {}, "462": {}, "251": {"462": {"py/id": 10340}}, "472": {}, "473": {}, "478": {}, "481": {}, "482": {}, "483": {}, "484": {}, "487": {}, "488": {}, "489": {}, "490": {}, "491": {}, "492": {}, "493": {}, "495": {}, "496": {}, "500": {}, "507": {}, "508": {}, "278": {"508": {"py/id": 10529}}, "513": {}, "514": {}, "519": {}, "520": {}, "521": {}, "522": {}, "523": {}, "84": {"51": {"py/id": 5351}, "83": {"py/id": 8519}}, "310": {"122": {"py/id": 6203}, "464": {"py/id": 10605}}, "318": {}, "464": {}}, "adj": {"py/object": "networkx.classes.coreviews.AdjacencyView", "py/state": {"_atlas": {"py/id": 5262}}}, "succ": {"py/object": "networkx.classes.coreviews.AdjacencyView", "py/state": {"_atlas": {"py/id": 5262}}}, "edges": {"py/object": "networkx.classes.reportviews.OutEdgeView", "py/state": {"_graph": {"py/id": 4783}, "_adjdict": {"py/id": 5262}}}}}