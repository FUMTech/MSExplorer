{"lexical_info": {"<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/jpetstore-6-jpetstore-6.0.2/src/main/java/org/mybatis/jpetstore/LoggingAspect.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["LoggingAspect"], "AN": ["logger"], "SCS_VariableDeclarator": ["logger"], "SCS_ClassReference": ["Logger", "LoggingAspect", "logger", "joinPoint", null], "SCS_MethodInvocation": ["getLogger", "info", "getSignature", "toShortString"], "MN": ["logBeforeServiceMethods"], "PN": ["joinPoint"], "CO": ["/**\n *    Copyright ${license.git.copyrightYears} the original author or authors.\n *\n *    Licensed under the Apache License, Version 2.0 (the \"License\");\n *    you may not use this file except in compliance with the License.\n *    You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *    Unless required by applicable law or agreed to in writing, software\n *    distributed under the License is distributed on an \"AS IS\" BASIS,\n *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *    See the License for the specific language governing permissions and\n *    limitations under the License.\n */", "// import org.slf4j.Logger;", "// import org.slf4j.LoggerFactory;", "// import org.springframework.stereotype.Com", "// private static final Logger logger = LoggerFactory.getLogger(LoggingAspect.class);", "// @Before(\"execution(* org.mybatis.jpetstore..*.*(..))\")", "// public void logMethodCall(JoinPoint joinPoint) {", "//     String methodName = joinPoint.getSignature().getName();", "//     String className = joinPoint.getTarget().getClass().toString();", "//     logger.info(\"Called \" + className + \".\" + methodName);", "// }"], "CODE": "/**\n *    Copyright ${license.git.copyrightYears} the original author or authors.\n *\n *    Licensed under the Apache License, Version 2.0 (the \"License\");\n *    you may not use this file except in compliance with the License.\n *    You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *    Unless required by applicable law or agreed to in writing, software\n *    distributed under the License is distributed on an \"AS IS\" BASIS,\n *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *    See the License for the specific language governing permissions and\n *    limitations under the License.\n */\npackage org.mybatis.jpetstore;\nimport org.aspectj.lang.JoinPoint;\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Before;\nimport org.springframework.stereotype.Component;\nimport org.apache.log4j.Logger;\n// import org.slf4j.Logger;\n// import org.slf4j.LoggerFactory;\n// import org.springframework.stereotype.Com\n\n@Aspect\n@Component\npublic class LoggingAspect {\n    private static final Logger logger = Logger.getLogger(LoggingAspect.class);\n    // private static final Logger logger = LoggerFactory.getLogger(LoggingAspect.class);\n\n    @Before(\"execution(* org.mybatis.jpetstore..*.*(..))\")\n    public void logBeforeServiceMethods(JoinPoint joinPoint) {\n        logger.info(\"Executing: \" + joinPoint.getSignature().toShortString());\n    }\n\n    // @Before(\"execution(* org.mybatis.jpetstore..*.*(..))\")\n    // public void logMethodCall(JoinPoint joinPoint) {\n    //     String methodName = joinPoint.getSignature().getName();\n    //     String className = joinPoint.getTarget().getClass().toString();\n    //     logger.info(\"Called \" + className + \".\" + methodName);\n    // }\n}\n", "SCS_MemberReference": [], "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_VariableDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/jpetstore-6-jpetstore-6.0.2/src/main/java/org/mybatis/jpetstore/domain/Order.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["Order"], "AN": ["serialVersionUID", "orderId", "username", "orderDate", "shipAddress1", "shipAddress2", "shipCity", "shipState", "shipZip", "shipCountry", "billAddress1", "billAddress2", "billCity", "billState", "billZip", "billCountry", "courier", "totalPrice", "billToFirstName", "billToLastName", "shipToFirstName", "shipToLastName", "creditCard", "expiryDate", "cardType", "locale", "status", "lineItems"], "SCS_VariableDeclarator": ["serialVersionUID", "orderId", "username", "orderDate", "shipAddress1", "shipAddress2", "shipCity", "shipState", "shipZip", "shipCountry", "billAddress1", "billAddress2", "billCity", "billState", "billZip", "billCountry", "courier", "totalPrice", "billToFirstName", "billToLastName", "shipToFirstName", "shipToLastName", "creditCard", "expiryDate", "cardType", "locale", "status", "lineItems", "i", "cartItem", "lineItem"], "MN": ["getOrderId", "setOrderId", "getUsername", "setUsername", "getOrderDate", "setOrderDate", "getShipAddress1", "setShipAddress1", "getShipAddress2", "setShipAddress2", "getShipCity", "setShipCity", "getShipState", "setShipState", "getShipZip", "setShipZip", "getShipCountry", "setShipCountry", "getBillAddress1", "setBillAddress1", "getBillAddress2", "setBillAddress2", "getBillCity", "setBillCity", "getBillState", "setBillState", "getBillZip", "setBillZip", "getBillCountry", "setBillCountry", "getCourier", "setCourier", "getTotalPrice", "setTotalPrice", "getBillToFirstName", "setBillToFirstName", "getBillToLastName", "setBillToLastName", "getShipToFirstName", "setShipToFirstName", "getShipToLastName", "setShipToLastName", "getCreditCard", "setCreditCard", "getExpiryDate", "setExpiryDate", "getCardType", "setCardType", "getLocale", "setLocale", "getStatus", "setStatus", "setLineItems", "getLineItems", "initOrder", "addLineItem", "addLineItem"], "PN": ["orderId", "username", "orderDate", "shipAddress1", "shipAddress2", "shipCity", "shipState", "shipZip", "shipCountry", "billAddress1", "billAddress2", "billCity", "billState", "billZip", "billCountry", "courier", "totalPrice", "billToFirstName", "billToLastName", "shipFoFirstName", "shipToLastName", "creditCard", "expiryDate", "cardType", "locale", "status", "lineItems", "account", "cart", "cartItem", "lineItem"], "SCS_MemberReference": ["orderId", "orderId", "orderId", "username", "username", "username", "orderDate", "orderDate", "orderDate", "shipAddress1", "shipAddress1", "shipAddress1", "shipAddress2", "shipAddress2", "shipAddress2", "shipCity", "shipCity", "shipCity", "shipState", "shipState", "shipState", "shipZip", "shipZip", "shipZip", "shipCountry", "shipCountry", "shipCountry", "billAddress1", "billAddress1", "billAddress1", "billAddress2", "billAddress2", "billAddress2", "billCity", "billCity", "billCity", "billState", "billState", "billState", "billZip", "billZip", "billZip", "billCountry", "billCountry", "billCountry", "courier", "courier", "courier", "totalPrice", "totalPrice", "totalPrice", "billToFirstName", "billToFirstName", "billToFirstName", "billToLastName", "billToLastName", "billToLastName", "shipToFirstName", "shipToFirstName", "shipFoFirstName", "shipToLastName", "shipToLastName", "shipToLastName", "creditCard", "creditCard", "creditCard", "expiryDate", "expiryDate", "expiryDate", "cardType", "cardType", "cardType", "locale", "locale", "locale", "status", "status", "status", "lineItems", "lineItems", "lineItems", "username", "orderDate", "shipToFirstName", "shipToLastName", "shipAddress1", "shipAddress2", "shipCity", "shipState", "shipZip", "shipCountry", "billToFirstName", "billToLastName", "billAddress1", "billAddress2", "billCity", "billState", "billZip", "billCountry", "totalPrice", "creditCard", "expiryDate", "cardType", "courier", "locale", "status", "cartItem", "cartItem", "lineItem", "lineItem"], "SCS_ClassReference": ["account", "account", "account", "account", "account", "account", "account", "account", "account", "account", "account", "account", "account", "account", "account", "account", "account", "cart", "cart", "i", "i", "", "lineItems", "", "lineItems"], "SCS_MethodInvocation": ["getUsername", "getFirstName", "getLastName", "getAddress1", "getAddress2", "getCity", "getState", "getZip", "getCountry", "getFirstName", "getLastName", "getAddress1", "getAddress2", "getCity", "getState", "getZip", "getCountry", "getSubTotal", "getAllCartItems", "hasNext", "next", "addLineItem", "size", "addLineItem", "add"], "SCS_VariableDeclaration": ["Iterator", "CartItem", "LineItem"], "CO": ["/**\n *    Copyright ${license.git.copyrightYears} the original author or authors.\n *\n *    Licensed under the Apache License, Version 2.0 (the \"License\");\n *    you may not use this file except in compliance with the License.\n *    You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *    Unless required by applicable law or agreed to in writing, software\n *    distributed under the License is distributed on an \"AS IS\" BASIS,\n *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *    See the License for the specific language governing permissions and\n *    limitations under the License.\n */", "/**\n * @author Eduardo Macarron\n *\n */"], "CODE": "/**\n *    Copyright ${license.git.copyrightYears} the original author or authors.\n *\n *    Licensed under the Apache License, Version 2.0 (the \"License\");\n *    you may not use this file except in compliance with the License.\n *    You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *    Unless required by applicable law or agreed to in writing, software\n *    distributed under the License is distributed on an \"AS IS\" BASIS,\n *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *    See the License for the specific language governing permissions and\n *    limitations under the License.\n */\npackage org.mybatis.jpetstore.domain;\n\nimport java.io.Serializable;\nimport java.math.BigDecimal;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.Iterator;\nimport java.util.List;\n\n/**\n * @author Eduardo Macarron\n *\n */\npublic class Order implements Serializable {\n\n  private static final long serialVersionUID = 6321792448424424931L;\n\n  private int orderId;\n  private String username;\n  private Date orderDate;\n  private String shipAddress1;\n  private String shipAddress2;\n  private String shipCity;\n  private String shipState;\n  private String shipZip;\n  private String shipCountry;\n  private String billAddress1;\n  private String billAddress2;\n  private String billCity;\n  private String billState;\n  private String billZip;\n  private String billCountry;\n  private String courier;\n  private BigDecimal totalPrice;\n  private String billToFirstName;\n  private String billToLastName;\n  private String shipToFirstName;\n  private String shipToLastName;\n  private String creditCard;\n  private String expiryDate;\n  private String cardType;\n  private String locale;\n  private String status;\n  private List<LineItem> lineItems = new ArrayList<LineItem>();\n\n  public int getOrderId() {\n    return orderId;\n  }\n\n  public void setOrderId(int orderId) {\n    this.orderId = orderId;\n  }\n\n  public String getUsername() {\n    return username;\n  }\n\n  public void setUsername(String username) {\n    this.username = username;\n  }\n\n  public Date getOrderDate() {\n    return orderDate;\n  }\n\n  public void setOrderDate(Date orderDate) {\n    this.orderDate = orderDate;\n  }\n\n  public String getShipAddress1() {\n    return shipAddress1;\n  }\n\n  public void setShipAddress1(String shipAddress1) {\n    this.shipAddress1 = shipAddress1;\n  }\n\n  public String getShipAddress2() {\n    return shipAddress2;\n  }\n\n  public void setShipAddress2(String shipAddress2) {\n    this.shipAddress2 = shipAddress2;\n  }\n\n  public String getShipCity() {\n    return shipCity;\n  }\n\n  public void setShipCity(String shipCity) {\n    this.shipCity = shipCity;\n  }\n\n  public String getShipState() {\n    return shipState;\n  }\n\n  public void setShipState(String shipState) {\n    this.shipState = shipState;\n  }\n\n  public String getShipZip() {\n    return shipZip;\n  }\n\n  public void setShipZip(String shipZip) {\n    this.shipZip = shipZip;\n  }\n\n  public String getShipCountry() {\n    return shipCountry;\n  }\n\n  public void setShipCountry(String shipCountry) {\n    this.shipCountry = shipCountry;\n  }\n\n  public String getBillAddress1() {\n    return billAddress1;\n  }\n\n  public void setBillAddress1(String billAddress1) {\n    this.billAddress1 = billAddress1;\n  }\n\n  public String getBillAddress2() {\n    return billAddress2;\n  }\n\n  public void setBillAddress2(String billAddress2) {\n    this.billAddress2 = billAddress2;\n  }\n\n  public String getBillCity() {\n    return billCity;\n  }\n\n  public void setBillCity(String billCity) {\n    this.billCity = billCity;\n  }\n\n  public String getBillState() {\n    return billState;\n  }\n\n  public void setBillState(String billState) {\n    this.billState = billState;\n  }\n\n  public String getBillZip() {\n    return billZip;\n  }\n\n  public void setBillZip(String billZip) {\n    this.billZip = billZip;\n  }\n\n  public String getBillCountry() {\n    return billCountry;\n  }\n\n  public void setBillCountry(String billCountry) {\n    this.billCountry = billCountry;\n  }\n\n  public String getCourier() {\n    return courier;\n  }\n\n  public void setCourier(String courier) {\n    this.courier = courier;\n  }\n\n  public BigDecimal getTotalPrice() {\n    return totalPrice;\n  }\n\n  public void setTotalPrice(BigDecimal totalPrice) {\n    this.totalPrice = totalPrice;\n  }\n\n  public String getBillToFirstName() {\n    return billToFirstName;\n  }\n\n  public void setBillToFirstName(String billToFirstName) {\n    this.billToFirstName = billToFirstName;\n  }\n\n  public String getBillToLastName() {\n    return billToLastName;\n  }\n\n  public void setBillToLastName(String billToLastName) {\n    this.billToLastName = billToLastName;\n  }\n\n  public String getShipToFirstName() {\n    return shipToFirstName;\n  }\n\n  public void setShipToFirstName(String shipFoFirstName) {\n    this.shipToFirstName = shipFoFirstName;\n  }\n\n  public String getShipToLastName() {\n    return shipToLastName;\n  }\n\n  public void setShipToLastName(String shipToLastName) {\n    this.shipToLastName = shipToLastName;\n  }\n\n  public String getCreditCard() {\n    return creditCard;\n  }\n\n  public void setCreditCard(String creditCard) {\n    this.creditCard = creditCard;\n  }\n\n  public String getExpiryDate() {\n    return expiryDate;\n  }\n\n  public void setExpiryDate(String expiryDate) {\n    this.expiryDate = expiryDate;\n  }\n\n  public String getCardType() {\n    return cardType;\n  }\n\n  public void setCardType(String cardType) {\n    this.cardType = cardType;\n  }\n\n  public String getLocale() {\n    return locale;\n  }\n\n  public void setLocale(String locale) {\n    this.locale = locale;\n  }\n\n  public String getStatus() {\n    return status;\n  }\n\n  public void setStatus(String status) {\n    this.status = status;\n  }\n\n  public void setLineItems(List<LineItem> lineItems) {\n    this.lineItems = lineItems;\n  }\n\n  public List<LineItem> getLineItems() {\n    return lineItems;\n  }\n\n  public void initOrder(Account account, Cart cart) {\n\n    username = account.getUsername();\n    orderDate = new Date();\n\n    shipToFirstName = account.getFirstName();\n    shipToLastName = account.getLastName();\n    shipAddress1 = account.getAddress1();\n    shipAddress2 = account.getAddress2();\n    shipCity = account.getCity();\n    shipState = account.getState();\n    shipZip = account.getZip();\n    shipCountry = account.getCountry();\n\n    billToFirstName = account.getFirstName();\n    billToLastName = account.getLastName();\n    billAddress1 = account.getAddress1();\n    billAddress2 = account.getAddress2();\n    billCity = account.getCity();\n    billState = account.getState();\n    billZip = account.getZip();\n    billCountry = account.getCountry();\n\n    totalPrice = cart.getSubTotal();\n\n    creditCard = \"999 9999 9999 9999\";\n    expiryDate = \"12/03\";\n    cardType = \"Visa\";\n    courier = \"UPS\";\n    locale = \"CA\";\n    status = \"P\";\n\n    Iterator<CartItem> i = cart.getAllCartItems();\n    while (i.hasNext()) {\n      CartItem cartItem = (CartItem) i.next();\n      addLineItem(cartItem);\n    }\n\n  }\n\n  public void addLineItem(CartItem cartItem) {\n    LineItem lineItem = new LineItem(lineItems.size() + 1, cartItem);\n    addLineItem(lineItem);\n  }\n\n  public void addLineItem(LineItem lineItem) {\n    lineItems.add(lineItem);\n  }\n\n}\n", "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/jpetstore-6-jpetstore-6.0.2/src/main/java/org/mybatis/jpetstore/domain/Cart.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["Cart"], "AN": ["serialVersionUID", "itemMap", "itemList"], "SCS_VariableDeclarator": ["serialVersionUID", "itemMap", "itemList", "cartItem", "cartItem", "cartItem", "cartItem", "subTotal", "items", "cartItem", "item", "listPrice", "quantity"], "SCS_ClassReference": ["Collections", "itemList", "itemList", "itemList", "itemMap", "itemMap", "item", "cartItem", "cartItem", "cartItem", "itemMap", "item", "itemList", "cartItem", "itemMap", "itemList", "cartItem", "itemMap", "cartItem", "itemMap", "cartItem", "", "items", "items", "cartItem", "item", "String", "cartItem", "subTotal", "listPrice"], "SCS_MethodInvocation": ["synchronizedMap", "iterator", "size", "iterator", "containsKey", "get", "getItemId", "setItem", "setQuantity", "setInStock", "put", "getItemId", "add", "incrementQuantity", "remove", "remove", "getItem", "get", "incrementQuantity", "get", "setQuantity", "getAllCartItems", "hasNext", "next", "getItem", "getListPrice", "valueOf", "getQuantity", "add", "multiply"], "MN": ["getCartItems", "getCartItemList", "getNumberOfItems", "getAllCartItems", "containsItemId", "addItem", "removeItemById", "incrementQuantityByItemId", "setQuantityByItemId", "getSubTotal"], "PN": ["itemId", "item", "isInStock", "itemId", "itemId", "itemId", "quantity"], "SCS_MemberReference": ["itemList", "itemId", "cartItem", "cartItem", "item", "isInStock", "cartItem", "cartItem", "itemId", "cartItem", "cartItem", "itemId", "itemId", "quantity", "subTotal", "quantity", "subTotal"], "SCS_VariableDeclaration": ["CartItem", "CartItem", "CartItem", "CartItem", "BigDecimal", "Iterator", "CartItem", "Item", "BigDecimal", "BigDecimal"], "CO": ["/**\n *    Copyright ${license.git.copyrightYears} the original author or authors.\n *\n *    Licensed under the Apache License, Version 2.0 (the \"License\");\n *    you may not use this file except in compliance with the License.\n *    You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *    Unless required by applicable law or agreed to in writing, software\n *    distributed under the License is distributed on an \"AS IS\" BASIS,\n *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *    See the License for the specific language governing permissions and\n *    limitations under the License.\n */", "/**\n * @author Eduardo Macarron\n *\n */"], "CODE": "/**\n *    Copyright ${license.git.copyrightYears} the original author or authors.\n *\n *    Licensed under the Apache License, Version 2.0 (the \"License\");\n *    you may not use this file except in compliance with the License.\n *    You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *    Unless required by applicable law or agreed to in writing, software\n *    distributed under the License is distributed on an \"AS IS\" BASIS,\n *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *    See the License for the specific language governing permissions and\n *    limitations under the License.\n */\npackage org.mybatis.jpetstore.domain;\n\nimport java.io.Serializable;\nimport java.math.BigDecimal;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * @author Eduardo Macarron\n *\n */\npublic class Cart implements Serializable {\n\n  private static final long serialVersionUID = 8329559983943337176L;\n  \n  private final Map<String, CartItem> itemMap = Collections.synchronizedMap(new HashMap<String, CartItem>());\n  private final List<CartItem> itemList = new ArrayList<CartItem>();\n\n  public Iterator<CartItem> getCartItems() {\n    return itemList.iterator();\n  }\n\n  public List<CartItem> getCartItemList() {\n    return itemList;\n  }\n\n  public int getNumberOfItems() {\n    return itemList.size();\n  }\n\n  public Iterator<CartItem> getAllCartItems() {\n    return itemList.iterator();\n  }\n\n  public boolean containsItemId(String itemId) {\n    return itemMap.containsKey(itemId);\n  }\n\n  public void addItem(Item item, boolean isInStock) {\n    CartItem cartItem = (CartItem) itemMap.get(item.getItemId());\n    if (cartItem == null) {\n      cartItem = new CartItem();\n      cartItem.setItem(item);\n      cartItem.setQuantity(0);\n      cartItem.setInStock(isInStock);\n      itemMap.put(item.getItemId(), cartItem);\n      itemList.add(cartItem);\n    }\n    cartItem.incrementQuantity();\n  }\n\n  public Item removeItemById(String itemId) {\n    CartItem cartItem = (CartItem) itemMap.remove(itemId);\n    if (cartItem == null) {\n      return null;\n    } else {\n      itemList.remove(cartItem);\n      return cartItem.getItem();\n    }\n  }\n\n  public void incrementQuantityByItemId(String itemId) {\n    CartItem cartItem = (CartItem) itemMap.get(itemId);\n    cartItem.incrementQuantity();\n  }\n\n  public void setQuantityByItemId(String itemId, int quantity) {\n    CartItem cartItem = (CartItem) itemMap.get(itemId);\n    cartItem.setQuantity(quantity);\n  }\n\n  public BigDecimal getSubTotal() {\n    BigDecimal subTotal = new BigDecimal(\"0\");\n    Iterator<CartItem> items = getAllCartItems();\n    while (items.hasNext()) {\n      CartItem cartItem = (CartItem) items.next();\n      Item item = cartItem.getItem();\n      BigDecimal listPrice = item.getListPrice();\n      BigDecimal quantity = new BigDecimal(String.valueOf(cartItem.getQuantity()));\n      subTotal = subTotal.add(listPrice.multiply(quantity));\n    }\n    return subTotal;\n  }\n\n}\n", "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/jpetstore-6-jpetstore-6.0.2/src/main/java/org/mybatis/jpetstore/domain/Item.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["Item"], "AN": ["serialVersionUID", "itemId", "productId", "listPrice", "unitCost", "supplierId", "status", "attribute1", "attribute2", "attribute3", "attribute4", "attribute5", "product", "quantity"], "SCS_VariableDeclarator": ["serialVersionUID", "itemId", "productId", "listPrice", "unitCost", "supplierId", "status", "attribute1", "attribute2", "attribute3", "attribute4", "attribute5", "product", "quantity"], "MN": ["getItemId", "setItemId", "getQuantity", "setQuantity", "getProduct", "setProduct", "getProductId", "setProductId", "getSupplierId", "setSupplierId", "getListPrice", "setListPrice", "getUnitCost", "setUnitCost", "getStatus", "setStatus", "getAttribute1", "setAttribute1", "getAttribute2", "setAttribute2", "getAttribute3", "setAttribute3", "getAttribute4", "setAttribute4", "getAttribute5", "setAttribute5", "toString"], "PN": ["itemId", "quantity", "product", "productId", "supplierId", "listPrice", "unitCost", "status", "attribute1", "attribute2", "attribute3", "attribute4", "attribute5"], "SCS_MemberReference": ["itemId", "itemId", "quantity", "quantity", "quantity", "product", "product", "product", "productId", "productId", "productId", "supplierId", "supplierId", "supplierId", "listPrice", "listPrice", "listPrice", "unitCost", "unitCost", "unitCost", "status", "status", "status", "attribute1", "attribute1", "attribute1", "attribute2", "attribute2", "attribute2", "attribute3", "attribute3", "attribute3", "attribute4", "attribute4", "attribute4", "attribute5", "attribute5", "attribute5"], "SCS_ClassReference": ["itemId", "", ""], "SCS_MethodInvocation": ["trim", "getItemId", "getProductId"], "CO": ["/**\n *    Copyright ${license.git.copyrightYears} the original author or authors.\n *\n *    Licensed under the Apache License, Version 2.0 (the \"License\");\n *    you may not use this file except in compliance with the License.\n *    You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *    Unless required by applicable law or agreed to in writing, software\n *    distributed under the License is distributed on an \"AS IS\" BASIS,\n *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *    See the License for the specific language governing permissions and\n *    limitations under the License.\n */", "/**\n * @author Eduardo Macarron\n *\n */"], "CODE": "/**\n *    Copyright ${license.git.copyrightYears} the original author or authors.\n *\n *    Licensed under the Apache License, Version 2.0 (the \"License\");\n *    you may not use this file except in compliance with the License.\n *    You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *    Unless required by applicable law or agreed to in writing, software\n *    distributed under the License is distributed on an \"AS IS\" BASIS,\n *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *    See the License for the specific language governing permissions and\n *    limitations under the License.\n */\npackage org.mybatis.jpetstore.domain;\n\nimport java.io.Serializable;\nimport java.math.BigDecimal;\n\n/**\n * @author Eduardo Macarron\n *\n */\npublic class Item implements Serializable {\n\n  private static final long serialVersionUID = -2159121673445254631L;\n\n  private String itemId;\n  private String productId;\n  private BigDecimal listPrice;\n  private BigDecimal unitCost;\n  private int supplierId;\n  private String status;\n  private String attribute1;\n  private String attribute2;\n  private String attribute3;\n  private String attribute4;\n  private String attribute5;\n  private Product product;\n  private int quantity;\n\n  public String getItemId() {\n    return itemId;\n  }\n\n  public void setItemId(String itemId) {\n    this.itemId = itemId.trim();\n  }\n\n  public int getQuantity() {\n    return quantity;\n  }\n\n  public void setQuantity(int quantity) {\n    this.quantity = quantity;\n  }\n\n  public Product getProduct() {\n    return product;\n  }\n\n  public void setProduct(Product product) {\n    this.product = product;\n  }\n\n  public String getProductId() {\n    return productId;\n  }\n\n  public void setProductId(String productId) {\n    this.productId = productId;\n  }\n\n  public int getSupplierId() {\n    return supplierId;\n  }\n\n  public void setSupplierId(int supplierId) {\n    this.supplierId = supplierId;\n  }\n\n  public BigDecimal getListPrice() {\n    return listPrice;\n  }\n\n  public void setListPrice(BigDecimal listPrice) {\n    this.listPrice = listPrice;\n  }\n\n  public BigDecimal getUnitCost() {\n    return unitCost;\n  }\n\n  public void setUnitCost(BigDecimal unitCost) {\n    this.unitCost = unitCost;\n  }\n\n  public String getStatus() {\n    return status;\n  }\n\n  public void setStatus(String status) {\n    this.status = status;\n  }\n\n  public String getAttribute1() {\n    return attribute1;\n  }\n\n  public void setAttribute1(String attribute1) {\n    this.attribute1 = attribute1;\n  }\n\n  public String getAttribute2() {\n    return attribute2;\n  }\n\n  public void setAttribute2(String attribute2) {\n    this.attribute2 = attribute2;\n  }\n\n  public String getAttribute3() {\n    return attribute3;\n  }\n\n  public void setAttribute3(String attribute3) {\n    this.attribute3 = attribute3;\n  }\n\n  public String getAttribute4() {\n    return attribute4;\n  }\n\n  public void setAttribute4(String attribute4) {\n    this.attribute4 = attribute4;\n  }\n\n  public String getAttribute5() {\n    return attribute5;\n  }\n\n  public void setAttribute5(String attribute5) {\n    this.attribute5 = attribute5;\n  }\n\n  @Override\n  public String toString() {\n    return \"(\" + getItemId() + \"-\" + getProductId() + \")\";\n  }\n\n}\n", "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_VariableDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/jpetstore-6-jpetstore-6.0.2/src/main/java/org/mybatis/jpetstore/domain/Account.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["Account"], "AN": ["serialVersionUID", "username", "password", "email", "firstName", "lastName", "status", "address1", "address2", "city", "state", "zip", "country", "phone", "favouriteCategoryId", "languagePreference", "listOption", "bannerOption", "bannerName"], "SCS_VariableDeclarator": ["serialVersionUID", "username", "password", "email", "firstName", "lastName", "status", "address1", "address2", "city", "state", "zip", "country", "phone", "favouriteCategoryId", "languagePreference", "listOption", "bannerOption", "bannerName"], "MN": ["getUsername", "setUsername", "getPassword", "setPassword", "getEmail", "setEmail", "getFirstName", "setFirstName", "getLastName", "setLastName", "getStatus", "setStatus", "getAddress1", "setAddress1", "getAddress2", "setAddress2", "getCity", "setCity", "getState", "setState", "getZip", "setZip", "getCountry", "setCountry", "getPhone", "setPhone", "getFavouriteCategoryId", "setFavouriteCategoryId", "getLanguagePreference", "setLanguagePreference", "isListOption", "setListOption", "isBannerOption", "setBannerOption", "getBannerName", "setBannerName"], "PN": ["username", "password", "email", "firstName", "lastName", "status", "address1", "address2", "city", "state", "zip", "country", "phone", "favouriteCategoryId", "languagePreference", "listOption", "bannerOption", "bannerName"], "SCS_MemberReference": ["username", "username", "username", "password", "password", "password", "email", "email", "email", "firstName", "firstName", "firstName", "lastName", "lastName", "lastName", "status", "status", "status", "address1", "address1", "address1", "address2", "address2", "address2", "city", "city", "city", "state", "state", "state", "zip", "zip", "zip", "country", "country", "country", "phone", "phone", "phone", "favouriteCategoryId", "favouriteCategoryId", "favouriteCategoryId", "languagePreference", "languagePreference", "languagePreference", "listOption", "listOption", "listOption", "bannerOption", "bannerOption", "bannerOption", "bannerName", "bannerName", "bannerName"], "CO": ["/**\n *    Copyright ${license.git.copyrightYears} the original author or authors.\n *\n *    Licensed under the Apache License, Version 2.0 (the \"License\");\n *    you may not use this file except in compliance with the License.\n *    You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *    Unless required by applicable law or agreed to in writing, software\n *    distributed under the License is distributed on an \"AS IS\" BASIS,\n *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *    See the License for the specific language governing permissions and\n *    limitations under the License.\n */", "/**\n * @author Eduardo Macarron\n *\n */"], "CODE": "/**\n *    Copyright ${license.git.copyrightYears} the original author or authors.\n *\n *    Licensed under the Apache License, Version 2.0 (the \"License\");\n *    you may not use this file except in compliance with the License.\n *    You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *    Unless required by applicable law or agreed to in writing, software\n *    distributed under the License is distributed on an \"AS IS\" BASIS,\n *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *    See the License for the specific language governing permissions and\n *    limitations under the License.\n */\npackage org.mybatis.jpetstore.domain;\n\nimport java.io.Serializable;\n\nimport net.sourceforge.stripes.validation.Validate;\n\n/**\n * @author Eduardo Macarron\n *\n */\npublic class Account implements Serializable {\n\n  private static final long serialVersionUID = 8751282105532159742L;\n\n  private String username;\n  private String password;\n  private String email;\n  private String firstName;\n  private String lastName;\n  private String status;\n  private String address1;\n  private String address2;\n  private String city;\n  private String state;\n  private String zip;\n  private String country;\n  private String phone;\n  private String favouriteCategoryId;\n  private String languagePreference;\n  private boolean listOption;\n  private boolean bannerOption;\n  private String bannerName;\n\n  public String getUsername() {\n    return username;\n  }\n\n  public void setUsername(String username) {\n    this.username = username;\n  }\n\n  public String getPassword() {\n    return password;\n  }\n\n  public void setPassword(String password) {\n    this.password = password;\n  }\n\n  public String getEmail() {\n    return email;\n  }\n\n  public void setEmail(String email) {\n    this.email = email;\n  }\n\n  public String getFirstName() {\n    return firstName;\n  }\n\n  @Validate(required=true, on={\"newAccount\", \"editAccount\"})\n  public void setFirstName(String firstName) {\n    this.firstName = firstName;\n  }\n\n  public String getLastName() {\n    return lastName;\n  }\n\n  @Validate(required=true, on={\"newAccount\", \"editAccount\"})\n  public void setLastName(String lastName) {\n    this.lastName = lastName;\n  }\n\n  public String getStatus() {\n    return status;\n  }\n\n  public void setStatus(String status) {\n    this.status = status;\n  }\n\n  public String getAddress1() {\n    return address1;\n  }\n\n  public void setAddress1(String address1) {\n    this.address1 = address1;\n  }\n\n  public String getAddress2() {\n    return address2;\n  }\n\n  public void setAddress2(String address2) {\n    this.address2 = address2;\n  }\n\n  public String getCity() {\n    return city;\n  }\n\n  public void setCity(String city) {\n    this.city = city;\n  }\n\n  public String getState() {\n    return state;\n  }\n\n  public void setState(String state) {\n    this.state = state;\n  }\n\n  public String getZip() {\n    return zip;\n  }\n\n  public void setZip(String zip) {\n    this.zip = zip;\n  }\n\n  public String getCountry() {\n    return country;\n  }\n\n  public void setCountry(String country) {\n    this.country = country;\n  }\n\n  public String getPhone() {\n    return phone;\n  }\n\n  public void setPhone(String phone) {\n    this.phone = phone;\n  }\n\n  public String getFavouriteCategoryId() {\n    return favouriteCategoryId;\n  }\n\n  public void setFavouriteCategoryId(String favouriteCategoryId) {\n    this.favouriteCategoryId = favouriteCategoryId;\n  }\n\n  public String getLanguagePreference() {\n    return languagePreference;\n  }\n\n  public void setLanguagePreference(String languagePreference) {\n    this.languagePreference = languagePreference;\n  }\n\n  public boolean isListOption() {\n    return listOption;\n  }\n\n  public void setListOption(boolean listOption) {\n    this.listOption = listOption;\n  }\n\n  public boolean isBannerOption() {\n    return bannerOption;\n  }\n\n  public void setBannerOption(boolean bannerOption) {\n    this.bannerOption = bannerOption;\n  }\n\n  public String getBannerName() {\n    return bannerName;\n  }\n\n  public void setBannerName(String bannerName) {\n    this.bannerName = bannerName;\n  }\n\n}\n", "SCS_ClassReference": [], "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_VariableDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_MethodInvocation": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/jpetstore-6-jpetstore-6.0.2/src/main/java/org/mybatis/jpetstore/domain/CartItem.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["CartItem"], "AN": ["serialVersionUID", "item", "quantity", "inStock", "total"], "SCS_VariableDeclarator": ["serialVersionUID", "item", "quantity", "inStock", "total"], "MN": ["isInStock", "setInStock", "getTotal", "getItem", "setItem", "getQuantity", "setQuantity", "incrementQuantity", "calculateTotal"], "PN": ["inStock", "item", "quantity"], "SCS_MemberReference": ["inStock", "inStock", "inStock", "total", "item", "item", "item", "quantity", "quantity", "quantity", "quantity", "item", "total", "quantity", "total"], "SCS_ClassReference": ["", "", "", "item", "item", null], "SCS_MethodInvocation": ["calculateTotal", "calculateTotal", "calculateTotal", "getListPrice", "getListPrice", "multiply"], "CO": ["/**\n *    Copyright ${license.git.copyrightYears} the original author or authors.\n *\n *    Licensed under the Apache License, Version 2.0 (the \"License\");\n *    you may not use this file except in compliance with the License.\n *    You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *    Unless required by applicable law or agreed to in writing, software\n *    distributed under the License is distributed on an \"AS IS\" BASIS,\n *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *    See the License for the specific language governing permissions and\n *    limitations under the License.\n */", "/**\n * @author Eduardo Macarron\n *\n */"], "CODE": "/**\n *    Copyright ${license.git.copyrightYears} the original author or authors.\n *\n *    Licensed under the Apache License, Version 2.0 (the \"License\");\n *    you may not use this file except in compliance with the License.\n *    You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *    Unless required by applicable law or agreed to in writing, software\n *    distributed under the License is distributed on an \"AS IS\" BASIS,\n *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *    See the License for the specific language governing permissions and\n *    limitations under the License.\n */\npackage org.mybatis.jpetstore.domain;\n\nimport java.io.Serializable;\nimport java.math.BigDecimal;\n\n/**\n * @author Eduardo Macarron\n *\n */\npublic class CartItem implements Serializable {\n \n  private static final long serialVersionUID = 6620528781626504362L;\n\n  private Item item;\n  private int quantity;\n  private boolean inStock;\n  private BigDecimal total;\n\n  public boolean isInStock() {\n    return inStock;\n  }\n\n  public void setInStock(boolean inStock) {\n    this.inStock = inStock;\n  }\n\n  public BigDecimal getTotal() {\n    return total;\n  }\n\n  public Item getItem() {\n    return item;\n  }\n\n  public void setItem(Item item) {\n    this.item = item;\n    calculateTotal();\n  }\n\n  public int getQuantity() {\n    return quantity;\n  }\n\n  public void setQuantity(int quantity) {\n    this.quantity = quantity;\n    calculateTotal();\n  }\n\n  public void incrementQuantity() {\n    quantity++;\n    calculateTotal();\n  }\n\n  private void calculateTotal() {\n    if (item != null && item.getListPrice() != null) {\n      total = item.getListPrice().multiply(new BigDecimal(quantity));\n    } else {\n      total = null;\n    }\n  }\n\n}\n", "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_VariableDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/jpetstore-6-jpetstore-6.0.2/src/main/java/org/mybatis/jpetstore/domain/Sequence.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["Sequence"], "AN": ["serialVersionUID", "name", "nextId"], "SCS_VariableDeclarator": ["serialVersionUID", "name", "nextId"], "SCS_ConstructorDeclaration": ["Sequence", "Sequence"], "SCS_MemberReference": ["name", "name", "nextId", "nextId", "name", "name", "name", "nextId", "nextId", "nextId"], "MN": ["getName", "setName", "getNextId", "setNextId"], "PN": ["name", "nextId"], "CO": ["/**\n *    Copyright ${license.git.copyrightYears} the original author or authors.\n *\n *    Licensed under the Apache License, Version 2.0 (the \"License\");\n *    you may not use this file except in compliance with the License.\n *    You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *    Unless required by applicable law or agreed to in writing, software\n *    distributed under the License is distributed on an \"AS IS\" BASIS,\n *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *    See the License for the specific language governing permissions and\n *    limitations under the License.\n */", "/**\n * @author Eduardo Macarron\n *\n */"], "CODE": "/**\n *    Copyright ${license.git.copyrightYears} the original author or authors.\n *\n *    Licensed under the Apache License, Version 2.0 (the \"License\");\n *    you may not use this file except in compliance with the License.\n *    You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *    Unless required by applicable law or agreed to in writing, software\n *    distributed under the License is distributed on an \"AS IS\" BASIS,\n *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *    See the License for the specific language governing permissions and\n *    limitations under the License.\n */\npackage org.mybatis.jpetstore.domain;\n\nimport java.io.Serializable;\n\n/**\n * @author Eduardo Macarron\n *\n */\npublic class Sequence implements Serializable {\n\n  private static final long serialVersionUID = 8278780133180137281L;\n \n  private String name;\n  private int nextId;\n\n  public Sequence() {\n  }\n\n  public Sequence(String name, int nextId) {\n    this.name = name;\n    this.nextId = nextId;\n  }\n\n  public String getName() {\n    return name;\n  }\n\n  public void setName(String name) {\n    this.name = name;\n  }\n\n  public int getNextId() {\n    return nextId;\n  }\n\n  public void setNextId(int nextId) {\n    this.nextId = nextId;\n  }\n\n}\n", "SCS_ClassReference": [], "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_VariableDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_MethodInvocation": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/jpetstore-6-jpetstore-6.0.2/src/main/java/org/mybatis/jpetstore/domain/LineItem.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["LineItem"], "AN": ["serialVersionUID", "orderId", "lineNumber", "quantity", "itemId", "unitPrice", "item", "total"], "SCS_VariableDeclarator": ["serialVersionUID", "orderId", "lineNumber", "quantity", "itemId", "unitPrice", "item", "total"], "SCS_ConstructorDeclaration": ["LineItem", "LineItem"], "SCS_MemberReference": ["lineNumber", "lineNumber", "quantity", "itemId", "unitPrice", "item", "orderId", "orderId", "orderId", "lineNumber", "lineNumber", "lineNumber", "itemId", "itemId", "itemId", "unitPrice", "unitPrice", "unitprice", "total", "item", "item", "item", "quantity", "quantity", "quantity", "item", "total", "quantity", "total"], "SCS_ClassReference": ["cartItem", "cartItem", null, "cartItem", null, "cartItem", "", "", "item", "item", null], "SCS_MethodInvocation": ["getQuantity", "getItem", "getItemId", "getItem", "getListPrice", "getItem", "calculateTotal", "calculateTotal", "getListPrice", "getListPrice", "multiply"], "MN": ["getOrderId", "setOrderId", "getLineNumber", "setLineNumber", "getItemId", "setItemId", "getUnitPrice", "setUnitPrice", "getTotal", "getItem", "setItem", "getQuantity", "setQuantity", "calculateTotal"], "PN": ["orderId", "lineNumber", "itemId", "unitprice", "item", "quantity"], "CO": ["/**\n *    Copyright ${license.git.copyrightYears} the original author or authors.\n *\n *    Licensed under the Apache License, Version 2.0 (the \"License\");\n *    you may not use this file except in compliance with the License.\n *    You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *    Unless required by applicable law or agreed to in writing, software\n *    distributed under the License is distributed on an \"AS IS\" BASIS,\n *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *    See the License for the specific language governing permissions and\n *    limitations under the License.\n */", "/**\n * @author Eduardo Macarron\n *\n */"], "CODE": "/**\n *    Copyright ${license.git.copyrightYears} the original author or authors.\n *\n *    Licensed under the Apache License, Version 2.0 (the \"License\");\n *    you may not use this file except in compliance with the License.\n *    You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *    Unless required by applicable law or agreed to in writing, software\n *    distributed under the License is distributed on an \"AS IS\" BASIS,\n *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *    See the License for the specific language governing permissions and\n *    limitations under the License.\n */\npackage org.mybatis.jpetstore.domain;\n\nimport java.io.Serializable;\nimport java.math.BigDecimal;\n\n/**\n * @author Eduardo Macarron\n *\n */\npublic class LineItem implements Serializable {\n\n  private static final long serialVersionUID = 6804536240033522156L;\n\n  private int orderId;\n  private int lineNumber;\n  private int quantity;\n  private String itemId;\n  private BigDecimal unitPrice;\n  private Item item;\n  private BigDecimal total;\n\n  public LineItem() {\n  }\n\n  public LineItem(int lineNumber, CartItem cartItem) {\n    this.lineNumber = lineNumber;\n    this.quantity = cartItem.getQuantity();\n    this.itemId = cartItem.getItem().getItemId();\n    this.unitPrice = cartItem.getItem().getListPrice();\n    this.item = cartItem.getItem();\n  }\n\n  public int getOrderId() {\n    return orderId;\n  }\n\n  public void setOrderId(int orderId) {\n    this.orderId = orderId;\n  }\n\n  public int getLineNumber() {\n    return lineNumber;\n  }\n\n  public void setLineNumber(int lineNumber) {\n    this.lineNumber = lineNumber;\n  }\n\n  public String getItemId() {\n    return itemId;\n  }\n\n  public void setItemId(String itemId) {\n    this.itemId = itemId;\n  }\n\n  public BigDecimal getUnitPrice() {\n    return unitPrice;\n  }\n\n  public void setUnitPrice(BigDecimal unitprice) {\n    this.unitPrice = unitprice;\n  }\n\n  public BigDecimal getTotal() {\n    return total;\n  }\n\n  public Item getItem() {\n    return item;\n  }\n\n  public void setItem(Item item) {\n    this.item = item;\n    calculateTotal();\n  }\n\n  public int getQuantity() {\n    return quantity;\n  }\n\n  public void setQuantity(int quantity) {\n    this.quantity = quantity;\n    calculateTotal();\n  }\n\n  private void calculateTotal() {\n    if (item != null && item.getListPrice() != null) {\n      total = item.getListPrice().multiply(new BigDecimal(quantity));\n    } else {\n      total = null;\n    }\n  }\n\n}\n", "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_VariableDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/jpetstore-6-jpetstore-6.0.2/src/main/java/org/mybatis/jpetstore/domain/Product.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["Product"], "AN": ["serialVersionUID", "productId", "categoryId", "name", "description"], "SCS_VariableDeclarator": ["serialVersionUID", "productId", "categoryId", "name", "description"], "MN": ["getProductId", "setProductId", "getCategoryId", "setCategoryId", "getName", "setName", "getDescription", "setDescription", "toString"], "PN": ["productId", "categoryId", "name", "description"], "SCS_MemberReference": ["productId", "productId", "categoryId", "categoryId", "categoryId", "name", "name", "name", "description", "description", "description"], "SCS_ClassReference": ["productId", ""], "SCS_MethodInvocation": ["trim", "getName"], "CO": ["/**\n *    Copyright ${license.git.copyrightYears} the original author or authors.\n *\n *    Licensed under the Apache License, Version 2.0 (the \"License\");\n *    you may not use this file except in compliance with the License.\n *    You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *    Unless required by applicable law or agreed to in writing, software\n *    distributed under the License is distributed on an \"AS IS\" BASIS,\n *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *    See the License for the specific language governing permissions and\n *    limitations under the License.\n */", "/**\n * @author Eduardo Macarron\n *\n */"], "CODE": "/**\n *    Copyright ${license.git.copyrightYears} the original author or authors.\n *\n *    Licensed under the Apache License, Version 2.0 (the \"License\");\n *    you may not use this file except in compliance with the License.\n *    You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *    Unless required by applicable law or agreed to in writing, software\n *    distributed under the License is distributed on an \"AS IS\" BASIS,\n *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *    See the License for the specific language governing permissions and\n *    limitations under the License.\n */\npackage org.mybatis.jpetstore.domain;\n\nimport java.io.Serializable;\n\n/**\n * @author Eduardo Macarron\n *\n */\npublic class Product implements Serializable {\n\n  private static final long serialVersionUID = -7492639752670189553L;\n  \n  private String productId;\n  private String categoryId;\n  private String name;\n  private String description;\n\n  public String getProductId() {\n    return productId;\n  }\n\n  public void setProductId(String productId) {\n    this.productId = productId.trim();\n  }\n\n  public String getCategoryId() {\n    return categoryId;\n  }\n\n  public void setCategoryId(String categoryId) {\n    this.categoryId = categoryId;\n  }\n\n  public String getName() {\n    return name;\n  }\n\n  public void setName(String name) {\n    this.name = name;\n  }\n\n  public String getDescription() {\n    return description;\n  }\n\n  public void setDescription(String description) {\n    this.description = description;\n  }\n\n  @Override\n  public String toString() {\n    return getName();\n  }\n\n}\n", "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_VariableDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/jpetstore-6-jpetstore-6.0.2/src/main/java/org/mybatis/jpetstore/domain/Category.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["Category"], "AN": ["serialVersionUID", "categoryId", "name", "description"], "SCS_VariableDeclarator": ["serialVersionUID", "categoryId", "name", "description"], "MN": ["getCategoryId", "setCategoryId", "getName", "setName", "getDescription", "setDescription", "toString"], "PN": ["categoryId", "name", "description"], "SCS_MemberReference": ["categoryId", "categoryId", "name", "name", "name", "description", "description", "description"], "SCS_ClassReference": ["categoryId", ""], "SCS_MethodInvocation": ["trim", "getCategoryId"], "CO": ["/**\n *    Copyright ${license.git.copyrightYears} the original author or authors.\n *\n *    Licensed under the Apache License, Version 2.0 (the \"License\");\n *    you may not use this file except in compliance with the License.\n *    You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *    Unless required by applicable law or agreed to in writing, software\n *    distributed under the License is distributed on an \"AS IS\" BASIS,\n *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *    See the License for the specific language governing permissions and\n *    limitations under the License.\n */", "/**\n * @author Eduardo Macarron\n *\n */"], "CODE": "/**\n *    Copyright ${license.git.copyrightYears} the original author or authors.\n *\n *    Licensed under the Apache License, Version 2.0 (the \"License\");\n *    you may not use this file except in compliance with the License.\n *    You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *    Unless required by applicable law or agreed to in writing, software\n *    distributed under the License is distributed on an \"AS IS\" BASIS,\n *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *    See the License for the specific language governing permissions and\n *    limitations under the License.\n */\npackage org.mybatis.jpetstore.domain;\n\nimport java.io.Serializable;\n\n/**\n * @author Eduardo Macarron\n *\n */\npublic class Category implements Serializable {\n\n  private static final long serialVersionUID = 3992469837058393712L;\n\n  private String categoryId;\n  private String name;\n  private String description;\n\n  public String getCategoryId() {\n    return categoryId;\n  }\n\n  public void setCategoryId(String categoryId) {\n    this.categoryId = categoryId.trim();\n  }\n\n  public String getName() {\n    return name;\n  }\n\n  public void setName(String name) {\n    this.name = name;\n  }\n\n  public String getDescription() {\n    return description;\n  }\n\n  public void setDescription(String description) {\n    this.description = description;\n  }\n\n  @Override\n  public String toString() {\n    return getCategoryId();\n  }\n\n}\n", "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_VariableDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/jpetstore-6-jpetstore-6.0.2/src/main/java/org/mybatis/jpetstore/mapper/OrderMapper.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["OrderMapper"], "MN": ["getOrdersByUsername", "getOrder", "insertOrder", "insertOrderStatus"], "PN": ["username", "orderId", "order", "order"], "CO": ["/**\n *    Copyright ${license.git.copyrightYears} the original author or authors.\n *\n *    Licensed under the Apache License, Version 2.0 (the \"License\");\n *    you may not use this file except in compliance with the License.\n *    You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *    Unless required by applicable law or agreed to in writing, software\n *    distributed under the License is distributed on an \"AS IS\" BASIS,\n *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *    See the License for the specific language governing permissions and\n *    limitations under the License.\n */", "/**\n * @author Eduardo Macarron\n *\n */"], "CODE": "/**\n *    Copyright ${license.git.copyrightYears} the original author or authors.\n *\n *    Licensed under the Apache License, Version 2.0 (the \"License\");\n *    you may not use this file except in compliance with the License.\n *    You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *    Unless required by applicable law or agreed to in writing, software\n *    distributed under the License is distributed on an \"AS IS\" BASIS,\n *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *    See the License for the specific language governing permissions and\n *    limitations under the License.\n */\npackage org.mybatis.jpetstore.mapper;\n\nimport java.util.List;\n\nimport org.mybatis.jpetstore.domain.Order;\n\n/**\n * @author Eduardo Macarron\n *\n */\npublic interface OrderMapper {\n\n  List<Order> getOrdersByUsername(String username);\n\n  Order getOrder(int orderId);\n  \n  void insertOrder(Order order);\n  \n  void insertOrderStatus(Order order);\n\n}\n", "AN": [], "SCS_ClassReference": [], "SCS_MemberReference": [], "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_VariableDeclaration": [], "SCS_VariableDeclarator": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_MethodInvocation": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/jpetstore-6-jpetstore-6.0.2/src/main/java/org/mybatis/jpetstore/mapper/ItemMapper.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["ItemMapper"], "MN": ["updateInventoryQuantity", "getInventoryQuantity", "getItemListByProduct", "getItem"], "PN": ["param", "itemId", "productId", "itemId"], "CO": ["/**\n *    Copyright ${license.git.copyrightYears} the original author or authors.\n *\n *    Licensed under the Apache License, Version 2.0 (the \"License\");\n *    you may not use this file except in compliance with the License.\n *    You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *    Unless required by applicable law or agreed to in writing, software\n *    distributed under the License is distributed on an \"AS IS\" BASIS,\n *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *    See the License for the specific language governing permissions and\n *    limitations under the License.\n */", "/**\n * @author Eduardo Macarron\n *\n */"], "CODE": "/**\n *    Copyright ${license.git.copyrightYears} the original author or authors.\n *\n *    Licensed under the Apache License, Version 2.0 (the \"License\");\n *    you may not use this file except in compliance with the License.\n *    You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *    Unless required by applicable law or agreed to in writing, software\n *    distributed under the License is distributed on an \"AS IS\" BASIS,\n *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *    See the License for the specific language governing permissions and\n *    limitations under the License.\n */\npackage org.mybatis.jpetstore.mapper;\n\nimport java.util.List;\nimport java.util.Map;\n\nimport org.mybatis.jpetstore.domain.Item;\n\n/**\n * @author Eduardo Macarron\n *\n */\npublic interface ItemMapper {\n\n  void updateInventoryQuantity(Map<String, Object> param);\n\n  int getInventoryQuantity(String itemId);\n\n  List<Item> getItemListByProduct(String productId);\n\n  Item getItem(String itemId);\n\n}\n", "AN": [], "SCS_ClassReference": [], "SCS_MemberReference": [], "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_VariableDeclaration": [], "SCS_VariableDeclarator": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_MethodInvocation": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/jpetstore-6-jpetstore-6.0.2/src/main/java/org/mybatis/jpetstore/mapper/ProductMapper.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["ProductMapper"], "MN": ["getProductListByCategory", "getProduct", "searchProductList"], "PN": ["categoryId", "productId", "keywords"], "CO": ["/**\n *    Copyright ${license.git.copyrightYears} the original author or authors.\n *\n *    Licensed under the Apache License, Version 2.0 (the \"License\");\n *    you may not use this file except in compliance with the License.\n *    You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *    Unless required by applicable law or agreed to in writing, software\n *    distributed under the License is distributed on an \"AS IS\" BASIS,\n *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *    See the License for the specific language governing permissions and\n *    limitations under the License.\n */", "/**\n * @author Eduardo Macarron\n *\n */"], "CODE": "/**\n *    Copyright ${license.git.copyrightYears} the original author or authors.\n *\n *    Licensed under the Apache License, Version 2.0 (the \"License\");\n *    you may not use this file except in compliance with the License.\n *    You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *    Unless required by applicable law or agreed to in writing, software\n *    distributed under the License is distributed on an \"AS IS\" BASIS,\n *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *    See the License for the specific language governing permissions and\n *    limitations under the License.\n */\npackage org.mybatis.jpetstore.mapper;\n\nimport java.util.List;\n\nimport org.mybatis.jpetstore.domain.Product;\n\n/**\n * @author Eduardo Macarron\n *\n */\npublic interface ProductMapper {\n\n  List<Product> getProductListByCategory(String categoryId);\n\n  Product getProduct(String productId);\n\n  List<Product> searchProductList(String keywords);\n\n}\n", "AN": [], "SCS_ClassReference": [], "SCS_MemberReference": [], "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_VariableDeclaration": [], "SCS_VariableDeclarator": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_MethodInvocation": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/jpetstore-6-jpetstore-6.0.2/src/main/java/org/mybatis/jpetstore/mapper/LineItemMapper.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["LineItemMapper"], "MN": ["getLineItemsByOrderId", "insertLineItem"], "PN": ["orderId", "lineItem"], "CO": ["/**\n *    Copyright ${license.git.copyrightYears} the original author or authors.\n *\n *    Licensed under the Apache License, Version 2.0 (the \"License\");\n *    you may not use this file except in compliance with the License.\n *    You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *    Unless required by applicable law or agreed to in writing, software\n *    distributed under the License is distributed on an \"AS IS\" BASIS,\n *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *    See the License for the specific language governing permissions and\n *    limitations under the License.\n */", "/**\n * @author Eduardo Macarron\n *\n */"], "CODE": "/**\n *    Copyright ${license.git.copyrightYears} the original author or authors.\n *\n *    Licensed under the Apache License, Version 2.0 (the \"License\");\n *    you may not use this file except in compliance with the License.\n *    You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *    Unless required by applicable law or agreed to in writing, software\n *    distributed under the License is distributed on an \"AS IS\" BASIS,\n *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *    See the License for the specific language governing permissions and\n *    limitations under the License.\n */\npackage org.mybatis.jpetstore.mapper;\n\nimport java.util.List;\n\nimport org.mybatis.jpetstore.domain.LineItem;\n\n/**\n * @author Eduardo Macarron\n *\n */\npublic interface LineItemMapper {\n\n  List<LineItem> getLineItemsByOrderId(int orderId);\n\n  void insertLineItem(LineItem lineItem);\n\n}\n", "AN": [], "SCS_ClassReference": [], "SCS_MemberReference": [], "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_VariableDeclaration": [], "SCS_VariableDeclarator": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_MethodInvocation": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/jpetstore-6-jpetstore-6.0.2/src/main/java/org/mybatis/jpetstore/mapper/AccountMapper.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["AccountMapper"], "MN": ["getAccountByUsername", "getAccountByUsernameAndPassword", "insertAccount", "insertProfile", "insertSignon", "updateAccount", "updateProfile", "updateSignon"], "PN": ["username", "username", "password", "account", "account", "account", "account", "account", "account"], "CO": ["/**\n *    Copyright ${license.git.copyrightYears} the original author or authors.\n *\n *    Licensed under the Apache License, Version 2.0 (the \"License\");\n *    you may not use this file except in compliance with the License.\n *    You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *    Unless required by applicable law or agreed to in writing, software\n *    distributed under the License is distributed on an \"AS IS\" BASIS,\n *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *    See the License for the specific language governing permissions and\n *    limitations under the License.\n */", "/**\n * @author Eduardo Macarron\n *\n */"], "CODE": "/**\n *    Copyright ${license.git.copyrightYears} the original author or authors.\n *\n *    Licensed under the Apache License, Version 2.0 (the \"License\");\n *    you may not use this file except in compliance with the License.\n *    You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *    Unless required by applicable law or agreed to in writing, software\n *    distributed under the License is distributed on an \"AS IS\" BASIS,\n *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *    See the License for the specific language governing permissions and\n *    limitations under the License.\n */\npackage org.mybatis.jpetstore.mapper;\n\nimport org.mybatis.jpetstore.domain.Account;\n\n/**\n * @author Eduardo Macarron\n *\n */\npublic interface AccountMapper {\n\n  Account getAccountByUsername(String username);\n\n  Account getAccountByUsernameAndPassword(String username, String password);\n\n  void insertAccount(Account account);\n  \n  void insertProfile(Account account);\n  \n  void insertSignon(Account account);\n\n  void updateAccount(Account account);\n\n  void updateProfile(Account account);\n\n  void updateSignon(Account account);\n\n}\n", "AN": [], "SCS_ClassReference": [], "SCS_MemberReference": [], "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_VariableDeclaration": [], "SCS_VariableDeclarator": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_MethodInvocation": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/jpetstore-6-jpetstore-6.0.2/src/main/java/org/mybatis/jpetstore/mapper/SequenceMapper.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["SequenceMapper"], "MN": ["getSequence", "updateSequence"], "PN": ["sequence", "sequence"], "CO": ["/**\n *    Copyright ${license.git.copyrightYears} the original author or authors.\n *\n *    Licensed under the Apache License, Version 2.0 (the \"License\");\n *    you may not use this file except in compliance with the License.\n *    You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *    Unless required by applicable law or agreed to in writing, software\n *    distributed under the License is distributed on an \"AS IS\" BASIS,\n *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *    See the License for the specific language governing permissions and\n *    limitations under the License.\n */", "/**\n * @author Eduardo Macarron\n *\n */"], "CODE": "/**\n *    Copyright ${license.git.copyrightYears} the original author or authors.\n *\n *    Licensed under the Apache License, Version 2.0 (the \"License\");\n *    you may not use this file except in compliance with the License.\n *    You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *    Unless required by applicable law or agreed to in writing, software\n *    distributed under the License is distributed on an \"AS IS\" BASIS,\n *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *    See the License for the specific language governing permissions and\n *    limitations under the License.\n */\npackage org.mybatis.jpetstore.mapper;\n\nimport org.mybatis.jpetstore.domain.Sequence;\n\n/**\n * @author Eduardo Macarron\n *\n */\npublic interface SequenceMapper {\n\n  Sequence getSequence(Sequence sequence);\n  void updateSequence(Sequence sequence);\n}\n", "AN": [], "SCS_ClassReference": [], "SCS_MemberReference": [], "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_VariableDeclaration": [], "SCS_VariableDeclarator": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_MethodInvocation": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/jpetstore-6-jpetstore-6.0.2/src/main/java/org/mybatis/jpetstore/mapper/CategoryMapper.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["CategoryMapper"], "MN": ["getCategoryList", "getCategory"], "PN": ["categoryId"], "CO": ["/**\n *    Copyright ${license.git.copyrightYears} the original author or authors.\n *\n *    Licensed under the Apache License, Version 2.0 (the \"License\");\n *    you may not use this file except in compliance with the License.\n *    You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *    Unless required by applicable law or agreed to in writing, software\n *    distributed under the License is distributed on an \"AS IS\" BASIS,\n *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *    See the License for the specific language governing permissions and\n *    limitations under the License.\n */", "/**\n * @author Eduardo Macarron\n *\n */"], "CODE": "/**\n *    Copyright ${license.git.copyrightYears} the original author or authors.\n *\n *    Licensed under the Apache License, Version 2.0 (the \"License\");\n *    you may not use this file except in compliance with the License.\n *    You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *    Unless required by applicable law or agreed to in writing, software\n *    distributed under the License is distributed on an \"AS IS\" BASIS,\n *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *    See the License for the specific language governing permissions and\n *    limitations under the License.\n */\npackage org.mybatis.jpetstore.mapper;\n\nimport java.util.List;\n\nimport org.mybatis.jpetstore.domain.Category;\n\n/**\n * @author Eduardo Macarron\n *\n */\npublic interface CategoryMapper {\n\n  List<Category> getCategoryList();\n\n  Category getCategory(String categoryId);\n\n}\n", "AN": [], "SCS_ClassReference": [], "SCS_MemberReference": [], "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_VariableDeclaration": [], "SCS_VariableDeclarator": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_MethodInvocation": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/jpetstore-6-jpetstore-6.0.2/src/main/java/org/mybatis/jpetstore/web/actions/OrderActionBean.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["OrderActionBean"], "AN": ["serialVersionUID", "CONFIRM_ORDER", "LIST_ORDERS", "NEW_ORDER", "SHIPPING", "VIEW_ORDER", "CARD_TYPE_LIST", "orderService", "order", "shippingAddressRequired", "confirmed", "orderList"], "SCS_VariableDeclarator": ["serialVersionUID", "CONFIRM_ORDER", "LIST_ORDERS", "NEW_ORDER", "SHIPPING", "VIEW_ORDER", "CARD_TYPE_LIST", "orderService", "order", "shippingAddressRequired", "confirmed", "orderList", "cardList", "session", "accountBean", "session", "accountBean", "cartBean", "session", "cartBean", "session", "accountBean"], "SCS_VariableDeclaration": ["List", "HttpSession", "AccountActionBean", "HttpSession", "AccountActionBean", "CartActionBean", "HttpSession", "CartActionBean", "HttpSession", "AccountActionBean"], "SCS_ClassReference": ["cardList", "cardList", "cardList", "Collections", "order", "order", "context", null, "session", "orderService", "accountBean", null, "context", null, "session", "session", "", "accountBean", "", "AccountActionBean", "order", "accountBean", "cartBean", "", "context", null, "", "", "orderService", "session", "cartBean", "", "", "context", null, "session", "orderService", "order", "accountBean", null, null, "order", ""], "SCS_MethodInvocation": ["add", "add", "add", "unmodifiableList", "getOrderId", "setOrderId", "getRequest", "getSession", "getAttribute", "getOrdersByUsername", "getAccount", "getUsername", "getRequest", "getSession", "getAttribute", "getAttribute", "clear", "isAuthenticated", "setMessage", "initOrder", "getAccount", "getCart", "setMessage", "getRequest", "getSession", "isConfirmed", "getOrder", "insertOrder", "getAttribute", "clear", "setMessage", "setMessage", "getRequest", "getSession", "getAttribute", "getOrder", "getOrderId", "getAccount", "getUsername", "equals", "getUsername", "setMessage"], "SCS_MemberReference": ["CARD_TYPE_LIST", "cardList", "orderId", "order", "order", "order", "shippingAddressRequired", "shippingAddressRequired", "shippingAddressRequired", "confirmed", "confirmed", "confirmed", "CARD_TYPE_LIST", "orderList", "orderList", "LIST_ORDERS", "accountBean", "cartBean", "NEW_ORDER", "ERROR", "shippingAddressRequired", "shippingAddressRequired", "SHIPPING", "CONFIRM_ORDER", "order", "VIEW_ORDER", "ERROR", "order", "VIEW_ORDER", "order", "ERROR", "order", "shippingAddressRequired", "confirmed", "orderList"], "MN": ["getOrderId", "setOrderId", "getOrder", "setOrder", "isShippingAddressRequired", "setShippingAddressRequired", "isConfirmed", "setConfirmed", "getCreditCardTypes", "getOrderList", "listOrders", "newOrderForm", "newOrder", "viewOrder", "clear"], "PN": ["orderId", "order", "shippingAddressRequired", "confirmed"], "CO": ["/**\n *    Copyright ${license.git.copyrightYears} the original author or authors.\n *\n *    Licensed under the Apache License, Version 2.0 (the \"License\");\n *    you may not use this file except in compliance with the License.\n *    You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *    Unless required by applicable law or agreed to in writing, software\n *    distributed under the License is distributed on an \"AS IS\" BASIS,\n *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *    See the License for the specific language governing permissions and\n *    limitations under the License.\n */", "/**\n * @author Eduardo Macarron\n *\n */"], "CODE": "/**\n *    Copyright ${license.git.copyrightYears} the original author or authors.\n *\n *    Licensed under the Apache License, Version 2.0 (the \"License\");\n *    you may not use this file except in compliance with the License.\n *    You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *    Unless required by applicable law or agreed to in writing, software\n *    distributed under the License is distributed on an \"AS IS\" BASIS,\n *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *    See the License for the specific language governing permissions and\n *    limitations under the License.\n */\npackage org.mybatis.jpetstore.web.actions;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\nimport javax.servlet.http.HttpSession;\n\nimport net.sourceforge.stripes.action.ForwardResolution;\nimport net.sourceforge.stripes.action.Resolution;\nimport net.sourceforge.stripes.action.SessionScope;\nimport net.sourceforge.stripes.integration.spring.SpringBean;\n\nimport org.mybatis.jpetstore.domain.Order;\nimport org.mybatis.jpetstore.service.OrderService;\n\n/**\n * @author Eduardo Macarron\n *\n */\n@SessionScope\npublic class OrderActionBean extends AbstractActionBean {\n\n  private static final long serialVersionUID = -6171288227470176272L;\n\n  private static final String CONFIRM_ORDER = \"/WEB-INF/jsp/order/ConfirmOrder.jsp\";\n  private static final String LIST_ORDERS = \"/WEB-INF/jsp/order/ListOrders.jsp\";\n  private static final String NEW_ORDER = \"/WEB-INF/jsp/order/NewOrderForm.jsp\";\n  private static final String SHIPPING = \"/WEB-INF/jsp/order/ShippingForm.jsp\";\n  private static final String VIEW_ORDER = \"/WEB-INF/jsp/order/ViewOrder.jsp\";\n\n  private static final List<String> CARD_TYPE_LIST;\n\n  @SpringBean\n  private transient OrderService orderService;\n\n  private Order order = new Order();\n  private boolean shippingAddressRequired;\n  private boolean confirmed;\n  private List<Order> orderList;\n\n  static {\n    List<String> cardList = new ArrayList<String>();\n    cardList.add(\"Visa\");\n    cardList.add(\"MasterCard\");\n    cardList.add(\"American Express\");\n    CARD_TYPE_LIST = Collections.unmodifiableList(cardList);\n  }\n\n  public int getOrderId() {\n    return order.getOrderId();\n  }\n\n  public void setOrderId(int orderId) {\n    order.setOrderId(orderId);\n  }\n\n  public Order getOrder() {\n    return order;\n  }\n\n  public void setOrder(Order order) {\n    this.order = order;\n  }\n\n  public boolean isShippingAddressRequired() {\n    return shippingAddressRequired;\n  }\n\n  public void setShippingAddressRequired(boolean shippingAddressRequired) {\n    this.shippingAddressRequired = shippingAddressRequired;\n  }\n\n  public boolean isConfirmed() {\n    return confirmed;\n  }\n\n  public void setConfirmed(boolean confirmed) {\n    this.confirmed = confirmed;\n  }\n\n  public List<String> getCreditCardTypes() {\n    return CARD_TYPE_LIST;\n  }\n\n  public List<Order> getOrderList() {\n    return orderList;\n  }\n\n  public Resolution listOrders() {\n    HttpSession session = context.getRequest().getSession();\n    AccountActionBean accountBean = (AccountActionBean) session.getAttribute(\"/actions/Account.action\");\n    orderList = orderService.getOrdersByUsername(accountBean.getAccount().getUsername());\n    return new ForwardResolution(LIST_ORDERS);\n  }\n\n  public Resolution newOrderForm() {\n    HttpSession session = context.getRequest().getSession();\n    AccountActionBean accountBean = (AccountActionBean) session.getAttribute(\"/actions/Account.action\");\n    CartActionBean cartBean = (CartActionBean) session.getAttribute(\"/actions/Cart.action\");\n\n    clear();\n    if (accountBean == null || !accountBean.isAuthenticated()) {\n      setMessage(\"You must sign on before attempting to check out.  Please sign on and try checking out again.\");\n      return new ForwardResolution(AccountActionBean.class);\n    } else if (cartBean != null) {\n      order.initOrder(accountBean.getAccount(), cartBean.getCart());\n      return new ForwardResolution(NEW_ORDER);\n    } else {\n      setMessage(\"An order could not be created because a cart could not be found.\");\n      return new ForwardResolution(ERROR);\n    }\n  }\n\n  public Resolution newOrder() {\n    HttpSession session = context.getRequest().getSession();\n\n    if (shippingAddressRequired) {\n      shippingAddressRequired = false;\n      return new ForwardResolution(SHIPPING);\n    } else if (!isConfirmed()) {\n      return new ForwardResolution(CONFIRM_ORDER);\n    } else if (getOrder() != null) {\n\n      orderService.insertOrder(order);\n\n      CartActionBean cartBean = (CartActionBean) session.getAttribute(\"/actions/Cart.action\");\n      cartBean.clear();\n\n      setMessage(\"Thank you, your order has been submitted.\");\n\n      return new ForwardResolution(VIEW_ORDER);\n    } else {\n      setMessage(\"An error occurred processing your order (order was null).\");\n      return new ForwardResolution(ERROR);\n    }\n  }\n\n  public Resolution viewOrder() {\n    HttpSession session = context.getRequest().getSession();\n\n    AccountActionBean accountBean = (AccountActionBean) session.getAttribute(\"accountBean\");\n\n    order = orderService.getOrder(order.getOrderId());\n\n    if (accountBean.getAccount().getUsername().equals(order.getUsername())) {\n      return new ForwardResolution(VIEW_ORDER);\n    } else {\n      order = null;\n      setMessage(\"You may only view your own orders.\");\n      return new ForwardResolution(ERROR);\n    }\n  }\n\n  public void clear() {\n    order = new Order();\n    shippingAddressRequired = false;\n    confirmed = false;\n    orderList = null;\n  }\n\n}\n", "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/jpetstore-6-jpetstore-6.0.2/src/main/java/org/mybatis/jpetstore/web/actions/AbstractActionBean.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["AbstractActionBean"], "AN": ["serialVersionUID", "ERROR", "context"], "SCS_VariableDeclarator": ["serialVersionUID", "ERROR", "context"], "MN": ["setMessage", "getContext", "setContext"], "PN": ["value", "context"], "SCS_ClassReference": ["context", null], "SCS_MethodInvocation": ["getMessages", "add"], "SCS_MemberReference": ["value", "context", "context", "context"], "CO": ["/**\n *    Copyright ${license.git.copyrightYears} the original author or authors.\n *\n *    Licensed under the Apache License, Version 2.0 (the \"License\");\n *    you may not use this file except in compliance with the License.\n *    You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *    Unless required by applicable law or agreed to in writing, software\n *    distributed under the License is distributed on an \"AS IS\" BASIS,\n *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *    See the License for the specific language governing permissions and\n *    limitations under the License.\n */", "/**\n * @author Eduardo Macarron\n *\n */"], "CODE": "/**\n *    Copyright ${license.git.copyrightYears} the original author or authors.\n *\n *    Licensed under the Apache License, Version 2.0 (the \"License\");\n *    you may not use this file except in compliance with the License.\n *    You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *    Unless required by applicable law or agreed to in writing, software\n *    distributed under the License is distributed on an \"AS IS\" BASIS,\n *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *    See the License for the specific language governing permissions and\n *    limitations under the License.\n */\npackage org.mybatis.jpetstore.web.actions;\n\nimport java.io.Serializable;\n\nimport net.sourceforge.stripes.action.ActionBean;\nimport net.sourceforge.stripes.action.ActionBeanContext;\nimport net.sourceforge.stripes.action.SimpleMessage;\n\n/**\n * @author Eduardo Macarron\n *\n */\npublic abstract class AbstractActionBean implements ActionBean, Serializable {\n\n  private static final long serialVersionUID = -1767714708233127983L;\n\n  protected static final String ERROR = \"/WEB-INF/jsp/common/Error.jsp\";\n\n  protected transient ActionBeanContext context;\n\n  protected void setMessage(String value) {\n    context.getMessages().add(new SimpleMessage(value));\n  }\n  \n  @Override\n  public ActionBeanContext getContext() {\n    return context;\n  }\n\n  @Override\n  public void setContext(ActionBeanContext context) {\n    this.context = context;\n  }\n\n}\n", "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_VariableDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/jpetstore-6-jpetstore-6.0.2/src/main/java/org/mybatis/jpetstore/web/actions/CatalogActionBean.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["CatalogActionBean"], "AN": ["serialVersionUID", "MAIN", "VIEW_CATEGORY", "VIEW_PRODUCT", "VIEW_ITEM", "SEARCH_PRODUCTS", "catalogService", "keyword", "categoryId", "category", "categoryList", "productId", "product", "productList", "itemId", "item", "itemList"], "SCS_VariableDeclarator": ["serialVersionUID", "MAIN", "VIEW_CATEGORY", "VIEW_PRODUCT", "VIEW_ITEM", "SEARCH_PRODUCTS", "catalogService", "keyword", "categoryId", "category", "categoryList", "productId", "product", "productList", "itemId", "item", "itemList"], "MN": ["getKeyword", "setKeyword", "getCategoryId", "setCategoryId", "getProductId", "setProductId", "getItemId", "setItemId", "getCategory", "setCategory", "getProduct", "setProduct", "getItem", "setItem", "getCategoryList", "setCategoryList", "getProductList", "setProductList", "getItemList", "setItemList", "viewMain", "viewCategory", "viewProduct", "viewItem", "searchProducts", "clear"], "PN": ["keyword", "categoryId", "productId", "itemId", "category", "product", "item", "categoryList", "productList", "itemList"], "SCS_MemberReference": ["keyword", "keyword", "keyword", "categoryId", "categoryId", "categoryId", "productId", "productId", "productId", "itemId", "itemId", "itemId", "category", "category", "category", "product", "product", "product", "item", "item", "item", "categoryList", "categoryList", "categoryList", "productList", "productList", "productList", "itemList", "itemList", "itemList", "MAIN", "categoryId", "productList", "categoryId", "category", "categoryId", "VIEW_CATEGORY", "productId", "itemList", "productId", "product", "productId", "VIEW_PRODUCT", "item", "itemId", "product", "VIEW_ITEM", "keyword", "ERROR", "productList", "SEARCH_PRODUCTS", "keyword", "categoryId", "category", "categoryList", "productId", "product", "productList", "itemId", "item", "itemList"], "SCS_ClassReference": ["catalogService", "catalogService", "catalogService", "catalogService", "catalogService", "item", "keyword", "", "catalogService", "keyword"], "SCS_MethodInvocation": ["getProductListByCategory", "getCategory", "getItemListByProduct", "getProduct", "getItem", "getProduct", "length", "setMessage", "searchProductList", "toLowerCase"], "CO": ["/**\n *    Copyright ${license.git.copyrightYears} the original author or authors.\n *\n *    Licensed under the Apache License, Version 2.0 (the \"License\");\n *    you may not use this file except in compliance with the License.\n *    You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *    Unless required by applicable law or agreed to in writing, software\n *    distributed under the License is distributed on an \"AS IS\" BASIS,\n *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *    See the License for the specific language governing permissions and\n *    limitations under the License.\n */", "/**\n * @author Eduardo Macarron\n *\n */"], "CODE": "/**\n *    Copyright ${license.git.copyrightYears} the original author or authors.\n *\n *    Licensed under the Apache License, Version 2.0 (the \"License\");\n *    you may not use this file except in compliance with the License.\n *    You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *    Unless required by applicable law or agreed to in writing, software\n *    distributed under the License is distributed on an \"AS IS\" BASIS,\n *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *    See the License for the specific language governing permissions and\n *    limitations under the License.\n */\npackage org.mybatis.jpetstore.web.actions;\n\nimport java.util.List;\n\nimport net.sourceforge.stripes.action.DefaultHandler;\nimport net.sourceforge.stripes.action.ForwardResolution;\nimport net.sourceforge.stripes.action.SessionScope;\nimport net.sourceforge.stripes.integration.spring.SpringBean;\n\nimport org.mybatis.jpetstore.domain.Category;\nimport org.mybatis.jpetstore.domain.Item;\nimport org.mybatis.jpetstore.domain.Product;\nimport org.mybatis.jpetstore.service.CatalogService;\n\n/**\n * @author Eduardo Macarron\n *\n */\n@SessionScope\npublic class CatalogActionBean extends AbstractActionBean {\n\n  private static final long serialVersionUID = 5849523372175050635L;\n\n  private static final String MAIN = \"/WEB-INF/jsp/catalog/Main.jsp\";\n  private static final String VIEW_CATEGORY = \"/WEB-INF/jsp/catalog/Category.jsp\";\n  private static final String VIEW_PRODUCT = \"/WEB-INF/jsp/catalog/Product.jsp\";\n  private static final String VIEW_ITEM = \"/WEB-INF/jsp/catalog/Item.jsp\";\n  private static final String SEARCH_PRODUCTS = \"/WEB-INF/jsp/catalog/SearchProducts.jsp\";\n\n  @SpringBean\n  private transient CatalogService catalogService;\n\n  private String keyword;\n\n  private String categoryId;\n  private Category category;\n  private List<Category> categoryList;\n\n  private String productId;\n  private Product product;\n  private List<Product> productList;\n\n  private String itemId;\n  private Item item;\n  private List<Item> itemList;\n\n  public String getKeyword() {\n    return keyword;\n  }\n\n  public void setKeyword(String keyword) {\n    this.keyword = keyword;\n  }\n\n  public String getCategoryId() {\n    return categoryId;\n  }\n\n  public void setCategoryId(String categoryId) {\n    this.categoryId = categoryId;\n  }\n\n  public String getProductId() {\n    return productId;\n  }\n\n  public void setProductId(String productId) {\n    this.productId = productId;\n  }\n\n  public String getItemId() {\n    return itemId;\n  }\n\n  public void setItemId(String itemId) {\n    this.itemId = itemId;\n  }\n\n  public Category getCategory() {\n    return category;\n  }\n\n  public void setCategory(Category category) {\n    this.category = category;\n  }\n\n  public Product getProduct() {\n    return product;\n  }\n\n  public void setProduct(Product product) {\n    this.product = product;\n  }\n\n  public Item getItem() {\n    return item;\n  }\n\n  public void setItem(Item item) {\n    this.item = item;\n  }\n\n  public List<Category> getCategoryList() {\n    return categoryList;\n  }\n\n  public void setCategoryList(List<Category> categoryList) {\n    this.categoryList = categoryList;\n  }\n\n  public List<Product> getProductList() {\n    return productList;\n  }\n\n  public void setProductList(List<Product> productList) {\n    this.productList = productList;\n  }\n\n  public List<Item> getItemList() {\n    return itemList;\n  }\n\n  public void setItemList(List<Item> itemList) {\n    this.itemList = itemList;\n  }\n\n  @DefaultHandler\n  public ForwardResolution viewMain() {\n    return new ForwardResolution(MAIN);\n  }\n\n  public ForwardResolution viewCategory() {\n    if (categoryId != null) {\n      productList = catalogService.getProductListByCategory(categoryId);\n      category = catalogService.getCategory(categoryId);\n    }\n    return new ForwardResolution(VIEW_CATEGORY);\n  }\n\n  public ForwardResolution viewProduct() {\n    if (productId != null) {\n      itemList = catalogService.getItemListByProduct(productId);\n      product = catalogService.getProduct(productId);\n    }\n    return new ForwardResolution(VIEW_PRODUCT);\n  }\n\n  public ForwardResolution viewItem() {\n    item = catalogService.getItem(itemId);\n    product = item.getProduct();\n    return new ForwardResolution(VIEW_ITEM);\n  }\n\n  public ForwardResolution searchProducts() {\n    if (keyword == null || keyword.length() < 1) {\n      setMessage(\"Please enter a keyword to search for, then press the search button.\");\n      return new ForwardResolution(ERROR);\n    } else {\n      productList = catalogService.searchProductList(keyword.toLowerCase());\n      return new ForwardResolution(SEARCH_PRODUCTS);\n    }\n  }\n\n  public void clear() {\n    keyword = null;\n\n    categoryId = null;\n    category = null;\n    categoryList = null;\n\n    productId = null;\n    product = null;\n    productList = null;\n\n    itemId = null;\n    item = null;\n    itemList = null;\n  }\n\n}\n", "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_VariableDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/jpetstore-6-jpetstore-6.0.2/src/main/java/org/mybatis/jpetstore/web/actions/CartActionBean.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["CartActionBean"], "AN": ["serialVersionUID", "VIEW_CART", "CHECK_OUT", "catalogService", "cart", "workingItemId"], "SCS_VariableDeclarator": ["serialVersionUID", "VIEW_CART", "CHECK_OUT", "catalogService", "cart", "workingItemId", "isInStock", "item", "item", "request", "cartItems", "cartItem", "itemId", "quantity"], "MN": ["getCart", "setCart", "setWorkingItemId", "addItemToCart", "removeItemFromCart", "updateCartQuantities", "viewCart", "checkOut", "clear"], "PN": ["cart", "workingItemId"], "SCS_MemberReference": ["cart", "cart", "cart", "workingItemId", "workingItemId", "workingItemId", "workingItemId", "workingItemId", "workingItemId", "item", "isInStock", "VIEW_CART", "workingItemId", "item", "ERROR", "VIEW_CART", "itemId", "itemId", "quantity", "quantity", "VIEW_CART", "VIEW_CART", "CHECK_OUT", "cart", "workingItemId"], "SCS_ClassReference": ["cart", "cart", "catalogService", "catalogService", "cart", "cart", "", "context", "", null, "cartItems", "cartItems", "cartItem", null, "Integer", "request", "", null, "cartItems"], "SCS_MethodInvocation": ["containsItemId", "incrementQuantityByItemId", "isItemInStock", "getItem", "addItem", "removeItemById", "setMessage", "getRequest", "getCart", "getAllCartItems", "hasNext", "next", "getItem", "getItemId", "parseInt", "getParameter", "getCart", "setQuantityByItemId", "remove"], "SCS_VariableDeclaration": ["boolean", "Item", "Item", "HttpServletRequest", "Iterator", "CartItem", "String", "int"], "CO": ["/**\n *    Copyright ${license.git.copyrightYears} the original author or authors.\n *\n *    Licensed under the Apache License, Version 2.0 (the \"License\");\n *    you may not use this file except in compliance with the License.\n *    You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *    Unless required by applicable law or agreed to in writing, software\n *    distributed under the License is distributed on an \"AS IS\" BASIS,\n *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *    See the License for the specific language governing permissions and\n *    limitations under the License.\n */", "/**\n * @author Eduardo Macarron\n *\n */", "// isInStock is a \"real-time\" property that must be updated", "// every time an item is added to the cart, even if other", "// item details are cached.", "//ignore parse exceptions on purpose"], "CODE": "/**\n *    Copyright ${license.git.copyrightYears} the original author or authors.\n *\n *    Licensed under the Apache License, Version 2.0 (the \"License\");\n *    you may not use this file except in compliance with the License.\n *    You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *    Unless required by applicable law or agreed to in writing, software\n *    distributed under the License is distributed on an \"AS IS\" BASIS,\n *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *    See the License for the specific language governing permissions and\n *    limitations under the License.\n */\npackage org.mybatis.jpetstore.web.actions;\n\nimport java.util.Iterator;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport net.sourceforge.stripes.action.ForwardResolution;\nimport net.sourceforge.stripes.action.Resolution;\nimport net.sourceforge.stripes.action.SessionScope;\nimport net.sourceforge.stripes.integration.spring.SpringBean;\n\nimport org.mybatis.jpetstore.domain.Cart;\nimport org.mybatis.jpetstore.domain.CartItem;\nimport org.mybatis.jpetstore.domain.Item;\nimport org.mybatis.jpetstore.service.CatalogService;\n\n/**\n * @author Eduardo Macarron\n *\n */\n@SessionScope\npublic class CartActionBean extends AbstractActionBean {\n\n  private static final long serialVersionUID = -4038684592582714235L;\n\n  private static final String VIEW_CART = \"/WEB-INF/jsp/cart/Cart.jsp\";\n  private static final String CHECK_OUT = \"/WEB-INF/jsp/cart/Checkout.jsp\";\n\n  @SpringBean\n  private transient CatalogService catalogService;\n\n  private Cart cart = new Cart();\n  private String workingItemId;\n\n  public Cart getCart() {\n    return cart;\n  }\n\n  public void setCart(Cart cart) {\n    this.cart = cart;\n  }\n\n  public void setWorkingItemId(String workingItemId) {\n    this.workingItemId = workingItemId;\n  }\n\n  public Resolution addItemToCart() {\n    if (cart.containsItemId(workingItemId)) {\n      cart.incrementQuantityByItemId(workingItemId);\n    } else {\n      // isInStock is a \"real-time\" property that must be updated\n      // every time an item is added to the cart, even if other\n      // item details are cached.\n      boolean isInStock = catalogService.isItemInStock(workingItemId);\n      Item item = catalogService.getItem(workingItemId);\n      cart.addItem(item, isInStock);\n    }\n\n    return new ForwardResolution(VIEW_CART);\n  }\n\n  public Resolution removeItemFromCart() {\n\n    Item item = cart.removeItemById(workingItemId);\n\n    if (item == null) {\n      setMessage(\"Attempted to remove null CartItem from Cart.\");\n      return new ForwardResolution(ERROR);\n    } else {\n      return new ForwardResolution(VIEW_CART);\n    }\n  }\n\n  public Resolution updateCartQuantities() {\n    HttpServletRequest request = context.getRequest();\n\n    Iterator<CartItem> cartItems = getCart().getAllCartItems();\n    while (cartItems.hasNext()) {\n      CartItem cartItem = (CartItem) cartItems.next();\n      String itemId = cartItem.getItem().getItemId();\n      try {\n        int quantity = Integer.parseInt((String) request.getParameter(itemId));\n        getCart().setQuantityByItemId(itemId, quantity);\n        if (quantity < 1) {\n          cartItems.remove();\n        }\n      } catch (Exception e) {\n        //ignore parse exceptions on purpose\n      }\n    }\n\n    return new ForwardResolution(VIEW_CART);\n  }\n\n  public ForwardResolution viewCart() {\n    return new ForwardResolution(VIEW_CART);\n  }\n\n  public ForwardResolution checkOut() {\n    return new ForwardResolution(CHECK_OUT);\n  }\n\n  public void clear() {\n    cart = new Cart();\n    workingItemId = null;\n  }\n\n}\n", "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/jpetstore-6-jpetstore-6.0.2/src/main/java/org/mybatis/jpetstore/web/actions/AccountActionBean.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["AccountActionBean"], "AN": ["serialVersionUID", "NEW_ACCOUNT", "EDIT_ACCOUNT", "SIGNON", "LANGUAGE_LIST", "CATEGORY_LIST", "accountService", "catalogService", "account", "myList", "authenticated"], "SCS_VariableDeclarator": ["serialVersionUID", "NEW_ACCOUNT", "EDIT_ACCOUNT", "SIGNON", "LANGUAGE_LIST", "CATEGORY_LIST", "accountService", "catalogService", "account", "myList", "authenticated", "langList", "catList", "value", "s"], "SCS_VariableDeclaration": ["List", "List", "String", "HttpSession"], "SCS_ClassReference": ["langList", "langList", "Collections", "catList", "catList", "catList", "catList", "catList", "Collections", "account", "account", "account", "account", "accountService", "accountService", "account", "catalogService", "account", "CatalogActionBean", "accountService", "accountService", "account", "catalogService", "account", "CatalogActionBean", "accountService", "", "", "", "", "account", "catalogService", "account", "context", null, "s", "CatalogActionBean", "context", null, null, "", "CatalogActionBean", "account"], "SCS_MethodInvocation": ["add", "add", "unmodifiableList", "add", "add", "add", "add", "add", "unmodifiableList", "getUsername", "setUsername", "getPassword", "setPassword", "insertAccount", "getAccount", "getUsername", "getProductListByCategory", "getFavouriteCategoryId", "updateAccount", "getAccount", "getUsername", "getProductListByCategory", "getFavouriteCategoryId", "getAccount", "getUsername", "getPassword", "setMessage", "clear", "setPassword", "getProductListByCategory", "getFavouriteCategoryId", "getRequest", "getSession", "setAttribute", "getRequest", "getSession", "invalidate", "clear", "getUsername"], "SCS_MemberReference": ["LANGUAGE_LIST", "langList", "CATEGORY_LIST", "catList", "account", "username", "password", "myList", "myList", "myList", "LANGUAGE_LIST", "CATEGORY_LIST", "NEW_ACCOUNT", "account", "account", "myList", "authenticated", "EDIT_ACCOUNT", "account", "account", "myList", "SIGNON", "account", "account", "value", "SIGNON", "myList", "authenticated", "authenticated", "account", "account", "myList", "authenticated"], "MN": ["getAccount", "getUsername", "setUsername", "getPassword", "setPassword", "getMyList", "setMyList", "getLanguages", "getCategories", "newAccountForm", "newAccount", "editAccountForm", "editAccount", "signonForm", "signon", "signoff", "isAuthenticated", "clear"], "PN": ["username", "password", "myList"], "CO": ["/**\n *    Copyright ${license.git.copyrightYears} the original author or authors.\n *\n *    Licensed under the Apache License, Version 2.0 (the \"License\");\n *    you may not use this file except in compliance with the License.\n *    You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *    Unless required by applicable law or agreed to in writing, software\n *    distributed under the License is distributed on an \"AS IS\" BASIS,\n *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *    See the License for the specific language governing permissions and\n *    limitations under the License.\n */", "/**\n * @author Eduardo Macarron\n *\n */", "// this bean is already registered as /actions/Account.action"], "CODE": "/**\n *    Copyright ${license.git.copyrightYears} the original author or authors.\n *\n *    Licensed under the Apache License, Version 2.0 (the \"License\");\n *    you may not use this file except in compliance with the License.\n *    You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *    Unless required by applicable law or agreed to in writing, software\n *    distributed under the License is distributed on an \"AS IS\" BASIS,\n *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *    See the License for the specific language governing permissions and\n *    limitations under the License.\n */\npackage org.mybatis.jpetstore.web.actions;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\nimport javax.servlet.http.HttpSession;\n\nimport net.sourceforge.stripes.action.DefaultHandler;\nimport net.sourceforge.stripes.action.ForwardResolution;\nimport net.sourceforge.stripes.action.RedirectResolution;\nimport net.sourceforge.stripes.action.Resolution;\nimport net.sourceforge.stripes.action.SessionScope;\nimport net.sourceforge.stripes.integration.spring.SpringBean;\nimport net.sourceforge.stripes.validation.Validate;\n\nimport org.mybatis.jpetstore.domain.Account;\nimport org.mybatis.jpetstore.domain.Product;\nimport org.mybatis.jpetstore.service.AccountService;\nimport org.mybatis.jpetstore.service.CatalogService;\n\n/**\n * @author Eduardo Macarron\n *\n */\n@SessionScope\npublic class AccountActionBean extends AbstractActionBean {\n\n  private static final long serialVersionUID = 5499663666155758178L;\n\n  private static final String NEW_ACCOUNT = \"/WEB-INF/jsp/account/NewAccountForm.jsp\";\n  private static final String EDIT_ACCOUNT = \"/WEB-INF/jsp/account/EditAccountForm.jsp\";\n  private static final String SIGNON = \"/WEB-INF/jsp/account/SignonForm.jsp\";\n\n  private static final List<String> LANGUAGE_LIST;\n  private static final List<String> CATEGORY_LIST;\n\n  @SpringBean\n  private transient AccountService accountService;\n  @SpringBean\n  private transient CatalogService catalogService;\n\n  private Account account = new Account();\n  private List<Product> myList;\n  private boolean authenticated;\n\n  static {\n    List<String> langList = new ArrayList<String>();\n    langList.add(\"english\");\n    langList.add(\"japanese\");\n    LANGUAGE_LIST = Collections.unmodifiableList(langList);\n\n    List<String> catList = new ArrayList<String>();\n    catList.add(\"FISH\");\n    catList.add(\"DOGS\");\n    catList.add(\"REPTILES\");\n    catList.add(\"CATS\");\n    catList.add(\"BIRDS\");\n    CATEGORY_LIST = Collections.unmodifiableList(catList);\n  }\n\n  public Account getAccount() {\n    return this.account;\n  }\n  \n  public String getUsername() {\n    return account.getUsername();\n  }\n\n  @Validate(required=true, on={\"signon\", \"newAccount\", \"editAccount\"})\n  public void setUsername(String username) {\n    account.setUsername(username);\n  }\n\n  public String getPassword() {\n    return account.getPassword();\n  }\n\n  @Validate(required=true, on={\"signon\", \"newAccount\", \"editAccount\"})\n  public void setPassword(String password) {\n    account.setPassword(password);\n  }\n\n  public List<Product> getMyList() {\n    return myList;\n  }\n\n  public void setMyList(List<Product> myList) {\n    this.myList = myList;\n  }\n\n  public List<String> getLanguages() {\n    return LANGUAGE_LIST;\n  }\n\n  public List<String> getCategories() {\n    return CATEGORY_LIST;\n  }\n\n  public Resolution newAccountForm() {\n    return new ForwardResolution(NEW_ACCOUNT);\n  }\n  \n  public Resolution newAccount() {\n    accountService.insertAccount(account);\n    account = accountService.getAccount(account.getUsername());\n    myList = catalogService.getProductListByCategory(account.getFavouriteCategoryId());\n    authenticated = true;\n    return new RedirectResolution(CatalogActionBean.class);\n  }\n\n  public Resolution editAccountForm() {\n    return new ForwardResolution(EDIT_ACCOUNT);\n  }\n\n  public Resolution editAccount() {\n    accountService.updateAccount(account);\n    account = accountService.getAccount(account.getUsername());\n    myList = catalogService.getProductListByCategory(account.getFavouriteCategoryId());\n    return new RedirectResolution(CatalogActionBean.class);\n  }\n  \n  @DefaultHandler\n  public Resolution signonForm() {\n    return new ForwardResolution(SIGNON);\n  }\n\n  public Resolution signon() {\n\n    account = accountService.getAccount(getUsername(), getPassword());\n   \n    if (account == null) {\n      String value = \"Invalid username or password.  Signon failed.\";\n      setMessage(value);\n      clear();\n      return new ForwardResolution(SIGNON);\n    } else {\n      account.setPassword(null);\n      myList = catalogService.getProductListByCategory(account.getFavouriteCategoryId());\n      authenticated = true;\n      HttpSession s = context.getRequest().getSession();\n      // this bean is already registered as /actions/Account.action\n      s.setAttribute(\"accountBean\", this);\n      return new RedirectResolution(CatalogActionBean.class);\n    }\n  }\n\n  public Resolution signoff() {\n    context.getRequest().getSession().invalidate();\n    clear();\n    return new RedirectResolution(CatalogActionBean.class);\n  }\n\n  public boolean isAuthenticated() {\n    return authenticated && account != null && account.getUsername() != null;\n  }\n\n  public void clear() {\n    account = new Account();\n    myList = null;\n    authenticated = false;\n  }\n\n}\n", "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/jpetstore-6-jpetstore-6.0.2/src/main/java/org/mybatis/jpetstore/service/AccountService.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["AccountService"], "AN": ["accountMapper"], "SCS_VariableDeclarator": ["accountMapper"], "MN": ["getAccount", "getAccount", "insertAccount", "updateAccount"], "PN": ["username", "username", "password", "account", "account"], "SCS_ClassReference": ["accountMapper", "accountMapper", "accountMapper", "accountMapper", "accountMapper", "accountMapper", "accountMapper", "account", "account", null, "accountMapper"], "SCS_MethodInvocation": ["getAccountByUsername", "getAccountByUsernameAndPassword", "insertAccount", "insertProfile", "insertSignon", "updateAccount", "updateProfile", "getPassword", "getPassword", "length", "updateSignon"], "SCS_MemberReference": ["username", "username", "password", "account", "account", "account", "account", "account", "account"], "CO": ["/**\n *    Copyright ${license.git.copyrightYears} the original author or authors.\n *\n *    Licensed under the Apache License, Version 2.0 (the \"License\");\n *    you may not use this file except in compliance with the License.\n *    You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *    Unless required by applicable law or agreed to in writing, software\n *    distributed under the License is distributed on an \"AS IS\" BASIS,\n *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *    See the License for the specific language governing permissions and\n *    limitations under the License.\n */", "/**\n * @author Eduardo Macarron\n *\n */"], "CODE": "/**\n *    Copyright ${license.git.copyrightYears} the original author or authors.\n *\n *    Licensed under the Apache License, Version 2.0 (the \"License\");\n *    you may not use this file except in compliance with the License.\n *    You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *    Unless required by applicable law or agreed to in writing, software\n *    distributed under the License is distributed on an \"AS IS\" BASIS,\n *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *    See the License for the specific language governing permissions and\n *    limitations under the License.\n */\npackage org.mybatis.jpetstore.service;\n\nimport org.mybatis.jpetstore.domain.Account;\nimport org.mybatis.jpetstore.mapper.AccountMapper;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\n/**\n * @author Eduardo Macarron\n *\n */\n@Service\npublic class AccountService {\n\n  @Autowired\n  private AccountMapper accountMapper;\n\n  public Account getAccount(String username) {\n    return accountMapper.getAccountByUsername(username);\n  }\n\n  public Account getAccount(String username, String password) {\n    return accountMapper.getAccountByUsernameAndPassword(username, password);\n  }\n\n  @Transactional\n  public void insertAccount(Account account) {\n    accountMapper.insertAccount(account);\n    accountMapper.insertProfile(account);\n    accountMapper.insertSignon(account);\n  }\n\n  @Transactional\n  public void updateAccount(Account account) {\n    accountMapper.updateAccount(account);\n    accountMapper.updateProfile(account);\n\n    if (account.getPassword() != null && account.getPassword().length() > 0) {\n      accountMapper.updateSignon(account);\n    }\n  }\n\n}\n", "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_VariableDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/jpetstore-6-jpetstore-6.0.2/src/main/java/org/mybatis/jpetstore/service/CatalogService.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["CatalogService"], "AN": ["categoryMapper", "itemMapper", "productMapper"], "SCS_VariableDeclarator": ["categoryMapper", "itemMapper", "productMapper", "products", "keyword"], "MN": ["getCategoryList", "getCategory", "getProduct", "getProductListByCategory", "searchProductList", "getItemListByProduct", "getItem", "isItemInStock"], "PN": ["categoryId", "productId", "categoryId", "keywords", "productId", "itemId", "itemId"], "SCS_ClassReference": ["categoryMapper", "categoryMapper", "productMapper", "productMapper", "keywords", "products", "productMapper", "keyword", "itemMapper", "itemMapper", "itemMapper"], "SCS_MethodInvocation": ["getCategoryList", "getCategory", "getProduct", "getProductListByCategory", "split", "addAll", "searchProductList", "toLowerCase", "getItemListByProduct", "getItem", "getInventoryQuantity"], "SCS_MemberReference": ["categoryId", "productId", "categoryId", "products", "productId", "itemId", "itemId"], "SCS_VariableDeclaration": ["List", "String"], "CO": ["/**\n *    Copyright ${license.git.copyrightYears} the original author or authors.\n *\n *    Licensed under the Apache License, Version 2.0 (the \"License\");\n *    you may not use this file except in compliance with the License.\n *    You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *    Unless required by applicable law or agreed to in writing, software\n *    distributed under the License is distributed on an \"AS IS\" BASIS,\n *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *    See the License for the specific language governing permissions and\n *    limitations under the License.\n */", "/**\n * @author Eduardo Macarron\n *\n */"], "CODE": "/**\n *    Copyright ${license.git.copyrightYears} the original author or authors.\n *\n *    Licensed under the Apache License, Version 2.0 (the \"License\");\n *    you may not use this file except in compliance with the License.\n *    You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *    Unless required by applicable law or agreed to in writing, software\n *    distributed under the License is distributed on an \"AS IS\" BASIS,\n *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *    See the License for the specific language governing permissions and\n *    limitations under the License.\n */\npackage org.mybatis.jpetstore.service;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.mybatis.jpetstore.domain.Category;\nimport org.mybatis.jpetstore.domain.Item;\nimport org.mybatis.jpetstore.domain.Product;\nimport org.mybatis.jpetstore.mapper.CategoryMapper;\nimport org.mybatis.jpetstore.mapper.ItemMapper;\nimport org.mybatis.jpetstore.mapper.ProductMapper;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\n/**\n * @author Eduardo Macarron\n *\n */\n@Service\npublic class CatalogService {\n\n  @Autowired\n  private CategoryMapper categoryMapper;\n  @Autowired\n  private ItemMapper itemMapper;\n  @Autowired\n  private ProductMapper productMapper;\n\n  public List<Category> getCategoryList() {\n    return categoryMapper.getCategoryList();\n  }\n\n  public Category getCategory(String categoryId) {\n    return categoryMapper.getCategory(categoryId);\n  }\n\n  public Product getProduct(String productId) {\n    return productMapper.getProduct(productId);\n  }\n\n  public List<Product> getProductListByCategory(String categoryId) {\n    return productMapper.getProductListByCategory(categoryId);\n  }\n\n  public List<Product> searchProductList(String keywords) {\n    List<Product> products = new ArrayList<Product>();\n    for(String keyword : keywords.split(\"\\\\s+\")){\n      products.addAll(productMapper.searchProductList(\"%\" + keyword.toLowerCase() + \"%\"));\n    }\n    return products;\n  }\n\n  public List<Item> getItemListByProduct(String productId) {\n    return itemMapper.getItemListByProduct(productId);\n  }\n\n  public Item getItem(String itemId) {\n    return itemMapper.getItem(itemId);\n  }\n\n  public boolean isItemInStock(String itemId) {\n    return itemMapper.getInventoryQuantity(itemId) > 0;\n  }\n}", "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/jpetstore-6-jpetstore-6.0.2/src/main/java/org/mybatis/jpetstore/service/OrderService.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["OrderService"], "AN": ["itemMapper", "orderMapper", "sequenceMapper", "lineItemMapper"], "SCS_VariableDeclarator": ["itemMapper", "orderMapper", "sequenceMapper", "lineItemMapper", "i", "lineItem", "itemId", "increment", "param", "i", "lineItem", "order", "i", "lineItem", "item", "sequence", "parameterObject"], "MN": ["insertOrder", "getOrder", "getOrdersByUsername", "getNextId"], "PN": ["order", "orderId", "username", "name"], "SCS_ClassReference": ["order", "", "order", null, "order", null, "lineItem", "lineItem", "param", "param", "itemMapper", "orderMapper", "orderMapper", "order", null, "order", null, "lineItem", "order", "lineItemMapper", "orderMapper", "order", "lineItemMapper", "order", null, "order", null, "itemMapper", "lineItem", "item", "itemMapper", "lineItem", "lineItem", "orderMapper", "sequenceMapper", "sequence", "sequenceMapper", "sequence"], "SCS_MethodInvocation": ["setOrderId", "getNextId", "getLineItems", "size", "getLineItems", "get", "getItemId", "getQuantity", "put", "put", "updateInventoryQuantity", "insertOrder", "insertOrderStatus", "getLineItems", "size", "getLineItems", "get", "setOrderId", "getOrderId", "insertLineItem", "getOrder", "setLineItems", "getLineItemsByOrderId", "getLineItems", "size", "getLineItems", "get", "getItem", "getItemId", "setQuantity", "getInventoryQuantity", "getItemId", "setItem", "getOrdersByUsername", "getSequence", "getNextId", "updateSequence", "getNextId"], "SCS_VariableDeclaration": ["int", "LineItem", "String", "Integer", "Map", "int", "LineItem", "Order", "int", "LineItem", "Item", "Sequence", "Sequence"], "SCS_MemberReference": ["i", "i", "i", "itemId", "increment", "param", "order", "order", "i", "i", "i", "lineItem", "orderId", "orderId", "i", "i", "i", "item", "order", "username", "name", "sequence", "sequence", "sequence", "name", "name", "parameterObject"], "CO": ["/**\n *    Copyright ${license.git.copyrightYears} the original author or authors.\n *\n *    Licensed under the Apache License, Version 2.0 (the \"License\");\n *    you may not use this file except in compliance with the License.\n *    You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *    Unless required by applicable law or agreed to in writing, software\n *    distributed under the License is distributed on an \"AS IS\" BASIS,\n *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *    See the License for the specific language governing permissions and\n *    limitations under the License.\n */", "/**\n * @author Eduardo Macarron\n *\n */"], "CODE": "/**\n *    Copyright ${license.git.copyrightYears} the original author or authors.\n *\n *    Licensed under the Apache License, Version 2.0 (the \"License\");\n *    you may not use this file except in compliance with the License.\n *    You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *    Unless required by applicable law or agreed to in writing, software\n *    distributed under the License is distributed on an \"AS IS\" BASIS,\n *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *    See the License for the specific language governing permissions and\n *    limitations under the License.\n */\npackage org.mybatis.jpetstore.service;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.mybatis.jpetstore.domain.Item;\nimport org.mybatis.jpetstore.domain.LineItem;\nimport org.mybatis.jpetstore.domain.Order;\nimport org.mybatis.jpetstore.domain.Sequence;\nimport org.mybatis.jpetstore.mapper.ItemMapper;\nimport org.mybatis.jpetstore.mapper.LineItemMapper;\nimport org.mybatis.jpetstore.mapper.OrderMapper;\nimport org.mybatis.jpetstore.mapper.SequenceMapper;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\n/**\n * @author Eduardo Macarron\n *\n */\n@Service\npublic class OrderService {\n\n  @Autowired\n  private ItemMapper itemMapper;\n  @Autowired\n  private OrderMapper orderMapper;\n  @Autowired\n  private SequenceMapper sequenceMapper;\n  @Autowired\n  private LineItemMapper lineItemMapper;\n\n  @Transactional\n  public void insertOrder(Order order) {\n    order.setOrderId(getNextId(\"ordernum\"));\n    for (int i = 0; i < order.getLineItems().size(); i++) {\n      LineItem lineItem = (LineItem) order.getLineItems().get(i);\n      String itemId = lineItem.getItemId();\n      Integer increment = new Integer(lineItem.getQuantity());\n      Map<String, Object> param = new HashMap<String, Object>(2);\n      param.put(\"itemId\", itemId);\n      param.put(\"increment\", increment);\n      itemMapper.updateInventoryQuantity(param);\n    }\n\n    orderMapper.insertOrder(order);\n    orderMapper.insertOrderStatus(order);\n    for (int i = 0; i < order.getLineItems().size(); i++) {\n      LineItem lineItem = (LineItem) order.getLineItems().get(i);\n      lineItem.setOrderId(order.getOrderId());\n      lineItemMapper.insertLineItem(lineItem);\n    }\n  }\n\n  @Transactional\n  public Order getOrder(int orderId) {\n    Order order = orderMapper.getOrder(orderId);\n    order.setLineItems(lineItemMapper.getLineItemsByOrderId(orderId));\n\n    for (int i = 0; i < order.getLineItems().size(); i++) {\n      LineItem lineItem = (LineItem) order.getLineItems().get(i);\n      Item item = itemMapper.getItem(lineItem.getItemId());\n      item.setQuantity(itemMapper.getInventoryQuantity(lineItem.getItemId()));\n      lineItem.setItem(item);\n    }\n\n    return order;\n  }\n\n  public List<Order> getOrdersByUsername(String username) {\n    return orderMapper.getOrdersByUsername(username);\n  }\n\n  public int getNextId(String name) {\n    Sequence sequence = new Sequence(name, -1);\n    sequence = (Sequence) sequenceMapper.getSequence(sequence);\n    if (sequence == null) {\n      throw new RuntimeException(\"Error: A null sequence was returned from the database (could not get next \" + name\n          + \" sequence).\");\n    }\n    Sequence parameterObject = new Sequence(name, sequence.getNextId() + 1);\n    sequenceMapper.updateSequence(parameterObject);\n    return sequence.getNextId();\n  }\n\n}\n", "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}}, "all_classes": [{"py/tuple": [1, "LoggingAspect", "org.mybatis.jpetstore"]}, {"py/tuple": [2, "Order", "org.mybatis.jpetstore.domain"]}, {"py/tuple": [3, "Cart", "org.mybatis.jpetstore.domain"]}, {"py/tuple": [4, "Item", "org.mybatis.jpetstore.domain"]}, {"py/tuple": [5, "Account", "org.mybatis.jpetstore.domain"]}, {"py/tuple": [6, "CartItem", "org.mybatis.jpetstore.domain"]}, {"py/tuple": [7, "Sequence", "org.mybatis.jpetstore.domain"]}, {"py/tuple": [8, "LineItem", "org.mybatis.jpetstore.domain"]}, {"py/tuple": [9, "Product", "org.mybatis.jpetstore.domain"]}, {"py/tuple": [10, "Category", "org.mybatis.jpetstore.domain"]}, {"py/tuple": [11, "OrderMapper", "org.mybatis.jpetstore.mapper"]}, {"py/tuple": [12, "ItemMapper", "org.mybatis.jpetstore.mapper"]}, {"py/tuple": [13, "ProductMapper", "org.mybatis.jpetstore.mapper"]}, {"py/tuple": [14, "LineItemMapper", "org.mybatis.jpetstore.mapper"]}, {"py/tuple": [15, "AccountMapper", "org.mybatis.jpetstore.mapper"]}, {"py/tuple": [16, "SequenceMapper", "org.mybatis.jpetstore.mapper"]}, {"py/tuple": [17, "CategoryMapper", "org.mybatis.jpetstore.mapper"]}, {"py/tuple": [18, "OrderActionBean", "org.mybatis.jpetstore.web.actions"]}, {"py/tuple": [19, "AbstractActionBean", "org.mybatis.jpetstore.web.actions"]}, {"py/tuple": [20, "CatalogActionBean", "org.mybatis.jpetstore.web.actions"]}, {"py/tuple": [21, "CartActionBean", "org.mybatis.jpetstore.web.actions"]}, {"py/tuple": [22, "AccountActionBean", "org.mybatis.jpetstore.web.actions"]}, {"py/tuple": [23, "AccountService", "org.mybatis.jpetstore.service"]}, {"py/tuple": [24, "CatalogService", "org.mybatis.jpetstore.service"]}, {"py/tuple": [25, "OrderService", "org.mybatis.jpetstore.service"]}], "interface_relations": [], "interfaces": [11, 12, 13, 14, 15, 16, 17], "submodules": {"py/object": "collections.defaultdict", "S1": {"py/set": [18, 22]}, "S2": {"py/set": [21]}, "S3": {"py/set": [20]}, "S4": {"py/set": [9, 3, 4, 6]}, "S5": {"py/set": [7]}, "S6": {"py/set": [8]}, "S7": {"py/set": [11]}, "S8": {"py/set": [13]}, "S9": {"py/set": [14]}, "S10": {"py/set": [15]}, "S11": {"py/set": [16]}, "S12": {"py/set": [17]}, "S13": {"py/set": [5, 23]}, "S14": {"py/set": [25, 2, 12]}, "S15": {"py/set": [10]}, "S16": {"py/set": [24]}, "S17": {"py/set": [19]}, "default_factory": {"py/type": "builtins.set"}}, "graph": {"py/object": "networkx.classes.digraph.DiGraph", "graph": {}, "_node": {"19": {}, "18": {}, "20": {}, "21": {}, "22": {}, "3": {}, "4": {}, "9": {}, "6": {}, "8": {}, "2": {}, "10": {}, "5": {}, "23": {}, "24": {}, "25": {}, "15": {}, "17": {}, "13": {}, "12": {}, "11": {}, "14": {}, "16": {}, "7": {}}, "_adj": {"19": {"18": {"inheritance": {"weight": 8.5}}, "20": {"inheritance": {"weight": 8.5}}, "21": {"inheritance": {"weight": 8.5}}, "22": {"inheritance": {"weight": 8.5}}}, "18": {"2": {"return": {"weight": 1}, "call": {"weight": 12.5}, "is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}, "25": {"call": {"weight": 7.5}, "is_of_type": {"weight": 2}}, "22": {"call": {"weight": 10.0}}, "21": {"call": {"weight": 5.0}}}, "20": {"10": {"return": {"weight": 1}, "is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}, "9": {"return": {"weight": 1}, "is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}, "4": {"return": {"weight": 1}, "call": {"weight": 2.5}, "is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}, "24": {"call": {"weight": 15.0}, "is_of_type": {"weight": 2}}}, "21": {"3": {"return": {"weight": 1}, "call": {"weight": 10.0}, "is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}, "24": {"call": {"weight": 5.0}, "is_of_type": {"weight": 2}}, "6": {"call": {"weight": 2.5}}}, "22": {"5": {"return": {"weight": 1}, "call": {"weight": 27.5}, "is_of_type": {"weight": 2}}, "23": {"call": {"weight": 12.5}, "is_of_type": {"weight": 2}}, "24": {"call": {"weight": 7.5}, "is_of_type": {"weight": 2}}}, "3": {"4": {"return": {"weight": 1}, "call": {"weight": 7.5}, "has_parameter": {"weight": 3.5}}, "6": {"call": {"weight": 22.5}}}, "4": {"9": {"return": {"weight": 1}, "is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}}, "9": {}, "6": {"4": {"return": {"weight": 1}, "call": {"weight": 5.0}, "is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}}, "8": {"4": {"return": {"weight": 1}, "call": {"weight": 5.0}, "is_of_type": {"weight": 2}, "has_parameter": {"weight": 3.5}}, "6": {"call": {"weight": 10.0}}}, "2": {"5": {"call": {"weight": 42.5}, "has_parameter": {"weight": 3.5}}, "3": {"call": {"weight": 5.0}, "has_parameter": {"weight": 3.5}}, "6": {"has_parameter": {"weight": 3.5}}, "8": {"has_parameter": {"weight": 3.5}}}, "10": {}, "5": {}, "23": {"5": {"return": {"weight": 2}, "call": {"weight": 5.0}, "has_parameter": {"weight": 7.0}}, "15": {"call": {"weight": 20.0}, "is_of_type": {"weight": 2}}}, "24": {"10": {"return": {"weight": 1}}, "9": {"return": {"weight": 1}}, "4": {"return": {"weight": 1}}, "17": {"call": {"weight": 5.0}, "is_of_type": {"weight": 2}}, "13": {"call": {"weight": 7.5}, "is_of_type": {"weight": 2}}, "12": {"call": {"weight": 7.5}, "is_of_type": {"weight": 2}}}, "25": {"2": {"return": {"weight": 1}, "call": {"weight": 22.5}, "has_parameter": {"weight": 3.5}}, "8": {"call": {"weight": 15.0}}, "12": {"call": {"weight": 7.5}, "is_of_type": {"weight": 2}}, "11": {"call": {"weight": 10.0}, "is_of_type": {"weight": 2}}, "14": {"call": {"weight": 5.0}, "is_of_type": {"weight": 2}}, "4": {"call": {"weight": 2.5}}, "16": {"call": {"weight": 5.0}, "is_of_type": {"weight": 2}}, "7": {"call": {"weight": 5.0}}}, "15": {}, "17": {}, "13": {}, "12": {}, "11": {}, "14": {}, "16": {}, "7": {}}, "_succ": {"py/id": 533}, "_pred": {"19": {}, "18": {"19": {"py/id": 535}}, "20": {"19": {"py/id": 537}}, "21": {"19": {"py/id": 539}, "18": {"py/id": 554}}, "22": {"19": {"py/id": 541}, "18": {"py/id": 552}}, "3": {"21": {"py/id": 574}, "2": {"py/id": 626}}, "4": {"3": {"py/id": 596}, "6": {"py/id": 609}, "8": {"py/id": 615}, "20": {"py/id": 565}, "24": {"py/id": 648}, "25": {"py/id": 675}}, "9": {"4": {"py/id": 603}, "20": {"py/id": 561}, "24": {"py/id": 646}}, "6": {"3": {"py/id": 600}, "8": {"py/id": 620}, "21": {"py/id": 582}, "2": {"py/id": 629}}, "8": {"25": {"py/id": 664}, "2": {"py/id": 631}}, "2": {"18": {"py/id": 544}, "25": {"py/id": 660}}, "10": {"20": {"py/id": 557}, "24": {"py/id": 644}}, "5": {"22": {"py/id": 585}, "23": {"py/id": 636}, "2": {"py/id": 623}}, "23": {"22": {"py/id": 589}}, "24": {"20": {"py/id": 570}, "21": {"py/id": 579}, "22": {"py/id": 592}}, "25": {"18": {"py/id": 549}}, "15": {"23": {"py/id": 640}}, "17": {"24": {"py/id": 650}}, "13": {"24": {"py/id": 653}}, "12": {"24": {"py/id": 656}, "25": {"py/id": 666}}, "11": {"25": {"py/id": 669}}, "14": {"25": {"py/id": 672}}, "16": {"25": {"py/id": 677}}, "7": {"25": {"py/id": 680}}}, "adj": {"py/object": "networkx.classes.coreviews.AdjacencyView", "py/state": {"_atlas": {"py/id": 533}}}, "succ": {"py/object": "networkx.classes.coreviews.AdjacencyView", "py/state": {"_atlas": {"py/id": 533}}}, "edges": {"py/object": "networkx.classes.reportviews.OutEdgeView", "py/state": {"_graph": {"py/id": 506}, "_adjdict": {"py/id": 533}}}, "nodes": {"py/object": "networkx.classes.reportviews.NodeView", "py/state": {"_nodes": {"py/id": 508}}}}}