{"lexical_info": {"<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/SecurityConfig.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["SecurityConfig"], "MN": ["userService", "rememberMeServices", "passwordEncoder", "configure", "configure"], "PN": ["auth", "http"], "SCS_VariableDeclaration": ["TokenBasedRememberMeServices"], "SCS_VariableDeclarator": ["services"], "SCS_ClassReference": ["", "services", "auth", null, "", null, "", "http", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "", null], "SCS_MethodInvocation": ["userService", "setTokenValiditySeconds", "eraseCredentials", "userDetailsService", "userService", "passwordEncoder", "passwordEncoder", "authorizeRequests", "antMatchers", "authenticated", "anyRequest", "permitAll", "and", "formLogin", "loginPage", "permitAll", "failureUrl", "loginProcessingUrl", "and", "logout", "logoutUrl", "permitAll", "logoutSuccessUrl", "and", "rememberMe", "rememberMeServices", "rememberMeServices", "key"], "SCS_MemberReference": ["services"], "CO": ["//NB: set timeout here", "//.httpBasic().disable()", "//.antMatchers(\"/authenticate\").permitAll()", "//.tokenValiditySeconds(60*60) //NB: Not here"], "CODE": "package com.raysmond.blog;\n\nimport com.raysmond.blog.services.UserService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.*;\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.security.crypto.password.StandardPasswordEncoder;\nimport org.springframework.security.web.authentication.rememberme.TokenBasedRememberMeServices;\n\n@Configuration\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n\n    @Bean\n    public UserService userService() {\n        return new UserService();\n    }\n\n    @Bean\n    public TokenBasedRememberMeServices rememberMeServices() {\n        TokenBasedRememberMeServices services = new TokenBasedRememberMeServices(\"remember-me-secret\", userService());\n        services.setTokenValiditySeconds(60*60*24*7); //NB: set timeout here\n        return services;\n    }\n\n    @Bean\n    public PasswordEncoder passwordEncoder() {\n        return new StandardPasswordEncoder();\n\t}\n\n    @Override\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n        auth\n            .eraseCredentials(true)\n            .userDetailsService(userService())\n            .passwordEncoder(passwordEncoder());\n    }\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http\n                //.httpBasic().disable()\n            .authorizeRequests()\n                .antMatchers(\"/admin/**\").authenticated()\n                //.antMatchers(\"/authenticate\").permitAll()\n                .anyRequest().permitAll()\n                .and()\n            .formLogin()\n                .loginPage(\"/signin\")\n                .permitAll()\n                .failureUrl(\"/signin?error=1\")\n                .loginProcessingUrl(\"/authenticate\")\n                .and()\n            .logout()\n                .logoutUrl(\"/logout\")\n                .permitAll()\n                .logoutSuccessUrl(\"/signin?logout\")\n                .and()\n            .rememberMe()\n                .rememberMeServices(rememberMeServices())\n                .key(\"remember-me-secret\")\n                //.tokenValiditySeconds(60*60) //NB: Not here\n                ;\n    }\n}\n", "AN": [], "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/JpaConfig.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["JpaConfig"], "SCS_ClassReference": ["Application", "config", "config", "config", "config", "config", "config", "config", "config", "config", "config", "entityManagerFactoryBean", "", "entityManagerFactoryBean", "entityManagerFactoryBean", "jpaProperties", "jpaProperties", "jpaProperties", "entityManagerFactoryBean"], "AN": ["driver", "url", "username", "password", "dialect", "hbm2ddlAuto", "showSql", "useSqlComments", "formatSql"], "SCS_VariableDeclarator": ["driver", "url", "username", "password", "dialect", "hbm2ddlAuto", "showSql", "useSqlComments", "formatSql", "config", "entityManagerFactoryBean", "jpaProperties"], "MN": ["configureDataSource", "entityManagerFactory", "annotationDrivenTransactionManager"], "PN": [], "SCS_VariableDeclaration": ["HikariConfig", "LocalContainerEntityManagerFactoryBean", "Properties"], "SCS_MethodInvocation": ["setDriverClassName", "setJdbcUrl", "setUsername", "setPassword", "addDataSourceProperty", "addDataSourceProperty", "addDataSourceProperty", "addDataSourceProperty", "addDataSourceProperty", "addDataSourceProperty", "setDataSource", "configureDataSource", "setPackagesToScan", "setJpaVendorAdapter", "put", "put", "put", "setJpaProperties"], "SCS_MemberReference": ["driver", "url", "username", "password", "config", "DIALECT", "dialect", "HBM2DDL_AUTO", "hbm2ddlAuto", "FORMAT_SQL", "formatSql", "jpaProperties", "entityManagerFactoryBean"], "CO": ["//jpaProperties.put(org.hibernate.cfg.Environment.SHOW_SQL, showSql);", "//jpaProperties.put(org.hibernate.cfg.Environment.USE_SQL_COMMENTS, useSqlComments);"], "CODE": "package com.raysmond.blog;\n\nimport java.util.Properties;\n\nimport javax.sql.DataSource;\n\n\nimport com.zaxxer.hikari.HikariConfig;\nimport com.zaxxer.hikari.HikariDataSource;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.jpa.repository.config.EnableJpaRepositories;\nimport org.springframework.orm.jpa.JpaTransactionManager;\nimport org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\nimport org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;\nimport org.springframework.transaction.PlatformTransactionManager;\nimport org.springframework.transaction.annotation.EnableTransactionManagement;\nimport org.springframework.transaction.annotation.TransactionManagementConfigurer;\n\n@Configuration\n@EnableTransactionManagement\n@EnableJpaRepositories(basePackageClasses = Application.class)\nclass JpaConfig implements TransactionManagementConfigurer {\n\n    @Value(\"${spring.dataSource.driverClassName}\")\n    private String driver;\n    @Value(\"${spring.dataSource.url}\")\n    private String url;\n    @Value(\"${spring.dataSource.username}\")\n    private String username;\n    @Value(\"${spring.dataSource.password}\")\n    private String password;\n    @Value(\"${spring.hibernate.dialect}\")\n    private String dialect;\n    @Value(\"${spring.hibernate.hbm2ddl.auto}\")\n    private String hbm2ddlAuto;\n    @Value(\"${spring.hibernate.show_sql}\")\n    private Boolean showSql;\n\n    @Value(\"${spring.hibernate.use_sql_comments}\")\n    private Boolean useSqlComments;\n    @Value(\"${spring.hibernate.format_sql}\")\n    private Boolean formatSql;\n\n\n    @Bean\n    public DataSource configureDataSource() {\n        HikariConfig config = new HikariConfig();\n        config.setDriverClassName(driver);\n        config.setJdbcUrl(url);\n        config.setUsername(username);\n        config.setPassword(password);\n\n        config.addDataSourceProperty(\"useUnicode\", \"true\");\n        config.addDataSourceProperty(\"characterEncoding\", \"utf8\");\n        config.addDataSourceProperty(\"cachePrepStmts\", \"true\");\n        config.addDataSourceProperty(\"prepStmtCacheSize\", \"250\");\n        config.addDataSourceProperty(\"prepStmtCacheSqlLimit\", \"2048\");\n        config.addDataSourceProperty(\"useServerPrepStmts\", \"true\");\n\n        return new HikariDataSource(config);\n    }\n\n    @Bean\n    public LocalContainerEntityManagerFactoryBean entityManagerFactory() {\n        LocalContainerEntityManagerFactoryBean entityManagerFactoryBean = new LocalContainerEntityManagerFactoryBean();\n        entityManagerFactoryBean.setDataSource(configureDataSource());\n        entityManagerFactoryBean.setPackagesToScan(\"com.raysmond.blog\");\n        entityManagerFactoryBean.setJpaVendorAdapter(new HibernateJpaVendorAdapter());\n\n        Properties jpaProperties = new Properties();\n        jpaProperties.put(org.hibernate.cfg.Environment.DIALECT, dialect);\n        jpaProperties.put(org.hibernate.cfg.Environment.HBM2DDL_AUTO, hbm2ddlAuto);\n        //jpaProperties.put(org.hibernate.cfg.Environment.SHOW_SQL, showSql);\n        //jpaProperties.put(org.hibernate.cfg.Environment.USE_SQL_COMMENTS, useSqlComments);\n        jpaProperties.put(org.hibernate.cfg.Environment.FORMAT_SQL, formatSql);\n        entityManagerFactoryBean.setJpaProperties(jpaProperties);\n\n        return entityManagerFactoryBean;\n    }\n\n    @Bean(name = \"transactionManager\")\n    public PlatformTransactionManager annotationDrivenTransactionManager() {\n        return new JpaTransactionManager();\n    }\n}\n", "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/WebConfig.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["WebConfig"], "AN": ["viewHelper", "env"], "SCS_VariableDeclarator": ["viewHelper", "env", "token"], "MN": ["addResourceHandlers", "addInterceptors", "registerJadeViewHelpers", "viewObjectAddingInterceptor", "preHandle", "postHandle", "getApplicationEnv"], "PN": ["registry", "registry", "request", "response", "handler", "request", "response", "handler", "view"], "SCS_ClassReference": ["registry", null, "registry", "", "viewHelper", null, "viewHelper", "System", "request", "CsrfToken", null, "view", "token", null], "SCS_MethodInvocation": ["addResourceHandler", "addResourceLocations", "addInterceptor", "viewObjectAddingInterceptor", "setApplicationEnv", "getApplicationEnv", "setStartTime", "currentTimeMillis", "getAttribute", "getName", "addObject", "getParameterName", "acceptsProfiles"], "SCS_MemberReference": ["registry", "view", "token", "token", "env", "ENV_PRODUCTION", "ENV_PRODUCTION", "ENV_DEVELOPMENT"], "SCS_VariableDeclaration": ["CsrfToken"], "CO": ["/**\n * @author Raysmond<i@raysmond.com>.\n */"], "CODE": "package com.raysmond.blog;\n\nimport com.raysmond.blog.support.web.ViewHelper;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.env.Environment;\nimport org.springframework.security.web.csrf.CsrfToken;\nimport org.springframework.web.servlet.HandlerInterceptor;\nimport org.springframework.web.servlet.ModelAndView;\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\nimport org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;\nimport org.springframework.web.servlet.handler.HandlerInterceptorAdapter;\n\nimport javax.annotation.PostConstruct;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport static com.raysmond.blog.Constants.*;\n\n/**\n * @author Raysmond<i@raysmond.com>.\n */\n@Configuration\npublic class WebConfig extends WebMvcConfigurerAdapter {\n    @Qualifier(\"viewHelper\")\n    @Autowired\n    private ViewHelper viewHelper;\n\n    @Autowired\n    private Environment env;\n\n    @Override\n    public void addResourceHandlers(ResourceHandlerRegistry registry) {\n        registry\n                .addResourceHandler(\"/webjars/**\")\n                .addResourceLocations(\"classpath:/META-INF/resources/webjars/\");\n    }\n\n    @Override\n    public void addInterceptors(InterceptorRegistry registry) {\n        registry.addInterceptor(viewObjectAddingInterceptor());\n        super.addInterceptors(registry);\n    }\n\n    @PostConstruct\n    public void registerJadeViewHelpers(){\n        viewHelper.setApplicationEnv(this.getApplicationEnv());\n    }\n\n    @Bean\n    public HandlerInterceptor viewObjectAddingInterceptor() {\n        return new HandlerInterceptorAdapter() {\n            @Override\n            public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n                viewHelper.setStartTime(System.currentTimeMillis());\n\n                return true;\n            }\n\n            @Override\n            public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView view) {\n                if (view != null) {\n                    CsrfToken token = (CsrfToken) request.getAttribute(CsrfToken.class.getName());\n                    if (token != null) {\n                        view.addObject(token.getParameterName(), token);\n                    }\n                }\n            }\n        };\n    }\n\n    public String getApplicationEnv(){\n        return this.env.acceptsProfiles(ENV_PRODUCTION) ? ENV_PRODUCTION : ENV_DEVELOPMENT;\n    }\n}\n", "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/Constants.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["Constants"], "AN": ["ENV_PRODUCTION", "ENV_DEVELOPMENT", "DEFAULT_ADMIN_EMAIL", "DEFAULT_ADMIN_PASSWORD", "ABOUT_PAGE_PERMALINK", "PROJECTS_PAGE_PERMALINK"], "SCS_VariableDeclarator": ["ENV_PRODUCTION", "ENV_DEVELOPMENT", "DEFAULT_ADMIN_EMAIL", "DEFAULT_ADMIN_PASSWORD", "ABOUT_PAGE_PERMALINK", "PROJECTS_PAGE_PERMALINK"], "CO": ["/**\n * @author: Raysmond<i@raysmond.com>\n */"], "CODE": "package com.raysmond.blog;\n\n/**\n * @author: Raysmond<i@raysmond.com>\n */\npublic final class Constants {\n\n    public static final String ENV_PRODUCTION = \"production\";\n\n    public static final String ENV_DEVELOPMENT = \"development\";\n\n    public static final String DEFAULT_ADMIN_EMAIL = \"admin@admin.com\";\n\n    public static final String DEFAULT_ADMIN_PASSWORD = \"admin\";\n\n    public static final String ABOUT_PAGE_PERMALINK = \"about\";\n\n    public static final String PROJECTS_PAGE_PERMALINK = \"projects\";\n\n}\n", "MN": [], "PN": [], "SCS_ClassReference": [], "SCS_MemberReference": [], "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_VariableDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_MethodInvocation": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/Application.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["Application"], "MN": ["main"], "PN": ["args"], "SCS_ClassReference": ["SLF4JBridgeHandler", "SLF4JBridgeHandler", "SpringApplication", "Application"], "SCS_MethodInvocation": ["removeHandlersForRootLogger", "install", "run"], "SCS_MemberReference": ["args"], "CO": ["/**\n * @author Raysmond<i@raysmond.com>\n */", "// \u5f00\u542f\u7f13\u5b58\u8bf7\u628a\u4e0b\u884c\u53d6\u6d88\u6ce8\u91ca", "// Open the cache Please uncomment the downlink", "//@EnableCaching"], "CODE": "package com.raysmond.blog;\n\nimport org.slf4j.bridge.SLF4JBridgeHandler;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n\n/**\n * @author Raysmond<i@raysmond.com>\n */\n@SpringBootApplication\n// \u5f00\u542f\u7f13\u5b58\u8bf7\u628a\u4e0b\u884c\u53d6\u6d88\u6ce8\u91ca\n// Open the cache Please uncomment the downlink\n//@EnableCaching\npublic class Application {\n\n    public static void main(String[] args) {\n        SLF4JBridgeHandler.removeHandlersForRootLogger();\n        SLF4JBridgeHandler.install();\n\n        SpringApplication.run(Application.class, args);\n    }\n\n}\n", "AN": [], "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_VariableDeclaration": [], "SCS_VariableDeclarator": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/repositories/SettingRepository.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["SettingRepository"], "MN": ["findByKey"], "PN": ["key"], "CO": ["/**\n * @author Raysmond<i@raysmond.com>\n */"], "CODE": "package com.raysmond.blog.repositories;\n\nimport com.raysmond.blog.models.Setting;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.repository.CrudRepository;\nimport org.springframework.stereotype.Repository;\nimport org.springframework.transaction.annotation.Transactional;\n\n/**\n * @author Raysmond<i@raysmond.com>\n */\n@Repository\n@Transactional\npublic interface SettingRepository extends JpaRepository<Setting, Long> {\n    Setting findByKey(String key);\n}\n", "AN": [], "SCS_ClassReference": [], "SCS_MemberReference": [], "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_VariableDeclaration": [], "SCS_VariableDeclarator": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_MethodInvocation": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/repositories/PostRepository.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["PostRepository"], "MN": ["findByPermalinkAndPostStatusAndDeleted", "findByIdAndPostStatusAndDeleted", "findAllByPostTypeAndDeleted", "findAllByPostTypeAndPostStatusAndDeleted", "findAllByPostTypeAndPostStatusAndDeleted", "findAllByDeleted", "findByTag", "countPostsByTags"], "PN": ["permalink", "postStatus", "deleted", "postId", "postStatus", "deleted", "postType", "pageRequest", "deleted", "postType", "postStatus", "pageRequest", "deleted", "postType", "postStatus", "deleted", "pageRequest", "deleted", "tag", "pageable", "status"], "CO": ["/**\n * @author Raysmond<i@raysmond.com>\n */"], "CODE": "package com.raysmond.blog.repositories;\n\nimport com.raysmond.blog.models.Post;\nimport com.raysmond.blog.models.support.PostStatus;\nimport com.raysmond.blog.models.support.PostType;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.query.Param;\nimport org.springframework.stereotype.Repository;\nimport org.springframework.transaction.annotation.Transactional;\nimport java.util.Map;\n\nimport java.util.List;\n\n/**\n * @author Raysmond<i@raysmond.com>\n */\n@Repository\n@Transactional\npublic interface PostRepository extends JpaRepository<Post, Long> {\n    Post findByPermalinkAndPostStatusAndDeleted(String permalink, PostStatus postStatus, Boolean deleted);\n\n    Post findByIdAndPostStatusAndDeleted(Long postId, PostStatus postStatus, Boolean deleted);\n\n    Page<Post> findAllByPostTypeAndDeleted(PostType postType, Pageable pageRequest, Boolean deleted);\n\n    Page<Post> findAllByPostTypeAndPostStatusAndDeleted(PostType postType, PostStatus postStatus, Pageable pageRequest, Boolean deleted);\n\n    List<Post> findAllByPostTypeAndPostStatusAndDeleted(PostType postType, PostStatus postStatus, Boolean deleted);\n\n    Page<Post> findAllByDeleted(Pageable pageRequest, Boolean deleted);\n\n    @Query(\"SELECT p FROM Post p INNER JOIN p.tags t WHERE t.name = :tag AND p.deleted = false\")\n    Page<Post> findByTag(@Param(\"tag\") String tag, Pageable pageable);\n\n    @Query(\"SELECT t.name, count(p) as tag_count from Post p \" +\n            \"INNER JOIN p.tags t \" +\n            \"WHERE p.postStatus = :status \" +\n            \"AND p.deleted = false \" +\n            \"GROUP BY t.id \" +\n            \"ORDER BY tag_count DESC\")\n    List<Object[]> countPostsByTags(@Param(\"status\") PostStatus status);\n}\n\n", "AN": [], "SCS_ClassReference": [], "SCS_MemberReference": [], "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_VariableDeclaration": [], "SCS_VariableDeclarator": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_MethodInvocation": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/repositories/LikeRepository.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["LikeRepository"], "MN": ["getTotalLikesByUserAndPost", "getTotalLikesByPost", "getTotalLikesByClientIpAndPost"], "PN": ["user", "post", "post", "clientIp", "post"], "CO": [], "CODE": "package com.raysmond.blog.repositories;\n\nimport com.raysmond.blog.models.Like;\nimport com.raysmond.blog.models.Post;\nimport com.raysmond.blog.models.User;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.query.Param;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface LikeRepository extends JpaRepository<Like, Long> {\n\n    @Query(\"SELECT SUM(l.sympathy) FROM Like AS l WHERE l.user = :user AND l.post = :post GROUP BY l.user, l.post\")\n    Integer getTotalLikesByUserAndPost(@Param(\"user\") User user, @Param(\"post\") Post post);\n\n    @Query(\"SELECT SUM(l.sympathy) FROM Like AS l WHERE l.post = :post GROUP BY l.post\")\n    Integer getTotalLikesByPost(@Param(\"post\") Post post);\n\n    @Query(\"SELECT SUM(l.sympathy) FROM Like AS l WHERE l.clientIp = :clientIp AND l.post = :post GROUP BY l.clientIp, l.post\")\n    Integer getTotalLikesByClientIpAndPost(@Param(\"clientIp\") String clientIp, @Param(\"post\") Post post);\n}\n", "AN": [], "SCS_ClassReference": [], "SCS_MemberReference": [], "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_VariableDeclaration": [], "SCS_VariableDeclarator": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_MethodInvocation": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/repositories/SeoPostDataRepository.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["SeoPostDataRepository"], "CO": [], "CODE": "package com.raysmond.blog.repositories;\n\nimport com.raysmond.blog.models.SeoPostData;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface SeoPostDataRepository extends JpaRepository<SeoPostData, Long> {\n}\n", "AN": [], "MN": [], "PN": [], "SCS_ClassReference": [], "SCS_MemberReference": [], "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_VariableDeclaration": [], "SCS_VariableDeclarator": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_MethodInvocation": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/repositories/UserRepository.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["UserRepository"], "MN": ["findByEmail", "findAllByRoleOrderById"], "PN": ["email", "role"], "CO": ["/**\n * @author Raysmond<i@raysmond.com>\n */"], "CODE": "package com.raysmond.blog.repositories;\n\nimport com.raysmond.blog.models.User;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.repository.CrudRepository;\nimport org.springframework.stereotype.Repository;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.List;\n\n/**\n * @author Raysmond<i@raysmond.com>\n */\n@Repository\n@Transactional\npublic interface UserRepository extends JpaRepository<User, Long> {\n    User findByEmail(String email);\n    List<User> findAllByRoleOrderById(String role);\n}\n", "AN": [], "SCS_ClassReference": [], "SCS_MemberReference": [], "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_VariableDeclaration": [], "SCS_VariableDeclarator": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_MethodInvocation": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/repositories/VisitRepository.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["VisitRepository"], "MN": ["getUniquePostVisitsCount", "getVisitsByPostAndIsAdminIsFalse"], "PN": ["post", "post"], "CO": ["//\"LEFT JOIN v.robotsAgents AS ra \" +", "//\"ON v.userAgent LIKE concat('%', ra.userAgent, '%') \"+", "//+", "//\"AND ra.id IS NULL \""], "CODE": "package com.raysmond.blog.repositories;\n\nimport com.raysmond.blog.models.Post;\nimport com.raysmond.blog.models.User;\nimport com.raysmond.blog.models.Visit;\nimport com.raysmond.blog.models.SeoRobotAgent;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.query.Param;\n\nimport java.util.List;\n\npublic interface VisitRepository extends JpaRepository<Visit, Long> {\n\n    @Query( \"SELECT COUNT(DISTINCT v.clientIp) \" +\n            \"FROM Visit AS v \" +\n            //\"LEFT JOIN v.robotsAgents AS ra \" +\n            //\"ON v.userAgent LIKE concat('%', ra.userAgent, '%') \"+\n            \"WHERE v.post = :post AND v.isAdmin = FALSE \" //+\n            //\"AND ra.id IS NULL \"\n    )\n    Long getUniquePostVisitsCount(@Param(\"post\") Post post);\n\n    @Query( \"SELECT v.clientIp, NULLIF(v.userAgent, '') \" +\n            \"FROM Visit AS v \" +\n            \"WHERE v.post = :post AND v.isAdmin = FALSE \" +\n            \"GROUP BY v.clientIp, NULLIF(v.userAgent, '') \"\n    )\n    List<Object> getVisitsByPostAndIsAdminIsFalse(@Param(\"post\") Post post);\n\n}\n", "AN": [], "SCS_ClassReference": [], "SCS_MemberReference": [], "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_VariableDeclaration": [], "SCS_VariableDeclarator": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_MethodInvocation": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/repositories/StoredFileRepository.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["StoredFileRepository"], "MN": ["findById", "findByName"], "PN": ["id", "name"], "CO": [], "CODE": "package com.raysmond.blog.repositories;\n\nimport com.raysmond.blog.models.StoredFile;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\npublic interface StoredFileRepository extends JpaRepository<StoredFile, Long> {\n    StoredFile findById(Long id);\n    StoredFile findByName(String name);\n}\n", "AN": [], "SCS_ClassReference": [], "SCS_MemberReference": [], "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_VariableDeclaration": [], "SCS_VariableDeclarator": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_MethodInvocation": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/repositories/SeoRobotAgentRepository.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["SeoRobotAgentRepository"], "CO": [], "CODE": "package com.raysmond.blog.repositories;\n\nimport com.raysmond.blog.models.SeoRobotAgent;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\npublic interface SeoRobotAgentRepository extends JpaRepository<SeoRobotAgent, Long> {\n\n}\n", "AN": [], "MN": [], "PN": [], "SCS_ClassReference": [], "SCS_MemberReference": [], "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_VariableDeclaration": [], "SCS_VariableDeclarator": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_MethodInvocation": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/repositories/TagRepository.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["TagRepository"], "MN": ["findByName"], "PN": ["name"], "CO": ["/**\n * @author Raysmond<i@raysmond.com>.\n */"], "CODE": "package com.raysmond.blog.repositories;\n\nimport com.raysmond.blog.models.Tag;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\n/**\n * @author Raysmond<i@raysmond.com>.\n */\npublic interface TagRepository extends JpaRepository<Tag, Long>{\n    Tag findByName(String name);\n}\n", "AN": [], "SCS_ClassReference": [], "SCS_MemberReference": [], "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_VariableDeclaration": [], "SCS_VariableDeclarator": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_MethodInvocation": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/admin/controllers/StoredFileController.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["StoredFileController"], "AN": ["PAGE_SIZE", "storageService", "storedFileRepository", "userService"], "SCS_VariableDeclarator": ["PAGE_SIZE", "storageService", "storedFileRepository", "userService", "files", "message", "bytes", "file", "fileForm", "storedFile"], "MN": ["index", "upload", "uploadStatus", "editFileById", "saveFile", "deletePost"], "PN": ["page", "model", "file", "redirectAttributes", "fileId", "model", "fileId", "fileForm", "errors", "fileId"], "SCS_VariableDeclaration": ["Page", "String", "byte", "StoredFile", "StoredFileForm", "StoredFile"], "SCS_ClassReference": ["storedFileRepository", "model", "files", "model", "model", "model", "PaginatorUtil", "files", "file", "redirectAttributes", "file", null, "file", "file", "redirectAttributes", "log", "redirectAttributes", "Assert", null, "String", "DTOUtil", "StoredFileForm", "model", "model", "Assert", "errors", "String", null, "DTOUtil", "storedFile", null, "storedFile", null, null, "log"], "SCS_MethodInvocation": ["findAll", "addAttribute", "getTotalPages", "addAttribute", "addAttribute", "addAttribute", "createPagesList", "getTotalPages", "isEmpty", "addFlashAttribute", "getBytes", "storeFile", "getOriginalFilename", "getOriginalFilename", "addFlashAttribute", "error", "addFlashAttribute", "notNull", "getFileById", "format", "map", "addAttribute", "addAttribute", "notNull", "hasErrors", "format", "findById", "mapTo", "setUser", "currentUser", "setUpdatedAt", "save", "deleteFileById", "error"], "SCS_MemberReference": ["page", "PAGE_SIZE", "DESC", "page", "files", "storageService", "bytes", "message", "message", "e", "message", "message", "fileId", "storageService", "fileId", "file", "fileId", "file", "file", "fileForm", "fileId", "fileId", "storedFileRepository", "fileId", "fileForm", "storedFile", "userService", "storedFileRepository", "storedFile", "DELETE", "POST", "storageService", "fileId", "e"], "CO": ["//new annotation since 4.3", "// Get the file and save it somewhere", "//response.sendError(404, String.format(\"File %s not found\", fileId));"], "CODE": "package com.raysmond.blog.admin.controllers;\n\nimport com.raysmond.blog.error.NotFoundException;\nimport com.raysmond.blog.forms.StoredFileForm;\nimport com.raysmond.blog.models.StoredFile;\nimport com.raysmond.blog.repositories.StoredFileRepository;\nimport com.raysmond.blog.services.FileStorageService;\nimport com.raysmond.blog.services.UserService;\nimport com.raysmond.blog.utils.DTOUtil;\nimport com.raysmond.blog.utils.PaginatorUtil;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.PageRequest;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.util.Assert;\nimport org.springframework.validation.Errors;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.web.multipart.MultipartFile;\nimport org.springframework.web.servlet.mvc.support.RedirectAttributes;\n\nimport javax.validation.Valid;\nimport java.io.IOException;\nimport java.util.Date;\n\nimport static org.springframework.web.bind.annotation.RequestMethod.DELETE;\nimport static org.springframework.web.bind.annotation.RequestMethod.POST;\n\n@Slf4j\n@Controller(\"adminUploadController\")\n@RequestMapping(\"admin/files\")\npublic class StoredFileController {\n\n    private static final int PAGE_SIZE = 20;\n\n    @Autowired\n    private FileStorageService storageService;\n\n    @Autowired\n    private StoredFileRepository storedFileRepository;\n\n    @Autowired\n    private UserService userService;\n\n    @GetMapping(\"\")\n    public String index(@RequestParam(defaultValue = \"0\") int page, Model model) {\n        Page<StoredFile> files = storedFileRepository.findAll(new PageRequest(page, PAGE_SIZE, Sort.Direction.DESC, \"id\"));\n\n        model.addAttribute(\"totalPages\", files.getTotalPages());\n        model.addAttribute(\"page\", page);\n        model.addAttribute(\"files\", files);\n        model.addAttribute(\"pagesList\", PaginatorUtil.createPagesList(0, files.getTotalPages()-1));\n\n        return \"admin/files/index\";\n    }\n\n    @PostMapping(\"/upload\") //new annotation since 4.3\n    public String upload(@RequestParam(\"file\") MultipartFile file, RedirectAttributes redirectAttributes) {\n        if (file.isEmpty()) {\n            redirectAttributes.addFlashAttribute(\"uploadStatus\", \"Please select a file to upload\");\n            return \"redirect:/admin/files/status\";\n        }\n\n        String message = \"\";\n\n        try {\n\n            // Get the file and save it somewhere\n            byte[] bytes = file.getBytes();\n\n            this.storageService.storeFile(file.getOriginalFilename(), bytes);\n\n            message = \"You successfully uploaded '\" + file.getOriginalFilename() + \"'\";\n            redirectAttributes.addFlashAttribute(\"uploadStatus\", message);\n\n        } catch (IOException e) {\n            log.error(\"Error\", e);\n            message = \"Internal server error occured\";\n            redirectAttributes.addFlashAttribute(\"uploadStatus\", message);\n        }\n\n        return \"redirect:/admin/files/status\";\n    }\n\n    @GetMapping(\"/status\")\n    public String uploadStatus() {\n        return \"admin/files/status\";\n    }\n\n\n\n    @GetMapping(value = \"/{fileId:[\\\\d]+}/edit\")\n    public String editFileById(@PathVariable Long fileId, Model model) {\n        Assert.notNull(fileId);\n        StoredFile file = this.storageService.getFileById(fileId);\n        if (file == null) {\n            //response.sendError(404, String.format(\"File %s not found\", fileId));\n            throw new NotFoundException(String.format(\"File with id %s not found\", fileId));\n        }\n\n        StoredFileForm fileForm = DTOUtil.map(file, StoredFileForm.class);\n\n        model.addAttribute(\"file\", file);\n        model.addAttribute(\"fileForm\", fileForm);\n\n        return \"admin/files/edit\";\n    }\n\n\n    @PostMapping(value = \"/{fileId:[\\\\d]+}\")\n    public String saveFile(@PathVariable Long fileId, @Valid StoredFileForm fileForm, Errors errors) {\n        Assert.notNull(fileId);\n\n        if (errors.hasErrors()) {\n            return String.format(\"admin/files/%d/edit\", fileId);\n        }\n\n        StoredFile storedFile = this.storedFileRepository.findById(fileId);\n        DTOUtil.mapTo(fileForm, storedFile);\n        storedFile.setUser(this.userService.currentUser());\n        storedFile.setUpdatedAt(new Date());\n        this.storedFileRepository.save(storedFile);\n\n        return \"redirect:/admin/files\";\n    }\n\n    @RequestMapping(value = \"{fileId:[0-9]+}/delete\", method = {DELETE, POST})\n    public String deletePost(@PathVariable Long fileId){\n        try {\n            this.storageService.deleteFileById(fileId);\n        } catch (IOException e) {\n            log.error(\"Error\", e);\n        }\n        return \"redirect:/admin/files\";\n    }\n\n}\n", "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/admin/controllers/AdminController.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["AdminController"], "AN": ["appSetting", "postService"], "SCS_VariableDeclarator": ["appSetting", "postService", "settingsForm"], "MN": ["index", "settings", "updateSettings"], "PN": ["model", "model", "settingsForm", "errors", "model", "ra"], "SCS_ClassReference": ["model", "postService", "DTOUtil", "SettingsForm", "model", "errors", "appSetting", "settingsForm", "appSetting", "settingsForm", "appSetting", "settingsForm", "appSetting", "settingsForm", "appSetting", "settingsForm", "appSetting", "settingsForm", "appSetting", "settingsForm", "MessageHelper"], "SCS_MethodInvocation": ["addAttribute", "getPostsIdTitleList", "map", "addAttribute", "hasErrors", "setSiteName", "getSiteName", "setSiteSlogan", "getSiteSlogan", "setPageSize", "getPageSize", "setStoragePath", "getStoragePath", "setMainUri", "getMainUri", "setTelegramMasterChatId", "getTelegramMasterChatId", "setSubscriptionLink", "getSubscriptionLink", "addSuccessAttribute"], "SCS_VariableDeclaration": ["SettingsForm"], "SCS_MemberReference": ["appSetting", "settingsForm", "POST", "ra"], "CO": ["/**\n * @author Raysmond<i@raysmond.com>\n */"], "CODE": "package com.raysmond.blog.admin.controllers;\n\nimport com.raysmond.blog.forms.SettingsForm;\nimport com.raysmond.blog.models.dto.VisitStatDTO;\nimport com.raysmond.blog.models.dto.VisitsStatsChartDTO;\nimport com.raysmond.blog.services.AppSetting;\nimport com.raysmond.blog.services.PostService;\nimport com.raysmond.blog.services.StatisticsService;\nimport com.raysmond.blog.support.web.MessageHelper;\nimport com.raysmond.blog.utils.DTOUtil;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.validation.Errors;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.servlet.mvc.support.RedirectAttributes;\n\nimport javax.validation.Valid;\nimport java.lang.reflect.Array;\nimport java.math.BigInteger;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\n\n/**\n * @author Raysmond<i@raysmond.com>\n */\n@Controller\n@RequestMapping(\"admin\")\npublic class AdminController {\n\n    @Autowired\n    private AppSetting appSetting;\n\n    @Autowired\n    private PostService postService;\n\n\n    @RequestMapping(\"\")\n    public String index(Model model) {\n        model.addAttribute(\"posts\", postService.getPostsIdTitleList());\n        return \"admin/home/index\";\n    }\n\n    @RequestMapping(value = \"settings\")\n    public String settings(Model model){\n        SettingsForm settingsForm = DTOUtil.map(appSetting, SettingsForm.class);\n\n        model.addAttribute(\"settings\", settingsForm);\n        return \"admin/home/settings\";\n    }\n\n    @RequestMapping(value = \"settings\", method = RequestMethod.POST)\n    public String updateSettings(@Valid SettingsForm settingsForm, Errors errors, Model model, RedirectAttributes ra){\n        if (errors.hasErrors()){\n            return \"admin/settings\";\n        } else {\n            appSetting.setSiteName(settingsForm.getSiteName());\n            appSetting.setSiteSlogan(settingsForm.getSiteSlogan());\n            appSetting.setPageSize(settingsForm.getPageSize());\n            appSetting.setStoragePath(settingsForm.getStoragePath());\n            appSetting.setMainUri(settingsForm.getMainUri());\n            appSetting.setTelegramMasterChatId(settingsForm.getTelegramMasterChatId());\n            appSetting.setSubscriptionLink(settingsForm.getSubscriptionLink());\n\n            MessageHelper.addSuccessAttribute(ra, \"Update settings successfully.\");\n\n            return \"redirect:settings\";\n        }\n    }\n}\n", "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/admin/controllers/PostController.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["PostController"], "AN": ["postService", "userRepository", "markdownService", "PAGE_SIZE"], "SCS_VariableDeclarator": ["postService", "userRepository", "markdownService", "PAGE_SIZE", "posts", "postForm", "post", "webErrors", "field", "post", "webErrors", "field", "post"], "MN": ["index", "makeFormPostCreation", "makeFormPostCreation", "newPost", "makeFormPostEdition", "makeFormPostEdition", "editPost", "deletePost", "create", "update", "preview"], "PN": ["page", "model", "model", "model", "postForm", "model", "postId", "model", "postId", "model", "postForm", "postId", "model", "postId", "principal", "postForm", "errors", "model", "postId", "postForm", "errors", "model", "postPreviewForm", "errors", "model"], "SCS_VariableDeclaration": ["Page", "PostForm", "Post", "Map", "String", "Post", "Map", "String", "Post"], "SCS_ClassReference": ["postService", "model", "posts", "model", "model", "model", "PaginatorUtil", "posts", "DTOUtil", "PostForm", null, "postForm", "model", "model", "PostFormat", "model", "PostStatus", "model", "OgLocale", "model", "OgType", null, null, "postService", "DTOUtil", "PostForm", "postForm", "DTOUtil", "postForm", "postService", "post", "model", "model", "model", "PostFormat", "model", "PostStatus", "model", "OgLocale", "model", "OgType", null, "postService", "errors", "errors", null, "webErrors", "e", "model", null, "DTOUtil", "Post", "post", "userRepository", "principal", "post", "postService", "postForm", "postForm", "postService", "errors", "errors", null, "webErrors", "e", "model", null, "postService", "DTOUtil", "post", "postService", "postForm", "postForm", "postService", "errors", "markdownService", "postPreviewForm"], "SCS_MethodInvocation": ["findAllPosts", "addAttribute", "getTotalPages", "addAttribute", "addAttribute", "addAttribute", "createPagesList", "getTotalPages", "map", "makeFormPostCreation", "init", "addAttribute", "addAttribute", "values", "addAttribute", "values", "addAttribute", "values", "addAttribute", "values", "makeFormPostCreation", "makeFormPostEdition", "getPost", "map", "init", "mapTo", "initFromPost", "getTagNames", "getTags", "addAttribute", "addAttribute", "addAttribute", "values", "addAttribute", "values", "addAttribute", "values", "addAttribute", "values", "makeFormPostEdition", "deletePost", "hasErrors", "getAllErrors", "forEach", "put", "getDefaultMessage", "addAttribute", "makeFormPostCreation", "map", "setUser", "findByEmail", "getName", "setTags", "parseTagNames", "getPostTags", "fillOgFieldsInPost", "createPost", "hasErrors", "getAllErrors", "forEach", "put", "getDefaultMessage", "addAttribute", "makeFormPostEdition", "getPost", "mapTo", "setTags", "parseTagNames", "getPostTags", "fillOgFieldsInPost", "updatePost", "hasErrors", "renderToHtml", "getContent"], "SCS_MemberReference": ["page", "PAGE_SIZE", "DESC", "page", "posts", "model", "postForm", "postForm", "model", "postId", "model", "postId", "postForm", "postForm", "post", "post", "postForm", "post", "post", "postForm", "postId", "model", "DELETE", "POST", "postId", "POST", "e", "e", "field", "field", "webErrors", "model", "postForm", "postForm", "post", "post", "PUT", "POST", "e", "e", "field", "field", "webErrors", "postId", "model", "postForm", "postId", "postForm", "post", "post", "post", "PUT", "POST", "APPLICATION_JSON_VALUE"], "CO": ["/**\n * @author Raysmond<i@raysmond.com>\n */"], "CODE": "package com.raysmond.blog.admin.controllers;\n\nimport com.raysmond.blog.forms.PostForm;\nimport com.raysmond.blog.forms.PostPreviewForm;\nimport com.raysmond.blog.models.Post;\nimport com.raysmond.blog.models.dto.PostPreviewDTO;\nimport com.raysmond.blog.models.support.*;\nimport com.raysmond.blog.repositories.UserRepository;\nimport com.raysmond.blog.services.PostService;\nimport com.raysmond.blog.support.web.MarkdownService;\nimport com.raysmond.blog.utils.DTOUtil;\nimport com.raysmond.blog.utils.PaginatorUtil;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.PageRequest;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.http.MediaType;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.validation.Errors;\nimport org.springframework.validation.FieldError;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.validation.Valid;\nimport java.security.Principal;\nimport java.util.*;\n\nimport static org.springframework.web.bind.annotation.RequestMethod.*;\n\n/**\n * @author Raysmond<i@raysmond.com>\n */\n@Controller(\"adminPostController\")\n@RequestMapping(\"admin/posts\")\npublic class PostController {\n\n    @Autowired\n    private PostService postService;\n\n    @Autowired\n    private UserRepository userRepository;\n\n    @Autowired\n    private MarkdownService markdownService;\n\n    private static final int PAGE_SIZE = 20;\n\n    @RequestMapping(value = \"\")\n    public String index(@RequestParam(defaultValue = \"0\") int page, Model model){\n        Page<Post> posts = postService.findAllPosts(new PageRequest(page, PAGE_SIZE, Sort.Direction.DESC, \"id\"));\n\n        model.addAttribute(\"totalPages\", posts.getTotalPages());\n        model.addAttribute(\"page\", page);\n        model.addAttribute(\"posts\", posts);\n        model.addAttribute(\"pagesList\", PaginatorUtil.createPagesList(0, posts.getTotalPages()-1));\n\n        return \"admin/posts/index\";\n    }\n\n    private String makeFormPostCreation(Model model) {\n        PostForm postForm = DTOUtil.map(new Post(), PostForm.class);\n        return this.makeFormPostCreation(model, postForm);\n    }\n\n    private String makeFormPostCreation(Model model, PostForm postForm) {\n\n        postForm.init();\n\n        model.addAttribute(\"postForm\", postForm);\n        model.addAttribute(\"postFormats\", PostFormat.values());\n        model.addAttribute(\"postStatus\", PostStatus.values());\n        model.addAttribute(\"seoOgLocales\", OgLocale.values());\n        model.addAttribute(\"seoOgTypes\", OgType.values());\n\n        return \"admin/posts/new\";\n    }\n\n    @RequestMapping(value = \"new\")\n    public String newPost(Model model){\n        return this.makeFormPostCreation(model);\n    }\n\n    private String makeFormPostEdition(Long postId, Model model) {\n        return this.makeFormPostEdition(postId, model, null);\n    }\n\n    private String makeFormPostEdition(Long postId, Model model, PostForm postForm) {\n        Post post = postService.getPost(postId);\n\n        if (postForm == null) {\n            postForm = DTOUtil.map(post, PostForm.class);\n        }\n\n        postForm.init();\n        DTOUtil.mapTo(post, postForm);\n        postForm.initFromPost(post, postService.getTagNames(post.getTags()));\n\n        model.addAttribute(\"post\", post);\n        model.addAttribute(\"postForm\", postForm);\n        model.addAttribute(\"postFormats\", PostFormat.values());\n        model.addAttribute(\"postStatus\", PostStatus.values());\n        model.addAttribute(\"seoOgLocales\", OgLocale.values());\n        model.addAttribute(\"seoOgTypes\", OgType.values());\n\n        return \"admin/posts/edit\";\n    }\n\n    @RequestMapping(value = \"{postId:[0-9]+}/edit\")\n    public String editPost(@PathVariable Long postId, Model model){\n        return this.makeFormPostEdition(postId, model);\n    }\n\n    @RequestMapping(value = \"{postId:[0-9]+}/delete\", method = {DELETE, POST})\n    public String deletePost(@PathVariable Long postId){\n        postService.deletePost(postId);\n        return \"redirect:/admin/posts\";\n    }\n\n    @RequestMapping(value = \"\", method = POST)\n    public String create(Principal principal, @Valid PostForm postForm, Errors errors, Model model){\n        if (errors.hasErrors()) {\n            Map<String, WebError> webErrors = new HashMap<>();\n            errors.getAllErrors().forEach(e -> {\n                String field = ((FieldError)e).getField();\n                webErrors.put(field, new WebError(field, e.getDefaultMessage()));\n            });\n            model.addAttribute(\"errors\", webErrors);\n            return this.makeFormPostCreation(model, postForm);\n        } else {\n            Post post = DTOUtil.map(postForm, Post.class);\n            post.setUser(userRepository.findByEmail(principal.getName()));\n            post.setTags(postService.parseTagNames(postForm.getPostTags()));\n            postForm.fillOgFieldsInPost(post);\n\n            postService.createPost(post);\n\n            return \"redirect:/admin/posts\";\n        }\n    }\n\n    @RequestMapping(value = \"{postId:[0-9]+}\", method = {PUT, POST})\n    public String update(@PathVariable Long postId, @Valid PostForm postForm, Errors errors, Model model){\n        if (errors.hasErrors()){\n            Map<String, WebError> webErrors = new HashMap<>();\n            errors.getAllErrors().forEach(e -> {\n                String field = ((FieldError)e).getField();\n                webErrors.put(field, new WebError(field, e.getDefaultMessage()));\n            });\n            model.addAttribute(\"errors\", webErrors);\n            return this.makeFormPostEdition(postId, model, postForm);\n        } else {\n            Post post = postService.getPost(postId);\n            DTOUtil.mapTo(postForm, post);\n            post.setTags(postService.parseTagNames(postForm.getPostTags()));\n            postForm.fillOgFieldsInPost(post);\n\n            postService.updatePost(post);\n\n            return \"redirect:/admin/posts\";\n        }\n    }\n\n    @RequestMapping(value = \"/preview\", method = {PUT, POST}, produces = MediaType.APPLICATION_JSON_VALUE)\n    public @ResponseBody\n    PostPreviewDTO preview(@RequestBody @Valid PostPreviewForm postPreviewForm, Errors errors, Model model) throws Exception {\n\n         if (errors.hasErrors()) {\n            throw new Exception(\"Error occurred!\");\n        }\n\n        return new PostPreviewDTO(markdownService.renderToHtml(postPreviewForm.getContent()));\n    }\n\n\n}\n", "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/admin/controllers/StatisticsController.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["StatisticsController"], "AN": ["statisticsService"], "SCS_VariableDeclarator": ["statisticsService", "chart", "chart"], "MN": ["getVisitsChart", "getVisitsChartByPeriodAndPostsIdList"], "PN": ["start", "end", "postsDto"], "SCS_MemberReference": ["APPLICATION_JSON_VALUE", "chart", "APPLICATION_JSON_VALUE", "start", "end", "chart"], "SCS_VariableDeclaration": ["VisitsStatsChartDTO", "VisitsStatsChartDTO"], "SCS_ClassReference": ["statisticsService", "statisticsService", "postsDto"], "SCS_MethodInvocation": ["getFullVisitsStatsChartData", "getChartDataByPeriodAndPostsList", "getIds"], "CO": ["/**\n * Created by bvn13 on 20.12.2017.\n */"], "CODE": "package com.raysmond.blog.admin.controllers;\n\nimport com.raysmond.blog.models.dto.PostsIdListDTO;\nimport com.raysmond.blog.models.dto.VisitsStatsChartDTO;\nimport com.raysmond.blog.services.StatisticsService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.format.annotation.DateTimeFormat;\nimport org.springframework.http.MediaType;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.Date;\n\n/**\n * Created by bvn13 on 20.12.2017.\n */\n@Controller\n@RequestMapping(value = \"/admin/stats\")\npublic class StatisticsController {\n\n    @Autowired\n    private StatisticsService statisticsService;\n\n\n    @GetMapping(value = \"/visits\", produces = MediaType.APPLICATION_JSON_VALUE)\n    public @ResponseBody VisitsStatsChartDTO getVisitsChart() {\n        VisitsStatsChartDTO chart = statisticsService.getFullVisitsStatsChartData();\n        return chart;\n    }\n\n    @PostMapping(value = \"/visits\", produces = MediaType.APPLICATION_JSON_VALUE)\n    public @ResponseBody VisitsStatsChartDTO getVisitsChartByPeriodAndPostsIdList(\n            @RequestParam @DateTimeFormat(pattern=\"dd-MM-yyyy\") Date start,\n            @RequestParam @DateTimeFormat(pattern=\"dd-MM-yyyy\") Date end,\n            @RequestBody PostsIdListDTO postsDto)\n    {\n        VisitsStatsChartDTO chart = statisticsService.getChartDataByPeriodAndPostsList(start, end, postsDto.getIds());\n        return chart;\n    }\n\n}\n", "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/admin/controllers/NotificatorController.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["NotificatorController"], "AN": ["notificator", "postService"], "SCS_VariableDeclarator": ["notificator", "postService", "post"], "MN": ["sendTelegramAnnounce"], "PN": ["postId"], "SCS_MemberReference": ["APPLICATION_JSON_VALUE", "postId", "PUBLISHED", "post", "e"], "SCS_VariableDeclaration": ["Post"], "SCS_ClassReference": ["postService", "post", null, "notificator", "log", "e"], "SCS_MethodInvocation": ["getPost", "getPostStatus", "equals", "announcePost", "error", "getMessage"], "CO": ["/**\n * Created by bvn13 on 22.12.2017.\n */"], "CODE": "package com.raysmond.blog.admin.controllers;\n\nimport com.raysmond.blog.models.Post;\nimport com.raysmond.blog.models.dto.PostAnnouncementDTO;\nimport com.raysmond.blog.models.support.PostStatus;\nimport com.raysmond.blog.notificators.Notificator;\nimport com.raysmond.blog.services.PostService;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.MediaType;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.ResponseBody;\nimport org.telegram.telegrambots.meta.exceptions.TelegramApiException;\n\n/**\n * Created by bvn13 on 22.12.2017.\n */\n@Slf4j\n@Controller\n@RequestMapping(value = \"/admin/notify\")\npublic class NotificatorController {\n\n    @Autowired\n    private Notificator notificator;\n\n\n    @Autowired\n    private PostService postService;\n\n\n\n    @PostMapping(value = \"/{postId:[0-9]+}/telegram\", produces = MediaType.APPLICATION_JSON_VALUE)\n    public @ResponseBody PostAnnouncementDTO sendTelegramAnnounce(@PathVariable Long postId) {\n\n        Post post = postService.getPost(postId);\n        if (post.getPostStatus().equals(PostStatus.PUBLISHED)) {\n            try {\n                notificator.announcePost(post);\n                return new PostAnnouncementDTO(false);\n            } catch (Exception e) {\n                log.error(\"Error\", e);\n                return new PostAnnouncementDTO(true, \"\"+e.getMessage());\n            }\n        } else {\n            return new PostAnnouncementDTO(true, \"Post is not published!\");\n        }\n    }\n\n}\n", "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/admin/controllers/SeoRobotAgentController.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["SeoRobotAgentController"], "AN": ["seoRobotAgentRepository"], "SCS_VariableDeclarator": ["seoRobotAgentRepository", "ua", "ua"], "MN": ["getSeoRobotsAgents", "editSeoRobotAgent", "saveSeoRobotAgent", "deleteSeoRobotAgent"], "PN": ["model", "recordId", "model", "recordId", "form", "errors", "recordId"], "SCS_ClassReference": ["model", null, "model", null, "Assert", "model", "DTOUtil", "SeoRobotAgentForm", "recordId", null, "Assert", "DTOUtil", null, null], "SCS_MethodInvocation": ["addAttribute", "findAll", "addAttribute", "findOne", "notNull", "addAttribute", "map", "equals", "findOne", "notNull", "mapTo", "save", "delete"], "SCS_MemberReference": ["seoRobotAgentRepository", "seoRobotAgentRepository", "recordId", "ua", "ua", "ua", "ua", "seoRobotAgentRepository", "recordId", "ua", "form", "ua", "seoRobotAgentRepository", "ua", "seoRobotAgentRepository", "recordId"], "SCS_VariableDeclaration": ["SeoRobotAgent", "SeoRobotAgent"], "CO": [], "CODE": "package com.raysmond.blog.admin.controllers;\n\nimport com.raysmond.blog.forms.SeoRobotAgentForm;\nimport com.raysmond.blog.models.SeoRobotAgent;\nimport com.raysmond.blog.repositories.SeoRobotAgentRepository;\nimport com.raysmond.blog.utils.DTOUtil;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.util.Assert;\nimport org.springframework.validation.Errors;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\nimport javax.validation.Valid;\n\n@Controller\n@RequestMapping(value = \"/admin/robotsAgents\")\npublic class SeoRobotAgentController {\n\n    @Autowired\n    private SeoRobotAgentRepository seoRobotAgentRepository;\n\n    @GetMapping()\n    public String getSeoRobotsAgents(Model model) {\n        model.addAttribute(\"records\", this.seoRobotAgentRepository.findAll());\n        model.addAttribute(\"form\", new SeoRobotAgentForm());\n        return \"admin/robotsAgents/index\";\n    }\n\n\n    @GetMapping(value = \"/{recordId:[\\\\d]+}/edit\")\n    public String editSeoRobotAgent(@PathVariable Long recordId, Model model) {\n\n        SeoRobotAgent ua = this.seoRobotAgentRepository.findOne(recordId);\n\n        Assert.notNull(ua);\n\n        model.addAttribute(\"form\", DTOUtil.map(ua, SeoRobotAgentForm.class));\n\n        return \"admin/robotsAgents/edit\";\n    }\n\n    @PostMapping(value = \"/{recordId:[\\\\d]+}/edit\")\n    public String saveSeoRobotAgent(@PathVariable Long recordId, @Valid SeoRobotAgentForm form, Errors errors) {\n        SeoRobotAgent ua = null;\n        if (recordId.equals(0L)) {\n            ua = new SeoRobotAgent();\n        } else {\n            ua = this.seoRobotAgentRepository.findOne(recordId);\n        }\n        Assert.notNull(ua);\n\n        DTOUtil.mapTo(form, ua);\n\n        this.seoRobotAgentRepository.save(ua);\n\n        return \"redirect:/admin/robotsAgents\";\n    }\n\n\n    @PostMapping(value = \"/{recordId:[\\\\d]+}/delete\")\n    public String deleteSeoRobotAgent(@PathVariable Long recordId) {\n        this.seoRobotAgentRepository.delete(recordId);\n        return \"redirect:/admin/robotsAgents\";\n    }\n\n}\n", "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/admin/controllers/UserController.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["UserController"], "AN": ["userService", "userRepository"], "SCS_VariableDeclarator": ["userService", "userRepository", "user"], "SCS_ConstructorDeclaration": ["UserController"], "SCS_MemberReference": ["userService", "userService", "userRepository", "userRepository", "POST", "userId", "user", "user", "ra", "ra"], "MN": ["profile", "update"], "PN": ["model", "userId", "userForm", "errors", "ra"], "SCS_ClassReference": ["model", "userService", "userRepository", "Assert", "errors", "userForm", null, "userService", "userForm", "userForm", "MessageHelper", "MessageHelper"], "SCS_MethodInvocation": ["addAttribute", "currentUser", "findOne", "notNull", "hasErrors", "getNewPassword", "isEmpty", "changePassword", "getPassword", "getNewPassword", "addErrorAttribute", "addSuccessAttribute"], "SCS_VariableDeclaration": ["User"], "CO": ["/**\n * @author Raysmond<i@raysmond.com>.\n */", "// do something"], "CODE": "package com.raysmond.blog.admin.controllers;\n\nimport com.raysmond.blog.forms.UserForm;\nimport com.raysmond.blog.models.User;\nimport com.raysmond.blog.repositories.UserRepository;\nimport com.raysmond.blog.services.UserService;\nimport com.raysmond.blog.support.web.MessageHelper;\nimport com.raysmond.blog.utils.DTOUtil;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.util.Assert;\nimport org.springframework.validation.Errors;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.servlet.mvc.support.RedirectAttributes;\n\nimport javax.validation.Valid;\n\nimport static org.springframework.web.bind.annotation.RequestMethod.*;\n\n/**\n * @author Raysmond<i@raysmond.com>.\n */\n@Controller(\"adminUserController\")\n@RequestMapping(\"admin/users\")\npublic class UserController {\n\n    private UserService userService;\n    private UserRepository userRepository;\n\n    @Autowired\n    public UserController(UserService userService, UserRepository userRepository){\n        this.userService = userService;\n        this.userRepository = userRepository;\n    }\n\n    @RequestMapping(\"profile\")\n    public String profile(Model model){\n        model.addAttribute(\"user\", userService.currentUser());\n\n        return \"admin/users/profile\";\n    }\n\n    @RequestMapping(value = \"{userId:[0-9]+}\", method = POST)\n    public String update(@PathVariable Long userId, @Valid UserForm userForm, Errors errors, RedirectAttributes ra){\n        User user = userRepository.findOne(userId);\n        Assert.notNull(user);\n\n        if (errors.hasErrors()){\n            // do something\n\n            return \"admin/users/profile\";\n        }\n\n        if (!userForm.getNewPassword().isEmpty()){\n\n            if (!userService.changePassword(user, userForm.getPassword(), userForm.getNewPassword()))\n                MessageHelper.addErrorAttribute(ra, \"Change password failed.\");\n            else\n                MessageHelper.addSuccessAttribute(ra, \"Change password successfully.\");\n\n        }\n\n        return \"redirect:profile\";\n    }\n}\n", "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/notificators/Notificator.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["Notificator"], "AN": ["logger", "appSetting", "telegramBot"], "SCS_VariableDeclarator": ["logger", "appSetting", "telegramBot", "postUrl", "message"], "SCS_ClassReference": ["LoggerFactory", "Notificator", "post", null, "appSetting", "post", null, "post", "post", "String", "post", "post", "post", "telegramBot", "logger", "String"], "SCS_MethodInvocation": ["getLogger", "getAnnouncement", "isEmpty", "getMainUriStripped", "getPermalink", "isEmpty", "getId", "getPermalink", "format", "getTitle", "getAnnouncement", "getAnnouncement", "sendMessageToChannel", "error", "format"], "MN": ["announcePost"], "PN": ["post"], "SCS_MemberReference": ["post", "postUrl", "postUrl", "message", "message", "e", "e"], "SCS_VariableDeclaration": ["String", "String"], "CO": ["/**\n * Created by bvn13 on 21.12.2017.\n */"], "CODE": "package com.raysmond.blog.notificators;\n\nimport com.raysmond.blog.models.Post;\nimport com.raysmond.blog.notificators.telegram.TelegramBotManager;\nimport com.raysmond.blog.services.AppSetting;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\nimport org.telegram.telegrambots.meta.exceptions.TelegramApiException;\n\n/**\n * Created by bvn13 on 21.12.2017.\n */\n@Component\npublic class Notificator {\n\n    private static final Logger logger = LoggerFactory.getLogger(Notificator.class);\n\n    @Autowired\n    private AppSetting appSetting;\n\n    @Autowired\n    private TelegramBotManager telegramBot;\n\n\n    public void announcePost(Post post) throws Exception {\n        if (post == null || post.getAnnouncement().isEmpty()) {\n            throw new IllegalArgumentException(\"Nothing to announce\");\n        }\n        String postUrl = appSetting.getMainUriStripped()+\"/posts/\"+(post.getPermalink().isEmpty() ? post.getId() : post.getPermalink());\n        String message = String.format(\n                \"*%s*\\r\\n\\n\" +\n                \"[%s](%s)\\r\\n\\r\\n\"+\n                \"%s\\r\\n\\r\\n\" +\n                \"\",\n                post.getTitle(),\n                postUrl, postUrl,\n                post.getAnnouncement() != null ? post.getAnnouncement() : \"\"\n        );\n        try {\n            telegramBot.sendMessageToChannel(message);\n        } catch (Exception e) {\n            logger.error(String.format(\"Could not send message <%s>\", message), e);\n            throw e;\n        }\n    }\n\n}\n", "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/notificators/telegram/TelegramBotManager.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["TelegramBotManager", "TelegramBot"], "AN": ["appSetting", "logger", "manager", "name", "token", "masterName", "masterChatId", "settings", "bot", "isActive"], "SCS_VariableDeclarator": ["appSetting", "logger", "manager", "name", "token", "masterName", "masterChatId", "chatId", "sm", "sm", "settings", "bot", "isActive", "botsApi", "botOptions"], "SCS_ClassReference": ["LoggerFactory", "TelegramBot", "Integer", "update", "update", null, "logger", "update", null, null, "update", null, "update", null, "update", null, null, null, "update", null, null, null, "chatId", null, "chatId", null, null, null, null, "sm", "sm", "sm", "sm", null, "sm", "sm", "sm", "sm", null, null, "log", null, "log", "settings", "ApiContextInitializer", "settings", "Authenticator", "settings", "settings", null, "ApiContext", "DefaultBotOptions", "botOptions", "settings", "botOptions", "settings", "botOptions", "", "settings", "settings", "settings", "appSetting", "settings", "settings", "settings", "appSetting", "botsApi", "log", "appSetting", "appSetting", null, "", "log", "DefaultBotOptions.ProxyType", "settings", "log", "settings", "StringUtils", "DefaultBotOptions.ProxyType", "bot", "settings", "bot"], "SCS_MethodInvocation": ["getLogger", "parseInt", "hasMessage", "getMessage", "hasText", "debug", "getMessage", "getChatId", "toString", "getMessage", "getText", "getMessage", "getChatId", "getMessage", "getChat", "getUserName", "equals", "getMessage", "getText", "startsWith", "setTelegramMasterChatId", "toString", "_send", "toString", "_send", "_send", "send", "send", "setChatId", "enableMarkdown", "enableWebPagePreview", "setText", "execute", "setChatId", "enableMarkdown", "enableWebPagePreview", "setText", "execute", "send", "error", "send", "error", "isActive", "init", "isProxySet", "setDefault", "getProxyUsername", "getProxyPassword", "toCharArray", "getInstance", "setProxyHost", "getProxyHost", "setProxyPort", "getProxyPort", "setProxyType", "detectProxyType", "getBotName", "getBotToken", "getMasterName", "getTelegramMasterChatId", "getBotName", "getBotToken", "getMasterName", "getTelegramMasterChatId", "registerBot", "error", "getTelegramMasterChatId", "getTelegramMasterChatId", "isEmpty", "sendMessageToMaster", "error", "valueOf", "getProxyType", "error", "getProxyType", "arrayToCommaDelimitedString", "values", "sendMessageToChannel", "getBotChannel", "sendMessageToMaster"], "MN": ["creatorId", "onUpdateReceived", "getBotUsername", "getBotToken", "sendMessageToChannel", "sendMessageToMaster", "send", "send", "_send", "_send", "startBot", "getPasswordAuthentication", "detectProxyType", "stopBot", "sendMessageToChannel", "sendMessageToMaster"], "PN": ["update", "channelName", "message", "message", "message", "chatName", "message", "chatId", "message", "chatName", "message", "chatId", "message", "message"], "SCS_MemberReference": ["masterChatId", "token", "name", "manager", "manager", "name", "name", "token", "token", "masterName", "masterName", "masterChatId", "masterChatId", "token", "name", "options", "manager", "manager", "name", "name", "token", "token", "masterName", "masterName", "masterChatId", "masterChatId", "masterName", "manager", "appSetting", "chatId", "chatId", "chatId", "name", "token", "message", "channelName", "message", "masterChatId", "chatName", "message", "sm", "chatId", "message", "sm", "message", "chatName", "e", "message", "chatId", "e", "settings", "settings", "bot", "botOptions", "bot", "bot", "isActive", "e", "isActive", "isActive", "e", "NO_PROXY", "isActive", "isActive", "message", "isActive", "message"], "SCS_ConstructorDeclaration": ["TelegramBot", "TelegramBot", "TelegramBotManager"], "SCS_VariableDeclaration": ["Long", "SendMessage", "SendMessage", "TelegramBotsApi", "DefaultBotOptions"], "CO": ["/**\n * Created by bvn13 on 21.12.2017.\n */", "// https://core.telegram.org/bots/api#sendmessage", "// We check if the update has a message and the message has text", "// Create the Authenticator that will return auth's parameters for proxy authentication", "// Set up Http proxy", "// Select proxy type: [HTTP|SOCKS4|SOCKS5] (default: NO_PROXY)", "//            try {", "//                sendMessageToMaster(\"i'm shutting down\");", "//            } catch (TelegramApiException e) {", "//                e.printStackTrace();", "//            }"], "CODE": "package com.raysmond.blog.notificators.telegram;\n\nimport com.raysmond.blog.services.AppSetting;\nimport com.raysmond.blog.services.TelegramBotSettings;\nimport lombok.extern.slf4j.Slf4j;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\nimport org.springframework.util.StringUtils;\nimport org.telegram.abilitybots.api.bot.AbilityBot;\nimport org.telegram.telegrambots.ApiContextInitializer;\nimport org.telegram.telegrambots.bots.DefaultBotOptions;\nimport org.telegram.telegrambots.meta.ApiContext;\nimport org.telegram.telegrambots.meta.TelegramBotsApi;\nimport org.telegram.telegrambots.meta.api.methods.send.SendMessage;\nimport org.telegram.telegrambots.meta.api.objects.Update;\nimport org.telegram.telegrambots.meta.exceptions.TelegramApiException;\n\nimport javax.annotation.PostConstruct;\nimport javax.annotation.PreDestroy;\nimport java.net.Authenticator;\nimport java.net.PasswordAuthentication;\n\n/**\n * Created by bvn13 on 21.12.2017.\n */\n@Slf4j\n@Component\npublic class TelegramBotManager {\n\n    @Autowired\n    private AppSetting appSetting;\n\n    // https://core.telegram.org/bots/api#sendmessage\n\n    public static class TelegramBot extends AbilityBot {\n\n        private static Logger logger = LoggerFactory.getLogger(TelegramBot.class);\n\n        private TelegramBotManager manager;\n        private String name;\n        private String token;\n        private String masterName;\n        private String masterChatId;\n\n\n        @Override\n        public int creatorId() {\n            return Integer.parseInt(masterChatId);\n        }\n\n        public TelegramBot(TelegramBotManager manager, String name, String token, String masterName, String masterChatId) {\n            super(token, name);\n            this.manager = manager;\n            this.name = name;\n            this.token = token;\n            this.masterName = masterName;\n            this.masterChatId = masterChatId;\n        }\n\n        public TelegramBot(TelegramBotManager manager, String name, String token, String masterName, String masterChatId, DefaultBotOptions options) {\n            super(token, name, options);\n            this.manager = manager;\n            this.name = name;\n            this.token = token;\n            this.masterName = masterName;\n            this.masterChatId = masterChatId;\n        }\n\n\n        @Override\n        public void onUpdateReceived(Update update) {\n            // We check if the update has a message and the message has text\n            if (update.hasMessage() && update.getMessage().hasText()) {\n                logger.debug(\"CHAT ID: \"+update.getMessage().getChatId().toString()+\" / MESSAGE: \"+update.getMessage().getText());\n\n                Long chatId = update.getMessage().getChatId();\n\n                if (update.getMessage().getChat().getUserName().equals(masterName)) {\n                    if (update.getMessage().getText().startsWith(\"/master\")) {\n                        this.manager.appSetting.setTelegramMasterChatId(chatId.toString());\n                        this._send(\"Master chat ID changed to: \"+chatId.toString(), chatId);\n                    } else {\n                        this._send(\"Hello, master!\", chatId);\n                    }\n                } else {\n                    this._send(\"You are not allowed to touch me!\", chatId);\n                }\n            }\n        }\n\n\n        @Override\n        public String getBotUsername() {\n            return this.name;\n        }\n\n        @Override\n        public String getBotToken() {\n            return this.token;\n        }\n\n        public void sendMessageToChannel(String channelName, String message) throws TelegramApiException {\n            this.send(message, \"@\" + channelName);\n        }\n\n        public void sendMessageToMaster(String message) throws TelegramApiException {\n            this.send(message, this.masterChatId);\n        }\n\n        public void send(String message, String chatName) throws TelegramApiException {\n            SendMessage sm = new SendMessage();\n            sm.setChatId(chatName);\n            sm.enableMarkdown(true);\n            sm.enableWebPagePreview();\n            sm.setText(message);\n            this.execute(sm);\n        }\n        public void send(String message, Long chatId) throws TelegramApiException {\n            SendMessage sm = new SendMessage();\n            sm.setChatId(chatId);\n            sm.enableMarkdown(true);\n            sm.enableWebPagePreview();\n            sm.setText(message);\n            this.execute(sm);\n        }\n\n        private void _send(String message, String chatName) {\n            try {\n                this.send(message, chatName);\n            } catch (TelegramApiException e) {\n                log.error(\"Error\", e);\n            }\n        }\n        private void _send(String message, Long chatId) {\n            try {\n                this.send(message, chatId);\n            } catch (TelegramApiException e) {\n                log.error(\"Error\", e);\n            }\n        }\n    }\n\n    private TelegramBotSettings settings;\n    private TelegramBot bot;\n\n    private Boolean isActive = false;\n\n    @Autowired\n    public TelegramBotManager(TelegramBotSettings settings) {\n        this.settings = settings;\n    }\n\n\n    @PostConstruct\n    public void startBot() {\n        if (settings.isActive()) {\n\n            ApiContextInitializer.init();\n            TelegramBotsApi botsApi = new TelegramBotsApi();\n\n            if (settings.isProxySet()) {\n\n                // Create the Authenticator that will return auth's parameters for proxy authentication\n                Authenticator.setDefault(new Authenticator() {\n                    @Override\n                    protected PasswordAuthentication getPasswordAuthentication() {\n                        return new PasswordAuthentication(settings.getProxyUsername(), settings.getProxyPassword().toCharArray());\n                    }\n                });\n\n                // Set up Http proxy\n                DefaultBotOptions botOptions = ApiContext.getInstance(DefaultBotOptions.class);\n\n                botOptions.setProxyHost(settings.getProxyHost());\n                botOptions.setProxyPort(settings.getProxyPort());\n                // Select proxy type: [HTTP|SOCKS4|SOCKS5] (default: NO_PROXY)\n                botOptions.setProxyType(detectProxyType());\n\n                this.bot = new TelegramBot(this,\n                        settings.getBotName(),\n                        settings.getBotToken(),\n                        settings.getMasterName(),\n                        appSetting.getTelegramMasterChatId(),\n                        botOptions\n                );\n            } else {\n\n                this.bot = new TelegramBot(this,\n                        settings.getBotName(),\n                        settings.getBotToken(),\n                        settings.getMasterName(),\n                        appSetting.getTelegramMasterChatId()\n                );\n            }\n\n            try {\n                botsApi.registerBot(this.bot);\n\n                this.isActive = true;\n            } catch (TelegramApiException e) {\n                log.error(\"Error\", e);\n            }\n\n            this.isActive = true;\n\n            try {\n                if (isActive && appSetting.getTelegramMasterChatId() != null && !appSetting.getTelegramMasterChatId().isEmpty()) {\n                    sendMessageToMaster(\"i'm online\");\n                }\n            } catch (TelegramApiException e) {\n                log.error(\"Error\", e);\n            }\n        }\n    }\n\n    private DefaultBotOptions.ProxyType detectProxyType() {\n        try {\n            return DefaultBotOptions.ProxyType.valueOf(settings.getProxyType());\n        } catch (IllegalArgumentException e) {\n            log.error(\"Unknown proxy type \"+settings.getProxyType()+\". Must be one of: \"+ StringUtils.arrayToCommaDelimitedString(DefaultBotOptions.ProxyType.values()));\n            return DefaultBotOptions.ProxyType.NO_PROXY;\n        }\n    }\n\n    @PreDestroy\n    public void stopBot() {\n        if (isActive) {\n//            try {\n//                sendMessageToMaster(\"i'm shutting down\");\n//            } catch (TelegramApiException e) {\n//                e.printStackTrace();\n//            }\n        }\n    }\n\n\n    public void sendMessageToChannel(String message) throws TelegramApiException {\n        if (isActive) {\n            bot.sendMessageToChannel(settings.getBotChannel(), message);\n        }\n    }\n\n    public void sendMessageToMaster(String message) throws TelegramApiException {\n        if (isActive) {\n            bot.sendMessageToMaster(message);\n        }\n    }\n\n}\n", "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/controllers/StoredFileController.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["StoredFileController"], "AN": ["userService", "storageService"], "SCS_VariableDeclarator": ["userService", "storageService", "file", "content", "header"], "MN": ["getFileById"], "PN": ["fileName", "response"], "SCS_ClassReference": ["FileNotFoundException", null, "response", "String", null, "log", null, "response", "String", "file", "file", "response", "String", "file", "header", "HttpContentTypeSerializer", "file", "header", "file", "header", "file"], "SCS_VariableDeclaration": ["StoredFile", "byte", "HttpHeaders"], "SCS_MemberReference": ["storageService", "fileName", "file", "fileName", "content", "storageService", "file", "e", "userService", "content", "header"], "SCS_MethodInvocation": ["getFileByName", "sendError", "format", "getFileContent", "error", "isCurrentUserAdmin", "sendError", "format", "getName", "getPath", "sendError", "format", "getName", "set", "getContentType", "getName", "set", "getName", "setContentLength", "getSize"], "CO": ["/*, produces = APPLICATION_OCTET_STREAM_VALUE*/", "//header.setContentType(APPLICATION_OCTET_STREAM);"], "CODE": "package com.raysmond.blog.controllers;\n\nimport com.raysmond.blog.models.StoredFile;\nimport com.raysmond.blog.services.FileStorageService;\nimport com.raysmond.blog.services.UserService;\nimport com.raysmond.blog.support.web.HttpContentTypeSerializer;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpEntity;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\n\n@Slf4j\n@Controller\n@RequestMapping(\"/files\")\npublic class StoredFileController {\n\n    @Autowired\n    private UserService userService;\n\n    @Autowired\n    private FileStorageService storageService;\n\n    @GetMapping(value = \"/{fileName:.+}\"/*, produces = APPLICATION_OCTET_STREAM_VALUE*/)\n    @ExceptionHandler(value = FileNotFoundException.class)\n    public @ResponseBody\n    HttpEntity<byte[]> getFileById(@PathVariable String fileName, final HttpServletResponse response) throws IOException {\n\n        StoredFile file = this.storageService.getFileByName(fileName);\n        if (file == null) {\n            response.sendError(404, String.format(\"File %s not found\", fileName));\n            return null;\n        }\n        byte[] content;\n        try {\n            content = this.storageService.getFileContent(file);\n        } catch (IOException e) {\n            log.error(\"Error\", e);\n            if (this.userService.isCurrentUserAdmin()) {\n                response.sendError(404, String.format(\"File %s (%s) not found\", file.getName(), file.getPath()));\n            } else {\n                response.sendError(404, String.format(\"File %s not found\", file.getName()));\n            }\n            return null;\n        }\n\n        HttpHeaders header = new HttpHeaders();\n        //header.setContentType(APPLICATION_OCTET_STREAM);\n        header.set(\"Content-Type\", HttpContentTypeSerializer.getContentType(file.getName()));\n        header.set(\"Content-Disposition\", \"inline; filename=\" + file.getName());\n        header.setContentLength(file.getSize());\n\n        return new HttpEntity<byte[]>(content, header);\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/controllers/HomeController.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["HomeController"], "AN": ["logger", "postService", "appSetting"], "SCS_VariableDeclarator": ["logger", "postService", "appSetting", "posts", "post"], "SCS_ClassReference": ["LoggerFactory", "HomeController", "postService", "appSetting", "model", "posts", "model", "model", "postService", "logger", "postService", "model"], "SCS_MethodInvocation": ["getLogger", "getAllPublishedPostsByPage", "getPageSize", "addAttribute", "getTotalPages", "addAttribute", "addAttribute", "getPublishedPostByPermalink", "debug", "createAboutPage", "addAttribute"], "MN": ["index", "about"], "PN": ["page", "model", "model"], "SCS_MemberReference": ["GET", "page", "page", "page", "page", "posts", "page", "GET", "post", "ABOUT_PAGE_PERMALINK", "ABOUT_PAGE_PERMALINK", "post", "post", "ABOUT_PAGE_PERMALINK", "post"], "SCS_VariableDeclaration": ["Page", "Post"], "CO": [], "CODE": "package com.raysmond.blog.controllers;\n\nimport com.raysmond.blog.Constants;\nimport com.raysmond.blog.error.NotFoundException;\nimport com.raysmond.blog.models.Post;\nimport com.raysmond.blog.services.AppSetting;\nimport com.raysmond.blog.services.PostService;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.*;\n\nimport static org.springframework.web.bind.annotation.RequestMethod.*;\n\n@Controller\npublic class HomeController {\n\n    private static final Logger logger = LoggerFactory.getLogger(HomeController.class);\n\n    @Autowired\n    private PostService postService;\n\n    @Autowired\n    private AppSetting appSetting;\n\n    @RequestMapping(value = \"\", method = GET)\n    public String index(@RequestParam(defaultValue = \"1\") int page, Model model) {\n        page = page < 1 ? 0 : page - 1;\n        Page<Post> posts = postService.getAllPublishedPostsByPage(page, appSetting.getPageSize());\n\n        model.addAttribute(\"totalPages\", posts.getTotalPages());\n        model.addAttribute(\"posts\", posts);\n        model.addAttribute(\"page\", page + 1);\n\n        return \"home/index\";\n    }\n\n    @RequestMapping(value = \"about\", method = GET)\n    public String about(Model model) {\n\n        Post post = null;\n        try {\n            post = postService.getPublishedPostByPermalink(Constants.ABOUT_PAGE_PERMALINK);\n        } catch (NotFoundException nfe) {\n            logger.debug(\"Get post with permalink \" + Constants.ABOUT_PAGE_PERMALINK);\n            post = postService.createAboutPage();\n        }\n\n        if (post == null) {\n            throw new NotFoundException(\"Post with permalink \" + Constants.ABOUT_PAGE_PERMALINK + \" is not found\");\n        }\n\n        model.addAttribute(\"about\", post);\n        return \"home/about\";\n    }\n\n}\n", "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/controllers/PostController.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["PostController"], "AN": ["logger", "postService", "visitService", "likeService", "requestProcessorService"], "SCS_VariableDeclarator": ["logger", "postService", "visitService", "likeService", "requestProcessorService", "post", "seoData"], "SCS_ClassReference": ["LoggerFactory", "PostController", "model", "postService", null, "logger", "String", null, null, null, null, "post", null, "post", null, "post", "seoData", "post", "model", "model", null, "model", null, "model", "post", "model"], "SCS_MethodInvocation": ["getLogger", "addAttribute", "getArchivePosts", "findPostByPermalink", "debug", "format", "getRealIp", "saveVisit", "getRealIp", "getUserAgent", "setVisitsCount", "getUniqueVisitsCount", "setSympathyCount", "getTotalLikesByPost", "getSeoData", "setPost", "getSeoData", "addAttribute", "addAttribute", "getPostTags", "addAttribute", "getSeoKeywordsAsString", "addAttribute", "getSeoDescription", "addAttribute"], "MN": ["archive", "show"], "PN": ["model", "permalink", "model", "request"], "SCS_MemberReference": ["GET", "GET", "postService", "permalink", "permalink", "requestProcessorService", "request", "visitService", "post", "requestProcessorService", "request", "requestProcessorService", "request", "visitService", "post", "likeService", "post", "seoData", "post", "seoData", "post", "postService", "post", "postService", "post", "seoData"], "SCS_VariableDeclaration": ["Post", "SeoPostData"], "CO": ["/**\n * @author Raysmond<i@raysmond.com>\n */"], "CODE": "package com.raysmond.blog.controllers;\n\nimport com.raysmond.blog.Constants;\nimport com.raysmond.blog.error.NotFoundException;\nimport com.raysmond.blog.models.Post;\nimport com.raysmond.blog.models.SeoPostData;\nimport com.raysmond.blog.services.*;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\nimport javax.servlet.http.HttpServletRequest;\nimport java.util.List;\nimport java.util.Set;\n\nimport static org.springframework.web.bind.annotation.RequestMethod.*;\n\n\n/**\n * @author Raysmond<i@raysmond.com>\n */\n@Controller\n@RequestMapping(\"posts\")\npublic class PostController {\n\n    Logger logger = LoggerFactory.getLogger(PostController.class);\n\n    @Autowired\n    private PostService postService;\n\n    @Autowired\n    private VisitService visitService;\n\n    @Autowired\n    private LikeService likeService;\n\n    @Autowired\n    private RequestProcessorService requestProcessorService;\n\n\n    @RequestMapping(value = \"archive\", method = GET)\n    public String archive(Model model){\n        model.addAttribute(\"posts\", postService.getArchivePosts());\n\n        return \"posts/archive\";\n    }\n\n    @RequestMapping(value = \"{permalink}\", method = GET)\n    public String show(@PathVariable String permalink, Model model, HttpServletRequest request){\n        Post post = this.postService.findPostByPermalink(permalink);\n\n        logger.debug(String.format(\"ACCESS %s from IP: %s\", permalink, this.requestProcessorService.getRealIp(request)));\n\n        this.visitService.saveVisit(post, this.requestProcessorService.getRealIp(request), this.requestProcessorService.getUserAgent(request));\n        post.setVisitsCount(this.visitService.getUniqueVisitsCount(post));\n        post.setSympathyCount(this.likeService.getTotalLikesByPost(post));\n\n        SeoPostData seoData = null;\n        if (post.getSeoData() == null) {\n            seoData = new SeoPostData();\n            seoData.setPost(post);\n        } else {\n            seoData = post.getSeoData();\n        }\n\n        model.addAttribute(\"post\", post);\n        model.addAttribute(\"tags\", this.postService.getPostTags(post));\n        model.addAttribute(\"seoKeywords\", this.postService.getSeoKeywordsAsString(post));\n        model.addAttribute(\"seoDescription\", post.getSeoDescription());\n        model.addAttribute(\"seoData\", seoData);\n\n        return \"posts/show\";\n    }\n\n}\n", "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/controllers/TagController.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["TagController"], "AN": ["tagService", "postService", "appSetting"], "SCS_VariableDeclarator": ["tagService", "postService", "appSetting", "tag", "posts"], "MN": ["index", "showTag"], "PN": ["model", "tagName", "page", "model"], "SCS_MemberReference": ["GET", "GET", "tagName", "tag", "tagName", "page", "page", "page", "tagName", "page", "tag", "posts", "page"], "SCS_ClassReference": ["model", "postService", "tagService", "postService", "appSetting", "model", "model", "model", "model", "posts"], "SCS_MethodInvocation": ["addAttribute", "countPostsByTags", "getTag", "findPostsByTag", "getPageSize", "addAttribute", "addAttribute", "addAttribute", "addAttribute", "getTotalPages"], "SCS_VariableDeclaration": ["Tag", "Page"], "CO": ["/**\n * @author Raysmond<i@raysmond.com>.\n */"], "CODE": "package com.raysmond.blog.controllers;\n\nimport com.raysmond.blog.error.NotFoundException;\nimport com.raysmond.blog.models.Post;\nimport com.raysmond.blog.models.Tag;\nimport com.raysmond.blog.services.AppSetting;\nimport com.raysmond.blog.services.PostService;\nimport com.raysmond.blog.services.TagService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport static org.springframework.web.bind.annotation.RequestMethod.*;\nimport org.springframework.web.bind.annotation.RequestParam;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * @author Raysmond<i@raysmond.com>.\n */\n@Controller\n@RequestMapping(\"tags\")\npublic class TagController {\n    @Autowired\n    private TagService tagService;\n\n    @Autowired\n    private PostService postService;\n\n    @Autowired\n    private AppSetting appSetting;\n\n    @RequestMapping(value = \"\", method = GET)\n    public String index(Model model){\n        model.addAttribute(\"tags\", postService.countPostsByTags());\n        return \"tags/index\";\n    }\n\n    @RequestMapping(value = \"{tagName}\", method = GET)\n    public String showTag(@PathVariable String tagName, @RequestParam(defaultValue = \"1\") int page, Model model) {\n        Tag tag = tagService.getTag(tagName);\n\n        if (tag == null) {\n            throw new NotFoundException(\"Tag \" + tagName + \" is not found.\");\n        }\n\n        page = page < 1 ? 0 : page - 1;\n        Page<Post> posts = postService.findPostsByTag(tagName, page, appSetting.getPageSize());\n\n        model.addAttribute(\"tag\", tag);\n        model.addAttribute(\"posts\", posts);\n        model.addAttribute(\"page\", page + 1);\n        model.addAttribute(\"totalPages\", posts.getTotalPages());\n\n        return \"tags/show\";\n    }\n}\n", "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/controllers/SympathyController.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["SympathyController", "SympathyRequestData"], "AN": ["appSetting", "postService", "likeService", "userService", "requestProcessorService", "postId"], "SCS_VariableDeclarator": ["appSetting", "postService", "likeService", "userService", "requestProcessorService", "postId", "post", "viewHelper", "result", "post", "viewHelper", "result"], "MN": ["likeIt", "dislikeIt"], "PN": ["data", "request", "data", "request"], "SCS_VariableDeclaration": ["Post", "ViewHelper", "LikeForm", "Post", "ViewHelper", "LikeForm"], "SCS_MemberReference": ["postService", "likeService", "post", "requestProcessorService", "request", "appSetting", "likeService", "post", "result", "postService", "likeService", "post", "requestProcessorService", "request", "appSetting", "likeService", "post", "result"], "SCS_ClassReference": [null, "data", null, null, "result", "viewHelper", null, null, "data", null, null, "result", "viewHelper", null], "SCS_MethodInvocation": ["findPostByPermalink", "getPostId", "likePost", "getRealIp", "setSympathy", "formatNumberByThousands", "getTotalLikesByPost", "findPostByPermalink", "getPostId", "dislikePost", "getRealIp", "setSympathy", "formatNumberByThousands", "getTotalLikesByPost"], "CO": [], "CODE": "package com.raysmond.blog.controllers;\n\nimport com.raysmond.blog.forms.LikeForm;\nimport com.raysmond.blog.models.Post;\nimport com.raysmond.blog.services.*;\nimport com.raysmond.blog.support.web.ViewHelper;\nimport lombok.Data;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.validation.constraints.NotNull;\n\n@Controller\n@RequestMapping(value = \"/sympathy\")\npublic class SympathyController {\n\n    @Autowired\n    private AppSetting appSetting;\n\n    @Autowired\n    private PostService postService;\n\n    @Autowired\n    private LikeService likeService;\n\n    @Autowired\n    private UserService userService;\n\n    @Autowired\n    private RequestProcessorService requestProcessorService;\n\n\n    @Data\n    public static class SympathyRequestData {\n        @NotNull\n        private String postId;\n    }\n\n\n    @PostMapping(value = \"/like\")\n    public @ResponseBody LikeForm likeIt(@RequestBody SympathyRequestData data, HttpServletRequest request) {\n        Post post = this.postService.findPostByPermalink(data.getPostId());\n        this.likeService.likePost(post, this.requestProcessorService.getRealIp(request));\n        ViewHelper viewHelper = new ViewHelper(this.appSetting);\n        LikeForm result = new LikeForm();\n        result.setSympathy(viewHelper.formatNumberByThousands(this.likeService.getTotalLikesByPost(post)));\n        return result;\n    }\n\n    @PostMapping(value = \"/dislike\")\n    public @ResponseBody LikeForm dislikeIt(@RequestBody SympathyRequestData data, HttpServletRequest request) {\n        Post post = this.postService.findPostByPermalink(data.getPostId());\n        this.likeService.dislikePost(post, this.requestProcessorService.getRealIp(request));\n        ViewHelper viewHelper = new ViewHelper(this.appSetting);\n        LikeForm result = new LikeForm();\n        result.setSympathy(viewHelper.formatNumberByThousands(this.likeService.getTotalLikesByPost(post)));\n        return result;\n    }\n\n\n\n}\n", "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/controllers/UserController.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["UserController", "Credentials"], "AN": ["username", "password", "authenticationManager"], "SCS_VariableDeclarator": ["username", "password", "authenticationManager", "token", "auth"], "MN": ["signin", "authenticate"], "PN": ["principal", "ra", "credentials", "request"], "SCS_MemberReference": ["GET", "principal", "token", "auth"], "SCS_VariableDeclaration": ["UsernamePasswordAuthenticationToken", "Authentication"], "SCS_ClassReference": ["credentials", "credentials", "authenticationManager", "SecurityContextHolder", null, "auth", "auth", "request"], "SCS_MethodInvocation": ["getUsername", "getPassword", "authenticate", "getContext", "setAuthentication", "isAuthenticated", "getPrincipal", "getSession"], "CO": ["/**\n * @author Raysmond<i@raysmond.com>\n */", "//@RequestMapping(value = \"authenticate\", method = RequestMethod.POST, consumes = MediaType.APPLICATION_FORM_URLENCODED_VALUE)"], "CODE": "package com.raysmond.blog.controllers;\n\nimport com.raysmond.blog.support.web.MessageHelper;\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.http.MediaType;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.authentication.BadCredentialsException;\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.security.core.userdetails.User;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.servlet.mvc.support.RedirectAttributes;\n\nimport javax.servlet.http.HttpServletRequest;\nimport java.security.Principal;\n\n/**\n * @author Raysmond<i@raysmond.com>\n */\n@Controller\npublic class UserController {\n\n    public static class Credentials {\n        @Getter\n        @Setter\n        private String username;\n\n        @Getter\n        @Setter\n        private String password;\n    }\n\n    @Autowired\n    @Qualifier(\"authenticationManager\")\n    private AuthenticationManager authenticationManager;\n\n    @RequestMapping(value = \"signin\", method = RequestMethod.GET)\n    public String signin(Principal principal, RedirectAttributes ra) {\n        return principal == null ? \"users/signin\" : \"redirect:/\";\n    }\n\n    //@RequestMapping(value = \"authenticate\", method = RequestMethod.POST, consumes = MediaType.APPLICATION_FORM_URLENCODED_VALUE)\n    public String authenticate(Credentials credentials, HttpServletRequest request) {\n        UsernamePasswordAuthenticationToken token = new UsernamePasswordAuthenticationToken(credentials.getUsername(), credentials.getPassword());\n\n        try {\n            Authentication auth = authenticationManager.authenticate(token);\n            SecurityContextHolder.getContext().setAuthentication(auth);\n            if (auth.isAuthenticated() && auth.getPrincipal() instanceof User) {\n                request.getSession();\n                return \"redirect:/admin\";\n            } else {\n                return \"users/signin?error=1\";\n            }\n        } catch (BadCredentialsException e) {\n            return \"users/signin?error=1\";\n        }\n    }\n}", "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/support/web/ViewHelper.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["ViewHelper"], "AN": ["logger", "DATE_FORMAT", "DATE_FORMAT_MONTH_DAY", "appSetting", "applicationEnv", "startTime"], "SCS_VariableDeclarator": ["logger", "DATE_FORMAT", "DATE_FORMAT_MONTH_DAY", "appSetting", "applicationEnv", "startTime", "thousands", "millions", "now"], "SCS_ClassReference": ["LoggerFactory", "ViewHelper", "System", "DATE_FORMAT", "DATE_FORMAT_MONTH_DAY", "appSetting", null, "String", "String", "String", null, "errors", "errors", null, "String", null, null, null, null, null, null, null, "post", null, "post", "post", "url", "String", null, null, null, null, null, null, null, "url", "url", null], "SCS_MethodInvocation": ["getLogger", "currentTimeMillis", "format", "format", "getSiteName", "equalsIgnoreCase", "format", "format", "format", "formatNumberByThousands", "containsKey", "get", "getErrorMessage", "format", "getMainUri", "endsWith", "getMainUri", "substring", "getMainUri", "length", "getMainUri", "getPermalink", "isEmpty", "getId", "getPermalink", "isEmpty", "format", "getMainUri", "endsWith", "getMainUri", "substring", "getMainUri", "length", "getMainUri", "startsWith", "substring", "format"], "SCS_ConstructorDeclaration": ["ViewHelper"], "SCS_MemberReference": ["appSetting", "appSetting", "startTime", "startTime", "startTime", "startTime", "date", "date", "date", "date", "title", "applicationEnv", "applicationEnv", "applicationEnv", "applicationEnv", "number", "number", "thousands", "millions", "millions", "thousands", "thousands", "number", "number", "errors", "field", "field", "appSetting", "appSetting", "appSetting", "appSetting", "appSetting", "appSetting", "appSetting", "appSetting", "url", "now"], "MN": ["getResponseTime", "getStartTime", "setStartTime", "getFormattedDate", "getMonthAndDay", "metaTitle", "getApplicationEnv", "isProductionMode", "setApplicationEnv", "formatNumberByThousands", "formatNumberByThousands", "errorFormat", "getPostUrl", "getAbsoluteUrl", "currentYear"], "PN": ["startTime", "date", "date", "title", "applicationEnv", "number", "number", "errors", "field", "post", "url"], "SCS_VariableDeclaration": ["double", "double", "Date"], "CO": ["/**\n * @author Raysmond<i@raysmond.com>\n */", "//    private static DateFormatSymbols ruDateFormatSymbolsFull = new DateFormatSymbols(){", "//        @Override", "//        public String[] getMonths() {", "//            return new String[]{\"\u044f\u043d\u0432\u0430\u0440\u044c\", \"\u0444\u0435\u0432\u0440\u0430\u043b\u044c\", \"\u043c\u0430\u0440\u0442\", \"\u0430\u043f\u0440\u0435\u043b\u044c\", \"\u043c\u0430\u0439\", \"\u0438\u044e\u043d\u044c\", \"\u0438\u044e\u043b\u044c\", \"\u0430\u0432\u0433\u0443\u0441\u0442\", \"\u0441\u0435\u043d\u0442\u044f\u0431\u0440\u044c\", \"\u043e\u043a\u0442\u044f\u0431\u0440\u044c\", \"\u043d\u043e\u044f\u0431\u0440\u044c\", \"\u0434\u0435\u043a\u0430\u0431\u0440\u044c\"};", "//        }", "//    };", "//    private static DateFormatSymbols ruDateFormatSymbolsShort = new DateFormatSymbols(){", "//        @Override", "//        public String[] getMonths() {", "//            return new String[]{\"\u044f\u043d\u0432\", \"\u0444\u0435\u0432\", \"\u043c\u0430\u0440\", \"\u0430\u043f\u0440\", \"\u043c\u0430\u0439\", \"\u0438\u044e\u043d\", \"\u0438\u044e\u043b\", \"\u0430\u0432\u0433\", \"\u0441\u0435\u043d\", \"\u043e\u043a\u0442\", \"\u043d\u043e\u044f\", \"\u0434\u0435\u043a\"};", "//        }", "//    };", "//, ViewHelper.ruDateFormatSymbolsFull);", "//, ViewHelper.ruDateFormatSymbolsShort);"], "CODE": "package com.raysmond.blog.support.web;\n\n\nimport com.raysmond.blog.models.Post;\nimport com.raysmond.blog.models.User;\nimport com.raysmond.blog.models.support.WebError;\nimport com.raysmond.blog.services.AppSetting;\nimport com.raysmond.blog.services.UserService;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.stereotype.Service;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport java.security.Principal;\nimport java.text.DateFormatSymbols;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.Map;\n\nimport com.domingosuarez.boot.autoconfigure.jade4j.JadeHelper;\n/**\n * @author Raysmond<i@raysmond.com>\n */\n@Service\n@JadeHelper(\"viewHelper\")\npublic class ViewHelper {\n\n    private static Logger logger = LoggerFactory.getLogger(ViewHelper.class);\n\n//    private static DateFormatSymbols ruDateFormatSymbolsFull = new DateFormatSymbols(){\n//        @Override\n//        public String[] getMonths() {\n//            return new String[]{\"\u044f\u043d\u0432\u0430\u0440\u044c\", \"\u0444\u0435\u0432\u0440\u0430\u043b\u044c\", \"\u043c\u0430\u0440\u0442\", \"\u0430\u043f\u0440\u0435\u043b\u044c\", \"\u043c\u0430\u0439\", \"\u0438\u044e\u043d\u044c\", \"\u0438\u044e\u043b\u044c\", \"\u0430\u0432\u0433\u0443\u0441\u0442\", \"\u0441\u0435\u043d\u0442\u044f\u0431\u0440\u044c\", \"\u043e\u043a\u0442\u044f\u0431\u0440\u044c\", \"\u043d\u043e\u044f\u0431\u0440\u044c\", \"\u0434\u0435\u043a\u0430\u0431\u0440\u044c\"};\n//        }\n//    };\n//    private static DateFormatSymbols ruDateFormatSymbolsShort = new DateFormatSymbols(){\n//        @Override\n//        public String[] getMonths() {\n//            return new String[]{\"\u044f\u043d\u0432\", \"\u0444\u0435\u0432\", \"\u043c\u0430\u0440\", \"\u0430\u043f\u0440\", \"\u043c\u0430\u0439\", \"\u0438\u044e\u043d\", \"\u0438\u044e\u043b\", \"\u0430\u0432\u0433\", \"\u0441\u0435\u043d\", \"\u043e\u043a\u0442\", \"\u043d\u043e\u044f\", \"\u0434\u0435\u043a\"};\n//        }\n//    };\n\n    private static final SimpleDateFormat DATE_FORMAT = new SimpleDateFormat(\"MMMM dd, yyyy\"); //, ViewHelper.ruDateFormatSymbolsFull);\n    private static final SimpleDateFormat DATE_FORMAT_MONTH_DAY = new SimpleDateFormat(\"MMM dd\"); //, ViewHelper.ruDateFormatSymbolsShort);\n\n    private AppSetting appSetting;\n\n    private String applicationEnv;\n\n    @Autowired\n    public ViewHelper(AppSetting appSetting){\n        this.appSetting = appSetting;\n    }\n\n    private long startTime;\n\n    public long getResponseTime(){\n        return System.currentTimeMillis() - startTime;\n    }\n\n    public long getStartTime() {\n        return startTime;\n    }\n\n    public void setStartTime(long startTime) {\n        this.startTime = startTime;\n    }\n\n    public String getFormattedDate(Date date){\n        return date == null ? \"\" : DATE_FORMAT.format(date);\n    }\n\n    public String getMonthAndDay(Date date){\n        return date == null ? \"\" : DATE_FORMAT_MONTH_DAY.format(date);\n    }\n\n    public String metaTitle(String title){\n        return title + \" \u00b7 \" + appSetting.getSiteName();\n    }\n\n    public String getApplicationEnv() {\n        return applicationEnv;\n    }\n\n    public Boolean isProductionMode() {\n        return this.applicationEnv.equalsIgnoreCase(\"production\");\n    }\n\n    public void setApplicationEnv(String applicationEnv) {\n        this.applicationEnv = applicationEnv;\n    }\n\n    public String formatNumberByThousands(Long number) {\n        if (number == null)\n            return \"0\";\n\n        double thousands = (double) number / 1000;\n        double millions = thousands / 1000;\n        if (millions > 1d) {\n            return String.format(\"%.2f\", millions);\n        } else if (thousands > 1d) {\n            return String.format(\"%.2fK\", thousands);\n        } else {\n            return String.format(\"%d\", number);\n        }\n    }\n\n    public String formatNumberByThousands(Integer number) {\n        return this.formatNumberByThousands((long) number);\n    }\n\n    public String errorFormat(Map<String, WebError> errors, String field) {\n        if (errors != null && errors.containsKey(field)) {\n            return errors.get(field).getErrorMessage();\n        } else {\n            return \"\";\n        }\n    }\n\n    public String getPostUrl(Post post) {\n        return String.format(\"%s/posts/%s\",\n                this.appSetting.getMainUri().endsWith(\"/\") ? this.appSetting.getMainUri().substring(0, this.appSetting.getMainUri().length()-1) : this.appSetting.getMainUri(),\n                post.getPermalink().isEmpty() ? post.getId() : post.getPermalink()\n        );\n    }\n\n    public String getAbsoluteUrl(String url) {\n        if (url.isEmpty()) {\n            return \"\";\n        }\n        return String.format(\"%s/%s\",\n                this.appSetting.getMainUri().endsWith(\"/\") ? this.appSetting.getMainUri().substring(0, this.appSetting.getMainUri().length()-1) : this.appSetting.getMainUri(),\n                url.startsWith(\"/\") ? url.substring(1) : url\n        );\n    }\n\n    public String currentYear() {\n        Date now = new Date();\n        return (new SimpleDateFormat(\"yyyy\")).format(now);\n    }\n\n}\n", "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/support/web/MessageHelper.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["MessageHelper"], "SCS_ConstructorDeclaration": ["MessageHelper"], "MN": ["addSuccessAttribute", "addErrorAttribute", "addInfoAttribute", "addWarningAttribute", "addAttribute", "addSuccessAttribute", "addErrorAttribute", "addInfoAttribute", "addWarningAttribute", "addAttribute"], "PN": ["ra", "message", "args", "ra", "message", "args", "ra", "message", "args", "ra", "message", "args", "ra", "message", "type", "args", "model", "message", "args", "model", "message", "args", "model", "message", "args", "model", "message", "args", "model", "message", "type", "args"], "SCS_ClassReference": ["", "", "", "", "ra", "", "", "", "", "model"], "SCS_MethodInvocation": ["addAttribute", "addAttribute", "addAttribute", "addAttribute", "addFlashAttribute", "addAttribute", "addAttribute", "addAttribute", "addAttribute", "addAttribute"], "SCS_MemberReference": ["ra", "message", "SUCCESS", "args", "ra", "message", "DANGER", "args", "ra", "message", "INFO", "args", "ra", "message", "WARNING", "args", "MESSAGE_ATTRIBUTE", "message", "type", "args", "model", "message", "SUCCESS", "args", "model", "message", "DANGER", "args", "model", "message", "INFO", "args", "model", "message", "WARNING", "args", "MESSAGE_ATTRIBUTE", "message", "type", "args"], "CO": [], "CODE": "package com.raysmond.blog.support.web;\n\nimport static com.raysmond.blog.support.web.Message.MESSAGE_ATTRIBUTE;\n\nimport org.springframework.ui.Model;\nimport org.springframework.web.servlet.mvc.support.RedirectAttributes;\n\npublic final class MessageHelper {\n\n    private MessageHelper() {\n\n    }\n\n    public static void addSuccessAttribute(RedirectAttributes ra, String message, Object... args) {\n        addAttribute(ra, message, Message.Type.SUCCESS, args);\n    }\n\n    public static void addErrorAttribute(RedirectAttributes ra, String message, Object... args) {\n        addAttribute(ra, message, Message.Type.DANGER, args);\n    }\n\n    public static void addInfoAttribute(RedirectAttributes ra, String message, Object... args) {\n        addAttribute(ra, message, Message.Type.INFO, args);\n    }\n\n    public static void addWarningAttribute(RedirectAttributes ra, String message, Object... args) {\n        addAttribute(ra, message, Message.Type.WARNING, args);\n    }\n\n    private static void addAttribute(RedirectAttributes ra, String message, Message.Type type, Object... args) {\n        ra.addFlashAttribute(MESSAGE_ATTRIBUTE, new Message(message, type, args));\n    }\n\n    public static void addSuccessAttribute(Model model, String message, Object... args) {\n        addAttribute(model, message, Message.Type.SUCCESS, args);\n    }\n\n    public static void addErrorAttribute(Model model, String message, Object... args) {\n        addAttribute(model, message, Message.Type.DANGER, args);\n    }\n\n    public static void addInfoAttribute(Model model, String message, Object... args) {\n        addAttribute(model, message, Message.Type.INFO, args);\n    }\n\n    public static void addWarningAttribute(Model model, String message, Object... args) {\n        addAttribute(model, message, Message.Type.WARNING, args);\n    }\n\n    private static void addAttribute(Model model, String message, Message.Type type, Object... args) {\n        model.addAttribute(MESSAGE_ATTRIBUTE, new Message(message, type, args));\n    }\n}\n", "AN": [], "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_VariableDeclaration": [], "SCS_VariableDeclarator": [], "SCS_AnnotationDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/support/web/SyntaxHighlightService.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["SyntaxHighlightService"], "MN": ["highlight"], "PN": ["content"], "CO": ["/**\n * @author Raysmond<i@raysmond.com>\n */"], "CODE": "package com.raysmond.blog.support.web;\n\n/**\n * @author Raysmond<i@raysmond.com>\n */\npublic interface SyntaxHighlightService {\n    public String highlight(String content);\n}\n", "AN": [], "SCS_ClassReference": [], "SCS_MemberReference": [], "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_VariableDeclaration": [], "SCS_VariableDeclarator": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_MethodInvocation": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/support/web/FlexmarkMarkdownService.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["FlexmarkMarkdownService"], "MN": ["renderToHtml", "highlight"], "PN": ["content", "content"], "SCS_VariableDeclaration": ["MutableDataSet", "Parser", "HtmlRenderer", "Node", "String"], "SCS_VariableDeclarator": ["options", "parser", "renderer", "document", "html"], "SCS_ClassReference": ["options", "Arrays", "TablesExtension", "StrikethroughExtension", "YouTubeLinkExtension", "WikiLinkExtension", "SuperscriptExtension", "Parser", null, "HtmlRenderer", null, "parser", "renderer"], "SCS_MethodInvocation": ["set", "asList", "create", "create", "create", "create", "create", "builder", "build", "builder", "build", "parse", "render"], "SCS_MemberReference": ["EXTENSIONS", "options", "options", "content", "document", "html", "content"], "CO": ["// uncomment to set optional extensions", "/*,\n                EnumeratedReferenceExtension.create()*/", "// uncomment to convert soft-breaks to hard breaks", "//options.set(HtmlRenderer.SOFT_BREAK, \"<br />\\n\");", "// You can re-use parser and renderer instances", "// \"<p>This is <em>Sparta</em></p>\\n\""], "CODE": "package com.raysmond.blog.support.web;\n\nimport com.vladsch.flexmark.ast.Node;\nimport com.vladsch.flexmark.ext.enumerated.reference.EnumeratedReferenceExtension;\nimport com.vladsch.flexmark.ext.gfm.strikethrough.StrikethroughExtension;\nimport com.vladsch.flexmark.ext.tables.TablesExtension;\nimport com.vladsch.flexmark.ext.wikilink.WikiLinkExtension;\nimport com.vladsch.flexmark.ext.youtube.embedded.YouTubeLinkExtension;\nimport com.vladsch.flexmark.html.HtmlRenderer;\nimport com.vladsch.flexmark.parser.Parser;\nimport com.vladsch.flexmark.superscript.SuperscriptExtension;\nimport com.vladsch.flexmark.util.options.MutableDataSet;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.stereotype.Service;\n\nimport java.util.Arrays;\n\n@Service\n@Qualifier(\"flexmark\")\npublic class FlexmarkMarkdownService implements MarkdownService, SyntaxHighlightService {\n    @Override\n    public String renderToHtml(String content) {\n\n        MutableDataSet options = new MutableDataSet();\n\n        // uncomment to set optional extensions\n        options.set(Parser.EXTENSIONS, Arrays.asList(\n                TablesExtension.create(),\n                StrikethroughExtension.create(),\n                YouTubeLinkExtension.create(),\n                WikiLinkExtension.create(),\n                SuperscriptExtension.create()/*,\n                EnumeratedReferenceExtension.create()*/\n        ));\n\n        // uncomment to convert soft-breaks to hard breaks\n        //options.set(HtmlRenderer.SOFT_BREAK, \"<br />\\n\");\n\n        Parser parser = Parser.builder(options).build();\n        HtmlRenderer renderer = HtmlRenderer.builder(options).build();\n\n        // You can re-use parser and renderer instances\n        Node document = parser.parse(content);\n        String html = renderer.render(document);  // \"<p>This is <em>Sparta</em></p>\\n\"\n\n        return html;\n    }\n\n    @Override\n    public String highlight(String content) {\n        return content;\n    }\n}\n", "AN": [], "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/support/web/HttpContentTypeSerializer.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["HttpContentTypeSerializer"], "AN": ["variants", "defaultVariant"], "SCS_VariableDeclarator": ["variants", "defaultVariant", "fileArray", "extension"], "SCS_ClassReference": ["variants", "variants", "variants", "variants", "variants", "variants", "variants", "variants", "variants", "variants", "variants", "variants", "variants", "variants", "variants", "variants", "variants", "variants", "variants", "variants", "variants", "variants", "variants", "variants", "variants", "variants", "variants", "variants", "variants", "variants", "variants", "variants", "variants", "variants", "variants", "variants", "variants", "variants", "variants", "variants", "variants", "variants", "variants", "variants", "variants", "variants", "variants", "variants", "variants", "variants", "variants", "variants", "variants", "variants", "variants", "variants", "variants", "variants", "variants", "variants", "variants", "fileName", "fileName", "variants", "variants"], "SCS_MethodInvocation": ["put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "isEmpty", "split", "containsKey", "get"], "MN": ["getContentType"], "PN": ["fileName"], "SCS_MemberReference": ["defaultVariant", "fileArray", "length", "extension", "extension", "defaultVariant"], "SCS_VariableDeclaration": ["String", "String"], "CO": [], "CODE": "package com.raysmond.blog.support.web;\n\nimport java.util.HashMap;\nimport java.util.Hashtable;\n\npublic class HttpContentTypeSerializer {\n\n    private static final Hashtable<String, String> variants = new Hashtable<String, String>();\n\n    private static final String defaultVariant = \"application/octet-stream\";\n\n    static {\n        variants.put(\".aac\", \"audio/aac\");\n        variants.put(\".abw\", \"application/x-abiword\");\n        variants.put(\".arc\", \"application/octet-stream\");\n        variants.put(\".avi\", \"video/x-msvideo\");\n        variants.put(\".azw\", \"application/vnd.amazon.ebook\");\n        variants.put(\".bin\", \"application/octet-stream\");\n        variants.put(\".bz\", \"application/x-bzip\");\n        variants.put(\".bz2\", \"application/x-bzip2\");\n        variants.put(\".csh\", \"application/x-csh\");\n        variants.put(\".css\", \"text/css\");\n        variants.put(\".csv\", \"text/csv\");\n        variants.put(\".doc\", \"application/msword\");\n        variants.put(\".eot\", \"application/vnd.ms-fontobject\");\n        variants.put(\".epub\", \"application/epub+zip\");\n        variants.put(\".gif\", \"image/gif\");\n        variants.put(\".htm\", \"text/html\");\n        variants.put(\".html\", \"text/html\");\n        variants.put(\".ico\", \"image/x-icon\");\n        variants.put(\".ics\", \"text/calendar\");\n        variants.put(\".jar\", \"application/java-archive\");\n        variants.put(\".jpeg\", \"image/jpeg\");\n        variants.put(\".jpg\", \"image/jpeg\");\n        variants.put(\".js\", \"application/javascript\");\n        variants.put(\".json\", \"application/json\");\n        variants.put(\".mid\", \"audio/midi\");\n        variants.put(\".midi\", \"audio/midi\");\n        variants.put(\".mpeg\", \"video/mpeg\");\n        variants.put(\".mpkg\", \"application/vnd.apple.installer+xml\");\n        variants.put(\".odp\", \"application/vnd.oasis.opendocument.presentation\");\n        variants.put(\".ods\", \"application/vnd.oasis.opendocument.spreadsheet\");\n        variants.put(\".odt\", \"application/vnd.oasis.opendocument.text\");\n        variants.put(\".oga\", \"audio/ogg\");\n        variants.put(\".ogv\", \"video/ogg\");\n        variants.put(\".ogx\", \"application/ogg\");\n        variants.put(\".otf\", \"font/otf\");\n        variants.put(\".png\", \"image/png\");\n        variants.put(\".pdf\", \"application/pdf\");\n        variants.put(\".ppt\", \"application/vnd.ms-powerpoint\");\n        variants.put(\".rar\", \"application/x-rar-compressed\");\n        variants.put(\".rtf\", \"application/rtf\");\n        variants.put(\".sh\", \"application/x-sh\");\n        variants.put(\".svg\", \"image/svg+xml\");\n        variants.put(\".swf\", \"application/x-shockwave-flash\");\n        variants.put(\".tar\", \"application/x-tar\");\n        variants.put(\".tif\", \"image/tiff\");\n        variants.put(\".tiff\", \"image/tiff\");\n        variants.put(\".ts\", \"video/vnd.dlna.mpeg-tts\");\n        variants.put(\".ttf\", \"font/ttf\");\n        variants.put(\".vsd\", \"application/vnd.visio\");\n        variants.put(\".wav\", \"audio/x-wav\");\n        variants.put(\".weba\", \"audio/webm\");\n        variants.put(\".webm\", \"video/webm\");\n        variants.put(\".webp\", \"image/webp\");\n        variants.put(\".woff\", \"font/woff\");\n        variants.put(\".woff2\", \"font/woff2\");\n        variants.put(\".xhtml\", \"application/xhtml+xml\");\n        variants.put(\".xls\", \"application/vnd.ms-excel\");\n        variants.put(\".xml\", \"application/xml\");\n        variants.put(\".xul\", \"application/vnd.mozilla.xul+xml\");\n        variants.put(\".zip\", \"application/zip\");\n        variants.put(\".7z\", \"application/x-7z-compressed\");\n    }\n\n    public static String getContentType(String fileName) {\n\n        if (fileName.isEmpty()) {\n            return defaultVariant;\n        }\n\n        String fileArray[]=fileName.split(\"\\\\.\");\n\n        String extension = \".\" + fileArray[fileArray.length-1];\n\n        if (variants.containsKey(extension)) {\n            return variants.get(extension);\n        }\n\n        return defaultVariant;\n    }\n\n\n}\n", "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/support/web/MarkdownService.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["MarkdownService"], "MN": ["renderToHtml"], "PN": ["content"], "CO": ["/**\n * @author Raysmond<i@raysmond.com>\n */"], "CODE": "package com.raysmond.blog.support.web;\n\n/**\n * @author Raysmond<i@raysmond.com>\n */\npublic interface MarkdownService {\n    public String renderToHtml(String content);\n}\n", "AN": [], "SCS_ClassReference": [], "SCS_MemberReference": [], "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_VariableDeclaration": [], "SCS_VariableDeclarator": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_MethodInvocation": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/support/web/Message.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["Message", "Type"], "AN": ["MESSAGE_ATTRIBUTE", "message", "type", "args"], "SCS_VariableDeclarator": ["MESSAGE_ATTRIBUTE", "message", "type", "args"], "SCS_ConstructorDeclaration": ["Message", "Message"], "SCS_MemberReference": ["message", "message", "type", "type", "args", "message", "message", "type", "type", "args", "args", "message", "type", "args"], "MN": ["getMessage", "getType", "getArgs"], "PN": [], "CO": ["/**\n * A message to be displayed in web context. Depending on the type, different style will be applied.\n */", "/**\n     * Name of the flash attribute.\n     */", "/**\n     * The type of the message to be displayed. The type is used to show message in a different style.\n     */"], "CODE": "package com.raysmond.blog.support.web;\n\n/**\n * A message to be displayed in web context. Depending on the type, different style will be applied.\n */\npublic class Message implements java.io.Serializable {\n    /**\n     * Name of the flash attribute.\n     */\n\tpublic static final String MESSAGE_ATTRIBUTE = \"message\";\n\n    /**\n     * The type of the message to be displayed. The type is used to show message in a different style.\n     */\n\tpublic static enum Type {\n        DANGER, WARNING, INFO, SUCCESS;\n\t}\n\n\tprivate final String message;\n\tprivate final Type type;\n\tprivate final Object[] args;\n\n\tpublic Message(String message, Type type) {\n\t\tthis.message = message;\n\t\tthis.type = type;\n\t\tthis.args = null;\n\t}\n\t\n\tpublic Message(String message, Type type, Object... args) {\n\t\tthis.message = message;\n\t\tthis.type = type;\n\t\tthis.args = args;\n\t}\n\n\tpublic String getMessage() {\n\t\treturn message;\n\t}\n\n\tpublic Type getType() {\n\t\treturn type;\n\t}\n\n\tpublic Object[] getArgs() {\n\t\treturn args;\n\t}\n}\n", "SCS_ClassReference": [], "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_VariableDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_MethodInvocation": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/support/web/extensions/YoutubeLinkTransformer.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["YoutubeLinkTransformer", "YouTubeLink", "YouTubeLinkNodePostProcessor", "Factory", "YouTubeLinkNodeRenderer", "Factory", "YouTubeLinkExtension"], "SCS_ConstructorDeclaration": ["YouTubeLink", "YouTubeLink", "YouTubeLinkNodePostProcessor", "Factory", "YouTubeLinkNodeRenderer", "YouTubeLinkExtension"], "SCS_ClassReference": ["other", null, "other", null, "other", null, "other", null, "other", null, "other", null, "other", "other", "other", "other", "other", "other", "other", "other", "textChars", "textChars", "textChars", null, "textChars", "node", "previous", "chars", "chars", "node", "previous", "chars", "chars", "youTubeLink", "node", "previous", "state", "state", "", "Link", "set", "Link", "self", "context", "context", "context", "node", null, "resolvedLink", null, "html", "resolvedLink", null, null, "html", "html", "html", "html", "html", "html", null, null, "node", "html", "html", "resolvedLink", "node", null, "html", "node", null, "html", null, null, "node", "context", "html", "parserBuilder", "rendererType", "rendererBuilder", "rendererType", "rendererType"], "SCS_MethodInvocation": ["getChars", "baseSubSequence", "getChars", "getStartOffset", "getChars", "getEndOffset", "getChars", "baseSubSequence", "getChars", "getStartOffset", "getTextOpeningMarker", "getEndOffset", "getText", "getTextClosingMarker", "getLinkOpeningMarker", "getUrl", "getTitleOpeningMarker", "getTitle", "getTitleClosingMarker", "getLinkClosingMarker", "length", "subSequence", "subSequence", "trim", "subSequence", "getPrevious", "getChars", "endsWith", "isContinuedBy", "getChars", "setChars", "subSequence", "length", "takeChildren", "unlink", "insertAfter", "nodeRemoved", "nodeAddedWithChildren", "addNodes", "add", "render", "isDoNotRenderLinks", "renderChildren", "resolveLink", "getUrl", "unescape", "getUrl", "contains", "attr", "getUrl", "replace", "toLowerCase", "attr", "attr", "attr", "attr", "attr", "srcPos", "withAttr", "tag", "getChars", "tag", "attr", "getUrl", "getTitle", "isNotNull", "attr", "getTitle", "unescape", "srcPos", "withAttr", "tag", "getChars", "renderChildren", "tag", "postProcessorFactory", "equals", "nodeRendererFactory", "equals", "equals"], "MN": ["setTextChars", "process", "create", "getNodeRenderingHandlers", "render", "render", "create", "create", "extend", "rendererOptions", "parserOptions", "extend"], "PN": ["textChars", "state", "node", "document", "node", "context", "html", "node", "context", "html", "options", "parserBuilder", "options", "options", "rendererBuilder", "rendererType"], "SCS_VariableDeclaration": ["int", "Node", "BasedSequence", "YouTubeLink", "YouTubeLinkNodeRenderer", "HashSet", "ResolvedLink"], "SCS_VariableDeclarator": ["textCharsLength", "previous", "chars", "youTubeLink", "self", "set", "resolvedLink"], "SCS_MemberReference": ["textOpeningMarker", "text", "textCharsLength", "textClosingMarker", "textCharsLength", "textCharsLength", "node", "previous", "node", "node", "youTubeLink", "node", "youTubeLink", "document", "node", "context", "html", "set", "node", "LINK", "resolvedLink", "resolvedLink", "node", "options", "parserBuilder"], "CO": ["// trim previous chars to remove '@'", "// standard Link Rendering", "//context.renderChildren(node);"], "CODE": "package com.raysmond.blog.support.web.extensions;\n\nimport com.vladsch.flexmark.Extension;\nimport com.vladsch.flexmark.ast.*;\nimport com.vladsch.flexmark.html.CustomNodeRenderer;\nimport com.vladsch.flexmark.html.HtmlRenderer;\nimport com.vladsch.flexmark.html.HtmlWriter;\nimport com.vladsch.flexmark.html.renderer.*;\nimport com.vladsch.flexmark.parser.Parser;\nimport com.vladsch.flexmark.parser.block.NodePostProcessor;\nimport com.vladsch.flexmark.parser.block.NodePostProcessorFactory;\nimport com.vladsch.flexmark.util.NodeTracker;\nimport com.vladsch.flexmark.util.options.DataHolder;\nimport com.vladsch.flexmark.util.options.MutableDataHolder;\nimport com.vladsch.flexmark.util.sequence.BasedSequence;\n\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class YoutubeLinkTransformer {\n\n    public static class YouTubeLink extends InlineLinkNode {\n        public YouTubeLink() {\n        }\n\n        public YouTubeLink(final Link other) {\n            super(other.getChars().baseSubSequence(other.getChars().getStartOffset() - 1, other.getChars().getEndOffset()),\n                    other.getChars().baseSubSequence(other.getChars().getStartOffset() - 1, other.getTextOpeningMarker().getEndOffset()),\n                    other.getText(),\n                    other.getTextClosingMarker(),\n                    other.getLinkOpeningMarker(),\n                    other.getUrl(),\n                    other.getTitleOpeningMarker(),\n                    other.getTitle(),\n                    other.getTitleClosingMarker(),\n                    other.getLinkClosingMarker()\n            );\n        }\n\n        @Override\n        public void setTextChars(final BasedSequence textChars) {\n            int textCharsLength = textChars.length();\n            this.textOpeningMarker = textChars.subSequence(0, 1);\n            this.text = textChars.subSequence(1, textCharsLength - 1).trim();\n            this.textClosingMarker = textChars.subSequence(textCharsLength - 1, textCharsLength);\n        }\n    }\n\n    public static class YouTubeLinkNodePostProcessor extends NodePostProcessor {\n        public YouTubeLinkNodePostProcessor(DataHolder options) {\n        }\n\n        @Override\n        public void process(NodeTracker state, Node node) {\n            if (node instanceof Link) {\n                Node previous = node.getPrevious();\n\n                if (previous instanceof Text) {\n                    final BasedSequence chars = previous.getChars();\n                    if (chars.endsWith(\"@\") && chars.isContinuedBy(node.getChars())) {\n                        // trim previous chars to remove '@'\n                        previous.setChars(chars.subSequence(0, chars.length() - 1));\n\n                        YouTubeLink youTubeLink = new YouTubeLink((Link) node);\n                        youTubeLink.takeChildren(node);\n                        node.unlink();\n                        previous.insertAfter(youTubeLink);\n                        state.nodeRemoved(node);\n                        state.nodeAddedWithChildren(youTubeLink);\n                    }\n                }\n            }\n        }\n\n        public static class Factory extends NodePostProcessorFactory {\n            public Factory(DataHolder options) {\n                super(false);\n\n                addNodes(Link.class);\n            }\n\n            @Override\n            public NodePostProcessor create(Document document) {\n                return new YouTubeLinkNodePostProcessor(document);\n            }\n        }\n    }\n\n    public static class YouTubeLinkNodeRenderer implements NodeRenderer {\n\n        public YouTubeLinkNodeRenderer(DataHolder options) {\n        }\n\n        @Override\n        public Set<NodeRenderingHandler<?>> getNodeRenderingHandlers() {\n            final YouTubeLinkNodeRenderer self = this;\n\n            HashSet<NodeRenderingHandler<?>> set = new HashSet<NodeRenderingHandler<?>>();\n            set.add(new NodeRenderingHandler<Link>(Link.class, new CustomNodeRenderer<Link>() {\n                @Override\n                public void render(Link node, NodeRendererContext context, HtmlWriter html) {\n                    self.render(node, context, html);\n                }\n            }));\n            return set;\n        }\n\n        private void render(final Link node, final NodeRendererContext context, final HtmlWriter html) {\n            if (context.isDoNotRenderLinks()) {\n                context.renderChildren(node);\n            } else {\n                // standard Link Rendering\n                ResolvedLink resolvedLink = context.resolveLink(LinkType.LINK, node.getUrl().unescape(), null);\n\n                if (resolvedLink.getUrl().contains(\"www.youtube.com/watch\")) {\n\n                    html.attr(\"src\", resolvedLink.getUrl().replace(\"watch?v=\".toLowerCase(), \"embed/\"));\n                    html.attr(\"width\", \"420\");\n                    html.attr(\"height\", \"315\");\n                    html.attr(\"class\", \"youtube-embedded\");\n                    html.attr(\"allowfullscreen\", \"true\");\n                    html.attr(\"frameborder\", \"0\");\n                    html.srcPos(node.getChars()).withAttr(resolvedLink).tag(\"iframe\");\n                    //context.renderChildren(node);\n                    html.tag(\"/iframe\");\n\n                } else {\n                    html.attr(\"href\", resolvedLink.getUrl());\n                    if (node.getTitle().isNotNull()) {\n                        html.attr(\"title\", node.getTitle().unescape());\n                    }\n                    html.srcPos(node.getChars()).withAttr(resolvedLink).tag(\"a\");\n                    context.renderChildren(node);\n                    html.tag(\"/a\");\n                }\n\n            }\n        }\n\n        public static class Factory implements NodeRendererFactory {\n            @Override\n            public NodeRenderer create(final DataHolder options) {\n                return new YouTubeLinkNodeRenderer(options);\n            }\n        }\n    }\n\n    public static class YouTubeLinkExtension implements Parser.ParserExtension, HtmlRenderer.HtmlRendererExtension {\n        private YouTubeLinkExtension() {\n        }\n\n        public static Extension create() {\n            return new YouTubeLinkExtension();\n        }\n\n        @Override\n        public void extend(Parser.Builder parserBuilder) {\n            parserBuilder.postProcessorFactory(new YouTubeLinkNodePostProcessor.Factory(parserBuilder));\n        }\n\n        @Override\n        public void rendererOptions(final MutableDataHolder options) {\n\n        }\n\n        @Override\n        public void parserOptions(final MutableDataHolder options) {\n\n        }\n\n        @Override\n        public void extend(HtmlRenderer.Builder rendererBuilder, String rendererType) {\n            if (rendererType.equals(\"HTML\")) {\n                rendererBuilder.nodeRendererFactory(new YouTubeLinkNodeRenderer.Factory());\n            } else if (rendererType.equals(\"JIRA\") || rendererType.equals(\"YOUTRACK\")) {\n            }\n        }\n    }\n\n}\n", "AN": [], "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/forms/SettingsForm.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["SettingsForm"], "AN": ["siteName", "siteSlogan", "pageSize", "storagePath", "mainUri", "telegramMasterChatId", "subscriptionLink"], "SCS_VariableDeclarator": ["siteName", "siteSlogan", "pageSize", "storagePath", "mainUri", "telegramMasterChatId", "subscriptionLink"], "CO": ["/**\n * @author Raysmond<i@raysmond.com>\n */"], "CODE": "package com.raysmond.blog.forms;\n\nimport lombok.Data;\nimport org.hibernate.validator.constraints.NotEmpty;\n\nimport javax.validation.constraints.NotNull;\n\n/**\n * @author Raysmond<i@raysmond.com>\n */\n@Data\npublic class SettingsForm {\n\n    @NotEmpty\n    @NotNull\n    private String siteName;\n\n    @NotNull\n    private String siteSlogan;\n\n    @NotNull\n    private Integer pageSize;\n\n    @NotNull\n    private String storagePath;\n\n    @NotNull\n    private String mainUri;\n\n    @NotNull\n    private String telegramMasterChatId;\n\n    @NotNull\n    private String subscriptionLink;\n}\n", "MN": [], "PN": [], "SCS_ClassReference": [], "SCS_MemberReference": [], "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_VariableDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_MethodInvocation": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/forms/SeoRobotAgentForm.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["SeoRobotAgentForm"], "AN": ["id", "userAgent", "isRegexp"], "SCS_VariableDeclarator": ["id", "userAgent", "isRegexp"], "CO": [], "CODE": "package com.raysmond.blog.forms;\n\nimport lombok.Data;\n\nimport javax.validation.constraints.NotNull;\n\n@Data\npublic class SeoRobotAgentForm {\n\n    @NotNull\n    private Long id = 0L;\n\n    @NotNull\n    private String userAgent = \"\";\n\n    @NotNull\n    private Boolean isRegexp = false;\n}\n", "MN": [], "PN": [], "SCS_ClassReference": [], "SCS_MemberReference": [], "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_VariableDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_MethodInvocation": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/forms/PostForm.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["PostForm"], "AN": ["deleted", "title", "content", "announcement", "postFormat", "postStatus", "permalink", "postTags", "seoKeywords", "seoDescription", "seoOgType", "seoOgImage", "seoOgVideo", "seoOgLocale"], "SCS_VariableDeclarator": ["deleted", "title", "content", "announcement", "postFormat", "postStatus", "permalink", "postTags", "seoKeywords", "seoDescription", "seoOgType", "seoOgImage", "seoOgVideo", "seoOgLocale", "data"], "MN": ["init", "initFromPost", "initFromPost", "fillOgFieldsInPost"], "PN": ["post", "post", "postTags", "post"], "SCS_ClassReference": [null, null, null, null, null, null, null, null, null, null, null, "post", null, "post", null, null, "post", null, null, "post", null, null, "post", null, null, null, null, null, null, null, "post", "post", "data", "data", "data", "data", "data", "post"], "SCS_MethodInvocation": ["setTitle", "setPermalink", "setContent", "setPostTags", "setPostStatus", "setPostFormat", "setSeoKeywords", "setSeoOgImage", "setSeoOgLocale", "setSeoOgType", "setSeoOgVideo", "getSeoData", "setSeoOgImage", "getSeoData", "getOgImage", "setSeoOgVideo", "getSeoData", "getOgVideo", "setSeoOgLocale", "getSeoData", "getOgLocale", "setSeoOgType", "getSeoData", "getOgType", "setSeoOgImage", "setSeoOgLocale", "setSeoOgType", "setSeoOgVideo", "initFromPost", "setPostTags", "getSeoData", "getSeoData", "setOgImage", "setOgLocale", "setOgTitle", "setOgType", "setOgVideo", "setSeoData"], "SCS_MemberReference": ["DRAFT", "MARKDOWN", "en_EN", "ARTICLE", "en_EN", "ARTICLE", "post", "postTags", "data", "data", "seoOgImage", "seoOgLocale", "title", "seoOgType", "seoOgVideo", "data"], "SCS_VariableDeclaration": ["SeoPostData"], "CO": ["/**\n * @author Raysmond<i@raysmond.com>\n */", "//    @NotNull", "//    private String seoOgTitle;", "//this.setSeoOgTitle(\"\");", "//this.setSeoOgTitle(\"\");"], "CODE": "package com.raysmond.blog.forms;\n\nimport com.raysmond.blog.models.Post;\nimport com.raysmond.blog.models.SeoPostData;\nimport com.raysmond.blog.models.Tag;\nimport com.raysmond.blog.models.support.OgLocale;\nimport com.raysmond.blog.models.support.OgType;\nimport com.raysmond.blog.models.support.PostFormat;\nimport com.raysmond.blog.models.support.PostStatus;\nimport lombok.Data;\nimport org.hibernate.validator.constraints.NotEmpty;\n\nimport javax.validation.constraints.NotNull;\nimport java.util.Set;\n\n/**\n * @author Raysmond<i@raysmond.com>\n */\n@Data\npublic class PostForm {\n\n    @NotNull\n    private Boolean deleted;\n\n    @NotEmpty\n    private String title;\n\n    @NotEmpty\n    private String content;\n\n\n    private String announcement;\n\n    @NotNull\n    private PostFormat postFormat;\n\n    @NotNull\n    private PostStatus postStatus;\n\n    @NotNull\n    private String permalink;\n\n    @NotNull\n    private String postTags;\n\n    @NotNull\n    private String seoKeywords;\n\n    @NotNull\n    private String seoDescription;\n\n\n//    @NotNull\n//    private String seoOgTitle;\n\n    @NotNull\n    private OgType seoOgType;\n\n    @NotNull\n    private String seoOgImage;\n\n    @NotNull\n    private String seoOgVideo;\n\n    @NotNull\n    private OgLocale seoOgLocale;\n\n    public void init() {\n        this.setTitle(\"\");\n        this.setPermalink(\"\");\n        this.setContent(\"\");\n        this.setPostTags(\"\");\n        this.setPostStatus(PostStatus.DRAFT);\n        this.setPostFormat(PostFormat.MARKDOWN);\n        this.setSeoKeywords(\"\");\n        this.setSeoOgImage(\"\");\n        this.setSeoOgLocale(OgLocale.en_EN);\n        //this.setSeoOgTitle(\"\");\n        this.setSeoOgType(OgType.ARTICLE);\n        this.setSeoOgVideo(\"\");\n    }\n\n    public void initFromPost(Post post) {\n        if (post.getSeoData() != null) {\n            this.setSeoOgImage(post.getSeoData().getOgImage());\n            this.setSeoOgVideo(post.getSeoData().getOgVideo());\n            this.setSeoOgLocale(post.getSeoData().getOgLocale());\n            this.setSeoOgType(post.getSeoData().getOgType());\n        } else {\n            this.setSeoOgImage(\"\");\n            this.setSeoOgLocale(OgLocale.en_EN);\n            //this.setSeoOgTitle(\"\");\n            this.setSeoOgType(OgType.ARTICLE);\n            this.setSeoOgVideo(\"\");\n        }\n    }\n\n    public void initFromPost(Post post, String postTags) {\n        this.initFromPost(post);\n        this.setPostTags(postTags);\n    }\n\n    public void fillOgFieldsInPost(Post post) {\n        SeoPostData data = null;\n        if (post.getSeoData() == null) {\n            data = new SeoPostData();\n        } else {\n            data = post.getSeoData();\n        }\n        data.setOgImage(this.seoOgImage);\n        data.setOgLocale(this.seoOgLocale);\n        data.setOgTitle(this.title);\n        data.setOgType(this.seoOgType);\n        data.setOgVideo(this.seoOgVideo);\n        post.setSeoData(data);\n    }\n\n}\n", "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/forms/UserForm.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["UserForm"], "AN": ["password", "newPassword"], "SCS_VariableDeclarator": ["password", "newPassword"], "CO": ["/**\n * @author Raysmond<i@raysmond.com>.\n */"], "CODE": "package com.raysmond.blog.forms;\n\nimport lombok.Data;\n\nimport javax.validation.constraints.NotNull;\n\n/**\n * @author Raysmond<i@raysmond.com>.\n */\n@Data\npublic class UserForm {\n    @NotNull\n    private String password;\n\n    @NotNull\n    private String newPassword;\n}\n", "MN": [], "PN": [], "SCS_ClassReference": [], "SCS_MemberReference": [], "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_VariableDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_MethodInvocation": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/forms/PostPreviewForm.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["PostPreviewForm"], "AN": ["content"], "SCS_VariableDeclarator": ["content"], "CO": ["/**\n * Created by bvn13 on 28.01.2018.\n */"], "CODE": "package com.raysmond.blog.forms;\n\nimport lombok.Data;\nimport org.hibernate.validator.constraints.NotEmpty;\n\n/**\n * Created by bvn13 on 28.01.2018.\n */\n@Data\npublic class PostPreviewForm {\n\n    @NotEmpty\n    private String content;\n\n}\n", "MN": [], "PN": [], "SCS_ClassReference": [], "SCS_MemberReference": [], "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_VariableDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_MethodInvocation": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/forms/LikeForm.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["LikeForm"], "AN": ["sympathy"], "SCS_VariableDeclarator": ["sympathy"], "CO": [], "CODE": "package com.raysmond.blog.forms;\n\nimport lombok.Data;\n\nimport javax.validation.constraints.NotNull;\n\n@Data\npublic class LikeForm {\n\n    @NotNull\n    private String sympathy = \"0\";\n\n}\n", "MN": [], "PN": [], "SCS_ClassReference": [], "SCS_MemberReference": [], "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_VariableDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_MethodInvocation": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/forms/StoredFileForm.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["StoredFileForm"], "AN": ["title", "name", "path", "size"], "SCS_VariableDeclarator": ["title", "name", "path", "size"], "CO": [], "CODE": "package com.raysmond.blog.forms;\n\nimport lombok.Data;\n\nimport javax.validation.constraints.NotNull;\n\n@Data\npublic class StoredFileForm {\n\n    @NotNull\n    private String title;\n\n    @NotNull\n    private String name;\n\n    @NotNull\n    private String path;\n\n    @NotNull\n    private Long size;\n\n}\n", "MN": [], "PN": [], "SCS_ClassReference": [], "SCS_MemberReference": [], "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_VariableDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_MethodInvocation": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/models/Setting.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["Setting"], "AN": ["key", "value"], "SCS_VariableDeclarator": ["key", "value"], "CO": ["/**\n * A generic setting model\n *\n * @author Raysmond<i@raysmond.com>\n */"], "CODE": "package com.raysmond.blog.models;\n\nimport lombok.Builder;\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport javax.persistence.*;\nimport java.io.Serializable;\nimport java.util.Date;\n\n/**\n * A generic setting model\n *\n * @author Raysmond<i@raysmond.com>\n */\n@Entity\n@Table(name = \"settings\")\n@Getter @Setter\npublic class Setting extends BaseModel{\n\n    @Column(name = \"_key\", unique = true, nullable = false)\n    private String key;\n\n    @Lob\n    @Column(name = \"_value\")\n    private Serializable value;\n\n}\n", "MN": [], "PN": [], "SCS_ClassReference": [], "SCS_MemberReference": [], "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_VariableDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_MethodInvocation": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/models/SeoRobotAgent.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["SeoRobotAgent"], "AN": ["userAgent", "isRegexp"], "SCS_VariableDeclarator": ["userAgent", "isRegexp"], "SCS_ConstructorDeclaration": ["SeoRobotAgent", "SeoRobotAgent"], "SCS_MemberReference": ["userAgent", "userAgent"], "CO": [], "CODE": "package com.raysmond.blog.models;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport javax.persistence.*;\nimport java.util.ArrayList;\nimport java.util.List;\n\n@Entity\n@Table(name = \"seo_robots_agents\")\n@Getter\n@Setter\npublic class SeoRobotAgent extends BaseModel {\n\n    @Column(nullable = false)\n    private String userAgent;\n\n    @Column(nullable = false, columnDefinition = \"boolean default false\")\n    private Boolean isRegexp;\n\n    public SeoRobotAgent() {\n\n    }\n\n    public SeoRobotAgent(String userAgent) {\n        this.userAgent = userAgent;\n    }\n\n}\n", "MN": [], "PN": [], "SCS_ClassReference": [], "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_VariableDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_MethodInvocation": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/models/Visit.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["Visit"], "AN": ["user", "clientIp", "post", "isAdmin", "userAgent"], "SCS_VariableDeclarator": ["user", "clientIp", "post", "isAdmin", "userAgent"], "CO": [], "CODE": "package com.raysmond.blog.models;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport javax.persistence.*;\nimport java.util.HashSet;\nimport java.util.Set;\n\n@Entity\n@Table(name = \"visits\")\n@Getter @Setter\npublic class Visit extends BaseModel {\n\n    @ManyToOne\n    private User user;\n\n    @Column(nullable = false)\n    private String clientIp;\n\n    @ManyToOne\n    private Post post;\n\n    @Column(nullable = false, columnDefinition = \"boolean default false\")\n    private Boolean isAdmin;\n\n    @Column(columnDefinition = \"VARCHAR\")\n    private String userAgent;\n\n}\n", "MN": [], "PN": [], "SCS_ClassReference": [], "SCS_MemberReference": [], "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_VariableDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_MethodInvocation": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/models/Tag.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["Tag"], "AN": ["name", "posts"], "SCS_VariableDeclarator": ["name", "posts"], "SCS_MemberReference": ["LAZY", "name"], "SCS_ConstructorDeclaration": ["Tag", "Tag"], "SCS_ClassReference": [null], "SCS_MethodInvocation": ["setName"], "CO": ["/**\n * @author Raysmond<i@raysmond.com>.\n */"], "CODE": "package com.raysmond.blog.models;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport javax.persistence.*;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\n\n/**\n * @author Raysmond<i@raysmond.com>.\n */\n@Entity\n@Table(name = \"tags\")\n@Getter @Setter\npublic class Tag extends BaseModel {\n\n    @Column(nullable = false, unique = true)\n    private String name;\n\n    @ManyToMany(fetch = FetchType.LAZY, mappedBy = \"tags\")\n    private List<Post> posts = new ArrayList<>();\n\n    public Tag(){\n\n    }\n\n    public Tag(String name){\n        this.setName(name);\n    }\n}\n", "MN": [], "PN": [], "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_VariableDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/models/BaseModel.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["BaseModel"], "AN": ["id", "createdAt", "updatedAt"], "SCS_MemberReference": ["IDENTITY", "createdAt", "updatedAt", "updatedAt", "other", "other", "id", "id", "_id", "createdAt", "createdAt", "createdAt", "updatedAt", "updatedAt", "updatedAt"], "SCS_VariableDeclarator": ["id", "createdAt", "updatedAt"], "MN": ["prePersist", "preUpdate", "compareTo", "equals", "hashCode", "getId", "setId", "getCreatedAt", "setCreatedAt", "getUpdatedAt", "setUpdatedAt"], "PN": ["o", "other", "_id", "createdAt", "updatedAt"], "SCS_ClassReference": [null, null, "o", "other", null, null, null, null, "", null], "SCS_MethodInvocation": ["getId", "compareTo", "getId", "getClass", "getClass", "getId", "equals", "append", "getId", "toHashCode"], "CO": ["/**\n * An abstract base model class for entities\n *\n * @author Raysmond<i@raysmond.com>\n */"], "CODE": "package com.raysmond.blog.models;\n\nimport org.apache.commons.lang3.builder.HashCodeBuilder;\nimport javax.persistence.*;\nimport java.io.Serializable;\nimport java.util.Date;\n\n/**\n * An abstract base model class for entities\n *\n * @author Raysmond<i@raysmond.com>\n */\n@MappedSuperclass\npublic abstract class BaseModel implements Comparable<BaseModel>, Serializable {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    @Column(name = \"id\")\n    private Long id;\n\n    @Column(nullable = false)\n    private Date createdAt;\n\n    @Column(nullable = false)\n    private Date updatedAt;\n\n    @PrePersist\n    public void prePersist(){\n        createdAt = updatedAt = new Date();\n    }\n\n    @PreUpdate\n    public void preUpdate(){\n        updatedAt = new Date();\n    }\n\n    @Override\n    public int compareTo(BaseModel o) {\n        return this.getId().compareTo(o.getId());\n    }\n\n    public boolean equals(Object other) {\n        if (other == null || other.getClass() != this.getClass())\n            return false;\n\n        return this.getId().equals(((BaseModel) other).getId());\n    }\n\n\n    public int hashCode() {\n        return new HashCodeBuilder().append(getId()).toHashCode();\n    }\n\n\n    public Long getId() {\n        return id;\n    }\n\n    public void setId(Long _id) {\n        id = _id;\n    }\n\n    public Date getCreatedAt() {\n        return createdAt;\n    }\n\n    public void setCreatedAt(Date createdAt) {\n        this.createdAt = createdAt;\n    }\n\n    public Date getUpdatedAt() {\n        return updatedAt;\n    }\n\n    public void setUpdatedAt(Date updatedAt) {\n        this.updatedAt = updatedAt;\n    }\n\n}", "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_VariableDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/models/Like.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["Like"], "AN": ["user", "post", "sympathy", "clientIp", "isAdmin"], "SCS_VariableDeclarator": ["user", "post", "sympathy", "clientIp", "isAdmin"], "CO": [], "CODE": "package com.raysmond.blog.models;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport javax.persistence.Column;\nimport javax.persistence.Entity;\nimport javax.persistence.ManyToOne;\nimport javax.persistence.Table;\n\n@Entity\n@Table(name = \"posts_likes\")\n@Getter @Setter\npublic class Like extends BaseModel {\n\n    @ManyToOne\n    private User user;\n\n    @ManyToOne\n    private Post post;\n\n    @Column(nullable = false)\n    private Integer sympathy;\n\n    @Column(nullable = false)\n    private String clientIp;\n\n    @Column(nullable = false, columnDefinition = \"boolean default false\")\n    private Boolean isAdmin;\n\n}\n", "MN": [], "PN": [], "SCS_ClassReference": [], "SCS_MemberReference": [], "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_VariableDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_MethodInvocation": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/models/User.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["User"], "AN": ["ROLE_ADMIN", "ROLE_USER", "email", "password", "role", "posts", "storedFiles"], "SCS_VariableDeclarator": ["ROLE_ADMIN", "ROLE_USER", "email", "password", "role", "posts", "storedFiles"], "SCS_MemberReference": ["ROLE_USER", "LAZY", "REMOVE", "LAZY", "REMOVE", "role", "ROLE_ADMIN", "email", "email", "password", "password", "role", "role"], "SCS_ConstructorDeclaration": ["User", "User"], "MN": ["isAdmin"], "PN": [], "SCS_ClassReference": [null], "SCS_MethodInvocation": ["equals"], "CO": ["/**\n * @author Raysmond<i@raysmond.com>\n */"], "CODE": "package com.raysmond.blog.models;\n\nimport javax.persistence.*;\n\nimport com.fasterxml.jackson.annotation.JsonIgnore;\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\n\n/**\n * @author Raysmond<i@raysmond.com>\n */\n@Entity\n@Table(name = \"users\")\n@Getter @Setter\npublic class User extends BaseModel {\n    public static final String ROLE_ADMIN = \"ROLE_ADMIN\";\n    public static final String ROLE_USER  = \"ROLE_USER\";\n\n    @Column(unique = true)\n    private String email;\n\n    @JsonIgnore\n    private String password;\n\n    private String role = ROLE_USER;\n\n    @OneToMany(fetch = FetchType.LAZY, mappedBy = \"user\", cascade = CascadeType.REMOVE)\n    private Collection<Post> posts = new ArrayList<>();\n\n    @OneToMany(fetch = FetchType.LAZY, mappedBy = \"user\", cascade = CascadeType.REMOVE)\n    private Collection<StoredFile> storedFiles = new ArrayList<>();\n\n    public User() {\n\n    }\n\n    public Boolean isAdmin() {\n        return this.role.equals(ROLE_ADMIN);\n    }\n\n    public User(String email, String password, String role) {\n        this.email = email;\n        this.password = password;\n        this.role = role;\n    }\n}\n", "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_VariableDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/models/SeoPostData.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["SeoPostData"], "AN": ["post", "ogTitle", "ogType", "ogImage", "ogVideo", "ogLocale"], "SCS_MemberReference": ["LAZY", "ALL", "STRING", "ARTICLE", "STRING", "en_EN"], "SCS_VariableDeclarator": ["post", "ogTitle", "ogType", "ogImage", "ogVideo", "ogLocale"], "CO": ["/*@Column\n    private String ogUrl;\n\n    @Column\n    private String ogDescription;*/"], "CODE": "package com.raysmond.blog.models;\n\nimport com.raysmond.blog.models.support.OgLocale;\nimport com.raysmond.blog.models.support.OgType;\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport javax.persistence.*;\n\n@Entity\n@Table(name = \"seo_posts_data\")\n@Getter\n@Setter\npublic class SeoPostData extends BaseModel {\n\n    @OneToOne(fetch = FetchType.LAZY, mappedBy = \"seoData\", cascade = CascadeType.ALL)\n    private Post post;\n\n    @Column\n    private String ogTitle = \"\";\n\n    @Column\n    @Enumerated(EnumType.STRING)\n    private OgType ogType = OgType.ARTICLE;\n\n    @Column\n    private String ogImage = \"\";\n\n    @Column\n    private String ogVideo = \"\";\n\n    @Column\n    @Enumerated(EnumType.STRING)\n    private OgLocale ogLocale = OgLocale.en_EN;\n\n    /*@Column\n    private String ogUrl;\n\n    @Column\n    private String ogDescription;*/\n\n}\n", "MN": [], "PN": [], "SCS_ClassReference": [], "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_VariableDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_MethodInvocation": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/models/StoredFile.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["StoredFile"], "AN": ["user", "title", "name", "path", "size", "storagePath"], "SCS_VariableDeclarator": ["user", "title", "name", "path", "size", "storagePath", "separator", "bytes", "kilobytes", "megabytes", "gigabytes", "terabytes", "petabytes", "exabytes", "zettabytes", "yottabytes"], "MN": ["getFullPath", "getSizeFormatted"], "PN": [], "SCS_VariableDeclaration": ["String", "double", "double", "double", "double", "double", "double", "double", "double", "double"], "SCS_ClassReference": ["StringUtils", "storagePath", null, "Math", "String", "Math", "String", "Math", "String", "Math", "String", "Math", "String", "Math", "String", "Math", "String", "Math", "String", "String"], "SCS_MethodInvocation": ["isEmpty", "endsWith", "getSize", "floor", "format", "floor", "format", "floor", "format", "floor", "format", "floor", "format", "floor", "format", "floor", "format", "floor", "format", "format"], "SCS_MemberReference": ["storagePath", "separator", "storagePath", "separator", "path", "bytes", "kilobytes", "megabytes", "gigabytes", "terabytes", "petabytes", "exabytes", "zettabytes", "yottabytes", "yottabytes", "zettabytes", "zettabytes", "exabytes", "exabytes", "petabytes", "petabytes", "terabytes", "terabytes", "gigabytes", "gigabytes", "megabytes", "megabytes", "kilobytes", "kilobytes", "bytes"], "CO": [], "CODE": "package com.raysmond.blog.models;\n\n\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.springframework.util.StringUtils;\n\nimport javax.persistence.*;\n\n@Entity\n@Table(name = \"stored_files\")\n@Getter @Setter\npublic class StoredFile extends BaseModel {\n\n    @ManyToOne\n    private User user;\n\n    @Column(nullable = false)\n    private String title;\n\n    @Column(nullable = false)\n    private String name;\n\n    @Column(nullable = false)\n    private String path;\n\n    @Column(columnDefinition = \"bigint default 0\")\n    private Long size;\n\n    @Transient\n    private String storagePath;\n\n    public String getFullPath() {\n        String separator = \"\";\n        if (!StringUtils.isEmpty(storagePath) && !storagePath.endsWith(\"//\")) {\n            separator = \"//\";\n        }\n        return storagePath + separator + path;\n    }\n\n    public String getSizeFormatted() {\n        double bytes = this.getSize();\n        double kilobytes = (bytes / 1024);\n        double megabytes = (kilobytes / 1024);\n        double gigabytes = (megabytes / 1024);\n        double terabytes = (gigabytes / 1024);\n        double petabytes = (terabytes / 1024);\n        double exabytes = (petabytes / 1024);\n        double zettabytes = (exabytes / 1024);\n        double yottabytes = (zettabytes / 1024);\n        if (Math.floor(yottabytes) > 0d) {\n            return String.format(\"%.3f Yb\", yottabytes);\n        } else if (Math.floor(zettabytes) > 0d) {\n            return String.format(\"%.3f Zb\", zettabytes);\n        } else if (Math.floor(exabytes) > 0d) {\n            return String.format(\"%.3f Eb\", exabytes);\n        } else if (Math.floor(petabytes) > 0d) {\n            return String.format(\"%.3f Pb\", petabytes);\n        } else if (Math.floor(terabytes) > 0d) {\n            return String.format(\"%.3f Tb\", terabytes);\n        } else if (Math.floor(gigabytes) > 0d) {\n            return String.format(\"%.3f Gb\", gigabytes);\n        } else if (Math.floor(megabytes) > 0d) {\n            return String.format(\"%.3f Mb\", megabytes);\n        } else if (Math.floor(kilobytes) > 0d) {\n            return String.format(\"%.3f Kb\", kilobytes);\n        } else {\n            return String.format(\"%d bytes\", (int)bytes);\n        }\n    }\n\n}\n", "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/models/Post.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["Post"], "AN": ["SLUG_DATE_FORMAT", "deleted", "user", "title", "content", "renderedContent", "announcement", "postStatus", "postFormat", "postType", "tags", "seoKeywords", "seoDescription", "seoData", "permalink", "visitsCount", "sympathyCount"], "SCS_VariableDeclarator": ["SLUG_DATE_FORMAT", "deleted", "user", "title", "content", "renderedContent", "announcement", "postStatus", "postFormat", "postType", "tags", "seoKeywords", "seoDescription", "seoData", "permalink", "token", "visitsCount", "sympathyCount"], "SCS_MemberReference": ["STRING", "PUBLISHED", "STRING", "MARKDOWN", "STRING", "POST", "LAZY", "ALL", "renderedContent", "permalink", "token", "visitsCount", "visitsCount", "sympathyCount", "sympathyCount"], "MN": ["getRenderedContent", "setPermalink", "getVisitsCount", "getSympathyCount"], "PN": ["permalink"], "SCS_VariableDeclaration": ["String"], "SCS_ClassReference": ["permalink", null, null, "StringUtils", "StringUtils"], "SCS_MethodInvocation": ["toLowerCase", "replace", "replaceAll", "arrayToDelimitedString", "tokenizeToStringArray"], "CO": ["/**\n * @author Raysmond<i@raysmond.com>\n */", "//if (this.postFormat == PostFormat.MARKDOWN)", "//return getContent();"], "CODE": "package com.raysmond.blog.models;\n\nimport com.raysmond.blog.models.support.PostFormat;\nimport com.raysmond.blog.models.support.PostStatus;\nimport com.raysmond.blog.models.support.PostType;\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.hibernate.annotations.Type;\nimport org.springframework.util.StringUtils;\n\nimport javax.persistence.*;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashSet;\nimport java.util.Set;\n\n/**\n * @author Raysmond<i@raysmond.com>\n */\n@Entity\n@Table(name = \"posts\")\n@Getter @Setter\npublic class Post extends BaseModel {\n    private static final SimpleDateFormat SLUG_DATE_FORMAT = new SimpleDateFormat(\"yyyy/MM/dd\");\n\n    @Column(nullable = false, columnDefinition = \"boolean DEFAULT false\")\n    private Boolean deleted;\n\n    @ManyToOne\n    private User user;\n\n    @Column(nullable = false)\n    private String title;\n\n    @Type(type=\"text\")\n    private String content;\n\n    @Type(type = \"text\")\n    private String renderedContent;\n\n    @Type(type = \"text\")\n    private String announcement;\n\n    @Column(nullable = false)\n    @Enumerated(EnumType.STRING)\n    private PostStatus postStatus = PostStatus.PUBLISHED;\n\n    @Column(nullable = false)\n    @Enumerated(EnumType.STRING)\n    private PostFormat postFormat = PostFormat.MARKDOWN;\n\n    @Column(nullable = false)\n    @Enumerated(EnumType.STRING)\n    private PostType postType = PostType.POST;\n\n    @ManyToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL)\n    @JoinTable(name = \"posts_tags\",\n            joinColumns = {@JoinColumn(name = \"post_id\", nullable = false, updatable = false)},\n            inverseJoinColumns = {@JoinColumn(name = \"tag_id\", nullable = false, updatable = false)}\n    )\n    private Set<Tag> tags = new HashSet<>();\n\n    @Column(nullable = false, columnDefinition = \"character varying DEFAULT ''\")\n    private String seoKeywords = \"\";\n\n    @Column(nullable = false, columnDefinition = \"character varying DEFAULT ''\")\n    private String seoDescription = \"\";\n\n    @OneToOne\n    private SeoPostData seoData;\n\n    private String permalink;\n\n    public String getRenderedContent() {\n        //if (this.postFormat == PostFormat.MARKDOWN)\n            return renderedContent;\n\n        //return getContent();\n    }\n\n    public void setPermalink(String permalink){\n        String token = permalink.toLowerCase().replace(\"\\n\", \" \").replaceAll(\"[^a-z\\\\d\\\\s]\", \" \");\n        this.permalink = StringUtils.arrayToDelimitedString(StringUtils.tokenizeToStringArray(token, \" \"), \"-\");\n    }\n\n    private Long visitsCount = 0L;\n    public Long getVisitsCount() {\n        if (this.visitsCount == null) return 0L;\n        else return this.visitsCount;\n    }\n\n    private Integer sympathyCount = 0;\n    public Integer getSympathyCount() {\n        if (this.sympathyCount == null) return 0;\n        else return this.sympathyCount;\n    }\n}\n", "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/models/support/PostFormat.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["PostFormat"], "AN": ["name"], "SCS_VariableDeclarator": ["name"], "SCS_ConstructorDeclaration": ["PostFormat"], "SCS_MemberReference": ["name", "name", "name"], "MN": ["getName", "getId", "toString"], "PN": [], "SCS_ClassReference": ["", ""], "SCS_MethodInvocation": ["name", "getName"], "CO": ["/**\n * @author Raysmond<i@raysmond.com>\n */"], "CODE": "package com.raysmond.blog.models.support;\n\n/**\n * @author Raysmond<i@raysmond.com>\n */\npublic enum PostFormat {\n    HTML(\"Html\"),\n    MARKDOWN(\"Markdown\");\n\n    private String name;\n\n    PostFormat(String name){\n        this.name = name;\n    }\n\n    public String getName(){\n        return name;\n    }\n\n    public String getId() {\n        return name();\n    }\n\n    @Override\n    public String toString() {\n        return getName();\n    }\n}", "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_VariableDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/models/support/WebError.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["WebError"], "AN": ["field", "errorMessage"], "SCS_VariableDeclarator": ["field", "errorMessage"], "SCS_ConstructorDeclaration": ["WebError"], "SCS_MemberReference": ["field", "field", "errorMessage", "errorMessage"], "CO": [], "CODE": "package com.raysmond.blog.models.support;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport java.io.Serializable;\n\n@Getter\n@Setter\npublic class WebError implements Serializable {\n\n    private String field;\n\n    private String errorMessage;\n\n    public WebError(String field, String errorMessage) {\n        this.field = field;\n        this.errorMessage = errorMessage;\n    }\n\n}\n", "MN": [], "PN": [], "SCS_ClassReference": [], "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_VariableDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_MethodInvocation": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/models/support/OgType.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["OgType"], "AN": ["name"], "SCS_VariableDeclarator": ["name"], "SCS_ConstructorDeclaration": ["OgType"], "SCS_MemberReference": ["name", "name", "name"], "MN": ["getName", "getId", "toString"], "PN": [], "SCS_ClassReference": ["", ""], "SCS_MethodInvocation": ["name", "getName"], "CO": [], "CODE": "package com.raysmond.blog.models.support;\n\npublic enum OgType {\n\n    ARTICLE(\"article\");\n\n    private String name;\n\n    OgType(String name){\n        this.name = name;\n    }\n\n    public String getName(){\n        return name;\n    }\n\n    public String getId() {\n        return name();\n    }\n\n    @Override\n    public String toString() {\n        return getName();\n    }\n\n}\n", "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_VariableDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/models/support/OgLocale.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["OgLocale"], "AN": ["name"], "SCS_VariableDeclarator": ["name"], "SCS_ConstructorDeclaration": ["OgLocale"], "SCS_MemberReference": ["name", "name", "name", "name", "name"], "MN": ["getName", "setName", "getId", "toString"], "PN": ["name"], "SCS_ClassReference": ["", ""], "SCS_MethodInvocation": ["name", "getName"], "CO": [], "CODE": "package com.raysmond.blog.models.support;\n\npublic enum OgLocale {\n\n    en_EN(\"en_EN\"),\n    ru_RU(\"ru_RU\");\n\n    private String name;\n\n    OgLocale(String name){\n        this.name = name;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getId(){\n        return name();\n    }\n\n    @Override\n    public String toString() {\n        return getName();\n    }\n\n}\n", "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_VariableDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/models/support/PostType.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["PostType"], "AN": ["name"], "SCS_VariableDeclarator": ["name"], "SCS_ConstructorDeclaration": ["PostType"], "SCS_MemberReference": ["name", "name", "name", "name", "name"], "MN": ["getName", "setName", "getId", "toString"], "PN": ["name"], "SCS_ClassReference": ["", ""], "SCS_MethodInvocation": ["name", "getName"], "CO": ["/**\n * @author Raysmond<i@raysmond.com>\n */"], "CODE": "package com.raysmond.blog.models.support;\n\n/**\n * @author Raysmond<i@raysmond.com>\n */\npublic enum PostType {\n    PAGE(\"Page\"),\n    POST(\"Post\");\n\n    private String name;\n\n    PostType(String name){\n        this.name = name;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getId(){\n        return name();\n    }\n\n    @Override\n    public String toString() {\n        return getName();\n    }\n}\n", "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_VariableDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/models/support/PostStatus.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["PostStatus"], "AN": ["name"], "SCS_VariableDeclarator": ["name"], "SCS_ConstructorDeclaration": ["PostStatus"], "SCS_MemberReference": ["name", "name", "name", "name", "name"], "MN": ["getName", "setName", "getId", "toString"], "PN": ["name"], "SCS_ClassReference": ["", ""], "SCS_MethodInvocation": ["name", "getName"], "CO": ["/**\n * @author Raysmond<i@raysmond.com>\n */"], "CODE": "package com.raysmond.blog.models.support;\n\n/**\n * @author Raysmond<i@raysmond.com>\n */\npublic enum PostStatus {\n    DRAFT(\"Draft\"),\n    PUBLISHED(\"Published\");\n\n    private String name;\n\n    PostStatus(String name){\n        this.name = name;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getId(){\n        return name();\n    }\n\n    @Override\n    public String toString() {\n        return getName();\n    }\n}\n", "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_VariableDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/models/dto/PostIdTitleDTO.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["PostIdTitleDTO"], "AN": ["id", "title"], "SCS_VariableDeclarator": ["id", "title"], "CO": ["/**\n * Created by bvn13 on 25.12.2017.\n */"], "CODE": "package com.raysmond.blog.models.dto;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\n\n/**\n * Created by bvn13 on 25.12.2017.\n */\n@Data\n@AllArgsConstructor\npublic class PostIdTitleDTO {\n    private Long id;\n    private String title;\n}\n", "MN": [], "PN": [], "SCS_ClassReference": [], "SCS_MemberReference": [], "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_VariableDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_MethodInvocation": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/models/dto/PostsIdListDTO.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["PostsIdListDTO"], "AN": ["ids"], "SCS_VariableDeclarator": ["ids"], "CO": ["/**\n * Created by bvn13 on 25.12.2017.\n */"], "CODE": "package com.raysmond.blog.models.dto;\n\nimport lombok.Data;\n\nimport java.util.List;\n\n/**\n * Created by bvn13 on 25.12.2017.\n */\n@Data\npublic class PostsIdListDTO {\n    private List<Integer> ids;\n}\n", "MN": [], "PN": [], "SCS_ClassReference": [], "SCS_MemberReference": [], "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_VariableDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_MethodInvocation": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/models/dto/PostPreviewDTO.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["PostPreviewDTO"], "AN": ["content"], "SCS_VariableDeclarator": ["content"], "CO": ["/**\n * Created by bvn13 on 28.01.2018.\n */"], "CODE": "package com.raysmond.blog.models.dto;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\n\n/**\n * Created by bvn13 on 28.01.2018.\n */\n@Data\n@AllArgsConstructor\npublic class PostPreviewDTO {\n\n    private String content;\n\n}\n", "MN": [], "PN": [], "SCS_ClassReference": [], "SCS_MemberReference": [], "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_VariableDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_MethodInvocation": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/models/dto/AjaxAnswerDTO.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["AjaxAnswerDTO"], "AN": ["error", "message"], "SCS_VariableDeclarator": ["error", "message"], "CO": ["/**\n * Created by bvn13 on 22.12.2017.\n */"], "CODE": "package com.raysmond.blog.models.dto;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\n\nimport java.io.Serializable;\n\n/**\n * Created by bvn13 on 22.12.2017.\n */\n@Data\n@AllArgsConstructor\npublic class AjaxAnswerDTO implements Serializable {\n\n    private Boolean error;\n    private String message;\n\n}\n", "MN": [], "PN": [], "SCS_ClassReference": [], "SCS_MemberReference": [], "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_VariableDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_MethodInvocation": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/models/dto/VisitStatDTO.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["VisitStatDTO"], "AN": ["dt", "post_id", "title", "count"], "SCS_VariableDeclarator": ["dt", "post_id", "title", "count"], "CO": ["/**\n * Created by bvn13 on 20.12.2017.\n */"], "CODE": "package com.raysmond.blog.models.dto;\n\nimport lombok.Data;\n\nimport java.io.Serializable;\nimport java.util.Date;\n\n/**\n * Created by bvn13 on 20.12.2017.\n */\n@Data\npublic class VisitStatDTO implements Serializable {\n\n    private Date dt;\n    private Long post_id;\n    private String title;\n    private Long count;\n\n}\n", "MN": [], "PN": [], "SCS_ClassReference": [], "SCS_MemberReference": [], "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_VariableDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_MethodInvocation": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/models/dto/VisitsStatsChartDTO.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["VisitsStatsChartDTO", "Type", "Text", "XAxis", "YAxis", "PlotOptions", "Line", "DataLabels", "Series"], "AN": ["type", "text", "categories", "title", "line", "dataLabels", "enableMouseTracking", "enabled", "name", "data", "chart", "title", "subtitle", "xAxis", "yAxis", "plotOptions", "series"], "SCS_VariableDeclarator": ["type", "text", "categories", "title", "line", "dataLabels", "enableMouseTracking", "enabled", "name", "data", "chart", "title", "subtitle", "xAxis", "yAxis", "plotOptions", "series"], "CO": ["/**\n * Created by bvn13 on 20.12.2017.\n */"], "CODE": "package com.raysmond.blog.models.dto;\n\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport lombok.Data;\nimport lombok.Getter;\nimport lombok.RequiredArgsConstructor;\nimport lombok.Setter;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * Created by bvn13 on 20.12.2017.\n */\n@Data\npublic class VisitsStatsChartDTO implements Serializable{\n\n    @Data\n    @RequiredArgsConstructor\n    public static class Type {\n        private String type = \"\";\n    }\n\n    @Data\n    @RequiredArgsConstructor\n    public static class Text {\n        private String text = \"\";\n    }\n\n    public static class XAxis {\n        @Getter\n        private List<String> categories = new ArrayList<>();\n    }\n\n    public static class YAxis {\n        @Getter\n        private Text title = new Text();\n    }\n\n    public static class PlotOptions {\n        @Getter\n        private Line line = new Line();\n    }\n\n    public static class Line {\n        @Getter\n        private DataLabels dataLabels = new DataLabels();\n\n        @Getter\n        @Setter\n        private Boolean enableMouseTracking = false;\n    }\n\n    @Data\n    @RequiredArgsConstructor\n    public static class DataLabels {\n        private Boolean enabled = false;\n    }\n\n    @Data\n    public static class Series {\n        private String name;\n        private List<Long> data = new ArrayList<>();\n    }\n\n    private Type chart = new Type();\n    private Text title = new Text();\n    private Text subtitle = new Text();\n    @JsonProperty(\"xAxis\")\n    private XAxis xAxis = new XAxis();\n    @JsonProperty(\"yAxis\")\n    private YAxis yAxis = new YAxis();\n    private Line plotOptions = new Line();\n\n    private List<Series> series = new ArrayList<>();\n}\n", "MN": [], "PN": [], "SCS_ClassReference": [], "SCS_MemberReference": [], "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_VariableDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_MethodInvocation": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/models/dto/PostAnnouncementDTO.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["PostAnnouncementDTO"], "SCS_ConstructorDeclaration": ["PostAnnouncementDTO", "PostAnnouncementDTO"], "SCS_MemberReference": ["error", "message", "error"], "CO": ["/**\n * Created by bvn13 on 22.12.2017.\n */"], "CODE": "package com.raysmond.blog.models.dto;\n\n/**\n * Created by bvn13 on 22.12.2017.\n */\npublic class PostAnnouncementDTO extends AjaxAnswerDTO {\n    public PostAnnouncementDTO(Boolean error, String message) {\n        super(error, message);\n    }\n    public PostAnnouncementDTO(Boolean error) {\n        super(error, \"\");\n    }\n}\n", "AN": [], "MN": [], "PN": [], "SCS_ClassReference": [], "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_VariableDeclaration": [], "SCS_VariableDeclarator": [], "SCS_AnnotationDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_MethodInvocation": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/seo/controllers/SitemapController.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["SitemapController"], "AN": ["postService", "seoService"], "SCS_VariableDeclarator": ["postService", "seoService", "posts"], "MN": ["getSiteMap"], "PN": [], "SCS_MemberReference": ["APPLICATION_XML_VALUE", "postService", "seoService", "posts"], "SCS_VariableDeclaration": ["List"], "SCS_ClassReference": [null, null], "SCS_MethodInvocation": ["getAllPublishedPosts", "createSitemap"], "CO": [], "CODE": "package com.raysmond.blog.seo.controllers;\n\nimport com.raysmond.blog.models.Post;\nimport com.raysmond.blog.services.PostService;\nimport com.raysmond.blog.services.SeoService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.MediaType;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\nimport java.util.List;\n\n@Controller\n@RequestMapping(value = {\"/seo\", \"\"})\npublic class SitemapController {\n\n    @Autowired\n    private PostService postService;\n\n    @Autowired\n    private SeoService seoService;\n\n    @GetMapping(value = \"/sitemap\", produces = MediaType.APPLICATION_XML_VALUE)\n    public @ResponseBody String getSiteMap() {\n        List<Post> posts = this.postService.getAllPublishedPosts();\n        return this.seoService.createSitemap(posts);\n    }\n\n}\n", "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/services/SeoRobotAgentService.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["SeoRobotAgentService"], "CO": [], "CODE": "package com.raysmond.blog.services;\n\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class SeoRobotAgentService {\n\n\n\n}\n", "AN": [], "MN": [], "PN": [], "SCS_ClassReference": [], "SCS_MemberReference": [], "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_VariableDeclaration": [], "SCS_VariableDeclarator": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_MethodInvocation": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/services/SettingService.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["SettingService"], "MN": ["get", "get", "put"], "PN": ["key", "key", "defaultValue", "key", "value"], "CO": ["/**\n * @author Raysmond<i@raysmond.com>\n */"], "CODE": "package com.raysmond.blog.services;\n\nimport java.io.Serializable;\n\n/**\n * @author Raysmond<i@raysmond.com>\n */\npublic interface SettingService {\n    Serializable get(String key);\n    Serializable get(String key, Serializable defaultValue);\n    void put(String key, Serializable value);\n}\n", "AN": [], "SCS_ClassReference": [], "SCS_MemberReference": [], "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_VariableDeclaration": [], "SCS_VariableDeclarator": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_MethodInvocation": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/services/RequestProcessorService.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["RequestProcessorService"], "MN": ["getRealIp", "getUserAgent"], "PN": ["request", "request"], "SCS_VariableDeclaration": ["String", "String"], "SCS_VariableDeclarator": ["xRealIp", "userAgent"], "SCS_ClassReference": ["request", "request", null, "request", "request"], "SCS_MethodInvocation": ["getHeader", "getHeader", "isEmpty", "getRemoteAddr", "getHeader"], "SCS_MemberReference": ["xRealIp", "xRealIp", "userAgent"], "CO": [], "CODE": "package com.raysmond.blog.services;\n\nimport org.springframework.stereotype.Service;\n\nimport javax.servlet.http.HttpServletRequest;\n\n@Service\npublic class RequestProcessorService {\n\n    public String getRealIp(HttpServletRequest request) {\n        String xRealIp = request.getHeader(\"X-Real-IP\");\n        if (xRealIp == null || request.getHeader(\"X-Real-IP\").isEmpty()) {\n            return request.getRemoteAddr();\n        }\n        return xRealIp;\n    }\n\n    public String getUserAgent(HttpServletRequest request) {\n        String userAgent = request.getHeader(\"User-Agent\");\n        return userAgent;\n    }\n\n}\n", "AN": [], "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/services/PostService.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["PostService"], "AN": ["postRepository", "tagService", "userService", "markdownService", "likeService", "visitService", "seoPostDataRepository", "notificator", "CACHE_NAME", "CACHE_NAME_ARCHIVE", "CACHE_NAME_PAGE", "CACHE_NAME_TAGS", "CACHE_NAME_SEO_KEYWORDS", "CACHE_NAME_COUNTS", "logger"], "SCS_VariableDeclarator": ["postRepository", "tagService", "userService", "markdownService", "likeService", "visitService", "seoPostDataRepository", "notificator", "CACHE_NAME", "CACHE_NAME_ARCHIVE", "CACHE_NAME_PAGE", "CACHE_NAME_TAGS", "CACHE_NAME_SEO_KEYWORDS", "CACHE_NAME_COUNTS", "logger", "post", "post", "post", "result", "post", "posts", "cachedPosts", "tags", "archivePost", "posts", "post", "post", "tags", "names", "name", "names", "post", "data", "result"], "SCS_MemberReference": ["CACHE_NAME", "CACHE_NAME", "CACHE_NAME", "CACHE_NAME", "CACHE_NAME", "CACHE_NAME", "postId", "postId", "post", "postId", "post", "CACHE_NAME", "postId", "postRepository", "postId", "PUBLISHED", "post", "postId", "post", "CACHE_NAME", "permalink", "permalink", "PUBLISHED", "post", "permalink", "post", "CACHE_NAME_ARCHIVE", "CACHE_NAME_PAGE", "CACHE_NAME_COUNTS", "post", "result", "CACHE_NAME", "CACHE_NAME", "CACHE_NAME_TAGS", "CACHE_NAME_SEO_KEYWORDS", "CACHE_NAME_ARCHIVE", "CACHE_NAME_PAGE", "CACHE_NAME_COUNTS", "post", "MARKDOWN", "post", "post", "CACHE_NAME", "CACHE_NAME", "CACHE_NAME_TAGS", "CACHE_NAME_SEO_KEYWORDS", "CACHE_NAME_ARCHIVE", "CACHE_NAME_PAGE", "CACHE_NAME_COUNTS", "post", "CACHE_NAME", "CACHE_NAME", "CACHE_NAME_TAGS", "CACHE_NAME_SEO_KEYWORDS", "CACHE_NAME_ARCHIVE", "CACHE_NAME_PAGE", "CACHE_NAME_COUNTS", "postId", "post", "CACHE_NAME_ARCHIVE", "POST", "PUBLISHED", "MAX_VALUE", "DESC", "post", "post", "cachedPosts", "CACHE_NAME_TAGS", "tags", "add", "tags", "CACHE_NAME_SEO_KEYWORDS", "likeService", "post", "visitService", "post", "archivePost", "CACHE_NAME_PAGE", "page", "POST", "PUBLISHED", "page", "pageSize", "DESC", "p", "likeService", "p", "visitService", "p", "posts", "postRepository", "POST", "PUBLISHED", "postRepository", "ABOUT_PAGE_PERMALINK", "ABOUT_PAGE_PERMALINK", "MARKDOWN", "post", "PROJECTS_PAGE_PERMALINK", "PROJECTS_PAGE_PERMALINK", "MARKDOWN", "post", "tagNames", "tagNames", "names", "name", "tags", "tags", "tag", "tagName", "page", "pageSize", "DESC", "CACHE_NAME_COUNTS", "PUBLISHED", "post", "permalink", "userService", "post", "permalink", "post", "permalink", "PROJECTS_PAGE_PERMALINK", "post", "post", "permalink", "post", "seoPostDataRepository", "data", "p", "result", "result", "pageRequest"], "SCS_ClassReference": ["LoggerFactory", "PostService", "logger", "postRepository", "post", "logger", null, "logger", "postRepository", null, null, "post", "post", "String", "markdownService", "post", "post", "String", "post", null, "postRepository", "post", "postRepository", "postRepository", "post", "postRepository", "logger", "postRepository", "posts", "cachedPosts", "", "logger", "post", "postRepository", null, null, "post", "logger", "post", "post", "archivePost", "post", "archivePost", "post", "archivePost", "post", "archivePost", "post", "archivePost", null, "archivePost", null, "logger", "postRepository", "posts", "p", null, "p", null, "logger", null, null, "logger", "post", "post", "Constants.ABOUT_PAGE_PERMALINK", "post", "post", "userService", "post", "", "logger", "post", "post", "Constants.PROJECTS_PAGE_PERMALINK", "post", "post", "userService", "post", "", "tagNames", "tagNames", "tagNames", "tags", "tagService", "tags", "tags", "names", null, "tag", "names", "names", "names", "postRepository", "logger", "postRepository", null, "permalink", null, null, "Long", null, "Long", "permalink", null, null, null, "post", "post", null, "post", null, null, null, "result", "p", "p", "Collections", "Long", "o2", "o1", "postRepository"], "SCS_MethodInvocation": ["getLogger", "debug", "findOne", "getDeleted", "debug", "findByIdAndPostStatusAndDeleted", "debug", "findByPermalinkAndPostStatusAndDeleted", "savePost", "savePost", "getPostFormat", "setRenderedContent", "format", "renderToHtml", "getContent", "setRenderedContent", "format", "getContent", "saveSeoData", "save", "setDeleted", "save", "findOne", "setDeleted", "save", "debug", "findAllByPostTypeAndPostStatusAndDeleted", "forEach", "add", "extractPostMeta", "debug", "getId", "findOne", "getTags", "forEach", "getId", "debug", "getId", "getSeoKeywords", "setId", "getId", "setTitle", "getTitle", "setPermalink", "getPermalink", "setCreatedAt", "getCreatedAt", "setSympathyCount", "getTotalLikesByPost", "setVisitsCount", "getUniqueVisitsCount", "debug", "findAllByPostTypeAndPostStatusAndDeleted", "forEach", "setSympathyCount", "getTotalLikesByPost", "setVisitsCount", "getUniqueVisitsCount", "debug", "findAllByPostTypeAndPostStatusAndDeleted", "findAll", "debug", "setTitle", "setContent", "toLowerCase", "setPermalink", "setUser", "getSuperUser", "setPostFormat", "createPost", "debug", "setTitle", "setContent", "toLowerCase", "setPermalink", "setUser", "getSuperUser", "setPostFormat", "createPost", "isEmpty", "toLowerCase", "split", "add", "findOrCreateByName", "isEmpty", "forEach", "append", "append", "getName", "deleteCharAt", "length", "toString", "findByTag", "debug", "countPostsByTags", "getPublishedPostByPermalink", "matches", "isCurrentUserAdmin", "getPost", "valueOf", "getPublishedPost", "valueOf", "toLowerCase", "trim", "equals", "createProjectsPage", "getSeoData", "getSeoData", "getId", "getSeoData", "save", "getAllPosts", "forEach", "add", "getId", "getTitle", "sort", "compare", "getId", "getId", "findAllByDeleted"], "MN": ["getPost", "getPublishedPost", "getPublishedPostByPermalink", "createPost", "updatePost", "savePost", "deletePost", "deletePost", "getArchivePosts", "getPostTags", "getSeoKeywordsAsString", "extractPostMeta", "getAllPublishedPostsByPage", "getAllPublishedPosts", "getAllPosts", "createAboutPage", "createProjectsPage", "parseTagNames", "getTagNames", "findPostsByTag", "countPostsByTags", "findPostByPermalink", "saveSeoData", "getPostsIdTitleList", "compare", "findAllPosts"], "PN": ["postId", "postId", "permalink", "post", "post", "post", "post", "postId", "post", "post", "post", "page", "pageSize", "tagNames", "tags", "tagName", "page", "pageSize", "permalink", "post", "o1", "o2", "pageRequest"], "SCS_VariableDeclaration": ["Post", "Post", "Post", "Post", "Post", "Iterable", "List", "List", "Post", "Page", "Post", "Post", "Set", "String", "String", "StringBuilder", "Post", "SeoPostData", "List"], "SCS_MethodReference": ["add"], "CO": ["/**\n * @author Raysmond<i@raysmond.com>.\n */", "//postRepository.delete(post);", "//postRepository.delete(post);", "// Load the post first. If not, when the post is cached before while the tags not,", "// then the LAZY loading of post tags will cause an initialization error because", "// of not hibernate connection session", "// cache or not?"], "CODE": "package com.raysmond.blog.services;\n\nimport com.raysmond.blog.Constants;\nimport com.raysmond.blog.error.NotFoundException;\nimport com.raysmond.blog.models.Post;\nimport com.raysmond.blog.models.SeoPostData;\nimport com.raysmond.blog.models.Tag;\nimport com.raysmond.blog.models.dto.PostIdTitleDTO;\nimport com.raysmond.blog.models.support.PostFormat;\nimport com.raysmond.blog.models.support.PostStatus;\nimport com.raysmond.blog.models.support.PostType;\nimport com.raysmond.blog.notificators.Notificator;\nimport com.raysmond.blog.repositories.PostRepository;\nimport com.raysmond.blog.repositories.SeoPostDataRepository;\nimport com.raysmond.blog.support.web.MarkdownService;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.cache.annotation.CacheEvict;\nimport org.springframework.cache.annotation.Cacheable;\nimport org.springframework.cache.annotation.Caching;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.PageRequest;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.stereotype.Service;\n\nimport java.util.*;\n\n/**\n * @author Raysmond<i@raysmond.com>.\n */\n@Service\npublic class PostService {\n    @Autowired\n    private PostRepository postRepository;\n\n    @Autowired\n    private TagService tagService;\n\n    @Autowired\n    private UserService userService;\n\n    @Autowired\n    private MarkdownService markdownService;\n\n    @Autowired\n    private LikeService likeService;\n\n    @Autowired\n    private VisitService visitService;\n\n    @Autowired\n    private SeoPostDataRepository seoPostDataRepository;\n\n    @Autowired\n    private Notificator notificator;\n\n\n    public static final String CACHE_NAME = \"cache.post\";\n    public static final String CACHE_NAME_ARCHIVE = CACHE_NAME + \".archive\";\n    public static final String CACHE_NAME_PAGE = CACHE_NAME + \".page\";\n    public static final String CACHE_NAME_TAGS = CACHE_NAME + \".tag\";\n    public static final String CACHE_NAME_SEO_KEYWORDS = CACHE_NAME + \".seoKeyword\";\n    public static final String CACHE_NAME_COUNTS = CACHE_NAME + \".counts_tags\";\n\n    private static final Logger logger = LoggerFactory.getLogger(PostService.class);\n\n    @Cacheable(CACHE_NAME)\n    public Post getPost(Long postId) {\n        logger.debug(\"Get post \" + postId);\n\n        Post post = postRepository.findOne(postId);\n\n        if (post == null || post.getDeleted()) {\n            throw new NotFoundException(\"Post with id \" + postId + \" is not found.\");\n        }\n\n        return post;\n    }\n\n    @Cacheable(CACHE_NAME)\n    public Post getPublishedPost(Long postId) {\n        logger.debug(\"Get published post \" + postId);\n\n        Post post = this.postRepository.findByIdAndPostStatusAndDeleted(postId, PostStatus.PUBLISHED, false);\n\n        if (post == null) {\n            throw new NotFoundException(\"Post with id \" + postId + \" is not found.\");\n        }\n\n        return post;\n    }\n\n    @Cacheable(CACHE_NAME)\n    public Post getPublishedPostByPermalink(String permalink) {\n        logger.debug(\"Get post with permalink \" + permalink);\n\n        Post post = postRepository.findByPermalinkAndPostStatusAndDeleted(permalink, PostStatus.PUBLISHED, false);\n\n        if (post == null) {\n            throw new NotFoundException(\"Post with permalink '\" + permalink + \"' is not found.\");\n        }\n\n        return post;\n    }\n\n    @Caching(evict = {\n            @CacheEvict(value = CACHE_NAME_ARCHIVE, allEntries = true),\n            @CacheEvict(value = CACHE_NAME_PAGE, allEntries = true),\n            @CacheEvict(value = CACHE_NAME_COUNTS, allEntries = true)\n    })\n    public Post createPost(Post post) {\n        Post result = this.savePost(post);\n        return result;\n    }\n\n    @Caching(evict = {\n            @CacheEvict(value = CACHE_NAME, key = \"#post.id\"),\n            @CacheEvict(value = CACHE_NAME, key = \"#post.permalink\", condition = \"#post.permalink != null\"),\n            @CacheEvict(value = CACHE_NAME_TAGS, key = \"#post.id.toString().concat('-tags')\"),\n            @CacheEvict(value = CACHE_NAME_SEO_KEYWORDS, key = \"#post.id.toString().concat('-seoKeywords')\"),\n            @CacheEvict(value = CACHE_NAME_ARCHIVE, allEntries = true),\n            @CacheEvict(value = CACHE_NAME_PAGE, allEntries = true),\n            @CacheEvict(value = CACHE_NAME_COUNTS, allEntries = true)\n    })\n    public Post updatePost(Post post) {\n        return this.savePost(post);\n    }\n\n\n    private Post savePost(Post post) {\n        if (post.getPostFormat() == PostFormat.MARKDOWN) {\n            post.setRenderedContent(String.format(\"<div class=\\\"markdown-post\\\">%s</div>\", markdownService.renderToHtml(post.getContent())));\n        } else {\n            post.setRenderedContent(String.format(\"<div class=\\\"html-post\\\">%s</div>\", post.getContent()));\n        }\n        this.saveSeoData(post);\n        return postRepository.save(post);\n    }\n\n    @Caching(evict = {\n            @CacheEvict(value = CACHE_NAME, key = \"#post.id\"),\n            @CacheEvict(value = CACHE_NAME, key = \"#post.permalink\", condition = \"#post.permalink != null\"),\n            @CacheEvict(value = CACHE_NAME_TAGS, key = \"#post.id.toString().concat('-tags')\"),\n            @CacheEvict(value = CACHE_NAME_SEO_KEYWORDS, key = \"#post.id.toString().concat('-seoKeywords')\"),\n            @CacheEvict(value = CACHE_NAME_ARCHIVE, allEntries = true),\n            @CacheEvict(value = CACHE_NAME_PAGE, allEntries = true),\n            @CacheEvict(value = CACHE_NAME_COUNTS, allEntries = true)\n    })\n    public void deletePost(Post post) {\n        post.setDeleted(true);\n        postRepository.save(post);\n        //postRepository.delete(post);\n    }\n\n    @Caching(evict = {\n            @CacheEvict(value = CACHE_NAME, key = \"#post.id\"),\n            @CacheEvict(value = CACHE_NAME, key = \"#post.permalink\", condition = \"#post.permalink != null\"),\n            @CacheEvict(value = CACHE_NAME_TAGS, key = \"#post.id.toString().concat('-tags')\"),\n            @CacheEvict(value = CACHE_NAME_SEO_KEYWORDS, key = \"#post.id.toString().concat('-seoKeywords')\"),\n            @CacheEvict(value = CACHE_NAME_ARCHIVE, allEntries = true),\n            @CacheEvict(value = CACHE_NAME_PAGE, allEntries = true),\n            @CacheEvict(value = CACHE_NAME_COUNTS, allEntries = true)\n    })\n    public void deletePost(Long postId) {\n        Post post = postRepository.findOne(postId);\n        post.setDeleted(true);\n        postRepository.save(post);\n        //postRepository.delete(post);\n    }\n\n    @Cacheable(value = CACHE_NAME_ARCHIVE, key = \"#root.method.name\")\n    public List<Post> getArchivePosts() {\n        logger.debug(\"Get all archive posts from database.\");\n\n        Iterable<Post> posts = postRepository.findAllByPostTypeAndPostStatusAndDeleted(\n                PostType.POST,\n                PostStatus.PUBLISHED,\n                new PageRequest(0, Integer.MAX_VALUE, Sort.Direction.DESC, \"createdAt\"),\n                false);\n\n        List<Post> cachedPosts = new ArrayList<>();\n        posts.forEach(post -> cachedPosts.add(extractPostMeta(post)));\n\n        return cachedPosts;\n    }\n\n    @Cacheable(value = CACHE_NAME_TAGS, key = \"#post.id.toString().concat('-tags')\")\n    public List<Tag> getPostTags(Post post) {\n        logger.debug(\"Get tags of post \" + post.getId());\n\n        List<Tag> tags = new ArrayList<>();\n\n        // Load the post first. If not, when the post is cached before while the tags not,\n        // then the LAZY loading of post tags will cause an initialization error because\n        // of not hibernate connection session\n        postRepository.findOne(post.getId()).getTags().forEach(tags::add);\n        return tags;\n    }\n\n    @Cacheable(value = CACHE_NAME_SEO_KEYWORDS, key = \"#post.id.toString().concat('-seoKeywords')\")\n    public String getSeoKeywordsAsString(Post post) {\n        logger.debug(\"Get seoKeywordsAsString of post \" + post.getId());\n\n        return post.getSeoKeywords();\n    }\n\n    private Post extractPostMeta(Post post) {\n        Post archivePost = new Post();\n        archivePost.setId(post.getId());\n        archivePost.setTitle(post.getTitle());\n        archivePost.setPermalink(post.getPermalink());\n        archivePost.setCreatedAt(post.getCreatedAt());\n\n        archivePost.setSympathyCount(this.likeService.getTotalLikesByPost(post));\n        archivePost.setVisitsCount(this.visitService.getUniqueVisitsCount(post));\n\n        return archivePost;\n    }\n\n    @Cacheable(value = CACHE_NAME_PAGE, key = \"T(java.lang.String).valueOf(#page).concat('-').concat(#pageSize)\")\n    public Page<Post> getAllPublishedPostsByPage(int page, int pageSize) {\n        logger.debug(\"Get posts by page \" + page);\n\n        Page<Post> posts = postRepository.findAllByPostTypeAndPostStatusAndDeleted(\n                PostType.POST,\n                PostStatus.PUBLISHED,\n                new PageRequest(page, pageSize, Sort.Direction.DESC, \"createdAt\"),\n                false);\n\n        posts.forEach(p -> {\n            p.setSympathyCount(this.likeService.getTotalLikesByPost(p));\n            p.setVisitsCount(this.visitService.getUniqueVisitsCount(p));\n        });\n\n        return posts;\n    }\n\n    public List<Post> getAllPublishedPosts() {\n        logger.debug(\"Get all published posts\");\n\n        return this.postRepository.findAllByPostTypeAndPostStatusAndDeleted(PostType.POST, PostStatus.PUBLISHED, false);\n    }\n\n    public List<Post> getAllPosts() {\n        return this.postRepository.findAll();\n    }\n\n    public Post createAboutPage() {\n        logger.debug(\"Create default about page\");\n\n        Post post = new Post();\n        post.setTitle(Constants.ABOUT_PAGE_PERMALINK);\n        post.setContent(Constants.ABOUT_PAGE_PERMALINK.toLowerCase());\n        post.setPermalink(Constants.ABOUT_PAGE_PERMALINK);\n        post.setUser(userService.getSuperUser());\n        post.setPostFormat(PostFormat.MARKDOWN);\n\n        return createPost(post);\n    }\n\n    public Post createProjectsPage() {\n        logger.debug(\"Create default projects page\");\n\n        Post post = new Post();\n        post.setTitle(Constants.PROJECTS_PAGE_PERMALINK);\n        post.setContent(Constants.PROJECTS_PAGE_PERMALINK.toLowerCase());\n        post.setPermalink(Constants.PROJECTS_PAGE_PERMALINK);\n        post.setUser(userService.getSuperUser());\n        post.setPostFormat(PostFormat.MARKDOWN);\n\n        return createPost(post);\n    }\n\n    public Set<Tag> parseTagNames(String tagNames) {\n        Set<Tag> tags = new HashSet<>();\n\n        if (tagNames != null && !tagNames.isEmpty()) {\n            tagNames = tagNames.toLowerCase();\n            String[] names = tagNames.split(\"\\\\s*,\\\\s*\");\n            for (String name : names) {\n                tags.add(tagService.findOrCreateByName(name));\n            }\n        }\n\n        return tags;\n    }\n\n    public String getTagNames(Set<Tag> tags) {\n        if (tags == null || tags.isEmpty())\n            return \"\";\n\n        StringBuilder names = new StringBuilder();\n        tags.forEach(tag -> names.append(tag.getName()).append(\",\"));\n        names.deleteCharAt(names.length() - 1);\n\n        return names.toString();\n    }\n\n    // cache or not?\n    public Page<Post> findPostsByTag(String tagName, int page, int pageSize) {\n        return postRepository.findByTag(tagName, new PageRequest(page, pageSize, Sort.Direction.DESC, \"createdAt\"));\n    }\n\n    @Cacheable(value = CACHE_NAME_COUNTS, key = \"#root.method.name\")\n    public List<Object[]> countPostsByTags() {\n        logger.debug(\"Count posts group by tags.\");\n\n        return postRepository.countPostsByTags(PostStatus.PUBLISHED);\n    }\n\n    public Post findPostByPermalink(String permalink) {\n        Post post = null;\n\n        try{\n            post = this.getPublishedPostByPermalink(permalink);\n        } catch (NotFoundException ex){\n            if (permalink.matches(\"\\\\d+\")) {\n                if (this.userService.isCurrentUserAdmin()) {\n                    post = this.getPost(Long.valueOf(permalink));\n                } else {\n                    post = this.getPublishedPost(Long.valueOf(permalink));\n                }\n            } else if (permalink.toLowerCase().trim().equals(Constants.PROJECTS_PAGE_PERMALINK)) {\n                post = this.createProjectsPage();\n            }\n        }\n\n        if (post == null) {\n            throw new NotFoundException(\"Post with permalink \" + permalink + \" is not found\");\n        }\n\n        return post;\n    }\n\n    private void saveSeoData(Post post) {\n        if (post.getSeoData() != null && post.getSeoData().getId() == null) {\n            SeoPostData data = post.getSeoData();\n            this.seoPostDataRepository.save(data);\n        }\n    }\n\n    public List<PostIdTitleDTO> getPostsIdTitleList() {\n        List<PostIdTitleDTO> result = new ArrayList<>();\n        this.getAllPosts().forEach(p -> {\n            result.add(new PostIdTitleDTO(p.getId(), p.getTitle()));\n        });\n        Collections.sort(result, new Comparator<PostIdTitleDTO>() {\n            @Override\n            public int compare(PostIdTitleDTO o1, PostIdTitleDTO o2) {\n                return Long.compare(o2.getId(), o1.getId());\n            }\n        });\n        return result;\n    }\n\n\n    public Page<Post> findAllPosts(PageRequest pageRequest) {\n        return postRepository.findAllByDeleted(pageRequest, false);\n    }\n\n}\n", "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/services/LikeService.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["LikeService"], "AN": ["likeRepository", "userService"], "SCS_VariableDeclarator": ["likeRepository", "userService", "user", "currentSympathy", "sympathyDelta", "user", "currentSympathy", "sympathyDelta", "like"], "MN": ["getTotalLikesByPost", "getTotalLikesByUserAndPost", "likePost", "dislikePost", "saveSympathy"], "PN": ["post", "user", "post", "post", "clientIp", "post", "clientIp", "post", "user", "clientIp", "sympathy"], "SCS_MemberReference": ["likeRepository", "post", "likeRepository", "user", "post", "userService", "user", "currentSympathy", "likeRepository", "user", "post", "currentSympathy", "likeRepository", "clientIp", "post", "currentSympathy", "currentSympathy", "currentSympathy", "post", "user", "clientIp", "sympathyDelta", "userService", "user", "currentSympathy", "likeRepository", "user", "post", "currentSympathy", "likeRepository", "clientIp", "post", "currentSympathy", "currentSympathy", "currentSympathy", "post", "user", "clientIp", "sympathyDelta", "clientIp", "post", "user", "user", "sympathy", "likeRepository", "like"], "SCS_ClassReference": [null, null, null, null, null, null, null, null, null, null, "like", "like", "like", "like", "user", "like", null], "SCS_MethodInvocation": ["getTotalLikesByPost", "getTotalLikesByUserAndPost", "currentUser", "getTotalLikesByUserAndPost", "getTotalLikesByClientIpAndPost", "saveSympathy", "currentUser", "getTotalLikesByUserAndPost", "getTotalLikesByClientIpAndPost", "saveSympathy", "setClientIp", "setPost", "setUser", "setIsAdmin", "isAdmin", "setSympathy", "save"], "SCS_VariableDeclaration": ["User", "Integer", "Integer", "User", "Integer", "Integer", "Like"], "CO": [], "CODE": "package com.raysmond.blog.services;\n\nimport com.raysmond.blog.models.Like;\nimport com.raysmond.blog.models.Post;\nimport com.raysmond.blog.models.User;\nimport com.raysmond.blog.repositories.LikeRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class LikeService {\n\n    @Autowired\n    private LikeRepository likeRepository;\n\n    @Autowired\n    private UserService userService;\n\n\n    public Integer getTotalLikesByPost(Post post) {\n        return this.likeRepository.getTotalLikesByPost(post);\n    }\n\n    public Integer getTotalLikesByUserAndPost(User user, Post post) {\n        return this.likeRepository.getTotalLikesByUserAndPost(user, post);\n    }\n\n    public void likePost(Post post, String clientIp) {\n        User user = this.userService.currentUser();\n        Integer currentSympathy = 0;\n\n        if (user != null) {\n            currentSympathy = this.likeRepository.getTotalLikesByUserAndPost(user, post);\n        } else {\n            currentSympathy = this.likeRepository.getTotalLikesByClientIpAndPost(clientIp, post);\n        }\n        if (currentSympathy == null) currentSympathy = 0;\n\n        Integer sympathyDelta = -currentSympathy + 1;\n        this.saveSympathy(post, user, clientIp, sympathyDelta);\n    }\n\n    public void dislikePost(Post post, String clientIp) {\n        User user = this.userService.currentUser();\n        Integer currentSympathy = 0;\n\n        if (user != null) {\n            currentSympathy = this.likeRepository.getTotalLikesByUserAndPost(user, post);\n        } else {\n            currentSympathy = this.likeRepository.getTotalLikesByClientIpAndPost(clientIp, post);\n        }\n        if (currentSympathy == null) currentSympathy = 0;\n\n        Integer sympathyDelta = -currentSympathy - 1;\n        this.saveSympathy(post, user, clientIp, sympathyDelta);\n    }\n\n    private void saveSympathy(Post post, User user, String clientIp, Integer sympathy) {\n        Like like = new Like();\n        like.setClientIp(clientIp);\n        like.setPost(post);\n        like.setUser(user);\n        like.setIsAdmin(user != null ? user.isAdmin() : false);\n        like.setSympathy(sympathy);\n        this.likeRepository.save(like);\n    }\n\n}\n", "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/services/AdsConfig.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["AdsConfig"], "AN": ["logger", "adsenceHeadCodePath", "adsenceHeadCode", "adsenceTopCodePath", "adsenceTopCode", "adsenceBottomCodePath", "adsenceBottomCode", "yandexBottomCodePath", "yandexBottomCode", "yandexTopCodePath", "yandexTopCode", "yandexMainPageCodePath", "yandexMainPageCode"], "SCS_VariableDeclarator": ["logger", "adsenceHeadCodePath", "adsenceHeadCode", "adsenceTopCodePath", "adsenceTopCode", "adsenceBottomCodePath", "adsenceBottomCode", "yandexBottomCodePath", "yandexBottomCode", "yandexTopCodePath", "yandexTopCode", "yandexMainPageCodePath", "yandexMainPageCode", "sb", "line"], "SCS_ClassReference": ["LoggerFactory", "AdsConfig", "", "", "", "", "", "", null, "reader", "sb", "sb", "logger"], "SCS_MethodInvocation": ["getLogger", "readFile", "readFile", "readFile", "readFile", "readFile", "readFile", "getInputStream", "readLine", "append", "toString", "error"], "MN": ["init", "readFile"], "PN": ["filePath"], "SCS_MemberReference": ["adsenceHeadCode", "adsenceHeadCodePath", "adsenceTopCode", "adsenceTopCodePath", "adsenceBottomCode", "adsenceBottomCodePath", "yandexTopCode", "yandexTopCodePath", "yandexBottomCode", "yandexBottomCodePath", "yandexMainPageCode", "yandexMainPageCodePath", "filePath", "line", "line", "filePath", "e"], "SCS_VariableDeclaration": ["StringBuilder", "String"], "CO": ["/**\n * Created by bvn13 on 05.07.2018.\n */"], "CODE": "package com.raysmond.blog.services;\n\nimport com.domingosuarez.boot.autoconfigure.jade4j.JadeHelper;\nimport lombok.Getter;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.io.ClassPathResource;\n\nimport javax.annotation.PostConstruct;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\n\n/**\n * Created by bvn13 on 05.07.2018.\n */\n@JadeHelper(\"Ads\")\n@Configuration\npublic class AdsConfig {\n\n    private static final Logger logger = LoggerFactory.getLogger(AdsConfig.class);\n\n    @Value(\"${app.ads.adsence.head}\")\n    private String adsenceHeadCodePath;\n    @Getter\n    private String adsenceHeadCode = \"\";\n\n    @Value(\"${app.ads.adsence.top}\")\n    private String adsenceTopCodePath;\n    @Getter\n    private String adsenceTopCode = \"\";\n\n    @Value(\"${app.ads.adsence.bottom}\")\n    private String adsenceBottomCodePath;\n    @Getter\n    private String adsenceBottomCode = \"\";\n\n    @Value(\"${app.ads.yandex.bottom}\")\n    private String yandexBottomCodePath;\n    @Getter\n    private String yandexBottomCode = \"\";\n\n    @Value(\"${app.ads.yandex.top}\")\n    private String yandexTopCodePath;\n    @Getter\n    private String yandexTopCode = \"\";\n\n    @Value(\"${app.ads.yandex.main_page}\")\n    private String yandexMainPageCodePath;\n    @Getter\n    private String yandexMainPageCode = \"\";\n\n\n    @PostConstruct\n    private void init() {\n        adsenceHeadCode = readFile(adsenceHeadCodePath);\n\n        adsenceTopCode = readFile(adsenceTopCodePath);\n        adsenceBottomCode = readFile(adsenceBottomCodePath);\n\n        yandexTopCode = readFile(yandexTopCodePath);\n        yandexBottomCode = readFile(yandexBottomCodePath);\n\n        yandexMainPageCode = readFile(yandexMainPageCodePath);\n    }\n\n\n    private String readFile(String filePath) {\n        StringBuilder sb = new StringBuilder();\n        String line;\n        try (BufferedReader reader = new BufferedReader(\n                new InputStreamReader((new ClassPathResource(filePath)).getInputStream())\n        )) {\n            while ((line = reader.readLine()) != null) {\n                sb.append(line);\n            }\n            return sb.toString();\n        } catch (Exception e) {\n            logger.error(\"ERROR loading file: \"+filePath, e);\n            return \"\";\n        }\n    }\n\n}\n", "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/services/UserService.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["UserService"], "AN": ["logger", "userRepository", "passwordEncoder"], "SCS_VariableDeclarator": ["logger", "userRepository", "passwordEncoder", "superUsers", "user", "user", "auth", "email", "user", "isAdmin", "match"], "SCS_ClassReference": ["LoggerFactory", "UserService", "", "user", "passwordEncoder", "user", "userRepository", null, "superUsers", null, "superUsers", "userRepository", "", "userRepository", "", "SecurityContextHolder", null, "auth", "userRepository", null, "user", "password", "newPassword", "logger", "passwordEncoder", "user", "passwordEncoder", "user", "user", "passwordEncoder", "userRepository", "logger", "user", "SecurityContextHolder", null, "", "", "Collections", "", "user", "user", "Collections", "", "user"], "SCS_MethodInvocation": ["getLogger", "getSuperUser", "setPassword", "encode", "getPassword", "save", "findAllByRoleOrderById", "size", "getDefaultSuperUser", "get", "findByEmail", "createUser", "findByEmail", "createSpringUser", "getContext", "getAuthentication", "getPrincipal", "findByEmail", "currentUser", "isAdmin", "isEmpty", "isEmpty", "info", "matches", "getPassword", "matches", "getPassword", "setPassword", "encode", "save", "info", "getEmail", "getContext", "setAuthentication", "authenticate", "createSpringUser", "singleton", "createAuthority", "getEmail", "getPassword", "singleton", "createAuthority", "getRole"], "MN": ["initialize", "createUser", "getSuperUser", "getDefaultSuperUser", "loadUserByUsername", "currentUser", "isCurrentUserAdmin", "changePassword", "signin", "authenticate", "createSpringUser", "createAuthority"], "PN": ["user", "username", "user", "password", "newPassword", "user", "user", "user", "user"], "SCS_MemberReference": ["user", "userRepository", "ROLE_ADMIN", "superUsers", "DEFAULT_ADMIN_EMAIL", "user", "user", "DEFAULT_ADMIN_EMAIL", "DEFAULT_ADMIN_PASSWORD", "ROLE_ADMIN", "user", "username", "user", "user", "auth", "auth", "email", "user", "isAdmin", "password", "newPassword", "password", "password", "match", "newPassword", "user", "user", "user", "user", "user"], "SCS_VariableDeclaration": ["List", "User", "User", "Authentication", "String", "User", "Boolean", "boolean"], "CO": [], "CODE": "package com.raysmond.blog.services;\n\nimport java.util.Collections;\nimport java.util.List;\n\nimport javax.annotation.PostConstruct;\nimport javax.inject.Inject;\n\nimport com.domingosuarez.boot.autoconfigure.jade4j.JadeHelper;\nimport com.raysmond.blog.Constants;\nimport com.raysmond.blog.models.User;\nimport com.raysmond.blog.repositories.UserRepository;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.authentication.AnonymousAuthenticationToken;\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\nimport org.springframework.security.core.*;\nimport org.springframework.security.core.authority.SimpleGrantedAuthority;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.security.core.userdetails.*;\nimport org.springframework.security.crypto.password.PasswordEncoder;\n\n@JadeHelper(\"userService\")\npublic class UserService implements UserDetailsService {\n\n    private static final Logger logger = LoggerFactory.getLogger(UserService.class);\n\n    @Autowired\n    private UserRepository userRepository;\n\n    @Inject\n    private PasswordEncoder passwordEncoder;\n\n    @PostConstruct\n    protected void initialize() {\n        getSuperUser();\n    }\n\n    public User createUser(User user){\n        user.setPassword(passwordEncoder.encode(user.getPassword()));\n        return userRepository.save(user);\n    }\n\n    public User getSuperUser() {\n        List<User> superUsers = this.userRepository.findAllByRoleOrderById(User.ROLE_ADMIN);\n        if (superUsers == null || superUsers.size() == 0) {\n            return this.getDefaultSuperUser();\n        }\n        return superUsers.get(0);\n    }\n\n    public User getDefaultSuperUser(){\n        User user = userRepository.findByEmail(Constants.DEFAULT_ADMIN_EMAIL);\n\n        if (user == null) {\n            user = createUser(new User(Constants.DEFAULT_ADMIN_EMAIL, Constants.DEFAULT_ADMIN_PASSWORD, User.ROLE_ADMIN));\n        }\n\n        return user;\n    }\n\n    @Override\n    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n        User user = userRepository.findByEmail(username);\n        if (user == null) {\n            throw new UsernameNotFoundException(\"user not found\");\n        }\n        return createSpringUser(user);\n    }\n\n    public User currentUser(){\n        Authentication auth = SecurityContextHolder.getContext().getAuthentication();\n        if(auth == null || auth instanceof AnonymousAuthenticationToken){\n            return null;\n        }\n\n        String email = ((org.springframework.security.core.userdetails.User) auth.getPrincipal()).getUsername();\n\n        return userRepository.findByEmail(email);\n    }\n\n    public Boolean isCurrentUserAdmin() {\n        User user = this.currentUser();\n        Boolean isAdmin = user != null ? user.isAdmin() : false;\n        return isAdmin;\n    }\n\n    public boolean changePassword(User user, String password, String newPassword){\n        if (password == null || newPassword == null || password.isEmpty() || newPassword.isEmpty())\n            return false;\n\n        logger.info(\"\" + passwordEncoder.matches(password, user.getPassword()));\n        boolean match = passwordEncoder.matches(password, user.getPassword());\n        if (!match)\n            return false;\n\n        user.setPassword(passwordEncoder.encode(newPassword));\n        userRepository.save(user);\n\n        logger.info(\"User @\"+user.getEmail() + \" changed password.\");\n\n        return true;\n    }\n\n    public void signin(User user) {\n        SecurityContextHolder.getContext().setAuthentication(authenticate(user));\n    }\n\n    private Authentication authenticate(User user) {\n        return new UsernamePasswordAuthenticationToken(createSpringUser(user), null, Collections.singleton(createAuthority(user)));\n    }\n\n    private org.springframework.security.core.userdetails.User createSpringUser(User user) {\n        return new org.springframework.security.core.userdetails.User(\n                user.getEmail(),\n                user.getPassword(),\n                Collections.singleton(createAuthority(user)));\n    }\n\n    private GrantedAuthority createAuthority(User user) {\n        return new SimpleGrantedAuthority(user.getRole());\n    }\n\n}\n", "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/services/FileStorageService.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["FileStorageService"], "AN": ["logger", "appSetting", "repository", "userService"], "SCS_VariableDeclarator": ["logger", "appSetting", "repository", "userService", "file", "storage", "separator", "fullname", "path", "file", "storedFile", "storedFile", "path", "storedFile", "path"], "SCS_ClassReference": ["LoggerFactory", "FileStorageService", "logger", "appSetting", "repository", "repository", "fileName", null, "Long", "file", "appSetting", "appSetting", "storage", "storage", "appSetting", null, "appSetting", "Paths", "Files", "storedFile", "storedFile", null, "storedFile", "storedFile", "storedFile", "file", null, null, "", "Paths", "file", "Files", null, "Paths", "storedFile", null, "Files", "HttpContentTypeSerializer"], "SCS_MethodInvocation": ["getLogger", "debug", "getStoragePath", "findById", "findByName", "matches", "getFileById", "valueOf", "setStoragePath", "getStoragePath", "getStoragePath", "exists", "mkdirs", "getStoragePath", "endsWith", "getStoragePath", "get", "write", "setPath", "setUser", "currentUser", "setTitle", "setName", "setSize", "length", "saveAndFlush", "findById", "getFileContent", "get", "getFullPath", "readAllBytes", "findById", "get", "getPath", "delete", "delete", "getContentType"], "SCS_ConstructorDeclaration": ["FileStorageService"], "SCS_MemberReference": ["repository", "repository", "appSetting", "appSetting", "id", "file", "fileName", "file", "file", "fileName", "file", "fileName", "file", "separator", "separator", "filename", "fullname", "path", "content", "fullname", "filename", "userService", "filename", "filename", "repository", "storedFile", "repository", "fileId", "storedFile", "path", "repository", "fileId", "repository", "storedFile", "path", "fileName"], "MN": ["getFileById", "getFileByName", "storeFile", "getFileContentById", "getFileContent", "deleteFileById", "getContentType"], "PN": ["id", "fileName", "filename", "content", "fileId", "file", "fileId", "fileName"], "SCS_VariableDeclaration": ["StoredFile", "File", "String", "String", "Path", "File", "StoredFile", "StoredFile", "Path", "StoredFile", "Path"], "CO": ["// first delete info, second delete file", "// because file might be deleted already"], "CODE": "package com.raysmond.blog.services;\n\n\nimport com.raysmond.blog.error.NotFoundException;\nimport com.raysmond.blog.models.StoredFile;\nimport com.raysmond.blog.support.web.HttpContentTypeSerializer;\nimport com.raysmond.blog.repositories.StoredFileRepository;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\n\n@Service\npublic class FileStorageService {\n\n    public static final Logger logger = LoggerFactory.getLogger(FileStorageService.class);\n\n    private AppSetting appSetting;\n\n    private StoredFileRepository repository;\n\n    @Autowired\n    private UserService userService;\n\n    @Autowired\n    public FileStorageService(StoredFileRepository repository, AppSetting appSetting) {\n        this.repository = repository;\n        this.appSetting = appSetting;\n        logger.debug(\"== UPLOAD PATH == > \"+appSetting.getStoragePath());\n    }\n\n    public StoredFile getFileById(Long id) {\n        return repository.findById(id);\n    }\n\n    public StoredFile getFileByName(String fileName) {\n        StoredFile file = null;\n\n        file = repository.findByName(fileName);\n        if (file == null) {\n            if (fileName.matches(\"\\\\d+\")) {\n                file = this.getFileById(Long.valueOf(fileName));\n            }\n        }\n\n        if (file == null) {\n            throw new NotFoundException(\"File \" + fileName + \" is not found\");\n        }\n\n        file.setStoragePath(appSetting.getStoragePath());\n\n        return file;\n    }\n\n    public void storeFile(String filename, byte[] content) throws IOException {\n        File storage = new File(appSetting.getStoragePath());\n        if (!storage.exists()) {\n            storage.mkdirs();\n        }\n        String separator = \"\";\n        if (!appSetting.getStoragePath().endsWith(\"//\")) {\n            separator = \"//\";\n        }\n        String fullname = appSetting.getStoragePath() + separator + filename;\n        Path path = Paths.get(fullname);\n        Files.write(path, content);\n\n        File file = new File(fullname);\n\n        StoredFile storedFile = new StoredFile();\n        storedFile.setPath(filename);\n        storedFile.setUser(this.userService.currentUser());\n        storedFile.setTitle(filename);\n        storedFile.setName(filename);\n        storedFile.setSize(file.length());\n\n        this.repository.saveAndFlush(storedFile);\n    }\n\n    public byte[] getFileContentById(Long fileId) throws IOException {\n        StoredFile storedFile = this.repository.findById(fileId);\n        return getFileContent(storedFile);\n    }\n\n    public byte[] getFileContent(StoredFile file) throws IOException {\n        Path path = Paths.get(file.getFullPath());\n        return Files.readAllBytes(path);\n    }\n\n    public void deleteFileById(Long fileId) throws IOException {\n        StoredFile storedFile = this.repository.findById(fileId);\n        Path path = Paths.get(storedFile.getPath());\n        // first delete info, second delete file\n        // because file might be deleted already\n        this.repository.delete(storedFile);\n        Files.delete(path);\n    }\n\n    public String getContentType(String fileName) {\n        return HttpContentTypeSerializer.getContentType(fileName);\n    }\n\n\n}\n", "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/services/TelegramBotSettings.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["TelegramBotSettings"], "AN": ["enabled", "botName", "botChannel", "botTokenFile", "masterName", "proxyHost", "proxyPort", "proxyUsername", "proxyPassword", "proxyType", "inited", "botToken"], "SCS_VariableDeclarator": ["enabled", "botName", "botChannel", "botTokenFile", "masterName", "proxyHost", "proxyPort", "proxyUsername", "proxyPassword", "proxyType", "inited", "botToken", "sb", "line"], "MN": ["isActive", "isProxySet", "isProxyAuthorized", "init"], "PN": [], "SCS_MemberReference": ["inited", "enabled", "proxyHost", "proxyUsername", "botTokenFile", "line", "line", "botToken", "inited", "e"], "SCS_ClassReference": ["proxyHost", "proxyUsername", null, "reader", "sb", "sb", "botToken", "log"], "SCS_MethodInvocation": ["isEmpty", "isEmpty", "getInputStream", "readLine", "append", "toString", "length", "error"], "SCS_VariableDeclaration": ["StringBuilder", "String"], "CO": ["/**\n * Created by bvn13 on 21.12.2017.\n */"], "CODE": "package com.raysmond.blog.services;\n\nimport lombok.Getter;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.core.io.ClassPathResource;\nimport org.springframework.stereotype.Component;\n\nimport javax.annotation.PostConstruct;\nimport java.io.*;\n\n/**\n * Created by bvn13 on 21.12.2017.\n */\n@Slf4j\n@Component\npublic class TelegramBotSettings {\n\n    @Getter\n    @Value(\"${telegram.bot.enabled}\")\n    private Boolean enabled;\n\n    @Getter\n    @Value(\"${telegram.bot.name}\")\n    private String botName;\n\n    @Getter\n    @Value(\"${telegram.bot.channel}\")\n    private String botChannel;\n\n    @Getter\n    @Value(\"${telegram.bot.token_file}\")\n    private String botTokenFile;\n\n    @Getter\n    @Value(\"${telegram.bot.master_name}\")\n    private String masterName;\n\n    @Getter\n    @Value(\"${telegram.bot.proxy.host}\")\n    private String proxyHost;\n    @Getter\n    @Value(\"${telegram.bot.proxy.port}\")\n    private Integer proxyPort;\n    @Getter\n    @Value(\"${telegram.bot.proxy.username}\")\n    private String proxyUsername;\n    @Getter\n    @Value(\"${telegram.bot.proxy.password}\")\n    private String proxyPassword;\n    @Getter\n    @Value(\"${telegram.bot.proxy.type}\")\n    private String proxyType;\n\n    @Getter\n    private Boolean inited = false;\n\n    @Getter\n    private String botToken = \"\";\n\n    public boolean isActive() {\n        return inited && enabled;\n    }\n\n    public boolean isProxySet() {\n        return proxyHost != null && !proxyHost.isEmpty();\n    }\n\n    public boolean isProxyAuthorized() {\n        return proxyUsername != null && !proxyUsername.isEmpty();\n    }\n\n    @PostConstruct\n    public void init() {\n        StringBuilder sb = new StringBuilder();\n        String line;\n        try (BufferedReader reader\n                     = new BufferedReader(new InputStreamReader(\n                             (new ClassPathResource(botTokenFile)).getInputStream()\n                     ))\n        ) {\n            while ((line = reader.readLine()) != null) {\n                sb.append(line);\n            }\n            botToken = sb.toString();\n            inited = botToken.length() > 0;\n        } catch (Exception e) {\n            log.error(\"Error\", e);\n        }\n    }\n\n}\n", "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/services/TagService.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["TagService"], "AN": ["tagRepository", "logger", "CACHE_NAME", "CACHE_NAME_TAGS", "CACHE_TYPE", "CACHE_KEY", "CACHE_TAG_KEY"], "SCS_VariableDeclarator": ["tagRepository", "logger", "CACHE_NAME", "CACHE_NAME_TAGS", "CACHE_TYPE", "CACHE_KEY", "CACHE_TAG_KEY", "tag"], "SCS_ClassReference": ["LoggerFactory", "PostService", "tagRepository", "tagRepository", "tagRepository", "tagRepository", "tagRepository"], "SCS_MethodInvocation": ["getLogger", "findByName", "save", "findByName", "delete", "findAll"], "SCS_MemberReference": ["CACHE_TYPE", "CACHE_TYPE", "tagRepository", "tagRepository", "name", "tag", "tag", "name", "tag", "CACHE_NAME", "CACHE_KEY", "tagName", "CACHE_NAME", "CACHE_TAG_KEY", "CACHE_NAME_TAGS", "tag", "CACHE_NAME_TAGS"], "SCS_ConstructorDeclaration": ["TagService"], "MN": ["findOrCreateByName", "getTag", "deleteTag", "getAllTags"], "PN": ["name", "tagName", "tag"], "SCS_VariableDeclaration": ["Tag"], "CO": ["/**\n * @author Raysmond<i@raysmond.com>.\n */"], "CODE": "package com.raysmond.blog.services;\n\nimport com.raysmond.blog.models.Tag;\nimport com.raysmond.blog.repositories.TagRepository;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.cache.annotation.CacheEvict;\nimport org.springframework.cache.annotation.Cacheable;\nimport org.springframework.cache.annotation.Caching;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\n\n\n/**\n * @author Raysmond<i@raysmond.com>.\n */\n@Service\npublic class TagService {\n    private TagRepository tagRepository;\n\n    private static final Logger logger = LoggerFactory.getLogger(PostService.class);\n\n    public static final String CACHE_NAME = \"cache.tag\";\n    public static final String CACHE_NAME_TAGS = \"cache.tag.all\";\n\n    public static final String CACHE_TYPE = \"'_Tag_'\";\n    public static final String CACHE_KEY = CACHE_TYPE + \" + #tagName\";\n    public static final String CACHE_TAG_KEY = CACHE_TYPE + \" + #tag.name\";\n\n    @Autowired\n    public TagService(TagRepository tagRepository){\n        this.tagRepository = tagRepository;\n    }\n\n    public Tag findOrCreateByName(String name){\n        Tag tag = tagRepository.findByName(name);\n        if (tag == null){\n            tag = tagRepository.save(new Tag(name));\n        }\n        return tag;\n    }\n\n    @Cacheable(value = CACHE_NAME, key = CACHE_KEY)\n    public Tag getTag(String tagName) {\n        return tagRepository.findByName(tagName);\n    }\n\n    @Caching(evict = {\n            @CacheEvict(value = CACHE_NAME, key = CACHE_TAG_KEY),\n            @CacheEvict(value = CACHE_NAME_TAGS, allEntries = true)\n    })\n    public void deleteTag(Tag tag){\n        tagRepository.delete(tag);\n    }\n\n    @Cacheable(value = CACHE_NAME_TAGS, key = \"#root.method.name\")\n    public List<Tag> getAllTags(){\n        return tagRepository.findAll();\n    }\n\n}\n", "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/services/SeoService.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["SeoService"], "AN": ["dateFormatter", "appSetting"], "SCS_VariableDeclarator": ["dateFormatter", "appSetting", "slash", "docFactory", "docBuilder", "doc", "root", "post", "url", "loc", "lastMod", "changeFreq", "transformerFactory", "transformer", "source", "sw"], "MN": ["createSitemap"], "PN": ["posts"], "SCS_VariableDeclaration": ["String", "DocumentBuilderFactory", "DocumentBuilder", "Document", "Element", "Post", "Element", "Element", "Element", "Element", "TransformerFactory", "Transformer", "DOMSource", "StringWriter"], "SCS_ClassReference": ["appSetting", null, null, "DocumentBuilderFactory", "docFactory", "docBuilder", "doc", "root", "doc", "doc", "doc", "loc", "doc", "String", "appSetting", null, "post", "post", null, "post", "post", "url", "doc", "lastMod", "doc", "dateFormatter", "post", "url", "doc", "changeFreq", "doc", "url", "root", "TransformerFactory", "transformerFactory", "transformer", "sw", "log"], "SCS_MethodInvocation": ["getMainUri", "trim", "endsWith", "newInstance", "newDocumentBuilder", "newDocument", "createElement", "setAttribute", "appendChild", "createElement", "createElement", "appendChild", "createTextNode", "format", "getMainUri", "trim", "getPermalink", "getPermalink", "isEmpty", "getId", "getPermalink", "appendChild", "createElement", "appendChild", "createTextNode", "format", "getUpdatedAt", "appendChild", "createElement", "appendChild", "createTextNode", "appendChild", "appendChild", "newInstance", "newTransformer", "transform", "toString", "error"], "SCS_MemberReference": ["root", "posts", "slash", "loc", "lastMod", "changeFreq", "url", "doc", "doc", "sw", "e"], "CO": ["//loc", "//lastmod", "//yyyy-MM-dd'T'HH:mm:ss", "//", "// write the content into xml file"], "CODE": "package com.raysmond.blog.services;\n\nimport com.raysmond.blog.models.Post;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\n\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.ParserConfigurationException;\nimport javax.xml.transform.Transformer;\nimport javax.xml.transform.TransformerException;\nimport javax.xml.transform.TransformerFactory;\nimport javax.xml.transform.dom.DOMSource;\nimport javax.xml.transform.stream.StreamResult;\nimport java.io.StringWriter;\nimport java.text.SimpleDateFormat;\nimport java.util.List;\n\n@Slf4j\n@Service\npublic class SeoService {\n\n    private static final SimpleDateFormat dateFormatter = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ssXXX\");\n\n    @Autowired\n    private AppSetting appSetting;\n\n\n    public String createSitemap(List<Post> posts) {\n\n        String slash = appSetting.getMainUri().trim().endsWith(\"/\") ? \"\" : \"/\";\n\n        try {\n            DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();\n            DocumentBuilder docBuilder = docFactory.newDocumentBuilder();\n\n            Document doc = docBuilder.newDocument();\n            Element root = doc.createElement(\"urlset\");\n            root.setAttribute(\"xmlns\", \"http://www.sitemaps.org/schemas/sitemap/0.9\");\n            doc.appendChild(root);\n\n            for(Post post : posts) {\n                Element url = doc.createElement(\"url\");\n                //loc\n                Element loc = doc.createElement(\"loc\");\n                loc.appendChild(doc.createTextNode(String.format(\"%s%sposts/%s\", appSetting.getMainUri().trim(), slash, post.getPermalink() == null || post.getPermalink().isEmpty() ? post.getId() : post.getPermalink())));\n                url.appendChild(loc);\n                //lastmod\n                //yyyy-MM-dd'T'HH:mm:ss\n                Element lastMod = doc.createElement(\"lastmod\");\n                lastMod.appendChild(doc.createTextNode(dateFormatter.format(post.getUpdatedAt())));\n                url.appendChild(lastMod);\n                //\n                Element changeFreq = doc.createElement(\"changefreq\");\n                changeFreq.appendChild(doc.createTextNode(\"daily\"));\n                url.appendChild(changeFreq);\n\n                root.appendChild(url);\n            }\n\n            // write the content into xml file\n            TransformerFactory transformerFactory = TransformerFactory.newInstance();\n            Transformer transformer = transformerFactory.newTransformer();\n            DOMSource source = new DOMSource(doc);\n\n            StringWriter sw = new StringWriter();\n            transformer.transform(new DOMSource(doc), new StreamResult(sw));\n            return sw.toString();\n\n        } catch (ParserConfigurationException | TransformerException e) {\n            log.error(\"Error\", e);\n            return null;\n        }\n\n    }\n\n}\n", "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/services/AppSetting.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["AppSetting"], "AN": ["logger", "settingService", "siteName", "siteSlogan", "pageSize", "storagePath", "mainUri", "telegramMasterChatId", "subscriptionLink", "SITE_NAME", "SITE_SLOGAN", "PAGE_SIZE", "STORAGE_PATH", "MAIN_URI", "TELEGRAM_MASTER_CHAT_ID", "SUBSCRIPTION_LINK"], "SCS_VariableDeclarator": ["logger", "settingService", "siteName", "siteSlogan", "pageSize", "storagePath", "mainUri", "telegramMasterChatId", "subscriptionLink", "SITE_NAME", "SITE_SLOGAN", "PAGE_SIZE", "STORAGE_PATH", "MAIN_URI", "TELEGRAM_MASTER_CHAT_ID", "SUBSCRIPTION_LINK", "uri", "uri", "ogLocales", "ogTypes"], "SCS_ClassReference": ["LoggerFactory", "AppSetting", "settingService", "settingService", "settingService", "settingService", "settingService", "settingService", "settingService", "settingService", "settingService", "uri", "settingService", "uri", "uri", "uri", "settingService", "settingService", "settingService", "settingService", "settingService", "ogLocales", "ogLocales", "ogTypes"], "SCS_MethodInvocation": ["getLogger", "get", "put", "get", "put", "get", "put", "get", "put", "get", "endsWith", "get", "endsWith", "substring", "length", "put", "get", "put", "get", "put", "add", "add", "add"], "SCS_ConstructorDeclaration": ["AppSetting"], "SCS_MemberReference": ["settingService", "settingService", "SITE_NAME", "siteName", "siteName", "siteName", "SITE_NAME", "siteName", "PAGE_SIZE", "pageSize", "pageSize", "pageSize", "PAGE_SIZE", "pageSize", "SITE_SLOGAN", "siteSlogan", "siteSlogan", "siteSlogan", "SITE_SLOGAN", "siteSlogan", "STORAGE_PATH", "storagePath", "storagePath", "storagePath", "STORAGE_PATH", "storagePath", "MAIN_URI", "mainUri", "uri", "uri", "MAIN_URI", "mainUri", "uri", "uri", "mainUri", "mainUri", "MAIN_URI", "mainUri", "TELEGRAM_MASTER_CHAT_ID", "telegramMasterChatId", "telegramMasterChatId", "id", "TELEGRAM_MASTER_CHAT_ID", "id", "SUBSCRIPTION_LINK", "subscriptionLink", "subscriptionLink", "link", "SUBSCRIPTION_LINK", "link", "ogLocales", "ogTypes"], "MN": ["getSiteName", "setSiteName", "getPageSize", "setPageSize", "getSiteSlogan", "setSiteSlogan", "getStoragePath", "setStoragePath", "getMainUri", "getMainUriStripped", "setMainUri", "getTelegramMasterChatId", "setTelegramMasterChatId", "getSubscriptionLink", "setSubscriptionLink", "getOgLocales", "getOgTypes"], "PN": ["siteName", "pageSize", "siteSlogan", "storagePath", "mainUri", "id", "link"], "SCS_VariableDeclaration": ["String", "String", "ArrayList", "ArrayList"], "CO": ["/**\n * @author Raysmond<i@raysmond.com>\n */"], "CODE": "package com.raysmond.blog.services;\n\nimport com.raysmond.blog.services.SettingService;\nimport lombok.Getter;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.core.io.ClassPathResource;\nimport org.springframework.stereotype.Service;\nimport com.domingosuarez.boot.autoconfigure.jade4j.JadeHelper;\n\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * @author Raysmond<i@raysmond.com>\n */\n@JadeHelper(\"App\")\n@Service\npublic class AppSetting {\n\n    private static final Logger logger = LoggerFactory.getLogger(AppSetting.class);\n\n    private SettingService settingService;\n\n    private String siteName = \"SpringBlog\";\n    private String siteSlogan = \"An interesting place to discover\";\n    private Integer pageSize = 5;\n    private String storagePath = \"/tmp\";\n    private String mainUri = \"http://localhost/\";\n    private String telegramMasterChatId = \"\";\n    private String subscriptionLink = \"\";\n\n    public static final String SITE_NAME = \"site_name\";\n    public static final String SITE_SLOGAN = \"site_slogan\";\n    public static final String PAGE_SIZE = \"page_size\";\n    public static final String STORAGE_PATH = \"storage_path\";\n    public static final String MAIN_URI = \"main_uri\";\n    public static final String TELEGRAM_MASTER_CHAT_ID = \"telegram_master_chat_id\";\n    public static final String SUBSCRIPTION_LINK = \"subscription_link\";\n\n    @Autowired\n    public AppSetting(SettingService settingService){\n        this.settingService = settingService;\n    }\n\n    public String getSiteName(){\n        return (String) settingService.get(SITE_NAME, siteName);\n    }\n\n    public void setSiteName(String siteName) {\n        this.siteName = siteName;\n        settingService.put(SITE_NAME, siteName);\n    }\n\n    public Integer getPageSize() {\n        return (Integer) settingService.get(PAGE_SIZE, pageSize);\n    }\n\n    public void setPageSize(Integer pageSize) {\n        this.pageSize = pageSize;\n        settingService.put(PAGE_SIZE, pageSize);\n    }\n\n    public String getSiteSlogan() {\n        return (String) settingService.get(SITE_SLOGAN, siteSlogan);\n    }\n\n    public void setSiteSlogan(String siteSlogan) {\n        this.siteSlogan = siteSlogan;\n        settingService.put(SITE_SLOGAN, siteSlogan);\n    }\n\n    public String getStoragePath() {\n        return (String) settingService.get(STORAGE_PATH, storagePath);\n    }\n\n    public void setStoragePath(String storagePath) {\n        this.storagePath = storagePath;\n        settingService.put(STORAGE_PATH, storagePath);\n    }\n\n    public String getMainUri() {\n        String uri = (String) settingService.get(MAIN_URI, mainUri);\n        if (!uri.endsWith(\"/\")) {\n            uri += \"/\";\n        }\n        return uri;\n    }\n\n    public String getMainUriStripped() {\n        String uri = (String) settingService.get(MAIN_URI, mainUri);\n        if (uri.endsWith(\"/\")) {\n            uri = uri.substring(0, uri.length()-1);\n        }\n        return uri;\n    }\n\n    public void setMainUri(String mainUri) {\n        this.mainUri = mainUri;\n        settingService.put(MAIN_URI, mainUri);\n    }\n\n    public String getTelegramMasterChatId() {\n        return (String) settingService.get(TELEGRAM_MASTER_CHAT_ID, telegramMasterChatId);\n    }\n\n    public void setTelegramMasterChatId(String id) {\n        this.telegramMasterChatId = id;\n        settingService.put(TELEGRAM_MASTER_CHAT_ID, id);\n    }\n\n    public String getSubscriptionLink() {\n        return (String) settingService.get(SUBSCRIPTION_LINK, subscriptionLink);\n    }\n\n    public void setSubscriptionLink(String link) {\n        this.subscriptionLink = link;\n        settingService.put(SUBSCRIPTION_LINK, link);\n    }\n\n    public List<String> getOgLocales() {\n        ArrayList<String> ogLocales = new ArrayList<>();\n        ogLocales.add(\"en_EN\");\n        ogLocales.add(\"ru_RU\");\n        return ogLocales;\n    }\n\n    public List<String> getOgTypes() {\n        ArrayList<String> ogTypes = new ArrayList<>();\n        ogTypes.add(\"article\");\n        return ogTypes;\n    }\n}\n", "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/services/CacheSettingService.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["CacheSettingService"], "AN": ["settingRepository", "CACHE_NAME", "logger"], "SCS_VariableDeclarator": ["settingRepository", "CACHE_NAME", "logger", "setting", "value", "value", "setting"], "SCS_ConstructorDeclaration": ["CacheSettingService"], "SCS_MemberReference": ["settingRepository", "settingRepository", "key", "value", "setting", "key", "key", "value", "value", "CACHE_NAME", "key", "value", "defaultValue", "value", "CACHE_NAME", "key", "value", "key", "setting", "setting", "key", "value", "setting", "key"], "SCS_ClassReference": ["LoggerFactory", "SettingService", "settingRepository", "setting", "logger", "logger", "", "logger", "settingRepository", "setting", "setting", "settingRepository", "logger", "value"], "SCS_MethodInvocation": ["getLogger", "findByKey", "getValue", "info", "info", "get", "info", "findByKey", "setKey", "setValue", "save", "info", "getClass"], "MN": ["get", "get", "put"], "PN": ["key", "key", "defaultValue", "key", "value"], "SCS_VariableDeclaration": ["Setting", "Serializable", "Serializable", "Setting"], "CO": ["/**\n * @author Raysmond<i@raysmond.com>\n */"], "CODE": "package com.raysmond.blog.services;\n\nimport com.raysmond.blog.models.Setting;\nimport com.raysmond.blog.repositories.SettingRepository;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.cache.annotation.CacheEvict;\nimport org.springframework.cache.annotation.Cacheable;\nimport org.springframework.stereotype.Service;\n\nimport java.io.Serializable;\n\n/**\n * @author Raysmond<i@raysmond.com>\n */\n@Service\npublic class CacheSettingService implements SettingService {\n\n    private SettingRepository settingRepository;\n\n    private static final String CACHE_NAME = \"cache.settings\";\n\n    @Autowired\n    public CacheSettingService(SettingRepository settingRepository) {\n        this.settingRepository = settingRepository;\n    }\n\n    private static final Logger logger = LoggerFactory.getLogger(SettingService.class);\n\n    @Override\n    public Serializable get(String key) {\n        Setting setting = settingRepository.findByKey(key);\n        Serializable value = null;\n        try {\n            value = setting == null ? null : setting.getValue();\n        } catch (Exception ex) {\n            logger.info(\"Cannot deserialize setting value with key = \" + key);\n        }\n\n        logger.info(\"Get setting \" + key + \" from database. Value = \" + value);\n\n        return value;\n    }\n\n    @Override\n    @Cacheable(value = CACHE_NAME, key = \"#key\")\n    public Serializable get(String key, Serializable defaultValue) {\n        Serializable value = get(key);\n        return value == null ? defaultValue : value;\n    }\n\n    @Override\n    @CacheEvict(value = CACHE_NAME, key = \"#key\")\n    public void put(String key, Serializable value) {\n        logger.info(\"Update setting \" + key + \" to database. Value = \" + value);\n\n        Setting setting = settingRepository.findByKey(key);\n        if (setting == null) {\n            setting = new Setting();\n            setting.setKey(key);\n        }\n        try {\n            setting.setValue(value);\n            settingRepository.save(setting);\n        } catch (Exception ex) {\n            \n            logger.info(\"Cannot save setting value with type: \" + value.getClass() + \". key = \" + key);\n        }\n    }\n}\n", "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/services/VisitService.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["VisitService"], "AN": ["visitRepository", "seoRobotAgentRepository", "userService", "entityManager"], "SCS_VariableDeclarator": ["visitRepository", "seoRobotAgentRepository", "userService", "entityManager", "user", "visit", "session", "query", "result", "robotsAgents", "count", "v", "p", "m"], "MN": ["saveVisit", "getUniqueVisitsCount", "getUniqueVisitsCount_old"], "PN": ["post", "clientIp", "userAgent", "post", "post"], "SCS_VariableDeclaration": ["User", "Visit", "Session", "SQLQuery", "List", "List", "AtomicReference", "Object", "Pattern", "Matcher"], "SCS_MemberReference": ["userService", "clientIp", "post", "user", "user", "userAgent", "visitRepository", "visit", "entityManager", "seoRobotAgentRepository", "visitRepository", "post", "vr", "vr", "v", "ra", "CASE_INSENSITIVE", "v"], "SCS_ClassReference": [null, "visit", "visit", "visit", "visit", "user", "visit", null, null, "session", "query", "post", "query", "result", "result", null, null, null, "robotsAgents", "count", "count", "robotsAgents", "Pattern", "ra", "p", "m", "count", "count", "count"], "SCS_MethodInvocation": ["currentUser", "setClientIp", "setPost", "setUser", "setIsAdmin", "isAdmin", "setUserAgent", "save", "getDelegate", "createSQLQuery", "setLong", "getId", "list", "size", "get", "findAll", "getVisitsByPostAndIsAdminIsFalse", "forEach", "size", "set", "get", "forEach", "compile", "getUserAgent", "matcher", "matches", "set", "get", "get"], "CO": ["//        if (this.userService.currentUser().isAdmin())", "//            return;", "//\"ON LOWER(v.userAgent) LIKE concat('%', LOWER(ra.userAgent), '%') \" +", "//return this.visitRepository.getUniquePostVisitsCount(post);", "// exclude queries from robots if matches by UserAgent", "//final Long[] count = {0L};", "//count[0]++;", "//count[0]++;"], "CODE": "package com.raysmond.blog.services;\n\nimport com.raysmond.blog.models.Post;\nimport com.raysmond.blog.models.SeoRobotAgent;\nimport com.raysmond.blog.models.User;\nimport com.raysmond.blog.models.Visit;\nimport com.raysmond.blog.repositories.SeoRobotAgentRepository;\nimport com.raysmond.blog.repositories.VisitRepository;\nimport org.hibernate.Hibernate;\nimport org.hibernate.SQLQuery;\nimport org.hibernate.Session;\nimport org.hibernate.SessionFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;\nimport org.springframework.data.jpa.provider.HibernateUtils;\nimport org.springframework.stereotype.Service;\n\nimport javax.persistence.EntityManager;\nimport java.math.BigInteger;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.atomic.AtomicReference;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\n@Service\npublic class VisitService {\n\n    @Autowired\n    private VisitRepository visitRepository;\n\n    @Autowired\n    private SeoRobotAgentRepository seoRobotAgentRepository;\n\n    @Autowired\n    private UserService userService;\n\n    @Autowired\n    private EntityManager entityManager;\n\n    public void saveVisit(Post post, String clientIp, String userAgent) {\n//        if (this.userService.currentUser().isAdmin())\n//            return;\n\n        User user = this.userService.currentUser();\n\n        Visit visit = new Visit();\n        visit.setClientIp(clientIp);\n        visit.setPost(post);\n        visit.setUser(user);\n        visit.setIsAdmin(user != null ? user.isAdmin() : false);\n        visit.setUserAgent(userAgent);\n        this.visitRepository.save(visit);\n    }\n\n    public Long getUniqueVisitsCount(Post post) {\n\n        Session session = (Session) this.entityManager.getDelegate();\n        SQLQuery query = session.createSQLQuery(\n                \"SELECT COUNT(DISTINCT v.clientIp) \" +\n                        \"FROM visits AS v \" +\n                        \"LEFT JOIN seo_robots_agents AS ra \" +\n                        //\"ON LOWER(v.userAgent) LIKE concat('%', LOWER(ra.userAgent), '%') \" +\n                        \"ON CASE WHEN ra.isregexp = TRUE THEN \" +\n                        \"LOWER(v.userAgent) ~* LOWER(ra.userAgent) \" +\n                        \"ELSE \" +\n                        \"LOWER(v.userAgent) LIKE concat('%', LOWER(ra.userAgent), '%') \" +\n                        \"END \" +\n                        \"WHERE v.post_id = :post_id AND v.isAdmin = FALSE \" +\n                        \"AND ra.id IS NULL \");\n        query.setLong(\"post_id\", post.getId());\n        List<Object> result = query.list();\n        if (result.size() > 0L) {\n            return ((BigInteger)result.get(0)).longValue();\n        }\n\n        return 0L;\n\n    }\n\n    public Long getUniqueVisitsCount_old(Post post) {\n        //return this.visitRepository.getUniquePostVisitsCount(post);\n\n        // exclude queries from robots if matches by UserAgent\n        List<SeoRobotAgent> robotsAgents = this.seoRobotAgentRepository.findAll();\n\n        //final Long[] count = {0L};\n        AtomicReference<Long> count = new AtomicReference<>();\n\n        this.visitRepository.getVisitsByPostAndIsAdminIsFalse(post).forEach(vr -> {\n\n            Object[] v = (Object[]) vr;\n\n            if (robotsAgents.size() == 0 || v[1] == null) {\n                //count[0]++;\n                count.set(count.get()+1);\n            } else {\n                robotsAgents.forEach(ra -> {\n                    Pattern p = Pattern.compile(\".*(\"+ra.getUserAgent()+\").*\", Pattern.CASE_INSENSITIVE);\n                    Matcher m = p.matcher((String) v[1]);\n                    if (!m.matches()) {\n                        //count[0]++;\n                        count.set(count.get()+1);\n                    }\n                });\n            }\n        });\n\n        return count.get();\n    }\n\n}\n", "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/services/StatisticsService.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["StatisticsService"], "AN": ["df", "entityManager"], "SCS_VariableDeclarator": ["df", "entityManager", "session", "query", "result", "session", "query", "result", "chart", "dates", "data", "vs", "vsa", "statDt", "statPost", "statCount", "sortedDates", "dt", "sortedTitles", "statPost", "series", "dt", "list", "list"], "MN": ["getVisitsStats", "getVisitsStatsByPeriodAndPostsList", "convertDataToChart", "getFullVisitsStatsChartData", "getChartDataByPeriodAndPostsList"], "PN": ["periodStart", "periodEnd", "postsIdList", "list", "periodStart", "periodEnd", "postsIdList"], "SCS_VariableDeclaration": ["Session", "SQLQuery", "List", "Session", "SQLQuery", "List", "VisitsStatsChartDTO", "Set", "Map", "Object", "Object", "Date", "String", "Long", "List", "Date", "List", "String", "VisitsStatsChartDTO", "Date", "List", "List"], "SCS_MemberReference": ["entityManager", "result", "entityManager", "periodStart", "periodEnd", "postsIdList", "result", "list", "vs", "vsa", "vsa", "vsa", "vsa", "statDt", "statPost", "statPost", "statDt", "statCount", "statPost", "dates", "sortedDates", "sortedDates", "dt", "sortedTitles", "sortedTitles", "statPost", "sortedDates", "dt", "statPost", "dt", "statPost", "series", "chart", "list", "periodStart", "periodEnd", "postsIdList", "list"], "SCS_ClassReference": [null, "session", "query", null, "session", "query", "query", "query", "query", "chart", null, "chart", null, "chart", null, "chart", null, null, "chart", null, null, "String", "dates", "data", "data", "data", null, "Collections", "chart", null, null, "df", "data", "Collections", "series", "data", null, "series", null, "data", null, "series", null, "chart", null, "", "", "", ""], "SCS_MethodInvocation": ["getDelegate", "createSQLQuery", "list", "getDelegate", "createSQLQuery", "setParameter", "setParameter", "setParameterList", "list", "getChart", "setType", "getTitle", "setText", "getPlotOptions", "setEnableMouseTracking", "getPlotOptions", "getDataLabels", "setEnabled", "getYAxis", "getTitle", "setText", "format", "add", "containsKey", "put", "get", "put", "sort", "getXAxis", "getCategories", "add", "format", "keySet", "sort", "setName", "get", "containsKey", "getData", "add", "get", "get", "getData", "add", "getSeries", "add", "getVisitsStats", "convertDataToChart", "getVisitsStatsByPeriodAndPostsList", "convertDataToChart"], "CO": ["/**\n * Created by bvn13 on 20.12.2017.\n */"], "CODE": "package com.raysmond.blog.services;\n\nimport com.raysmond.blog.models.dto.VisitsStatsChartDTO;\nimport org.hibernate.SQLQuery;\nimport org.hibernate.Session;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport javax.persistence.EntityManager;\nimport java.math.BigInteger;\nimport java.text.DateFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.*;\n\n/**\n * Created by bvn13 on 20.12.2017.\n */\n@Service\npublic class StatisticsService {\n\n    private static DateFormat df = new SimpleDateFormat(\"MM/dd/yyyy\");\n\n    @Autowired\n    private EntityManager entityManager;\n\n    public List<Object> getVisitsStats() {\n\n        Session session = (Session) this.entityManager.getDelegate();\n        SQLQuery query = session.createSQLQuery(\n                \"select date_trunc('day', v.createdat) as dt, v.post_id, p.title, count(distinct v.clientip) as count \" +\n                        \"from visits as v \" +\n                        \"left join seo_robots_agents as ra \" +\n                        \"on case when ra.isregexp then lower(nullif(v.useragent,'')) ~* lower(ra.useragent) \" +\n                        \"else lower(nullif(v.useragent,'')) like concat('%',lower(ra.useragent),'%') end \" +\n                        \"inner join posts as p \" +\n                        \"on v.post_id = p.id \" +\n                        \"where v.isadmin = false \" +\n                        \"and ra.id isnull \" +\n                        \"group by date_trunc('day', v.createdat), v.post_id, p.title\"\n        );\n\n        List<Object> result = query.list();\n\n        return result;\n    }\n\n    public List<Object> getVisitsStatsByPeriodAndPostsList(Date periodStart, Date periodEnd, List<Integer> postsIdList) {\n\n        Session session = (Session) this.entityManager.getDelegate();\n        SQLQuery query = session.createSQLQuery(\n                \"select data.dt, data.post_id, data.title, data.count from (\" +\n                        \"select date_trunc('day', v.createdat) as dt, v.post_id, p.title, count(distinct v.clientip) as count \" +\n                        \"from visits as v \" +\n                        \"left join seo_robots_agents as ra \" +\n                        \"on case when ra.isregexp then lower(nullif(v.useragent,'')) ~* lower(ra.useragent) \" +\n                        \"else lower(nullif(v.useragent,'')) like concat('%',lower(ra.useragent),'%') end \" +\n                        \"inner join posts as p \" +\n                        \"on v.post_id = p.id \" +\n                        \"where v.isadmin = false \" +\n                        \"and ra.id isnull \" +\n                        \"group by date_trunc('day', v.createdat), v.post_id, p.title \" +\n                        \") as data \" +\n                        \"where data.dt >= :periodStart and data.dt <= :periodEnd and data.post_id in (:postsIdList)\"\n        );\n\n        query.setParameter(\"periodStart\", periodStart);\n        query.setParameter(\"periodEnd\", periodEnd);\n        query.setParameterList(\"postsIdList\", postsIdList);\n\n        List<Object> result = query.list();\n\n        return result;\n    }\n\n    private VisitsStatsChartDTO convertDataToChart(List<Object> list) {\n        VisitsStatsChartDTO chart = new VisitsStatsChartDTO();\n        chart.getChart().setType(\"line\");\n        chart.getTitle().setText(\"Visits Statistics\");\n        chart.getPlotOptions().setEnableMouseTracking(true);\n        chart.getPlotOptions().getDataLabels().setEnabled(true);\n\n        chart.getYAxis().getTitle().setText(\"Count\");\n\n        Set<Date> dates = new HashSet<>();\n\n        Map<String, Map<Date, Long>> data = new HashMap<>();\n\n\n        for (Object vs : list) {\n            Object[] vsa = (Object[]) vs;\n\n            Date statDt = (Date) vsa[0];\n            String statPost = String.format(\"%d / %s\",((BigInteger) vsa[1]).longValue(), (String) vsa[2]);\n            Long statCount = ((BigInteger) vsa[3]).longValue();\n\n            dates.add(statDt);\n\n            if (!data.containsKey(statPost)) {\n                data.put(statPost, new HashMap<>());\n            }\n            data.get(statPost).put(statDt, statCount);\n        }\n\n        List<Date> sortedDates = new ArrayList<>(dates);\n        Collections.sort(sortedDates);\n\n        for (Date dt : sortedDates) {\n            chart.getXAxis().getCategories().add(df.format(dt));\n        }\n\n        List<String> sortedTitles = new ArrayList<>(data.keySet());\n        Collections.sort(sortedTitles);\n\n        for (String statPost : sortedTitles) {\n\n            VisitsStatsChartDTO.Series series = new VisitsStatsChartDTO.Series();\n            series.setName(statPost);\n\n            for (Date dt : sortedDates) {\n                if (data.get(statPost).containsKey(dt)) {\n                    series.getData().add(data.get(statPost).get(dt));\n                } else {\n                    series.getData().add(0L);\n                }\n            }\n\n            chart.getSeries().add(series);\n        }\n\n        return chart;\n    }\n\n    public VisitsStatsChartDTO getFullVisitsStatsChartData() {\n        List<Object> list = getVisitsStats();\n        return convertDataToChart(list);\n    }\n\n    public VisitsStatsChartDTO getChartDataByPeriodAndPostsList(Date periodStart, Date periodEnd, List<Integer> postsIdList) {\n        List<Object> list = getVisitsStatsByPeriodAndPostsList(periodStart, periodEnd, postsIdList);\n        return convertDataToChart(list);\n    }\n\n}\n", "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/error/ExceptionHandlerController.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["ExceptionHandlerController"], "AN": ["logger"], "SCS_VariableDeclarator": ["logger", "uri", "model", "uri", "model"], "SCS_ClassReference": ["LoggerFactory", "ExceptionHandlerController", "NotFoundException", "request", "logger", "model", "HttpStatus.NOT_FOUND", "model", "HttpStatus.NOT_FOUND", "model", "model", "exception", "Exception", "request", "logger", "model", "Throwables", null, "model", "Throwables", null, "model", "model", "exception"], "SCS_MethodInvocation": ["getLogger", "getRequestURI", "error", "addObject", "value", "addObject", "getReasonPhrase", "addObject", "addObject", "getMessage", "getRequestURI", "error", "addObject", "getRootCause", "getMessage", "addObject", "getRootCause", "getCause", "addObject", "addObject", "getMessage"], "MN": ["notFound", "exception"], "PN": ["request", "exception", "request", "exception"], "SCS_MemberReference": ["NOT_FOUND", "uri", "exception", "uri", "model", "uri", "exception", "exception", "exception", "uri", "model"], "SCS_VariableDeclaration": ["String", "ModelAndView", "String", "ModelAndView"], "CO": ["/**\n * General error handler for the application.\n */", "/**\n\t * Handle all exceptions\n\t */", "//\t@ResponseStatus(HttpStatus.SERVICE_UNAVAILABLE)"], "CODE": "package com.raysmond.blog.error;\n\nimport com.raysmond.blog.services.AppSetting;\nimport com.raysmond.blog.support.web.ViewHelper;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.web.bind.annotation.ControllerAdvice;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\nimport org.springframework.web.bind.annotation.ResponseStatus;\n\nimport com.google.common.base.Throwables;\nimport org.springframework.web.servlet.ModelAndView;\n\nimport javax.servlet.http.HttpServletRequest;\n\n/**\n * General error handler for the application.\n */\n@ControllerAdvice\nclass ExceptionHandlerController {\n\tprivate static final Logger logger = LoggerFactory.getLogger(ExceptionHandlerController.class);\n\n\t@ResponseStatus(HttpStatus.NOT_FOUND)\n\t@ExceptionHandler(NotFoundException.class)\n\tpublic ModelAndView notFound(HttpServletRequest request, NotFoundException exception){\n\t\tString uri = request.getRequestURI();\n\t\tlogger.error(\"Request page: \" + uri + \" raised NotFoundException : \" + exception);\n\n\t\tModelAndView model = new ModelAndView(\"error/general\");\n\t\tmodel.addObject(\"status\", HttpStatus.NOT_FOUND.value());\n\t\tmodel.addObject(\"error\", HttpStatus.NOT_FOUND.getReasonPhrase());\n\t\tmodel.addObject(\"path\", uri);\n\t\tmodel.addObject(\"customMessage\", exception.getMessage());\n\n\t\treturn model;\n\t}\n\n\t/**\n\t * Handle all exceptions\n\t */\n//\t@ResponseStatus(HttpStatus.SERVICE_UNAVAILABLE)\n\t@ExceptionHandler(Exception.class)\n\tpublic ModelAndView exception(HttpServletRequest request, Exception exception) {\n\t\tString uri = request.getRequestURI();\n\t\tlogger.error(\"Request page: \" + uri + \" raised exception : \" + exception);\n\n\t\tModelAndView model = new ModelAndView(\"error/general\");\n\t\tmodel.addObject(\"error\", Throwables.getRootCause(exception).getMessage());\n\t\tmodel.addObject(\"status\", Throwables.getRootCause(exception).getCause());\n\t\tmodel.addObject(\"path\", uri);\n\t\tmodel.addObject(\"customMessage\", exception.getMessage());\n\n\t\treturn model;\n\t}\n}", "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/error/NotFoundException.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["NotFoundException"], "SCS_MemberReference": ["NOT_FOUND", "message", "message", "message"], "AN": ["message"], "SCS_VariableDeclarator": ["message"], "SCS_ConstructorDeclaration": ["NotFoundException", "NotFoundException"], "MN": ["getMessage"], "PN": [], "CO": ["/**\n * @author Raysmond<i@raysmond.com>\n */"], "CODE": "package com.raysmond.blog.error;\n\nimport org.springframework.http.HttpStatus;\nimport org.springframework.web.bind.annotation.ResponseStatus;\n\n/**\n * @author Raysmond<i@raysmond.com>\n */\n@ResponseStatus(value = HttpStatus.NOT_FOUND)\npublic final class NotFoundException extends RuntimeException {\n    private String message;\n\n    public NotFoundException(){\n\n    }\n\n    public NotFoundException(String message){\n        this.message = message;\n    }\n\n    @Override\n    public String getMessage(){\n        return message;\n    }\n}", "SCS_ClassReference": [], "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_VariableDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_MethodInvocation": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/utils/PaginatorUtil.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["PaginatorUtil"], "MN": ["createPagesList", "createPagesList"], "PN": ["from", "to", "pageSize", "from", "to"], "SCS_VariableDeclaration": ["List", "Integer", "int", "List", "int"], "SCS_VariableDeclarator": ["result", "lastPage", "i", "result", "i"], "SCS_ClassReference": ["Math", "result", "result"], "SCS_MethodInvocation": ["ceil", "add", "add"], "SCS_MemberReference": ["to", "pageSize", "from", "i", "lastPage", "i", "i", "result", "from", "i", "to", "i", "i", "result"], "CO": ["/**\n * Created by bvn13 on 11.12.2017.\n */"], "CODE": "package com.raysmond.blog.utils;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * Created by bvn13 on 11.12.2017.\n */\npublic class PaginatorUtil {\n\n    public static List<Integer> createPagesList(Integer from, Integer to, Integer pageSize) {\n        List<Integer> result = new ArrayList<>();\n        Integer lastPage = (int) Math.ceil(to / pageSize);\n        for (int i=from; i<=lastPage; i++) {\n            result.add(i);\n        }\n        return result;\n    }\n\n    public static List<Integer> createPagesList(Integer from, Integer to) {\n        List<Integer> result = new ArrayList<>();\n        for (int i=from; i<=to; i++) {\n            result.add(i);\n        }\n        return result;\n    }\n\n}\n", "AN": [], "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/utils/DTOUtil.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["DTOUtil"], "AN": ["MAPPER"], "SCS_VariableDeclarator": ["MAPPER", "list", "s"], "MN": ["getMapper", "map", "mapTo", "mapList"], "PN": ["source", "targetClass", "source", "dist", "source", "targetClass"], "SCS_MemberReference": ["MAPPER", "MAPPER", "STRICT", "MAPPER", "source", "targetClass", "source", "dist", "source", "s", "targetClass", "list"], "SCS_ClassReference": ["MAPPER", null, "", null, "", null, "list", "", null], "SCS_MethodInvocation": ["getConfiguration", "setMatchingStrategy", "getMapper", "map", "getMapper", "map", "add", "getMapper", "map"], "SCS_VariableDeclaration": ["List", "S"], "CO": ["/**\n * @author Raysmond<i@raysmond.com>\n */"], "CODE": "package com.raysmond.blog.utils;\n\nimport org.modelmapper.ModelMapper;\nimport org.modelmapper.convention.MatchingStrategies;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * @author Raysmond<i@raysmond.com>\n */\npublic class DTOUtil {\n\n    private static ModelMapper MAPPER = null;\n\n    private static ModelMapper getMapper(){\n        if(MAPPER == null){\n            MAPPER = new ModelMapper();\n            MAPPER.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);\n        }\n\n        return MAPPER;\n    }\n\n    public static <S, T> T map(S source, Class<T> targetClass) {\n        return getMapper().map(source, targetClass);\n    }\n\n    public static <S, T> void mapTo(S source, T dist) {\n        getMapper().map(source, dist);\n    }\n\n    public static <S, T> List<T> mapList(List<S> source, Class<T> targetClass) {\n        List<T> list = new ArrayList<>();\n        for (S s : source) {\n            list.add(getMapper().map(s, targetClass));\n        }\n        return list;\n    }\n}\n", "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}, "<_io.TextIOWrapper name='/home/amir/Desktop/PJ/MonoMicro/projects/SpringBlog/src/main/java/com/raysmond/blog/utils/CommonHelper.java' mode='r' encoding='UTF-8'>": {"py/object": "collections.defaultdict", "CN": ["CommonHelper"], "MN": ["asSortedList"], "PN": ["c"], "SCS_VariableDeclaration": ["List"], "SCS_VariableDeclarator": ["list"], "SCS_MemberReference": ["c", "list", "list"], "SCS_ClassReference": ["java.util.Collections"], "SCS_MethodInvocation": ["sort"], "CO": ["/**\n * Created by bvn13 on 14.12.2017.\n */"], "CODE": "package com.raysmond.blog.utils;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\n\n/**\n * Created by bvn13 on 14.12.2017.\n */\npublic class CommonHelper {\n\n    public static\n    <T extends Comparable<? super T>> List<T> asSortedList(Collection<T> c) {\n        List<T> list = new ArrayList<T>(c);\n        java.util.Collections.sort(list);\n        return list;\n    }\n\n}\n", "AN": [], "SCS_MethodReference": [], "SCS_VoidClassReference": [], "SCS_SuperMemberReference": [], "SCS_ConstantDeclaration": [], "SCS_AnnotationDeclaration": [], "SCS_ConstructorDeclaration": [], "SCS_LocalVariableDeclaration": [], "SCS_FieldDeclaration": [], "SCS_MethodDeclaration": [], "default_factory": {"py/type": "builtins.list"}}}, "all_classes": [{"py/tuple": [1, "SecurityConfig", "com.raysmond.blog"]}, {"py/tuple": [2, "JpaConfig", "com.raysmond.blog"]}, {"py/tuple": [3, "WebConfig", "com.raysmond.blog"]}, {"py/tuple": [4, "Constants", "com.raysmond.blog"]}, {"py/tuple": [5, "Application", "com.raysmond.blog"]}, {"py/tuple": [6, "SettingRepository", "com.raysmond.blog.repositories"]}, {"py/tuple": [7, "PostRepository", "com.raysmond.blog.repositories"]}, {"py/tuple": [8, "LikeRepository", "com.raysmond.blog.repositories"]}, {"py/tuple": [9, "SeoPostDataRepository", "com.raysmond.blog.repositories"]}, {"py/tuple": [10, "UserRepository", "com.raysmond.blog.repositories"]}, {"py/tuple": [11, "VisitRepository", "com.raysmond.blog.repositories"]}, {"py/tuple": [12, "StoredFileRepository", "com.raysmond.blog.repositories"]}, {"py/tuple": [13, "SeoRobotAgentRepository", "com.raysmond.blog.repositories"]}, {"py/tuple": [14, "TagRepository", "com.raysmond.blog.repositories"]}, {"py/tuple": [15, "StoredFileController", "com.raysmond.blog.admin.controllers"]}, {"py/tuple": [16, "AdminController", "com.raysmond.blog.admin.controllers"]}, {"py/tuple": [17, "PostController", "com.raysmond.blog.admin.controllers"]}, {"py/tuple": [18, "StatisticsController", "com.raysmond.blog.admin.controllers"]}, {"py/tuple": [19, "NotificatorController", "com.raysmond.blog.admin.controllers"]}, {"py/tuple": [20, "SeoRobotAgentController", "com.raysmond.blog.admin.controllers"]}, {"py/tuple": [21, "UserController", "com.raysmond.blog.admin.controllers"]}, {"py/tuple": [22, "Notificator", "com.raysmond.blog.notificators"]}, {"py/tuple": [23, "TelegramBotManager", "com.raysmond.blog.notificators.telegram"]}, {"py/tuple": [24, "TelegramBot", "com.raysmond.blog.notificators.telegram"]}, {"py/tuple": [25, "StoredFileController", "com.raysmond.blog.controllers"]}, {"py/tuple": [26, "HomeController", "com.raysmond.blog.controllers"]}, {"py/tuple": [27, "PostController", "com.raysmond.blog.controllers"]}, {"py/tuple": [28, "TagController", "com.raysmond.blog.controllers"]}, {"py/tuple": [29, "SympathyController", "com.raysmond.blog.controllers"]}, {"py/tuple": [30, "SympathyRequestData", "com.raysmond.blog.controllers"]}, {"py/tuple": [31, "UserController", "com.raysmond.blog.controllers"]}, {"py/tuple": [32, "Credentials", "com.raysmond.blog.controllers"]}, {"py/tuple": [33, "ViewHelper", "com.raysmond.blog.support.web"]}, {"py/tuple": [34, "MessageHelper", "com.raysmond.blog.support.web"]}, {"py/tuple": [35, "SyntaxHighlightService", "com.raysmond.blog.support.web"]}, {"py/tuple": [36, "FlexmarkMarkdownService", "com.raysmond.blog.support.web"]}, {"py/tuple": [37, "HttpContentTypeSerializer", "com.raysmond.blog.support.web"]}, {"py/tuple": [38, "MarkdownService", "com.raysmond.blog.support.web"]}, {"py/tuple": [39, "Message", "com.raysmond.blog.support.web"]}, {"py/tuple": [40, "Type", "com.raysmond.blog.support.web"]}, {"py/tuple": [41, "YoutubeLinkTransformer", "com.raysmond.blog.support.web.extensions"]}, {"py/tuple": [42, "YouTubeLink", "com.raysmond.blog.support.web.extensions"]}, {"py/tuple": [43, "YouTubeLinkNodePostProcessor", "com.raysmond.blog.support.web.extensions"]}, {"py/tuple": [44, "Factory", "com.raysmond.blog.support.web.extensions"]}, {"py/tuple": [45, "YouTubeLinkNodeRenderer", "com.raysmond.blog.support.web.extensions"]}, {"py/tuple": [46, "Factory", "com.raysmond.blog.support.web.extensions"]}, {"py/tuple": [47, "YouTubeLinkExtension", "com.raysmond.blog.support.web.extensions"]}, {"py/tuple": [48, "SettingsForm", "com.raysmond.blog.forms"]}, {"py/tuple": [49, "SeoRobotAgentForm", "com.raysmond.blog.forms"]}, {"py/tuple": [50, "PostForm", "com.raysmond.blog.forms"]}, {"py/tuple": [51, "UserForm", "com.raysmond.blog.forms"]}, {"py/tuple": [52, "PostPreviewForm", "com.raysmond.blog.forms"]}, {"py/tuple": [53, "LikeForm", "com.raysmond.blog.forms"]}, {"py/tuple": [54, "StoredFileForm", "com.raysmond.blog.forms"]}, {"py/tuple": [55, "Setting", "com.raysmond.blog.models"]}, {"py/tuple": [56, "SeoRobotAgent", "com.raysmond.blog.models"]}, {"py/tuple": [57, "Visit", "com.raysmond.blog.models"]}, {"py/tuple": [58, "Tag", "com.raysmond.blog.models"]}, {"py/tuple": [59, "BaseModel", "com.raysmond.blog.models"]}, {"py/tuple": [60, "Like", "com.raysmond.blog.models"]}, {"py/tuple": [61, "User", "com.raysmond.blog.models"]}, {"py/tuple": [62, "SeoPostData", "com.raysmond.blog.models"]}, {"py/tuple": [63, "StoredFile", "com.raysmond.blog.models"]}, {"py/tuple": [64, "Post", "com.raysmond.blog.models"]}, {"py/tuple": [65, "PostFormat", "com.raysmond.blog.models.support"]}, {"py/tuple": [66, "WebError", "com.raysmond.blog.models.support"]}, {"py/tuple": [67, "OgType", "com.raysmond.blog.models.support"]}, {"py/tuple": [68, "OgLocale", "com.raysmond.blog.models.support"]}, {"py/tuple": [69, "PostType", "com.raysmond.blog.models.support"]}, {"py/tuple": [70, "PostStatus", "com.raysmond.blog.models.support"]}, {"py/tuple": [71, "PostIdTitleDTO", "com.raysmond.blog.models.dto"]}, {"py/tuple": [72, "PostsIdListDTO", "com.raysmond.blog.models.dto"]}, {"py/tuple": [73, "PostPreviewDTO", "com.raysmond.blog.models.dto"]}, {"py/tuple": [74, "AjaxAnswerDTO", "com.raysmond.blog.models.dto"]}, {"py/tuple": [75, "VisitStatDTO", "com.raysmond.blog.models.dto"]}, {"py/tuple": [76, "VisitsStatsChartDTO", "com.raysmond.blog.models.dto"]}, {"py/tuple": [77, "Type", "com.raysmond.blog.models.dto"]}, {"py/tuple": [78, "Text", "com.raysmond.blog.models.dto"]}, {"py/tuple": [79, "XAxis", "com.raysmond.blog.models.dto"]}, {"py/tuple": [80, "YAxis", "com.raysmond.blog.models.dto"]}, {"py/tuple": [81, "PlotOptions", "com.raysmond.blog.models.dto"]}, {"py/tuple": [82, "Line", "com.raysmond.blog.models.dto"]}, {"py/tuple": [83, "DataLabels", "com.raysmond.blog.models.dto"]}, {"py/tuple": [84, "Series", "com.raysmond.blog.models.dto"]}, {"py/tuple": [85, "PostAnnouncementDTO", "com.raysmond.blog.models.dto"]}, {"py/tuple": [86, "SitemapController", "com.raysmond.blog.seo.controllers"]}, {"py/tuple": [87, "SeoRobotAgentService", "com.raysmond.blog.services"]}, {"py/tuple": [88, "SettingService", "com.raysmond.blog.services"]}, {"py/tuple": [89, "RequestProcessorService", "com.raysmond.blog.services"]}, {"py/tuple": [90, "PostService", "com.raysmond.blog.services"]}, {"py/tuple": [91, "LikeService", "com.raysmond.blog.services"]}, {"py/tuple": [92, "AdsConfig", "com.raysmond.blog.services"]}, {"py/tuple": [93, "UserService", "com.raysmond.blog.services"]}, {"py/tuple": [94, "FileStorageService", "com.raysmond.blog.services"]}, {"py/tuple": [95, "TelegramBotSettings", "com.raysmond.blog.services"]}, {"py/tuple": [96, "TagService", "com.raysmond.blog.services"]}, {"py/tuple": [97, "SeoService", "com.raysmond.blog.services"]}, {"py/tuple": [98, "AppSetting", "com.raysmond.blog.services"]}, {"py/tuple": [99, "CacheSettingService", "com.raysmond.blog.services"]}, {"py/tuple": [100, "VisitService", "com.raysmond.blog.services"]}, {"py/tuple": [101, "StatisticsService", "com.raysmond.blog.services"]}, {"py/tuple": [102, "ExceptionHandlerController", "com.raysmond.blog.error"]}, {"py/tuple": [103, "NotFoundException", "com.raysmond.blog.error"]}, {"py/tuple": [104, "PaginatorUtil", "com.raysmond.blog.utils"]}, {"py/tuple": [105, "DTOUtil", "com.raysmond.blog.utils"]}, {"py/tuple": [106, "CommonHelper", "com.raysmond.blog.utils"]}], "interface_relations": [], "interfaces": [6, 7, 8, 9, 10, 11, 12, 13, 14, 35, 38, 88], "submodules": {"py/object": "collections.defaultdict", "S1": {"py/set": [1, 10, 61, 93]}, "S2": {"py/set": [3, 7, 8, 9, 11, 13, 14, 19, 22, 23, 24, 33, 38, 50, 57, 58, 60, 62, 64, 65, 67, 68, 69, 70, 71, 85, 88, 90, 91, 95, 96, 98, 100]}, "S3": {"py/set": [77, 39]}, "S4": {"py/set": [49, 20]}, "S5": {"py/set": [97, 86]}, "S6": {"py/set": [99]}, "S7": {"py/set": [26, 4]}, "S8": {"py/set": [16, 48]}, "S9": {"py/set": [101, 40, 72, 76, 78, 79, 80, 18, 83, 82]}, "S10": {"py/set": [28]}, "S11": {"py/set": [32, 51, 21]}, "S12": {"py/set": [12, 15, 54, 94, 63]}, "S13": {"py/set": [29, 30]}, "S14": {"py/set": [73, 17, 52, 89]}, "S15": {"py/set": [6]}, "S16": {"py/set": [53]}, "S17": {"py/set": [55]}, "S18": {"py/set": [59]}, "S19": {"py/set": [56]}, "S20": {"py/set": [74]}, "S21": {"py/set": [41]}, "S22": {"py/set": [42]}, "S23": {"py/set": [45]}, "S24": {"py/set": [43]}, "S25": {"py/set": [81]}, "S26": {"py/set": [34]}, "S27": {"py/set": [102]}, "S28": {"py/set": [103]}, "default_factory": {"py/type": "builtins.set"}}, "graph": {"py/object": "networkx.classes.digraph.DiGraph", "graph": {}, "_node": {"59": {}, "55": {}, "56": {}, "57": {}, "58": {}, "60": {}, "61": {}, "62": {}, "63": {}, "64": {}, "74": {}, "85": {}, "1": {}, "93": {}, "17": {}, "73": {}, "18": {}, "76": {}, "19": {}, "29": {}, "53": {}, "39": {}, "40": {}, "77": {}, "90": {}, "94": {}, "96": {}, "101": {}, "3": {}, "33": {}, "15": {}, "12": {}, "16": {}, "98": {}, "48": {}, "50": {}, "10": {}, "38": {}, "52": {}, "72": {}, "22": {}, "21": {}, "51": {}, "23": {}, "95": {}, "24": {}, "26": {}, "28": {}, "32": {}, "41": {}, "42": {}, "45": {}, "43": {}, "7": {}, "71": {}, "91": {}, "14": {}, "97": {}, "88": {}, "99": {}, "6": {}, "100": {}, "70": {}, "4": {}, "65": {}, "68": {}, "67": {}, "69": {}, "20": {}, "13": {}, "89": {}, "78": {}, "82": {}, "83": {}, "79": {}, "80": {}, "81": {}, "86": {}, "9": {}, "8": {}, "11": {}, "54": {}, "49": {}, "30": {}, "34": {}, "102": {}, "103": {}}, "_adj": {"59": {"55": {"inheritance": {"weight": 8.5}}, "56": {"inheritance": {"weight": 8.5}}, "57": {"inheritance": {"weight": 8.5}}, "58": {"inheritance": {"weight": 8.5}}, "60": {"inheritance": {"weight": 8.5}}, "61": {"inheritance": {"weight": 8.5}}, "62": {"inheritance": {"weight": 8.5}}, "63": {"inheritance": {"weight": 8.5}}, "64": {"inheritance": {"weight": 8.5}}, "59": {"call": {"weight": 2.5}, "has_parameter": {"weight": 3.5}}}, "55": {}, "56": {}, "57": {"61": {"is_of_type": {"weight": 2}}, "64": {"is_of_type": {"weight": 2}}}, "58": {}, "60": {"61": {"is_of_type": {"weight": 2}}, "64": {"is_of_type": {"weight": 2}}}, "61": {"93": {"reference": {"weight": 6}}}, "62": {"64": {"is_of_type": {"weight": 2}}, "67": {"is_of_type": {"weight": 2}}, "68": {"is_of_type": {"weight": 2}}}, "63": {"61": {"is_of_type": {"weight": 2}}}, "64": {"61": {"is_of_type": {"weight": 2}}, "70": {"is_of_type": {"weight": 2}}, "65": {"is_of_type": {"weight": 2}}, "69": {"is_of_type": {"weight": 2}}, "62": {"is_of_type": {"weight": 2}}}, "74": {"85": {"inheritance": {"weight": 8.5}}}, "85": {}, "1": {"93": {"return": {"weight": 1}}}, "93": {"61": {"return": {"weight": 4}, "call": {"weight": 25.0}, "has_parameter": {"weight": 21.0}}, "10": {"call": {"weight": 12.5}, "is_of_type": {"weight": 2}}}, "17": {"73": {"return": {"weight": 1}}, "90": {"call": {"weight": 25.0}, "is_of_type": {"weight": 4}}, "50": {"call": {"weight": 17.5}, "has_parameter": {"weight": 14.0}}, "64": {"call": {"weight": 22.5}}, "10": {"call": {"weight": 2.5}, "is_of_type": {"weight": 2}}, "38": {"call": {"weight": 2.5}, "is_of_type": {"weight": 2}}, "52": {"call": {"weight": 2.5}, "has_parameter": {"weight": 3.5}}, "62": {"call": {"weight": 2.5}}, "100": {"is_of_type": {"weight": 2}}, "91": {"is_of_type": {"weight": 2}}, "89": {"is_of_type": {"weight": 2}}}, "73": {}, "18": {"76": {"return": {"weight": 2}}, "101": {"call": {"weight": 5.0}, "is_of_type": {"weight": 2}}, "72": {"call": {"weight": 2.5}, "has_parameter": {"weight": 3.5}}}, "76": {"78": {"is_of_type": {"weight": 6}}, "82": {"is_of_type": {"weight": 4}}, "83": {"is_of_type": {"weight": 2}}, "40": {"is_of_type": {"weight": 2}}, "77": {"is_of_type": {"weight": 2}}, "79": {"is_of_type": {"weight": 2}}, "80": {"is_of_type": {"weight": 2}}}, "19": {"85": {"return": {"weight": 1}}, "90": {"call": {"weight": 2.5}, "is_of_type": {"weight": 2}}, "64": {"call": {"weight": 2.5}}, "22": {"call": {"weight": 2.5}, "is_of_type": {"weight": 2}}}, "29": {"53": {"return": {"weight": 2}}, "33": {"call": {"weight": 5.0}}, "98": {"is_of_type": {"weight": 2}}, "90": {"is_of_type": {"weight": 2}}, "91": {"is_of_type": {"weight": 2}}, "93": {"is_of_type": {"weight": 2}}, "89": {"is_of_type": {"weight": 2}}, "30": {"has_parameter": {"weight": 7.0}}}, "53": {}, "39": {"40": {"return": {"weight": 1}, "is_of_type": {"weight": 2}}, "77": {"return": {"weight": 1}, "is_of_type": {"weight": 2}}}, "40": {}, "77": {}, "90": {"64": {"return": {"weight": 10}, "call": {"weight": 87.5}, "has_parameter": {"weight": 28.0}}, "7": {"call": {"weight": 30.0}, "is_of_type": {"weight": 2}}, "38": {"call": {"weight": 2.5}, "is_of_type": {"weight": 2}}, "93": {"call": {"weight": 5.0}, "is_of_type": {"weight": 2}}, "96": {"call": {"weight": 2.5}, "is_of_type": {"weight": 2}}, "58": {"call": {"weight": 2.5}}, "71": {"call": {"weight": 5.0}, "has_parameter": {"weight": 7.0}}, "91": {"is_of_type": {"weight": 2}}, "100": {"is_of_type": {"weight": 2}}, "9": {"is_of_type": {"weight": 2}}, "22": {"is_of_type": {"weight": 2}}}, "94": {"63": {"return": {"weight": 2}, "call": {"weight": 22.5}, "has_parameter": {"weight": 3.5}}, "98": {"call": {"weight": 12.5}, "is_of_type": {"weight": 2}}, "12": {"call": {"weight": 5.0}, "is_of_type": {"weight": 2}}, "93": {"is_of_type": {"weight": 2}}}, "96": {"58": {"return": {"weight": 2}, "has_parameter": {"weight": 3.5}}, "14": {"call": {"weight": 12.5}, "is_of_type": {"weight": 2}}}, "101": {"76": {"return": {"weight": 3}, "call": {"weight": 25.0}}}, "3": {"33": {"call": {"weight": 5.0}, "is_of_type": {"weight": 2}}}, "33": {"98": {"call": {"weight": 2.5}, "is_of_type": {"weight": 2}}, "64": {"call": {"weight": 7.5}, "has_parameter": {"weight": 3.5}}}, "15": {"12": {"call": {"weight": 2.5}, "is_of_type": {"weight": 2}}, "63": {"call": {"weight": 30.0}}, "94": {"is_of_type": {"weight": 4}}, "93": {"is_of_type": {"weight": 4}}, "54": {"has_parameter": {"weight": 3.5}}}, "12": {}, "16": {"90": {"call": {"weight": 2.5}, "is_of_type": {"weight": 2}}, "98": {"call": {"weight": 17.5}, "is_of_type": {"weight": 2}}, "48": {"call": {"weight": 17.5}, "has_parameter": {"weight": 3.5}}}, "98": {"88": {"call": {"weight": 37.5}, "is_of_type": {"weight": 2}}}, "48": {}, "50": {"64": {"call": {"weight": 20.0}, "has_parameter": {"weight": 10.5}}, "65": {"is_of_type": {"weight": 2}}, "70": {"is_of_type": {"weight": 2}}, "67": {"is_of_type": {"weight": 2}}, "68": {"is_of_type": {"weight": 2}}}, "10": {}, "38": {}, "52": {}, "72": {}, "22": {"64": {"call": {"weight": 17.5}, "has_parameter": {"weight": 3.5}}, "98": {"call": {"weight": 2.5}, "is_of_type": {"weight": 2}}, "23": {"call": {"weight": 2.5}, "is_of_type": {"weight": 2}}}, "21": {"93": {"call": {"weight": 5.0}, "is_of_type": {"weight": 2}}, "10": {"call": {"weight": 2.5}, "is_of_type": {"weight": 2}}, "51": {"call": {"weight": 7.5}, "has_parameter": {"weight": 3.5}}, "32": {"call": {"weight": 5.0}, "has_parameter": {"weight": 3.5}}}, "51": {}, "23": {"95": {"call": {"weight": 37.5}, "is_of_type": {"weight": 2}}, "98": {"call": {"weight": 10.0}, "is_of_type": {"weight": 2}}, "24": {"call": {"weight": 5.0}, "is_of_type": {"weight": 2}}, "23": {"is_of_type": {"weight": 2}}}, "95": {}, "24": {"23": {"is_of_type": {"weight": 2}}}, "26": {"90": {"call": {"weight": 7.5}, "is_of_type": {"weight": 2}}, "98": {"call": {"weight": 2.5}, "is_of_type": {"weight": 2}}}, "28": {"90": {"call": {"weight": 5.0}, "is_of_type": {"weight": 2}}, "96": {"call": {"weight": 2.5}, "is_of_type": {"weight": 2}}, "98": {"call": {"weight": 2.5}, "is_of_type": {"weight": 2}}}, "32": {}, "41": {"42": {"call": {"weight": 2.5}}, "45": {"call": {"weight": 2.5}}}, "42": {}, "45": {"45": {"call": {"weight": 2.5}}}, "43": {"42": {"call": {"weight": 2.5}}}, "7": {}, "71": {}, "91": {"60": {"call": {"weight": 12.5}}, "61": {"call": {"weight": 2.5}, "has_parameter": {"weight": 7.0}}, "8": {"is_of_type": {"weight": 2}}, "93": {"is_of_type": {"weight": 2}}, "64": {"has_parameter": {"weight": 17.5}}}, "14": {}, "97": {"98": {"call": {"weight": 5.0}, "is_of_type": {"weight": 2}}, "64": {"call": {"weight": 12.5}}}, "88": {}, "99": {"6": {"call": {"weight": 7.5}, "is_of_type": {"weight": 2}}, "55": {"call": {"weight": 7.5}}}, "6": {}, "100": {"57": {"call": {"weight": 12.5}}, "61": {"call": {"weight": 2.5}}, "64": {"call": {"weight": 2.5}, "has_parameter": {"weight": 10.5}}, "11": {"is_of_type": {"weight": 2}}, "13": {"is_of_type": {"weight": 2}}, "93": {"is_of_type": {"weight": 2}}}, "70": {"19": {"reference": {"weight": 3}}, "50": {"reference": {"weight": 3}}, "64": {"reference": {"weight": 3}}, "90": {"reference": {"weight": 18}}}, "4": {"26": {"reference": {"weight": 9}}, "90": {"reference": {"weight": 15}}, "93": {"reference": {"weight": 9}}}, "65": {"50": {"reference": {"weight": 3}}, "64": {"reference": {"weight": 3}}, "90": {"reference": {"weight": 9}}}, "68": {"50": {"reference": {"weight": 6}}, "62": {"reference": {"weight": 3}}}, "67": {"50": {"reference": {"weight": 6}}, "62": {"reference": {"weight": 3}}}, "69": {"64": {"reference": {"weight": 3}}, "90": {"reference": {"weight": 9}}}, "20": {"13": {"is_of_type": {"weight": 2}}, "49": {"has_parameter": {"weight": 3.5}}}, "13": {}, "89": {}, "78": {}, "82": {"83": {"is_of_type": {"weight": 2}}}, "83": {}, "79": {}, "80": {"78": {"is_of_type": {"weight": 2}}}, "81": {"82": {"is_of_type": {"weight": 2}}}, "86": {"90": {"is_of_type": {"weight": 2}}, "97": {"is_of_type": {"weight": 2}}}, "9": {}, "8": {}, "11": {}, "54": {}, "49": {}, "30": {}, "34": {"39": {"has_parameter": {"weight": 7.0}}}, "102": {"103": {"has_parameter": {"weight": 3.5}}}, "103": {}}, "_succ": {"py/id": 1838}, "_pred": {"59": {"59": {"py/id": 1858}}, "55": {"59": {"py/id": 1840}, "99": {"py/id": 2209}}, "56": {"59": {"py/id": 1842}}, "57": {"59": {"py/id": 1844}, "100": {"py/id": 2213}}, "58": {"59": {"py/id": 1846}, "96": {"py/id": 2048}, "90": {"py/id": 2021}}, "60": {"59": {"py/id": 1848}, "91": {"py/id": 2186}}, "61": {"59": {"py/id": 1850}, "93": {"py/id": 1906}, "91": {"py/id": 2188}, "100": {"py/id": 2215}, "57": {"py/id": 1864}, "60": {"py/id": 1870}, "63": {"py/id": 1885}, "64": {"py/id": 1888}}, "62": {"59": {"py/id": 1852}, "17": {"py/id": 1933}, "67": {"py/id": 2257}, "68": {"py/id": 2252}, "64": {"py/id": 1896}}, "63": {"59": {"py/id": 1854}, "94": {"py/id": 2035}, "15": {"py/id": 2073}}, "64": {"59": {"py/id": 1856}, "90": {"py/id": 2005}, "17": {"py/id": 1922}, "19": {"py/id": 1972}, "22": {"py/id": 2114}, "33": {"py/id": 2066}, "50": {"py/id": 2098}, "97": {"py/id": 2202}, "100": {"py/id": 2217}, "70": {"py/id": 2231}, "65": {"py/id": 2245}, "69": {"py/id": 2260}, "57": {"py/id": 1866}, "60": {"py/id": 1872}, "62": {"py/id": 1878}, "91": {"py/id": 2195}}, "74": {}, "85": {"74": {"py/id": 1899}, "19": {"py/id": 1967}}, "1": {}, "93": {"1": {"py/id": 1903}, "21": {"py/id": 2124}, "90": {"py/id": 2015}, "61": {"py/id": 1875}, "4": {"py/id": 2240}, "15": {"py/id": 2077}, "29": {"py/id": 1988}, "91": {"py/id": 2193}, "94": {"py/id": 2045}, "100": {"py/id": 2224}}, "17": {}, "73": {"17": {"py/id": 1914}}, "18": {}, "76": {"18": {"py/id": 1943}, "101": {"py/id": 2055}}, "19": {"70": {"py/id": 2227}}, "29": {}, "53": {"29": {"py/id": 1978}}, "39": {"34": {"py/id": 2295}}, "40": {"39": {"py/id": 1996}, "76": {"py/id": 1958}}, "77": {"39": {"py/id": 1999}, "76": {"py/id": 1960}}, "90": {"16": {"py/id": 2083}, "17": {"py/id": 1916}, "19": {"py/id": 1969}, "26": {"py/id": 2154}, "28": {"py/id": 2161}, "70": {"py/id": 2233}, "65": {"py/id": 2247}, "69": {"py/id": 2262}, "4": {"py/id": 2238}, "29": {"py/id": 1984}, "86": {"py/id": 2284}}, "94": {"15": {"py/id": 2075}}, "96": {"28": {"py/id": 2164}, "90": {"py/id": 2018}}, "101": {"18": {"py/id": 1945}}, "3": {}, "33": {"3": {"py/id": 2059}, "29": {"py/id": 1980}}, "15": {}, "12": {"15": {"py/id": 2070}, "94": {"py/id": 2042}}, "16": {}, "98": {"16": {"py/id": 2086}, "22": {"py/id": 2117}, "23": {"py/id": 2141}, "26": {"py/id": 2157}, "28": {"py/id": 2167}, "33": {"py/id": 2063}, "94": {"py/id": 2039}, "97": {"py/id": 2199}, "29": {"py/id": 1982}}, "48": {"16": {"py/id": 2089}}, "50": {"17": {"py/id": 1919}, "70": {"py/id": 2229}, "65": {"py/id": 2243}, "68": {"py/id": 2250}, "67": {"py/id": 2255}}, "10": {"17": {"py/id": 1924}, "21": {"py/id": 2127}, "93": {"py/id": 1910}}, "38": {"17": {"py/id": 1927}, "90": {"py/id": 2012}}, "52": {"17": {"py/id": 1930}}, "72": {"18": {"py/id": 1948}}, "22": {"19": {"py/id": 1974}, "90": {"py/id": 2032}}, "21": {}, "51": {"21": {"py/id": 2130}}, "23": {"22": {"py/id": 2120}, "23": {"py/id": 2147}, "24": {"py/id": 2151}}, "95": {"23": {"py/id": 2138}}, "24": {"23": {"py/id": 2144}}, "26": {"4": {"py/id": 2236}}, "28": {}, "32": {"21": {"py/id": 2133}}, "41": {}, "42": {"41": {"py/id": 2172}, "43": {"py/id": 2181}}, "45": {"41": {"py/id": 2174}, "45": {"py/id": 2178}}, "43": {}, "7": {"90": {"py/id": 2009}}, "71": {"90": {"py/id": 2023}}, "91": {"17": {"py/id": 1937}, "29": {"py/id": 1986}, "90": {"py/id": 2026}}, "14": {"96": {"py/id": 2051}}, "97": {"86": {"py/id": 2286}}, "88": {"98": {"py/id": 2093}}, "99": {}, "6": {"99": {"py/id": 2206}}, "100": {"17": {"py/id": 1935}, "90": {"py/id": 2028}}, "70": {"50": {"py/id": 2103}, "64": {"py/id": 1890}}, "4": {}, "65": {"50": {"py/id": 2101}, "64": {"py/id": 1892}}, "68": {"50": {"py/id": 2107}, "62": {"py/id": 1882}}, "67": {"50": {"py/id": 2105}, "62": {"py/id": 1880}}, "69": {"64": {"py/id": 1894}}, "20": {}, "13": {"20": {"py/id": 2265}, "100": {"py/id": 2222}}, "89": {"17": {"py/id": 1939}, "29": {"py/id": 1990}}, "78": {"76": {"py/id": 1952}, "80": {"py/id": 2278}}, "82": {"76": {"py/id": 1954}, "81": {"py/id": 2281}}, "83": {"76": {"py/id": 1956}, "82": {"py/id": 2273}}, "79": {"76": {"py/id": 1962}}, "80": {"76": {"py/id": 1964}}, "81": {}, "86": {}, "9": {"90": {"py/id": 2030}}, "8": {"91": {"py/id": 2191}}, "11": {"100": {"py/id": 2220}}, "54": {"15": {"py/id": 2079}}, "49": {"20": {"py/id": 2267}}, "30": {"29": {"py/id": 1992}}, "34": {}, "102": {}, "103": {"102": {"py/id": 2298}}}, "adj": {"py/object": "networkx.classes.coreviews.AdjacencyView", "py/state": {"_atlas": {"py/id": 1838}}}, "succ": {"py/object": "networkx.classes.coreviews.AdjacencyView", "py/state": {"_atlas": {"py/id": 1838}}}, "edges": {"py/object": "networkx.classes.reportviews.OutEdgeView", "py/state": {"_graph": {"py/id": 1748}, "_adjdict": {"py/id": 1838}}}, "nodes": {"py/object": "networkx.classes.reportviews.NodeView", "py/state": {"_nodes": {"py/id": 1750}}}}}